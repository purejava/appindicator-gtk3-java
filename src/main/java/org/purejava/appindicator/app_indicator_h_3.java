// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_3 extends app_indicator_h_4 {

    app_indicator_h_3() {
        // Should not be called directly
    }

    private static class gtk_print_operation_set_print_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_print_settings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_print_settings(GtkPrintOperation *op, GtkPrintSettings *print_settings)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_print_settings$descriptor() {
        return gtk_print_operation_set_print_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_print_settings(GtkPrintOperation *op, GtkPrintSettings *print_settings)
     * }
     */
    public static MethodHandle gtk_print_operation_set_print_settings$handle() {
        return gtk_print_operation_set_print_settings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_print_settings(GtkPrintOperation *op, GtkPrintSettings *print_settings)
     * }
     */
    public static void gtk_print_operation_set_print_settings(MemorySegment op, MemorySegment print_settings) {
        var mh$ = gtk_print_operation_set_print_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_print_settings", op, print_settings);
            }
            mh$.invokeExact(op, print_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_print_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_print_settings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_operation_get_print_settings(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_print_settings$descriptor() {
        return gtk_print_operation_get_print_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_operation_get_print_settings(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_print_settings$handle() {
        return gtk_print_operation_get_print_settings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_operation_get_print_settings(GtkPrintOperation *op)
     * }
     */
    public static MemorySegment gtk_print_operation_get_print_settings(MemorySegment op) {
        var mh$ = gtk_print_operation_get_print_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_print_settings", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_job_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_job_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_job_name(GtkPrintOperation *op, const gchar *job_name)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_job_name$descriptor() {
        return gtk_print_operation_set_job_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_job_name(GtkPrintOperation *op, const gchar *job_name)
     * }
     */
    public static MethodHandle gtk_print_operation_set_job_name$handle() {
        return gtk_print_operation_set_job_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_job_name(GtkPrintOperation *op, const gchar *job_name)
     * }
     */
    public static void gtk_print_operation_set_job_name(MemorySegment op, MemorySegment job_name) {
        var mh$ = gtk_print_operation_set_job_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_job_name", op, job_name);
            }
            mh$.invokeExact(op, job_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_n_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_n_pages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_n_pages(GtkPrintOperation *op, gint n_pages)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_n_pages$descriptor() {
        return gtk_print_operation_set_n_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_n_pages(GtkPrintOperation *op, gint n_pages)
     * }
     */
    public static MethodHandle gtk_print_operation_set_n_pages$handle() {
        return gtk_print_operation_set_n_pages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_n_pages(GtkPrintOperation *op, gint n_pages)
     * }
     */
    public static void gtk_print_operation_set_n_pages(MemorySegment op, int n_pages) {
        var mh$ = gtk_print_operation_set_n_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_n_pages", op, n_pages);
            }
            mh$.invokeExact(op, n_pages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_current_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_current_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_current_page(GtkPrintOperation *op, gint current_page)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_current_page$descriptor() {
        return gtk_print_operation_set_current_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_current_page(GtkPrintOperation *op, gint current_page)
     * }
     */
    public static MethodHandle gtk_print_operation_set_current_page$handle() {
        return gtk_print_operation_set_current_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_current_page(GtkPrintOperation *op, gint current_page)
     * }
     */
    public static void gtk_print_operation_set_current_page(MemorySegment op, int current_page) {
        var mh$ = gtk_print_operation_set_current_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_current_page", op, current_page);
            }
            mh$.invokeExact(op, current_page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_use_full_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_use_full_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_use_full_page(GtkPrintOperation *op, gboolean full_page)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_use_full_page$descriptor() {
        return gtk_print_operation_set_use_full_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_use_full_page(GtkPrintOperation *op, gboolean full_page)
     * }
     */
    public static MethodHandle gtk_print_operation_set_use_full_page$handle() {
        return gtk_print_operation_set_use_full_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_use_full_page(GtkPrintOperation *op, gboolean full_page)
     * }
     */
    public static void gtk_print_operation_set_use_full_page(MemorySegment op, int full_page) {
        var mh$ = gtk_print_operation_set_use_full_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_use_full_page", op, full_page);
            }
            mh$.invokeExact(op, full_page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_unit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_unit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_unit(GtkPrintOperation *op, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_unit$descriptor() {
        return gtk_print_operation_set_unit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_unit(GtkPrintOperation *op, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_print_operation_set_unit$handle() {
        return gtk_print_operation_set_unit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_unit(GtkPrintOperation *op, GtkUnit unit)
     * }
     */
    public static void gtk_print_operation_set_unit(MemorySegment op, int unit) {
        var mh$ = gtk_print_operation_set_unit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_unit", op, unit);
            }
            mh$.invokeExact(op, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_export_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_export_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_export_filename(GtkPrintOperation *op, const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_export_filename$descriptor() {
        return gtk_print_operation_set_export_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_export_filename(GtkPrintOperation *op, const gchar *filename)
     * }
     */
    public static MethodHandle gtk_print_operation_set_export_filename$handle() {
        return gtk_print_operation_set_export_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_export_filename(GtkPrintOperation *op, const gchar *filename)
     * }
     */
    public static void gtk_print_operation_set_export_filename(MemorySegment op, MemorySegment filename) {
        var mh$ = gtk_print_operation_set_export_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_export_filename", op, filename);
            }
            mh$.invokeExact(op, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_track_print_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_track_print_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_track_print_status(GtkPrintOperation *op, gboolean track_status)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_track_print_status$descriptor() {
        return gtk_print_operation_set_track_print_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_track_print_status(GtkPrintOperation *op, gboolean track_status)
     * }
     */
    public static MethodHandle gtk_print_operation_set_track_print_status$handle() {
        return gtk_print_operation_set_track_print_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_track_print_status(GtkPrintOperation *op, gboolean track_status)
     * }
     */
    public static void gtk_print_operation_set_track_print_status(MemorySegment op, int track_status) {
        var mh$ = gtk_print_operation_set_track_print_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_track_print_status", op, track_status);
            }
            mh$.invokeExact(op, track_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_show_progress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_show_progress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_show_progress(GtkPrintOperation *op, gboolean show_progress)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_show_progress$descriptor() {
        return gtk_print_operation_set_show_progress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_show_progress(GtkPrintOperation *op, gboolean show_progress)
     * }
     */
    public static MethodHandle gtk_print_operation_set_show_progress$handle() {
        return gtk_print_operation_set_show_progress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_show_progress(GtkPrintOperation *op, gboolean show_progress)
     * }
     */
    public static void gtk_print_operation_set_show_progress(MemorySegment op, int show_progress) {
        var mh$ = gtk_print_operation_set_show_progress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_show_progress", op, show_progress);
            }
            mh$.invokeExact(op, show_progress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_allow_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_allow_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_allow_async(GtkPrintOperation *op, gboolean allow_async)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_allow_async$descriptor() {
        return gtk_print_operation_set_allow_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_allow_async(GtkPrintOperation *op, gboolean allow_async)
     * }
     */
    public static MethodHandle gtk_print_operation_set_allow_async$handle() {
        return gtk_print_operation_set_allow_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_allow_async(GtkPrintOperation *op, gboolean allow_async)
     * }
     */
    public static void gtk_print_operation_set_allow_async(MemorySegment op, int allow_async) {
        var mh$ = gtk_print_operation_set_allow_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_allow_async", op, allow_async);
            }
            mh$.invokeExact(op, allow_async);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_custom_tab_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_custom_tab_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_custom_tab_label(GtkPrintOperation *op, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_custom_tab_label$descriptor() {
        return gtk_print_operation_set_custom_tab_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_custom_tab_label(GtkPrintOperation *op, const gchar *label)
     * }
     */
    public static MethodHandle gtk_print_operation_set_custom_tab_label$handle() {
        return gtk_print_operation_set_custom_tab_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_custom_tab_label(GtkPrintOperation *op, const gchar *label)
     * }
     */
    public static void gtk_print_operation_set_custom_tab_label(MemorySegment op, MemorySegment label) {
        var mh$ = gtk_print_operation_set_custom_tab_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_custom_tab_label", op, label);
            }
            mh$.invokeExact(op, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintOperationResult gtk_print_operation_run(GtkPrintOperation *op, GtkPrintOperationAction action, GtkWindow *parent, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_run$descriptor() {
        return gtk_print_operation_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintOperationResult gtk_print_operation_run(GtkPrintOperation *op, GtkPrintOperationAction action, GtkWindow *parent, GError **error)
     * }
     */
    public static MethodHandle gtk_print_operation_run$handle() {
        return gtk_print_operation_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintOperationResult gtk_print_operation_run(GtkPrintOperation *op, GtkPrintOperationAction action, GtkWindow *parent, GError **error)
     * }
     */
    public static int gtk_print_operation_run(MemorySegment op, int action, MemorySegment parent, MemorySegment error) {
        var mh$ = gtk_print_operation_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_run", op, action, parent, error);
            }
            return (int)mh$.invokeExact(op, action, parent, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_get_error(GtkPrintOperation *op, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_error$descriptor() {
        return gtk_print_operation_get_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_get_error(GtkPrintOperation *op, GError **error)
     * }
     */
    public static MethodHandle gtk_print_operation_get_error$handle() {
        return gtk_print_operation_get_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_get_error(GtkPrintOperation *op, GError **error)
     * }
     */
    public static void gtk_print_operation_get_error(MemorySegment op, MemorySegment error) {
        var mh$ = gtk_print_operation_get_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_error", op, error);
            }
            mh$.invokeExact(op, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintStatus gtk_print_operation_get_status(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_status$descriptor() {
        return gtk_print_operation_get_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintStatus gtk_print_operation_get_status(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_status$handle() {
        return gtk_print_operation_get_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintStatus gtk_print_operation_get_status(GtkPrintOperation *op)
     * }
     */
    public static int gtk_print_operation_get_status(MemorySegment op) {
        var mh$ = gtk_print_operation_get_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_status", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_status_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_status_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_operation_get_status_string(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_status_string$descriptor() {
        return gtk_print_operation_get_status_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_operation_get_status_string(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_status_string$handle() {
        return gtk_print_operation_get_status_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_operation_get_status_string(GtkPrintOperation *op)
     * }
     */
    public static MemorySegment gtk_print_operation_get_status_string(MemorySegment op) {
        var mh$ = gtk_print_operation_get_status_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_status_string", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_is_finished {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_is_finished"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_is_finished(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_is_finished$descriptor() {
        return gtk_print_operation_is_finished.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_is_finished(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_is_finished$handle() {
        return gtk_print_operation_is_finished.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_is_finished(GtkPrintOperation *op)
     * }
     */
    public static int gtk_print_operation_is_finished(MemorySegment op) {
        var mh$ = gtk_print_operation_is_finished.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_is_finished", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_cancel(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_cancel$descriptor() {
        return gtk_print_operation_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_cancel(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_cancel$handle() {
        return gtk_print_operation_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_cancel(GtkPrintOperation *op)
     * }
     */
    public static void gtk_print_operation_cancel(MemorySegment op) {
        var mh$ = gtk_print_operation_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_cancel", op);
            }
            mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_draw_page_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_draw_page_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_draw_page_finish(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_draw_page_finish$descriptor() {
        return gtk_print_operation_draw_page_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_draw_page_finish(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_draw_page_finish$handle() {
        return gtk_print_operation_draw_page_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_draw_page_finish(GtkPrintOperation *op)
     * }
     */
    public static void gtk_print_operation_draw_page_finish(MemorySegment op) {
        var mh$ = gtk_print_operation_draw_page_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_draw_page_finish", op);
            }
            mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_defer_drawing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_defer_drawing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_defer_drawing(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_defer_drawing$descriptor() {
        return gtk_print_operation_set_defer_drawing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_defer_drawing(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_set_defer_drawing$handle() {
        return gtk_print_operation_set_defer_drawing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_defer_drawing(GtkPrintOperation *op)
     * }
     */
    public static void gtk_print_operation_set_defer_drawing(MemorySegment op) {
        var mh$ = gtk_print_operation_set_defer_drawing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_defer_drawing", op);
            }
            mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_support_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_support_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_support_selection(GtkPrintOperation *op, gboolean support_selection)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_support_selection$descriptor() {
        return gtk_print_operation_set_support_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_support_selection(GtkPrintOperation *op, gboolean support_selection)
     * }
     */
    public static MethodHandle gtk_print_operation_set_support_selection$handle() {
        return gtk_print_operation_set_support_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_support_selection(GtkPrintOperation *op, gboolean support_selection)
     * }
     */
    public static void gtk_print_operation_set_support_selection(MemorySegment op, int support_selection) {
        var mh$ = gtk_print_operation_set_support_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_support_selection", op, support_selection);
            }
            mh$.invokeExact(op, support_selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_support_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_support_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_support_selection(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_support_selection$descriptor() {
        return gtk_print_operation_get_support_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_support_selection(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_support_selection$handle() {
        return gtk_print_operation_get_support_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_support_selection(GtkPrintOperation *op)
     * }
     */
    public static int gtk_print_operation_get_support_selection(MemorySegment op) {
        var mh$ = gtk_print_operation_get_support_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_support_selection", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_has_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_has_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_has_selection(GtkPrintOperation *op, gboolean has_selection)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_has_selection$descriptor() {
        return gtk_print_operation_set_has_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_has_selection(GtkPrintOperation *op, gboolean has_selection)
     * }
     */
    public static MethodHandle gtk_print_operation_set_has_selection$handle() {
        return gtk_print_operation_set_has_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_has_selection(GtkPrintOperation *op, gboolean has_selection)
     * }
     */
    public static void gtk_print_operation_set_has_selection(MemorySegment op, int has_selection) {
        var mh$ = gtk_print_operation_set_has_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_has_selection", op, has_selection);
            }
            mh$.invokeExact(op, has_selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_has_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_has_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_has_selection(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_has_selection$descriptor() {
        return gtk_print_operation_get_has_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_has_selection(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_has_selection$handle() {
        return gtk_print_operation_get_has_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_has_selection(GtkPrintOperation *op)
     * }
     */
    public static int gtk_print_operation_get_has_selection(MemorySegment op) {
        var mh$ = gtk_print_operation_get_has_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_has_selection", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_embed_page_setup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_embed_page_setup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_embed_page_setup(GtkPrintOperation *op, gboolean embed)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_embed_page_setup$descriptor() {
        return gtk_print_operation_set_embed_page_setup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_embed_page_setup(GtkPrintOperation *op, gboolean embed)
     * }
     */
    public static MethodHandle gtk_print_operation_set_embed_page_setup$handle() {
        return gtk_print_operation_set_embed_page_setup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_embed_page_setup(GtkPrintOperation *op, gboolean embed)
     * }
     */
    public static void gtk_print_operation_set_embed_page_setup(MemorySegment op, int embed) {
        var mh$ = gtk_print_operation_set_embed_page_setup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_embed_page_setup", op, embed);
            }
            mh$.invokeExact(op, embed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_embed_page_setup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_embed_page_setup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_embed_page_setup(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_embed_page_setup$descriptor() {
        return gtk_print_operation_get_embed_page_setup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_embed_page_setup(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_embed_page_setup$handle() {
        return gtk_print_operation_get_embed_page_setup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_get_embed_page_setup(GtkPrintOperation *op)
     * }
     */
    public static int gtk_print_operation_get_embed_page_setup(MemorySegment op) {
        var mh$ = gtk_print_operation_get_embed_page_setup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_embed_page_setup", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_n_pages_to_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_n_pages_to_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_operation_get_n_pages_to_print(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_n_pages_to_print$descriptor() {
        return gtk_print_operation_get_n_pages_to_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_operation_get_n_pages_to_print(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_n_pages_to_print$handle() {
        return gtk_print_operation_get_n_pages_to_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_operation_get_n_pages_to_print(GtkPrintOperation *op)
     * }
     */
    public static int gtk_print_operation_get_n_pages_to_print(MemorySegment op) {
        var mh$ = gtk_print_operation_get_n_pages_to_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_n_pages_to_print", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_run_page_setup_dialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_run_page_setup_dialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_run_page_setup_dialog(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_run_page_setup_dialog$descriptor() {
        return gtk_print_run_page_setup_dialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_run_page_setup_dialog(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_run_page_setup_dialog$handle() {
        return gtk_print_run_page_setup_dialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_run_page_setup_dialog(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_run_page_setup_dialog(MemorySegment parent, MemorySegment page_setup, MemorySegment settings) {
        var mh$ = gtk_print_run_page_setup_dialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_run_page_setup_dialog", parent, page_setup, settings);
            }
            return (MemorySegment)mh$.invokeExact(parent, page_setup, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_run_page_setup_dialog_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_run_page_setup_dialog_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_run_page_setup_dialog_async(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings, GtkPageSetupDoneFunc done_cb, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_print_run_page_setup_dialog_async$descriptor() {
        return gtk_print_run_page_setup_dialog_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_run_page_setup_dialog_async(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings, GtkPageSetupDoneFunc done_cb, gpointer data)
     * }
     */
    public static MethodHandle gtk_print_run_page_setup_dialog_async$handle() {
        return gtk_print_run_page_setup_dialog_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_run_page_setup_dialog_async(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings, GtkPageSetupDoneFunc done_cb, gpointer data)
     * }
     */
    public static void gtk_print_run_page_setup_dialog_async(MemorySegment parent, MemorySegment page_setup, MemorySegment settings, MemorySegment done_cb, MemorySegment data) {
        var mh$ = gtk_print_run_page_setup_dialog_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_run_page_setup_dialog_async", parent, page_setup, settings, done_cb, data);
            }
            mh$.invokeExact(parent, page_setup, settings, done_cb, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_progress_bar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_get_type$descriptor() {
        return gtk_progress_bar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_progress_bar_get_type()
     * }
     */
    public static MethodHandle gtk_progress_bar_get_type$handle() {
        return gtk_progress_bar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_progress_bar_get_type()
     * }
     */
    public static long gtk_progress_bar_get_type() {
        var mh$ = gtk_progress_bar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_progress_bar_new()
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_new$descriptor() {
        return gtk_progress_bar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_progress_bar_new()
     * }
     */
    public static MethodHandle gtk_progress_bar_new$handle() {
        return gtk_progress_bar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_progress_bar_new()
     * }
     */
    public static MemorySegment gtk_progress_bar_new() {
        var mh$ = gtk_progress_bar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_pulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_pulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_pulse(GtkProgressBar *pbar)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_pulse$descriptor() {
        return gtk_progress_bar_pulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_pulse(GtkProgressBar *pbar)
     * }
     */
    public static MethodHandle gtk_progress_bar_pulse$handle() {
        return gtk_progress_bar_pulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_progress_bar_pulse(GtkProgressBar *pbar)
     * }
     */
    public static void gtk_progress_bar_pulse(MemorySegment pbar) {
        var mh$ = gtk_progress_bar_pulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_pulse", pbar);
            }
            mh$.invokeExact(pbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_text(GtkProgressBar *pbar, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_set_text$descriptor() {
        return gtk_progress_bar_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_text(GtkProgressBar *pbar, const gchar *text)
     * }
     */
    public static MethodHandle gtk_progress_bar_set_text$handle() {
        return gtk_progress_bar_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_text(GtkProgressBar *pbar, const gchar *text)
     * }
     */
    public static void gtk_progress_bar_set_text(MemorySegment pbar, MemorySegment text) {
        var mh$ = gtk_progress_bar_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_set_text", pbar, text);
            }
            mh$.invokeExact(pbar, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_set_fraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_set_fraction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_fraction(GtkProgressBar *pbar, gdouble fraction)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_set_fraction$descriptor() {
        return gtk_progress_bar_set_fraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_fraction(GtkProgressBar *pbar, gdouble fraction)
     * }
     */
    public static MethodHandle gtk_progress_bar_set_fraction$handle() {
        return gtk_progress_bar_set_fraction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_fraction(GtkProgressBar *pbar, gdouble fraction)
     * }
     */
    public static void gtk_progress_bar_set_fraction(MemorySegment pbar, double fraction) {
        var mh$ = gtk_progress_bar_set_fraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_set_fraction", pbar, fraction);
            }
            mh$.invokeExact(pbar, fraction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_set_pulse_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_set_pulse_step"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_pulse_step(GtkProgressBar *pbar, gdouble fraction)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_set_pulse_step$descriptor() {
        return gtk_progress_bar_set_pulse_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_pulse_step(GtkProgressBar *pbar, gdouble fraction)
     * }
     */
    public static MethodHandle gtk_progress_bar_set_pulse_step$handle() {
        return gtk_progress_bar_set_pulse_step.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_pulse_step(GtkProgressBar *pbar, gdouble fraction)
     * }
     */
    public static void gtk_progress_bar_set_pulse_step(MemorySegment pbar, double fraction) {
        var mh$ = gtk_progress_bar_set_pulse_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_set_pulse_step", pbar, fraction);
            }
            mh$.invokeExact(pbar, fraction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_set_inverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_set_inverted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_inverted(GtkProgressBar *pbar, gboolean inverted)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_set_inverted$descriptor() {
        return gtk_progress_bar_set_inverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_inverted(GtkProgressBar *pbar, gboolean inverted)
     * }
     */
    public static MethodHandle gtk_progress_bar_set_inverted$handle() {
        return gtk_progress_bar_set_inverted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_inverted(GtkProgressBar *pbar, gboolean inverted)
     * }
     */
    public static void gtk_progress_bar_set_inverted(MemorySegment pbar, int inverted) {
        var mh$ = gtk_progress_bar_set_inverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_set_inverted", pbar, inverted);
            }
            mh$.invokeExact(pbar, inverted);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_progress_bar_get_text(GtkProgressBar *pbar)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_get_text$descriptor() {
        return gtk_progress_bar_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_progress_bar_get_text(GtkProgressBar *pbar)
     * }
     */
    public static MethodHandle gtk_progress_bar_get_text$handle() {
        return gtk_progress_bar_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_progress_bar_get_text(GtkProgressBar *pbar)
     * }
     */
    public static MemorySegment gtk_progress_bar_get_text(MemorySegment pbar) {
        var mh$ = gtk_progress_bar_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_get_text", pbar);
            }
            return (MemorySegment)mh$.invokeExact(pbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_get_fraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_get_fraction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_progress_bar_get_fraction(GtkProgressBar *pbar)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_get_fraction$descriptor() {
        return gtk_progress_bar_get_fraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_progress_bar_get_fraction(GtkProgressBar *pbar)
     * }
     */
    public static MethodHandle gtk_progress_bar_get_fraction$handle() {
        return gtk_progress_bar_get_fraction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_progress_bar_get_fraction(GtkProgressBar *pbar)
     * }
     */
    public static double gtk_progress_bar_get_fraction(MemorySegment pbar) {
        var mh$ = gtk_progress_bar_get_fraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_get_fraction", pbar);
            }
            return (double)mh$.invokeExact(pbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_get_pulse_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_get_pulse_step"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_progress_bar_get_pulse_step(GtkProgressBar *pbar)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_get_pulse_step$descriptor() {
        return gtk_progress_bar_get_pulse_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_progress_bar_get_pulse_step(GtkProgressBar *pbar)
     * }
     */
    public static MethodHandle gtk_progress_bar_get_pulse_step$handle() {
        return gtk_progress_bar_get_pulse_step.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_progress_bar_get_pulse_step(GtkProgressBar *pbar)
     * }
     */
    public static double gtk_progress_bar_get_pulse_step(MemorySegment pbar) {
        var mh$ = gtk_progress_bar_get_pulse_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_get_pulse_step", pbar);
            }
            return (double)mh$.invokeExact(pbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_get_inverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_get_inverted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_progress_bar_get_inverted(GtkProgressBar *pbar)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_get_inverted$descriptor() {
        return gtk_progress_bar_get_inverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_progress_bar_get_inverted(GtkProgressBar *pbar)
     * }
     */
    public static MethodHandle gtk_progress_bar_get_inverted$handle() {
        return gtk_progress_bar_get_inverted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_progress_bar_get_inverted(GtkProgressBar *pbar)
     * }
     */
    public static int gtk_progress_bar_get_inverted(MemorySegment pbar) {
        var mh$ = gtk_progress_bar_get_inverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_get_inverted", pbar);
            }
            return (int)mh$.invokeExact(pbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_set_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_set_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_ellipsize(GtkProgressBar *pbar, PangoEllipsizeMode mode)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_set_ellipsize$descriptor() {
        return gtk_progress_bar_set_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_ellipsize(GtkProgressBar *pbar, PangoEllipsizeMode mode)
     * }
     */
    public static MethodHandle gtk_progress_bar_set_ellipsize$handle() {
        return gtk_progress_bar_set_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_ellipsize(GtkProgressBar *pbar, PangoEllipsizeMode mode)
     * }
     */
    public static void gtk_progress_bar_set_ellipsize(MemorySegment pbar, int mode) {
        var mh$ = gtk_progress_bar_set_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_set_ellipsize", pbar, mode);
            }
            mh$.invokeExact(pbar, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_get_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_get_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_progress_bar_get_ellipsize(GtkProgressBar *pbar)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_get_ellipsize$descriptor() {
        return gtk_progress_bar_get_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_progress_bar_get_ellipsize(GtkProgressBar *pbar)
     * }
     */
    public static MethodHandle gtk_progress_bar_get_ellipsize$handle() {
        return gtk_progress_bar_get_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_progress_bar_get_ellipsize(GtkProgressBar *pbar)
     * }
     */
    public static int gtk_progress_bar_get_ellipsize(MemorySegment pbar) {
        var mh$ = gtk_progress_bar_get_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_get_ellipsize", pbar);
            }
            return (int)mh$.invokeExact(pbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_set_show_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_set_show_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_show_text(GtkProgressBar *pbar, gboolean show_text)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_set_show_text$descriptor() {
        return gtk_progress_bar_set_show_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_show_text(GtkProgressBar *pbar, gboolean show_text)
     * }
     */
    public static MethodHandle gtk_progress_bar_set_show_text$handle() {
        return gtk_progress_bar_set_show_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_progress_bar_set_show_text(GtkProgressBar *pbar, gboolean show_text)
     * }
     */
    public static void gtk_progress_bar_set_show_text(MemorySegment pbar, int show_text) {
        var mh$ = gtk_progress_bar_set_show_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_set_show_text", pbar, show_text);
            }
            mh$.invokeExact(pbar, show_text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_progress_bar_get_show_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_progress_bar_get_show_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_progress_bar_get_show_text(GtkProgressBar *pbar)
     * }
     */
    public static FunctionDescriptor gtk_progress_bar_get_show_text$descriptor() {
        return gtk_progress_bar_get_show_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_progress_bar_get_show_text(GtkProgressBar *pbar)
     * }
     */
    public static MethodHandle gtk_progress_bar_get_show_text$handle() {
        return gtk_progress_bar_get_show_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_progress_bar_get_show_text(GtkProgressBar *pbar)
     * }
     */
    public static int gtk_progress_bar_get_show_text(MemorySegment pbar) {
        var mh$ = gtk_progress_bar_get_show_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_progress_bar_get_show_text", pbar);
            }
            return (int)mh$.invokeExact(pbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_radio_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_radio_button_get_type$descriptor() {
        return gtk_radio_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_radio_button_get_type()
     * }
     */
    public static MethodHandle gtk_radio_button_get_type$handle() {
        return gtk_radio_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_radio_button_get_type()
     * }
     */
    public static long gtk_radio_button_get_type() {
        var mh$ = gtk_radio_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new(GSList *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_new$descriptor() {
        return gtk_radio_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new(GSList *group)
     * }
     */
    public static MethodHandle gtk_radio_button_new$handle() {
        return gtk_radio_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new(GSList *group)
     * }
     */
    public static MemorySegment gtk_radio_button_new(MemorySegment group) {
        var mh$ = gtk_radio_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_new", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_new_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_new_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_from_widget(GtkRadioButton *radio_group_member)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_new_from_widget$descriptor() {
        return gtk_radio_button_new_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_from_widget(GtkRadioButton *radio_group_member)
     * }
     */
    public static MethodHandle gtk_radio_button_new_from_widget$handle() {
        return gtk_radio_button_new_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_from_widget(GtkRadioButton *radio_group_member)
     * }
     */
    public static MemorySegment gtk_radio_button_new_from_widget(MemorySegment radio_group_member) {
        var mh$ = gtk_radio_button_new_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_new_from_widget", radio_group_member);
            }
            return (MemorySegment)mh$.invokeExact(radio_group_member);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_label(GSList *group, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_new_with_label$descriptor() {
        return gtk_radio_button_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_label(GSList *group, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_button_new_with_label$handle() {
        return gtk_radio_button_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_label(GSList *group, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_button_new_with_label(MemorySegment group, MemorySegment label) {
        var mh$ = gtk_radio_button_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_new_with_label", group, label);
            }
            return (MemorySegment)mh$.invokeExact(group, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_new_with_label_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_new_with_label_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_label_from_widget(GtkRadioButton *radio_group_member, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_new_with_label_from_widget$descriptor() {
        return gtk_radio_button_new_with_label_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_label_from_widget(GtkRadioButton *radio_group_member, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_button_new_with_label_from_widget$handle() {
        return gtk_radio_button_new_with_label_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_label_from_widget(GtkRadioButton *radio_group_member, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_button_new_with_label_from_widget(MemorySegment radio_group_member, MemorySegment label) {
        var mh$ = gtk_radio_button_new_with_label_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_new_with_label_from_widget", radio_group_member, label);
            }
            return (MemorySegment)mh$.invokeExact(radio_group_member, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_mnemonic(GSList *group, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_new_with_mnemonic$descriptor() {
        return gtk_radio_button_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_mnemonic(GSList *group, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_button_new_with_mnemonic$handle() {
        return gtk_radio_button_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_mnemonic(GSList *group, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_button_new_with_mnemonic(MemorySegment group, MemorySegment label) {
        var mh$ = gtk_radio_button_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_new_with_mnemonic", group, label);
            }
            return (MemorySegment)mh$.invokeExact(group, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_new_with_mnemonic_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_new_with_mnemonic_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton *radio_group_member, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_new_with_mnemonic_from_widget$descriptor() {
        return gtk_radio_button_new_with_mnemonic_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton *radio_group_member, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_button_new_with_mnemonic_from_widget$handle() {
        return gtk_radio_button_new_with_mnemonic_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton *radio_group_member, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_button_new_with_mnemonic_from_widget(MemorySegment radio_group_member, MemorySegment label) {
        var mh$ = gtk_radio_button_new_with_mnemonic_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_new_with_mnemonic_from_widget", radio_group_member, label);
            }
            return (MemorySegment)mh$.invokeExact(radio_group_member, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_button_get_group(GtkRadioButton *radio_button)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_get_group$descriptor() {
        return gtk_radio_button_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_button_get_group(GtkRadioButton *radio_button)
     * }
     */
    public static MethodHandle gtk_radio_button_get_group$handle() {
        return gtk_radio_button_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_radio_button_get_group(GtkRadioButton *radio_button)
     * }
     */
    public static MemorySegment gtk_radio_button_get_group(MemorySegment radio_button) {
        var mh$ = gtk_radio_button_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_get_group", radio_button);
            }
            return (MemorySegment)mh$.invokeExact(radio_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_set_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_set_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_button_set_group(GtkRadioButton *radio_button, GSList *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_set_group$descriptor() {
        return gtk_radio_button_set_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_button_set_group(GtkRadioButton *radio_button, GSList *group)
     * }
     */
    public static MethodHandle gtk_radio_button_set_group$handle() {
        return gtk_radio_button_set_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_button_set_group(GtkRadioButton *radio_button, GSList *group)
     * }
     */
    public static void gtk_radio_button_set_group(MemorySegment radio_button, MemorySegment group) {
        var mh$ = gtk_radio_button_set_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_set_group", radio_button, group);
            }
            mh$.invokeExact(radio_button, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_button_join_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_button_join_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_button_join_group(GtkRadioButton *radio_button, GtkRadioButton *group_source)
     * }
     */
    public static FunctionDescriptor gtk_radio_button_join_group$descriptor() {
        return gtk_radio_button_join_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_button_join_group(GtkRadioButton *radio_button, GtkRadioButton *group_source)
     * }
     */
    public static MethodHandle gtk_radio_button_join_group$handle() {
        return gtk_radio_button_join_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_button_join_group(GtkRadioButton *radio_button, GtkRadioButton *group_source)
     * }
     */
    public static void gtk_radio_button_join_group(MemorySegment radio_button, MemorySegment group_source) {
        var mh$ = gtk_radio_button_join_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_button_join_group", radio_button, group_source);
            }
            mh$.invokeExact(radio_button, group_source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_radio_menu_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_get_type$descriptor() {
        return gtk_radio_menu_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_radio_menu_item_get_type()
     * }
     */
    public static MethodHandle gtk_radio_menu_item_get_type$handle() {
        return gtk_radio_menu_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_radio_menu_item_get_type()
     * }
     */
    public static long gtk_radio_menu_item_get_type() {
        var mh$ = gtk_radio_menu_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new(GSList *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_new$descriptor() {
        return gtk_radio_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new(GSList *group)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_new$handle() {
        return gtk_radio_menu_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new(GSList *group)
     * }
     */
    public static MemorySegment gtk_radio_menu_item_new(MemorySegment group) {
        var mh$ = gtk_radio_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_new", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_label(GSList *group, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_new_with_label$descriptor() {
        return gtk_radio_menu_item_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_label(GSList *group, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_new_with_label$handle() {
        return gtk_radio_menu_item_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_label(GSList *group, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_menu_item_new_with_label(MemorySegment group, MemorySegment label) {
        var mh$ = gtk_radio_menu_item_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_new_with_label", group, label);
            }
            return (MemorySegment)mh$.invokeExact(group, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_mnemonic(GSList *group, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_new_with_mnemonic$descriptor() {
        return gtk_radio_menu_item_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_mnemonic(GSList *group, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_new_with_mnemonic$handle() {
        return gtk_radio_menu_item_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_mnemonic(GSList *group, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_menu_item_new_with_mnemonic(MemorySegment group, MemorySegment label) {
        var mh$ = gtk_radio_menu_item_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_new_with_mnemonic", group, label);
            }
            return (MemorySegment)mh$.invokeExact(group, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_new_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_new_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_from_widget(GtkRadioMenuItem *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_new_from_widget$descriptor() {
        return gtk_radio_menu_item_new_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_from_widget(GtkRadioMenuItem *group)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_new_from_widget$handle() {
        return gtk_radio_menu_item_new_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_from_widget(GtkRadioMenuItem *group)
     * }
     */
    public static MemorySegment gtk_radio_menu_item_new_from_widget(MemorySegment group) {
        var mh$ = gtk_radio_menu_item_new_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_new_from_widget", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_new_with_mnemonic_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_new_with_mnemonic_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem *group, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_new_with_mnemonic_from_widget$descriptor() {
        return gtk_radio_menu_item_new_with_mnemonic_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem *group, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_new_with_mnemonic_from_widget$handle() {
        return gtk_radio_menu_item_new_with_mnemonic_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem *group, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_menu_item_new_with_mnemonic_from_widget(MemorySegment group, MemorySegment label) {
        var mh$ = gtk_radio_menu_item_new_with_mnemonic_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_new_with_mnemonic_from_widget", group, label);
            }
            return (MemorySegment)mh$.invokeExact(group, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_new_with_label_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_new_with_label_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem *group, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_new_with_label_from_widget$descriptor() {
        return gtk_radio_menu_item_new_with_label_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem *group, const gchar *label)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_new_with_label_from_widget$handle() {
        return gtk_radio_menu_item_new_with_label_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem *group, const gchar *label)
     * }
     */
    public static MemorySegment gtk_radio_menu_item_new_with_label_from_widget(MemorySegment group, MemorySegment label) {
        var mh$ = gtk_radio_menu_item_new_with_label_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_new_with_label_from_widget", group, label);
            }
            return (MemorySegment)mh$.invokeExact(group, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_menu_item_get_group(GtkRadioMenuItem *radio_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_get_group$descriptor() {
        return gtk_radio_menu_item_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_menu_item_get_group(GtkRadioMenuItem *radio_menu_item)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_get_group$handle() {
        return gtk_radio_menu_item_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_radio_menu_item_get_group(GtkRadioMenuItem *radio_menu_item)
     * }
     */
    public static MemorySegment gtk_radio_menu_item_get_group(MemorySegment radio_menu_item) {
        var mh$ = gtk_radio_menu_item_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_get_group", radio_menu_item);
            }
            return (MemorySegment)mh$.invokeExact(radio_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_set_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_set_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_menu_item_set_group(GtkRadioMenuItem *radio_menu_item, GSList *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_set_group$descriptor() {
        return gtk_radio_menu_item_set_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_menu_item_set_group(GtkRadioMenuItem *radio_menu_item, GSList *group)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_set_group$handle() {
        return gtk_radio_menu_item_set_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_menu_item_set_group(GtkRadioMenuItem *radio_menu_item, GSList *group)
     * }
     */
    public static void gtk_radio_menu_item_set_group(MemorySegment radio_menu_item, MemorySegment group) {
        var mh$ = gtk_radio_menu_item_set_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_set_group", radio_menu_item, group);
            }
            mh$.invokeExact(radio_menu_item, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_menu_item_join_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_menu_item_join_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_menu_item_join_group(GtkRadioMenuItem *radio_menu_item, GtkRadioMenuItem *group_source)
     * }
     */
    public static FunctionDescriptor gtk_radio_menu_item_join_group$descriptor() {
        return gtk_radio_menu_item_join_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_menu_item_join_group(GtkRadioMenuItem *radio_menu_item, GtkRadioMenuItem *group_source)
     * }
     */
    public static MethodHandle gtk_radio_menu_item_join_group$handle() {
        return gtk_radio_menu_item_join_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_menu_item_join_group(GtkRadioMenuItem *radio_menu_item, GtkRadioMenuItem *group_source)
     * }
     */
    public static void gtk_radio_menu_item_join_group(MemorySegment radio_menu_item, MemorySegment group_source) {
        var mh$ = gtk_radio_menu_item_join_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_menu_item_join_group", radio_menu_item, group_source);
            }
            mh$.invokeExact(radio_menu_item, group_source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_tool_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_tool_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_toggle_tool_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_toggle_tool_button_get_type$descriptor() {
        return gtk_toggle_tool_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_toggle_tool_button_get_type()
     * }
     */
    public static MethodHandle gtk_toggle_tool_button_get_type$handle() {
        return gtk_toggle_tool_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_toggle_tool_button_get_type()
     * }
     */
    public static long gtk_toggle_tool_button_get_type() {
        var mh$ = gtk_toggle_tool_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_tool_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_tool_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_tool_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toggle_tool_button_new()
     * }
     */
    public static FunctionDescriptor gtk_toggle_tool_button_new$descriptor() {
        return gtk_toggle_tool_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toggle_tool_button_new()
     * }
     */
    public static MethodHandle gtk_toggle_tool_button_new$handle() {
        return gtk_toggle_tool_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toggle_tool_button_new()
     * }
     */
    public static MemorySegment gtk_toggle_tool_button_new() {
        var mh$ = gtk_toggle_tool_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_tool_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_tool_button_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_tool_button_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toggle_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_toggle_tool_button_new_from_stock$descriptor() {
        return gtk_toggle_tool_button_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toggle_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_toggle_tool_button_new_from_stock$handle() {
        return gtk_toggle_tool_button_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toggle_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_toggle_tool_button_new_from_stock(MemorySegment stock_id) {
        var mh$ = gtk_toggle_tool_button_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_tool_button_new_from_stock", stock_id);
            }
            return (MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_tool_button_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_tool_button_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_tool_button_set_active(GtkToggleToolButton *button, gboolean is_active)
     * }
     */
    public static FunctionDescriptor gtk_toggle_tool_button_set_active$descriptor() {
        return gtk_toggle_tool_button_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_tool_button_set_active(GtkToggleToolButton *button, gboolean is_active)
     * }
     */
    public static MethodHandle gtk_toggle_tool_button_set_active$handle() {
        return gtk_toggle_tool_button_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_tool_button_set_active(GtkToggleToolButton *button, gboolean is_active)
     * }
     */
    public static void gtk_toggle_tool_button_set_active(MemorySegment button, int is_active) {
        var mh$ = gtk_toggle_tool_button_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_tool_button_set_active", button, is_active);
            }
            mh$.invokeExact(button, is_active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_tool_button_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_tool_button_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_tool_button_get_active(GtkToggleToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_toggle_tool_button_get_active$descriptor() {
        return gtk_toggle_tool_button_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_tool_button_get_active(GtkToggleToolButton *button)
     * }
     */
    public static MethodHandle gtk_toggle_tool_button_get_active$handle() {
        return gtk_toggle_tool_button_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_tool_button_get_active(GtkToggleToolButton *button)
     * }
     */
    public static int gtk_toggle_tool_button_get_active(MemorySegment button) {
        var mh$ = gtk_toggle_tool_button_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_tool_button_get_active", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_tool_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_tool_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_radio_tool_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_radio_tool_button_get_type$descriptor() {
        return gtk_radio_tool_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_radio_tool_button_get_type()
     * }
     */
    public static MethodHandle gtk_radio_tool_button_get_type$handle() {
        return gtk_radio_tool_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_radio_tool_button_get_type()
     * }
     */
    public static long gtk_radio_tool_button_get_type() {
        var mh$ = gtk_radio_tool_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_tool_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_tool_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_tool_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new(GSList *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_tool_button_new$descriptor() {
        return gtk_radio_tool_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new(GSList *group)
     * }
     */
    public static MethodHandle gtk_radio_tool_button_new$handle() {
        return gtk_radio_tool_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new(GSList *group)
     * }
     */
    public static MemorySegment gtk_radio_tool_button_new(MemorySegment group) {
        var mh$ = gtk_radio_tool_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_tool_button_new", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_tool_button_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_tool_button_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_from_stock(GSList *group, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_radio_tool_button_new_from_stock$descriptor() {
        return gtk_radio_tool_button_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_from_stock(GSList *group, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_radio_tool_button_new_from_stock$handle() {
        return gtk_radio_tool_button_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_from_stock(GSList *group, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_radio_tool_button_new_from_stock(MemorySegment group, MemorySegment stock_id) {
        var mh$ = gtk_radio_tool_button_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_tool_button_new_from_stock", group, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(group, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_tool_button_new_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_tool_button_new_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_from_widget(GtkRadioToolButton *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_tool_button_new_from_widget$descriptor() {
        return gtk_radio_tool_button_new_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_from_widget(GtkRadioToolButton *group)
     * }
     */
    public static MethodHandle gtk_radio_tool_button_new_from_widget$handle() {
        return gtk_radio_tool_button_new_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_from_widget(GtkRadioToolButton *group)
     * }
     */
    public static MemorySegment gtk_radio_tool_button_new_from_widget(MemorySegment group) {
        var mh$ = gtk_radio_tool_button_new_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_tool_button_new_from_widget", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_tool_button_new_with_stock_from_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_tool_button_new_with_stock_from_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton *group, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_radio_tool_button_new_with_stock_from_widget$descriptor() {
        return gtk_radio_tool_button_new_with_stock_from_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton *group, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_radio_tool_button_new_with_stock_from_widget$handle() {
        return gtk_radio_tool_button_new_with_stock_from_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton *group, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_radio_tool_button_new_with_stock_from_widget(MemorySegment group, MemorySegment stock_id) {
        var mh$ = gtk_radio_tool_button_new_with_stock_from_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_tool_button_new_with_stock_from_widget", group, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(group, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_tool_button_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_tool_button_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_tool_button_get_group(GtkRadioToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_radio_tool_button_get_group$descriptor() {
        return gtk_radio_tool_button_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_tool_button_get_group(GtkRadioToolButton *button)
     * }
     */
    public static MethodHandle gtk_radio_tool_button_get_group$handle() {
        return gtk_radio_tool_button_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_radio_tool_button_get_group(GtkRadioToolButton *button)
     * }
     */
    public static MemorySegment gtk_radio_tool_button_get_group(MemorySegment button) {
        var mh$ = gtk_radio_tool_button_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_tool_button_get_group", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_tool_button_set_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_tool_button_set_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_tool_button_set_group(GtkRadioToolButton *button, GSList *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_tool_button_set_group$descriptor() {
        return gtk_radio_tool_button_set_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_tool_button_set_group(GtkRadioToolButton *button, GSList *group)
     * }
     */
    public static MethodHandle gtk_radio_tool_button_set_group$handle() {
        return gtk_radio_tool_button_set_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_tool_button_set_group(GtkRadioToolButton *button, GSList *group)
     * }
     */
    public static void gtk_radio_tool_button_set_group(MemorySegment button, MemorySegment group) {
        var mh$ = gtk_radio_tool_button_set_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_tool_button_set_group", button, group);
            }
            mh$.invokeExact(button, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_range_get_type()
     * }
     */
    public static FunctionDescriptor gtk_range_get_type$descriptor() {
        return gtk_range_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_range_get_type()
     * }
     */
    public static MethodHandle gtk_range_get_type$handle() {
        return gtk_range_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_range_get_type()
     * }
     */
    public static long gtk_range_get_type() {
        var mh$ = gtk_range_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_adjustment(GtkRange *range, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_range_set_adjustment$descriptor() {
        return gtk_range_set_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_adjustment(GtkRange *range, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_range_set_adjustment$handle() {
        return gtk_range_set_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_adjustment(GtkRange *range, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_range_set_adjustment(MemorySegment range, MemorySegment adjustment) {
        var mh$ = gtk_range_set_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_adjustment", range, adjustment);
            }
            mh$.invokeExact(range, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_range_get_adjustment(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_adjustment$descriptor() {
        return gtk_range_get_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_range_get_adjustment(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_adjustment$handle() {
        return gtk_range_get_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_range_get_adjustment(GtkRange *range)
     * }
     */
    public static MemorySegment gtk_range_get_adjustment(MemorySegment range) {
        var mh$ = gtk_range_get_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_adjustment", range);
            }
            return (MemorySegment)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_inverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_inverted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_inverted(GtkRange *range, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_range_set_inverted$descriptor() {
        return gtk_range_set_inverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_inverted(GtkRange *range, gboolean setting)
     * }
     */
    public static MethodHandle gtk_range_set_inverted$handle() {
        return gtk_range_set_inverted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_inverted(GtkRange *range, gboolean setting)
     * }
     */
    public static void gtk_range_set_inverted(MemorySegment range, int setting) {
        var mh$ = gtk_range_set_inverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_inverted", range, setting);
            }
            mh$.invokeExact(range, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_inverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_inverted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_inverted(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_inverted$descriptor() {
        return gtk_range_get_inverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_inverted(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_inverted$handle() {
        return gtk_range_get_inverted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_inverted(GtkRange *range)
     * }
     */
    public static int gtk_range_get_inverted(MemorySegment range) {
        var mh$ = gtk_range_get_inverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_inverted", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_flippable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_flippable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_flippable(GtkRange *range, gboolean flippable)
     * }
     */
    public static FunctionDescriptor gtk_range_set_flippable$descriptor() {
        return gtk_range_set_flippable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_flippable(GtkRange *range, gboolean flippable)
     * }
     */
    public static MethodHandle gtk_range_set_flippable$handle() {
        return gtk_range_set_flippable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_flippable(GtkRange *range, gboolean flippable)
     * }
     */
    public static void gtk_range_set_flippable(MemorySegment range, int flippable) {
        var mh$ = gtk_range_set_flippable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_flippable", range, flippable);
            }
            mh$.invokeExact(range, flippable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_flippable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_flippable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_flippable(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_flippable$descriptor() {
        return gtk_range_get_flippable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_flippable(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_flippable$handle() {
        return gtk_range_get_flippable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_flippable(GtkRange *range)
     * }
     */
    public static int gtk_range_get_flippable(MemorySegment range) {
        var mh$ = gtk_range_get_flippable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_flippable", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_slider_size_fixed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_slider_size_fixed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_slider_size_fixed(GtkRange *range, gboolean size_fixed)
     * }
     */
    public static FunctionDescriptor gtk_range_set_slider_size_fixed$descriptor() {
        return gtk_range_set_slider_size_fixed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_slider_size_fixed(GtkRange *range, gboolean size_fixed)
     * }
     */
    public static MethodHandle gtk_range_set_slider_size_fixed$handle() {
        return gtk_range_set_slider_size_fixed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_slider_size_fixed(GtkRange *range, gboolean size_fixed)
     * }
     */
    public static void gtk_range_set_slider_size_fixed(MemorySegment range, int size_fixed) {
        var mh$ = gtk_range_set_slider_size_fixed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_slider_size_fixed", range, size_fixed);
            }
            mh$.invokeExact(range, size_fixed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_slider_size_fixed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_slider_size_fixed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_slider_size_fixed(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_slider_size_fixed$descriptor() {
        return gtk_range_get_slider_size_fixed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_slider_size_fixed(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_slider_size_fixed$handle() {
        return gtk_range_get_slider_size_fixed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_slider_size_fixed(GtkRange *range)
     * }
     */
    public static int gtk_range_get_slider_size_fixed(MemorySegment range) {
        var mh$ = gtk_range_get_slider_size_fixed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_slider_size_fixed", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_min_slider_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_min_slider_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_min_slider_size(GtkRange *range, gint min_size)
     * }
     */
    public static FunctionDescriptor gtk_range_set_min_slider_size$descriptor() {
        return gtk_range_set_min_slider_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_min_slider_size(GtkRange *range, gint min_size)
     * }
     */
    public static MethodHandle gtk_range_set_min_slider_size$handle() {
        return gtk_range_set_min_slider_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_min_slider_size(GtkRange *range, gint min_size)
     * }
     */
    public static void gtk_range_set_min_slider_size(MemorySegment range, int min_size) {
        var mh$ = gtk_range_set_min_slider_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_min_slider_size", range, min_size);
            }
            mh$.invokeExact(range, min_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_min_slider_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_min_slider_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_range_get_min_slider_size(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_min_slider_size$descriptor() {
        return gtk_range_get_min_slider_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_range_get_min_slider_size(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_min_slider_size$handle() {
        return gtk_range_get_min_slider_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_range_get_min_slider_size(GtkRange *range)
     * }
     */
    public static int gtk_range_get_min_slider_size(MemorySegment range) {
        var mh$ = gtk_range_get_min_slider_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_min_slider_size", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_range_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_range_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_get_range_rect(GtkRange *range, GdkRectangle *range_rect)
     * }
     */
    public static FunctionDescriptor gtk_range_get_range_rect$descriptor() {
        return gtk_range_get_range_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_get_range_rect(GtkRange *range, GdkRectangle *range_rect)
     * }
     */
    public static MethodHandle gtk_range_get_range_rect$handle() {
        return gtk_range_get_range_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_get_range_rect(GtkRange *range, GdkRectangle *range_rect)
     * }
     */
    public static void gtk_range_get_range_rect(MemorySegment range, MemorySegment range_rect) {
        var mh$ = gtk_range_get_range_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_range_rect", range, range_rect);
            }
            mh$.invokeExact(range, range_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_slider_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_slider_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_get_slider_range(GtkRange *range, gint *slider_start, gint *slider_end)
     * }
     */
    public static FunctionDescriptor gtk_range_get_slider_range$descriptor() {
        return gtk_range_get_slider_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_get_slider_range(GtkRange *range, gint *slider_start, gint *slider_end)
     * }
     */
    public static MethodHandle gtk_range_get_slider_range$handle() {
        return gtk_range_get_slider_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_get_slider_range(GtkRange *range, gint *slider_start, gint *slider_end)
     * }
     */
    public static void gtk_range_get_slider_range(MemorySegment range, MemorySegment slider_start, MemorySegment slider_end) {
        var mh$ = gtk_range_get_slider_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_slider_range", range, slider_start, slider_end);
            }
            mh$.invokeExact(range, slider_start, slider_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_lower_stepper_sensitivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_lower_stepper_sensitivity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_lower_stepper_sensitivity(GtkRange *range, GtkSensitivityType sensitivity)
     * }
     */
    public static FunctionDescriptor gtk_range_set_lower_stepper_sensitivity$descriptor() {
        return gtk_range_set_lower_stepper_sensitivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_lower_stepper_sensitivity(GtkRange *range, GtkSensitivityType sensitivity)
     * }
     */
    public static MethodHandle gtk_range_set_lower_stepper_sensitivity$handle() {
        return gtk_range_set_lower_stepper_sensitivity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_lower_stepper_sensitivity(GtkRange *range, GtkSensitivityType sensitivity)
     * }
     */
    public static void gtk_range_set_lower_stepper_sensitivity(MemorySegment range, int sensitivity) {
        var mh$ = gtk_range_set_lower_stepper_sensitivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_lower_stepper_sensitivity", range, sensitivity);
            }
            mh$.invokeExact(range, sensitivity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_lower_stepper_sensitivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_lower_stepper_sensitivity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_range_get_lower_stepper_sensitivity(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_lower_stepper_sensitivity$descriptor() {
        return gtk_range_get_lower_stepper_sensitivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_range_get_lower_stepper_sensitivity(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_lower_stepper_sensitivity$handle() {
        return gtk_range_get_lower_stepper_sensitivity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_range_get_lower_stepper_sensitivity(GtkRange *range)
     * }
     */
    public static int gtk_range_get_lower_stepper_sensitivity(MemorySegment range) {
        var mh$ = gtk_range_get_lower_stepper_sensitivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_lower_stepper_sensitivity", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_upper_stepper_sensitivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_upper_stepper_sensitivity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_upper_stepper_sensitivity(GtkRange *range, GtkSensitivityType sensitivity)
     * }
     */
    public static FunctionDescriptor gtk_range_set_upper_stepper_sensitivity$descriptor() {
        return gtk_range_set_upper_stepper_sensitivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_upper_stepper_sensitivity(GtkRange *range, GtkSensitivityType sensitivity)
     * }
     */
    public static MethodHandle gtk_range_set_upper_stepper_sensitivity$handle() {
        return gtk_range_set_upper_stepper_sensitivity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_upper_stepper_sensitivity(GtkRange *range, GtkSensitivityType sensitivity)
     * }
     */
    public static void gtk_range_set_upper_stepper_sensitivity(MemorySegment range, int sensitivity) {
        var mh$ = gtk_range_set_upper_stepper_sensitivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_upper_stepper_sensitivity", range, sensitivity);
            }
            mh$.invokeExact(range, sensitivity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_upper_stepper_sensitivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_upper_stepper_sensitivity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_range_get_upper_stepper_sensitivity(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_upper_stepper_sensitivity$descriptor() {
        return gtk_range_get_upper_stepper_sensitivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_range_get_upper_stepper_sensitivity(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_upper_stepper_sensitivity$handle() {
        return gtk_range_get_upper_stepper_sensitivity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_range_get_upper_stepper_sensitivity(GtkRange *range)
     * }
     */
    public static int gtk_range_get_upper_stepper_sensitivity(MemorySegment range) {
        var mh$ = gtk_range_get_upper_stepper_sensitivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_upper_stepper_sensitivity", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_increments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_increments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_increments(GtkRange *range, gdouble step, gdouble page)
     * }
     */
    public static FunctionDescriptor gtk_range_set_increments$descriptor() {
        return gtk_range_set_increments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_increments(GtkRange *range, gdouble step, gdouble page)
     * }
     */
    public static MethodHandle gtk_range_set_increments$handle() {
        return gtk_range_set_increments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_increments(GtkRange *range, gdouble step, gdouble page)
     * }
     */
    public static void gtk_range_set_increments(MemorySegment range, double step, double page) {
        var mh$ = gtk_range_set_increments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_increments", range, step, page);
            }
            mh$.invokeExact(range, step, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_range(GtkRange *range, gdouble min, gdouble max)
     * }
     */
    public static FunctionDescriptor gtk_range_set_range$descriptor() {
        return gtk_range_set_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_range(GtkRange *range, gdouble min, gdouble max)
     * }
     */
    public static MethodHandle gtk_range_set_range$handle() {
        return gtk_range_set_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_range(GtkRange *range, gdouble min, gdouble max)
     * }
     */
    public static void gtk_range_set_range(MemorySegment range, double min, double max) {
        var mh$ = gtk_range_set_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_range", range, min, max);
            }
            mh$.invokeExact(range, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_value(GtkRange *range, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_range_set_value$descriptor() {
        return gtk_range_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_value(GtkRange *range, gdouble value)
     * }
     */
    public static MethodHandle gtk_range_set_value$handle() {
        return gtk_range_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_value(GtkRange *range, gdouble value)
     * }
     */
    public static void gtk_range_set_value(MemorySegment range, double value) {
        var mh$ = gtk_range_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_value", range, value);
            }
            mh$.invokeExact(range, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_range_get_value(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_value$descriptor() {
        return gtk_range_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_range_get_value(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_value$handle() {
        return gtk_range_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_range_get_value(GtkRange *range)
     * }
     */
    public static double gtk_range_get_value(MemorySegment range) {
        var mh$ = gtk_range_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_value", range);
            }
            return (double)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_show_fill_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_show_fill_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_show_fill_level(GtkRange *range, gboolean show_fill_level)
     * }
     */
    public static FunctionDescriptor gtk_range_set_show_fill_level$descriptor() {
        return gtk_range_set_show_fill_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_show_fill_level(GtkRange *range, gboolean show_fill_level)
     * }
     */
    public static MethodHandle gtk_range_set_show_fill_level$handle() {
        return gtk_range_set_show_fill_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_show_fill_level(GtkRange *range, gboolean show_fill_level)
     * }
     */
    public static void gtk_range_set_show_fill_level(MemorySegment range, int show_fill_level) {
        var mh$ = gtk_range_set_show_fill_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_show_fill_level", range, show_fill_level);
            }
            mh$.invokeExact(range, show_fill_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_show_fill_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_show_fill_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_show_fill_level(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_show_fill_level$descriptor() {
        return gtk_range_get_show_fill_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_show_fill_level(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_show_fill_level$handle() {
        return gtk_range_get_show_fill_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_show_fill_level(GtkRange *range)
     * }
     */
    public static int gtk_range_get_show_fill_level(MemorySegment range) {
        var mh$ = gtk_range_get_show_fill_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_show_fill_level", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_restrict_to_fill_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_restrict_to_fill_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_restrict_to_fill_level(GtkRange *range, gboolean restrict_to_fill_level)
     * }
     */
    public static FunctionDescriptor gtk_range_set_restrict_to_fill_level$descriptor() {
        return gtk_range_set_restrict_to_fill_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_restrict_to_fill_level(GtkRange *range, gboolean restrict_to_fill_level)
     * }
     */
    public static MethodHandle gtk_range_set_restrict_to_fill_level$handle() {
        return gtk_range_set_restrict_to_fill_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_restrict_to_fill_level(GtkRange *range, gboolean restrict_to_fill_level)
     * }
     */
    public static void gtk_range_set_restrict_to_fill_level(MemorySegment range, int restrict_to_fill_level) {
        var mh$ = gtk_range_set_restrict_to_fill_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_restrict_to_fill_level", range, restrict_to_fill_level);
            }
            mh$.invokeExact(range, restrict_to_fill_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_restrict_to_fill_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_restrict_to_fill_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_restrict_to_fill_level(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_restrict_to_fill_level$descriptor() {
        return gtk_range_get_restrict_to_fill_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_restrict_to_fill_level(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_restrict_to_fill_level$handle() {
        return gtk_range_get_restrict_to_fill_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_range_get_restrict_to_fill_level(GtkRange *range)
     * }
     */
    public static int gtk_range_get_restrict_to_fill_level(MemorySegment range) {
        var mh$ = gtk_range_get_restrict_to_fill_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_restrict_to_fill_level", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_fill_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_fill_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_fill_level(GtkRange *range, gdouble fill_level)
     * }
     */
    public static FunctionDescriptor gtk_range_set_fill_level$descriptor() {
        return gtk_range_set_fill_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_fill_level(GtkRange *range, gdouble fill_level)
     * }
     */
    public static MethodHandle gtk_range_set_fill_level$handle() {
        return gtk_range_set_fill_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_fill_level(GtkRange *range, gdouble fill_level)
     * }
     */
    public static void gtk_range_set_fill_level(MemorySegment range, double fill_level) {
        var mh$ = gtk_range_set_fill_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_fill_level", range, fill_level);
            }
            mh$.invokeExact(range, fill_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_fill_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_fill_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_range_get_fill_level(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_fill_level$descriptor() {
        return gtk_range_get_fill_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_range_get_fill_level(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_fill_level$handle() {
        return gtk_range_get_fill_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_range_get_fill_level(GtkRange *range)
     * }
     */
    public static double gtk_range_get_fill_level(MemorySegment range) {
        var mh$ = gtk_range_get_fill_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_fill_level", range);
            }
            return (double)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_set_round_digits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_set_round_digits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_range_set_round_digits(GtkRange *range, gint round_digits)
     * }
     */
    public static FunctionDescriptor gtk_range_set_round_digits$descriptor() {
        return gtk_range_set_round_digits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_range_set_round_digits(GtkRange *range, gint round_digits)
     * }
     */
    public static MethodHandle gtk_range_set_round_digits$handle() {
        return gtk_range_set_round_digits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_range_set_round_digits(GtkRange *range, gint round_digits)
     * }
     */
    public static void gtk_range_set_round_digits(MemorySegment range, int round_digits) {
        var mh$ = gtk_range_set_round_digits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_set_round_digits", range, round_digits);
            }
            mh$.invokeExact(range, round_digits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_range_get_round_digits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_range_get_round_digits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_range_get_round_digits(GtkRange *range)
     * }
     */
    public static FunctionDescriptor gtk_range_get_round_digits$descriptor() {
        return gtk_range_get_round_digits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_range_get_round_digits(GtkRange *range)
     * }
     */
    public static MethodHandle gtk_range_get_round_digits$handle() {
        return gtk_range_get_round_digits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_range_get_round_digits(GtkRange *range)
     * }
     */
    public static int gtk_range_get_round_digits(MemorySegment range) {
        var mh$ = gtk_range_get_round_digits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_range_get_round_digits", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_RECENT_MANAGER_ERROR_NOT_FOUND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_MANAGER_ERROR_NOT_FOUND = 0
     * }
     */
    public static int GTK_RECENT_MANAGER_ERROR_NOT_FOUND() {
        return GTK_RECENT_MANAGER_ERROR_NOT_FOUND;
    }
    private static final int GTK_RECENT_MANAGER_ERROR_INVALID_URI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_MANAGER_ERROR_INVALID_URI = 1
     * }
     */
    public static int GTK_RECENT_MANAGER_ERROR_INVALID_URI() {
        return GTK_RECENT_MANAGER_ERROR_INVALID_URI;
    }
    private static final int GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = 2
     * }
     */
    public static int GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING() {
        return GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING;
    }
    private static final int GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = 3
     * }
     */
    public static int GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED() {
        return GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED;
    }
    private static final int GTK_RECENT_MANAGER_ERROR_READ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_MANAGER_ERROR_READ = 4
     * }
     */
    public static int GTK_RECENT_MANAGER_ERROR_READ() {
        return GTK_RECENT_MANAGER_ERROR_READ;
    }
    private static final int GTK_RECENT_MANAGER_ERROR_WRITE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_MANAGER_ERROR_WRITE = 5
     * }
     */
    public static int GTK_RECENT_MANAGER_ERROR_WRITE() {
        return GTK_RECENT_MANAGER_ERROR_WRITE;
    }
    private static final int GTK_RECENT_MANAGER_ERROR_UNKNOWN = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_MANAGER_ERROR_UNKNOWN = 6
     * }
     */
    public static int GTK_RECENT_MANAGER_ERROR_UNKNOWN() {
        return GTK_RECENT_MANAGER_ERROR_UNKNOWN;
    }

    private static class gtk_recent_manager_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gtk_recent_manager_error_quark()
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_error_quark$descriptor() {
        return gtk_recent_manager_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gtk_recent_manager_error_quark()
     * }
     */
    public static MethodHandle gtk_recent_manager_error_quark$handle() {
        return gtk_recent_manager_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gtk_recent_manager_error_quark()
     * }
     */
    public static int gtk_recent_manager_error_quark() {
        var mh$ = gtk_recent_manager_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_manager_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_get_type$descriptor() {
        return gtk_recent_manager_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_manager_get_type()
     * }
     */
    public static MethodHandle gtk_recent_manager_get_type$handle() {
        return gtk_recent_manager_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_manager_get_type()
     * }
     */
    public static long gtk_recent_manager_get_type() {
        var mh$ = gtk_recent_manager_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentManager *gtk_recent_manager_new()
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_new$descriptor() {
        return gtk_recent_manager_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentManager *gtk_recent_manager_new()
     * }
     */
    public static MethodHandle gtk_recent_manager_new$handle() {
        return gtk_recent_manager_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentManager *gtk_recent_manager_new()
     * }
     */
    public static MemorySegment gtk_recent_manager_new() {
        var mh$ = gtk_recent_manager_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentManager *gtk_recent_manager_get_default()
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_get_default$descriptor() {
        return gtk_recent_manager_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentManager *gtk_recent_manager_get_default()
     * }
     */
    public static MethodHandle gtk_recent_manager_get_default$handle() {
        return gtk_recent_manager_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentManager *gtk_recent_manager_get_default()
     * }
     */
    public static MemorySegment gtk_recent_manager_get_default() {
        var mh$ = gtk_recent_manager_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_add_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_add_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_add_item(GtkRecentManager *manager, const gchar *uri)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_add_item$descriptor() {
        return gtk_recent_manager_add_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_add_item(GtkRecentManager *manager, const gchar *uri)
     * }
     */
    public static MethodHandle gtk_recent_manager_add_item$handle() {
        return gtk_recent_manager_add_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_add_item(GtkRecentManager *manager, const gchar *uri)
     * }
     */
    public static int gtk_recent_manager_add_item(MemorySegment manager, MemorySegment uri) {
        var mh$ = gtk_recent_manager_add_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_add_item", manager, uri);
            }
            return (int)mh$.invokeExact(manager, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_add_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_add_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_add_full(GtkRecentManager *manager, const gchar *uri, const GtkRecentData *recent_data)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_add_full$descriptor() {
        return gtk_recent_manager_add_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_add_full(GtkRecentManager *manager, const gchar *uri, const GtkRecentData *recent_data)
     * }
     */
    public static MethodHandle gtk_recent_manager_add_full$handle() {
        return gtk_recent_manager_add_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_add_full(GtkRecentManager *manager, const gchar *uri, const GtkRecentData *recent_data)
     * }
     */
    public static int gtk_recent_manager_add_full(MemorySegment manager, MemorySegment uri, MemorySegment recent_data) {
        var mh$ = gtk_recent_manager_add_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_add_full", manager, uri, recent_data);
            }
            return (int)mh$.invokeExact(manager, uri, recent_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_remove_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_remove_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_remove_item(GtkRecentManager *manager, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_remove_item$descriptor() {
        return gtk_recent_manager_remove_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_remove_item(GtkRecentManager *manager, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle gtk_recent_manager_remove_item$handle() {
        return gtk_recent_manager_remove_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_remove_item(GtkRecentManager *manager, const gchar *uri, GError **error)
     * }
     */
    public static int gtk_recent_manager_remove_item(MemorySegment manager, MemorySegment uri, MemorySegment error) {
        var mh$ = gtk_recent_manager_remove_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_remove_item", manager, uri, error);
            }
            return (int)mh$.invokeExact(manager, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_lookup_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_lookup_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_manager_lookup_item(GtkRecentManager *manager, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_lookup_item$descriptor() {
        return gtk_recent_manager_lookup_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_manager_lookup_item(GtkRecentManager *manager, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle gtk_recent_manager_lookup_item$handle() {
        return gtk_recent_manager_lookup_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_manager_lookup_item(GtkRecentManager *manager, const gchar *uri, GError **error)
     * }
     */
    public static MemorySegment gtk_recent_manager_lookup_item(MemorySegment manager, MemorySegment uri, MemorySegment error) {
        var mh$ = gtk_recent_manager_lookup_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_lookup_item", manager, uri, error);
            }
            return (MemorySegment)mh$.invokeExact(manager, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_has_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_has_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_has_item(GtkRecentManager *manager, const gchar *uri)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_has_item$descriptor() {
        return gtk_recent_manager_has_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_has_item(GtkRecentManager *manager, const gchar *uri)
     * }
     */
    public static MethodHandle gtk_recent_manager_has_item$handle() {
        return gtk_recent_manager_has_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_has_item(GtkRecentManager *manager, const gchar *uri)
     * }
     */
    public static int gtk_recent_manager_has_item(MemorySegment manager, MemorySegment uri) {
        var mh$ = gtk_recent_manager_has_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_has_item", manager, uri);
            }
            return (int)mh$.invokeExact(manager, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_move_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_move_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_move_item(GtkRecentManager *manager, const gchar *uri, const gchar *new_uri, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_move_item$descriptor() {
        return gtk_recent_manager_move_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_move_item(GtkRecentManager *manager, const gchar *uri, const gchar *new_uri, GError **error)
     * }
     */
    public static MethodHandle gtk_recent_manager_move_item$handle() {
        return gtk_recent_manager_move_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_manager_move_item(GtkRecentManager *manager, const gchar *uri, const gchar *new_uri, GError **error)
     * }
     */
    public static int gtk_recent_manager_move_item(MemorySegment manager, MemorySegment uri, MemorySegment new_uri, MemorySegment error) {
        var mh$ = gtk_recent_manager_move_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_move_item", manager, uri, new_uri, error);
            }
            return (int)mh$.invokeExact(manager, uri, new_uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_get_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_get_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_recent_manager_get_items(GtkRecentManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_get_items$descriptor() {
        return gtk_recent_manager_get_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_recent_manager_get_items(GtkRecentManager *manager)
     * }
     */
    public static MethodHandle gtk_recent_manager_get_items$handle() {
        return gtk_recent_manager_get_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_recent_manager_get_items(GtkRecentManager *manager)
     * }
     */
    public static MemorySegment gtk_recent_manager_get_items(MemorySegment manager) {
        var mh$ = gtk_recent_manager_get_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_get_items", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_purge_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_purge_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_recent_manager_purge_items(GtkRecentManager *manager, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_purge_items$descriptor() {
        return gtk_recent_manager_purge_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_recent_manager_purge_items(GtkRecentManager *manager, GError **error)
     * }
     */
    public static MethodHandle gtk_recent_manager_purge_items$handle() {
        return gtk_recent_manager_purge_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_recent_manager_purge_items(GtkRecentManager *manager, GError **error)
     * }
     */
    public static int gtk_recent_manager_purge_items(MemorySegment manager, MemorySegment error) {
        var mh$ = gtk_recent_manager_purge_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_purge_items", manager, error);
            }
            return (int)mh$.invokeExact(manager, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_info_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_type$descriptor() {
        return gtk_recent_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_info_get_type()
     * }
     */
    public static MethodHandle gtk_recent_info_get_type$handle() {
        return gtk_recent_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_info_get_type()
     * }
     */
    public static long gtk_recent_info_get_type() {
        var mh$ = gtk_recent_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_info_ref(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_ref$descriptor() {
        return gtk_recent_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_info_ref(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_ref$handle() {
        return gtk_recent_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_info_ref(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_ref(MemorySegment info) {
        var mh$ = gtk_recent_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_info_unref(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_unref$descriptor() {
        return gtk_recent_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_info_unref(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_unref$handle() {
        return gtk_recent_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_info_unref(GtkRecentInfo *info)
     * }
     */
    public static void gtk_recent_info_unref(MemorySegment info) {
        var mh$ = gtk_recent_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_uri(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_uri$descriptor() {
        return gtk_recent_info_get_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_uri(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_uri$handle() {
        return gtk_recent_info_get_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_uri(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_get_uri(MemorySegment info) {
        var mh$ = gtk_recent_info_get_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_uri", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_display_name(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_display_name$descriptor() {
        return gtk_recent_info_get_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_display_name(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_display_name$handle() {
        return gtk_recent_info_get_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_display_name(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_get_display_name(MemorySegment info) {
        var mh$ = gtk_recent_info_get_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_display_name", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_description(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_description$descriptor() {
        return gtk_recent_info_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_description(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_description$handle() {
        return gtk_recent_info_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_description(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_get_description(MemorySegment info) {
        var mh$ = gtk_recent_info_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_description", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_mime_type(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_mime_type$descriptor() {
        return gtk_recent_info_get_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_mime_type(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_mime_type$handle() {
        return gtk_recent_info_get_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_info_get_mime_type(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_get_mime_type(MemorySegment info) {
        var mh$ = gtk_recent_info_get_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_mime_type", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_added {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_added"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_added(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_added$descriptor() {
        return gtk_recent_info_get_added.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_added(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_added$handle() {
        return gtk_recent_info_get_added.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_added(GtkRecentInfo *info)
     * }
     */
    public static long gtk_recent_info_get_added(MemorySegment info) {
        var mh$ = gtk_recent_info_get_added.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_added", info);
            }
            return (long)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_modified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_modified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_modified(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_modified$descriptor() {
        return gtk_recent_info_get_modified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_modified(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_modified$handle() {
        return gtk_recent_info_get_modified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_modified(GtkRecentInfo *info)
     * }
     */
    public static long gtk_recent_info_get_modified(MemorySegment info) {
        var mh$ = gtk_recent_info_get_modified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_modified", info);
            }
            return (long)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_visited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_visited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_visited(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_visited$descriptor() {
        return gtk_recent_info_get_visited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_visited(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_visited$handle() {
        return gtk_recent_info_get_visited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern time_t gtk_recent_info_get_visited(GtkRecentInfo *info)
     * }
     */
    public static long gtk_recent_info_get_visited(MemorySegment info) {
        var mh$ = gtk_recent_info_get_visited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_visited", info);
            }
            return (long)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_private_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_private_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_get_private_hint(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_private_hint$descriptor() {
        return gtk_recent_info_get_private_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_get_private_hint(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_private_hint$handle() {
        return gtk_recent_info_get_private_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_get_private_hint(GtkRecentInfo *info)
     * }
     */
    public static int gtk_recent_info_get_private_hint(MemorySegment info) {
        var mh$ = gtk_recent_info_get_private_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_private_hint", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_application_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_application_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_get_application_info(GtkRecentInfo *info, const gchar *app_name, const gchar **app_exec, guint *count, time_t *time_)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_application_info$descriptor() {
        return gtk_recent_info_get_application_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_get_application_info(GtkRecentInfo *info, const gchar *app_name, const gchar **app_exec, guint *count, time_t *time_)
     * }
     */
    public static MethodHandle gtk_recent_info_get_application_info$handle() {
        return gtk_recent_info_get_application_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_get_application_info(GtkRecentInfo *info, const gchar *app_name, const gchar **app_exec, guint *count, time_t *time_)
     * }
     */
    public static int gtk_recent_info_get_application_info(MemorySegment info, MemorySegment app_name, MemorySegment app_exec, MemorySegment count, MemorySegment time_) {
        var mh$ = gtk_recent_info_get_application_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_application_info", info, app_name, app_exec, count, time_);
            }
            return (int)mh$.invokeExact(info, app_name, app_exec, count, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_create_app_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_create_app_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *gtk_recent_info_create_app_info(GtkRecentInfo *info, const gchar *app_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_create_app_info$descriptor() {
        return gtk_recent_info_create_app_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *gtk_recent_info_create_app_info(GtkRecentInfo *info, const gchar *app_name, GError **error)
     * }
     */
    public static MethodHandle gtk_recent_info_create_app_info$handle() {
        return gtk_recent_info_create_app_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *gtk_recent_info_create_app_info(GtkRecentInfo *info, const gchar *app_name, GError **error)
     * }
     */
    public static MemorySegment gtk_recent_info_create_app_info(MemorySegment info, MemorySegment app_name, MemorySegment error) {
        var mh$ = gtk_recent_info_create_app_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_create_app_info", info, app_name, error);
            }
            return (MemorySegment)mh$.invokeExact(info, app_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_applications {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_applications"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_recent_info_get_applications(GtkRecentInfo *info, gsize *length)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_applications$descriptor() {
        return gtk_recent_info_get_applications.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_recent_info_get_applications(GtkRecentInfo *info, gsize *length)
     * }
     */
    public static MethodHandle gtk_recent_info_get_applications$handle() {
        return gtk_recent_info_get_applications.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_recent_info_get_applications(GtkRecentInfo *info, gsize *length)
     * }
     */
    public static MemorySegment gtk_recent_info_get_applications(MemorySegment info, MemorySegment length) {
        var mh$ = gtk_recent_info_get_applications.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_applications", info, length);
            }
            return (MemorySegment)mh$.invokeExact(info, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_last_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_last_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_last_application(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_last_application$descriptor() {
        return gtk_recent_info_last_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_last_application(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_last_application$handle() {
        return gtk_recent_info_last_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_last_application(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_last_application(MemorySegment info) {
        var mh$ = gtk_recent_info_last_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_last_application", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_has_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_has_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_has_application(GtkRecentInfo *info, const gchar *app_name)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_has_application$descriptor() {
        return gtk_recent_info_has_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_has_application(GtkRecentInfo *info, const gchar *app_name)
     * }
     */
    public static MethodHandle gtk_recent_info_has_application$handle() {
        return gtk_recent_info_has_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_has_application(GtkRecentInfo *info, const gchar *app_name)
     * }
     */
    public static int gtk_recent_info_has_application(MemorySegment info, MemorySegment app_name) {
        var mh$ = gtk_recent_info_has_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_has_application", info, app_name);
            }
            return (int)mh$.invokeExact(info, app_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_groups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_recent_info_get_groups(GtkRecentInfo *info, gsize *length)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_groups$descriptor() {
        return gtk_recent_info_get_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_recent_info_get_groups(GtkRecentInfo *info, gsize *length)
     * }
     */
    public static MethodHandle gtk_recent_info_get_groups$handle() {
        return gtk_recent_info_get_groups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_recent_info_get_groups(GtkRecentInfo *info, gsize *length)
     * }
     */
    public static MemorySegment gtk_recent_info_get_groups(MemorySegment info, MemorySegment length) {
        var mh$ = gtk_recent_info_get_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_groups", info, length);
            }
            return (MemorySegment)mh$.invokeExact(info, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_has_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_has_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_has_group(GtkRecentInfo *info, const gchar *group_name)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_has_group$descriptor() {
        return gtk_recent_info_has_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_has_group(GtkRecentInfo *info, const gchar *group_name)
     * }
     */
    public static MethodHandle gtk_recent_info_has_group$handle() {
        return gtk_recent_info_has_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_has_group(GtkRecentInfo *info, const gchar *group_name)
     * }
     */
    public static int gtk_recent_info_has_group(MemorySegment info, MemorySegment group_name) {
        var mh$ = gtk_recent_info_has_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_has_group", info, group_name);
            }
            return (int)mh$.invokeExact(info, group_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_recent_info_get_icon(GtkRecentInfo *info, gint size)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_icon$descriptor() {
        return gtk_recent_info_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_recent_info_get_icon(GtkRecentInfo *info, gint size)
     * }
     */
    public static MethodHandle gtk_recent_info_get_icon$handle() {
        return gtk_recent_info_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_recent_info_get_icon(GtkRecentInfo *info, gint size)
     * }
     */
    public static MemorySegment gtk_recent_info_get_icon(MemorySegment info, int size) {
        var mh$ = gtk_recent_info_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_icon", info, size);
            }
            return (MemorySegment)mh$.invokeExact(info, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *gtk_recent_info_get_gicon(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_gicon$descriptor() {
        return gtk_recent_info_get_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *gtk_recent_info_get_gicon(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_gicon$handle() {
        return gtk_recent_info_get_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *gtk_recent_info_get_gicon(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_get_gicon(MemorySegment info) {
        var mh$ = gtk_recent_info_get_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_gicon", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_short_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_short_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_get_short_name(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_short_name$descriptor() {
        return gtk_recent_info_get_short_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_get_short_name(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_short_name$handle() {
        return gtk_recent_info_get_short_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_get_short_name(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_get_short_name(MemorySegment info) {
        var mh$ = gtk_recent_info_get_short_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_short_name", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_uri_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_uri_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_get_uri_display(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_uri_display$descriptor() {
        return gtk_recent_info_get_uri_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_get_uri_display(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_uri_display$handle() {
        return gtk_recent_info_get_uri_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_recent_info_get_uri_display(GtkRecentInfo *info)
     * }
     */
    public static MemorySegment gtk_recent_info_get_uri_display(MemorySegment info) {
        var mh$ = gtk_recent_info_get_uri_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_uri_display", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_get_age {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_get_age"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_recent_info_get_age(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_get_age$descriptor() {
        return gtk_recent_info_get_age.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_recent_info_get_age(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_get_age$handle() {
        return gtk_recent_info_get_age.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_recent_info_get_age(GtkRecentInfo *info)
     * }
     */
    public static int gtk_recent_info_get_age(MemorySegment info) {
        var mh$ = gtk_recent_info_get_age.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_get_age", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_is_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_is_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_is_local(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_is_local$descriptor() {
        return gtk_recent_info_is_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_is_local(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_is_local$handle() {
        return gtk_recent_info_is_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_is_local(GtkRecentInfo *info)
     * }
     */
    public static int gtk_recent_info_is_local(MemorySegment info) {
        var mh$ = gtk_recent_info_is_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_is_local", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_exists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_exists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_exists(GtkRecentInfo *info)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_exists$descriptor() {
        return gtk_recent_info_exists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_exists(GtkRecentInfo *info)
     * }
     */
    public static MethodHandle gtk_recent_info_exists$handle() {
        return gtk_recent_info_exists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_exists(GtkRecentInfo *info)
     * }
     */
    public static int gtk_recent_info_exists(MemorySegment info) {
        var mh$ = gtk_recent_info_exists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_exists", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_info_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_info_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_match(GtkRecentInfo *info_a, GtkRecentInfo *info_b)
     * }
     */
    public static FunctionDescriptor gtk_recent_info_match$descriptor() {
        return gtk_recent_info_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_match(GtkRecentInfo *info_a, GtkRecentInfo *info_b)
     * }
     */
    public static MethodHandle gtk_recent_info_match$handle() {
        return gtk_recent_info_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_info_match(GtkRecentInfo *info_a, GtkRecentInfo *info_b)
     * }
     */
    public static int gtk_recent_info_match(MemorySegment info_a, MemorySegment info_b) {
        var mh$ = gtk_recent_info_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_info_match", info_a, info_b);
            }
            return (int)mh$.invokeExact(info_a, info_b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_recent_manager_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_recent_manager_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_recent_manager_sync()
     * }
     */
    public static FunctionDescriptor _gtk_recent_manager_sync$descriptor() {
        return _gtk_recent_manager_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_recent_manager_sync()
     * }
     */
    public static MethodHandle _gtk_recent_manager_sync$handle() {
        return _gtk_recent_manager_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_recent_manager_sync()
     * }
     */
    public static void _gtk_recent_manager_sync() {
        var mh$ = _gtk_recent_manager_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_recent_manager_sync");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_RECENT_FILTER_URI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_FILTER_URI = 1
     * }
     */
    public static int GTK_RECENT_FILTER_URI() {
        return GTK_RECENT_FILTER_URI;
    }
    private static final int GTK_RECENT_FILTER_DISPLAY_NAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_FILTER_DISPLAY_NAME = 2
     * }
     */
    public static int GTK_RECENT_FILTER_DISPLAY_NAME() {
        return GTK_RECENT_FILTER_DISPLAY_NAME;
    }
    private static final int GTK_RECENT_FILTER_MIME_TYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_FILTER_MIME_TYPE = 4
     * }
     */
    public static int GTK_RECENT_FILTER_MIME_TYPE() {
        return GTK_RECENT_FILTER_MIME_TYPE;
    }
    private static final int GTK_RECENT_FILTER_APPLICATION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_FILTER_APPLICATION = 8
     * }
     */
    public static int GTK_RECENT_FILTER_APPLICATION() {
        return GTK_RECENT_FILTER_APPLICATION;
    }
    private static final int GTK_RECENT_FILTER_GROUP = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_FILTER_GROUP = 16
     * }
     */
    public static int GTK_RECENT_FILTER_GROUP() {
        return GTK_RECENT_FILTER_GROUP;
    }
    private static final int GTK_RECENT_FILTER_AGE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_FILTER_AGE = 32
     * }
     */
    public static int GTK_RECENT_FILTER_AGE() {
        return GTK_RECENT_FILTER_AGE;
    }

    private static class gtk_recent_filter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_filter_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_get_type$descriptor() {
        return gtk_recent_filter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_filter_get_type()
     * }
     */
    public static MethodHandle gtk_recent_filter_get_type$handle() {
        return gtk_recent_filter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_filter_get_type()
     * }
     */
    public static long gtk_recent_filter_get_type() {
        var mh$ = gtk_recent_filter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentFilter *gtk_recent_filter_new()
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_new$descriptor() {
        return gtk_recent_filter_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentFilter *gtk_recent_filter_new()
     * }
     */
    public static MethodHandle gtk_recent_filter_new$handle() {
        return gtk_recent_filter_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentFilter *gtk_recent_filter_new()
     * }
     */
    public static MemorySegment gtk_recent_filter_new() {
        var mh$ = gtk_recent_filter_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_set_name(GtkRecentFilter *filter, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_set_name$descriptor() {
        return gtk_recent_filter_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_set_name(GtkRecentFilter *filter, const gchar *name)
     * }
     */
    public static MethodHandle gtk_recent_filter_set_name$handle() {
        return gtk_recent_filter_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_set_name(GtkRecentFilter *filter, const gchar *name)
     * }
     */
    public static void gtk_recent_filter_set_name(MemorySegment filter, MemorySegment name) {
        var mh$ = gtk_recent_filter_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_set_name", filter, name);
            }
            mh$.invokeExact(filter, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_filter_get_name(GtkRecentFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_get_name$descriptor() {
        return gtk_recent_filter_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_filter_get_name(GtkRecentFilter *filter)
     * }
     */
    public static MethodHandle gtk_recent_filter_get_name$handle() {
        return gtk_recent_filter_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_recent_filter_get_name(GtkRecentFilter *filter)
     * }
     */
    public static MemorySegment gtk_recent_filter_get_name(MemorySegment filter) {
        var mh$ = gtk_recent_filter_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_get_name", filter);
            }
            return (MemorySegment)mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_add_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_add_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_mime_type(GtkRecentFilter *filter, const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_add_mime_type$descriptor() {
        return gtk_recent_filter_add_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_mime_type(GtkRecentFilter *filter, const gchar *mime_type)
     * }
     */
    public static MethodHandle gtk_recent_filter_add_mime_type$handle() {
        return gtk_recent_filter_add_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_mime_type(GtkRecentFilter *filter, const gchar *mime_type)
     * }
     */
    public static void gtk_recent_filter_add_mime_type(MemorySegment filter, MemorySegment mime_type) {
        var mh$ = gtk_recent_filter_add_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_add_mime_type", filter, mime_type);
            }
            mh$.invokeExact(filter, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_add_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_add_pattern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_pattern(GtkRecentFilter *filter, const gchar *pattern)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_add_pattern$descriptor() {
        return gtk_recent_filter_add_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_pattern(GtkRecentFilter *filter, const gchar *pattern)
     * }
     */
    public static MethodHandle gtk_recent_filter_add_pattern$handle() {
        return gtk_recent_filter_add_pattern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_pattern(GtkRecentFilter *filter, const gchar *pattern)
     * }
     */
    public static void gtk_recent_filter_add_pattern(MemorySegment filter, MemorySegment pattern) {
        var mh$ = gtk_recent_filter_add_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_add_pattern", filter, pattern);
            }
            mh$.invokeExact(filter, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_add_pixbuf_formats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_add_pixbuf_formats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_pixbuf_formats(GtkRecentFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_add_pixbuf_formats$descriptor() {
        return gtk_recent_filter_add_pixbuf_formats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_pixbuf_formats(GtkRecentFilter *filter)
     * }
     */
    public static MethodHandle gtk_recent_filter_add_pixbuf_formats$handle() {
        return gtk_recent_filter_add_pixbuf_formats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_pixbuf_formats(GtkRecentFilter *filter)
     * }
     */
    public static void gtk_recent_filter_add_pixbuf_formats(MemorySegment filter) {
        var mh$ = gtk_recent_filter_add_pixbuf_formats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_add_pixbuf_formats", filter);
            }
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_add_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_add_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_application(GtkRecentFilter *filter, const gchar *application)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_add_application$descriptor() {
        return gtk_recent_filter_add_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_application(GtkRecentFilter *filter, const gchar *application)
     * }
     */
    public static MethodHandle gtk_recent_filter_add_application$handle() {
        return gtk_recent_filter_add_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_application(GtkRecentFilter *filter, const gchar *application)
     * }
     */
    public static void gtk_recent_filter_add_application(MemorySegment filter, MemorySegment application) {
        var mh$ = gtk_recent_filter_add_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_add_application", filter, application);
            }
            mh$.invokeExact(filter, application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_add_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_add_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_group(GtkRecentFilter *filter, const gchar *group)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_add_group$descriptor() {
        return gtk_recent_filter_add_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_group(GtkRecentFilter *filter, const gchar *group)
     * }
     */
    public static MethodHandle gtk_recent_filter_add_group$handle() {
        return gtk_recent_filter_add_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_group(GtkRecentFilter *filter, const gchar *group)
     * }
     */
    public static void gtk_recent_filter_add_group(MemorySegment filter, MemorySegment group) {
        var mh$ = gtk_recent_filter_add_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_add_group", filter, group);
            }
            mh$.invokeExact(filter, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_add_age {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_add_age"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_age(GtkRecentFilter *filter, gint days)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_add_age$descriptor() {
        return gtk_recent_filter_add_age.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_age(GtkRecentFilter *filter, gint days)
     * }
     */
    public static MethodHandle gtk_recent_filter_add_age$handle() {
        return gtk_recent_filter_add_age.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_age(GtkRecentFilter *filter, gint days)
     * }
     */
    public static void gtk_recent_filter_add_age(MemorySegment filter, int days) {
        var mh$ = gtk_recent_filter_add_age.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_add_age", filter, days);
            }
            mh$.invokeExact(filter, days);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_add_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_add_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_custom(GtkRecentFilter *filter, GtkRecentFilterFlags needed, GtkRecentFilterFunc func, gpointer data, GDestroyNotify data_destroy)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_add_custom$descriptor() {
        return gtk_recent_filter_add_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_custom(GtkRecentFilter *filter, GtkRecentFilterFlags needed, GtkRecentFilterFunc func, gpointer data, GDestroyNotify data_destroy)
     * }
     */
    public static MethodHandle gtk_recent_filter_add_custom$handle() {
        return gtk_recent_filter_add_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_filter_add_custom(GtkRecentFilter *filter, GtkRecentFilterFlags needed, GtkRecentFilterFunc func, gpointer data, GDestroyNotify data_destroy)
     * }
     */
    public static void gtk_recent_filter_add_custom(MemorySegment filter, int needed, MemorySegment func, MemorySegment data, MemorySegment data_destroy) {
        var mh$ = gtk_recent_filter_add_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_add_custom", filter, needed, func, data, data_destroy);
            }
            mh$.invokeExact(filter, needed, func, data, data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_get_needed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_get_needed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentFilterFlags gtk_recent_filter_get_needed(GtkRecentFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_get_needed$descriptor() {
        return gtk_recent_filter_get_needed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentFilterFlags gtk_recent_filter_get_needed(GtkRecentFilter *filter)
     * }
     */
    public static MethodHandle gtk_recent_filter_get_needed$handle() {
        return gtk_recent_filter_get_needed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentFilterFlags gtk_recent_filter_get_needed(GtkRecentFilter *filter)
     * }
     */
    public static int gtk_recent_filter_get_needed(MemorySegment filter) {
        var mh$ = gtk_recent_filter_get_needed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_get_needed", filter);
            }
            return (int)mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_filter_filter(GtkRecentFilter *filter, const GtkRecentFilterInfo *filter_info)
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_filter$descriptor() {
        return gtk_recent_filter_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_filter_filter(GtkRecentFilter *filter, const GtkRecentFilterInfo *filter_info)
     * }
     */
    public static MethodHandle gtk_recent_filter_filter$handle() {
        return gtk_recent_filter_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_filter_filter(GtkRecentFilter *filter, const GtkRecentFilterInfo *filter_info)
     * }
     */
    public static int gtk_recent_filter_filter(MemorySegment filter, MemorySegment filter_info) {
        var mh$ = gtk_recent_filter_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_filter", filter, filter_info);
            }
            return (int)mh$.invokeExact(filter, filter_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_RECENT_SORT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_SORT_NONE = 0
     * }
     */
    public static int GTK_RECENT_SORT_NONE() {
        return GTK_RECENT_SORT_NONE;
    }
    private static final int GTK_RECENT_SORT_MRU = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_SORT_MRU = 1
     * }
     */
    public static int GTK_RECENT_SORT_MRU() {
        return GTK_RECENT_SORT_MRU;
    }
    private static final int GTK_RECENT_SORT_LRU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_SORT_LRU = 2
     * }
     */
    public static int GTK_RECENT_SORT_LRU() {
        return GTK_RECENT_SORT_LRU;
    }
    private static final int GTK_RECENT_SORT_CUSTOM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_SORT_CUSTOM = 3
     * }
     */
    public static int GTK_RECENT_SORT_CUSTOM() {
        return GTK_RECENT_SORT_CUSTOM;
    }
    private static final int GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = 0
     * }
     */
    public static int GTK_RECENT_CHOOSER_ERROR_NOT_FOUND() {
        return GTK_RECENT_CHOOSER_ERROR_NOT_FOUND;
    }
    private static final int GTK_RECENT_CHOOSER_ERROR_INVALID_URI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RECENT_CHOOSER_ERROR_INVALID_URI = 1
     * }
     */
    public static int GTK_RECENT_CHOOSER_ERROR_INVALID_URI() {
        return GTK_RECENT_CHOOSER_ERROR_INVALID_URI;
    }

    private static class gtk_recent_chooser_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gtk_recent_chooser_error_quark()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_error_quark$descriptor() {
        return gtk_recent_chooser_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gtk_recent_chooser_error_quark()
     * }
     */
    public static MethodHandle gtk_recent_chooser_error_quark$handle() {
        return gtk_recent_chooser_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gtk_recent_chooser_error_quark()
     * }
     */
    public static int gtk_recent_chooser_error_quark() {
        var mh$ = gtk_recent_chooser_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_type$descriptor() {
        return gtk_recent_chooser_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_get_type()
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_type$handle() {
        return gtk_recent_chooser_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_get_type()
     * }
     */
    public static long gtk_recent_chooser_get_type() {
        var mh$ = gtk_recent_chooser_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_show_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_show_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_private(GtkRecentChooser *chooser, gboolean show_private)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_show_private$descriptor() {
        return gtk_recent_chooser_set_show_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_private(GtkRecentChooser *chooser, gboolean show_private)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_show_private$handle() {
        return gtk_recent_chooser_set_show_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_private(GtkRecentChooser *chooser, gboolean show_private)
     * }
     */
    public static void gtk_recent_chooser_set_show_private(MemorySegment chooser, int show_private) {
        var mh$ = gtk_recent_chooser_set_show_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_show_private", chooser, show_private);
            }
            mh$.invokeExact(chooser, show_private);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_show_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_show_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_private(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_show_private$descriptor() {
        return gtk_recent_chooser_get_show_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_private(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_show_private$handle() {
        return gtk_recent_chooser_get_show_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_private(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_show_private(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_show_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_show_private", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_show_not_found {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_show_not_found"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_not_found(GtkRecentChooser *chooser, gboolean show_not_found)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_show_not_found$descriptor() {
        return gtk_recent_chooser_set_show_not_found.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_not_found(GtkRecentChooser *chooser, gboolean show_not_found)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_show_not_found$handle() {
        return gtk_recent_chooser_set_show_not_found.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_not_found(GtkRecentChooser *chooser, gboolean show_not_found)
     * }
     */
    public static void gtk_recent_chooser_set_show_not_found(MemorySegment chooser, int show_not_found) {
        var mh$ = gtk_recent_chooser_set_show_not_found.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_show_not_found", chooser, show_not_found);
            }
            mh$.invokeExact(chooser, show_not_found);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_show_not_found {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_show_not_found"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_not_found(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_show_not_found$descriptor() {
        return gtk_recent_chooser_get_show_not_found.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_not_found(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_show_not_found$handle() {
        return gtk_recent_chooser_get_show_not_found.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_not_found(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_show_not_found(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_show_not_found.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_show_not_found", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_select_multiple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_select_multiple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_select_multiple(GtkRecentChooser *chooser, gboolean select_multiple)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_select_multiple$descriptor() {
        return gtk_recent_chooser_set_select_multiple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_select_multiple(GtkRecentChooser *chooser, gboolean select_multiple)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_select_multiple$handle() {
        return gtk_recent_chooser_set_select_multiple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_select_multiple(GtkRecentChooser *chooser, gboolean select_multiple)
     * }
     */
    public static void gtk_recent_chooser_set_select_multiple(MemorySegment chooser, int select_multiple) {
        var mh$ = gtk_recent_chooser_set_select_multiple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_select_multiple", chooser, select_multiple);
            }
            mh$.invokeExact(chooser, select_multiple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_select_multiple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_select_multiple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_select_multiple(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_select_multiple$descriptor() {
        return gtk_recent_chooser_get_select_multiple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_select_multiple(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_select_multiple$handle() {
        return gtk_recent_chooser_get_select_multiple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_select_multiple(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_select_multiple(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_select_multiple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_select_multiple", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_limit(GtkRecentChooser *chooser, gint limit)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_limit$descriptor() {
        return gtk_recent_chooser_set_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_limit(GtkRecentChooser *chooser, gint limit)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_limit$handle() {
        return gtk_recent_chooser_set_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_limit(GtkRecentChooser *chooser, gint limit)
     * }
     */
    public static void gtk_recent_chooser_set_limit(MemorySegment chooser, int limit) {
        var mh$ = gtk_recent_chooser_set_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_limit", chooser, limit);
            }
            mh$.invokeExact(chooser, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_recent_chooser_get_limit(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_limit$descriptor() {
        return gtk_recent_chooser_get_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_recent_chooser_get_limit(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_limit$handle() {
        return gtk_recent_chooser_get_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_recent_chooser_get_limit(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_limit(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_limit", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_local_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_local_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_local_only(GtkRecentChooser *chooser, gboolean local_only)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_local_only$descriptor() {
        return gtk_recent_chooser_set_local_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_local_only(GtkRecentChooser *chooser, gboolean local_only)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_local_only$handle() {
        return gtk_recent_chooser_set_local_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_local_only(GtkRecentChooser *chooser, gboolean local_only)
     * }
     */
    public static void gtk_recent_chooser_set_local_only(MemorySegment chooser, int local_only) {
        var mh$ = gtk_recent_chooser_set_local_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_local_only", chooser, local_only);
            }
            mh$.invokeExact(chooser, local_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_local_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_local_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_local_only(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_local_only$descriptor() {
        return gtk_recent_chooser_get_local_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_local_only(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_local_only$handle() {
        return gtk_recent_chooser_get_local_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_local_only(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_local_only(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_local_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_local_only", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_show_tips {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_show_tips"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_tips(GtkRecentChooser *chooser, gboolean show_tips)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_show_tips$descriptor() {
        return gtk_recent_chooser_set_show_tips.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_tips(GtkRecentChooser *chooser, gboolean show_tips)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_show_tips$handle() {
        return gtk_recent_chooser_set_show_tips.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_tips(GtkRecentChooser *chooser, gboolean show_tips)
     * }
     */
    public static void gtk_recent_chooser_set_show_tips(MemorySegment chooser, int show_tips) {
        var mh$ = gtk_recent_chooser_set_show_tips.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_show_tips", chooser, show_tips);
            }
            mh$.invokeExact(chooser, show_tips);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_show_tips {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_show_tips"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_tips(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_show_tips$descriptor() {
        return gtk_recent_chooser_get_show_tips.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_tips(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_show_tips$handle() {
        return gtk_recent_chooser_get_show_tips.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_tips(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_show_tips(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_show_tips.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_show_tips", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_show_icons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_show_icons"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_icons(GtkRecentChooser *chooser, gboolean show_icons)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_show_icons$descriptor() {
        return gtk_recent_chooser_set_show_icons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_icons(GtkRecentChooser *chooser, gboolean show_icons)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_show_icons$handle() {
        return gtk_recent_chooser_set_show_icons.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_show_icons(GtkRecentChooser *chooser, gboolean show_icons)
     * }
     */
    public static void gtk_recent_chooser_set_show_icons(MemorySegment chooser, int show_icons) {
        var mh$ = gtk_recent_chooser_set_show_icons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_show_icons", chooser, show_icons);
            }
            mh$.invokeExact(chooser, show_icons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_show_icons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_show_icons"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_icons(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_show_icons$descriptor() {
        return gtk_recent_chooser_get_show_icons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_icons(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_show_icons$handle() {
        return gtk_recent_chooser_get_show_icons.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_get_show_icons(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_show_icons(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_show_icons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_show_icons", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_sort_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_sort_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_sort_type(GtkRecentChooser *chooser, GtkRecentSortType sort_type)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_sort_type$descriptor() {
        return gtk_recent_chooser_set_sort_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_sort_type(GtkRecentChooser *chooser, GtkRecentSortType sort_type)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_sort_type$handle() {
        return gtk_recent_chooser_set_sort_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_sort_type(GtkRecentChooser *chooser, GtkRecentSortType sort_type)
     * }
     */
    public static void gtk_recent_chooser_set_sort_type(MemorySegment chooser, int sort_type) {
        var mh$ = gtk_recent_chooser_set_sort_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_sort_type", chooser, sort_type);
            }
            mh$.invokeExact(chooser, sort_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_sort_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_sort_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentSortType gtk_recent_chooser_get_sort_type(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_sort_type$descriptor() {
        return gtk_recent_chooser_get_sort_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentSortType gtk_recent_chooser_get_sort_type(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_sort_type$handle() {
        return gtk_recent_chooser_get_sort_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentSortType gtk_recent_chooser_get_sort_type(GtkRecentChooser *chooser)
     * }
     */
    public static int gtk_recent_chooser_get_sort_type(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_sort_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_sort_type", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_sort_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_sort_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_sort_func(GtkRecentChooser *chooser, GtkRecentSortFunc sort_func, gpointer sort_data, GDestroyNotify data_destroy)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_sort_func$descriptor() {
        return gtk_recent_chooser_set_sort_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_sort_func(GtkRecentChooser *chooser, GtkRecentSortFunc sort_func, gpointer sort_data, GDestroyNotify data_destroy)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_sort_func$handle() {
        return gtk_recent_chooser_set_sort_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_sort_func(GtkRecentChooser *chooser, GtkRecentSortFunc sort_func, gpointer sort_data, GDestroyNotify data_destroy)
     * }
     */
    public static void gtk_recent_chooser_set_sort_func(MemorySegment chooser, MemorySegment sort_func, MemorySegment sort_data, MemorySegment data_destroy) {
        var mh$ = gtk_recent_chooser_set_sort_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_sort_func", chooser, sort_func, sort_data, data_destroy);
            }
            mh$.invokeExact(chooser, sort_func, sort_data, data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_current_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_current_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_set_current_uri(GtkRecentChooser *chooser, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_current_uri$descriptor() {
        return gtk_recent_chooser_set_current_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_set_current_uri(GtkRecentChooser *chooser, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_current_uri$handle() {
        return gtk_recent_chooser_set_current_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_set_current_uri(GtkRecentChooser *chooser, const gchar *uri, GError **error)
     * }
     */
    public static int gtk_recent_chooser_set_current_uri(MemorySegment chooser, MemorySegment uri, MemorySegment error) {
        var mh$ = gtk_recent_chooser_set_current_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_current_uri", chooser, uri, error);
            }
            return (int)mh$.invokeExact(chooser, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_current_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_current_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_chooser_get_current_uri(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_current_uri$descriptor() {
        return gtk_recent_chooser_get_current_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_recent_chooser_get_current_uri(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_current_uri$handle() {
        return gtk_recent_chooser_get_current_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_recent_chooser_get_current_uri(GtkRecentChooser *chooser)
     * }
     */
    public static MemorySegment gtk_recent_chooser_get_current_uri(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_current_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_current_uri", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_current_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_current_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_chooser_get_current_item(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_current_item$descriptor() {
        return gtk_recent_chooser_get_current_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_chooser_get_current_item(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_current_item$handle() {
        return gtk_recent_chooser_get_current_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentInfo *gtk_recent_chooser_get_current_item(GtkRecentChooser *chooser)
     * }
     */
    public static MemorySegment gtk_recent_chooser_get_current_item(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_current_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_current_item", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_select_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_select_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_select_uri(GtkRecentChooser *chooser, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_select_uri$descriptor() {
        return gtk_recent_chooser_select_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_select_uri(GtkRecentChooser *chooser, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle gtk_recent_chooser_select_uri$handle() {
        return gtk_recent_chooser_select_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_select_uri(GtkRecentChooser *chooser, const gchar *uri, GError **error)
     * }
     */
    public static int gtk_recent_chooser_select_uri(MemorySegment chooser, MemorySegment uri, MemorySegment error) {
        var mh$ = gtk_recent_chooser_select_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_select_uri", chooser, uri, error);
            }
            return (int)mh$.invokeExact(chooser, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_unselect_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_unselect_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_unselect_uri(GtkRecentChooser *chooser, const gchar *uri)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_unselect_uri$descriptor() {
        return gtk_recent_chooser_unselect_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_unselect_uri(GtkRecentChooser *chooser, const gchar *uri)
     * }
     */
    public static MethodHandle gtk_recent_chooser_unselect_uri$handle() {
        return gtk_recent_chooser_unselect_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_unselect_uri(GtkRecentChooser *chooser, const gchar *uri)
     * }
     */
    public static void gtk_recent_chooser_unselect_uri(MemorySegment chooser, MemorySegment uri) {
        var mh$ = gtk_recent_chooser_unselect_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_unselect_uri", chooser, uri);
            }
            mh$.invokeExact(chooser, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_select_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_select_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_select_all(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_select_all$descriptor() {
        return gtk_recent_chooser_select_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_select_all(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_select_all$handle() {
        return gtk_recent_chooser_select_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_select_all(GtkRecentChooser *chooser)
     * }
     */
    public static void gtk_recent_chooser_select_all(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_select_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_select_all", chooser);
            }
            mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_unselect_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_unselect_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_unselect_all(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_unselect_all$descriptor() {
        return gtk_recent_chooser_unselect_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_unselect_all(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_unselect_all$handle() {
        return gtk_recent_chooser_unselect_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_unselect_all(GtkRecentChooser *chooser)
     * }
     */
    public static void gtk_recent_chooser_unselect_all(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_unselect_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_unselect_all", chooser);
            }
            mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_recent_chooser_get_items(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_items$descriptor() {
        return gtk_recent_chooser_get_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_recent_chooser_get_items(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_items$handle() {
        return gtk_recent_chooser_get_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_recent_chooser_get_items(GtkRecentChooser *chooser)
     * }
     */
    public static MemorySegment gtk_recent_chooser_get_items(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_items", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_recent_chooser_get_uris(GtkRecentChooser *chooser, gsize *length)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_uris$descriptor() {
        return gtk_recent_chooser_get_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_recent_chooser_get_uris(GtkRecentChooser *chooser, gsize *length)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_uris$handle() {
        return gtk_recent_chooser_get_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_recent_chooser_get_uris(GtkRecentChooser *chooser, gsize *length)
     * }
     */
    public static MemorySegment gtk_recent_chooser_get_uris(MemorySegment chooser, MemorySegment length) {
        var mh$ = gtk_recent_chooser_get_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_uris", chooser, length);
            }
            return (MemorySegment)mh$.invokeExact(chooser, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_add_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_add_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_add_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_add_filter$descriptor() {
        return gtk_recent_chooser_add_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_add_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static MethodHandle gtk_recent_chooser_add_filter$handle() {
        return gtk_recent_chooser_add_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_add_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static void gtk_recent_chooser_add_filter(MemorySegment chooser, MemorySegment filter) {
        var mh$ = gtk_recent_chooser_add_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_add_filter", chooser, filter);
            }
            mh$.invokeExact(chooser, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_remove_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_remove_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_remove_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_remove_filter$descriptor() {
        return gtk_recent_chooser_remove_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_remove_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static MethodHandle gtk_recent_chooser_remove_filter$handle() {
        return gtk_recent_chooser_remove_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_remove_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static void gtk_recent_chooser_remove_filter(MemorySegment chooser, MemorySegment filter) {
        var mh$ = gtk_recent_chooser_remove_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_remove_filter", chooser, filter);
            }
            mh$.invokeExact(chooser, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_list_filters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_list_filters"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_recent_chooser_list_filters(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_list_filters$descriptor() {
        return gtk_recent_chooser_list_filters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_recent_chooser_list_filters(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_list_filters$handle() {
        return gtk_recent_chooser_list_filters.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_recent_chooser_list_filters(GtkRecentChooser *chooser)
     * }
     */
    public static MemorySegment gtk_recent_chooser_list_filters(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_list_filters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_list_filters", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_set_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_set_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_set_filter$descriptor() {
        return gtk_recent_chooser_set_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static MethodHandle gtk_recent_chooser_set_filter$handle() {
        return gtk_recent_chooser_set_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_set_filter(GtkRecentChooser *chooser, GtkRecentFilter *filter)
     * }
     */
    public static void gtk_recent_chooser_set_filter(MemorySegment chooser, MemorySegment filter) {
        var mh$ = gtk_recent_chooser_set_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_set_filter", chooser, filter);
            }
            mh$.invokeExact(chooser, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_get_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_get_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRecentFilter *gtk_recent_chooser_get_filter(GtkRecentChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_get_filter$descriptor() {
        return gtk_recent_chooser_get_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRecentFilter *gtk_recent_chooser_get_filter(GtkRecentChooser *chooser)
     * }
     */
    public static MethodHandle gtk_recent_chooser_get_filter$handle() {
        return gtk_recent_chooser_get_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRecentFilter *gtk_recent_chooser_get_filter(GtkRecentChooser *chooser)
     * }
     */
    public static MemorySegment gtk_recent_chooser_get_filter(MemorySegment chooser) {
        var mh$ = gtk_recent_chooser_get_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_get_filter", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_dialog_get_type$descriptor() {
        return gtk_recent_chooser_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_recent_chooser_dialog_get_type$handle() {
        return gtk_recent_chooser_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_dialog_get_type()
     * }
     */
    public static long gtk_recent_chooser_dialog_get_type() {
        var mh$ = gtk_recent_chooser_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_dialog_new(const gchar *title, GtkWindow *parent, const gchar *first_button_text, ...)
     * }
     */
    public static class gtk_recent_chooser_dialog_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_recent_chooser_dialog_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_recent_chooser_dialog_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_recent_chooser_dialog_new(const gchar *title, GtkWindow *parent, const gchar *first_button_text, ...)
         * }
         */
        public static gtk_recent_chooser_dialog_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_recent_chooser_dialog_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment title, MemorySegment parent, MemorySegment first_button_text, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_recent_chooser_dialog_new", title, parent, first_button_text, x3);
                }
                return (MemorySegment)spreader.invokeExact(title, parent, first_button_text, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_dialog_new_for_manager(const gchar *title, GtkWindow *parent, GtkRecentManager *manager, const gchar *first_button_text, ...)
     * }
     */
    public static class gtk_recent_chooser_dialog_new_for_manager {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_recent_chooser_dialog_new_for_manager");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_recent_chooser_dialog_new_for_manager(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_recent_chooser_dialog_new_for_manager(const gchar *title, GtkWindow *parent, GtkRecentManager *manager, const gchar *first_button_text, ...)
         * }
         */
        public static gtk_recent_chooser_dialog_new_for_manager makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_recent_chooser_dialog_new_for_manager(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment title, MemorySegment parent, MemorySegment manager, MemorySegment first_button_text, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_recent_chooser_dialog_new_for_manager", title, parent, manager, first_button_text, x4);
                }
                return (MemorySegment)spreader.invokeExact(title, parent, manager, first_button_text, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_recent_chooser_menu_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_menu_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_menu_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_menu_get_type$descriptor() {
        return gtk_recent_chooser_menu_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_menu_get_type()
     * }
     */
    public static MethodHandle gtk_recent_chooser_menu_get_type$handle() {
        return gtk_recent_chooser_menu_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_menu_get_type()
     * }
     */
    public static long gtk_recent_chooser_menu_get_type() {
        var mh$ = gtk_recent_chooser_menu_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_menu_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_menu_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_menu_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_menu_new()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_menu_new$descriptor() {
        return gtk_recent_chooser_menu_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_menu_new()
     * }
     */
    public static MethodHandle gtk_recent_chooser_menu_new$handle() {
        return gtk_recent_chooser_menu_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_menu_new()
     * }
     */
    public static MemorySegment gtk_recent_chooser_menu_new() {
        var mh$ = gtk_recent_chooser_menu_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_menu_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_menu_new_for_manager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_menu_new_for_manager"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_menu_new_for_manager(GtkRecentManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_menu_new_for_manager$descriptor() {
        return gtk_recent_chooser_menu_new_for_manager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_menu_new_for_manager(GtkRecentManager *manager)
     * }
     */
    public static MethodHandle gtk_recent_chooser_menu_new_for_manager$handle() {
        return gtk_recent_chooser_menu_new_for_manager.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_menu_new_for_manager(GtkRecentManager *manager)
     * }
     */
    public static MemorySegment gtk_recent_chooser_menu_new_for_manager(MemorySegment manager) {
        var mh$ = gtk_recent_chooser_menu_new_for_manager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_menu_new_for_manager", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_menu_get_show_numbers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_menu_get_show_numbers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_menu_get_show_numbers(GtkRecentChooserMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_menu_get_show_numbers$descriptor() {
        return gtk_recent_chooser_menu_get_show_numbers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_menu_get_show_numbers(GtkRecentChooserMenu *menu)
     * }
     */
    public static MethodHandle gtk_recent_chooser_menu_get_show_numbers$handle() {
        return gtk_recent_chooser_menu_get_show_numbers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_chooser_menu_get_show_numbers(GtkRecentChooserMenu *menu)
     * }
     */
    public static int gtk_recent_chooser_menu_get_show_numbers(MemorySegment menu) {
        var mh$ = gtk_recent_chooser_menu_get_show_numbers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_menu_get_show_numbers", menu);
            }
            return (int)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_menu_set_show_numbers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_menu_set_show_numbers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_menu_set_show_numbers(GtkRecentChooserMenu *menu, gboolean show_numbers)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_menu_set_show_numbers$descriptor() {
        return gtk_recent_chooser_menu_set_show_numbers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_menu_set_show_numbers(GtkRecentChooserMenu *menu, gboolean show_numbers)
     * }
     */
    public static MethodHandle gtk_recent_chooser_menu_set_show_numbers$handle() {
        return gtk_recent_chooser_menu_set_show_numbers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_chooser_menu_set_show_numbers(GtkRecentChooserMenu *menu, gboolean show_numbers)
     * }
     */
    public static void gtk_recent_chooser_menu_set_show_numbers(MemorySegment menu, int show_numbers) {
        var mh$ = gtk_recent_chooser_menu_set_show_numbers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_menu_set_show_numbers", menu, show_numbers);
            }
            mh$.invokeExact(menu, show_numbers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_widget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_widget_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_widget_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_widget_get_type$descriptor() {
        return gtk_recent_chooser_widget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_widget_get_type()
     * }
     */
    public static MethodHandle gtk_recent_chooser_widget_get_type$handle() {
        return gtk_recent_chooser_widget_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_widget_get_type()
     * }
     */
    public static long gtk_recent_chooser_widget_get_type() {
        var mh$ = gtk_recent_chooser_widget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_widget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_widget_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_widget_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_widget_new()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_widget_new$descriptor() {
        return gtk_recent_chooser_widget_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_widget_new()
     * }
     */
    public static MethodHandle gtk_recent_chooser_widget_new$handle() {
        return gtk_recent_chooser_widget_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_widget_new()
     * }
     */
    public static MemorySegment gtk_recent_chooser_widget_new() {
        var mh$ = gtk_recent_chooser_widget_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_widget_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_widget_new_for_manager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_widget_new_for_manager"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_widget_new_for_manager(GtkRecentManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_widget_new_for_manager$descriptor() {
        return gtk_recent_chooser_widget_new_for_manager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_widget_new_for_manager(GtkRecentManager *manager)
     * }
     */
    public static MethodHandle gtk_recent_chooser_widget_new_for_manager$handle() {
        return gtk_recent_chooser_widget_new_for_manager.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_recent_chooser_widget_new_for_manager(GtkRecentManager *manager)
     * }
     */
    public static MemorySegment gtk_recent_chooser_widget_new_for_manager(MemorySegment manager) {
        var mh$ = gtk_recent_chooser_widget_new_for_manager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_widget_new_for_manager", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_check(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_check$descriptor() {
        return gtk_render_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_check(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_check$handle() {
        return gtk_render_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_check(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_check(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_check", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_option(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_option$descriptor() {
        return gtk_render_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_option(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_option$handle() {
        return gtk_render_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_option(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_option(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_option", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_arrow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_arrow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_arrow(GtkStyleContext *context, cairo_t *cr, gdouble angle, gdouble x, gdouble y, gdouble size)
     * }
     */
    public static FunctionDescriptor gtk_render_arrow$descriptor() {
        return gtk_render_arrow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_arrow(GtkStyleContext *context, cairo_t *cr, gdouble angle, gdouble x, gdouble y, gdouble size)
     * }
     */
    public static MethodHandle gtk_render_arrow$handle() {
        return gtk_render_arrow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_arrow(GtkStyleContext *context, cairo_t *cr, gdouble angle, gdouble x, gdouble y, gdouble size)
     * }
     */
    public static void gtk_render_arrow(MemorySegment context, MemorySegment cr, double angle, double x, double y, double size) {
        var mh$ = gtk_render_arrow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_arrow", context, cr, angle, x, y, size);
            }
            mh$.invokeExact(context, cr, angle, x, y, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_background {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_background"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_background(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_background$descriptor() {
        return gtk_render_background.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_background(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_background$handle() {
        return gtk_render_background.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_background(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_background(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_background.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_background", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_background_get_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_background_get_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_background_get_clip(GtkStyleContext *context, gdouble x, gdouble y, gdouble width, gdouble height, GdkRectangle *out_clip)
     * }
     */
    public static FunctionDescriptor gtk_render_background_get_clip$descriptor() {
        return gtk_render_background_get_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_background_get_clip(GtkStyleContext *context, gdouble x, gdouble y, gdouble width, gdouble height, GdkRectangle *out_clip)
     * }
     */
    public static MethodHandle gtk_render_background_get_clip$handle() {
        return gtk_render_background_get_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_background_get_clip(GtkStyleContext *context, gdouble x, gdouble y, gdouble width, gdouble height, GdkRectangle *out_clip)
     * }
     */
    public static void gtk_render_background_get_clip(MemorySegment context, double x, double y, double width, double height, MemorySegment out_clip) {
        var mh$ = gtk_render_background_get_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_background_get_clip", context, x, y, width, height, out_clip);
            }
            mh$.invokeExact(context, x, y, width, height, out_clip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_frame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_frame(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_frame$descriptor() {
        return gtk_render_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_frame(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_frame$handle() {
        return gtk_render_frame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_frame(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_frame(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_frame", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_expander {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_expander"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_expander(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_expander$descriptor() {
        return gtk_render_expander.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_expander(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_expander$handle() {
        return gtk_render_expander.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_expander(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_expander(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_expander.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_expander", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_focus(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_focus$descriptor() {
        return gtk_render_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_focus(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_focus$handle() {
        return gtk_render_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_focus(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_focus(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_focus", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_layout(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor gtk_render_layout$descriptor() {
        return gtk_render_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_layout(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout)
     * }
     */
    public static MethodHandle gtk_render_layout$handle() {
        return gtk_render_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_layout(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout)
     * }
     */
    public static void gtk_render_layout(MemorySegment context, MemorySegment cr, double x, double y, MemorySegment layout) {
        var mh$ = gtk_render_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_layout", context, cr, x, y, layout);
            }
            mh$.invokeExact(context, cr, x, y, layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_line(GtkStyleContext *context, cairo_t *cr, gdouble x0, gdouble y0, gdouble x1, gdouble y1)
     * }
     */
    public static FunctionDescriptor gtk_render_line$descriptor() {
        return gtk_render_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_line(GtkStyleContext *context, cairo_t *cr, gdouble x0, gdouble y0, gdouble x1, gdouble y1)
     * }
     */
    public static MethodHandle gtk_render_line$handle() {
        return gtk_render_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_line(GtkStyleContext *context, cairo_t *cr, gdouble x0, gdouble y0, gdouble x1, gdouble y1)
     * }
     */
    public static void gtk_render_line(MemorySegment context, MemorySegment cr, double x0, double y0, double x1, double y1) {
        var mh$ = gtk_render_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_line", context, cr, x0, y0, x1, y1);
            }
            mh$.invokeExact(context, cr, x0, y0, x1, y1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_slider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_slider"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_slider(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_render_slider$descriptor() {
        return gtk_render_slider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_slider(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_render_slider$handle() {
        return gtk_render_slider.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_slider(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkOrientation orientation)
     * }
     */
    public static void gtk_render_slider(MemorySegment context, MemorySegment cr, double x, double y, double width, double height, int orientation) {
        var mh$ = gtk_render_slider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_slider", context, cr, x, y, width, height, orientation);
            }
            mh$.invokeExact(context, cr, x, y, width, height, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_frame_gap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_frame_gap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_frame_gap(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkPositionType gap_side, gdouble xy0_gap, gdouble xy1_gap)
     * }
     */
    public static FunctionDescriptor gtk_render_frame_gap$descriptor() {
        return gtk_render_frame_gap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_frame_gap(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkPositionType gap_side, gdouble xy0_gap, gdouble xy1_gap)
     * }
     */
    public static MethodHandle gtk_render_frame_gap$handle() {
        return gtk_render_frame_gap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_frame_gap(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkPositionType gap_side, gdouble xy0_gap, gdouble xy1_gap)
     * }
     */
    public static void gtk_render_frame_gap(MemorySegment context, MemorySegment cr, double x, double y, double width, double height, int gap_side, double xy0_gap, double xy1_gap) {
        var mh$ = gtk_render_frame_gap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_frame_gap", context, cr, x, y, width, height, gap_side, xy0_gap, xy1_gap);
            }
            mh$.invokeExact(context, cr, x, y, width, height, gap_side, xy0_gap, xy1_gap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_extension"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_extension(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkPositionType gap_side)
     * }
     */
    public static FunctionDescriptor gtk_render_extension$descriptor() {
        return gtk_render_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_extension(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkPositionType gap_side)
     * }
     */
    public static MethodHandle gtk_render_extension$handle() {
        return gtk_render_extension.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_extension(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkPositionType gap_side)
     * }
     */
    public static void gtk_render_extension(MemorySegment context, MemorySegment cr, double x, double y, double width, double height, int gap_side) {
        var mh$ = gtk_render_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_extension", context, cr, x, y, width, height, gap_side);
            }
            mh$.invokeExact(context, cr, x, y, width, height, gap_side);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_handle(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_handle$descriptor() {
        return gtk_render_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_handle(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_handle$handle() {
        return gtk_render_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_handle(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_handle(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_handle", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_activity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_activity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_activity(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_render_activity$descriptor() {
        return gtk_render_activity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_activity(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_render_activity$handle() {
        return gtk_render_activity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_activity(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height)
     * }
     */
    public static void gtk_render_activity(MemorySegment context, MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = gtk_render_activity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_activity", context, cr, x, y, width, height);
            }
            mh$.invokeExact(context, cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_icon_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_icon_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_render_icon_pixbuf(GtkStyleContext *context, const GtkIconSource *source, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_render_icon_pixbuf$descriptor() {
        return gtk_render_icon_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_render_icon_pixbuf(GtkStyleContext *context, const GtkIconSource *source, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_render_icon_pixbuf$handle() {
        return gtk_render_icon_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_render_icon_pixbuf(GtkStyleContext *context, const GtkIconSource *source, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_render_icon_pixbuf(MemorySegment context, MemorySegment source, int size) {
        var mh$ = gtk_render_icon_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_icon_pixbuf", context, source, size);
            }
            return (MemorySegment)mh$.invokeExact(context, source, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_icon(GtkStyleContext *context, cairo_t *cr, GdkPixbuf *pixbuf, gdouble x, gdouble y)
     * }
     */
    public static FunctionDescriptor gtk_render_icon$descriptor() {
        return gtk_render_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_icon(GtkStyleContext *context, cairo_t *cr, GdkPixbuf *pixbuf, gdouble x, gdouble y)
     * }
     */
    public static MethodHandle gtk_render_icon$handle() {
        return gtk_render_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_icon(GtkStyleContext *context, cairo_t *cr, GdkPixbuf *pixbuf, gdouble x, gdouble y)
     * }
     */
    public static void gtk_render_icon(MemorySegment context, MemorySegment cr, MemorySegment pixbuf, double x, double y) {
        var mh$ = gtk_render_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_icon", context, cr, pixbuf, x, y);
            }
            mh$.invokeExact(context, cr, pixbuf, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_icon_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_icon_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_icon_surface(GtkStyleContext *context, cairo_t *cr, cairo_surface_t *surface, gdouble x, gdouble y)
     * }
     */
    public static FunctionDescriptor gtk_render_icon_surface$descriptor() {
        return gtk_render_icon_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_icon_surface(GtkStyleContext *context, cairo_t *cr, cairo_surface_t *surface, gdouble x, gdouble y)
     * }
     */
    public static MethodHandle gtk_render_icon_surface$handle() {
        return gtk_render_icon_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_icon_surface(GtkStyleContext *context, cairo_t *cr, cairo_surface_t *surface, gdouble x, gdouble y)
     * }
     */
    public static void gtk_render_icon_surface(MemorySegment context, MemorySegment cr, MemorySegment surface, double x, double y) {
        var mh$ = gtk_render_icon_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_icon_surface", context, cr, surface, x, y);
            }
            mh$.invokeExact(context, cr, surface, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_REVEALER_TRANSITION_TYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REVEALER_TRANSITION_TYPE_NONE = 0
     * }
     */
    public static int GTK_REVEALER_TRANSITION_TYPE_NONE() {
        return GTK_REVEALER_TRANSITION_TYPE_NONE;
    }
    private static final int GTK_REVEALER_TRANSITION_TYPE_CROSSFADE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REVEALER_TRANSITION_TYPE_CROSSFADE = 1
     * }
     */
    public static int GTK_REVEALER_TRANSITION_TYPE_CROSSFADE() {
        return GTK_REVEALER_TRANSITION_TYPE_CROSSFADE;
    }
    private static final int GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT = 2
     * }
     */
    public static int GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT() {
        return GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT;
    }
    private static final int GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT = 3
     * }
     */
    public static int GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT() {
        return GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT;
    }
    private static final int GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP = 4
     * }
     */
    public static int GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP() {
        return GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP;
    }
    private static final int GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN = 5
     * }
     */
    public static int GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN() {
        return GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN;
    }

    private static class gtk_revealer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_revealer_get_type()
     * }
     */
    public static FunctionDescriptor gtk_revealer_get_type$descriptor() {
        return gtk_revealer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_revealer_get_type()
     * }
     */
    public static MethodHandle gtk_revealer_get_type$handle() {
        return gtk_revealer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_revealer_get_type()
     * }
     */
    public static long gtk_revealer_get_type() {
        var mh$ = gtk_revealer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_revealer_new()
     * }
     */
    public static FunctionDescriptor gtk_revealer_new$descriptor() {
        return gtk_revealer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_revealer_new()
     * }
     */
    public static MethodHandle gtk_revealer_new$handle() {
        return gtk_revealer_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_revealer_new()
     * }
     */
    public static MemorySegment gtk_revealer_new() {
        var mh$ = gtk_revealer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_get_reveal_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_get_reveal_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_revealer_get_reveal_child(GtkRevealer *revealer)
     * }
     */
    public static FunctionDescriptor gtk_revealer_get_reveal_child$descriptor() {
        return gtk_revealer_get_reveal_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_revealer_get_reveal_child(GtkRevealer *revealer)
     * }
     */
    public static MethodHandle gtk_revealer_get_reveal_child$handle() {
        return gtk_revealer_get_reveal_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_revealer_get_reveal_child(GtkRevealer *revealer)
     * }
     */
    public static int gtk_revealer_get_reveal_child(MemorySegment revealer) {
        var mh$ = gtk_revealer_get_reveal_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_get_reveal_child", revealer);
            }
            return (int)mh$.invokeExact(revealer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_set_reveal_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_set_reveal_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_revealer_set_reveal_child(GtkRevealer *revealer, gboolean reveal_child)
     * }
     */
    public static FunctionDescriptor gtk_revealer_set_reveal_child$descriptor() {
        return gtk_revealer_set_reveal_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_revealer_set_reveal_child(GtkRevealer *revealer, gboolean reveal_child)
     * }
     */
    public static MethodHandle gtk_revealer_set_reveal_child$handle() {
        return gtk_revealer_set_reveal_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_revealer_set_reveal_child(GtkRevealer *revealer, gboolean reveal_child)
     * }
     */
    public static void gtk_revealer_set_reveal_child(MemorySegment revealer, int reveal_child) {
        var mh$ = gtk_revealer_set_reveal_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_set_reveal_child", revealer, reveal_child);
            }
            mh$.invokeExact(revealer, reveal_child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_get_child_revealed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_get_child_revealed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_revealer_get_child_revealed(GtkRevealer *revealer)
     * }
     */
    public static FunctionDescriptor gtk_revealer_get_child_revealed$descriptor() {
        return gtk_revealer_get_child_revealed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_revealer_get_child_revealed(GtkRevealer *revealer)
     * }
     */
    public static MethodHandle gtk_revealer_get_child_revealed$handle() {
        return gtk_revealer_get_child_revealed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_revealer_get_child_revealed(GtkRevealer *revealer)
     * }
     */
    public static int gtk_revealer_get_child_revealed(MemorySegment revealer) {
        var mh$ = gtk_revealer_get_child_revealed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_get_child_revealed", revealer);
            }
            return (int)mh$.invokeExact(revealer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_get_transition_duration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_get_transition_duration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_revealer_get_transition_duration(GtkRevealer *revealer)
     * }
     */
    public static FunctionDescriptor gtk_revealer_get_transition_duration$descriptor() {
        return gtk_revealer_get_transition_duration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_revealer_get_transition_duration(GtkRevealer *revealer)
     * }
     */
    public static MethodHandle gtk_revealer_get_transition_duration$handle() {
        return gtk_revealer_get_transition_duration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_revealer_get_transition_duration(GtkRevealer *revealer)
     * }
     */
    public static int gtk_revealer_get_transition_duration(MemorySegment revealer) {
        var mh$ = gtk_revealer_get_transition_duration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_get_transition_duration", revealer);
            }
            return (int)mh$.invokeExact(revealer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_set_transition_duration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_set_transition_duration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_revealer_set_transition_duration(GtkRevealer *revealer, guint duration)
     * }
     */
    public static FunctionDescriptor gtk_revealer_set_transition_duration$descriptor() {
        return gtk_revealer_set_transition_duration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_revealer_set_transition_duration(GtkRevealer *revealer, guint duration)
     * }
     */
    public static MethodHandle gtk_revealer_set_transition_duration$handle() {
        return gtk_revealer_set_transition_duration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_revealer_set_transition_duration(GtkRevealer *revealer, guint duration)
     * }
     */
    public static void gtk_revealer_set_transition_duration(MemorySegment revealer, int duration) {
        var mh$ = gtk_revealer_set_transition_duration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_set_transition_duration", revealer, duration);
            }
            mh$.invokeExact(revealer, duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_set_transition_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_set_transition_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_revealer_set_transition_type(GtkRevealer *revealer, GtkRevealerTransitionType transition)
     * }
     */
    public static FunctionDescriptor gtk_revealer_set_transition_type$descriptor() {
        return gtk_revealer_set_transition_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_revealer_set_transition_type(GtkRevealer *revealer, GtkRevealerTransitionType transition)
     * }
     */
    public static MethodHandle gtk_revealer_set_transition_type$handle() {
        return gtk_revealer_set_transition_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_revealer_set_transition_type(GtkRevealer *revealer, GtkRevealerTransitionType transition)
     * }
     */
    public static void gtk_revealer_set_transition_type(MemorySegment revealer, int transition) {
        var mh$ = gtk_revealer_set_transition_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_set_transition_type", revealer, transition);
            }
            mh$.invokeExact(revealer, transition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_get_transition_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_get_transition_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRevealerTransitionType gtk_revealer_get_transition_type(GtkRevealer *revealer)
     * }
     */
    public static FunctionDescriptor gtk_revealer_get_transition_type$descriptor() {
        return gtk_revealer_get_transition_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRevealerTransitionType gtk_revealer_get_transition_type(GtkRevealer *revealer)
     * }
     */
    public static MethodHandle gtk_revealer_get_transition_type$handle() {
        return gtk_revealer_get_transition_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRevealerTransitionType gtk_revealer_get_transition_type(GtkRevealer *revealer)
     * }
     */
    public static int gtk_revealer_get_transition_type(MemorySegment revealer) {
        var mh$ = gtk_revealer_get_transition_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_get_transition_type", revealer);
            }
            return (int)mh$.invokeExact(revealer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scale_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scale_get_type$descriptor() {
        return gtk_scale_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scale_get_type()
     * }
     */
    public static MethodHandle gtk_scale_get_type$handle() {
        return gtk_scale_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scale_get_type()
     * }
     */
    public static long gtk_scale_get_type() {
        var mh$ = gtk_scale_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_new(GtkOrientation orientation, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_scale_new$descriptor() {
        return gtk_scale_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_new(GtkOrientation orientation, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_scale_new$handle() {
        return gtk_scale_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_new(GtkOrientation orientation, GtkAdjustment *adjustment)
     * }
     */
    public static MemorySegment gtk_scale_new(int orientation, MemorySegment adjustment) {
        var mh$ = gtk_scale_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_new", orientation, adjustment);
            }
            return (MemorySegment)mh$.invokeExact(orientation, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_new_with_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_new_with_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_new_with_range(GtkOrientation orientation, gdouble min, gdouble max, gdouble step)
     * }
     */
    public static FunctionDescriptor gtk_scale_new_with_range$descriptor() {
        return gtk_scale_new_with_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_new_with_range(GtkOrientation orientation, gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MethodHandle gtk_scale_new_with_range$handle() {
        return gtk_scale_new_with_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_new_with_range(GtkOrientation orientation, gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MemorySegment gtk_scale_new_with_range(int orientation, double min, double max, double step) {
        var mh$ = gtk_scale_new_with_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_new_with_range", orientation, min, max, step);
            }
            return (MemorySegment)mh$.invokeExact(orientation, min, max, step);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_set_digits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_set_digits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_digits(GtkScale *scale, gint digits)
     * }
     */
    public static FunctionDescriptor gtk_scale_set_digits$descriptor() {
        return gtk_scale_set_digits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_digits(GtkScale *scale, gint digits)
     * }
     */
    public static MethodHandle gtk_scale_set_digits$handle() {
        return gtk_scale_set_digits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_set_digits(GtkScale *scale, gint digits)
     * }
     */
    public static void gtk_scale_set_digits(MemorySegment scale, int digits) {
        var mh$ = gtk_scale_set_digits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_set_digits", scale, digits);
            }
            mh$.invokeExact(scale, digits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_get_digits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_get_digits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_scale_get_digits(GtkScale *scale)
     * }
     */
    public static FunctionDescriptor gtk_scale_get_digits$descriptor() {
        return gtk_scale_get_digits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_scale_get_digits(GtkScale *scale)
     * }
     */
    public static MethodHandle gtk_scale_get_digits$handle() {
        return gtk_scale_get_digits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_scale_get_digits(GtkScale *scale)
     * }
     */
    public static int gtk_scale_get_digits(MemorySegment scale) {
        var mh$ = gtk_scale_get_digits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_get_digits", scale);
            }
            return (int)mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_set_draw_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_set_draw_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_draw_value(GtkScale *scale, gboolean draw_value)
     * }
     */
    public static FunctionDescriptor gtk_scale_set_draw_value$descriptor() {
        return gtk_scale_set_draw_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_draw_value(GtkScale *scale, gboolean draw_value)
     * }
     */
    public static MethodHandle gtk_scale_set_draw_value$handle() {
        return gtk_scale_set_draw_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_set_draw_value(GtkScale *scale, gboolean draw_value)
     * }
     */
    public static void gtk_scale_set_draw_value(MemorySegment scale, int draw_value) {
        var mh$ = gtk_scale_set_draw_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_set_draw_value", scale, draw_value);
            }
            mh$.invokeExact(scale, draw_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_get_draw_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_get_draw_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scale_get_draw_value(GtkScale *scale)
     * }
     */
    public static FunctionDescriptor gtk_scale_get_draw_value$descriptor() {
        return gtk_scale_get_draw_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scale_get_draw_value(GtkScale *scale)
     * }
     */
    public static MethodHandle gtk_scale_get_draw_value$handle() {
        return gtk_scale_get_draw_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scale_get_draw_value(GtkScale *scale)
     * }
     */
    public static int gtk_scale_get_draw_value(MemorySegment scale) {
        var mh$ = gtk_scale_get_draw_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_get_draw_value", scale);
            }
            return (int)mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_set_has_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_set_has_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_has_origin(GtkScale *scale, gboolean has_origin)
     * }
     */
    public static FunctionDescriptor gtk_scale_set_has_origin$descriptor() {
        return gtk_scale_set_has_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_has_origin(GtkScale *scale, gboolean has_origin)
     * }
     */
    public static MethodHandle gtk_scale_set_has_origin$handle() {
        return gtk_scale_set_has_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_set_has_origin(GtkScale *scale, gboolean has_origin)
     * }
     */
    public static void gtk_scale_set_has_origin(MemorySegment scale, int has_origin) {
        var mh$ = gtk_scale_set_has_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_set_has_origin", scale, has_origin);
            }
            mh$.invokeExact(scale, has_origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_get_has_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_get_has_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scale_get_has_origin(GtkScale *scale)
     * }
     */
    public static FunctionDescriptor gtk_scale_get_has_origin$descriptor() {
        return gtk_scale_get_has_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scale_get_has_origin(GtkScale *scale)
     * }
     */
    public static MethodHandle gtk_scale_get_has_origin$handle() {
        return gtk_scale_get_has_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scale_get_has_origin(GtkScale *scale)
     * }
     */
    public static int gtk_scale_get_has_origin(MemorySegment scale) {
        var mh$ = gtk_scale_get_has_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_get_has_origin", scale);
            }
            return (int)mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_set_value_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_set_value_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_value_pos(GtkScale *scale, GtkPositionType pos)
     * }
     */
    public static FunctionDescriptor gtk_scale_set_value_pos$descriptor() {
        return gtk_scale_set_value_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_set_value_pos(GtkScale *scale, GtkPositionType pos)
     * }
     */
    public static MethodHandle gtk_scale_set_value_pos$handle() {
        return gtk_scale_set_value_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_set_value_pos(GtkScale *scale, GtkPositionType pos)
     * }
     */
    public static void gtk_scale_set_value_pos(MemorySegment scale, int pos) {
        var mh$ = gtk_scale_set_value_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_set_value_pos", scale, pos);
            }
            mh$.invokeExact(scale, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_get_value_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_get_value_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_scale_get_value_pos(GtkScale *scale)
     * }
     */
    public static FunctionDescriptor gtk_scale_get_value_pos$descriptor() {
        return gtk_scale_get_value_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_scale_get_value_pos(GtkScale *scale)
     * }
     */
    public static MethodHandle gtk_scale_get_value_pos$handle() {
        return gtk_scale_get_value_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPositionType gtk_scale_get_value_pos(GtkScale *scale)
     * }
     */
    public static int gtk_scale_get_value_pos(MemorySegment scale) {
        var mh$ = gtk_scale_get_value_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_get_value_pos", scale);
            }
            return (int)mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_get_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_get_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_scale_get_layout(GtkScale *scale)
     * }
     */
    public static FunctionDescriptor gtk_scale_get_layout$descriptor() {
        return gtk_scale_get_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_scale_get_layout(GtkScale *scale)
     * }
     */
    public static MethodHandle gtk_scale_get_layout$handle() {
        return gtk_scale_get_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *gtk_scale_get_layout(GtkScale *scale)
     * }
     */
    public static MemorySegment gtk_scale_get_layout(MemorySegment scale) {
        var mh$ = gtk_scale_get_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_get_layout", scale);
            }
            return (MemorySegment)mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_get_layout_offsets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_get_layout_offsets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_get_layout_offsets(GtkScale *scale, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gtk_scale_get_layout_offsets$descriptor() {
        return gtk_scale_get_layout_offsets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_get_layout_offsets(GtkScale *scale, gint *x, gint *y)
     * }
     */
    public static MethodHandle gtk_scale_get_layout_offsets$handle() {
        return gtk_scale_get_layout_offsets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_get_layout_offsets(GtkScale *scale, gint *x, gint *y)
     * }
     */
    public static void gtk_scale_get_layout_offsets(MemorySegment scale, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_scale_get_layout_offsets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_get_layout_offsets", scale, x, y);
            }
            mh$.invokeExact(scale, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_add_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_add_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_add_mark(GtkScale *scale, gdouble value, GtkPositionType position, const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_scale_add_mark$descriptor() {
        return gtk_scale_add_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_add_mark(GtkScale *scale, gdouble value, GtkPositionType position, const gchar *markup)
     * }
     */
    public static MethodHandle gtk_scale_add_mark$handle() {
        return gtk_scale_add_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_add_mark(GtkScale *scale, gdouble value, GtkPositionType position, const gchar *markup)
     * }
     */
    public static void gtk_scale_add_mark(MemorySegment scale, double value, int position, MemorySegment markup) {
        var mh$ = gtk_scale_add_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_add_mark", scale, value, position, markup);
            }
            mh$.invokeExact(scale, value, position, markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_clear_marks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_clear_marks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_clear_marks(GtkScale *scale)
     * }
     */
    public static FunctionDescriptor gtk_scale_clear_marks$descriptor() {
        return gtk_scale_clear_marks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_clear_marks(GtkScale *scale)
     * }
     */
    public static MethodHandle gtk_scale_clear_marks$handle() {
        return gtk_scale_clear_marks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_clear_marks(GtkScale *scale)
     * }
     */
    public static void gtk_scale_clear_marks(MemorySegment scale) {
        var mh$ = gtk_scale_clear_marks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_clear_marks", scale);
            }
            mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scale_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scale_button_get_type$descriptor() {
        return gtk_scale_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scale_button_get_type()
     * }
     */
    public static MethodHandle gtk_scale_button_get_type$handle() {
        return gtk_scale_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scale_button_get_type()
     * }
     */
    public static long gtk_scale_button_get_type() {
        var mh$ = gtk_scale_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_new(GtkIconSize size, gdouble min, gdouble max, gdouble step, const gchar **icons)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_new$descriptor() {
        return gtk_scale_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_new(GtkIconSize size, gdouble min, gdouble max, gdouble step, const gchar **icons)
     * }
     */
    public static MethodHandle gtk_scale_button_new$handle() {
        return gtk_scale_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_new(GtkIconSize size, gdouble min, gdouble max, gdouble step, const gchar **icons)
     * }
     */
    public static MemorySegment gtk_scale_button_new(int size, double min, double max, double step, MemorySegment icons) {
        var mh$ = gtk_scale_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_new", size, min, max, step, icons);
            }
            return (MemorySegment)mh$.invokeExact(size, min, max, step, icons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_set_icons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_set_icons"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_icons(GtkScaleButton *button, const gchar **icons)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_set_icons$descriptor() {
        return gtk_scale_button_set_icons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_icons(GtkScaleButton *button, const gchar **icons)
     * }
     */
    public static MethodHandle gtk_scale_button_set_icons$handle() {
        return gtk_scale_button_set_icons.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_icons(GtkScaleButton *button, const gchar **icons)
     * }
     */
    public static void gtk_scale_button_set_icons(MemorySegment button, MemorySegment icons) {
        var mh$ = gtk_scale_button_set_icons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_set_icons", button, icons);
            }
            mh$.invokeExact(button, icons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_scale_button_get_value(GtkScaleButton *button)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_get_value$descriptor() {
        return gtk_scale_button_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_scale_button_get_value(GtkScaleButton *button)
     * }
     */
    public static MethodHandle gtk_scale_button_get_value$handle() {
        return gtk_scale_button_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_scale_button_get_value(GtkScaleButton *button)
     * }
     */
    public static double gtk_scale_button_get_value(MemorySegment button) {
        var mh$ = gtk_scale_button_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_get_value", button);
            }
            return (double)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_value(GtkScaleButton *button, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_set_value$descriptor() {
        return gtk_scale_button_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_value(GtkScaleButton *button, gdouble value)
     * }
     */
    public static MethodHandle gtk_scale_button_set_value$handle() {
        return gtk_scale_button_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_value(GtkScaleButton *button, gdouble value)
     * }
     */
    public static void gtk_scale_button_set_value(MemorySegment button, double value) {
        var mh$ = gtk_scale_button_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_set_value", button, value);
            }
            mh$.invokeExact(button, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_get_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_get_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scale_button_get_adjustment(GtkScaleButton *button)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_get_adjustment$descriptor() {
        return gtk_scale_button_get_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scale_button_get_adjustment(GtkScaleButton *button)
     * }
     */
    public static MethodHandle gtk_scale_button_get_adjustment$handle() {
        return gtk_scale_button_get_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scale_button_get_adjustment(GtkScaleButton *button)
     * }
     */
    public static MemorySegment gtk_scale_button_get_adjustment(MemorySegment button) {
        var mh$ = gtk_scale_button_get_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_get_adjustment", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_set_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_set_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_adjustment(GtkScaleButton *button, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_set_adjustment$descriptor() {
        return gtk_scale_button_set_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_adjustment(GtkScaleButton *button, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_scale_button_set_adjustment$handle() {
        return gtk_scale_button_set_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scale_button_set_adjustment(GtkScaleButton *button, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_scale_button_set_adjustment(MemorySegment button, MemorySegment adjustment) {
        var mh$ = gtk_scale_button_set_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_set_adjustment", button, adjustment);
            }
            mh$.invokeExact(button, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_get_plus_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_get_plus_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_plus_button(GtkScaleButton *button)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_get_plus_button$descriptor() {
        return gtk_scale_button_get_plus_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_plus_button(GtkScaleButton *button)
     * }
     */
    public static MethodHandle gtk_scale_button_get_plus_button$handle() {
        return gtk_scale_button_get_plus_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_plus_button(GtkScaleButton *button)
     * }
     */
    public static MemorySegment gtk_scale_button_get_plus_button(MemorySegment button) {
        var mh$ = gtk_scale_button_get_plus_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_get_plus_button", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_get_minus_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_get_minus_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_minus_button(GtkScaleButton *button)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_get_minus_button$descriptor() {
        return gtk_scale_button_get_minus_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_minus_button(GtkScaleButton *button)
     * }
     */
    public static MethodHandle gtk_scale_button_get_minus_button$handle() {
        return gtk_scale_button_get_minus_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_minus_button(GtkScaleButton *button)
     * }
     */
    public static MemorySegment gtk_scale_button_get_minus_button(MemorySegment button) {
        var mh$ = gtk_scale_button_get_minus_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_get_minus_button", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scale_button_get_popup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scale_button_get_popup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_popup(GtkScaleButton *button)
     * }
     */
    public static FunctionDescriptor gtk_scale_button_get_popup$descriptor() {
        return gtk_scale_button_get_popup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_popup(GtkScaleButton *button)
     * }
     */
    public static MethodHandle gtk_scale_button_get_popup$handle() {
        return gtk_scale_button_get_popup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scale_button_get_popup(GtkScaleButton *button)
     * }
     */
    public static MemorySegment gtk_scale_button_get_popup(MemorySegment button) {
        var mh$ = gtk_scale_button_get_popup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scale_button_get_popup", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scrollable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scrollable_get_type$descriptor() {
        return gtk_scrollable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scrollable_get_type()
     * }
     */
    public static MethodHandle gtk_scrollable_get_type$handle() {
        return gtk_scrollable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scrollable_get_type()
     * }
     */
    public static long gtk_scrollable_get_type() {
        var mh$ = gtk_scrollable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_get_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_get_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrollable_get_hadjustment(GtkScrollable *scrollable)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_get_hadjustment$descriptor() {
        return gtk_scrollable_get_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrollable_get_hadjustment(GtkScrollable *scrollable)
     * }
     */
    public static MethodHandle gtk_scrollable_get_hadjustment$handle() {
        return gtk_scrollable_get_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrollable_get_hadjustment(GtkScrollable *scrollable)
     * }
     */
    public static MemorySegment gtk_scrollable_get_hadjustment(MemorySegment scrollable) {
        var mh$ = gtk_scrollable_get_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_get_hadjustment", scrollable);
            }
            return (MemorySegment)mh$.invokeExact(scrollable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_set_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_set_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_hadjustment(GtkScrollable *scrollable, GtkAdjustment *hadjustment)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_set_hadjustment$descriptor() {
        return gtk_scrollable_set_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_hadjustment(GtkScrollable *scrollable, GtkAdjustment *hadjustment)
     * }
     */
    public static MethodHandle gtk_scrollable_set_hadjustment$handle() {
        return gtk_scrollable_set_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_hadjustment(GtkScrollable *scrollable, GtkAdjustment *hadjustment)
     * }
     */
    public static void gtk_scrollable_set_hadjustment(MemorySegment scrollable, MemorySegment hadjustment) {
        var mh$ = gtk_scrollable_set_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_set_hadjustment", scrollable, hadjustment);
            }
            mh$.invokeExact(scrollable, hadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_get_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_get_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrollable_get_vadjustment(GtkScrollable *scrollable)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_get_vadjustment$descriptor() {
        return gtk_scrollable_get_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrollable_get_vadjustment(GtkScrollable *scrollable)
     * }
     */
    public static MethodHandle gtk_scrollable_get_vadjustment$handle() {
        return gtk_scrollable_get_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrollable_get_vadjustment(GtkScrollable *scrollable)
     * }
     */
    public static MemorySegment gtk_scrollable_get_vadjustment(MemorySegment scrollable) {
        var mh$ = gtk_scrollable_get_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_get_vadjustment", scrollable);
            }
            return (MemorySegment)mh$.invokeExact(scrollable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_set_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_set_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_vadjustment(GtkScrollable *scrollable, GtkAdjustment *vadjustment)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_set_vadjustment$descriptor() {
        return gtk_scrollable_set_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_vadjustment(GtkScrollable *scrollable, GtkAdjustment *vadjustment)
     * }
     */
    public static MethodHandle gtk_scrollable_set_vadjustment$handle() {
        return gtk_scrollable_set_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_vadjustment(GtkScrollable *scrollable, GtkAdjustment *vadjustment)
     * }
     */
    public static void gtk_scrollable_set_vadjustment(MemorySegment scrollable, MemorySegment vadjustment) {
        var mh$ = gtk_scrollable_set_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_set_vadjustment", scrollable, vadjustment);
            }
            mh$.invokeExact(scrollable, vadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_get_hscroll_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_get_hscroll_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkScrollablePolicy gtk_scrollable_get_hscroll_policy(GtkScrollable *scrollable)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_get_hscroll_policy$descriptor() {
        return gtk_scrollable_get_hscroll_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkScrollablePolicy gtk_scrollable_get_hscroll_policy(GtkScrollable *scrollable)
     * }
     */
    public static MethodHandle gtk_scrollable_get_hscroll_policy$handle() {
        return gtk_scrollable_get_hscroll_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkScrollablePolicy gtk_scrollable_get_hscroll_policy(GtkScrollable *scrollable)
     * }
     */
    public static int gtk_scrollable_get_hscroll_policy(MemorySegment scrollable) {
        var mh$ = gtk_scrollable_get_hscroll_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_get_hscroll_policy", scrollable);
            }
            return (int)mh$.invokeExact(scrollable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_set_hscroll_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_set_hscroll_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_hscroll_policy(GtkScrollable *scrollable, GtkScrollablePolicy policy)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_set_hscroll_policy$descriptor() {
        return gtk_scrollable_set_hscroll_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_hscroll_policy(GtkScrollable *scrollable, GtkScrollablePolicy policy)
     * }
     */
    public static MethodHandle gtk_scrollable_set_hscroll_policy$handle() {
        return gtk_scrollable_set_hscroll_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_hscroll_policy(GtkScrollable *scrollable, GtkScrollablePolicy policy)
     * }
     */
    public static void gtk_scrollable_set_hscroll_policy(MemorySegment scrollable, int policy) {
        var mh$ = gtk_scrollable_set_hscroll_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_set_hscroll_policy", scrollable, policy);
            }
            mh$.invokeExact(scrollable, policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_get_vscroll_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_get_vscroll_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkScrollablePolicy gtk_scrollable_get_vscroll_policy(GtkScrollable *scrollable)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_get_vscroll_policy$descriptor() {
        return gtk_scrollable_get_vscroll_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkScrollablePolicy gtk_scrollable_get_vscroll_policy(GtkScrollable *scrollable)
     * }
     */
    public static MethodHandle gtk_scrollable_get_vscroll_policy$handle() {
        return gtk_scrollable_get_vscroll_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkScrollablePolicy gtk_scrollable_get_vscroll_policy(GtkScrollable *scrollable)
     * }
     */
    public static int gtk_scrollable_get_vscroll_policy(MemorySegment scrollable) {
        var mh$ = gtk_scrollable_get_vscroll_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_get_vscroll_policy", scrollable);
            }
            return (int)mh$.invokeExact(scrollable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_set_vscroll_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_set_vscroll_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_vscroll_policy(GtkScrollable *scrollable, GtkScrollablePolicy policy)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_set_vscroll_policy$descriptor() {
        return gtk_scrollable_set_vscroll_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_vscroll_policy(GtkScrollable *scrollable, GtkScrollablePolicy policy)
     * }
     */
    public static MethodHandle gtk_scrollable_set_vscroll_policy$handle() {
        return gtk_scrollable_set_vscroll_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrollable_set_vscroll_policy(GtkScrollable *scrollable, GtkScrollablePolicy policy)
     * }
     */
    public static void gtk_scrollable_set_vscroll_policy(MemorySegment scrollable, int policy) {
        var mh$ = gtk_scrollable_set_vscroll_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_set_vscroll_policy", scrollable, policy);
            }
            mh$.invokeExact(scrollable, policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_get_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_get_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrollable_get_border(GtkScrollable *scrollable, GtkBorder *border)
     * }
     */
    public static FunctionDescriptor gtk_scrollable_get_border$descriptor() {
        return gtk_scrollable_get_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrollable_get_border(GtkScrollable *scrollable, GtkBorder *border)
     * }
     */
    public static MethodHandle gtk_scrollable_get_border$handle() {
        return gtk_scrollable_get_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scrollable_get_border(GtkScrollable *scrollable, GtkBorder *border)
     * }
     */
    public static int gtk_scrollable_get_border(MemorySegment scrollable, MemorySegment border) {
        var mh$ = gtk_scrollable_get_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_get_border", scrollable, border);
            }
            return (int)mh$.invokeExact(scrollable, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollbar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollbar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scrollbar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scrollbar_get_type$descriptor() {
        return gtk_scrollbar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scrollbar_get_type()
     * }
     */
    public static MethodHandle gtk_scrollbar_get_type$handle() {
        return gtk_scrollbar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scrollbar_get_type()
     * }
     */
    public static long gtk_scrollbar_get_type() {
        var mh$ = gtk_scrollbar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollbar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollbar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollbar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrollbar_new(GtkOrientation orientation, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_scrollbar_new$descriptor() {
        return gtk_scrollbar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrollbar_new(GtkOrientation orientation, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_scrollbar_new$handle() {
        return gtk_scrollbar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrollbar_new(GtkOrientation orientation, GtkAdjustment *adjustment)
     * }
     */
    public static MemorySegment gtk_scrollbar_new(int orientation, MemorySegment adjustment) {
        var mh$ = gtk_scrollbar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollbar_new", orientation, adjustment);
            }
            return (MemorySegment)mh$.invokeExact(orientation, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_CORNER_TOP_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CORNER_TOP_LEFT = 0
     * }
     */
    public static int GTK_CORNER_TOP_LEFT() {
        return GTK_CORNER_TOP_LEFT;
    }
    private static final int GTK_CORNER_BOTTOM_LEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CORNER_BOTTOM_LEFT = 1
     * }
     */
    public static int GTK_CORNER_BOTTOM_LEFT() {
        return GTK_CORNER_BOTTOM_LEFT;
    }
    private static final int GTK_CORNER_TOP_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CORNER_TOP_RIGHT = 2
     * }
     */
    public static int GTK_CORNER_TOP_RIGHT() {
        return GTK_CORNER_TOP_RIGHT;
    }
    private static final int GTK_CORNER_BOTTOM_RIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CORNER_BOTTOM_RIGHT = 3
     * }
     */
    public static int GTK_CORNER_BOTTOM_RIGHT() {
        return GTK_CORNER_BOTTOM_RIGHT;
    }
    private static final int GTK_POLICY_ALWAYS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POLICY_ALWAYS = 0
     * }
     */
    public static int GTK_POLICY_ALWAYS() {
        return GTK_POLICY_ALWAYS;
    }
    private static final int GTK_POLICY_AUTOMATIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POLICY_AUTOMATIC = 1
     * }
     */
    public static int GTK_POLICY_AUTOMATIC() {
        return GTK_POLICY_AUTOMATIC;
    }
    private static final int GTK_POLICY_NEVER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POLICY_NEVER = 2
     * }
     */
    public static int GTK_POLICY_NEVER() {
        return GTK_POLICY_NEVER;
    }
    private static final int GTK_POLICY_EXTERNAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POLICY_EXTERNAL = 3
     * }
     */
    public static int GTK_POLICY_EXTERNAL() {
        return GTK_POLICY_EXTERNAL;
    }

    private static class gtk_scrolled_window_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scrolled_window_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_type$descriptor() {
        return gtk_scrolled_window_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scrolled_window_get_type()
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_type$handle() {
        return gtk_scrolled_window_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scrolled_window_get_type()
     * }
     */
    public static long gtk_scrolled_window_get_type() {
        var mh$ = gtk_scrolled_window_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_new$descriptor() {
        return gtk_scrolled_window_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MethodHandle gtk_scrolled_window_new$handle() {
        return gtk_scrolled_window_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MemorySegment gtk_scrolled_window_new(MemorySegment hadjustment, MemorySegment vadjustment) {
        var mh$ = gtk_scrolled_window_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_new", hadjustment, vadjustment);
            }
            return (MemorySegment)mh$.invokeExact(hadjustment, vadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_hadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_hadjustment$descriptor() {
        return gtk_scrolled_window_set_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_hadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_hadjustment$handle() {
        return gtk_scrolled_window_set_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_hadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment)
     * }
     */
    public static void gtk_scrolled_window_set_hadjustment(MemorySegment scrolled_window, MemorySegment hadjustment) {
        var mh$ = gtk_scrolled_window_set_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_hadjustment", scrolled_window, hadjustment);
            }
            mh$.invokeExact(scrolled_window, hadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_vadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *vadjustment)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_vadjustment$descriptor() {
        return gtk_scrolled_window_set_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_vadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *vadjustment)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_vadjustment$handle() {
        return gtk_scrolled_window_set_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_vadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *vadjustment)
     * }
     */
    public static void gtk_scrolled_window_set_vadjustment(MemorySegment scrolled_window, MemorySegment vadjustment) {
        var mh$ = gtk_scrolled_window_set_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_vadjustment", scrolled_window, vadjustment);
            }
            mh$.invokeExact(scrolled_window, vadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrolled_window_get_hadjustment(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_hadjustment$descriptor() {
        return gtk_scrolled_window_get_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrolled_window_get_hadjustment(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_hadjustment$handle() {
        return gtk_scrolled_window_get_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrolled_window_get_hadjustment(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MemorySegment gtk_scrolled_window_get_hadjustment(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_hadjustment", scrolled_window);
            }
            return (MemorySegment)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrolled_window_get_vadjustment(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_vadjustment$descriptor() {
        return gtk_scrolled_window_get_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrolled_window_get_vadjustment(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_vadjustment$handle() {
        return gtk_scrolled_window_get_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_scrolled_window_get_vadjustment(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MemorySegment gtk_scrolled_window_get_vadjustment(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_vadjustment", scrolled_window);
            }
            return (MemorySegment)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_hscrollbar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_hscrollbar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_get_hscrollbar(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_hscrollbar$descriptor() {
        return gtk_scrolled_window_get_hscrollbar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_get_hscrollbar(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_hscrollbar$handle() {
        return gtk_scrolled_window_get_hscrollbar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_get_hscrollbar(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MemorySegment gtk_scrolled_window_get_hscrollbar(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_hscrollbar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_hscrollbar", scrolled_window);
            }
            return (MemorySegment)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_vscrollbar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_vscrollbar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_get_vscrollbar(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_vscrollbar$descriptor() {
        return gtk_scrolled_window_get_vscrollbar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_get_vscrollbar(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_vscrollbar$handle() {
        return gtk_scrolled_window_get_vscrollbar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_scrolled_window_get_vscrollbar(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MemorySegment gtk_scrolled_window_get_vscrollbar(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_vscrollbar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_vscrollbar", scrolled_window);
            }
            return (MemorySegment)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_policy$descriptor() {
        return gtk_scrolled_window_set_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_policy$handle() {
        return gtk_scrolled_window_set_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
     * }
     */
    public static void gtk_scrolled_window_set_policy(MemorySegment scrolled_window, int hscrollbar_policy, int vscrollbar_policy) {
        var mh$ = gtk_scrolled_window_set_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_policy", scrolled_window, hscrollbar_policy, vscrollbar_policy);
            }
            mh$.invokeExact(scrolled_window, hscrollbar_policy, vscrollbar_policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_get_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType *hscrollbar_policy, GtkPolicyType *vscrollbar_policy)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_policy$descriptor() {
        return gtk_scrolled_window_get_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_get_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType *hscrollbar_policy, GtkPolicyType *vscrollbar_policy)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_policy$handle() {
        return gtk_scrolled_window_get_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_get_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType *hscrollbar_policy, GtkPolicyType *vscrollbar_policy)
     * }
     */
    public static void gtk_scrolled_window_get_policy(MemorySegment scrolled_window, MemorySegment hscrollbar_policy, MemorySegment vscrollbar_policy) {
        var mh$ = gtk_scrolled_window_get_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_policy", scrolled_window, hscrollbar_policy, vscrollbar_policy);
            }
            mh$.invokeExact(scrolled_window, hscrollbar_policy, vscrollbar_policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_placement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_placement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_placement(GtkScrolledWindow *scrolled_window, GtkCornerType window_placement)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_placement$descriptor() {
        return gtk_scrolled_window_set_placement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_placement(GtkScrolledWindow *scrolled_window, GtkCornerType window_placement)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_placement$handle() {
        return gtk_scrolled_window_set_placement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_placement(GtkScrolledWindow *scrolled_window, GtkCornerType window_placement)
     * }
     */
    public static void gtk_scrolled_window_set_placement(MemorySegment scrolled_window, int window_placement) {
        var mh$ = gtk_scrolled_window_set_placement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_placement", scrolled_window, window_placement);
            }
            mh$.invokeExact(scrolled_window, window_placement);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_unset_placement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_unset_placement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_unset_placement(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_unset_placement$descriptor() {
        return gtk_scrolled_window_unset_placement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_unset_placement(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_unset_placement$handle() {
        return gtk_scrolled_window_unset_placement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_unset_placement(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static void gtk_scrolled_window_unset_placement(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_unset_placement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_unset_placement", scrolled_window);
            }
            mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_placement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_placement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCornerType gtk_scrolled_window_get_placement(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_placement$descriptor() {
        return gtk_scrolled_window_get_placement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCornerType gtk_scrolled_window_get_placement(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_placement$handle() {
        return gtk_scrolled_window_get_placement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCornerType gtk_scrolled_window_get_placement(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_placement(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_placement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_placement", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *scrolled_window, GtkShadowType type)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_shadow_type$descriptor() {
        return gtk_scrolled_window_set_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *scrolled_window, GtkShadowType type)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_shadow_type$handle() {
        return gtk_scrolled_window_set_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow *scrolled_window, GtkShadowType type)
     * }
     */
    public static void gtk_scrolled_window_set_shadow_type(MemorySegment scrolled_window, int type) {
        var mh$ = gtk_scrolled_window_set_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_shadow_type", scrolled_window, type);
            }
            mh$.invokeExact(scrolled_window, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_scrolled_window_get_shadow_type(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_shadow_type$descriptor() {
        return gtk_scrolled_window_get_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_scrolled_window_get_shadow_type(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_shadow_type$handle() {
        return gtk_scrolled_window_get_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkShadowType gtk_scrolled_window_get_shadow_type(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_shadow_type(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_shadow_type", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_add_with_viewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_add_with_viewport"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_add_with_viewport(GtkScrolledWindow *scrolled_window, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_add_with_viewport$descriptor() {
        return gtk_scrolled_window_add_with_viewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_add_with_viewport(GtkScrolledWindow *scrolled_window, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_scrolled_window_add_with_viewport$handle() {
        return gtk_scrolled_window_add_with_viewport.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_add_with_viewport(GtkScrolledWindow *scrolled_window, GtkWidget *child)
     * }
     */
    public static void gtk_scrolled_window_add_with_viewport(MemorySegment scrolled_window, MemorySegment child) {
        var mh$ = gtk_scrolled_window_add_with_viewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_add_with_viewport", scrolled_window, child);
            }
            mh$.invokeExact(scrolled_window, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_min_content_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_min_content_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_min_content_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_min_content_width$descriptor() {
        return gtk_scrolled_window_get_min_content_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_min_content_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_min_content_width$handle() {
        return gtk_scrolled_window_get_min_content_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_min_content_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_min_content_width(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_min_content_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_min_content_width", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_min_content_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_min_content_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_min_content_width(GtkScrolledWindow *scrolled_window, gint width)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_min_content_width$descriptor() {
        return gtk_scrolled_window_set_min_content_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_min_content_width(GtkScrolledWindow *scrolled_window, gint width)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_min_content_width$handle() {
        return gtk_scrolled_window_set_min_content_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_min_content_width(GtkScrolledWindow *scrolled_window, gint width)
     * }
     */
    public static void gtk_scrolled_window_set_min_content_width(MemorySegment scrolled_window, int width) {
        var mh$ = gtk_scrolled_window_set_min_content_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_min_content_width", scrolled_window, width);
            }
            mh$.invokeExact(scrolled_window, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_min_content_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_min_content_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_min_content_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_min_content_height$descriptor() {
        return gtk_scrolled_window_get_min_content_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_min_content_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_min_content_height$handle() {
        return gtk_scrolled_window_get_min_content_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_min_content_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_min_content_height(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_min_content_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_min_content_height", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_min_content_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_min_content_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_min_content_height(GtkScrolledWindow *scrolled_window, gint height)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_min_content_height$descriptor() {
        return gtk_scrolled_window_set_min_content_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_min_content_height(GtkScrolledWindow *scrolled_window, gint height)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_min_content_height$handle() {
        return gtk_scrolled_window_set_min_content_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_min_content_height(GtkScrolledWindow *scrolled_window, gint height)
     * }
     */
    public static void gtk_scrolled_window_set_min_content_height(MemorySegment scrolled_window, int height) {
        var mh$ = gtk_scrolled_window_set_min_content_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_min_content_height", scrolled_window, height);
            }
            mh$.invokeExact(scrolled_window, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_kinetic_scrolling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_kinetic_scrolling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_kinetic_scrolling(GtkScrolledWindow *scrolled_window, gboolean kinetic_scrolling)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_kinetic_scrolling$descriptor() {
        return gtk_scrolled_window_set_kinetic_scrolling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_kinetic_scrolling(GtkScrolledWindow *scrolled_window, gboolean kinetic_scrolling)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_kinetic_scrolling$handle() {
        return gtk_scrolled_window_set_kinetic_scrolling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_kinetic_scrolling(GtkScrolledWindow *scrolled_window, gboolean kinetic_scrolling)
     * }
     */
    public static void gtk_scrolled_window_set_kinetic_scrolling(MemorySegment scrolled_window, int kinetic_scrolling) {
        var mh$ = gtk_scrolled_window_set_kinetic_scrolling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_kinetic_scrolling", scrolled_window, kinetic_scrolling);
            }
            mh$.invokeExact(scrolled_window, kinetic_scrolling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_kinetic_scrolling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_kinetic_scrolling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_kinetic_scrolling(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_kinetic_scrolling$descriptor() {
        return gtk_scrolled_window_get_kinetic_scrolling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_kinetic_scrolling(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_kinetic_scrolling$handle() {
        return gtk_scrolled_window_get_kinetic_scrolling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_kinetic_scrolling(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_kinetic_scrolling(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_kinetic_scrolling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_kinetic_scrolling", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_capture_button_press {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_capture_button_press"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_capture_button_press(GtkScrolledWindow *scrolled_window, gboolean capture_button_press)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_capture_button_press$descriptor() {
        return gtk_scrolled_window_set_capture_button_press.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_capture_button_press(GtkScrolledWindow *scrolled_window, gboolean capture_button_press)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_capture_button_press$handle() {
        return gtk_scrolled_window_set_capture_button_press.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_capture_button_press(GtkScrolledWindow *scrolled_window, gboolean capture_button_press)
     * }
     */
    public static void gtk_scrolled_window_set_capture_button_press(MemorySegment scrolled_window, int capture_button_press) {
        var mh$ = gtk_scrolled_window_set_capture_button_press.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_capture_button_press", scrolled_window, capture_button_press);
            }
            mh$.invokeExact(scrolled_window, capture_button_press);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_capture_button_press {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_capture_button_press"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_capture_button_press(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_capture_button_press$descriptor() {
        return gtk_scrolled_window_get_capture_button_press.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_capture_button_press(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_capture_button_press$handle() {
        return gtk_scrolled_window_get_capture_button_press.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_capture_button_press(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_capture_button_press(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_capture_button_press.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_capture_button_press", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_overlay_scrolling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_overlay_scrolling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_overlay_scrolling(GtkScrolledWindow *scrolled_window, gboolean overlay_scrolling)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_overlay_scrolling$descriptor() {
        return gtk_scrolled_window_set_overlay_scrolling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_overlay_scrolling(GtkScrolledWindow *scrolled_window, gboolean overlay_scrolling)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_overlay_scrolling$handle() {
        return gtk_scrolled_window_set_overlay_scrolling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_overlay_scrolling(GtkScrolledWindow *scrolled_window, gboolean overlay_scrolling)
     * }
     */
    public static void gtk_scrolled_window_set_overlay_scrolling(MemorySegment scrolled_window, int overlay_scrolling) {
        var mh$ = gtk_scrolled_window_set_overlay_scrolling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_overlay_scrolling", scrolled_window, overlay_scrolling);
            }
            mh$.invokeExact(scrolled_window, overlay_scrolling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_overlay_scrolling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_overlay_scrolling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_overlay_scrolling(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_overlay_scrolling$descriptor() {
        return gtk_scrolled_window_get_overlay_scrolling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_overlay_scrolling(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_overlay_scrolling$handle() {
        return gtk_scrolled_window_get_overlay_scrolling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_overlay_scrolling(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_overlay_scrolling(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_overlay_scrolling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_overlay_scrolling", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_max_content_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_max_content_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_max_content_width(GtkScrolledWindow *scrolled_window, gint width)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_max_content_width$descriptor() {
        return gtk_scrolled_window_set_max_content_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_max_content_width(GtkScrolledWindow *scrolled_window, gint width)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_max_content_width$handle() {
        return gtk_scrolled_window_set_max_content_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_max_content_width(GtkScrolledWindow *scrolled_window, gint width)
     * }
     */
    public static void gtk_scrolled_window_set_max_content_width(MemorySegment scrolled_window, int width) {
        var mh$ = gtk_scrolled_window_set_max_content_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_max_content_width", scrolled_window, width);
            }
            mh$.invokeExact(scrolled_window, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_max_content_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_max_content_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_max_content_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_max_content_width$descriptor() {
        return gtk_scrolled_window_get_max_content_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_max_content_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_max_content_width$handle() {
        return gtk_scrolled_window_get_max_content_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_max_content_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_max_content_width(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_max_content_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_max_content_width", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_max_content_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_max_content_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_max_content_height(GtkScrolledWindow *scrolled_window, gint height)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_max_content_height$descriptor() {
        return gtk_scrolled_window_set_max_content_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_max_content_height(GtkScrolledWindow *scrolled_window, gint height)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_max_content_height$handle() {
        return gtk_scrolled_window_set_max_content_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_max_content_height(GtkScrolledWindow *scrolled_window, gint height)
     * }
     */
    public static void gtk_scrolled_window_set_max_content_height(MemorySegment scrolled_window, int height) {
        var mh$ = gtk_scrolled_window_set_max_content_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_max_content_height", scrolled_window, height);
            }
            mh$.invokeExact(scrolled_window, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_max_content_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_max_content_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_max_content_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_max_content_height$descriptor() {
        return gtk_scrolled_window_get_max_content_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_max_content_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_max_content_height$handle() {
        return gtk_scrolled_window_get_max_content_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_scrolled_window_get_max_content_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_max_content_height(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_max_content_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_max_content_height", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_propagate_natural_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_propagate_natural_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_propagate_natural_width(GtkScrolledWindow *scrolled_window, gboolean propagate)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_propagate_natural_width$descriptor() {
        return gtk_scrolled_window_set_propagate_natural_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_propagate_natural_width(GtkScrolledWindow *scrolled_window, gboolean propagate)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_propagate_natural_width$handle() {
        return gtk_scrolled_window_set_propagate_natural_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_propagate_natural_width(GtkScrolledWindow *scrolled_window, gboolean propagate)
     * }
     */
    public static void gtk_scrolled_window_set_propagate_natural_width(MemorySegment scrolled_window, int propagate) {
        var mh$ = gtk_scrolled_window_set_propagate_natural_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_propagate_natural_width", scrolled_window, propagate);
            }
            mh$.invokeExact(scrolled_window, propagate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_propagate_natural_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_propagate_natural_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_propagate_natural_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_propagate_natural_width$descriptor() {
        return gtk_scrolled_window_get_propagate_natural_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_propagate_natural_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_propagate_natural_width$handle() {
        return gtk_scrolled_window_get_propagate_natural_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_propagate_natural_width(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_propagate_natural_width(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_propagate_natural_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_propagate_natural_width", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_set_propagate_natural_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_set_propagate_natural_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_propagate_natural_height(GtkScrolledWindow *scrolled_window, gboolean propagate)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_set_propagate_natural_height$descriptor() {
        return gtk_scrolled_window_set_propagate_natural_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_propagate_natural_height(GtkScrolledWindow *scrolled_window, gboolean propagate)
     * }
     */
    public static MethodHandle gtk_scrolled_window_set_propagate_natural_height$handle() {
        return gtk_scrolled_window_set_propagate_natural_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_scrolled_window_set_propagate_natural_height(GtkScrolledWindow *scrolled_window, gboolean propagate)
     * }
     */
    public static void gtk_scrolled_window_set_propagate_natural_height(MemorySegment scrolled_window, int propagate) {
        var mh$ = gtk_scrolled_window_set_propagate_natural_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_set_propagate_natural_height", scrolled_window, propagate);
            }
            mh$.invokeExact(scrolled_window, propagate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrolled_window_get_propagate_natural_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrolled_window_get_propagate_natural_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_propagate_natural_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static FunctionDescriptor gtk_scrolled_window_get_propagate_natural_height$descriptor() {
        return gtk_scrolled_window_get_propagate_natural_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_propagate_natural_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static MethodHandle gtk_scrolled_window_get_propagate_natural_height$handle() {
        return gtk_scrolled_window_get_propagate_natural_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_scrolled_window_get_propagate_natural_height(GtkScrolledWindow *scrolled_window)
     * }
     */
    public static int gtk_scrolled_window_get_propagate_natural_height(MemorySegment scrolled_window) {
        var mh$ = gtk_scrolled_window_get_propagate_natural_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrolled_window_get_propagate_natural_height", scrolled_window);
            }
            return (int)mh$.invokeExact(scrolled_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_search_bar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_search_bar_get_type$descriptor() {
        return gtk_search_bar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_search_bar_get_type()
     * }
     */
    public static MethodHandle gtk_search_bar_get_type$handle() {
        return gtk_search_bar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_search_bar_get_type()
     * }
     */
    public static long gtk_search_bar_get_type() {
        var mh$ = gtk_search_bar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_search_bar_new()
     * }
     */
    public static FunctionDescriptor gtk_search_bar_new$descriptor() {
        return gtk_search_bar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_search_bar_new()
     * }
     */
    public static MethodHandle gtk_search_bar_new$handle() {
        return gtk_search_bar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_search_bar_new()
     * }
     */
    public static MemorySegment gtk_search_bar_new() {
        var mh$ = gtk_search_bar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_connect_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_connect_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_search_bar_connect_entry(GtkSearchBar *bar, GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_search_bar_connect_entry$descriptor() {
        return gtk_search_bar_connect_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_search_bar_connect_entry(GtkSearchBar *bar, GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_search_bar_connect_entry$handle() {
        return gtk_search_bar_connect_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_search_bar_connect_entry(GtkSearchBar *bar, GtkEntry *entry)
     * }
     */
    public static void gtk_search_bar_connect_entry(MemorySegment bar, MemorySegment entry) {
        var mh$ = gtk_search_bar_connect_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_connect_entry", bar, entry);
            }
            mh$.invokeExact(bar, entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_get_search_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_get_search_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_get_search_mode(GtkSearchBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_search_bar_get_search_mode$descriptor() {
        return gtk_search_bar_get_search_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_get_search_mode(GtkSearchBar *bar)
     * }
     */
    public static MethodHandle gtk_search_bar_get_search_mode$handle() {
        return gtk_search_bar_get_search_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_get_search_mode(GtkSearchBar *bar)
     * }
     */
    public static int gtk_search_bar_get_search_mode(MemorySegment bar) {
        var mh$ = gtk_search_bar_get_search_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_get_search_mode", bar);
            }
            return (int)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_set_search_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_set_search_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_search_bar_set_search_mode(GtkSearchBar *bar, gboolean search_mode)
     * }
     */
    public static FunctionDescriptor gtk_search_bar_set_search_mode$descriptor() {
        return gtk_search_bar_set_search_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_search_bar_set_search_mode(GtkSearchBar *bar, gboolean search_mode)
     * }
     */
    public static MethodHandle gtk_search_bar_set_search_mode$handle() {
        return gtk_search_bar_set_search_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_search_bar_set_search_mode(GtkSearchBar *bar, gboolean search_mode)
     * }
     */
    public static void gtk_search_bar_set_search_mode(MemorySegment bar, int search_mode) {
        var mh$ = gtk_search_bar_set_search_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_set_search_mode", bar, search_mode);
            }
            mh$.invokeExact(bar, search_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_get_show_close_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_get_show_close_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_get_show_close_button(GtkSearchBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_search_bar_get_show_close_button$descriptor() {
        return gtk_search_bar_get_show_close_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_get_show_close_button(GtkSearchBar *bar)
     * }
     */
    public static MethodHandle gtk_search_bar_get_show_close_button$handle() {
        return gtk_search_bar_get_show_close_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_get_show_close_button(GtkSearchBar *bar)
     * }
     */
    public static int gtk_search_bar_get_show_close_button(MemorySegment bar) {
        var mh$ = gtk_search_bar_get_show_close_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_get_show_close_button", bar);
            }
            return (int)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_set_show_close_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_set_show_close_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_search_bar_set_show_close_button(GtkSearchBar *bar, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_search_bar_set_show_close_button$descriptor() {
        return gtk_search_bar_set_show_close_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_search_bar_set_show_close_button(GtkSearchBar *bar, gboolean visible)
     * }
     */
    public static MethodHandle gtk_search_bar_set_show_close_button$handle() {
        return gtk_search_bar_set_show_close_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_search_bar_set_show_close_button(GtkSearchBar *bar, gboolean visible)
     * }
     */
    public static void gtk_search_bar_set_show_close_button(MemorySegment bar, int visible) {
        var mh$ = gtk_search_bar_set_show_close_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_set_show_close_button", bar, visible);
            }
            mh$.invokeExact(bar, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_bar_handle_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_bar_handle_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_handle_event(GtkSearchBar *bar, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_search_bar_handle_event$descriptor() {
        return gtk_search_bar_handle_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_handle_event(GtkSearchBar *bar, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_search_bar_handle_event$handle() {
        return gtk_search_bar_handle_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_search_bar_handle_event(GtkSearchBar *bar, GdkEvent *event)
     * }
     */
    public static int gtk_search_bar_handle_event(MemorySegment bar, MemorySegment event) {
        var mh$ = gtk_search_bar_handle_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_bar_handle_event", bar, event);
            }
            return (int)mh$.invokeExact(bar, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_entry_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_entry_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_search_entry_get_type()
     * }
     */
    public static FunctionDescriptor gtk_search_entry_get_type$descriptor() {
        return gtk_search_entry_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_search_entry_get_type()
     * }
     */
    public static MethodHandle gtk_search_entry_get_type$handle() {
        return gtk_search_entry_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_search_entry_get_type()
     * }
     */
    public static long gtk_search_entry_get_type() {
        var mh$ = gtk_search_entry_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_entry_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_entry_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_entry_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_search_entry_new()
     * }
     */
    public static FunctionDescriptor gtk_search_entry_new$descriptor() {
        return gtk_search_entry_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_search_entry_new()
     * }
     */
    public static MethodHandle gtk_search_entry_new$handle() {
        return gtk_search_entry_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_search_entry_new()
     * }
     */
    public static MemorySegment gtk_search_entry_new() {
        var mh$ = gtk_search_entry_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_entry_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_search_entry_handle_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_search_entry_handle_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_entry_handle_event(GtkSearchEntry *entry, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_search_entry_handle_event$descriptor() {
        return gtk_search_entry_handle_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_search_entry_handle_event(GtkSearchEntry *entry, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_search_entry_handle_event$handle() {
        return gtk_search_entry_handle_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_search_entry_handle_event(GtkSearchEntry *entry, GdkEvent *event)
     * }
     */
    public static int gtk_search_entry_handle_event(MemorySegment entry, MemorySegment event) {
        var mh$ = gtk_search_entry_handle_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_search_entry_handle_event", entry, event);
            }
            return (int)mh$.invokeExact(entry, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_separator_get_type()
     * }
     */
    public static FunctionDescriptor gtk_separator_get_type$descriptor() {
        return gtk_separator_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_separator_get_type()
     * }
     */
    public static MethodHandle gtk_separator_get_type$handle() {
        return gtk_separator_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_separator_get_type()
     * }
     */
    public static long gtk_separator_get_type() {
        var mh$ = gtk_separator_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_new(GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_separator_new$descriptor() {
        return gtk_separator_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_new(GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_separator_new$handle() {
        return gtk_separator_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_new(GtkOrientation orientation)
     * }
     */
    public static MemorySegment gtk_separator_new(int orientation) {
        var mh$ = gtk_separator_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_new", orientation);
            }
            return (MemorySegment)mh$.invokeExact(orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_menu_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_menu_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_separator_menu_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_separator_menu_item_get_type$descriptor() {
        return gtk_separator_menu_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_separator_menu_item_get_type()
     * }
     */
    public static MethodHandle gtk_separator_menu_item_get_type$handle() {
        return gtk_separator_menu_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_separator_menu_item_get_type()
     * }
     */
    public static long gtk_separator_menu_item_get_type() {
        var mh$ = gtk_separator_menu_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_menu_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_menu_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_menu_item_new()
     * }
     */
    public static FunctionDescriptor gtk_separator_menu_item_new$descriptor() {
        return gtk_separator_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_menu_item_new()
     * }
     */
    public static MethodHandle gtk_separator_menu_item_new$handle() {
        return gtk_separator_menu_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_separator_menu_item_new()
     * }
     */
    public static MemorySegment gtk_separator_menu_item_new() {
        var mh$ = gtk_separator_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_menu_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_tool_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_tool_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_separator_tool_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_separator_tool_item_get_type$descriptor() {
        return gtk_separator_tool_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_separator_tool_item_get_type()
     * }
     */
    public static MethodHandle gtk_separator_tool_item_get_type$handle() {
        return gtk_separator_tool_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_separator_tool_item_get_type()
     * }
     */
    public static long gtk_separator_tool_item_get_type() {
        var mh$ = gtk_separator_tool_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_tool_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_tool_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_tool_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_separator_tool_item_new()
     * }
     */
    public static FunctionDescriptor gtk_separator_tool_item_new$descriptor() {
        return gtk_separator_tool_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_separator_tool_item_new()
     * }
     */
    public static MethodHandle gtk_separator_tool_item_new$handle() {
        return gtk_separator_tool_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_separator_tool_item_new()
     * }
     */
    public static MemorySegment gtk_separator_tool_item_new() {
        var mh$ = gtk_separator_tool_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_tool_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_tool_item_get_draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_tool_item_get_draw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_separator_tool_item_get_draw(GtkSeparatorToolItem *item)
     * }
     */
    public static FunctionDescriptor gtk_separator_tool_item_get_draw$descriptor() {
        return gtk_separator_tool_item_get_draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_separator_tool_item_get_draw(GtkSeparatorToolItem *item)
     * }
     */
    public static MethodHandle gtk_separator_tool_item_get_draw$handle() {
        return gtk_separator_tool_item_get_draw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_separator_tool_item_get_draw(GtkSeparatorToolItem *item)
     * }
     */
    public static int gtk_separator_tool_item_get_draw(MemorySegment item) {
        var mh$ = gtk_separator_tool_item_get_draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_tool_item_get_draw", item);
            }
            return (int)mh$.invokeExact(item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_separator_tool_item_set_draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_separator_tool_item_set_draw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_separator_tool_item_set_draw(GtkSeparatorToolItem *item, gboolean draw)
     * }
     */
    public static FunctionDescriptor gtk_separator_tool_item_set_draw$descriptor() {
        return gtk_separator_tool_item_set_draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_separator_tool_item_set_draw(GtkSeparatorToolItem *item, gboolean draw)
     * }
     */
    public static MethodHandle gtk_separator_tool_item_set_draw$handle() {
        return gtk_separator_tool_item_set_draw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_separator_tool_item_set_draw(GtkSeparatorToolItem *item, gboolean draw)
     * }
     */
    public static void gtk_separator_tool_item_set_draw(MemorySegment item, int draw) {
        var mh$ = gtk_separator_tool_item_set_draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_separator_tool_item_set_draw", item, draw);
            }
            mh$.invokeExact(item, draw);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_settings_get_type()
     * }
     */
    public static FunctionDescriptor gtk_settings_get_type$descriptor() {
        return gtk_settings_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_settings_get_type()
     * }
     */
    public static MethodHandle gtk_settings_get_type$handle() {
        return gtk_settings_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_settings_get_type()
     * }
     */
    public static long gtk_settings_get_type() {
        var mh$ = gtk_settings_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSettings *gtk_settings_get_default()
     * }
     */
    public static FunctionDescriptor gtk_settings_get_default$descriptor() {
        return gtk_settings_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSettings *gtk_settings_get_default()
     * }
     */
    public static MethodHandle gtk_settings_get_default$handle() {
        return gtk_settings_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSettings *gtk_settings_get_default()
     * }
     */
    public static MemorySegment gtk_settings_get_default() {
        var mh$ = gtk_settings_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_get_for_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_get_for_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSettings *gtk_settings_get_for_screen(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_settings_get_for_screen$descriptor() {
        return gtk_settings_get_for_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSettings *gtk_settings_get_for_screen(GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_settings_get_for_screen$handle() {
        return gtk_settings_get_for_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSettings *gtk_settings_get_for_screen(GdkScreen *screen)
     * }
     */
    public static MemorySegment gtk_settings_get_for_screen(MemorySegment screen) {
        var mh$ = gtk_settings_get_for_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_get_for_screen", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_install_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_install_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_settings_install_property(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor gtk_settings_install_property$descriptor() {
        return gtk_settings_install_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_settings_install_property(GParamSpec *pspec)
     * }
     */
    public static MethodHandle gtk_settings_install_property$handle() {
        return gtk_settings_install_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_settings_install_property(GParamSpec *pspec)
     * }
     */
    public static void gtk_settings_install_property(MemorySegment pspec) {
        var mh$ = gtk_settings_install_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_install_property", pspec);
            }
            mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_install_property_parser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_install_property_parser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_settings_install_property_parser(GParamSpec *pspec, GtkRcPropertyParser parser)
     * }
     */
    public static FunctionDescriptor gtk_settings_install_property_parser$descriptor() {
        return gtk_settings_install_property_parser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_settings_install_property_parser(GParamSpec *pspec, GtkRcPropertyParser parser)
     * }
     */
    public static MethodHandle gtk_settings_install_property_parser$handle() {
        return gtk_settings_install_property_parser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_settings_install_property_parser(GParamSpec *pspec, GtkRcPropertyParser parser)
     * }
     */
    public static void gtk_settings_install_property_parser(MemorySegment pspec, MemorySegment parser) {
        var mh$ = gtk_settings_install_property_parser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_install_property_parser", pspec, parser);
            }
            mh$.invokeExact(pspec, parser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_property_parse_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_property_parse_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_color(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static FunctionDescriptor gtk_rc_property_parse_color$descriptor() {
        return gtk_rc_property_parse_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_color(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static MethodHandle gtk_rc_property_parse_color$handle() {
        return gtk_rc_property_parse_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_color(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static int gtk_rc_property_parse_color(MemorySegment pspec, MemorySegment gstring, MemorySegment property_value) {
        var mh$ = gtk_rc_property_parse_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_property_parse_color", pspec, gstring, property_value);
            }
            return (int)mh$.invokeExact(pspec, gstring, property_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_property_parse_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_property_parse_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_enum(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static FunctionDescriptor gtk_rc_property_parse_enum$descriptor() {
        return gtk_rc_property_parse_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_enum(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static MethodHandle gtk_rc_property_parse_enum$handle() {
        return gtk_rc_property_parse_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_enum(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static int gtk_rc_property_parse_enum(MemorySegment pspec, MemorySegment gstring, MemorySegment property_value) {
        var mh$ = gtk_rc_property_parse_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_property_parse_enum", pspec, gstring, property_value);
            }
            return (int)mh$.invokeExact(pspec, gstring, property_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_property_parse_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_property_parse_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_flags(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static FunctionDescriptor gtk_rc_property_parse_flags$descriptor() {
        return gtk_rc_property_parse_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_flags(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static MethodHandle gtk_rc_property_parse_flags$handle() {
        return gtk_rc_property_parse_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_flags(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static int gtk_rc_property_parse_flags(MemorySegment pspec, MemorySegment gstring, MemorySegment property_value) {
        var mh$ = gtk_rc_property_parse_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_property_parse_flags", pspec, gstring, property_value);
            }
            return (int)mh$.invokeExact(pspec, gstring, property_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_property_parse_requisition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_property_parse_requisition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_requisition(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static FunctionDescriptor gtk_rc_property_parse_requisition$descriptor() {
        return gtk_rc_property_parse_requisition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_requisition(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static MethodHandle gtk_rc_property_parse_requisition$handle() {
        return gtk_rc_property_parse_requisition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_requisition(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static int gtk_rc_property_parse_requisition(MemorySegment pspec, MemorySegment gstring, MemorySegment property_value) {
        var mh$ = gtk_rc_property_parse_requisition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_property_parse_requisition", pspec, gstring, property_value);
            }
            return (int)mh$.invokeExact(pspec, gstring, property_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_property_parse_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_property_parse_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_border(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static FunctionDescriptor gtk_rc_property_parse_border$descriptor() {
        return gtk_rc_property_parse_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_border(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static MethodHandle gtk_rc_property_parse_border$handle() {
        return gtk_rc_property_parse_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_rc_property_parse_border(const GParamSpec *pspec, const GString *gstring, GValue *property_value)
     * }
     */
    public static int gtk_rc_property_parse_border(MemorySegment pspec, MemorySegment gstring, MemorySegment property_value) {
        var mh$ = gtk_rc_property_parse_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_property_parse_border", pspec, gstring, property_value);
            }
            return (int)mh$.invokeExact(pspec, gstring, property_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_set_property_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_set_property_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_property_value(GtkSettings *settings, const gchar *name, const GtkSettingsValue *svalue)
     * }
     */
    public static FunctionDescriptor gtk_settings_set_property_value$descriptor() {
        return gtk_settings_set_property_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_property_value(GtkSettings *settings, const gchar *name, const GtkSettingsValue *svalue)
     * }
     */
    public static MethodHandle gtk_settings_set_property_value$handle() {
        return gtk_settings_set_property_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_settings_set_property_value(GtkSettings *settings, const gchar *name, const GtkSettingsValue *svalue)
     * }
     */
    public static void gtk_settings_set_property_value(MemorySegment settings, MemorySegment name, MemorySegment svalue) {
        var mh$ = gtk_settings_set_property_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_set_property_value", settings, name, svalue);
            }
            mh$.invokeExact(settings, name, svalue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_set_string_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_set_string_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_string_property(GtkSettings *settings, const gchar *name, const gchar *v_string, const gchar *origin)
     * }
     */
    public static FunctionDescriptor gtk_settings_set_string_property$descriptor() {
        return gtk_settings_set_string_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_string_property(GtkSettings *settings, const gchar *name, const gchar *v_string, const gchar *origin)
     * }
     */
    public static MethodHandle gtk_settings_set_string_property$handle() {
        return gtk_settings_set_string_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_settings_set_string_property(GtkSettings *settings, const gchar *name, const gchar *v_string, const gchar *origin)
     * }
     */
    public static void gtk_settings_set_string_property(MemorySegment settings, MemorySegment name, MemorySegment v_string, MemorySegment origin) {
        var mh$ = gtk_settings_set_string_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_set_string_property", settings, name, v_string, origin);
            }
            mh$.invokeExact(settings, name, v_string, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_set_long_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_set_long_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_long_property(GtkSettings *settings, const gchar *name, glong v_long, const gchar *origin)
     * }
     */
    public static FunctionDescriptor gtk_settings_set_long_property$descriptor() {
        return gtk_settings_set_long_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_long_property(GtkSettings *settings, const gchar *name, glong v_long, const gchar *origin)
     * }
     */
    public static MethodHandle gtk_settings_set_long_property$handle() {
        return gtk_settings_set_long_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_settings_set_long_property(GtkSettings *settings, const gchar *name, glong v_long, const gchar *origin)
     * }
     */
    public static void gtk_settings_set_long_property(MemorySegment settings, MemorySegment name, long v_long, MemorySegment origin) {
        var mh$ = gtk_settings_set_long_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_set_long_property", settings, name, v_long, origin);
            }
            mh$.invokeExact(settings, name, v_long, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_set_double_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_set_double_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_double_property(GtkSettings *settings, const gchar *name, gdouble v_double, const gchar *origin)
     * }
     */
    public static FunctionDescriptor gtk_settings_set_double_property$descriptor() {
        return gtk_settings_set_double_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_settings_set_double_property(GtkSettings *settings, const gchar *name, gdouble v_double, const gchar *origin)
     * }
     */
    public static MethodHandle gtk_settings_set_double_property$handle() {
        return gtk_settings_set_double_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_settings_set_double_property(GtkSettings *settings, const gchar *name, gdouble v_double, const gchar *origin)
     * }
     */
    public static void gtk_settings_set_double_property(MemorySegment settings, MemorySegment name, double v_double, MemorySegment origin) {
        var mh$ = gtk_settings_set_double_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_set_double_property", settings, name, v_double, origin);
            }
            mh$.invokeExact(settings, name, v_double, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_settings_reset_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_settings_reset_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_settings_reset_property(GtkSettings *settings, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_settings_reset_property$descriptor() {
        return gtk_settings_reset_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_settings_reset_property(GtkSettings *settings, const gchar *name)
     * }
     */
    public static MethodHandle gtk_settings_reset_property$handle() {
        return gtk_settings_reset_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_settings_reset_property(GtkSettings *settings, const gchar *name)
     * }
     */
    public static void gtk_settings_reset_property(MemorySegment settings, MemorySegment name) {
        var mh$ = gtk_settings_reset_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_settings_reset_property", settings, name);
            }
            mh$.invokeExact(settings, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcut_label_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcut_label_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_shortcut_label_get_type()
     * }
     */
    public static FunctionDescriptor gtk_shortcut_label_get_type$descriptor() {
        return gtk_shortcut_label_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_shortcut_label_get_type()
     * }
     */
    public static MethodHandle gtk_shortcut_label_get_type$handle() {
        return gtk_shortcut_label_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_shortcut_label_get_type()
     * }
     */
    public static long gtk_shortcut_label_get_type() {
        var mh$ = gtk_shortcut_label_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcut_label_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcut_label_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcut_label_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_shortcut_label_new(const gchar *accelerator)
     * }
     */
    public static FunctionDescriptor gtk_shortcut_label_new$descriptor() {
        return gtk_shortcut_label_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_shortcut_label_new(const gchar *accelerator)
     * }
     */
    public static MethodHandle gtk_shortcut_label_new$handle() {
        return gtk_shortcut_label_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_shortcut_label_new(const gchar *accelerator)
     * }
     */
    public static MemorySegment gtk_shortcut_label_new(MemorySegment accelerator) {
        var mh$ = gtk_shortcut_label_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcut_label_new", accelerator);
            }
            return (MemorySegment)mh$.invokeExact(accelerator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcut_label_get_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcut_label_get_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_shortcut_label_get_accelerator(GtkShortcutLabel *self)
     * }
     */
    public static FunctionDescriptor gtk_shortcut_label_get_accelerator$descriptor() {
        return gtk_shortcut_label_get_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_shortcut_label_get_accelerator(GtkShortcutLabel *self)
     * }
     */
    public static MethodHandle gtk_shortcut_label_get_accelerator$handle() {
        return gtk_shortcut_label_get_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_shortcut_label_get_accelerator(GtkShortcutLabel *self)
     * }
     */
    public static MemorySegment gtk_shortcut_label_get_accelerator(MemorySegment self) {
        var mh$ = gtk_shortcut_label_get_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcut_label_get_accelerator", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcut_label_set_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcut_label_set_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_shortcut_label_set_accelerator(GtkShortcutLabel *self, const gchar *accelerator)
     * }
     */
    public static FunctionDescriptor gtk_shortcut_label_set_accelerator$descriptor() {
        return gtk_shortcut_label_set_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_shortcut_label_set_accelerator(GtkShortcutLabel *self, const gchar *accelerator)
     * }
     */
    public static MethodHandle gtk_shortcut_label_set_accelerator$handle() {
        return gtk_shortcut_label_set_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_shortcut_label_set_accelerator(GtkShortcutLabel *self, const gchar *accelerator)
     * }
     */
    public static void gtk_shortcut_label_set_accelerator(MemorySegment self, MemorySegment accelerator) {
        var mh$ = gtk_shortcut_label_set_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcut_label_set_accelerator", self, accelerator);
            }
            mh$.invokeExact(self, accelerator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcut_label_get_disabled_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcut_label_get_disabled_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_shortcut_label_get_disabled_text(GtkShortcutLabel *self)
     * }
     */
    public static FunctionDescriptor gtk_shortcut_label_get_disabled_text$descriptor() {
        return gtk_shortcut_label_get_disabled_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_shortcut_label_get_disabled_text(GtkShortcutLabel *self)
     * }
     */
    public static MethodHandle gtk_shortcut_label_get_disabled_text$handle() {
        return gtk_shortcut_label_get_disabled_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_shortcut_label_get_disabled_text(GtkShortcutLabel *self)
     * }
     */
    public static MemorySegment gtk_shortcut_label_get_disabled_text(MemorySegment self) {
        var mh$ = gtk_shortcut_label_get_disabled_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcut_label_get_disabled_text", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcut_label_set_disabled_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcut_label_set_disabled_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_shortcut_label_set_disabled_text(GtkShortcutLabel *self, const gchar *disabled_text)
     * }
     */
    public static FunctionDescriptor gtk_shortcut_label_set_disabled_text$descriptor() {
        return gtk_shortcut_label_set_disabled_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_shortcut_label_set_disabled_text(GtkShortcutLabel *self, const gchar *disabled_text)
     * }
     */
    public static MethodHandle gtk_shortcut_label_set_disabled_text$handle() {
        return gtk_shortcut_label_set_disabled_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_shortcut_label_set_disabled_text(GtkShortcutLabel *self, const gchar *disabled_text)
     * }
     */
    public static void gtk_shortcut_label_set_disabled_text(MemorySegment self, MemorySegment disabled_text) {
        var mh$ = gtk_shortcut_label_set_disabled_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcut_label_set_disabled_text", self, disabled_text);
            }
            mh$.invokeExact(self, disabled_text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcuts_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcuts_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_group_get_type()
     * }
     */
    public static FunctionDescriptor gtk_shortcuts_group_get_type$descriptor() {
        return gtk_shortcuts_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_group_get_type()
     * }
     */
    public static MethodHandle gtk_shortcuts_group_get_type$handle() {
        return gtk_shortcuts_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_group_get_type()
     * }
     */
    public static long gtk_shortcuts_group_get_type() {
        var mh$ = gtk_shortcuts_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcuts_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcuts_section_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcuts_section_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_section_get_type()
     * }
     */
    public static FunctionDescriptor gtk_shortcuts_section_get_type$descriptor() {
        return gtk_shortcuts_section_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_section_get_type()
     * }
     */
    public static MethodHandle gtk_shortcuts_section_get_type$handle() {
        return gtk_shortcuts_section_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_section_get_type()
     * }
     */
    public static long gtk_shortcuts_section_get_type() {
        var mh$ = gtk_shortcuts_section_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcuts_section_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_SHORTCUT_ACCELERATOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_ACCELERATOR = 0
     * }
     */
    public static int GTK_SHORTCUT_ACCELERATOR() {
        return GTK_SHORTCUT_ACCELERATOR;
    }
    private static final int GTK_SHORTCUT_GESTURE_PINCH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_GESTURE_PINCH = 1
     * }
     */
    public static int GTK_SHORTCUT_GESTURE_PINCH() {
        return GTK_SHORTCUT_GESTURE_PINCH;
    }
    private static final int GTK_SHORTCUT_GESTURE_STRETCH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_GESTURE_STRETCH = 2
     * }
     */
    public static int GTK_SHORTCUT_GESTURE_STRETCH() {
        return GTK_SHORTCUT_GESTURE_STRETCH;
    }
    private static final int GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE = 3
     * }
     */
    public static int GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE() {
        return GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE;
    }
    private static final int GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE = 4
     * }
     */
    public static int GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE() {
        return GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE;
    }
    private static final int GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT = 5
     * }
     */
    public static int GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT() {
        return GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT;
    }
    private static final int GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT = 6
     * }
     */
    public static int GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT() {
        return GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT;
    }
    private static final int GTK_SHORTCUT_GESTURE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHORTCUT_GESTURE = 7
     * }
     */
    public static int GTK_SHORTCUT_GESTURE() {
        return GTK_SHORTCUT_GESTURE;
    }

    private static class gtk_shortcuts_shortcut_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcuts_shortcut_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_shortcut_get_type()
     * }
     */
    public static FunctionDescriptor gtk_shortcuts_shortcut_get_type$descriptor() {
        return gtk_shortcuts_shortcut_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_shortcut_get_type()
     * }
     */
    public static MethodHandle gtk_shortcuts_shortcut_get_type$handle() {
        return gtk_shortcuts_shortcut_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_shortcut_get_type()
     * }
     */
    public static long gtk_shortcuts_shortcut_get_type() {
        var mh$ = gtk_shortcuts_shortcut_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcuts_shortcut_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_show_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_show_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_show_uri(GdkScreen *screen, const gchar *uri, guint32 timestamp, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_show_uri$descriptor() {
        return gtk_show_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_show_uri(GdkScreen *screen, const gchar *uri, guint32 timestamp, GError **error)
     * }
     */
    public static MethodHandle gtk_show_uri$handle() {
        return gtk_show_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_show_uri(GdkScreen *screen, const gchar *uri, guint32 timestamp, GError **error)
     * }
     */
    public static int gtk_show_uri(MemorySegment screen, MemorySegment uri, int timestamp, MemorySegment error) {
        var mh$ = gtk_show_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_show_uri", screen, uri, timestamp, error);
            }
            return (int)mh$.invokeExact(screen, uri, timestamp, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_show_uri_on_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_show_uri_on_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_show_uri_on_window(GtkWindow *parent, const char *uri, guint32 timestamp, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_show_uri_on_window$descriptor() {
        return gtk_show_uri_on_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_show_uri_on_window(GtkWindow *parent, const char *uri, guint32 timestamp, GError **error)
     * }
     */
    public static MethodHandle gtk_show_uri_on_window$handle() {
        return gtk_show_uri_on_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_show_uri_on_window(GtkWindow *parent, const char *uri, guint32 timestamp, GError **error)
     * }
     */
    public static int gtk_show_uri_on_window(MemorySegment parent, MemorySegment uri, int timestamp, MemorySegment error) {
        var mh$ = gtk_show_uri_on_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_show_uri_on_window", parent, uri, timestamp, error);
            }
            return (int)mh$.invokeExact(parent, uri, timestamp, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_STACK_TRANSITION_TYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_NONE = 0
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_NONE() {
        return GTK_STACK_TRANSITION_TYPE_NONE;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_CROSSFADE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_CROSSFADE = 1
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_CROSSFADE() {
        return GTK_STACK_TRANSITION_TYPE_CROSSFADE;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT = 2
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT() {
        return GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT = 3
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT() {
        return GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_SLIDE_UP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_SLIDE_UP = 4
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_SLIDE_UP() {
        return GTK_STACK_TRANSITION_TYPE_SLIDE_UP;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN = 5
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN() {
        return GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT = 6
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT() {
        return GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN = 7
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN() {
        return GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_UP = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_UP = 8
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_UP() {
        return GTK_STACK_TRANSITION_TYPE_OVER_UP;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_DOWN = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_DOWN = 9
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_DOWN() {
        return GTK_STACK_TRANSITION_TYPE_OVER_DOWN;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_LEFT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_LEFT = 10
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_LEFT() {
        return GTK_STACK_TRANSITION_TYPE_OVER_LEFT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_RIGHT = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_RIGHT = 11
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_RIGHT() {
        return GTK_STACK_TRANSITION_TYPE_OVER_RIGHT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_UNDER_UP = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_UNDER_UP = 12
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_UNDER_UP() {
        return GTK_STACK_TRANSITION_TYPE_UNDER_UP;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_UNDER_DOWN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_UNDER_DOWN = 13
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_UNDER_DOWN() {
        return GTK_STACK_TRANSITION_TYPE_UNDER_DOWN;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_UNDER_LEFT = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_UNDER_LEFT = 14
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_UNDER_LEFT() {
        return GTK_STACK_TRANSITION_TYPE_UNDER_LEFT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT = 15
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT() {
        return GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN = 16
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN() {
        return GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP = 17
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP() {
        return GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT = 18
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT() {
        return GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT;
    }
    private static final int GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT = 19
     * }
     */
    public static int GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT() {
        return GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT;
    }

    private static class gtk_stack_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_stack_get_type()
     * }
     */
    public static FunctionDescriptor gtk_stack_get_type$descriptor() {
        return gtk_stack_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_stack_get_type()
     * }
     */
    public static MethodHandle gtk_stack_get_type$handle() {
        return gtk_stack_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_stack_get_type()
     * }
     */
    public static long gtk_stack_get_type() {
        var mh$ = gtk_stack_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_new()
     * }
     */
    public static FunctionDescriptor gtk_stack_new$descriptor() {
        return gtk_stack_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_new()
     * }
     */
    public static MethodHandle gtk_stack_new$handle() {
        return gtk_stack_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_new()
     * }
     */
    public static MemorySegment gtk_stack_new() {
        var mh$ = gtk_stack_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_add_named {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_add_named"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_add_named(GtkStack *stack, GtkWidget *child, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_stack_add_named$descriptor() {
        return gtk_stack_add_named.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_add_named(GtkStack *stack, GtkWidget *child, const gchar *name)
     * }
     */
    public static MethodHandle gtk_stack_add_named$handle() {
        return gtk_stack_add_named.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_add_named(GtkStack *stack, GtkWidget *child, const gchar *name)
     * }
     */
    public static void gtk_stack_add_named(MemorySegment stack, MemorySegment child, MemorySegment name) {
        var mh$ = gtk_stack_add_named.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_add_named", stack, child, name);
            }
            mh$.invokeExact(stack, child, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_add_titled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_add_titled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_add_titled(GtkStack *stack, GtkWidget *child, const gchar *name, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_stack_add_titled$descriptor() {
        return gtk_stack_add_titled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_add_titled(GtkStack *stack, GtkWidget *child, const gchar *name, const gchar *title)
     * }
     */
    public static MethodHandle gtk_stack_add_titled$handle() {
        return gtk_stack_add_titled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_add_titled(GtkStack *stack, GtkWidget *child, const gchar *name, const gchar *title)
     * }
     */
    public static void gtk_stack_add_titled(MemorySegment stack, MemorySegment child, MemorySegment name, MemorySegment title) {
        var mh$ = gtk_stack_add_titled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_add_titled", stack, child, name, title);
            }
            mh$.invokeExact(stack, child, name, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_child_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_child_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_get_child_by_name(GtkStack *stack, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_child_by_name$descriptor() {
        return gtk_stack_get_child_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_get_child_by_name(GtkStack *stack, const gchar *name)
     * }
     */
    public static MethodHandle gtk_stack_get_child_by_name$handle() {
        return gtk_stack_get_child_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_get_child_by_name(GtkStack *stack, const gchar *name)
     * }
     */
    public static MemorySegment gtk_stack_get_child_by_name(MemorySegment stack, MemorySegment name) {
        var mh$ = gtk_stack_get_child_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_child_by_name", stack, name);
            }
            return (MemorySegment)mh$.invokeExact(stack, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_visible_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_visible_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child(GtkStack *stack, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_visible_child$descriptor() {
        return gtk_stack_set_visible_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child(GtkStack *stack, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_stack_set_visible_child$handle() {
        return gtk_stack_set_visible_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child(GtkStack *stack, GtkWidget *child)
     * }
     */
    public static void gtk_stack_set_visible_child(MemorySegment stack, MemorySegment child) {
        var mh$ = gtk_stack_set_visible_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_visible_child", stack, child);
            }
            mh$.invokeExact(stack, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_visible_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_visible_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_get_visible_child(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_visible_child$descriptor() {
        return gtk_stack_get_visible_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_get_visible_child(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_visible_child$handle() {
        return gtk_stack_get_visible_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_get_visible_child(GtkStack *stack)
     * }
     */
    public static MemorySegment gtk_stack_get_visible_child(MemorySegment stack) {
        var mh$ = gtk_stack_get_visible_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_visible_child", stack);
            }
            return (MemorySegment)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_visible_child_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_visible_child_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child_name(GtkStack *stack, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_visible_child_name$descriptor() {
        return gtk_stack_set_visible_child_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child_name(GtkStack *stack, const gchar *name)
     * }
     */
    public static MethodHandle gtk_stack_set_visible_child_name$handle() {
        return gtk_stack_set_visible_child_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child_name(GtkStack *stack, const gchar *name)
     * }
     */
    public static void gtk_stack_set_visible_child_name(MemorySegment stack, MemorySegment name) {
        var mh$ = gtk_stack_set_visible_child_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_visible_child_name", stack, name);
            }
            mh$.invokeExact(stack, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_visible_child_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_visible_child_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_stack_get_visible_child_name(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_visible_child_name$descriptor() {
        return gtk_stack_get_visible_child_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_stack_get_visible_child_name(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_visible_child_name$handle() {
        return gtk_stack_get_visible_child_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_stack_get_visible_child_name(GtkStack *stack)
     * }
     */
    public static MemorySegment gtk_stack_get_visible_child_name(MemorySegment stack) {
        var mh$ = gtk_stack_get_visible_child_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_visible_child_name", stack);
            }
            return (MemorySegment)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_visible_child_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_visible_child_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child_full(GtkStack *stack, const gchar *name, GtkStackTransitionType transition)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_visible_child_full$descriptor() {
        return gtk_stack_set_visible_child_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child_full(GtkStack *stack, const gchar *name, GtkStackTransitionType transition)
     * }
     */
    public static MethodHandle gtk_stack_set_visible_child_full$handle() {
        return gtk_stack_set_visible_child_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_visible_child_full(GtkStack *stack, const gchar *name, GtkStackTransitionType transition)
     * }
     */
    public static void gtk_stack_set_visible_child_full(MemorySegment stack, MemorySegment name, int transition) {
        var mh$ = gtk_stack_set_visible_child_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_visible_child_full", stack, name, transition);
            }
            mh$.invokeExact(stack, name, transition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_homogeneous(GtkStack *stack, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_homogeneous$descriptor() {
        return gtk_stack_set_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_homogeneous(GtkStack *stack, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_stack_set_homogeneous$handle() {
        return gtk_stack_set_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_homogeneous(GtkStack *stack, gboolean homogeneous)
     * }
     */
    public static void gtk_stack_set_homogeneous(MemorySegment stack, int homogeneous) {
        var mh$ = gtk_stack_set_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_homogeneous", stack, homogeneous);
            }
            mh$.invokeExact(stack, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_homogeneous(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_homogeneous$descriptor() {
        return gtk_stack_get_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_homogeneous(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_homogeneous$handle() {
        return gtk_stack_get_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_homogeneous(GtkStack *stack)
     * }
     */
    public static int gtk_stack_get_homogeneous(MemorySegment stack) {
        var mh$ = gtk_stack_get_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_homogeneous", stack);
            }
            return (int)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_hhomogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_hhomogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_hhomogeneous(GtkStack *stack, gboolean hhomogeneous)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_hhomogeneous$descriptor() {
        return gtk_stack_set_hhomogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_hhomogeneous(GtkStack *stack, gboolean hhomogeneous)
     * }
     */
    public static MethodHandle gtk_stack_set_hhomogeneous$handle() {
        return gtk_stack_set_hhomogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_hhomogeneous(GtkStack *stack, gboolean hhomogeneous)
     * }
     */
    public static void gtk_stack_set_hhomogeneous(MemorySegment stack, int hhomogeneous) {
        var mh$ = gtk_stack_set_hhomogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_hhomogeneous", stack, hhomogeneous);
            }
            mh$.invokeExact(stack, hhomogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_hhomogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_hhomogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_hhomogeneous(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_hhomogeneous$descriptor() {
        return gtk_stack_get_hhomogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_hhomogeneous(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_hhomogeneous$handle() {
        return gtk_stack_get_hhomogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_hhomogeneous(GtkStack *stack)
     * }
     */
    public static int gtk_stack_get_hhomogeneous(MemorySegment stack) {
        var mh$ = gtk_stack_get_hhomogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_hhomogeneous", stack);
            }
            return (int)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_vhomogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_vhomogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_vhomogeneous(GtkStack *stack, gboolean vhomogeneous)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_vhomogeneous$descriptor() {
        return gtk_stack_set_vhomogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_vhomogeneous(GtkStack *stack, gboolean vhomogeneous)
     * }
     */
    public static MethodHandle gtk_stack_set_vhomogeneous$handle() {
        return gtk_stack_set_vhomogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_vhomogeneous(GtkStack *stack, gboolean vhomogeneous)
     * }
     */
    public static void gtk_stack_set_vhomogeneous(MemorySegment stack, int vhomogeneous) {
        var mh$ = gtk_stack_set_vhomogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_vhomogeneous", stack, vhomogeneous);
            }
            mh$.invokeExact(stack, vhomogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_vhomogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_vhomogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_vhomogeneous(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_vhomogeneous$descriptor() {
        return gtk_stack_get_vhomogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_vhomogeneous(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_vhomogeneous$handle() {
        return gtk_stack_get_vhomogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_vhomogeneous(GtkStack *stack)
     * }
     */
    public static int gtk_stack_get_vhomogeneous(MemorySegment stack) {
        var mh$ = gtk_stack_get_vhomogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_vhomogeneous", stack);
            }
            return (int)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_transition_duration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_transition_duration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_transition_duration(GtkStack *stack, guint duration)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_transition_duration$descriptor() {
        return gtk_stack_set_transition_duration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_transition_duration(GtkStack *stack, guint duration)
     * }
     */
    public static MethodHandle gtk_stack_set_transition_duration$handle() {
        return gtk_stack_set_transition_duration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_transition_duration(GtkStack *stack, guint duration)
     * }
     */
    public static void gtk_stack_set_transition_duration(MemorySegment stack, int duration) {
        var mh$ = gtk_stack_set_transition_duration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_transition_duration", stack, duration);
            }
            mh$.invokeExact(stack, duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_transition_duration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_transition_duration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_stack_get_transition_duration(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_transition_duration$descriptor() {
        return gtk_stack_get_transition_duration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_stack_get_transition_duration(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_transition_duration$handle() {
        return gtk_stack_get_transition_duration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_stack_get_transition_duration(GtkStack *stack)
     * }
     */
    public static int gtk_stack_get_transition_duration(MemorySegment stack) {
        var mh$ = gtk_stack_get_transition_duration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_transition_duration", stack);
            }
            return (int)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_transition_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_transition_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_transition_type(GtkStack *stack, GtkStackTransitionType transition)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_transition_type$descriptor() {
        return gtk_stack_set_transition_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_transition_type(GtkStack *stack, GtkStackTransitionType transition)
     * }
     */
    public static MethodHandle gtk_stack_set_transition_type$handle() {
        return gtk_stack_set_transition_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_transition_type(GtkStack *stack, GtkStackTransitionType transition)
     * }
     */
    public static void gtk_stack_set_transition_type(MemorySegment stack, int transition) {
        var mh$ = gtk_stack_set_transition_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_transition_type", stack, transition);
            }
            mh$.invokeExact(stack, transition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_transition_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_transition_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStackTransitionType gtk_stack_get_transition_type(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_transition_type$descriptor() {
        return gtk_stack_get_transition_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStackTransitionType gtk_stack_get_transition_type(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_transition_type$handle() {
        return gtk_stack_get_transition_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStackTransitionType gtk_stack_get_transition_type(GtkStack *stack)
     * }
     */
    public static int gtk_stack_get_transition_type(MemorySegment stack) {
        var mh$ = gtk_stack_get_transition_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_transition_type", stack);
            }
            return (int)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_transition_running {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_transition_running"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_transition_running(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_transition_running$descriptor() {
        return gtk_stack_get_transition_running.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_transition_running(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_transition_running$handle() {
        return gtk_stack_get_transition_running.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_transition_running(GtkStack *stack)
     * }
     */
    public static int gtk_stack_get_transition_running(MemorySegment stack) {
        var mh$ = gtk_stack_get_transition_running.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_transition_running", stack);
            }
            return (int)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_set_interpolate_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_set_interpolate_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_interpolate_size(GtkStack *stack, gboolean interpolate_size)
     * }
     */
    public static FunctionDescriptor gtk_stack_set_interpolate_size$descriptor() {
        return gtk_stack_set_interpolate_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_set_interpolate_size(GtkStack *stack, gboolean interpolate_size)
     * }
     */
    public static MethodHandle gtk_stack_set_interpolate_size$handle() {
        return gtk_stack_set_interpolate_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_set_interpolate_size(GtkStack *stack, gboolean interpolate_size)
     * }
     */
    public static void gtk_stack_set_interpolate_size(MemorySegment stack, int interpolate_size) {
        var mh$ = gtk_stack_set_interpolate_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_set_interpolate_size", stack, interpolate_size);
            }
            mh$.invokeExact(stack, interpolate_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_get_interpolate_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_get_interpolate_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_interpolate_size(GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_get_interpolate_size$descriptor() {
        return gtk_stack_get_interpolate_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_interpolate_size(GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_get_interpolate_size$handle() {
        return gtk_stack_get_interpolate_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_stack_get_interpolate_size(GtkStack *stack)
     * }
     */
    public static int gtk_stack_get_interpolate_size(MemorySegment stack) {
        var mh$ = gtk_stack_get_interpolate_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_get_interpolate_size", stack);
            }
            return (int)mh$.invokeExact(stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_sidebar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_sidebar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_stack_sidebar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_stack_sidebar_get_type$descriptor() {
        return gtk_stack_sidebar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_stack_sidebar_get_type()
     * }
     */
    public static MethodHandle gtk_stack_sidebar_get_type$handle() {
        return gtk_stack_sidebar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_stack_sidebar_get_type()
     * }
     */
    public static long gtk_stack_sidebar_get_type() {
        var mh$ = gtk_stack_sidebar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_sidebar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_sidebar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_sidebar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_sidebar_new()
     * }
     */
    public static FunctionDescriptor gtk_stack_sidebar_new$descriptor() {
        return gtk_stack_sidebar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_sidebar_new()
     * }
     */
    public static MethodHandle gtk_stack_sidebar_new$handle() {
        return gtk_stack_sidebar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_sidebar_new()
     * }
     */
    public static MemorySegment gtk_stack_sidebar_new() {
        var mh$ = gtk_stack_sidebar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_sidebar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_sidebar_set_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_sidebar_set_stack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_sidebar_set_stack(GtkStackSidebar *sidebar, GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_sidebar_set_stack$descriptor() {
        return gtk_stack_sidebar_set_stack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_sidebar_set_stack(GtkStackSidebar *sidebar, GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_sidebar_set_stack$handle() {
        return gtk_stack_sidebar_set_stack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_sidebar_set_stack(GtkStackSidebar *sidebar, GtkStack *stack)
     * }
     */
    public static void gtk_stack_sidebar_set_stack(MemorySegment sidebar, MemorySegment stack) {
        var mh$ = gtk_stack_sidebar_set_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_sidebar_set_stack", sidebar, stack);
            }
            mh$.invokeExact(sidebar, stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_sidebar_get_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_sidebar_get_stack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStack *gtk_stack_sidebar_get_stack(GtkStackSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_stack_sidebar_get_stack$descriptor() {
        return gtk_stack_sidebar_get_stack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStack *gtk_stack_sidebar_get_stack(GtkStackSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_stack_sidebar_get_stack$handle() {
        return gtk_stack_sidebar_get_stack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStack *gtk_stack_sidebar_get_stack(GtkStackSidebar *sidebar)
     * }
     */
    public static MemorySegment gtk_stack_sidebar_get_stack(MemorySegment sidebar) {
        var mh$ = gtk_stack_sidebar_get_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_sidebar_get_stack", sidebar);
            }
            return (MemorySegment)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_distribute_natural_allocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_distribute_natural_allocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_distribute_natural_allocation(gint extra_space, guint n_requested_sizes, GtkRequestedSize *sizes)
     * }
     */
    public static FunctionDescriptor gtk_distribute_natural_allocation$descriptor() {
        return gtk_distribute_natural_allocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_distribute_natural_allocation(gint extra_space, guint n_requested_sizes, GtkRequestedSize *sizes)
     * }
     */
    public static MethodHandle gtk_distribute_natural_allocation$handle() {
        return gtk_distribute_natural_allocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_distribute_natural_allocation(gint extra_space, guint n_requested_sizes, GtkRequestedSize *sizes)
     * }
     */
    public static int gtk_distribute_natural_allocation(int extra_space, int n_requested_sizes, MemorySegment sizes) {
        var mh$ = gtk_distribute_natural_allocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_distribute_natural_allocation", extra_space, n_requested_sizes, sizes);
            }
            return (int)mh$.invokeExact(extra_space, n_requested_sizes, sizes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_UPDATE_ALWAYS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UPDATE_ALWAYS = 0
     * }
     */
    public static int GTK_UPDATE_ALWAYS() {
        return GTK_UPDATE_ALWAYS;
    }
    private static final int GTK_UPDATE_IF_VALID = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UPDATE_IF_VALID = 1
     * }
     */
    public static int GTK_UPDATE_IF_VALID() {
        return GTK_UPDATE_IF_VALID;
    }
    private static final int GTK_SPIN_STEP_FORWARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SPIN_STEP_FORWARD = 0
     * }
     */
    public static int GTK_SPIN_STEP_FORWARD() {
        return GTK_SPIN_STEP_FORWARD;
    }
    private static final int GTK_SPIN_STEP_BACKWARD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SPIN_STEP_BACKWARD = 1
     * }
     */
    public static int GTK_SPIN_STEP_BACKWARD() {
        return GTK_SPIN_STEP_BACKWARD;
    }
    private static final int GTK_SPIN_PAGE_FORWARD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SPIN_PAGE_FORWARD = 2
     * }
     */
    public static int GTK_SPIN_PAGE_FORWARD() {
        return GTK_SPIN_PAGE_FORWARD;
    }
    private static final int GTK_SPIN_PAGE_BACKWARD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SPIN_PAGE_BACKWARD = 3
     * }
     */
    public static int GTK_SPIN_PAGE_BACKWARD() {
        return GTK_SPIN_PAGE_BACKWARD;
    }
    private static final int GTK_SPIN_HOME = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SPIN_HOME = 4
     * }
     */
    public static int GTK_SPIN_HOME() {
        return GTK_SPIN_HOME;
    }
    private static final int GTK_SPIN_END = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SPIN_END = 5
     * }
     */
    public static int GTK_SPIN_END() {
        return GTK_SPIN_END;
    }
    private static final int GTK_SPIN_USER_DEFINED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SPIN_USER_DEFINED = 6
     * }
     */
    public static int GTK_SPIN_USER_DEFINED() {
        return GTK_SPIN_USER_DEFINED;
    }

    private static class gtk_spin_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_spin_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_type$descriptor() {
        return gtk_spin_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_spin_button_get_type()
     * }
     */
    public static MethodHandle gtk_spin_button_get_type$handle() {
        return gtk_spin_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_spin_button_get_type()
     * }
     */
    public static long gtk_spin_button_get_type() {
        var mh$ = gtk_spin_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_configure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_configure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_configure(GtkSpinButton *spin_button, GtkAdjustment *adjustment, gdouble climb_rate, guint digits)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_configure$descriptor() {
        return gtk_spin_button_configure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_configure(GtkSpinButton *spin_button, GtkAdjustment *adjustment, gdouble climb_rate, guint digits)
     * }
     */
    public static MethodHandle gtk_spin_button_configure$handle() {
        return gtk_spin_button_configure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_configure(GtkSpinButton *spin_button, GtkAdjustment *adjustment, gdouble climb_rate, guint digits)
     * }
     */
    public static void gtk_spin_button_configure(MemorySegment spin_button, MemorySegment adjustment, double climb_rate, int digits) {
        var mh$ = gtk_spin_button_configure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_configure", spin_button, adjustment, climb_rate, digits);
            }
            mh$.invokeExact(spin_button, adjustment, climb_rate, digits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spin_button_new(GtkAdjustment *adjustment, gdouble climb_rate, guint digits)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_new$descriptor() {
        return gtk_spin_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spin_button_new(GtkAdjustment *adjustment, gdouble climb_rate, guint digits)
     * }
     */
    public static MethodHandle gtk_spin_button_new$handle() {
        return gtk_spin_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spin_button_new(GtkAdjustment *adjustment, gdouble climb_rate, guint digits)
     * }
     */
    public static MemorySegment gtk_spin_button_new(MemorySegment adjustment, double climb_rate, int digits) {
        var mh$ = gtk_spin_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_new", adjustment, climb_rate, digits);
            }
            return (MemorySegment)mh$.invokeExact(adjustment, climb_rate, digits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_new_with_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_new_with_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spin_button_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_new_with_range$descriptor() {
        return gtk_spin_button_new_with_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spin_button_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MethodHandle gtk_spin_button_new_with_range$handle() {
        return gtk_spin_button_new_with_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spin_button_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MemorySegment gtk_spin_button_new_with_range(double min, double max, double step) {
        var mh$ = gtk_spin_button_new_with_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_new_with_range", min, max, step);
            }
            return (MemorySegment)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_adjustment(GtkSpinButton *spin_button, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_adjustment$descriptor() {
        return gtk_spin_button_set_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_adjustment(GtkSpinButton *spin_button, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_spin_button_set_adjustment$handle() {
        return gtk_spin_button_set_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_adjustment(GtkSpinButton *spin_button, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_spin_button_set_adjustment(MemorySegment spin_button, MemorySegment adjustment) {
        var mh$ = gtk_spin_button_set_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_adjustment", spin_button, adjustment);
            }
            mh$.invokeExact(spin_button, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_spin_button_get_adjustment(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_adjustment$descriptor() {
        return gtk_spin_button_get_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_spin_button_get_adjustment(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_adjustment$handle() {
        return gtk_spin_button_get_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_spin_button_get_adjustment(GtkSpinButton *spin_button)
     * }
     */
    public static MemorySegment gtk_spin_button_get_adjustment(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_adjustment", spin_button);
            }
            return (MemorySegment)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_digits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_digits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_digits(GtkSpinButton *spin_button, guint digits)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_digits$descriptor() {
        return gtk_spin_button_set_digits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_digits(GtkSpinButton *spin_button, guint digits)
     * }
     */
    public static MethodHandle gtk_spin_button_set_digits$handle() {
        return gtk_spin_button_set_digits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_digits(GtkSpinButton *spin_button, guint digits)
     * }
     */
    public static void gtk_spin_button_set_digits(MemorySegment spin_button, int digits) {
        var mh$ = gtk_spin_button_set_digits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_digits", spin_button, digits);
            }
            mh$.invokeExact(spin_button, digits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_digits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_digits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_spin_button_get_digits(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_digits$descriptor() {
        return gtk_spin_button_get_digits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_spin_button_get_digits(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_digits$handle() {
        return gtk_spin_button_get_digits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_spin_button_get_digits(GtkSpinButton *spin_button)
     * }
     */
    public static int gtk_spin_button_get_digits(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_digits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_digits", spin_button);
            }
            return (int)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_increments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_increments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_increments(GtkSpinButton *spin_button, gdouble step, gdouble page)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_increments$descriptor() {
        return gtk_spin_button_set_increments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_increments(GtkSpinButton *spin_button, gdouble step, gdouble page)
     * }
     */
    public static MethodHandle gtk_spin_button_set_increments$handle() {
        return gtk_spin_button_set_increments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_increments(GtkSpinButton *spin_button, gdouble step, gdouble page)
     * }
     */
    public static void gtk_spin_button_set_increments(MemorySegment spin_button, double step, double page) {
        var mh$ = gtk_spin_button_set_increments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_increments", spin_button, step, page);
            }
            mh$.invokeExact(spin_button, step, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_increments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_increments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_get_increments(GtkSpinButton *spin_button, gdouble *step, gdouble *page)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_increments$descriptor() {
        return gtk_spin_button_get_increments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_get_increments(GtkSpinButton *spin_button, gdouble *step, gdouble *page)
     * }
     */
    public static MethodHandle gtk_spin_button_get_increments$handle() {
        return gtk_spin_button_get_increments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_get_increments(GtkSpinButton *spin_button, gdouble *step, gdouble *page)
     * }
     */
    public static void gtk_spin_button_get_increments(MemorySegment spin_button, MemorySegment step, MemorySegment page) {
        var mh$ = gtk_spin_button_get_increments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_increments", spin_button, step, page);
            }
            mh$.invokeExact(spin_button, step, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_range(GtkSpinButton *spin_button, gdouble min, gdouble max)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_range$descriptor() {
        return gtk_spin_button_set_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_range(GtkSpinButton *spin_button, gdouble min, gdouble max)
     * }
     */
    public static MethodHandle gtk_spin_button_set_range$handle() {
        return gtk_spin_button_set_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_range(GtkSpinButton *spin_button, gdouble min, gdouble max)
     * }
     */
    public static void gtk_spin_button_set_range(MemorySegment spin_button, double min, double max) {
        var mh$ = gtk_spin_button_set_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_range", spin_button, min, max);
            }
            mh$.invokeExact(spin_button, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_get_range(GtkSpinButton *spin_button, gdouble *min, gdouble *max)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_range$descriptor() {
        return gtk_spin_button_get_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_get_range(GtkSpinButton *spin_button, gdouble *min, gdouble *max)
     * }
     */
    public static MethodHandle gtk_spin_button_get_range$handle() {
        return gtk_spin_button_get_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_get_range(GtkSpinButton *spin_button, gdouble *min, gdouble *max)
     * }
     */
    public static void gtk_spin_button_get_range(MemorySegment spin_button, MemorySegment min, MemorySegment max) {
        var mh$ = gtk_spin_button_get_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_range", spin_button, min, max);
            }
            mh$.invokeExact(spin_button, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_spin_button_get_value(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_value$descriptor() {
        return gtk_spin_button_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_spin_button_get_value(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_value$handle() {
        return gtk_spin_button_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_spin_button_get_value(GtkSpinButton *spin_button)
     * }
     */
    public static double gtk_spin_button_get_value(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_value", spin_button);
            }
            return (double)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_value_as_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_value_as_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_spin_button_get_value_as_int(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_value_as_int$descriptor() {
        return gtk_spin_button_get_value_as_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_spin_button_get_value_as_int(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_value_as_int$handle() {
        return gtk_spin_button_get_value_as_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_spin_button_get_value_as_int(GtkSpinButton *spin_button)
     * }
     */
    public static int gtk_spin_button_get_value_as_int(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_value_as_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_value_as_int", spin_button);
            }
            return (int)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_value(GtkSpinButton *spin_button, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_value$descriptor() {
        return gtk_spin_button_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_value(GtkSpinButton *spin_button, gdouble value)
     * }
     */
    public static MethodHandle gtk_spin_button_set_value$handle() {
        return gtk_spin_button_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_value(GtkSpinButton *spin_button, gdouble value)
     * }
     */
    public static void gtk_spin_button_set_value(MemorySegment spin_button, double value) {
        var mh$ = gtk_spin_button_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_value", spin_button, value);
            }
            mh$.invokeExact(spin_button, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_update_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_update_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_update_policy(GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_update_policy$descriptor() {
        return gtk_spin_button_set_update_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_update_policy(GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy)
     * }
     */
    public static MethodHandle gtk_spin_button_set_update_policy$handle() {
        return gtk_spin_button_set_update_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_update_policy(GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy)
     * }
     */
    public static void gtk_spin_button_set_update_policy(MemorySegment spin_button, int policy) {
        var mh$ = gtk_spin_button_set_update_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_update_policy", spin_button, policy);
            }
            mh$.invokeExact(spin_button, policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_update_policy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_update_policy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_update_policy$descriptor() {
        return gtk_spin_button_get_update_policy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_update_policy$handle() {
        return gtk_spin_button_get_update_policy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy(GtkSpinButton *spin_button)
     * }
     */
    public static int gtk_spin_button_get_update_policy(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_update_policy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_update_policy", spin_button);
            }
            return (int)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_numeric {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_numeric"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_numeric(GtkSpinButton *spin_button, gboolean numeric)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_numeric$descriptor() {
        return gtk_spin_button_set_numeric.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_numeric(GtkSpinButton *spin_button, gboolean numeric)
     * }
     */
    public static MethodHandle gtk_spin_button_set_numeric$handle() {
        return gtk_spin_button_set_numeric.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_numeric(GtkSpinButton *spin_button, gboolean numeric)
     * }
     */
    public static void gtk_spin_button_set_numeric(MemorySegment spin_button, int numeric) {
        var mh$ = gtk_spin_button_set_numeric.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_numeric", spin_button, numeric);
            }
            mh$.invokeExact(spin_button, numeric);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_numeric {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_numeric"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_numeric(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_numeric$descriptor() {
        return gtk_spin_button_get_numeric.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_numeric(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_numeric$handle() {
        return gtk_spin_button_get_numeric.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_numeric(GtkSpinButton *spin_button)
     * }
     */
    public static int gtk_spin_button_get_numeric(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_numeric.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_numeric", spin_button);
            }
            return (int)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_spin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_spin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_spin(GtkSpinButton *spin_button, GtkSpinType direction, gdouble increment)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_spin$descriptor() {
        return gtk_spin_button_spin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_spin(GtkSpinButton *spin_button, GtkSpinType direction, gdouble increment)
     * }
     */
    public static MethodHandle gtk_spin_button_spin$handle() {
        return gtk_spin_button_spin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_spin(GtkSpinButton *spin_button, GtkSpinType direction, gdouble increment)
     * }
     */
    public static void gtk_spin_button_spin(MemorySegment spin_button, int direction, double increment) {
        var mh$ = gtk_spin_button_spin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_spin", spin_button, direction, increment);
            }
            mh$.invokeExact(spin_button, direction, increment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_wrap(GtkSpinButton *spin_button, gboolean wrap)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_wrap$descriptor() {
        return gtk_spin_button_set_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_wrap(GtkSpinButton *spin_button, gboolean wrap)
     * }
     */
    public static MethodHandle gtk_spin_button_set_wrap$handle() {
        return gtk_spin_button_set_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_wrap(GtkSpinButton *spin_button, gboolean wrap)
     * }
     */
    public static void gtk_spin_button_set_wrap(MemorySegment spin_button, int wrap) {
        var mh$ = gtk_spin_button_set_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_wrap", spin_button, wrap);
            }
            mh$.invokeExact(spin_button, wrap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_wrap(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_wrap$descriptor() {
        return gtk_spin_button_get_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_wrap(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_wrap$handle() {
        return gtk_spin_button_get_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_wrap(GtkSpinButton *spin_button)
     * }
     */
    public static int gtk_spin_button_get_wrap(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_wrap", spin_button);
            }
            return (int)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_set_snap_to_ticks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_set_snap_to_ticks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_snap_to_ticks(GtkSpinButton *spin_button, gboolean snap_to_ticks)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_set_snap_to_ticks$descriptor() {
        return gtk_spin_button_set_snap_to_ticks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_snap_to_ticks(GtkSpinButton *spin_button, gboolean snap_to_ticks)
     * }
     */
    public static MethodHandle gtk_spin_button_set_snap_to_ticks$handle() {
        return gtk_spin_button_set_snap_to_ticks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_set_snap_to_ticks(GtkSpinButton *spin_button, gboolean snap_to_ticks)
     * }
     */
    public static void gtk_spin_button_set_snap_to_ticks(MemorySegment spin_button, int snap_to_ticks) {
        var mh$ = gtk_spin_button_set_snap_to_ticks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_set_snap_to_ticks", spin_button, snap_to_ticks);
            }
            mh$.invokeExact(spin_button, snap_to_ticks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_get_snap_to_ticks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_get_snap_to_ticks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_snap_to_ticks(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_get_snap_to_ticks$descriptor() {
        return gtk_spin_button_get_snap_to_ticks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_snap_to_ticks(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_get_snap_to_ticks$handle() {
        return gtk_spin_button_get_snap_to_ticks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_spin_button_get_snap_to_ticks(GtkSpinButton *spin_button)
     * }
     */
    public static int gtk_spin_button_get_snap_to_ticks(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_get_snap_to_ticks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_get_snap_to_ticks", spin_button);
            }
            return (int)mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_update"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_update(GtkSpinButton *spin_button)
     * }
     */
    public static FunctionDescriptor gtk_spin_button_update$descriptor() {
        return gtk_spin_button_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spin_button_update(GtkSpinButton *spin_button)
     * }
     */
    public static MethodHandle gtk_spin_button_update$handle() {
        return gtk_spin_button_update.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spin_button_update(GtkSpinButton *spin_button)
     * }
     */
    public static void gtk_spin_button_update(MemorySegment spin_button) {
        var mh$ = gtk_spin_button_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_update", spin_button);
            }
            mh$.invokeExact(spin_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_spin_button_get_panels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_spin_button_get_panels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_spin_button_get_panels(GtkSpinButton *spin_button, GdkWindow **down_panel, GdkWindow **up_panel)
     * }
     */
    public static FunctionDescriptor _gtk_spin_button_get_panels$descriptor() {
        return _gtk_spin_button_get_panels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_spin_button_get_panels(GtkSpinButton *spin_button, GdkWindow **down_panel, GdkWindow **up_panel)
     * }
     */
    public static MethodHandle _gtk_spin_button_get_panels$handle() {
        return _gtk_spin_button_get_panels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_spin_button_get_panels(GtkSpinButton *spin_button, GdkWindow **down_panel, GdkWindow **up_panel)
     * }
     */
    public static void _gtk_spin_button_get_panels(MemorySegment spin_button, MemorySegment down_panel, MemorySegment up_panel) {
        var mh$ = _gtk_spin_button_get_panels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_spin_button_get_panels", spin_button, down_panel, up_panel);
            }
            mh$.invokeExact(spin_button, down_panel, up_panel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spinner_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spinner_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_spinner_get_type()
     * }
     */
    public static FunctionDescriptor gtk_spinner_get_type$descriptor() {
        return gtk_spinner_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_spinner_get_type()
     * }
     */
    public static MethodHandle gtk_spinner_get_type$handle() {
        return gtk_spinner_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_spinner_get_type()
     * }
     */
    public static long gtk_spinner_get_type() {
        var mh$ = gtk_spinner_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spinner_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spinner_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spinner_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spinner_new()
     * }
     */
    public static FunctionDescriptor gtk_spinner_new$descriptor() {
        return gtk_spinner_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spinner_new()
     * }
     */
    public static MethodHandle gtk_spinner_new$handle() {
        return gtk_spinner_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_spinner_new()
     * }
     */
    public static MemorySegment gtk_spinner_new() {
        var mh$ = gtk_spinner_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spinner_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spinner_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spinner_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spinner_start(GtkSpinner *spinner)
     * }
     */
    public static FunctionDescriptor gtk_spinner_start$descriptor() {
        return gtk_spinner_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spinner_start(GtkSpinner *spinner)
     * }
     */
    public static MethodHandle gtk_spinner_start$handle() {
        return gtk_spinner_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spinner_start(GtkSpinner *spinner)
     * }
     */
    public static void gtk_spinner_start(MemorySegment spinner) {
        var mh$ = gtk_spinner_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spinner_start", spinner);
            }
            mh$.invokeExact(spinner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spinner_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spinner_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_spinner_stop(GtkSpinner *spinner)
     * }
     */
    public static FunctionDescriptor gtk_spinner_stop$descriptor() {
        return gtk_spinner_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_spinner_stop(GtkSpinner *spinner)
     * }
     */
    public static MethodHandle gtk_spinner_stop$handle() {
        return gtk_spinner_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_spinner_stop(GtkSpinner *spinner)
     * }
     */
    public static void gtk_spinner_stop(MemorySegment spinner) {
        var mh$ = gtk_spinner_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spinner_stop", spinner);
            }
            mh$.invokeExact(spinner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_switcher_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_switcher_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_stack_switcher_get_type()
     * }
     */
    public static FunctionDescriptor gtk_stack_switcher_get_type$descriptor() {
        return gtk_stack_switcher_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_stack_switcher_get_type()
     * }
     */
    public static MethodHandle gtk_stack_switcher_get_type$handle() {
        return gtk_stack_switcher_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_stack_switcher_get_type()
     * }
     */
    public static long gtk_stack_switcher_get_type() {
        var mh$ = gtk_stack_switcher_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_switcher_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_switcher_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_switcher_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_switcher_new()
     * }
     */
    public static FunctionDescriptor gtk_stack_switcher_new$descriptor() {
        return gtk_stack_switcher_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_switcher_new()
     * }
     */
    public static MethodHandle gtk_stack_switcher_new$handle() {
        return gtk_stack_switcher_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_stack_switcher_new()
     * }
     */
    public static MemorySegment gtk_stack_switcher_new() {
        var mh$ = gtk_stack_switcher_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_switcher_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_switcher_set_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_switcher_set_stack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stack_switcher_set_stack(GtkStackSwitcher *switcher, GtkStack *stack)
     * }
     */
    public static FunctionDescriptor gtk_stack_switcher_set_stack$descriptor() {
        return gtk_stack_switcher_set_stack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stack_switcher_set_stack(GtkStackSwitcher *switcher, GtkStack *stack)
     * }
     */
    public static MethodHandle gtk_stack_switcher_set_stack$handle() {
        return gtk_stack_switcher_set_stack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stack_switcher_set_stack(GtkStackSwitcher *switcher, GtkStack *stack)
     * }
     */
    public static void gtk_stack_switcher_set_stack(MemorySegment switcher, MemorySegment stack) {
        var mh$ = gtk_stack_switcher_set_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_switcher_set_stack", switcher, stack);
            }
            mh$.invokeExact(switcher, stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_switcher_get_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_switcher_get_stack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStack *gtk_stack_switcher_get_stack(GtkStackSwitcher *switcher)
     * }
     */
    public static FunctionDescriptor gtk_stack_switcher_get_stack$descriptor() {
        return gtk_stack_switcher_get_stack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStack *gtk_stack_switcher_get_stack(GtkStackSwitcher *switcher)
     * }
     */
    public static MethodHandle gtk_stack_switcher_get_stack$handle() {
        return gtk_stack_switcher_get_stack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStack *gtk_stack_switcher_get_stack(GtkStackSwitcher *switcher)
     * }
     */
    public static MemorySegment gtk_stack_switcher_get_stack(MemorySegment switcher) {
        var mh$ = gtk_stack_switcher_get_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_switcher_get_stack", switcher);
            }
            return (MemorySegment)mh$.invokeExact(switcher);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_statusbar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_statusbar_get_type$descriptor() {
        return gtk_statusbar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_statusbar_get_type()
     * }
     */
    public static MethodHandle gtk_statusbar_get_type$handle() {
        return gtk_statusbar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_statusbar_get_type()
     * }
     */
    public static long gtk_statusbar_get_type() {
        var mh$ = gtk_statusbar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_new()
     * }
     */
    public static FunctionDescriptor gtk_statusbar_new$descriptor() {
        return gtk_statusbar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_new()
     * }
     */
    public static MethodHandle gtk_statusbar_new$handle() {
        return gtk_statusbar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_new()
     * }
     */
    public static MemorySegment gtk_statusbar_new() {
        var mh$ = gtk_statusbar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_get_context_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_get_context_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_statusbar_get_context_id(GtkStatusbar *statusbar, const gchar *context_description)
     * }
     */
    public static FunctionDescriptor gtk_statusbar_get_context_id$descriptor() {
        return gtk_statusbar_get_context_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_statusbar_get_context_id(GtkStatusbar *statusbar, const gchar *context_description)
     * }
     */
    public static MethodHandle gtk_statusbar_get_context_id$handle() {
        return gtk_statusbar_get_context_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_statusbar_get_context_id(GtkStatusbar *statusbar, const gchar *context_description)
     * }
     */
    public static int gtk_statusbar_get_context_id(MemorySegment statusbar, MemorySegment context_description) {
        var mh$ = gtk_statusbar_get_context_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_get_context_id", statusbar, context_description);
            }
            return (int)mh$.invokeExact(statusbar, context_description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_statusbar_push(GtkStatusbar *statusbar, guint context_id, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_statusbar_push$descriptor() {
        return gtk_statusbar_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_statusbar_push(GtkStatusbar *statusbar, guint context_id, const gchar *text)
     * }
     */
    public static MethodHandle gtk_statusbar_push$handle() {
        return gtk_statusbar_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_statusbar_push(GtkStatusbar *statusbar, guint context_id, const gchar *text)
     * }
     */
    public static int gtk_statusbar_push(MemorySegment statusbar, int context_id, MemorySegment text) {
        var mh$ = gtk_statusbar_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_push", statusbar, context_id, text);
            }
            return (int)mh$.invokeExact(statusbar, context_id, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_statusbar_pop(GtkStatusbar *statusbar, guint context_id)
     * }
     */
    public static FunctionDescriptor gtk_statusbar_pop$descriptor() {
        return gtk_statusbar_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_statusbar_pop(GtkStatusbar *statusbar, guint context_id)
     * }
     */
    public static MethodHandle gtk_statusbar_pop$handle() {
        return gtk_statusbar_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_statusbar_pop(GtkStatusbar *statusbar, guint context_id)
     * }
     */
    public static void gtk_statusbar_pop(MemorySegment statusbar, int context_id) {
        var mh$ = gtk_statusbar_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_pop", statusbar, context_id);
            }
            mh$.invokeExact(statusbar, context_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_statusbar_remove(GtkStatusbar *statusbar, guint context_id, guint message_id)
     * }
     */
    public static FunctionDescriptor gtk_statusbar_remove$descriptor() {
        return gtk_statusbar_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_statusbar_remove(GtkStatusbar *statusbar, guint context_id, guint message_id)
     * }
     */
    public static MethodHandle gtk_statusbar_remove$handle() {
        return gtk_statusbar_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_statusbar_remove(GtkStatusbar *statusbar, guint context_id, guint message_id)
     * }
     */
    public static void gtk_statusbar_remove(MemorySegment statusbar, int context_id, int message_id) {
        var mh$ = gtk_statusbar_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_remove", statusbar, context_id, message_id);
            }
            mh$.invokeExact(statusbar, context_id, message_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_statusbar_remove_all(GtkStatusbar *statusbar, guint context_id)
     * }
     */
    public static FunctionDescriptor gtk_statusbar_remove_all$descriptor() {
        return gtk_statusbar_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_statusbar_remove_all(GtkStatusbar *statusbar, guint context_id)
     * }
     */
    public static MethodHandle gtk_statusbar_remove_all$handle() {
        return gtk_statusbar_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_statusbar_remove_all(GtkStatusbar *statusbar, guint context_id)
     * }
     */
    public static void gtk_statusbar_remove_all(MemorySegment statusbar, int context_id) {
        var mh$ = gtk_statusbar_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_remove_all", statusbar, context_id);
            }
            mh$.invokeExact(statusbar, context_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_statusbar_get_message_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_statusbar_get_message_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_get_message_area(GtkStatusbar *statusbar)
     * }
     */
    public static FunctionDescriptor gtk_statusbar_get_message_area$descriptor() {
        return gtk_statusbar_get_message_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_get_message_area(GtkStatusbar *statusbar)
     * }
     */
    public static MethodHandle gtk_statusbar_get_message_area$handle() {
        return gtk_statusbar_get_message_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_statusbar_get_message_area(GtkStatusbar *statusbar)
     * }
     */
    public static MemorySegment gtk_statusbar_get_message_area(MemorySegment statusbar) {
        var mh$ = gtk_statusbar_get_message_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_statusbar_get_message_area", statusbar);
            }
            return (MemorySegment)mh$.invokeExact(statusbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_switch_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_switch_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_switch_get_type()
     * }
     */
    public static FunctionDescriptor gtk_switch_get_type$descriptor() {
        return gtk_switch_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_switch_get_type()
     * }
     */
    public static MethodHandle gtk_switch_get_type$handle() {
        return gtk_switch_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_switch_get_type()
     * }
     */
    public static long gtk_switch_get_type() {
        var mh$ = gtk_switch_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_switch_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_switch_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_switch_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_switch_new()
     * }
     */
    public static FunctionDescriptor gtk_switch_new$descriptor() {
        return gtk_switch_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_switch_new()
     * }
     */
    public static MethodHandle gtk_switch_new$handle() {
        return gtk_switch_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_switch_new()
     * }
     */
    public static MemorySegment gtk_switch_new() {
        var mh$ = gtk_switch_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_switch_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_switch_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_switch_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_switch_set_active(GtkSwitch *sw, gboolean is_active)
     * }
     */
    public static FunctionDescriptor gtk_switch_set_active$descriptor() {
        return gtk_switch_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_switch_set_active(GtkSwitch *sw, gboolean is_active)
     * }
     */
    public static MethodHandle gtk_switch_set_active$handle() {
        return gtk_switch_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_switch_set_active(GtkSwitch *sw, gboolean is_active)
     * }
     */
    public static void gtk_switch_set_active(MemorySegment sw, int is_active) {
        var mh$ = gtk_switch_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_switch_set_active", sw, is_active);
            }
            mh$.invokeExact(sw, is_active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_switch_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_switch_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_switch_get_active(GtkSwitch *sw)
     * }
     */
    public static FunctionDescriptor gtk_switch_get_active$descriptor() {
        return gtk_switch_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_switch_get_active(GtkSwitch *sw)
     * }
     */
    public static MethodHandle gtk_switch_get_active$handle() {
        return gtk_switch_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_switch_get_active(GtkSwitch *sw)
     * }
     */
    public static int gtk_switch_get_active(MemorySegment sw) {
        var mh$ = gtk_switch_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_switch_get_active", sw);
            }
            return (int)mh$.invokeExact(sw);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_switch_set_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_switch_set_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_switch_set_state(GtkSwitch *sw, gboolean state)
     * }
     */
    public static FunctionDescriptor gtk_switch_set_state$descriptor() {
        return gtk_switch_set_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_switch_set_state(GtkSwitch *sw, gboolean state)
     * }
     */
    public static MethodHandle gtk_switch_set_state$handle() {
        return gtk_switch_set_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_switch_set_state(GtkSwitch *sw, gboolean state)
     * }
     */
    public static void gtk_switch_set_state(MemorySegment sw, int state) {
        var mh$ = gtk_switch_set_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_switch_set_state", sw, state);
            }
            mh$.invokeExact(sw, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_switch_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_switch_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_switch_get_state(GtkSwitch *sw)
     * }
     */
    public static FunctionDescriptor gtk_switch_get_state$descriptor() {
        return gtk_switch_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_switch_get_state(GtkSwitch *sw)
     * }
     */
    public static MethodHandle gtk_switch_get_state$handle() {
        return gtk_switch_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_switch_get_state(GtkSwitch *sw)
     * }
     */
    public static int gtk_switch_get_state(MemorySegment sw) {
        var mh$ = gtk_switch_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_switch_get_state", sw);
            }
            return (int)mh$.invokeExact(sw);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_table_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_table_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_tag_table_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_tag_table_get_type$descriptor() {
        return gtk_text_tag_table_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_tag_table_get_type()
     * }
     */
    public static MethodHandle gtk_text_tag_table_get_type$handle() {
        return gtk_text_tag_table_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_tag_table_get_type()
     * }
     */
    public static long gtk_text_tag_table_get_type() {
        var mh$ = gtk_text_tag_table_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_table_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_table_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_table_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextTagTable *gtk_text_tag_table_new()
     * }
     */
    public static FunctionDescriptor gtk_text_tag_table_new$descriptor() {
        return gtk_text_tag_table_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextTagTable *gtk_text_tag_table_new()
     * }
     */
    public static MethodHandle gtk_text_tag_table_new$handle() {
        return gtk_text_tag_table_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextTagTable *gtk_text_tag_table_new()
     * }
     */
    public static MemorySegment gtk_text_tag_table_new() {
        var mh$ = gtk_text_tag_table_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_table_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_table_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_table_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_tag_table_add(GtkTextTagTable *table, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_table_add$descriptor() {
        return gtk_text_tag_table_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_tag_table_add(GtkTextTagTable *table, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_tag_table_add$handle() {
        return gtk_text_tag_table_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_tag_table_add(GtkTextTagTable *table, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_tag_table_add(MemorySegment table, MemorySegment tag) {
        var mh$ = gtk_text_tag_table_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_table_add", table, tag);
            }
            return (int)mh$.invokeExact(table, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_table_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_table_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_table_remove(GtkTextTagTable *table, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_table_remove$descriptor() {
        return gtk_text_tag_table_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_table_remove(GtkTextTagTable *table, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_tag_table_remove$handle() {
        return gtk_text_tag_table_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_tag_table_remove(GtkTextTagTable *table, GtkTextTag *tag)
     * }
     */
    public static void gtk_text_tag_table_remove(MemorySegment table, MemorySegment tag) {
        var mh$ = gtk_text_tag_table_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_table_remove", table, tag);
            }
            mh$.invokeExact(table, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_table_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_table_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextTag *gtk_text_tag_table_lookup(GtkTextTagTable *table, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_table_lookup$descriptor() {
        return gtk_text_tag_table_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextTag *gtk_text_tag_table_lookup(GtkTextTagTable *table, const gchar *name)
     * }
     */
    public static MethodHandle gtk_text_tag_table_lookup$handle() {
        return gtk_text_tag_table_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextTag *gtk_text_tag_table_lookup(GtkTextTagTable *table, const gchar *name)
     * }
     */
    public static MemorySegment gtk_text_tag_table_lookup(MemorySegment table, MemorySegment name) {
        var mh$ = gtk_text_tag_table_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_table_lookup", table, name);
            }
            return (MemorySegment)mh$.invokeExact(table, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_table_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_table_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_table_foreach(GtkTextTagTable *table, GtkTextTagTableForeach func, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_table_foreach$descriptor() {
        return gtk_text_tag_table_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_table_foreach(GtkTextTagTable *table, GtkTextTagTableForeach func, gpointer data)
     * }
     */
    public static MethodHandle gtk_text_tag_table_foreach$handle() {
        return gtk_text_tag_table_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_tag_table_foreach(GtkTextTagTable *table, GtkTextTagTableForeach func, gpointer data)
     * }
     */
    public static void gtk_text_tag_table_foreach(MemorySegment table, MemorySegment func, MemorySegment data) {
        var mh$ = gtk_text_tag_table_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_table_foreach", table, func, data);
            }
            mh$.invokeExact(table, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_table_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_table_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_tag_table_get_size(GtkTextTagTable *table)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_table_get_size$descriptor() {
        return gtk_text_tag_table_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_tag_table_get_size(GtkTextTagTable *table)
     * }
     */
    public static MethodHandle gtk_text_tag_table_get_size$handle() {
        return gtk_text_tag_table_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_tag_table_get_size(GtkTextTagTable *table)
     * }
     */
    public static int gtk_text_tag_table_get_size(MemorySegment table) {
        var mh$ = gtk_text_tag_table_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_table_get_size", table);
            }
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_mark_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_mark_get_type$descriptor() {
        return gtk_text_mark_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_mark_get_type()
     * }
     */
    public static MethodHandle gtk_text_mark_get_type$handle() {
        return gtk_text_mark_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_mark_get_type()
     * }
     */
    public static long gtk_text_mark_get_type() {
        var mh$ = gtk_text_mark_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_mark_new(const gchar *name, gboolean left_gravity)
     * }
     */
    public static FunctionDescriptor gtk_text_mark_new$descriptor() {
        return gtk_text_mark_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_mark_new(const gchar *name, gboolean left_gravity)
     * }
     */
    public static MethodHandle gtk_text_mark_new$handle() {
        return gtk_text_mark_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_mark_new(const gchar *name, gboolean left_gravity)
     * }
     */
    public static MemorySegment gtk_text_mark_new(MemorySegment name, int left_gravity) {
        var mh$ = gtk_text_mark_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_new", name, left_gravity);
            }
            return (MemorySegment)mh$.invokeExact(name, left_gravity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_set_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_mark_set_visible(GtkTextMark *mark, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_text_mark_set_visible$descriptor() {
        return gtk_text_mark_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_mark_set_visible(GtkTextMark *mark, gboolean setting)
     * }
     */
    public static MethodHandle gtk_text_mark_set_visible$handle() {
        return gtk_text_mark_set_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_mark_set_visible(GtkTextMark *mark, gboolean setting)
     * }
     */
    public static void gtk_text_mark_set_visible(MemorySegment mark, int setting) {
        var mh$ = gtk_text_mark_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_set_visible", mark, setting);
            }
            mh$.invokeExact(mark, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_visible(GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_mark_get_visible$descriptor() {
        return gtk_text_mark_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_visible(GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_mark_get_visible$handle() {
        return gtk_text_mark_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_visible(GtkTextMark *mark)
     * }
     */
    public static int gtk_text_mark_get_visible(MemorySegment mark) {
        var mh$ = gtk_text_mark_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_get_visible", mark);
            }
            return (int)mh$.invokeExact(mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_text_mark_get_name(GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_mark_get_name$descriptor() {
        return gtk_text_mark_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_text_mark_get_name(GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_mark_get_name$handle() {
        return gtk_text_mark_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_text_mark_get_name(GtkTextMark *mark)
     * }
     */
    public static MemorySegment gtk_text_mark_get_name(MemorySegment mark) {
        var mh$ = gtk_text_mark_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_get_name", mark);
            }
            return (MemorySegment)mh$.invokeExact(mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_get_deleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_get_deleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_deleted(GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_mark_get_deleted$descriptor() {
        return gtk_text_mark_get_deleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_deleted(GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_mark_get_deleted$handle() {
        return gtk_text_mark_get_deleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_deleted(GtkTextMark *mark)
     * }
     */
    public static int gtk_text_mark_get_deleted(MemorySegment mark) {
        var mh$ = gtk_text_mark_get_deleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_get_deleted", mark);
            }
            return (int)mh$.invokeExact(mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_get_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_get_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_mark_get_buffer(GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_mark_get_buffer$descriptor() {
        return gtk_text_mark_get_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_mark_get_buffer(GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_mark_get_buffer$handle() {
        return gtk_text_mark_get_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_mark_get_buffer(GtkTextMark *mark)
     * }
     */
    public static MemorySegment gtk_text_mark_get_buffer(MemorySegment mark) {
        var mh$ = gtk_text_mark_get_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_get_buffer", mark);
            }
            return (MemorySegment)mh$.invokeExact(mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_mark_get_left_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_mark_get_left_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_left_gravity(GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_mark_get_left_gravity$descriptor() {
        return gtk_text_mark_get_left_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_left_gravity(GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_mark_get_left_gravity$handle() {
        return gtk_text_mark_get_left_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_mark_get_left_gravity(GtkTextMark *mark)
     * }
     */
    public static int gtk_text_mark_get_left_gravity(MemorySegment mark) {
        var mh$ = gtk_text_mark_get_left_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_mark_get_left_gravity", mark);
            }
            return (int)mh$.invokeExact(mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = -1
     * }
     */
    public static int GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS() {
        return GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS;
    }
    private static final int GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = -2
     * }
     */
    public static int GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT() {
        return GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT;
    }
    private static final int GTK_TEXT_BUFFER_TARGET_INFO_TEXT = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_BUFFER_TARGET_INFO_TEXT = -3
     * }
     */
    public static int GTK_TEXT_BUFFER_TARGET_INFO_TEXT() {
        return GTK_TEXT_BUFFER_TARGET_INFO_TEXT;
    }

    private static class gtk_text_buffer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_buffer_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_type$descriptor() {
        return gtk_text_buffer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_buffer_get_type()
     * }
     */
    public static MethodHandle gtk_text_buffer_get_type$handle() {
        return gtk_text_buffer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_buffer_get_type()
     * }
     */
    public static long gtk_text_buffer_get_type() {
        var mh$ = gtk_text_buffer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_buffer_new(GtkTextTagTable *table)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_new$descriptor() {
        return gtk_text_buffer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_buffer_new(GtkTextTagTable *table)
     * }
     */
    public static MethodHandle gtk_text_buffer_new$handle() {
        return gtk_text_buffer_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_buffer_new(GtkTextTagTable *table)
     * }
     */
    public static MemorySegment gtk_text_buffer_new(MemorySegment table) {
        var mh$ = gtk_text_buffer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_new", table);
            }
            return (MemorySegment)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_line_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_line_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_buffer_get_line_count(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_line_count$descriptor() {
        return gtk_text_buffer_get_line_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_buffer_get_line_count(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_line_count$handle() {
        return gtk_text_buffer_get_line_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_buffer_get_line_count(GtkTextBuffer *buffer)
     * }
     */
    public static int gtk_text_buffer_get_line_count(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_line_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_line_count", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_char_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_char_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_buffer_get_char_count(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_char_count$descriptor() {
        return gtk_text_buffer_get_char_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_buffer_get_char_count(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_char_count$handle() {
        return gtk_text_buffer_get_char_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_buffer_get_char_count(GtkTextBuffer *buffer)
     * }
     */
    public static int gtk_text_buffer_get_char_count(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_char_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_char_count", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_tag_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_tag_table"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextTagTable *gtk_text_buffer_get_tag_table(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_tag_table$descriptor() {
        return gtk_text_buffer_get_tag_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextTagTable *gtk_text_buffer_get_tag_table(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_tag_table$handle() {
        return gtk_text_buffer_get_tag_table.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextTagTable *gtk_text_buffer_get_tag_table(GtkTextBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_tag_table(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_tag_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_tag_table", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_set_text(GtkTextBuffer *buffer, const gchar *text, gint len)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_set_text$descriptor() {
        return gtk_text_buffer_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_set_text(GtkTextBuffer *buffer, const gchar *text, gint len)
     * }
     */
    public static MethodHandle gtk_text_buffer_set_text$handle() {
        return gtk_text_buffer_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_set_text(GtkTextBuffer *buffer, const gchar *text, gint len)
     * }
     */
    public static void gtk_text_buffer_set_text(MemorySegment buffer, MemorySegment text, int len) {
        var mh$ = gtk_text_buffer_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_set_text", buffer, text, len);
            }
            mh$.invokeExact(buffer, text, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert$descriptor() {
        return gtk_text_buffer_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert$handle() {
        return gtk_text_buffer_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len)
     * }
     */
    public static void gtk_text_buffer_insert(MemorySegment buffer, MemorySegment iter, MemorySegment text, int len) {
        var mh$ = gtk_text_buffer_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert", buffer, iter, text, len);
            }
            mh$.invokeExact(buffer, iter, text, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert_at_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_at_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_at_cursor(GtkTextBuffer *buffer, const gchar *text, gint len)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_at_cursor$descriptor() {
        return gtk_text_buffer_insert_at_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_at_cursor(GtkTextBuffer *buffer, const gchar *text, gint len)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_at_cursor$handle() {
        return gtk_text_buffer_insert_at_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_at_cursor(GtkTextBuffer *buffer, const gchar *text, gint len)
     * }
     */
    public static void gtk_text_buffer_insert_at_cursor(MemorySegment buffer, MemorySegment text, int len) {
        var mh$ = gtk_text_buffer_insert_at_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_at_cursor", buffer, text, len);
            }
            mh$.invokeExact(buffer, text, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert_interactive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_interactive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_interactive(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_interactive$descriptor() {
        return gtk_text_buffer_insert_interactive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_interactive(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_interactive$handle() {
        return gtk_text_buffer_insert_interactive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_interactive(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, gboolean default_editable)
     * }
     */
    public static int gtk_text_buffer_insert_interactive(MemorySegment buffer, MemorySegment iter, MemorySegment text, int len, int default_editable) {
        var mh$ = gtk_text_buffer_insert_interactive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_interactive", buffer, iter, text, len, default_editable);
            }
            return (int)mh$.invokeExact(buffer, iter, text, len, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert_interactive_at_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_interactive_at_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer *buffer, const gchar *text, gint len, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_interactive_at_cursor$descriptor() {
        return gtk_text_buffer_insert_interactive_at_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer *buffer, const gchar *text, gint len, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_interactive_at_cursor$handle() {
        return gtk_text_buffer_insert_interactive_at_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer *buffer, const gchar *text, gint len, gboolean default_editable)
     * }
     */
    public static int gtk_text_buffer_insert_interactive_at_cursor(MemorySegment buffer, MemorySegment text, int len, int default_editable) {
        var mh$ = gtk_text_buffer_insert_interactive_at_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_interactive_at_cursor", buffer, text, len, default_editable);
            }
            return (int)mh$.invokeExact(buffer, text, len, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_range(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_range$descriptor() {
        return gtk_text_buffer_insert_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_range(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_range$handle() {
        return gtk_text_buffer_insert_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_range(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_insert_range(MemorySegment buffer, MemorySegment iter, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_insert_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_range", buffer, iter, start, end);
            }
            mh$.invokeExact(buffer, iter, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert_range_interactive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_range_interactive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_range_interactive(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_range_interactive$descriptor() {
        return gtk_text_buffer_insert_range_interactive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_range_interactive(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_range_interactive$handle() {
        return gtk_text_buffer_insert_range_interactive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_insert_range_interactive(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean default_editable)
     * }
     */
    public static int gtk_text_buffer_insert_range_interactive(MemorySegment buffer, MemorySegment iter, MemorySegment start, MemorySegment end, int default_editable) {
        var mh$ = gtk_text_buffer_insert_range_interactive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_range_interactive", buffer, iter, start, end, default_editable);
            }
            return (int)mh$.invokeExact(buffer, iter, start, end, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_with_tags(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, GtkTextTag *first_tag, ...)
     * }
     */
    public static class gtk_text_buffer_insert_with_tags {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_text_buffer_insert_with_tags");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_text_buffer_insert_with_tags(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_text_buffer_insert_with_tags(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, GtkTextTag *first_tag, ...)
         * }
         */
        public static gtk_text_buffer_insert_with_tags makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_text_buffer_insert_with_tags(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment buffer, MemorySegment iter, MemorySegment text, int len, MemorySegment first_tag, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_text_buffer_insert_with_tags", buffer, iter, text, len, first_tag, x5);
                }
                spreader.invokeExact(buffer, iter, text, len, first_tag, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_with_tags_by_name(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, const gchar *first_tag_name, ...)
     * }
     */
    public static class gtk_text_buffer_insert_with_tags_by_name {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_text_buffer_insert_with_tags_by_name");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_text_buffer_insert_with_tags_by_name(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_text_buffer_insert_with_tags_by_name(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, const gchar *first_tag_name, ...)
         * }
         */
        public static gtk_text_buffer_insert_with_tags_by_name makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_text_buffer_insert_with_tags_by_name(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment buffer, MemorySegment iter, MemorySegment text, int len, MemorySegment first_tag_name, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_text_buffer_insert_with_tags_by_name", buffer, iter, text, len, first_tag_name, x5);
                }
                spreader.invokeExact(buffer, iter, text, len, first_tag_name, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_text_buffer_insert_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_markup(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *markup, gint len)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_markup$descriptor() {
        return gtk_text_buffer_insert_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_markup(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *markup, gint len)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_markup$handle() {
        return gtk_text_buffer_insert_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_markup(GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *markup, gint len)
     * }
     */
    public static void gtk_text_buffer_insert_markup(MemorySegment buffer, MemorySegment iter, MemorySegment markup, int len) {
        var mh$ = gtk_text_buffer_insert_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_markup", buffer, iter, markup, len);
            }
            mh$.invokeExact(buffer, iter, markup, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_delete$descriptor() {
        return gtk_text_buffer_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_delete$handle() {
        return gtk_text_buffer_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_delete(MemorySegment buffer, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_delete", buffer, start, end);
            }
            mh$.invokeExact(buffer, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_delete_interactive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_delete_interactive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_delete_interactive(GtkTextBuffer *buffer, GtkTextIter *start_iter, GtkTextIter *end_iter, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_delete_interactive$descriptor() {
        return gtk_text_buffer_delete_interactive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_delete_interactive(GtkTextBuffer *buffer, GtkTextIter *start_iter, GtkTextIter *end_iter, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_delete_interactive$handle() {
        return gtk_text_buffer_delete_interactive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_delete_interactive(GtkTextBuffer *buffer, GtkTextIter *start_iter, GtkTextIter *end_iter, gboolean default_editable)
     * }
     */
    public static int gtk_text_buffer_delete_interactive(MemorySegment buffer, MemorySegment start_iter, MemorySegment end_iter, int default_editable) {
        var mh$ = gtk_text_buffer_delete_interactive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_delete_interactive", buffer, start_iter, end_iter, default_editable);
            }
            return (int)mh$.invokeExact(buffer, start_iter, end_iter, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_backspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_backspace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_backspace(GtkTextBuffer *buffer, GtkTextIter *iter, gboolean interactive, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_backspace$descriptor() {
        return gtk_text_buffer_backspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_backspace(GtkTextBuffer *buffer, GtkTextIter *iter, gboolean interactive, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_backspace$handle() {
        return gtk_text_buffer_backspace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_backspace(GtkTextBuffer *buffer, GtkTextIter *iter, gboolean interactive, gboolean default_editable)
     * }
     */
    public static int gtk_text_buffer_backspace(MemorySegment buffer, MemorySegment iter, int interactive, int default_editable) {
        var mh$ = gtk_text_buffer_backspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_backspace", buffer, iter, interactive, default_editable);
            }
            return (int)mh$.invokeExact(buffer, iter, interactive, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_buffer_get_text(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_text$descriptor() {
        return gtk_text_buffer_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_buffer_get_text(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_text$handle() {
        return gtk_text_buffer_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_text_buffer_get_text(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_text(MemorySegment buffer, MemorySegment start, MemorySegment end, int include_hidden_chars) {
        var mh$ = gtk_text_buffer_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_text", buffer, start, end, include_hidden_chars);
            }
            return (MemorySegment)mh$.invokeExact(buffer, start, end, include_hidden_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_slice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_slice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_buffer_get_slice(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_slice$descriptor() {
        return gtk_text_buffer_get_slice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_buffer_get_slice(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_slice$handle() {
        return gtk_text_buffer_get_slice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_text_buffer_get_slice(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_slice(MemorySegment buffer, MemorySegment start, MemorySegment end, int include_hidden_chars) {
        var mh$ = gtk_text_buffer_get_slice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_slice", buffer, start, end, include_hidden_chars);
            }
            return (MemorySegment)mh$.invokeExact(buffer, start, end, include_hidden_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_pixbuf(GtkTextBuffer *buffer, GtkTextIter *iter, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_pixbuf$descriptor() {
        return gtk_text_buffer_insert_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_pixbuf(GtkTextBuffer *buffer, GtkTextIter *iter, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_pixbuf$handle() {
        return gtk_text_buffer_insert_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_pixbuf(GtkTextBuffer *buffer, GtkTextIter *iter, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_text_buffer_insert_pixbuf(MemorySegment buffer, MemorySegment iter, MemorySegment pixbuf) {
        var mh$ = gtk_text_buffer_insert_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_pixbuf", buffer, iter, pixbuf);
            }
            mh$.invokeExact(buffer, iter, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_insert_child_anchor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_insert_child_anchor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_insert_child_anchor$descriptor() {
        return gtk_text_buffer_insert_child_anchor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor)
     * }
     */
    public static MethodHandle gtk_text_buffer_insert_child_anchor$handle() {
        return gtk_text_buffer_insert_child_anchor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_insert_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor)
     * }
     */
    public static void gtk_text_buffer_insert_child_anchor(MemorySegment buffer, MemorySegment iter, MemorySegment anchor) {
        var mh$ = gtk_text_buffer_insert_child_anchor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_insert_child_anchor", buffer, iter, anchor);
            }
            mh$.invokeExact(buffer, iter, anchor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_create_child_anchor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_create_child_anchor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_buffer_create_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_create_child_anchor$descriptor() {
        return gtk_text_buffer_create_child_anchor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_buffer_create_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_buffer_create_child_anchor$handle() {
        return gtk_text_buffer_create_child_anchor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_buffer_create_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_buffer_create_child_anchor(MemorySegment buffer, MemorySegment iter) {
        var mh$ = gtk_text_buffer_create_child_anchor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_create_child_anchor", buffer, iter);
            }
            return (MemorySegment)mh$.invokeExact(buffer, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_add_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_add_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_add_mark(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_add_mark$descriptor() {
        return gtk_text_buffer_add_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_add_mark(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where)
     * }
     */
    public static MethodHandle gtk_text_buffer_add_mark$handle() {
        return gtk_text_buffer_add_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_add_mark(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where)
     * }
     */
    public static void gtk_text_buffer_add_mark(MemorySegment buffer, MemorySegment mark, MemorySegment where) {
        var mh$ = gtk_text_buffer_add_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_add_mark", buffer, mark, where);
            }
            mh$.invokeExact(buffer, mark, where);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_create_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_create_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_create_mark(GtkTextBuffer *buffer, const gchar *mark_name, const GtkTextIter *where, gboolean left_gravity)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_create_mark$descriptor() {
        return gtk_text_buffer_create_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_create_mark(GtkTextBuffer *buffer, const gchar *mark_name, const GtkTextIter *where, gboolean left_gravity)
     * }
     */
    public static MethodHandle gtk_text_buffer_create_mark$handle() {
        return gtk_text_buffer_create_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_create_mark(GtkTextBuffer *buffer, const gchar *mark_name, const GtkTextIter *where, gboolean left_gravity)
     * }
     */
    public static MemorySegment gtk_text_buffer_create_mark(MemorySegment buffer, MemorySegment mark_name, MemorySegment where, int left_gravity) {
        var mh$ = gtk_text_buffer_create_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_create_mark", buffer, mark_name, where, left_gravity);
            }
            return (MemorySegment)mh$.invokeExact(buffer, mark_name, where, left_gravity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_move_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_move_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_move_mark(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_move_mark$descriptor() {
        return gtk_text_buffer_move_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_move_mark(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where)
     * }
     */
    public static MethodHandle gtk_text_buffer_move_mark$handle() {
        return gtk_text_buffer_move_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_move_mark(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where)
     * }
     */
    public static void gtk_text_buffer_move_mark(MemorySegment buffer, MemorySegment mark, MemorySegment where) {
        var mh$ = gtk_text_buffer_move_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_move_mark", buffer, mark, where);
            }
            mh$.invokeExact(buffer, mark, where);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_delete_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_delete_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete_mark(GtkTextBuffer *buffer, GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_delete_mark$descriptor() {
        return gtk_text_buffer_delete_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete_mark(GtkTextBuffer *buffer, GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_buffer_delete_mark$handle() {
        return gtk_text_buffer_delete_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete_mark(GtkTextBuffer *buffer, GtkTextMark *mark)
     * }
     */
    public static void gtk_text_buffer_delete_mark(MemorySegment buffer, MemorySegment mark) {
        var mh$ = gtk_text_buffer_delete_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_delete_mark", buffer, mark);
            }
            mh$.invokeExact(buffer, mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_mark(GtkTextBuffer *buffer, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_mark$descriptor() {
        return gtk_text_buffer_get_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_mark(GtkTextBuffer *buffer, const gchar *name)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_mark$handle() {
        return gtk_text_buffer_get_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_mark(GtkTextBuffer *buffer, const gchar *name)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_mark(MemorySegment buffer, MemorySegment name) {
        var mh$ = gtk_text_buffer_get_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_mark", buffer, name);
            }
            return (MemorySegment)mh$.invokeExact(buffer, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_move_mark_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_move_mark_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_move_mark_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *where)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_move_mark_by_name$descriptor() {
        return gtk_text_buffer_move_mark_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_move_mark_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *where)
     * }
     */
    public static MethodHandle gtk_text_buffer_move_mark_by_name$handle() {
        return gtk_text_buffer_move_mark_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_move_mark_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *where)
     * }
     */
    public static void gtk_text_buffer_move_mark_by_name(MemorySegment buffer, MemorySegment name, MemorySegment where) {
        var mh$ = gtk_text_buffer_move_mark_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_move_mark_by_name", buffer, name, where);
            }
            mh$.invokeExact(buffer, name, where);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_delete_mark_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_delete_mark_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete_mark_by_name(GtkTextBuffer *buffer, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_delete_mark_by_name$descriptor() {
        return gtk_text_buffer_delete_mark_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete_mark_by_name(GtkTextBuffer *buffer, const gchar *name)
     * }
     */
    public static MethodHandle gtk_text_buffer_delete_mark_by_name$handle() {
        return gtk_text_buffer_delete_mark_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_delete_mark_by_name(GtkTextBuffer *buffer, const gchar *name)
     * }
     */
    public static void gtk_text_buffer_delete_mark_by_name(MemorySegment buffer, MemorySegment name) {
        var mh$ = gtk_text_buffer_delete_mark_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_delete_mark_by_name", buffer, name);
            }
            mh$.invokeExact(buffer, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_insert(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_insert$descriptor() {
        return gtk_text_buffer_get_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_insert(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_insert$handle() {
        return gtk_text_buffer_get_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_insert(GtkTextBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_insert(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_insert", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_selection_bound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_selection_bound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_selection_bound(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_selection_bound$descriptor() {
        return gtk_text_buffer_get_selection_bound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_selection_bound(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_selection_bound$handle() {
        return gtk_text_buffer_get_selection_bound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextMark *gtk_text_buffer_get_selection_bound(GtkTextBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_selection_bound(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_selection_bound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_selection_bound", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_place_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_place_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_place_cursor(GtkTextBuffer *buffer, const GtkTextIter *where)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_place_cursor$descriptor() {
        return gtk_text_buffer_place_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_place_cursor(GtkTextBuffer *buffer, const GtkTextIter *where)
     * }
     */
    public static MethodHandle gtk_text_buffer_place_cursor$handle() {
        return gtk_text_buffer_place_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_place_cursor(GtkTextBuffer *buffer, const GtkTextIter *where)
     * }
     */
    public static void gtk_text_buffer_place_cursor(MemorySegment buffer, MemorySegment where) {
        var mh$ = gtk_text_buffer_place_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_place_cursor", buffer, where);
            }
            mh$.invokeExact(buffer, where);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_select_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_select_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_select_range(GtkTextBuffer *buffer, const GtkTextIter *ins, const GtkTextIter *bound)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_select_range$descriptor() {
        return gtk_text_buffer_select_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_select_range(GtkTextBuffer *buffer, const GtkTextIter *ins, const GtkTextIter *bound)
     * }
     */
    public static MethodHandle gtk_text_buffer_select_range$handle() {
        return gtk_text_buffer_select_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_select_range(GtkTextBuffer *buffer, const GtkTextIter *ins, const GtkTextIter *bound)
     * }
     */
    public static void gtk_text_buffer_select_range(MemorySegment buffer, MemorySegment ins, MemorySegment bound) {
        var mh$ = gtk_text_buffer_select_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_select_range", buffer, ins, bound);
            }
            mh$.invokeExact(buffer, ins, bound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_apply_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_apply_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_apply_tag(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_apply_tag$descriptor() {
        return gtk_text_buffer_apply_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_apply_tag(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_apply_tag$handle() {
        return gtk_text_buffer_apply_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_apply_tag(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_apply_tag(MemorySegment buffer, MemorySegment tag, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_apply_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_apply_tag", buffer, tag, start, end);
            }
            mh$.invokeExact(buffer, tag, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_remove_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_remove_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_tag(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_remove_tag$descriptor() {
        return gtk_text_buffer_remove_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_tag(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_remove_tag$handle() {
        return gtk_text_buffer_remove_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_tag(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_remove_tag(MemorySegment buffer, MemorySegment tag, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_remove_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_remove_tag", buffer, tag, start, end);
            }
            mh$.invokeExact(buffer, tag, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_apply_tag_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_apply_tag_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_apply_tag_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_apply_tag_by_name$descriptor() {
        return gtk_text_buffer_apply_tag_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_apply_tag_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_apply_tag_by_name$handle() {
        return gtk_text_buffer_apply_tag_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_apply_tag_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_apply_tag_by_name(MemorySegment buffer, MemorySegment name, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_apply_tag_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_apply_tag_by_name", buffer, name, start, end);
            }
            mh$.invokeExact(buffer, name, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_remove_tag_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_remove_tag_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_tag_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_remove_tag_by_name$descriptor() {
        return gtk_text_buffer_remove_tag_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_tag_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_remove_tag_by_name$handle() {
        return gtk_text_buffer_remove_tag_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_tag_by_name(GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_remove_tag_by_name(MemorySegment buffer, MemorySegment name, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_remove_tag_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_remove_tag_by_name", buffer, name, start, end);
            }
            mh$.invokeExact(buffer, name, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_remove_all_tags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_remove_all_tags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_all_tags(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_remove_all_tags$descriptor() {
        return gtk_text_buffer_remove_all_tags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_all_tags(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_remove_all_tags$handle() {
        return gtk_text_buffer_remove_all_tags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_all_tags(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_remove_all_tags(MemorySegment buffer, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_remove_all_tags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_remove_all_tags", buffer, start, end);
            }
            mh$.invokeExact(buffer, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkTextTag *gtk_text_buffer_create_tag(GtkTextBuffer *buffer, const gchar *tag_name, const gchar *first_property_name, ...)
     * }
     */
    public static class gtk_text_buffer_create_tag {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_text_buffer_create_tag");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_text_buffer_create_tag(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkTextTag *gtk_text_buffer_create_tag(GtkTextBuffer *buffer, const gchar *tag_name, const gchar *first_property_name, ...)
         * }
         */
        public static gtk_text_buffer_create_tag makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_text_buffer_create_tag(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment buffer, MemorySegment tag_name, MemorySegment first_property_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_text_buffer_create_tag", buffer, tag_name, first_property_name, x3);
                }
                return (MemorySegment)spreader.invokeExact(buffer, tag_name, first_property_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_text_buffer_get_iter_at_line_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_iter_at_line_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line_offset(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint char_offset)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_iter_at_line_offset$descriptor() {
        return gtk_text_buffer_get_iter_at_line_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line_offset(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint char_offset)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_iter_at_line_offset$handle() {
        return gtk_text_buffer_get_iter_at_line_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line_offset(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint char_offset)
     * }
     */
    public static void gtk_text_buffer_get_iter_at_line_offset(MemorySegment buffer, MemorySegment iter, int line_number, int char_offset) {
        var mh$ = gtk_text_buffer_get_iter_at_line_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_iter_at_line_offset", buffer, iter, line_number, char_offset);
            }
            mh$.invokeExact(buffer, iter, line_number, char_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_iter_at_line_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_iter_at_line_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line_index(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint byte_index)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_iter_at_line_index$descriptor() {
        return gtk_text_buffer_get_iter_at_line_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line_index(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint byte_index)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_iter_at_line_index$handle() {
        return gtk_text_buffer_get_iter_at_line_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line_index(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint byte_index)
     * }
     */
    public static void gtk_text_buffer_get_iter_at_line_index(MemorySegment buffer, MemorySegment iter, int line_number, int byte_index) {
        var mh$ = gtk_text_buffer_get_iter_at_line_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_iter_at_line_index", buffer, iter, line_number, byte_index);
            }
            mh$.invokeExact(buffer, iter, line_number, byte_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_iter_at_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_iter_at_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_offset(GtkTextBuffer *buffer, GtkTextIter *iter, gint char_offset)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_iter_at_offset$descriptor() {
        return gtk_text_buffer_get_iter_at_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_offset(GtkTextBuffer *buffer, GtkTextIter *iter, gint char_offset)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_iter_at_offset$handle() {
        return gtk_text_buffer_get_iter_at_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_offset(GtkTextBuffer *buffer, GtkTextIter *iter, gint char_offset)
     * }
     */
    public static void gtk_text_buffer_get_iter_at_offset(MemorySegment buffer, MemorySegment iter, int char_offset) {
        var mh$ = gtk_text_buffer_get_iter_at_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_iter_at_offset", buffer, iter, char_offset);
            }
            mh$.invokeExact(buffer, iter, char_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_iter_at_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_iter_at_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_iter_at_line$descriptor() {
        return gtk_text_buffer_get_iter_at_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_iter_at_line$handle() {
        return gtk_text_buffer_get_iter_at_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_line(GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number)
     * }
     */
    public static void gtk_text_buffer_get_iter_at_line(MemorySegment buffer, MemorySegment iter, int line_number) {
        var mh$ = gtk_text_buffer_get_iter_at_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_iter_at_line", buffer, iter, line_number);
            }
            mh$.invokeExact(buffer, iter, line_number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_start_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_start_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_start_iter(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_start_iter$descriptor() {
        return gtk_text_buffer_get_start_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_start_iter(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_start_iter$handle() {
        return gtk_text_buffer_get_start_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_start_iter(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static void gtk_text_buffer_get_start_iter(MemorySegment buffer, MemorySegment iter) {
        var mh$ = gtk_text_buffer_get_start_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_start_iter", buffer, iter);
            }
            mh$.invokeExact(buffer, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_end_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_end_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_end_iter(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_end_iter$descriptor() {
        return gtk_text_buffer_get_end_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_end_iter(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_end_iter$handle() {
        return gtk_text_buffer_get_end_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_end_iter(GtkTextBuffer *buffer, GtkTextIter *iter)
     * }
     */
    public static void gtk_text_buffer_get_end_iter(MemorySegment buffer, MemorySegment iter) {
        var mh$ = gtk_text_buffer_get_end_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_end_iter", buffer, iter);
            }
            mh$.invokeExact(buffer, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_bounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_bounds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_bounds(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_bounds$descriptor() {
        return gtk_text_buffer_get_bounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_bounds(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_bounds$handle() {
        return gtk_text_buffer_get_bounds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_bounds(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static void gtk_text_buffer_get_bounds(MemorySegment buffer, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_get_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_bounds", buffer, start, end);
            }
            mh$.invokeExact(buffer, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_iter_at_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_iter_at_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_mark(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_iter_at_mark$descriptor() {
        return gtk_text_buffer_get_iter_at_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_mark(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_iter_at_mark$handle() {
        return gtk_text_buffer_get_iter_at_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_mark(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextMark *mark)
     * }
     */
    public static void gtk_text_buffer_get_iter_at_mark(MemorySegment buffer, MemorySegment iter, MemorySegment mark) {
        var mh$ = gtk_text_buffer_get_iter_at_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_iter_at_mark", buffer, iter, mark);
            }
            mh$.invokeExact(buffer, iter, mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_iter_at_child_anchor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_iter_at_child_anchor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_iter_at_child_anchor$descriptor() {
        return gtk_text_buffer_get_iter_at_child_anchor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_iter_at_child_anchor$handle() {
        return gtk_text_buffer_get_iter_at_child_anchor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_get_iter_at_child_anchor(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor)
     * }
     */
    public static void gtk_text_buffer_get_iter_at_child_anchor(MemorySegment buffer, MemorySegment iter, MemorySegment anchor) {
        var mh$ = gtk_text_buffer_get_iter_at_child_anchor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_iter_at_child_anchor", buffer, iter, anchor);
            }
            mh$.invokeExact(buffer, iter, anchor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_modified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_modified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_modified(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_modified$descriptor() {
        return gtk_text_buffer_get_modified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_modified(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_modified$handle() {
        return gtk_text_buffer_get_modified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_modified(GtkTextBuffer *buffer)
     * }
     */
    public static int gtk_text_buffer_get_modified(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_modified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_modified", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_set_modified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_set_modified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_set_modified(GtkTextBuffer *buffer, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_set_modified$descriptor() {
        return gtk_text_buffer_set_modified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_set_modified(GtkTextBuffer *buffer, gboolean setting)
     * }
     */
    public static MethodHandle gtk_text_buffer_set_modified$handle() {
        return gtk_text_buffer_set_modified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_set_modified(GtkTextBuffer *buffer, gboolean setting)
     * }
     */
    public static void gtk_text_buffer_set_modified(MemorySegment buffer, int setting) {
        var mh$ = gtk_text_buffer_set_modified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_set_modified", buffer, setting);
            }
            mh$.invokeExact(buffer, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_has_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_has_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_has_selection(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_has_selection$descriptor() {
        return gtk_text_buffer_get_has_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_has_selection(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_has_selection$handle() {
        return gtk_text_buffer_get_has_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_has_selection(GtkTextBuffer *buffer)
     * }
     */
    public static int gtk_text_buffer_get_has_selection(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_has_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_has_selection", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_add_selection_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_add_selection_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_add_selection_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_add_selection_clipboard$descriptor() {
        return gtk_text_buffer_add_selection_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_add_selection_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_text_buffer_add_selection_clipboard$handle() {
        return gtk_text_buffer_add_selection_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_add_selection_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static void gtk_text_buffer_add_selection_clipboard(MemorySegment buffer, MemorySegment clipboard) {
        var mh$ = gtk_text_buffer_add_selection_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_add_selection_clipboard", buffer, clipboard);
            }
            mh$.invokeExact(buffer, clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_remove_selection_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_remove_selection_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_selection_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_remove_selection_clipboard$descriptor() {
        return gtk_text_buffer_remove_selection_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_selection_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_text_buffer_remove_selection_clipboard$handle() {
        return gtk_text_buffer_remove_selection_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_remove_selection_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static void gtk_text_buffer_remove_selection_clipboard(MemorySegment buffer, MemorySegment clipboard) {
        var mh$ = gtk_text_buffer_remove_selection_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_remove_selection_clipboard", buffer, clipboard);
            }
            mh$.invokeExact(buffer, clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_cut_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_cut_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_cut_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_cut_clipboard$descriptor() {
        return gtk_text_buffer_cut_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_cut_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_cut_clipboard$handle() {
        return gtk_text_buffer_cut_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_cut_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard, gboolean default_editable)
     * }
     */
    public static void gtk_text_buffer_cut_clipboard(MemorySegment buffer, MemorySegment clipboard, int default_editable) {
        var mh$ = gtk_text_buffer_cut_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_cut_clipboard", buffer, clipboard, default_editable);
            }
            mh$.invokeExact(buffer, clipboard, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_copy_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_copy_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_copy_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_copy_clipboard$descriptor() {
        return gtk_text_buffer_copy_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_copy_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_text_buffer_copy_clipboard$handle() {
        return gtk_text_buffer_copy_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_copy_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard)
     * }
     */
    public static void gtk_text_buffer_copy_clipboard(MemorySegment buffer, MemorySegment clipboard) {
        var mh$ = gtk_text_buffer_copy_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_copy_clipboard", buffer, clipboard);
            }
            mh$.invokeExact(buffer, clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_paste_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_paste_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_paste_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard, GtkTextIter *override_location, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_paste_clipboard$descriptor() {
        return gtk_text_buffer_paste_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_paste_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard, GtkTextIter *override_location, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_paste_clipboard$handle() {
        return gtk_text_buffer_paste_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_paste_clipboard(GtkTextBuffer *buffer, GtkClipboard *clipboard, GtkTextIter *override_location, gboolean default_editable)
     * }
     */
    public static void gtk_text_buffer_paste_clipboard(MemorySegment buffer, MemorySegment clipboard, MemorySegment override_location, int default_editable) {
        var mh$ = gtk_text_buffer_paste_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_paste_clipboard", buffer, clipboard, override_location, default_editable);
            }
            mh$.invokeExact(buffer, clipboard, override_location, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_selection_bounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_selection_bounds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_selection_bounds(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_selection_bounds$descriptor() {
        return gtk_text_buffer_get_selection_bounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_selection_bounds(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_selection_bounds$handle() {
        return gtk_text_buffer_get_selection_bounds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_get_selection_bounds(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end)
     * }
     */
    public static int gtk_text_buffer_get_selection_bounds(MemorySegment buffer, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_buffer_get_selection_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_selection_bounds", buffer, start, end);
            }
            return (int)mh$.invokeExact(buffer, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_delete_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_delete_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_delete_selection(GtkTextBuffer *buffer, gboolean interactive, gboolean default_editable)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_delete_selection$descriptor() {
        return gtk_text_buffer_delete_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_delete_selection(GtkTextBuffer *buffer, gboolean interactive, gboolean default_editable)
     * }
     */
    public static MethodHandle gtk_text_buffer_delete_selection$handle() {
        return gtk_text_buffer_delete_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_delete_selection(GtkTextBuffer *buffer, gboolean interactive, gboolean default_editable)
     * }
     */
    public static int gtk_text_buffer_delete_selection(MemorySegment buffer, int interactive, int default_editable) {
        var mh$ = gtk_text_buffer_delete_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_delete_selection", buffer, interactive, default_editable);
            }
            return (int)mh$.invokeExact(buffer, interactive, default_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_begin_user_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_begin_user_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_begin_user_action(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_begin_user_action$descriptor() {
        return gtk_text_buffer_begin_user_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_begin_user_action(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_begin_user_action$handle() {
        return gtk_text_buffer_begin_user_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_begin_user_action(GtkTextBuffer *buffer)
     * }
     */
    public static void gtk_text_buffer_begin_user_action(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_begin_user_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_begin_user_action", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_end_user_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_end_user_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_end_user_action(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_end_user_action$descriptor() {
        return gtk_text_buffer_end_user_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_end_user_action(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_end_user_action$handle() {
        return gtk_text_buffer_end_user_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_end_user_action(GtkTextBuffer *buffer)
     * }
     */
    public static void gtk_text_buffer_end_user_action(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_end_user_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_end_user_action", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_copy_target_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_copy_target_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_text_buffer_get_copy_target_list(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_copy_target_list$descriptor() {
        return gtk_text_buffer_get_copy_target_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_text_buffer_get_copy_target_list(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_copy_target_list$handle() {
        return gtk_text_buffer_get_copy_target_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_text_buffer_get_copy_target_list(GtkTextBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_copy_target_list(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_copy_target_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_copy_target_list", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_paste_target_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_paste_target_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_text_buffer_get_paste_target_list(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_paste_target_list$descriptor() {
        return gtk_text_buffer_get_paste_target_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_text_buffer_get_paste_target_list(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_paste_target_list$handle() {
        return gtk_text_buffer_get_paste_target_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_text_buffer_get_paste_target_list(GtkTextBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_paste_target_list(MemorySegment buffer) {
        var mh$ = gtk_text_buffer_get_paste_target_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_paste_target_list", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_register_serialize_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_register_serialize_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_serialize_format(GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_register_serialize_format$descriptor() {
        return gtk_text_buffer_register_serialize_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_serialize_format(GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static MethodHandle gtk_text_buffer_register_serialize_format$handle() {
        return gtk_text_buffer_register_serialize_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_serialize_format(GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static MemorySegment gtk_text_buffer_register_serialize_format(MemorySegment buffer, MemorySegment mime_type, MemorySegment function, MemorySegment user_data, MemorySegment user_data_destroy) {
        var mh$ = gtk_text_buffer_register_serialize_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_register_serialize_format", buffer, mime_type, function, user_data, user_data_destroy);
            }
            return (MemorySegment)mh$.invokeExact(buffer, mime_type, function, user_data, user_data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_register_serialize_tagset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_register_serialize_tagset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_serialize_tagset(GtkTextBuffer *buffer, const gchar *tagset_name)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_register_serialize_tagset$descriptor() {
        return gtk_text_buffer_register_serialize_tagset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_serialize_tagset(GtkTextBuffer *buffer, const gchar *tagset_name)
     * }
     */
    public static MethodHandle gtk_text_buffer_register_serialize_tagset$handle() {
        return gtk_text_buffer_register_serialize_tagset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_serialize_tagset(GtkTextBuffer *buffer, const gchar *tagset_name)
     * }
     */
    public static MemorySegment gtk_text_buffer_register_serialize_tagset(MemorySegment buffer, MemorySegment tagset_name) {
        var mh$ = gtk_text_buffer_register_serialize_tagset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_register_serialize_tagset", buffer, tagset_name);
            }
            return (MemorySegment)mh$.invokeExact(buffer, tagset_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_register_deserialize_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_register_deserialize_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_deserialize_format(GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_register_deserialize_format$descriptor() {
        return gtk_text_buffer_register_deserialize_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_deserialize_format(GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static MethodHandle gtk_text_buffer_register_deserialize_format$handle() {
        return gtk_text_buffer_register_deserialize_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_deserialize_format(GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static MemorySegment gtk_text_buffer_register_deserialize_format(MemorySegment buffer, MemorySegment mime_type, MemorySegment function, MemorySegment user_data, MemorySegment user_data_destroy) {
        var mh$ = gtk_text_buffer_register_deserialize_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_register_deserialize_format", buffer, mime_type, function, user_data, user_data_destroy);
            }
            return (MemorySegment)mh$.invokeExact(buffer, mime_type, function, user_data, user_data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_register_deserialize_tagset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_register_deserialize_tagset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer *buffer, const gchar *tagset_name)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_register_deserialize_tagset$descriptor() {
        return gtk_text_buffer_register_deserialize_tagset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer *buffer, const gchar *tagset_name)
     * }
     */
    public static MethodHandle gtk_text_buffer_register_deserialize_tagset$handle() {
        return gtk_text_buffer_register_deserialize_tagset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer *buffer, const gchar *tagset_name)
     * }
     */
    public static MemorySegment gtk_text_buffer_register_deserialize_tagset(MemorySegment buffer, MemorySegment tagset_name) {
        var mh$ = gtk_text_buffer_register_deserialize_tagset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_register_deserialize_tagset", buffer, tagset_name);
            }
            return (MemorySegment)mh$.invokeExact(buffer, tagset_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_unregister_serialize_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_unregister_serialize_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_unregister_serialize_format(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_unregister_serialize_format$descriptor() {
        return gtk_text_buffer_unregister_serialize_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_unregister_serialize_format(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static MethodHandle gtk_text_buffer_unregister_serialize_format$handle() {
        return gtk_text_buffer_unregister_serialize_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_unregister_serialize_format(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static void gtk_text_buffer_unregister_serialize_format(MemorySegment buffer, MemorySegment format) {
        var mh$ = gtk_text_buffer_unregister_serialize_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_unregister_serialize_format", buffer, format);
            }
            mh$.invokeExact(buffer, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_unregister_deserialize_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_unregister_deserialize_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_unregister_deserialize_format(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_unregister_deserialize_format$descriptor() {
        return gtk_text_buffer_unregister_deserialize_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_unregister_deserialize_format(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static MethodHandle gtk_text_buffer_unregister_deserialize_format$handle() {
        return gtk_text_buffer_unregister_deserialize_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_unregister_deserialize_format(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static void gtk_text_buffer_unregister_deserialize_format(MemorySegment buffer, MemorySegment format) {
        var mh$ = gtk_text_buffer_unregister_deserialize_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_unregister_deserialize_format", buffer, format);
            }
            mh$.invokeExact(buffer, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_deserialize_set_can_create_tags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_deserialize_set_can_create_tags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_deserialize_set_can_create_tags(GtkTextBuffer *buffer, GdkAtom format, gboolean can_create_tags)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_deserialize_set_can_create_tags$descriptor() {
        return gtk_text_buffer_deserialize_set_can_create_tags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_buffer_deserialize_set_can_create_tags(GtkTextBuffer *buffer, GdkAtom format, gboolean can_create_tags)
     * }
     */
    public static MethodHandle gtk_text_buffer_deserialize_set_can_create_tags$handle() {
        return gtk_text_buffer_deserialize_set_can_create_tags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_buffer_deserialize_set_can_create_tags(GtkTextBuffer *buffer, GdkAtom format, gboolean can_create_tags)
     * }
     */
    public static void gtk_text_buffer_deserialize_set_can_create_tags(MemorySegment buffer, MemorySegment format, int can_create_tags) {
        var mh$ = gtk_text_buffer_deserialize_set_can_create_tags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_deserialize_set_can_create_tags", buffer, format, can_create_tags);
            }
            mh$.invokeExact(buffer, format, can_create_tags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_deserialize_get_can_create_tags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_deserialize_get_can_create_tags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_deserialize_get_can_create_tags(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_deserialize_get_can_create_tags$descriptor() {
        return gtk_text_buffer_deserialize_get_can_create_tags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_deserialize_get_can_create_tags(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static MethodHandle gtk_text_buffer_deserialize_get_can_create_tags$handle() {
        return gtk_text_buffer_deserialize_get_can_create_tags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_deserialize_get_can_create_tags(GtkTextBuffer *buffer, GdkAtom format)
     * }
     */
    public static int gtk_text_buffer_deserialize_get_can_create_tags(MemorySegment buffer, MemorySegment format) {
        var mh$ = gtk_text_buffer_deserialize_get_can_create_tags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_deserialize_get_can_create_tags", buffer, format);
            }
            return (int)mh$.invokeExact(buffer, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_serialize_formats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_serialize_formats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom *gtk_text_buffer_get_serialize_formats(GtkTextBuffer *buffer, gint *n_formats)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_serialize_formats$descriptor() {
        return gtk_text_buffer_get_serialize_formats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom *gtk_text_buffer_get_serialize_formats(GtkTextBuffer *buffer, gint *n_formats)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_serialize_formats$handle() {
        return gtk_text_buffer_get_serialize_formats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom *gtk_text_buffer_get_serialize_formats(GtkTextBuffer *buffer, gint *n_formats)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_serialize_formats(MemorySegment buffer, MemorySegment n_formats) {
        var mh$ = gtk_text_buffer_get_serialize_formats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_serialize_formats", buffer, n_formats);
            }
            return (MemorySegment)mh$.invokeExact(buffer, n_formats);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_get_deserialize_formats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_get_deserialize_formats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom *gtk_text_buffer_get_deserialize_formats(GtkTextBuffer *buffer, gint *n_formats)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_get_deserialize_formats$descriptor() {
        return gtk_text_buffer_get_deserialize_formats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom *gtk_text_buffer_get_deserialize_formats(GtkTextBuffer *buffer, gint *n_formats)
     * }
     */
    public static MethodHandle gtk_text_buffer_get_deserialize_formats$handle() {
        return gtk_text_buffer_get_deserialize_formats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom *gtk_text_buffer_get_deserialize_formats(GtkTextBuffer *buffer, gint *n_formats)
     * }
     */
    public static MemorySegment gtk_text_buffer_get_deserialize_formats(MemorySegment buffer, MemorySegment n_formats) {
        var mh$ = gtk_text_buffer_get_deserialize_formats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_get_deserialize_formats", buffer, n_formats);
            }
            return (MemorySegment)mh$.invokeExact(buffer, n_formats);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_serialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_serialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 *gtk_text_buffer_serialize(GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, const GtkTextIter *start, const GtkTextIter *end, gsize *length)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_serialize$descriptor() {
        return gtk_text_buffer_serialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 *gtk_text_buffer_serialize(GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, const GtkTextIter *start, const GtkTextIter *end, gsize *length)
     * }
     */
    public static MethodHandle gtk_text_buffer_serialize$handle() {
        return gtk_text_buffer_serialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 *gtk_text_buffer_serialize(GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, const GtkTextIter *start, const GtkTextIter *end, gsize *length)
     * }
     */
    public static MemorySegment gtk_text_buffer_serialize(MemorySegment register_buffer, MemorySegment content_buffer, MemorySegment format, MemorySegment start, MemorySegment end, MemorySegment length) {
        var mh$ = gtk_text_buffer_serialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_serialize", register_buffer, content_buffer, format, start, end, length);
            }
            return (MemorySegment)mh$.invokeExact(register_buffer, content_buffer, format, start, end, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_deserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_deserialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_deserialize(GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, GtkTextIter *iter, const guint8 *data, gsize length, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_deserialize$descriptor() {
        return gtk_text_buffer_deserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_deserialize(GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, GtkTextIter *iter, const guint8 *data, gsize length, GError **error)
     * }
     */
    public static MethodHandle gtk_text_buffer_deserialize$handle() {
        return gtk_text_buffer_deserialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_buffer_deserialize(GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, GtkTextIter *iter, const guint8 *data, gsize length, GError **error)
     * }
     */
    public static int gtk_text_buffer_deserialize(MemorySegment register_buffer, MemorySegment content_buffer, MemorySegment format, MemorySegment iter, MemorySegment data, long length, MemorySegment error) {
        var mh$ = gtk_text_buffer_deserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_deserialize", register_buffer, content_buffer, format, iter, data, length, error);
            }
            return (int)mh$.invokeExact(register_buffer, content_buffer, format, iter, data, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TEXT_WINDOW_PRIVATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_WINDOW_PRIVATE = 0
     * }
     */
    public static int GTK_TEXT_WINDOW_PRIVATE() {
        return GTK_TEXT_WINDOW_PRIVATE;
    }
    private static final int GTK_TEXT_WINDOW_WIDGET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_WINDOW_WIDGET = 1
     * }
     */
    public static int GTK_TEXT_WINDOW_WIDGET() {
        return GTK_TEXT_WINDOW_WIDGET;
    }
    private static final int GTK_TEXT_WINDOW_TEXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_WINDOW_TEXT = 2
     * }
     */
    public static int GTK_TEXT_WINDOW_TEXT() {
        return GTK_TEXT_WINDOW_TEXT;
    }
    private static final int GTK_TEXT_WINDOW_LEFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_WINDOW_LEFT = 3
     * }
     */
    public static int GTK_TEXT_WINDOW_LEFT() {
        return GTK_TEXT_WINDOW_LEFT;
    }
    private static final int GTK_TEXT_WINDOW_RIGHT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_WINDOW_RIGHT = 4
     * }
     */
    public static int GTK_TEXT_WINDOW_RIGHT() {
        return GTK_TEXT_WINDOW_RIGHT;
    }
    private static final int GTK_TEXT_WINDOW_TOP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_WINDOW_TOP = 5
     * }
     */
    public static int GTK_TEXT_WINDOW_TOP() {
        return GTK_TEXT_WINDOW_TOP;
    }
    private static final int GTK_TEXT_WINDOW_BOTTOM = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_WINDOW_BOTTOM = 6
     * }
     */
    public static int GTK_TEXT_WINDOW_BOTTOM() {
        return GTK_TEXT_WINDOW_BOTTOM;
    }
    private static final int GTK_TEXT_VIEW_LAYER_BELOW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_VIEW_LAYER_BELOW = 0
     * }
     */
    public static int GTK_TEXT_VIEW_LAYER_BELOW() {
        return GTK_TEXT_VIEW_LAYER_BELOW;
    }
    private static final int GTK_TEXT_VIEW_LAYER_ABOVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_VIEW_LAYER_ABOVE = 1
     * }
     */
    public static int GTK_TEXT_VIEW_LAYER_ABOVE() {
        return GTK_TEXT_VIEW_LAYER_ABOVE;
    }
    private static final int GTK_TEXT_VIEW_LAYER_BELOW_TEXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_VIEW_LAYER_BELOW_TEXT = 2
     * }
     */
    public static int GTK_TEXT_VIEW_LAYER_BELOW_TEXT() {
        return GTK_TEXT_VIEW_LAYER_BELOW_TEXT;
    }
    private static final int GTK_TEXT_VIEW_LAYER_ABOVE_TEXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_VIEW_LAYER_ABOVE_TEXT = 3
     * }
     */
    public static int GTK_TEXT_VIEW_LAYER_ABOVE_TEXT() {
        return GTK_TEXT_VIEW_LAYER_ABOVE_TEXT;
    }
    private static final int GTK_TEXT_EXTEND_SELECTION_WORD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_EXTEND_SELECTION_WORD = 0
     * }
     */
    public static int GTK_TEXT_EXTEND_SELECTION_WORD() {
        return GTK_TEXT_EXTEND_SELECTION_WORD;
    }
    private static final int GTK_TEXT_EXTEND_SELECTION_LINE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_EXTEND_SELECTION_LINE = 1
     * }
     */
    public static int GTK_TEXT_EXTEND_SELECTION_LINE() {
        return GTK_TEXT_EXTEND_SELECTION_LINE;
    }

    private static class gtk_text_view_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_view_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_type$descriptor() {
        return gtk_text_view_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_view_get_type()
     * }
     */
    public static MethodHandle gtk_text_view_get_type$handle() {
        return gtk_text_view_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_view_get_type()
     * }
     */
    public static long gtk_text_view_get_type() {
        var mh$ = gtk_text_view_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new()
     * }
     */
    public static FunctionDescriptor gtk_text_view_new$descriptor() {
        return gtk_text_view_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new()
     * }
     */
    public static MethodHandle gtk_text_view_new$handle() {
        return gtk_text_view_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new()
     * }
     */
    public static MemorySegment gtk_text_view_new() {
        var mh$ = gtk_text_view_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_new_with_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_new_with_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new_with_buffer(GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_view_new_with_buffer$descriptor() {
        return gtk_text_view_new_with_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new_with_buffer(GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_view_new_with_buffer$handle() {
        return gtk_text_view_new_with_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_text_view_new_with_buffer(GtkTextBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_text_view_new_with_buffer(MemorySegment buffer) {
        var mh$ = gtk_text_view_new_with_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_new_with_buffer", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_buffer(GtkTextView *text_view, GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_buffer$descriptor() {
        return gtk_text_view_set_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_buffer(GtkTextView *text_view, GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_text_view_set_buffer$handle() {
        return gtk_text_view_set_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_buffer(GtkTextView *text_view, GtkTextBuffer *buffer)
     * }
     */
    public static void gtk_text_view_set_buffer(MemorySegment text_view, MemorySegment buffer) {
        var mh$ = gtk_text_view_set_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_buffer", text_view, buffer);
            }
            mh$.invokeExact(text_view, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_view_get_buffer(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_buffer$descriptor() {
        return gtk_text_view_get_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_view_get_buffer(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_buffer$handle() {
        return gtk_text_view_get_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_view_get_buffer(GtkTextView *text_view)
     * }
     */
    public static MemorySegment gtk_text_view_get_buffer(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_buffer", text_view);
            }
            return (MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_scroll_to_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_scroll_to_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_scroll_to_iter(GtkTextView *text_view, GtkTextIter *iter, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign)
     * }
     */
    public static FunctionDescriptor gtk_text_view_scroll_to_iter$descriptor() {
        return gtk_text_view_scroll_to_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_scroll_to_iter(GtkTextView *text_view, GtkTextIter *iter, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign)
     * }
     */
    public static MethodHandle gtk_text_view_scroll_to_iter$handle() {
        return gtk_text_view_scroll_to_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_scroll_to_iter(GtkTextView *text_view, GtkTextIter *iter, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign)
     * }
     */
    public static int gtk_text_view_scroll_to_iter(MemorySegment text_view, MemorySegment iter, double within_margin, int use_align, double xalign, double yalign) {
        var mh$ = gtk_text_view_scroll_to_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_scroll_to_iter", text_view, iter, within_margin, use_align, xalign, yalign);
            }
            return (int)mh$.invokeExact(text_view, iter, within_margin, use_align, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_scroll_to_mark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_scroll_to_mark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_scroll_to_mark(GtkTextView *text_view, GtkTextMark *mark, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign)
     * }
     */
    public static FunctionDescriptor gtk_text_view_scroll_to_mark$descriptor() {
        return gtk_text_view_scroll_to_mark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_scroll_to_mark(GtkTextView *text_view, GtkTextMark *mark, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign)
     * }
     */
    public static MethodHandle gtk_text_view_scroll_to_mark$handle() {
        return gtk_text_view_scroll_to_mark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_scroll_to_mark(GtkTextView *text_view, GtkTextMark *mark, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign)
     * }
     */
    public static void gtk_text_view_scroll_to_mark(MemorySegment text_view, MemorySegment mark, double within_margin, int use_align, double xalign, double yalign) {
        var mh$ = gtk_text_view_scroll_to_mark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_scroll_to_mark", text_view, mark, within_margin, use_align, xalign, yalign);
            }
            mh$.invokeExact(text_view, mark, within_margin, use_align, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_scroll_mark_onscreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_scroll_mark_onscreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_scroll_mark_onscreen(GtkTextView *text_view, GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_view_scroll_mark_onscreen$descriptor() {
        return gtk_text_view_scroll_mark_onscreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_scroll_mark_onscreen(GtkTextView *text_view, GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_view_scroll_mark_onscreen$handle() {
        return gtk_text_view_scroll_mark_onscreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_scroll_mark_onscreen(GtkTextView *text_view, GtkTextMark *mark)
     * }
     */
    public static void gtk_text_view_scroll_mark_onscreen(MemorySegment text_view, MemorySegment mark) {
        var mh$ = gtk_text_view_scroll_mark_onscreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_scroll_mark_onscreen", text_view, mark);
            }
            mh$.invokeExact(text_view, mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_move_mark_onscreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_move_mark_onscreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_move_mark_onscreen(GtkTextView *text_view, GtkTextMark *mark)
     * }
     */
    public static FunctionDescriptor gtk_text_view_move_mark_onscreen$descriptor() {
        return gtk_text_view_move_mark_onscreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_move_mark_onscreen(GtkTextView *text_view, GtkTextMark *mark)
     * }
     */
    public static MethodHandle gtk_text_view_move_mark_onscreen$handle() {
        return gtk_text_view_move_mark_onscreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_move_mark_onscreen(GtkTextView *text_view, GtkTextMark *mark)
     * }
     */
    public static int gtk_text_view_move_mark_onscreen(MemorySegment text_view, MemorySegment mark) {
        var mh$ = gtk_text_view_move_mark_onscreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_move_mark_onscreen", text_view, mark);
            }
            return (int)mh$.invokeExact(text_view, mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_place_cursor_onscreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_place_cursor_onscreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_place_cursor_onscreen(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_place_cursor_onscreen$descriptor() {
        return gtk_text_view_place_cursor_onscreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_place_cursor_onscreen(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_place_cursor_onscreen$handle() {
        return gtk_text_view_place_cursor_onscreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_place_cursor_onscreen(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_place_cursor_onscreen(MemorySegment text_view) {
        var mh$ = gtk_text_view_place_cursor_onscreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_place_cursor_onscreen", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_visible_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_visible_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_visible_rect(GtkTextView *text_view, GdkRectangle *visible_rect)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_visible_rect$descriptor() {
        return gtk_text_view_get_visible_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_visible_rect(GtkTextView *text_view, GdkRectangle *visible_rect)
     * }
     */
    public static MethodHandle gtk_text_view_get_visible_rect$handle() {
        return gtk_text_view_get_visible_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_get_visible_rect(GtkTextView *text_view, GdkRectangle *visible_rect)
     * }
     */
    public static void gtk_text_view_get_visible_rect(MemorySegment text_view, MemorySegment visible_rect) {
        var mh$ = gtk_text_view_get_visible_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_visible_rect", text_view, visible_rect);
            }
            mh$.invokeExact(text_view, visible_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_cursor_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_cursor_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_cursor_visible(GtkTextView *text_view, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_cursor_visible$descriptor() {
        return gtk_text_view_set_cursor_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_cursor_visible(GtkTextView *text_view, gboolean setting)
     * }
     */
    public static MethodHandle gtk_text_view_set_cursor_visible$handle() {
        return gtk_text_view_set_cursor_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_cursor_visible(GtkTextView *text_view, gboolean setting)
     * }
     */
    public static void gtk_text_view_set_cursor_visible(MemorySegment text_view, int setting) {
        var mh$ = gtk_text_view_set_cursor_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_cursor_visible", text_view, setting);
            }
            mh$.invokeExact(text_view, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_cursor_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_cursor_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_cursor_visible(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_cursor_visible$descriptor() {
        return gtk_text_view_get_cursor_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_cursor_visible(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_cursor_visible$handle() {
        return gtk_text_view_get_cursor_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_cursor_visible(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_cursor_visible(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_cursor_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_cursor_visible", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_reset_cursor_blink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_reset_cursor_blink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_reset_cursor_blink(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_reset_cursor_blink$descriptor() {
        return gtk_text_view_reset_cursor_blink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_reset_cursor_blink(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_reset_cursor_blink$handle() {
        return gtk_text_view_reset_cursor_blink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_reset_cursor_blink(GtkTextView *text_view)
     * }
     */
    public static void gtk_text_view_reset_cursor_blink(MemorySegment text_view) {
        var mh$ = gtk_text_view_reset_cursor_blink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_reset_cursor_blink", text_view);
            }
            mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_cursor_locations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_cursor_locations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_cursor_locations(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *strong, GdkRectangle *weak)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_cursor_locations$descriptor() {
        return gtk_text_view_get_cursor_locations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_cursor_locations(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *strong, GdkRectangle *weak)
     * }
     */
    public static MethodHandle gtk_text_view_get_cursor_locations$handle() {
        return gtk_text_view_get_cursor_locations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_get_cursor_locations(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *strong, GdkRectangle *weak)
     * }
     */
    public static void gtk_text_view_get_cursor_locations(MemorySegment text_view, MemorySegment iter, MemorySegment strong, MemorySegment weak) {
        var mh$ = gtk_text_view_get_cursor_locations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_cursor_locations", text_view, iter, strong, weak);
            }
            mh$.invokeExact(text_view, iter, strong, weak);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_iter_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_iter_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_iter_location(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *location)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_iter_location$descriptor() {
        return gtk_text_view_get_iter_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_iter_location(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *location)
     * }
     */
    public static MethodHandle gtk_text_view_get_iter_location$handle() {
        return gtk_text_view_get_iter_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_get_iter_location(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *location)
     * }
     */
    public static void gtk_text_view_get_iter_location(MemorySegment text_view, MemorySegment iter, MemorySegment location) {
        var mh$ = gtk_text_view_get_iter_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_iter_location", text_view, iter, location);
            }
            mh$.invokeExact(text_view, iter, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_iter_at_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_iter_at_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_iter_at_location(GtkTextView *text_view, GtkTextIter *iter, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_iter_at_location$descriptor() {
        return gtk_text_view_get_iter_at_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_iter_at_location(GtkTextView *text_view, GtkTextIter *iter, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_text_view_get_iter_at_location$handle() {
        return gtk_text_view_get_iter_at_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_iter_at_location(GtkTextView *text_view, GtkTextIter *iter, gint x, gint y)
     * }
     */
    public static int gtk_text_view_get_iter_at_location(MemorySegment text_view, MemorySegment iter, int x, int y) {
        var mh$ = gtk_text_view_get_iter_at_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_iter_at_location", text_view, iter, x, y);
            }
            return (int)mh$.invokeExact(text_view, iter, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_iter_at_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_iter_at_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_iter_at_position(GtkTextView *text_view, GtkTextIter *iter, gint *trailing, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_iter_at_position$descriptor() {
        return gtk_text_view_get_iter_at_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_iter_at_position(GtkTextView *text_view, GtkTextIter *iter, gint *trailing, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_text_view_get_iter_at_position$handle() {
        return gtk_text_view_get_iter_at_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_iter_at_position(GtkTextView *text_view, GtkTextIter *iter, gint *trailing, gint x, gint y)
     * }
     */
    public static int gtk_text_view_get_iter_at_position(MemorySegment text_view, MemorySegment iter, MemorySegment trailing, int x, int y) {
        var mh$ = gtk_text_view_get_iter_at_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_iter_at_position", text_view, iter, trailing, x, y);
            }
            return (int)mh$.invokeExact(text_view, iter, trailing, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_line_yrange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_line_yrange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_line_yrange(GtkTextView *text_view, const GtkTextIter *iter, gint *y, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_line_yrange$descriptor() {
        return gtk_text_view_get_line_yrange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_line_yrange(GtkTextView *text_view, const GtkTextIter *iter, gint *y, gint *height)
     * }
     */
    public static MethodHandle gtk_text_view_get_line_yrange$handle() {
        return gtk_text_view_get_line_yrange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_get_line_yrange(GtkTextView *text_view, const GtkTextIter *iter, gint *y, gint *height)
     * }
     */
    public static void gtk_text_view_get_line_yrange(MemorySegment text_view, MemorySegment iter, MemorySegment y, MemorySegment height) {
        var mh$ = gtk_text_view_get_line_yrange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_line_yrange", text_view, iter, y, height);
            }
            mh$.invokeExact(text_view, iter, y, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_line_at_y {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_line_at_y"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_line_at_y(GtkTextView *text_view, GtkTextIter *target_iter, gint y, gint *line_top)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_line_at_y$descriptor() {
        return gtk_text_view_get_line_at_y.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_get_line_at_y(GtkTextView *text_view, GtkTextIter *target_iter, gint y, gint *line_top)
     * }
     */
    public static MethodHandle gtk_text_view_get_line_at_y$handle() {
        return gtk_text_view_get_line_at_y.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_get_line_at_y(GtkTextView *text_view, GtkTextIter *target_iter, gint y, gint *line_top)
     * }
     */
    public static void gtk_text_view_get_line_at_y(MemorySegment text_view, MemorySegment target_iter, int y, MemorySegment line_top) {
        var mh$ = gtk_text_view_get_line_at_y.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_line_at_y", text_view, target_iter, y, line_top);
            }
            mh$.invokeExact(text_view, target_iter, y, line_top);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_buffer_to_window_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_buffer_to_window_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_buffer_to_window_coords(GtkTextView *text_view, GtkTextWindowType win, gint buffer_x, gint buffer_y, gint *window_x, gint *window_y)
     * }
     */
    public static FunctionDescriptor gtk_text_view_buffer_to_window_coords$descriptor() {
        return gtk_text_view_buffer_to_window_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_buffer_to_window_coords(GtkTextView *text_view, GtkTextWindowType win, gint buffer_x, gint buffer_y, gint *window_x, gint *window_y)
     * }
     */
    public static MethodHandle gtk_text_view_buffer_to_window_coords$handle() {
        return gtk_text_view_buffer_to_window_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_buffer_to_window_coords(GtkTextView *text_view, GtkTextWindowType win, gint buffer_x, gint buffer_y, gint *window_x, gint *window_y)
     * }
     */
    public static void gtk_text_view_buffer_to_window_coords(MemorySegment text_view, int win, int buffer_x, int buffer_y, MemorySegment window_x, MemorySegment window_y) {
        var mh$ = gtk_text_view_buffer_to_window_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_buffer_to_window_coords", text_view, win, buffer_x, buffer_y, window_x, window_y);
            }
            mh$.invokeExact(text_view, win, buffer_x, buffer_y, window_x, window_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_window_to_buffer_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_window_to_buffer_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_window_to_buffer_coords(GtkTextView *text_view, GtkTextWindowType win, gint window_x, gint window_y, gint *buffer_x, gint *buffer_y)
     * }
     */
    public static FunctionDescriptor gtk_text_view_window_to_buffer_coords$descriptor() {
        return gtk_text_view_window_to_buffer_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_window_to_buffer_coords(GtkTextView *text_view, GtkTextWindowType win, gint window_x, gint window_y, gint *buffer_x, gint *buffer_y)
     * }
     */
    public static MethodHandle gtk_text_view_window_to_buffer_coords$handle() {
        return gtk_text_view_window_to_buffer_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_window_to_buffer_coords(GtkTextView *text_view, GtkTextWindowType win, gint window_x, gint window_y, gint *buffer_x, gint *buffer_y)
     * }
     */
    public static void gtk_text_view_window_to_buffer_coords(MemorySegment text_view, int win, int window_x, int window_y, MemorySegment buffer_x, MemorySegment buffer_y) {
        var mh$ = gtk_text_view_window_to_buffer_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_window_to_buffer_coords", text_view, win, window_x, window_y, buffer_x, buffer_y);
            }
            mh$.invokeExact(text_view, win, window_x, window_y, buffer_x, buffer_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_text_view_get_hadjustment(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_hadjustment$descriptor() {
        return gtk_text_view_get_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_text_view_get_hadjustment(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_hadjustment$handle() {
        return gtk_text_view_get_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_text_view_get_hadjustment(GtkTextView *text_view)
     * }
     */
    public static MemorySegment gtk_text_view_get_hadjustment(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_hadjustment", text_view);
            }
            return (MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_text_view_get_vadjustment(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_vadjustment$descriptor() {
        return gtk_text_view_get_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_text_view_get_vadjustment(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_vadjustment$handle() {
        return gtk_text_view_get_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_text_view_get_vadjustment(GtkTextView *text_view)
     * }
     */
    public static MemorySegment gtk_text_view_get_vadjustment(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_vadjustment", text_view);
            }
            return (MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_text_view_get_window(GtkTextView *text_view, GtkTextWindowType win)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_window$descriptor() {
        return gtk_text_view_get_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_text_view_get_window(GtkTextView *text_view, GtkTextWindowType win)
     * }
     */
    public static MethodHandle gtk_text_view_get_window$handle() {
        return gtk_text_view_get_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_text_view_get_window(GtkTextView *text_view, GtkTextWindowType win)
     * }
     */
    public static MemorySegment gtk_text_view_get_window(MemorySegment text_view, int win) {
        var mh$ = gtk_text_view_get_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_window", text_view, win);
            }
            return (MemorySegment)mh$.invokeExact(text_view, win);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_window_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_window_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextWindowType gtk_text_view_get_window_type(GtkTextView *text_view, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_window_type$descriptor() {
        return gtk_text_view_get_window_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextWindowType gtk_text_view_get_window_type(GtkTextView *text_view, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_text_view_get_window_type$handle() {
        return gtk_text_view_get_window_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextWindowType gtk_text_view_get_window_type(GtkTextView *text_view, GdkWindow *window)
     * }
     */
    public static int gtk_text_view_get_window_type(MemorySegment text_view, MemorySegment window) {
        var mh$ = gtk_text_view_get_window_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_window_type", text_view, window);
            }
            return (int)mh$.invokeExact(text_view, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_border_window_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_border_window_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_border_window_size(GtkTextView *text_view, GtkTextWindowType type, gint size)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_border_window_size$descriptor() {
        return gtk_text_view_set_border_window_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_border_window_size(GtkTextView *text_view, GtkTextWindowType type, gint size)
     * }
     */
    public static MethodHandle gtk_text_view_set_border_window_size$handle() {
        return gtk_text_view_set_border_window_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_border_window_size(GtkTextView *text_view, GtkTextWindowType type, gint size)
     * }
     */
    public static void gtk_text_view_set_border_window_size(MemorySegment text_view, int type, int size) {
        var mh$ = gtk_text_view_set_border_window_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_border_window_size", text_view, type, size);
            }
            mh$.invokeExact(text_view, type, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_border_window_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_border_window_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_border_window_size(GtkTextView *text_view, GtkTextWindowType type)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_border_window_size$descriptor() {
        return gtk_text_view_get_border_window_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_border_window_size(GtkTextView *text_view, GtkTextWindowType type)
     * }
     */
    public static MethodHandle gtk_text_view_get_border_window_size$handle() {
        return gtk_text_view_get_border_window_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_border_window_size(GtkTextView *text_view, GtkTextWindowType type)
     * }
     */
    public static int gtk_text_view_get_border_window_size(MemorySegment text_view, int type) {
        var mh$ = gtk_text_view_get_border_window_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_border_window_size", text_view, type);
            }
            return (int)mh$.invokeExact(text_view, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_forward_display_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_forward_display_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_forward_display_line(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_view_forward_display_line$descriptor() {
        return gtk_text_view_forward_display_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_forward_display_line(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_view_forward_display_line$handle() {
        return gtk_text_view_forward_display_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_forward_display_line(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static int gtk_text_view_forward_display_line(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_forward_display_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_forward_display_line", text_view, iter);
            }
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_backward_display_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_backward_display_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_backward_display_line(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_view_backward_display_line$descriptor() {
        return gtk_text_view_backward_display_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_backward_display_line(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_view_backward_display_line$handle() {
        return gtk_text_view_backward_display_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_backward_display_line(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static int gtk_text_view_backward_display_line(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_backward_display_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_backward_display_line", text_view, iter);
            }
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_forward_display_line_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_forward_display_line_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_forward_display_line_end(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_view_forward_display_line_end$descriptor() {
        return gtk_text_view_forward_display_line_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_forward_display_line_end(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_view_forward_display_line_end$handle() {
        return gtk_text_view_forward_display_line_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_forward_display_line_end(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static int gtk_text_view_forward_display_line_end(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_forward_display_line_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_forward_display_line_end", text_view, iter);
            }
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_backward_display_line_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_backward_display_line_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_backward_display_line_start(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_view_backward_display_line_start$descriptor() {
        return gtk_text_view_backward_display_line_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_backward_display_line_start(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_view_backward_display_line_start$handle() {
        return gtk_text_view_backward_display_line_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_backward_display_line_start(GtkTextView *text_view, GtkTextIter *iter)
     * }
     */
    public static int gtk_text_view_backward_display_line_start(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_backward_display_line_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_backward_display_line_start", text_view, iter);
            }
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_starts_display_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_starts_display_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_starts_display_line(GtkTextView *text_view, const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_view_starts_display_line$descriptor() {
        return gtk_text_view_starts_display_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_starts_display_line(GtkTextView *text_view, const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_view_starts_display_line$handle() {
        return gtk_text_view_starts_display_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_starts_display_line(GtkTextView *text_view, const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_view_starts_display_line(MemorySegment text_view, MemorySegment iter) {
        var mh$ = gtk_text_view_starts_display_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_starts_display_line", text_view, iter);
            }
            return (int)mh$.invokeExact(text_view, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_move_visually {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_move_visually"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_move_visually(GtkTextView *text_view, GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_view_move_visually$descriptor() {
        return gtk_text_view_move_visually.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_move_visually(GtkTextView *text_view, GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_view_move_visually$handle() {
        return gtk_text_view_move_visually.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_move_visually(GtkTextView *text_view, GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_view_move_visually(MemorySegment text_view, MemorySegment iter, int count) {
        var mh$ = gtk_text_view_move_visually.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_move_visually", text_view, iter, count);
            }
            return (int)mh$.invokeExact(text_view, iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_im_context_filter_keypress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_im_context_filter_keypress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_im_context_filter_keypress(GtkTextView *text_view, GdkEventKey *event)
     * }
     */
    public static FunctionDescriptor gtk_text_view_im_context_filter_keypress$descriptor() {
        return gtk_text_view_im_context_filter_keypress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_im_context_filter_keypress(GtkTextView *text_view, GdkEventKey *event)
     * }
     */
    public static MethodHandle gtk_text_view_im_context_filter_keypress$handle() {
        return gtk_text_view_im_context_filter_keypress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_im_context_filter_keypress(GtkTextView *text_view, GdkEventKey *event)
     * }
     */
    public static int gtk_text_view_im_context_filter_keypress(MemorySegment text_view, MemorySegment event) {
        var mh$ = gtk_text_view_im_context_filter_keypress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_im_context_filter_keypress", text_view, event);
            }
            return (int)mh$.invokeExact(text_view, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_reset_im_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_reset_im_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_reset_im_context(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_reset_im_context$descriptor() {
        return gtk_text_view_reset_im_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_reset_im_context(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_reset_im_context$handle() {
        return gtk_text_view_reset_im_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_reset_im_context(GtkTextView *text_view)
     * }
     */
    public static void gtk_text_view_reset_im_context(MemorySegment text_view) {
        var mh$ = gtk_text_view_reset_im_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_reset_im_context", text_view);
            }
            mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_add_child_at_anchor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_add_child_at_anchor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_add_child_at_anchor(GtkTextView *text_view, GtkWidget *child, GtkTextChildAnchor *anchor)
     * }
     */
    public static FunctionDescriptor gtk_text_view_add_child_at_anchor$descriptor() {
        return gtk_text_view_add_child_at_anchor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_add_child_at_anchor(GtkTextView *text_view, GtkWidget *child, GtkTextChildAnchor *anchor)
     * }
     */
    public static MethodHandle gtk_text_view_add_child_at_anchor$handle() {
        return gtk_text_view_add_child_at_anchor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_add_child_at_anchor(GtkTextView *text_view, GtkWidget *child, GtkTextChildAnchor *anchor)
     * }
     */
    public static void gtk_text_view_add_child_at_anchor(MemorySegment text_view, MemorySegment child, MemorySegment anchor) {
        var mh$ = gtk_text_view_add_child_at_anchor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_add_child_at_anchor", text_view, child, anchor);
            }
            mh$.invokeExact(text_view, child, anchor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_add_child_in_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_add_child_in_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_add_child_in_window(GtkTextView *text_view, GtkWidget *child, GtkTextWindowType which_window, gint xpos, gint ypos)
     * }
     */
    public static FunctionDescriptor gtk_text_view_add_child_in_window$descriptor() {
        return gtk_text_view_add_child_in_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_add_child_in_window(GtkTextView *text_view, GtkWidget *child, GtkTextWindowType which_window, gint xpos, gint ypos)
     * }
     */
    public static MethodHandle gtk_text_view_add_child_in_window$handle() {
        return gtk_text_view_add_child_in_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_add_child_in_window(GtkTextView *text_view, GtkWidget *child, GtkTextWindowType which_window, gint xpos, gint ypos)
     * }
     */
    public static void gtk_text_view_add_child_in_window(MemorySegment text_view, MemorySegment child, int which_window, int xpos, int ypos) {
        var mh$ = gtk_text_view_add_child_in_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_add_child_in_window", text_view, child, which_window, xpos, ypos);
            }
            mh$.invokeExact(text_view, child, which_window, xpos, ypos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_move_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_move_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_move_child(GtkTextView *text_view, GtkWidget *child, gint xpos, gint ypos)
     * }
     */
    public static FunctionDescriptor gtk_text_view_move_child$descriptor() {
        return gtk_text_view_move_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_move_child(GtkTextView *text_view, GtkWidget *child, gint xpos, gint ypos)
     * }
     */
    public static MethodHandle gtk_text_view_move_child$handle() {
        return gtk_text_view_move_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_move_child(GtkTextView *text_view, GtkWidget *child, gint xpos, gint ypos)
     * }
     */
    public static void gtk_text_view_move_child(MemorySegment text_view, MemorySegment child, int xpos, int ypos) {
        var mh$ = gtk_text_view_move_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_move_child", text_view, child, xpos, ypos);
            }
            mh$.invokeExact(text_view, child, xpos, ypos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_wrap_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_wrap_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_wrap_mode(GtkTextView *text_view, GtkWrapMode wrap_mode)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_wrap_mode$descriptor() {
        return gtk_text_view_set_wrap_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_wrap_mode(GtkTextView *text_view, GtkWrapMode wrap_mode)
     * }
     */
    public static MethodHandle gtk_text_view_set_wrap_mode$handle() {
        return gtk_text_view_set_wrap_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_wrap_mode(GtkTextView *text_view, GtkWrapMode wrap_mode)
     * }
     */
    public static void gtk_text_view_set_wrap_mode(MemorySegment text_view, int wrap_mode) {
        var mh$ = gtk_text_view_set_wrap_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_wrap_mode", text_view, wrap_mode);
            }
            mh$.invokeExact(text_view, wrap_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_wrap_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_wrap_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWrapMode gtk_text_view_get_wrap_mode(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_wrap_mode$descriptor() {
        return gtk_text_view_get_wrap_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWrapMode gtk_text_view_get_wrap_mode(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_wrap_mode$handle() {
        return gtk_text_view_get_wrap_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWrapMode gtk_text_view_get_wrap_mode(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_wrap_mode(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_wrap_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_wrap_mode", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_editable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_editable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_editable(GtkTextView *text_view, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_editable$descriptor() {
        return gtk_text_view_set_editable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_editable(GtkTextView *text_view, gboolean setting)
     * }
     */
    public static MethodHandle gtk_text_view_set_editable$handle() {
        return gtk_text_view_set_editable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_editable(GtkTextView *text_view, gboolean setting)
     * }
     */
    public static void gtk_text_view_set_editable(MemorySegment text_view, int setting) {
        var mh$ = gtk_text_view_set_editable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_editable", text_view, setting);
            }
            mh$.invokeExact(text_view, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_editable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_editable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_editable(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_editable$descriptor() {
        return gtk_text_view_get_editable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_editable(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_editable$handle() {
        return gtk_text_view_get_editable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_editable(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_editable(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_editable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_editable", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_overwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_overwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_overwrite(GtkTextView *text_view, gboolean overwrite)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_overwrite$descriptor() {
        return gtk_text_view_set_overwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_overwrite(GtkTextView *text_view, gboolean overwrite)
     * }
     */
    public static MethodHandle gtk_text_view_set_overwrite$handle() {
        return gtk_text_view_set_overwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_overwrite(GtkTextView *text_view, gboolean overwrite)
     * }
     */
    public static void gtk_text_view_set_overwrite(MemorySegment text_view, int overwrite) {
        var mh$ = gtk_text_view_set_overwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_overwrite", text_view, overwrite);
            }
            mh$.invokeExact(text_view, overwrite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_overwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_overwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_overwrite(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_overwrite$descriptor() {
        return gtk_text_view_get_overwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_overwrite(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_overwrite$handle() {
        return gtk_text_view_get_overwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_overwrite(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_overwrite(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_overwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_overwrite", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_accepts_tab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_accepts_tab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_accepts_tab(GtkTextView *text_view, gboolean accepts_tab)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_accepts_tab$descriptor() {
        return gtk_text_view_set_accepts_tab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_accepts_tab(GtkTextView *text_view, gboolean accepts_tab)
     * }
     */
    public static MethodHandle gtk_text_view_set_accepts_tab$handle() {
        return gtk_text_view_set_accepts_tab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_accepts_tab(GtkTextView *text_view, gboolean accepts_tab)
     * }
     */
    public static void gtk_text_view_set_accepts_tab(MemorySegment text_view, int accepts_tab) {
        var mh$ = gtk_text_view_set_accepts_tab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_accepts_tab", text_view, accepts_tab);
            }
            mh$.invokeExact(text_view, accepts_tab);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_accepts_tab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_accepts_tab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_accepts_tab(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_accepts_tab$descriptor() {
        return gtk_text_view_get_accepts_tab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_accepts_tab(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_accepts_tab$handle() {
        return gtk_text_view_get_accepts_tab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_accepts_tab(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_accepts_tab(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_accepts_tab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_accepts_tab", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_pixels_above_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_pixels_above_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_above_lines(GtkTextView *text_view, gint pixels_above_lines)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_pixels_above_lines$descriptor() {
        return gtk_text_view_set_pixels_above_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_above_lines(GtkTextView *text_view, gint pixels_above_lines)
     * }
     */
    public static MethodHandle gtk_text_view_set_pixels_above_lines$handle() {
        return gtk_text_view_set_pixels_above_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_above_lines(GtkTextView *text_view, gint pixels_above_lines)
     * }
     */
    public static void gtk_text_view_set_pixels_above_lines(MemorySegment text_view, int pixels_above_lines) {
        var mh$ = gtk_text_view_set_pixels_above_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_pixels_above_lines", text_view, pixels_above_lines);
            }
            mh$.invokeExact(text_view, pixels_above_lines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_pixels_above_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_pixels_above_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_above_lines(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_pixels_above_lines$descriptor() {
        return gtk_text_view_get_pixels_above_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_above_lines(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_pixels_above_lines$handle() {
        return gtk_text_view_get_pixels_above_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_above_lines(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_pixels_above_lines(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_pixels_above_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_pixels_above_lines", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_pixels_below_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_pixels_below_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_below_lines(GtkTextView *text_view, gint pixels_below_lines)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_pixels_below_lines$descriptor() {
        return gtk_text_view_set_pixels_below_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_below_lines(GtkTextView *text_view, gint pixels_below_lines)
     * }
     */
    public static MethodHandle gtk_text_view_set_pixels_below_lines$handle() {
        return gtk_text_view_set_pixels_below_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_below_lines(GtkTextView *text_view, gint pixels_below_lines)
     * }
     */
    public static void gtk_text_view_set_pixels_below_lines(MemorySegment text_view, int pixels_below_lines) {
        var mh$ = gtk_text_view_set_pixels_below_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_pixels_below_lines", text_view, pixels_below_lines);
            }
            mh$.invokeExact(text_view, pixels_below_lines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_pixels_below_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_pixels_below_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_below_lines(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_pixels_below_lines$descriptor() {
        return gtk_text_view_get_pixels_below_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_below_lines(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_pixels_below_lines$handle() {
        return gtk_text_view_get_pixels_below_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_below_lines(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_pixels_below_lines(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_pixels_below_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_pixels_below_lines", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_pixels_inside_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_pixels_inside_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_inside_wrap(GtkTextView *text_view, gint pixels_inside_wrap)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_pixels_inside_wrap$descriptor() {
        return gtk_text_view_set_pixels_inside_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_inside_wrap(GtkTextView *text_view, gint pixels_inside_wrap)
     * }
     */
    public static MethodHandle gtk_text_view_set_pixels_inside_wrap$handle() {
        return gtk_text_view_set_pixels_inside_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_pixels_inside_wrap(GtkTextView *text_view, gint pixels_inside_wrap)
     * }
     */
    public static void gtk_text_view_set_pixels_inside_wrap(MemorySegment text_view, int pixels_inside_wrap) {
        var mh$ = gtk_text_view_set_pixels_inside_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_pixels_inside_wrap", text_view, pixels_inside_wrap);
            }
            mh$.invokeExact(text_view, pixels_inside_wrap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_pixels_inside_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_pixels_inside_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_inside_wrap(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_pixels_inside_wrap$descriptor() {
        return gtk_text_view_get_pixels_inside_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_inside_wrap(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_pixels_inside_wrap$handle() {
        return gtk_text_view_get_pixels_inside_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_pixels_inside_wrap(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_pixels_inside_wrap(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_pixels_inside_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_pixels_inside_wrap", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_justification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_justification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_justification(GtkTextView *text_view, GtkJustification justification)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_justification$descriptor() {
        return gtk_text_view_set_justification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_justification(GtkTextView *text_view, GtkJustification justification)
     * }
     */
    public static MethodHandle gtk_text_view_set_justification$handle() {
        return gtk_text_view_set_justification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_justification(GtkTextView *text_view, GtkJustification justification)
     * }
     */
    public static void gtk_text_view_set_justification(MemorySegment text_view, int justification) {
        var mh$ = gtk_text_view_set_justification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_justification", text_view, justification);
            }
            mh$.invokeExact(text_view, justification);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_justification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_justification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkJustification gtk_text_view_get_justification(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_justification$descriptor() {
        return gtk_text_view_get_justification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkJustification gtk_text_view_get_justification(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_justification$handle() {
        return gtk_text_view_get_justification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkJustification gtk_text_view_get_justification(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_justification(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_justification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_justification", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_left_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_left_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_left_margin(GtkTextView *text_view, gint left_margin)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_left_margin$descriptor() {
        return gtk_text_view_set_left_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_left_margin(GtkTextView *text_view, gint left_margin)
     * }
     */
    public static MethodHandle gtk_text_view_set_left_margin$handle() {
        return gtk_text_view_set_left_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_left_margin(GtkTextView *text_view, gint left_margin)
     * }
     */
    public static void gtk_text_view_set_left_margin(MemorySegment text_view, int left_margin) {
        var mh$ = gtk_text_view_set_left_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_left_margin", text_view, left_margin);
            }
            mh$.invokeExact(text_view, left_margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_left_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_left_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_left_margin(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_left_margin$descriptor() {
        return gtk_text_view_get_left_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_left_margin(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_left_margin$handle() {
        return gtk_text_view_get_left_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_left_margin(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_left_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_left_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_left_margin", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_right_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_right_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_right_margin(GtkTextView *text_view, gint right_margin)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_right_margin$descriptor() {
        return gtk_text_view_set_right_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_right_margin(GtkTextView *text_view, gint right_margin)
     * }
     */
    public static MethodHandle gtk_text_view_set_right_margin$handle() {
        return gtk_text_view_set_right_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_right_margin(GtkTextView *text_view, gint right_margin)
     * }
     */
    public static void gtk_text_view_set_right_margin(MemorySegment text_view, int right_margin) {
        var mh$ = gtk_text_view_set_right_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_right_margin", text_view, right_margin);
            }
            mh$.invokeExact(text_view, right_margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_right_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_right_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_right_margin(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_right_margin$descriptor() {
        return gtk_text_view_get_right_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_right_margin(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_right_margin$handle() {
        return gtk_text_view_get_right_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_right_margin(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_right_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_right_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_right_margin", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_top_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_top_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_top_margin(GtkTextView *text_view, gint top_margin)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_top_margin$descriptor() {
        return gtk_text_view_set_top_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_top_margin(GtkTextView *text_view, gint top_margin)
     * }
     */
    public static MethodHandle gtk_text_view_set_top_margin$handle() {
        return gtk_text_view_set_top_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_top_margin(GtkTextView *text_view, gint top_margin)
     * }
     */
    public static void gtk_text_view_set_top_margin(MemorySegment text_view, int top_margin) {
        var mh$ = gtk_text_view_set_top_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_top_margin", text_view, top_margin);
            }
            mh$.invokeExact(text_view, top_margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_top_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_top_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_top_margin(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_top_margin$descriptor() {
        return gtk_text_view_get_top_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_top_margin(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_top_margin$handle() {
        return gtk_text_view_get_top_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_top_margin(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_top_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_top_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_top_margin", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_bottom_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_bottom_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_bottom_margin(GtkTextView *text_view, gint bottom_margin)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_bottom_margin$descriptor() {
        return gtk_text_view_set_bottom_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_bottom_margin(GtkTextView *text_view, gint bottom_margin)
     * }
     */
    public static MethodHandle gtk_text_view_set_bottom_margin$handle() {
        return gtk_text_view_set_bottom_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_bottom_margin(GtkTextView *text_view, gint bottom_margin)
     * }
     */
    public static void gtk_text_view_set_bottom_margin(MemorySegment text_view, int bottom_margin) {
        var mh$ = gtk_text_view_set_bottom_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_bottom_margin", text_view, bottom_margin);
            }
            mh$.invokeExact(text_view, bottom_margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_bottom_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_bottom_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_bottom_margin(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_bottom_margin$descriptor() {
        return gtk_text_view_get_bottom_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_bottom_margin(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_bottom_margin$handle() {
        return gtk_text_view_get_bottom_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_bottom_margin(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_bottom_margin(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_bottom_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_bottom_margin", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_indent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_indent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_indent(GtkTextView *text_view, gint indent)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_indent$descriptor() {
        return gtk_text_view_set_indent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_indent(GtkTextView *text_view, gint indent)
     * }
     */
    public static MethodHandle gtk_text_view_set_indent$handle() {
        return gtk_text_view_set_indent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_indent(GtkTextView *text_view, gint indent)
     * }
     */
    public static void gtk_text_view_set_indent(MemorySegment text_view, int indent) {
        var mh$ = gtk_text_view_set_indent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_indent", text_view, indent);
            }
            mh$.invokeExact(text_view, indent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_indent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_indent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_indent(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_indent$descriptor() {
        return gtk_text_view_get_indent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_indent(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_indent$handle() {
        return gtk_text_view_get_indent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_view_get_indent(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_indent(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_indent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_indent", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_tabs(GtkTextView *text_view, PangoTabArray *tabs)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_tabs$descriptor() {
        return gtk_text_view_set_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_tabs(GtkTextView *text_view, PangoTabArray *tabs)
     * }
     */
    public static MethodHandle gtk_text_view_set_tabs$handle() {
        return gtk_text_view_set_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_tabs(GtkTextView *text_view, PangoTabArray *tabs)
     * }
     */
    public static void gtk_text_view_set_tabs(MemorySegment text_view, MemorySegment tabs) {
        var mh$ = gtk_text_view_set_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_tabs", text_view, tabs);
            }
            mh$.invokeExact(text_view, tabs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoTabArray *gtk_text_view_get_tabs(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_tabs$descriptor() {
        return gtk_text_view_get_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoTabArray *gtk_text_view_get_tabs(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_tabs$handle() {
        return gtk_text_view_get_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoTabArray *gtk_text_view_get_tabs(GtkTextView *text_view)
     * }
     */
    public static MemorySegment gtk_text_view_get_tabs(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_tabs", text_view);
            }
            return (MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_default_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_default_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_view_get_default_attributes(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_default_attributes$descriptor() {
        return gtk_text_view_get_default_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_view_get_default_attributes(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_default_attributes$handle() {
        return gtk_text_view_get_default_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_view_get_default_attributes(GtkTextView *text_view)
     * }
     */
    public static MemorySegment gtk_text_view_get_default_attributes(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_default_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_default_attributes", text_view);
            }
            return (MemorySegment)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_input_purpose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_input_purpose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_input_purpose(GtkTextView *text_view, GtkInputPurpose purpose)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_input_purpose$descriptor() {
        return gtk_text_view_set_input_purpose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_input_purpose(GtkTextView *text_view, GtkInputPurpose purpose)
     * }
     */
    public static MethodHandle gtk_text_view_set_input_purpose$handle() {
        return gtk_text_view_set_input_purpose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_input_purpose(GtkTextView *text_view, GtkInputPurpose purpose)
     * }
     */
    public static void gtk_text_view_set_input_purpose(MemorySegment text_view, int purpose) {
        var mh$ = gtk_text_view_set_input_purpose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_input_purpose", text_view, purpose);
            }
            mh$.invokeExact(text_view, purpose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_input_purpose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_input_purpose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkInputPurpose gtk_text_view_get_input_purpose(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_input_purpose$descriptor() {
        return gtk_text_view_get_input_purpose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkInputPurpose gtk_text_view_get_input_purpose(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_input_purpose$handle() {
        return gtk_text_view_get_input_purpose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkInputPurpose gtk_text_view_get_input_purpose(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_input_purpose(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_input_purpose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_input_purpose", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_input_hints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_input_hints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_input_hints(GtkTextView *text_view, GtkInputHints hints)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_input_hints$descriptor() {
        return gtk_text_view_set_input_hints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_input_hints(GtkTextView *text_view, GtkInputHints hints)
     * }
     */
    public static MethodHandle gtk_text_view_set_input_hints$handle() {
        return gtk_text_view_set_input_hints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_input_hints(GtkTextView *text_view, GtkInputHints hints)
     * }
     */
    public static void gtk_text_view_set_input_hints(MemorySegment text_view, int hints) {
        var mh$ = gtk_text_view_set_input_hints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_input_hints", text_view, hints);
            }
            mh$.invokeExact(text_view, hints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_input_hints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_input_hints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkInputHints gtk_text_view_get_input_hints(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_input_hints$descriptor() {
        return gtk_text_view_get_input_hints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkInputHints gtk_text_view_get_input_hints(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_input_hints$handle() {
        return gtk_text_view_get_input_hints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkInputHints gtk_text_view_get_input_hints(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_input_hints(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_input_hints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_input_hints", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_set_monospace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_set_monospace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_monospace(GtkTextView *text_view, gboolean monospace)
     * }
     */
    public static FunctionDescriptor gtk_text_view_set_monospace$descriptor() {
        return gtk_text_view_set_monospace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_view_set_monospace(GtkTextView *text_view, gboolean monospace)
     * }
     */
    public static MethodHandle gtk_text_view_set_monospace$handle() {
        return gtk_text_view_set_monospace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_view_set_monospace(GtkTextView *text_view, gboolean monospace)
     * }
     */
    public static void gtk_text_view_set_monospace(MemorySegment text_view, int monospace) {
        var mh$ = gtk_text_view_set_monospace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_set_monospace", text_view, monospace);
            }
            mh$.invokeExact(text_view, monospace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_get_monospace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_get_monospace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_monospace(GtkTextView *text_view)
     * }
     */
    public static FunctionDescriptor gtk_text_view_get_monospace$descriptor() {
        return gtk_text_view_get_monospace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_monospace(GtkTextView *text_view)
     * }
     */
    public static MethodHandle gtk_text_view_get_monospace$handle() {
        return gtk_text_view_get_monospace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_view_get_monospace(GtkTextView *text_view)
     * }
     */
    public static int gtk_text_view_get_monospace(MemorySegment text_view) {
        var mh$ = gtk_text_view_get_monospace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_get_monospace", text_view);
            }
            return (int)mh$.invokeExact(text_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TOOLBAR_SPACE_EMPTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOLBAR_SPACE_EMPTY = 0
     * }
     */
    public static int GTK_TOOLBAR_SPACE_EMPTY() {
        return GTK_TOOLBAR_SPACE_EMPTY;
    }
    private static final int GTK_TOOLBAR_SPACE_LINE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOLBAR_SPACE_LINE = 1
     * }
     */
    public static int GTK_TOOLBAR_SPACE_LINE() {
        return GTK_TOOLBAR_SPACE_LINE;
    }

    private static class gtk_toolbar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_toolbar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_type$descriptor() {
        return gtk_toolbar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_toolbar_get_type()
     * }
     */
    public static MethodHandle gtk_toolbar_get_type$handle() {
        return gtk_toolbar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_toolbar_get_type()
     * }
     */
    public static long gtk_toolbar_get_type() {
        var mh$ = gtk_toolbar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toolbar_new()
     * }
     */
    public static FunctionDescriptor gtk_toolbar_new$descriptor() {
        return gtk_toolbar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toolbar_new()
     * }
     */
    public static MethodHandle gtk_toolbar_new$handle() {
        return gtk_toolbar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toolbar_new()
     * }
     */
    public static MemorySegment gtk_toolbar_new() {
        var mh$ = gtk_toolbar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_insert(GtkToolbar *toolbar, GtkToolItem *item, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_insert$descriptor() {
        return gtk_toolbar_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_insert(GtkToolbar *toolbar, GtkToolItem *item, gint pos)
     * }
     */
    public static MethodHandle gtk_toolbar_insert$handle() {
        return gtk_toolbar_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toolbar_insert(GtkToolbar *toolbar, GtkToolItem *item, gint pos)
     * }
     */
    public static void gtk_toolbar_insert(MemorySegment toolbar, MemorySegment item, int pos) {
        var mh$ = gtk_toolbar_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_insert", toolbar, item, pos);
            }
            mh$.invokeExact(toolbar, item, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_item_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_item_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_item_index(GtkToolbar *toolbar, GtkToolItem *item)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_item_index$descriptor() {
        return gtk_toolbar_get_item_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_item_index(GtkToolbar *toolbar, GtkToolItem *item)
     * }
     */
    public static MethodHandle gtk_toolbar_get_item_index$handle() {
        return gtk_toolbar_get_item_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_item_index(GtkToolbar *toolbar, GtkToolItem *item)
     * }
     */
    public static int gtk_toolbar_get_item_index(MemorySegment toolbar, MemorySegment item) {
        var mh$ = gtk_toolbar_get_item_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_item_index", toolbar, item);
            }
            return (int)mh$.invokeExact(toolbar, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_n_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_n_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_n_items(GtkToolbar *toolbar)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_n_items$descriptor() {
        return gtk_toolbar_get_n_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_n_items(GtkToolbar *toolbar)
     * }
     */
    public static MethodHandle gtk_toolbar_get_n_items$handle() {
        return gtk_toolbar_get_n_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_n_items(GtkToolbar *toolbar)
     * }
     */
    public static int gtk_toolbar_get_n_items(MemorySegment toolbar) {
        var mh$ = gtk_toolbar_get_n_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_n_items", toolbar);
            }
            return (int)mh$.invokeExact(toolbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_nth_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_nth_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toolbar_get_nth_item(GtkToolbar *toolbar, gint n)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_nth_item$descriptor() {
        return gtk_toolbar_get_nth_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toolbar_get_nth_item(GtkToolbar *toolbar, gint n)
     * }
     */
    public static MethodHandle gtk_toolbar_get_nth_item$handle() {
        return gtk_toolbar_get_nth_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_toolbar_get_nth_item(GtkToolbar *toolbar, gint n)
     * }
     */
    public static MemorySegment gtk_toolbar_get_nth_item(MemorySegment toolbar, int n) {
        var mh$ = gtk_toolbar_get_nth_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_nth_item", toolbar, n);
            }
            return (MemorySegment)mh$.invokeExact(toolbar, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_show_arrow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_show_arrow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_toolbar_get_show_arrow(GtkToolbar *toolbar)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_show_arrow$descriptor() {
        return gtk_toolbar_get_show_arrow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_toolbar_get_show_arrow(GtkToolbar *toolbar)
     * }
     */
    public static MethodHandle gtk_toolbar_get_show_arrow$handle() {
        return gtk_toolbar_get_show_arrow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_toolbar_get_show_arrow(GtkToolbar *toolbar)
     * }
     */
    public static int gtk_toolbar_get_show_arrow(MemorySegment toolbar) {
        var mh$ = gtk_toolbar_get_show_arrow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_show_arrow", toolbar);
            }
            return (int)mh$.invokeExact(toolbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_set_show_arrow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_set_show_arrow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_show_arrow(GtkToolbar *toolbar, gboolean show_arrow)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_set_show_arrow$descriptor() {
        return gtk_toolbar_set_show_arrow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_show_arrow(GtkToolbar *toolbar, gboolean show_arrow)
     * }
     */
    public static MethodHandle gtk_toolbar_set_show_arrow$handle() {
        return gtk_toolbar_set_show_arrow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_show_arrow(GtkToolbar *toolbar, gboolean show_arrow)
     * }
     */
    public static void gtk_toolbar_set_show_arrow(MemorySegment toolbar, int show_arrow) {
        var mh$ = gtk_toolbar_set_show_arrow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_set_show_arrow", toolbar, show_arrow);
            }
            mh$.invokeExact(toolbar, show_arrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_toolbar_get_style(GtkToolbar *toolbar)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_style$descriptor() {
        return gtk_toolbar_get_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_toolbar_get_style(GtkToolbar *toolbar)
     * }
     */
    public static MethodHandle gtk_toolbar_get_style$handle() {
        return gtk_toolbar_get_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_toolbar_get_style(GtkToolbar *toolbar)
     * }
     */
    public static int gtk_toolbar_get_style(MemorySegment toolbar) {
        var mh$ = gtk_toolbar_get_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_style", toolbar);
            }
            return (int)mh$.invokeExact(toolbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_set_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_set_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_style(GtkToolbar *toolbar, GtkToolbarStyle style)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_set_style$descriptor() {
        return gtk_toolbar_set_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_style(GtkToolbar *toolbar, GtkToolbarStyle style)
     * }
     */
    public static MethodHandle gtk_toolbar_set_style$handle() {
        return gtk_toolbar_set_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_style(GtkToolbar *toolbar, GtkToolbarStyle style)
     * }
     */
    public static void gtk_toolbar_set_style(MemorySegment toolbar, int style) {
        var mh$ = gtk_toolbar_set_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_set_style", toolbar, style);
            }
            mh$.invokeExact(toolbar, style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_unset_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_unset_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_unset_style(GtkToolbar *toolbar)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_unset_style$descriptor() {
        return gtk_toolbar_unset_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_unset_style(GtkToolbar *toolbar)
     * }
     */
    public static MethodHandle gtk_toolbar_unset_style$handle() {
        return gtk_toolbar_unset_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toolbar_unset_style(GtkToolbar *toolbar)
     * }
     */
    public static void gtk_toolbar_unset_style(MemorySegment toolbar) {
        var mh$ = gtk_toolbar_unset_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_unset_style", toolbar);
            }
            mh$.invokeExact(toolbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_toolbar_get_icon_size(GtkToolbar *toolbar)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_icon_size$descriptor() {
        return gtk_toolbar_get_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_toolbar_get_icon_size(GtkToolbar *toolbar)
     * }
     */
    public static MethodHandle gtk_toolbar_get_icon_size$handle() {
        return gtk_toolbar_get_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSize gtk_toolbar_get_icon_size(GtkToolbar *toolbar)
     * }
     */
    public static int gtk_toolbar_get_icon_size(MemorySegment toolbar) {
        var mh$ = gtk_toolbar_get_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_icon_size", toolbar);
            }
            return (int)mh$.invokeExact(toolbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_set_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_set_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_icon_size(GtkToolbar *toolbar, GtkIconSize icon_size)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_set_icon_size$descriptor() {
        return gtk_toolbar_set_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_icon_size(GtkToolbar *toolbar, GtkIconSize icon_size)
     * }
     */
    public static MethodHandle gtk_toolbar_set_icon_size$handle() {
        return gtk_toolbar_set_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_icon_size(GtkToolbar *toolbar, GtkIconSize icon_size)
     * }
     */
    public static void gtk_toolbar_set_icon_size(MemorySegment toolbar, int icon_size) {
        var mh$ = gtk_toolbar_set_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_set_icon_size", toolbar, icon_size);
            }
            mh$.invokeExact(toolbar, icon_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_unset_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_unset_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_unset_icon_size(GtkToolbar *toolbar)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_unset_icon_size$descriptor() {
        return gtk_toolbar_unset_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_unset_icon_size(GtkToolbar *toolbar)
     * }
     */
    public static MethodHandle gtk_toolbar_unset_icon_size$handle() {
        return gtk_toolbar_unset_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toolbar_unset_icon_size(GtkToolbar *toolbar)
     * }
     */
    public static void gtk_toolbar_unset_icon_size(MemorySegment toolbar) {
        var mh$ = gtk_toolbar_unset_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_unset_icon_size", toolbar);
            }
            mh$.invokeExact(toolbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_relief_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_relief_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_toolbar_get_relief_style(GtkToolbar *toolbar)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_relief_style$descriptor() {
        return gtk_toolbar_get_relief_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_toolbar_get_relief_style(GtkToolbar *toolbar)
     * }
     */
    public static MethodHandle gtk_toolbar_get_relief_style$handle() {
        return gtk_toolbar_get_relief_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_toolbar_get_relief_style(GtkToolbar *toolbar)
     * }
     */
    public static int gtk_toolbar_get_relief_style(MemorySegment toolbar) {
        var mh$ = gtk_toolbar_get_relief_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_relief_style", toolbar);
            }
            return (int)mh$.invokeExact(toolbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_get_drop_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_get_drop_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_drop_index(GtkToolbar *toolbar, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_get_drop_index$descriptor() {
        return gtk_toolbar_get_drop_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_drop_index(GtkToolbar *toolbar, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_toolbar_get_drop_index$handle() {
        return gtk_toolbar_get_drop_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_toolbar_get_drop_index(GtkToolbar *toolbar, gint x, gint y)
     * }
     */
    public static int gtk_toolbar_get_drop_index(MemorySegment toolbar, int x, int y) {
        var mh$ = gtk_toolbar_get_drop_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_get_drop_index", toolbar, x, y);
            }
            return (int)mh$.invokeExact(toolbar, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_set_drop_highlight_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_set_drop_highlight_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_drop_highlight_item(GtkToolbar *toolbar, GtkToolItem *tool_item, gint index_)
     * }
     */
    public static FunctionDescriptor gtk_toolbar_set_drop_highlight_item$descriptor() {
        return gtk_toolbar_set_drop_highlight_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_drop_highlight_item(GtkToolbar *toolbar, GtkToolItem *tool_item, gint index_)
     * }
     */
    public static MethodHandle gtk_toolbar_set_drop_highlight_item$handle() {
        return gtk_toolbar_set_drop_highlight_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toolbar_set_drop_highlight_item(GtkToolbar *toolbar, GtkToolItem *tool_item, gint index_)
     * }
     */
    public static void gtk_toolbar_set_drop_highlight_item(MemorySegment toolbar, MemorySegment tool_item, int index_) {
        var mh$ = gtk_toolbar_set_drop_highlight_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_set_drop_highlight_item", toolbar, tool_item, index_);
            }
            mh$.invokeExact(toolbar, tool_item, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tool_item_group_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_type$descriptor() {
        return gtk_tool_item_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tool_item_group_get_type()
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_type$handle() {
        return gtk_tool_item_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tool_item_group_get_type()
     * }
     */
    public static long gtk_tool_item_group_get_type() {
        var mh$ = gtk_tool_item_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_group_new(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_new$descriptor() {
        return gtk_tool_item_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_group_new(const gchar *label)
     * }
     */
    public static MethodHandle gtk_tool_item_group_new$handle() {
        return gtk_tool_item_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_group_new(const gchar *label)
     * }
     */
    public static MemorySegment gtk_tool_item_group_new(MemorySegment label) {
        var mh$ = gtk_tool_item_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_new", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_label(GtkToolItemGroup *group, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_set_label$descriptor() {
        return gtk_tool_item_group_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_label(GtkToolItemGroup *group, const gchar *label)
     * }
     */
    public static MethodHandle gtk_tool_item_group_set_label$handle() {
        return gtk_tool_item_group_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_label(GtkToolItemGroup *group, const gchar *label)
     * }
     */
    public static void gtk_tool_item_group_set_label(MemorySegment group, MemorySegment label) {
        var mh$ = gtk_tool_item_group_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_set_label", group, label);
            }
            mh$.invokeExact(group, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_set_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_set_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_label_widget(GtkToolItemGroup *group, GtkWidget *label_widget)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_set_label_widget$descriptor() {
        return gtk_tool_item_group_set_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_label_widget(GtkToolItemGroup *group, GtkWidget *label_widget)
     * }
     */
    public static MethodHandle gtk_tool_item_group_set_label_widget$handle() {
        return gtk_tool_item_group_set_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_label_widget(GtkToolItemGroup *group, GtkWidget *label_widget)
     * }
     */
    public static void gtk_tool_item_group_set_label_widget(MemorySegment group, MemorySegment label_widget) {
        var mh$ = gtk_tool_item_group_set_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_set_label_widget", group, label_widget);
            }
            mh$.invokeExact(group, label_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_set_collapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_set_collapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_collapsed(GtkToolItemGroup *group, gboolean collapsed)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_set_collapsed$descriptor() {
        return gtk_tool_item_group_set_collapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_collapsed(GtkToolItemGroup *group, gboolean collapsed)
     * }
     */
    public static MethodHandle gtk_tool_item_group_set_collapsed$handle() {
        return gtk_tool_item_group_set_collapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_collapsed(GtkToolItemGroup *group, gboolean collapsed)
     * }
     */
    public static void gtk_tool_item_group_set_collapsed(MemorySegment group, int collapsed) {
        var mh$ = gtk_tool_item_group_set_collapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_set_collapsed", group, collapsed);
            }
            mh$.invokeExact(group, collapsed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_set_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_set_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_ellipsize(GtkToolItemGroup *group, PangoEllipsizeMode ellipsize)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_set_ellipsize$descriptor() {
        return gtk_tool_item_group_set_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_ellipsize(GtkToolItemGroup *group, PangoEllipsizeMode ellipsize)
     * }
     */
    public static MethodHandle gtk_tool_item_group_set_ellipsize$handle() {
        return gtk_tool_item_group_set_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_ellipsize(GtkToolItemGroup *group, PangoEllipsizeMode ellipsize)
     * }
     */
    public static void gtk_tool_item_group_set_ellipsize(MemorySegment group, int ellipsize) {
        var mh$ = gtk_tool_item_group_set_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_set_ellipsize", group, ellipsize);
            }
            mh$.invokeExact(group, ellipsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_set_header_relief {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_set_header_relief"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_header_relief(GtkToolItemGroup *group, GtkReliefStyle style)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_set_header_relief$descriptor() {
        return gtk_tool_item_group_set_header_relief.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_header_relief(GtkToolItemGroup *group, GtkReliefStyle style)
     * }
     */
    public static MethodHandle gtk_tool_item_group_set_header_relief$handle() {
        return gtk_tool_item_group_set_header_relief.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_header_relief(GtkToolItemGroup *group, GtkReliefStyle style)
     * }
     */
    public static void gtk_tool_item_group_set_header_relief(MemorySegment group, int style) {
        var mh$ = gtk_tool_item_group_set_header_relief.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_set_header_relief", group, style);
            }
            mh$.invokeExact(group, style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_item_group_get_label(GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_label$descriptor() {
        return gtk_tool_item_group_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_item_group_get_label(GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_label$handle() {
        return gtk_tool_item_group_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_item_group_get_label(GtkToolItemGroup *group)
     * }
     */
    public static MemorySegment gtk_tool_item_group_get_label(MemorySegment group) {
        var mh$ = gtk_tool_item_group_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_label", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_group_get_label_widget(GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_label_widget$descriptor() {
        return gtk_tool_item_group_get_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_group_get_label_widget(GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_label_widget$handle() {
        return gtk_tool_item_group_get_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_group_get_label_widget(GtkToolItemGroup *group)
     * }
     */
    public static MemorySegment gtk_tool_item_group_get_label_widget(MemorySegment group) {
        var mh$ = gtk_tool_item_group_get_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_label_widget", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_collapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_collapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_group_get_collapsed(GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_collapsed$descriptor() {
        return gtk_tool_item_group_get_collapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_group_get_collapsed(GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_collapsed$handle() {
        return gtk_tool_item_group_get_collapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_group_get_collapsed(GtkToolItemGroup *group)
     * }
     */
    public static int gtk_tool_item_group_get_collapsed(MemorySegment group) {
        var mh$ = gtk_tool_item_group_get_collapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_collapsed", group);
            }
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_item_group_get_ellipsize(GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_ellipsize$descriptor() {
        return gtk_tool_item_group_get_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_item_group_get_ellipsize(GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_ellipsize$handle() {
        return gtk_tool_item_group_get_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_item_group_get_ellipsize(GtkToolItemGroup *group)
     * }
     */
    public static int gtk_tool_item_group_get_ellipsize(MemorySegment group) {
        var mh$ = gtk_tool_item_group_get_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_ellipsize", group);
            }
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_header_relief {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_header_relief"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_item_group_get_header_relief(GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_header_relief$descriptor() {
        return gtk_tool_item_group_get_header_relief.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_item_group_get_header_relief(GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_header_relief$handle() {
        return gtk_tool_item_group_get_header_relief.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_item_group_get_header_relief(GtkToolItemGroup *group)
     * }
     */
    public static int gtk_tool_item_group_get_header_relief(MemorySegment group) {
        var mh$ = gtk_tool_item_group_get_header_relief.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_header_relief", group);
            }
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_insert(GtkToolItemGroup *group, GtkToolItem *item, gint position)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_insert$descriptor() {
        return gtk_tool_item_group_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_insert(GtkToolItemGroup *group, GtkToolItem *item, gint position)
     * }
     */
    public static MethodHandle gtk_tool_item_group_insert$handle() {
        return gtk_tool_item_group_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_insert(GtkToolItemGroup *group, GtkToolItem *item, gint position)
     * }
     */
    public static void gtk_tool_item_group_insert(MemorySegment group, MemorySegment item, int position) {
        var mh$ = gtk_tool_item_group_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_insert", group, item, position);
            }
            mh$.invokeExact(group, item, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_set_item_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_set_item_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_item_position(GtkToolItemGroup *group, GtkToolItem *item, gint position)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_set_item_position$descriptor() {
        return gtk_tool_item_group_set_item_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_item_position(GtkToolItemGroup *group, GtkToolItem *item, gint position)
     * }
     */
    public static MethodHandle gtk_tool_item_group_set_item_position$handle() {
        return gtk_tool_item_group_set_item_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_group_set_item_position(GtkToolItemGroup *group, GtkToolItem *item, gint position)
     * }
     */
    public static void gtk_tool_item_group_set_item_position(MemorySegment group, MemorySegment item, int position) {
        var mh$ = gtk_tool_item_group_set_item_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_set_item_position", group, item, position);
            }
            mh$.invokeExact(group, item, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_item_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_item_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tool_item_group_get_item_position(GtkToolItemGroup *group, GtkToolItem *item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_item_position$descriptor() {
        return gtk_tool_item_group_get_item_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tool_item_group_get_item_position(GtkToolItemGroup *group, GtkToolItem *item)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_item_position$handle() {
        return gtk_tool_item_group_get_item_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tool_item_group_get_item_position(GtkToolItemGroup *group, GtkToolItem *item)
     * }
     */
    public static int gtk_tool_item_group_get_item_position(MemorySegment group, MemorySegment item) {
        var mh$ = gtk_tool_item_group_get_item_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_item_position", group, item);
            }
            return (int)mh$.invokeExact(group, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_n_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_n_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_tool_item_group_get_n_items(GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_n_items$descriptor() {
        return gtk_tool_item_group_get_n_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_tool_item_group_get_n_items(GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_n_items$handle() {
        return gtk_tool_item_group_get_n_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_tool_item_group_get_n_items(GtkToolItemGroup *group)
     * }
     */
    public static int gtk_tool_item_group_get_n_items(MemorySegment group) {
        var mh$ = gtk_tool_item_group_get_n_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_n_items", group);
            }
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_nth_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_nth_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_group_get_nth_item(GtkToolItemGroup *group, guint index)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_nth_item$descriptor() {
        return gtk_tool_item_group_get_nth_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_group_get_nth_item(GtkToolItemGroup *group, guint index)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_nth_item$handle() {
        return gtk_tool_item_group_get_nth_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_group_get_nth_item(GtkToolItemGroup *group, guint index)
     * }
     */
    public static MemorySegment gtk_tool_item_group_get_nth_item(MemorySegment group, int index) {
        var mh$ = gtk_tool_item_group_get_nth_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_nth_item", group, index);
            }
            return (MemorySegment)mh$.invokeExact(group, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_group_get_drop_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_group_get_drop_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_group_get_drop_item(GtkToolItemGroup *group, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_group_get_drop_item$descriptor() {
        return gtk_tool_item_group_get_drop_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_group_get_drop_item(GtkToolItemGroup *group, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_tool_item_group_get_drop_item$handle() {
        return gtk_tool_item_group_get_drop_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_group_get_drop_item(GtkToolItemGroup *group, gint x, gint y)
     * }
     */
    public static MemorySegment gtk_tool_item_group_get_drop_item(MemorySegment group, int x, int y) {
        var mh$ = gtk_tool_item_group_get_drop_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_group_get_drop_item", group, x, y);
            }
            return (MemorySegment)mh$.invokeExact(group, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TOOL_PALETTE_DRAG_ITEMS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOL_PALETTE_DRAG_ITEMS = 1
     * }
     */
    public static int GTK_TOOL_PALETTE_DRAG_ITEMS() {
        return GTK_TOOL_PALETTE_DRAG_ITEMS;
    }
    private static final int GTK_TOOL_PALETTE_DRAG_GROUPS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOL_PALETTE_DRAG_GROUPS = 2
     * }
     */
    public static int GTK_TOOL_PALETTE_DRAG_GROUPS() {
        return GTK_TOOL_PALETTE_DRAG_GROUPS;
    }

    private static class gtk_tool_palette_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tool_palette_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_type$descriptor() {
        return gtk_tool_palette_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tool_palette_get_type()
     * }
     */
    public static MethodHandle gtk_tool_palette_get_type$handle() {
        return gtk_tool_palette_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tool_palette_get_type()
     * }
     */
    public static long gtk_tool_palette_get_type() {
        var mh$ = gtk_tool_palette_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_palette_new()
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_new$descriptor() {
        return gtk_tool_palette_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_palette_new()
     * }
     */
    public static MethodHandle gtk_tool_palette_new$handle() {
        return gtk_tool_palette_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_palette_new()
     * }
     */
    public static MemorySegment gtk_tool_palette_new() {
        var mh$ = gtk_tool_palette_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_set_group_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_set_group_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_group_position(GtkToolPalette *palette, GtkToolItemGroup *group, gint position)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_set_group_position$descriptor() {
        return gtk_tool_palette_set_group_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_group_position(GtkToolPalette *palette, GtkToolItemGroup *group, gint position)
     * }
     */
    public static MethodHandle gtk_tool_palette_set_group_position$handle() {
        return gtk_tool_palette_set_group_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_group_position(GtkToolPalette *palette, GtkToolItemGroup *group, gint position)
     * }
     */
    public static void gtk_tool_palette_set_group_position(MemorySegment palette, MemorySegment group, int position) {
        var mh$ = gtk_tool_palette_set_group_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_set_group_position", palette, group, position);
            }
            mh$.invokeExact(palette, group, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_set_exclusive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_set_exclusive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_exclusive(GtkToolPalette *palette, GtkToolItemGroup *group, gboolean exclusive)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_set_exclusive$descriptor() {
        return gtk_tool_palette_set_exclusive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_exclusive(GtkToolPalette *palette, GtkToolItemGroup *group, gboolean exclusive)
     * }
     */
    public static MethodHandle gtk_tool_palette_set_exclusive$handle() {
        return gtk_tool_palette_set_exclusive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_exclusive(GtkToolPalette *palette, GtkToolItemGroup *group, gboolean exclusive)
     * }
     */
    public static void gtk_tool_palette_set_exclusive(MemorySegment palette, MemorySegment group, int exclusive) {
        var mh$ = gtk_tool_palette_set_exclusive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_set_exclusive", palette, group, exclusive);
            }
            mh$.invokeExact(palette, group, exclusive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_set_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_set_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_expand(GtkToolPalette *palette, GtkToolItemGroup *group, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_set_expand$descriptor() {
        return gtk_tool_palette_set_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_expand(GtkToolPalette *palette, GtkToolItemGroup *group, gboolean expand)
     * }
     */
    public static MethodHandle gtk_tool_palette_set_expand$handle() {
        return gtk_tool_palette_set_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_expand(GtkToolPalette *palette, GtkToolItemGroup *group, gboolean expand)
     * }
     */
    public static void gtk_tool_palette_set_expand(MemorySegment palette, MemorySegment group, int expand) {
        var mh$ = gtk_tool_palette_set_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_set_expand", palette, group, expand);
            }
            mh$.invokeExact(palette, group, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_group_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_group_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tool_palette_get_group_position(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_group_position$descriptor() {
        return gtk_tool_palette_get_group_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tool_palette_get_group_position(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_group_position$handle() {
        return gtk_tool_palette_get_group_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tool_palette_get_group_position(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static int gtk_tool_palette_get_group_position(MemorySegment palette, MemorySegment group) {
        var mh$ = gtk_tool_palette_get_group_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_group_position", palette, group);
            }
            return (int)mh$.invokeExact(palette, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_exclusive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_exclusive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_palette_get_exclusive(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_exclusive$descriptor() {
        return gtk_tool_palette_get_exclusive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_palette_get_exclusive(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_exclusive$handle() {
        return gtk_tool_palette_get_exclusive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_palette_get_exclusive(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static int gtk_tool_palette_get_exclusive(MemorySegment palette, MemorySegment group) {
        var mh$ = gtk_tool_palette_get_exclusive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_exclusive", palette, group);
            }
            return (int)mh$.invokeExact(palette, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_palette_get_expand(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_expand$descriptor() {
        return gtk_tool_palette_get_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_palette_get_expand(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_expand$handle() {
        return gtk_tool_palette_get_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_palette_get_expand(GtkToolPalette *palette, GtkToolItemGroup *group)
     * }
     */
    public static int gtk_tool_palette_get_expand(MemorySegment palette, MemorySegment group) {
        var mh$ = gtk_tool_palette_get_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_expand", palette, group);
            }
            return (int)mh$.invokeExact(palette, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_set_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_set_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_icon_size(GtkToolPalette *palette, GtkIconSize icon_size)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_set_icon_size$descriptor() {
        return gtk_tool_palette_set_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_icon_size(GtkToolPalette *palette, GtkIconSize icon_size)
     * }
     */
    public static MethodHandle gtk_tool_palette_set_icon_size$handle() {
        return gtk_tool_palette_set_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_icon_size(GtkToolPalette *palette, GtkIconSize icon_size)
     * }
     */
    public static void gtk_tool_palette_set_icon_size(MemorySegment palette, int icon_size) {
        var mh$ = gtk_tool_palette_set_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_set_icon_size", palette, icon_size);
            }
            mh$.invokeExact(palette, icon_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_unset_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_unset_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_unset_icon_size(GtkToolPalette *palette)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_unset_icon_size$descriptor() {
        return gtk_tool_palette_unset_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_unset_icon_size(GtkToolPalette *palette)
     * }
     */
    public static MethodHandle gtk_tool_palette_unset_icon_size$handle() {
        return gtk_tool_palette_unset_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_unset_icon_size(GtkToolPalette *palette)
     * }
     */
    public static void gtk_tool_palette_unset_icon_size(MemorySegment palette) {
        var mh$ = gtk_tool_palette_unset_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_unset_icon_size", palette);
            }
            mh$.invokeExact(palette);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_set_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_set_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_style(GtkToolPalette *palette, GtkToolbarStyle style)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_set_style$descriptor() {
        return gtk_tool_palette_set_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_style(GtkToolPalette *palette, GtkToolbarStyle style)
     * }
     */
    public static MethodHandle gtk_tool_palette_set_style$handle() {
        return gtk_tool_palette_set_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_style(GtkToolPalette *palette, GtkToolbarStyle style)
     * }
     */
    public static void gtk_tool_palette_set_style(MemorySegment palette, int style) {
        var mh$ = gtk_tool_palette_set_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_set_style", palette, style);
            }
            mh$.invokeExact(palette, style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_unset_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_unset_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_unset_style(GtkToolPalette *palette)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_unset_style$descriptor() {
        return gtk_tool_palette_unset_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_unset_style(GtkToolPalette *palette)
     * }
     */
    public static MethodHandle gtk_tool_palette_unset_style$handle() {
        return gtk_tool_palette_unset_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_unset_style(GtkToolPalette *palette)
     * }
     */
    public static void gtk_tool_palette_unset_style(MemorySegment palette) {
        var mh$ = gtk_tool_palette_unset_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_unset_style", palette);
            }
            mh$.invokeExact(palette);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_palette_get_icon_size(GtkToolPalette *palette)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_icon_size$descriptor() {
        return gtk_tool_palette_get_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_palette_get_icon_size(GtkToolPalette *palette)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_icon_size$handle() {
        return gtk_tool_palette_get_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_palette_get_icon_size(GtkToolPalette *palette)
     * }
     */
    public static int gtk_tool_palette_get_icon_size(MemorySegment palette) {
        var mh$ = gtk_tool_palette_get_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_icon_size", palette);
            }
            return (int)mh$.invokeExact(palette);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_palette_get_style(GtkToolPalette *palette)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_style$descriptor() {
        return gtk_tool_palette_get_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_palette_get_style(GtkToolPalette *palette)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_style$handle() {
        return gtk_tool_palette_get_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_palette_get_style(GtkToolPalette *palette)
     * }
     */
    public static int gtk_tool_palette_get_style(MemorySegment palette) {
        var mh$ = gtk_tool_palette_get_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_style", palette);
            }
            return (int)mh$.invokeExact(palette);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_drop_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_drop_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_palette_get_drop_item(GtkToolPalette *palette, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_drop_item$descriptor() {
        return gtk_tool_palette_get_drop_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_palette_get_drop_item(GtkToolPalette *palette, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_drop_item$handle() {
        return gtk_tool_palette_get_drop_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_palette_get_drop_item(GtkToolPalette *palette, gint x, gint y)
     * }
     */
    public static MemorySegment gtk_tool_palette_get_drop_item(MemorySegment palette, int x, int y) {
        var mh$ = gtk_tool_palette_get_drop_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_drop_item", palette, x, y);
            }
            return (MemorySegment)mh$.invokeExact(palette, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_drop_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_drop_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItemGroup *gtk_tool_palette_get_drop_group(GtkToolPalette *palette, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_drop_group$descriptor() {
        return gtk_tool_palette_get_drop_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItemGroup *gtk_tool_palette_get_drop_group(GtkToolPalette *palette, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_drop_group$handle() {
        return gtk_tool_palette_get_drop_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItemGroup *gtk_tool_palette_get_drop_group(GtkToolPalette *palette, gint x, gint y)
     * }
     */
    public static MemorySegment gtk_tool_palette_get_drop_group(MemorySegment palette, int x, int y) {
        var mh$ = gtk_tool_palette_get_drop_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_drop_group", palette, x, y);
            }
            return (MemorySegment)mh$.invokeExact(palette, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_drag_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_drag_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_palette_get_drag_item(GtkToolPalette *palette, const GtkSelectionData *selection)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_drag_item$descriptor() {
        return gtk_tool_palette_get_drag_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_palette_get_drag_item(GtkToolPalette *palette, const GtkSelectionData *selection)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_drag_item$handle() {
        return gtk_tool_palette_get_drag_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_palette_get_drag_item(GtkToolPalette *palette, const GtkSelectionData *selection)
     * }
     */
    public static MemorySegment gtk_tool_palette_get_drag_item(MemorySegment palette, MemorySegment selection) {
        var mh$ = gtk_tool_palette_get_drag_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_drag_item", palette, selection);
            }
            return (MemorySegment)mh$.invokeExact(palette, selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_set_drag_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_set_drag_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_drag_source(GtkToolPalette *palette, GtkToolPaletteDragTargets targets)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_set_drag_source$descriptor() {
        return gtk_tool_palette_set_drag_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_drag_source(GtkToolPalette *palette, GtkToolPaletteDragTargets targets)
     * }
     */
    public static MethodHandle gtk_tool_palette_set_drag_source$handle() {
        return gtk_tool_palette_set_drag_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_set_drag_source(GtkToolPalette *palette, GtkToolPaletteDragTargets targets)
     * }
     */
    public static void gtk_tool_palette_set_drag_source(MemorySegment palette, int targets) {
        var mh$ = gtk_tool_palette_set_drag_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_set_drag_source", palette, targets);
            }
            mh$.invokeExact(palette, targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_add_drag_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_add_drag_dest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_add_drag_dest(GtkToolPalette *palette, GtkWidget *widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_add_drag_dest$descriptor() {
        return gtk_tool_palette_add_drag_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_palette_add_drag_dest(GtkToolPalette *palette, GtkWidget *widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_tool_palette_add_drag_dest$handle() {
        return gtk_tool_palette_add_drag_dest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_palette_add_drag_dest(GtkToolPalette *palette, GtkWidget *widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions)
     * }
     */
    public static void gtk_tool_palette_add_drag_dest(MemorySegment palette, MemorySegment widget, int flags, int targets, int actions) {
        var mh$ = gtk_tool_palette_add_drag_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_add_drag_dest", palette, widget, flags, targets, actions);
            }
            mh$.invokeExact(palette, widget, flags, targets, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tool_palette_get_hadjustment(GtkToolPalette *palette)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_hadjustment$descriptor() {
        return gtk_tool_palette_get_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tool_palette_get_hadjustment(GtkToolPalette *palette)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_hadjustment$handle() {
        return gtk_tool_palette_get_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tool_palette_get_hadjustment(GtkToolPalette *palette)
     * }
     */
    public static MemorySegment gtk_tool_palette_get_hadjustment(MemorySegment palette) {
        var mh$ = gtk_tool_palette_get_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_hadjustment", palette);
            }
            return (MemorySegment)mh$.invokeExact(palette);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tool_palette_get_vadjustment(GtkToolPalette *palette)
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_vadjustment$descriptor() {
        return gtk_tool_palette_get_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tool_palette_get_vadjustment(GtkToolPalette *palette)
     * }
     */
    public static MethodHandle gtk_tool_palette_get_vadjustment$handle() {
        return gtk_tool_palette_get_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tool_palette_get_vadjustment(GtkToolPalette *palette)
     * }
     */
    public static MemorySegment gtk_tool_palette_get_vadjustment(MemorySegment palette) {
        var mh$ = gtk_tool_palette_get_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_vadjustment", palette);
            }
            return (MemorySegment)mh$.invokeExact(palette);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_drag_target_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_drag_target_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GtkTargetEntry *gtk_tool_palette_get_drag_target_item()
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_drag_target_item$descriptor() {
        return gtk_tool_palette_get_drag_target_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GtkTargetEntry *gtk_tool_palette_get_drag_target_item()
     * }
     */
    public static MethodHandle gtk_tool_palette_get_drag_target_item$handle() {
        return gtk_tool_palette_get_drag_target_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GtkTargetEntry *gtk_tool_palette_get_drag_target_item()
     * }
     */
    public static MemorySegment gtk_tool_palette_get_drag_target_item() {
        var mh$ = gtk_tool_palette_get_drag_target_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_drag_target_item");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_get_drag_target_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_get_drag_target_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GtkTargetEntry *gtk_tool_palette_get_drag_target_group()
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_get_drag_target_group$descriptor() {
        return gtk_tool_palette_get_drag_target_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GtkTargetEntry *gtk_tool_palette_get_drag_target_group()
     * }
     */
    public static MethodHandle gtk_tool_palette_get_drag_target_group$handle() {
        return gtk_tool_palette_get_drag_target_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GtkTargetEntry *gtk_tool_palette_get_drag_target_group()
     * }
     */
    public static MemorySegment gtk_tool_palette_get_drag_target_group() {
        var mh$ = gtk_tool_palette_get_drag_target_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_get_drag_target_group");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tool_shell_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_type$descriptor() {
        return gtk_tool_shell_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tool_shell_get_type()
     * }
     */
    public static MethodHandle gtk_tool_shell_get_type$handle() {
        return gtk_tool_shell_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tool_shell_get_type()
     * }
     */
    public static long gtk_tool_shell_get_type() {
        var mh$ = gtk_tool_shell_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_shell_get_icon_size(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_icon_size$descriptor() {
        return gtk_tool_shell_get_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_shell_get_icon_size(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_icon_size$handle() {
        return gtk_tool_shell_get_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_shell_get_icon_size(GtkToolShell *shell)
     * }
     */
    public static int gtk_tool_shell_get_icon_size(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_icon_size", shell);
            }
            return (int)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_shell_get_orientation(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_orientation$descriptor() {
        return gtk_tool_shell_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_shell_get_orientation(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_orientation$handle() {
        return gtk_tool_shell_get_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_shell_get_orientation(GtkToolShell *shell)
     * }
     */
    public static int gtk_tool_shell_get_orientation(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_orientation", shell);
            }
            return (int)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_shell_get_style(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_style$descriptor() {
        return gtk_tool_shell_get_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_shell_get_style(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_style$handle() {
        return gtk_tool_shell_get_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_shell_get_style(GtkToolShell *shell)
     * }
     */
    public static int gtk_tool_shell_get_style(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_style", shell);
            }
            return (int)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_relief_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_relief_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_shell_get_relief_style(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_relief_style$descriptor() {
        return gtk_tool_shell_get_relief_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_shell_get_relief_style(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_relief_style$handle() {
        return gtk_tool_shell_get_relief_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_shell_get_relief_style(GtkToolShell *shell)
     * }
     */
    public static int gtk_tool_shell_get_relief_style(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_relief_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_relief_style", shell);
            }
            return (int)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_rebuild_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_rebuild_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_shell_rebuild_menu(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_rebuild_menu$descriptor() {
        return gtk_tool_shell_rebuild_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_shell_rebuild_menu(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_rebuild_menu$handle() {
        return gtk_tool_shell_rebuild_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_shell_rebuild_menu(GtkToolShell *shell)
     * }
     */
    public static void gtk_tool_shell_rebuild_menu(MemorySegment shell) {
        var mh$ = gtk_tool_shell_rebuild_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_rebuild_menu", shell);
            }
            mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_text_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_text_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_shell_get_text_orientation(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_text_orientation$descriptor() {
        return gtk_tool_shell_get_text_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_shell_get_text_orientation(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_text_orientation$handle() {
        return gtk_tool_shell_get_text_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_shell_get_text_orientation(GtkToolShell *shell)
     * }
     */
    public static int gtk_tool_shell_get_text_orientation(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_text_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_text_orientation", shell);
            }
            return (int)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_text_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_text_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat gtk_tool_shell_get_text_alignment(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_text_alignment$descriptor() {
        return gtk_tool_shell_get_text_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat gtk_tool_shell_get_text_alignment(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_text_alignment$handle() {
        return gtk_tool_shell_get_text_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gfloat gtk_tool_shell_get_text_alignment(GtkToolShell *shell)
     * }
     */
    public static float gtk_tool_shell_get_text_alignment(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_text_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_text_alignment", shell);
            }
            return (float)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_ellipsize_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_ellipsize_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_ellipsize_mode$descriptor() {
        return gtk_tool_shell_get_ellipsize_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_ellipsize_mode$handle() {
        return gtk_tool_shell_get_ellipsize_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode(GtkToolShell *shell)
     * }
     */
    public static int gtk_tool_shell_get_ellipsize_mode(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_ellipsize_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_ellipsize_mode", shell);
            }
            return (int)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_shell_get_text_size_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_shell_get_text_size_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_tool_shell_get_text_size_group(GtkToolShell *shell)
     * }
     */
    public static FunctionDescriptor gtk_tool_shell_get_text_size_group$descriptor() {
        return gtk_tool_shell_get_text_size_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_tool_shell_get_text_size_group(GtkToolShell *shell)
     * }
     */
    public static MethodHandle gtk_tool_shell_get_text_size_group$handle() {
        return gtk_tool_shell_get_text_size_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_tool_shell_get_text_size_group(GtkToolShell *shell)
     * }
     */
    public static MemorySegment gtk_tool_shell_get_text_size_group(MemorySegment shell) {
        var mh$ = gtk_tool_shell_get_text_size_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_shell_get_text_size_group", shell);
            }
            return (MemorySegment)mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_test_init(int *argcp, char ***argvp, ...)
     * }
     */
    public static class gtk_test_init {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_test_init");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_test_init(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_test_init(int *argcp, char ***argvp, ...)
         * }
         */
        public static gtk_test_init makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_test_init(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment argcp, MemorySegment argvp, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_test_init", argcp, argvp, x2);
                }
                spreader.invokeExact(argcp, argvp, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_test_register_all_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_register_all_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_test_register_all_types()
     * }
     */
    public static FunctionDescriptor gtk_test_register_all_types$descriptor() {
        return gtk_test_register_all_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_test_register_all_types()
     * }
     */
    public static MethodHandle gtk_test_register_all_types$handle() {
        return gtk_test_register_all_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_test_register_all_types()
     * }
     */
    public static void gtk_test_register_all_types() {
        var mh$ = gtk_test_register_all_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_register_all_types");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_list_all_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_list_all_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GType *gtk_test_list_all_types(guint *n_types)
     * }
     */
    public static FunctionDescriptor gtk_test_list_all_types$descriptor() {
        return gtk_test_list_all_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GType *gtk_test_list_all_types(guint *n_types)
     * }
     */
    public static MethodHandle gtk_test_list_all_types$handle() {
        return gtk_test_list_all_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GType *gtk_test_list_all_types(guint *n_types)
     * }
     */
    public static MemorySegment gtk_test_list_all_types(MemorySegment n_types) {
        var mh$ = gtk_test_list_all_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_list_all_types", n_types);
            }
            return (MemorySegment)mh$.invokeExact(n_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_find_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_find_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_widget(GtkWidget *widget, const gchar *label_pattern, GType widget_type)
     * }
     */
    public static FunctionDescriptor gtk_test_find_widget$descriptor() {
        return gtk_test_find_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_widget(GtkWidget *widget, const gchar *label_pattern, GType widget_type)
     * }
     */
    public static MethodHandle gtk_test_find_widget$handle() {
        return gtk_test_find_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_widget(GtkWidget *widget, const gchar *label_pattern, GType widget_type)
     * }
     */
    public static MemorySegment gtk_test_find_widget(MemorySegment widget, MemorySegment label_pattern, long widget_type) {
        var mh$ = gtk_test_find_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_find_widget", widget, label_pattern, widget_type);
            }
            return (MemorySegment)mh$.invokeExact(widget, label_pattern, widget_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_create_widget(GType widget_type, const gchar *first_property_name, ...)
     * }
     */
    public static class gtk_test_create_widget {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_test_create_widget");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_test_create_widget(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_test_create_widget(GType widget_type, const gchar *first_property_name, ...)
         * }
         */
        public static gtk_test_create_widget makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_test_create_widget(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(long widget_type, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_test_create_widget", widget_type, first_property_name, x2);
                }
                return (MemorySegment)spreader.invokeExact(widget_type, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_test_create_simple_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_create_simple_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_create_simple_window(const gchar *window_title, const gchar *dialog_text)
     * }
     */
    public static FunctionDescriptor gtk_test_create_simple_window$descriptor() {
        return gtk_test_create_simple_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_create_simple_window(const gchar *window_title, const gchar *dialog_text)
     * }
     */
    public static MethodHandle gtk_test_create_simple_window$handle() {
        return gtk_test_create_simple_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_create_simple_window(const gchar *window_title, const gchar *dialog_text)
     * }
     */
    public static MemorySegment gtk_test_create_simple_window(MemorySegment window_title, MemorySegment dialog_text) {
        var mh$ = gtk_test_create_simple_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_create_simple_window", window_title, dialog_text);
            }
            return (MemorySegment)mh$.invokeExact(window_title, dialog_text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_display_button_window(const gchar *window_title, const gchar *dialog_text, ...)
     * }
     */
    public static class gtk_test_display_button_window {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_test_display_button_window");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_test_display_button_window(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_test_display_button_window(const gchar *window_title, const gchar *dialog_text, ...)
         * }
         */
        public static gtk_test_display_button_window makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_test_display_button_window(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment window_title, MemorySegment dialog_text, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_test_display_button_window", window_title, dialog_text, x2);
                }
                return (MemorySegment)spreader.invokeExact(window_title, dialog_text, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_test_slider_set_perc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_slider_set_perc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_test_slider_set_perc(GtkWidget *widget, double percentage)
     * }
     */
    public static FunctionDescriptor gtk_test_slider_set_perc$descriptor() {
        return gtk_test_slider_set_perc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_test_slider_set_perc(GtkWidget *widget, double percentage)
     * }
     */
    public static MethodHandle gtk_test_slider_set_perc$handle() {
        return gtk_test_slider_set_perc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_test_slider_set_perc(GtkWidget *widget, double percentage)
     * }
     */
    public static void gtk_test_slider_set_perc(MemorySegment widget, double percentage) {
        var mh$ = gtk_test_slider_set_perc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_slider_set_perc", widget, percentage);
            }
            mh$.invokeExact(widget, percentage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_slider_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_slider_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double gtk_test_slider_get_value(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_test_slider_get_value$descriptor() {
        return gtk_test_slider_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double gtk_test_slider_get_value(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_test_slider_get_value$handle() {
        return gtk_test_slider_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double gtk_test_slider_get_value(GtkWidget *widget)
     * }
     */
    public static double gtk_test_slider_get_value(MemorySegment widget) {
        var mh$ = gtk_test_slider_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_slider_get_value", widget);
            }
            return (double)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_spin_button_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_spin_button_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_test_spin_button_click(GtkSpinButton *spinner, guint button, gboolean upwards)
     * }
     */
    public static FunctionDescriptor gtk_test_spin_button_click$descriptor() {
        return gtk_test_spin_button_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_test_spin_button_click(GtkSpinButton *spinner, guint button, gboolean upwards)
     * }
     */
    public static MethodHandle gtk_test_spin_button_click$handle() {
        return gtk_test_spin_button_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_test_spin_button_click(GtkSpinButton *spinner, guint button, gboolean upwards)
     * }
     */
    public static int gtk_test_spin_button_click(MemorySegment spinner, int button, int upwards) {
        var mh$ = gtk_test_spin_button_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_spin_button_click", spinner, button, upwards);
            }
            return (int)mh$.invokeExact(spinner, button, upwards);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_widget_wait_for_draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_widget_wait_for_draw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_test_widget_wait_for_draw(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_test_widget_wait_for_draw$descriptor() {
        return gtk_test_widget_wait_for_draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_test_widget_wait_for_draw(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_test_widget_wait_for_draw$handle() {
        return gtk_test_widget_wait_for_draw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_test_widget_wait_for_draw(GtkWidget *widget)
     * }
     */
    public static void gtk_test_widget_wait_for_draw(MemorySegment widget) {
        var mh$ = gtk_test_widget_wait_for_draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_widget_wait_for_draw", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_widget_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_widget_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_test_widget_click(GtkWidget *widget, guint button, GdkModifierType modifiers)
     * }
     */
    public static FunctionDescriptor gtk_test_widget_click$descriptor() {
        return gtk_test_widget_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_test_widget_click(GtkWidget *widget, guint button, GdkModifierType modifiers)
     * }
     */
    public static MethodHandle gtk_test_widget_click$handle() {
        return gtk_test_widget_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_test_widget_click(GtkWidget *widget, guint button, GdkModifierType modifiers)
     * }
     */
    public static int gtk_test_widget_click(MemorySegment widget, int button, int modifiers) {
        var mh$ = gtk_test_widget_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_widget_click", widget, button, modifiers);
            }
            return (int)mh$.invokeExact(widget, button, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_widget_send_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_widget_send_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_test_widget_send_key(GtkWidget *widget, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static FunctionDescriptor gtk_test_widget_send_key$descriptor() {
        return gtk_test_widget_send_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_test_widget_send_key(GtkWidget *widget, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static MethodHandle gtk_test_widget_send_key$handle() {
        return gtk_test_widget_send_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_test_widget_send_key(GtkWidget *widget, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static int gtk_test_widget_send_key(MemorySegment widget, int keyval, int modifiers) {
        var mh$ = gtk_test_widget_send_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_widget_send_key", widget, keyval, modifiers);
            }
            return (int)mh$.invokeExact(widget, keyval, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_text_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_text_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_test_text_set(GtkWidget *widget, const gchar *string)
     * }
     */
    public static FunctionDescriptor gtk_test_text_set$descriptor() {
        return gtk_test_text_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_test_text_set(GtkWidget *widget, const gchar *string)
     * }
     */
    public static MethodHandle gtk_test_text_set$handle() {
        return gtk_test_text_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_test_text_set(GtkWidget *widget, const gchar *string)
     * }
     */
    public static void gtk_test_text_set(MemorySegment widget, MemorySegment string) {
        var mh$ = gtk_test_text_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_text_set", widget, string);
            }
            mh$.invokeExact(widget, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_text_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_text_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_test_text_get(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_test_text_get$descriptor() {
        return gtk_test_text_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_test_text_get(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_test_text_get$handle() {
        return gtk_test_text_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_test_text_get(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_test_text_get(MemorySegment widget) {
        var mh$ = gtk_test_text_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_text_get", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_find_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_find_sibling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_sibling(GtkWidget *base_widget, GType widget_type)
     * }
     */
    public static FunctionDescriptor gtk_test_find_sibling$descriptor() {
        return gtk_test_find_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_sibling(GtkWidget *base_widget, GType widget_type)
     * }
     */
    public static MethodHandle gtk_test_find_sibling$handle() {
        return gtk_test_find_sibling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_sibling(GtkWidget *base_widget, GType widget_type)
     * }
     */
    public static MemorySegment gtk_test_find_sibling(MemorySegment base_widget, long widget_type) {
        var mh$ = gtk_test_find_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_find_sibling", base_widget, widget_type);
            }
            return (MemorySegment)mh$.invokeExact(base_widget, widget_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_test_find_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_test_find_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_label(GtkWidget *widget, const gchar *label_pattern)
     * }
     */
    public static FunctionDescriptor gtk_test_find_label$descriptor() {
        return gtk_test_find_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_label(GtkWidget *widget, const gchar *label_pattern)
     * }
     */
    public static MethodHandle gtk_test_find_label$handle() {
        return gtk_test_find_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_test_find_label(GtkWidget *widget, const gchar *label_pattern)
     * }
     */
    public static MemorySegment gtk_test_find_label(MemorySegment widget, MemorySegment label_pattern) {
        var mh$ = gtk_test_find_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_test_find_label", widget, label_pattern);
            }
            return (MemorySegment)mh$.invokeExact(widget, label_pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_drag_source_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_drag_source_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_drag_source_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_drag_source_get_type$descriptor() {
        return gtk_tree_drag_source_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_drag_source_get_type()
     * }
     */
    public static MethodHandle gtk_tree_drag_source_get_type$handle() {
        return gtk_tree_drag_source_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_drag_source_get_type()
     * }
     */
    public static long gtk_tree_drag_source_get_type() {
        var mh$ = gtk_tree_drag_source_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_drag_source_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_drag_source_row_draggable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_drag_source_row_draggable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_row_draggable(GtkTreeDragSource *drag_source, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_drag_source_row_draggable$descriptor() {
        return gtk_tree_drag_source_row_draggable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_row_draggable(GtkTreeDragSource *drag_source, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_drag_source_row_draggable$handle() {
        return gtk_tree_drag_source_row_draggable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_row_draggable(GtkTreeDragSource *drag_source, GtkTreePath *path)
     * }
     */
    public static int gtk_tree_drag_source_row_draggable(MemorySegment drag_source, MemorySegment path) {
        var mh$ = gtk_tree_drag_source_row_draggable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_drag_source_row_draggable", drag_source, path);
            }
            return (int)mh$.invokeExact(drag_source, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_drag_source_drag_data_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_drag_source_drag_data_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_drag_data_delete(GtkTreeDragSource *drag_source, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_drag_source_drag_data_delete$descriptor() {
        return gtk_tree_drag_source_drag_data_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_drag_data_delete(GtkTreeDragSource *drag_source, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_drag_source_drag_data_delete$handle() {
        return gtk_tree_drag_source_drag_data_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_drag_data_delete(GtkTreeDragSource *drag_source, GtkTreePath *path)
     * }
     */
    public static int gtk_tree_drag_source_drag_data_delete(MemorySegment drag_source, MemorySegment path) {
        var mh$ = gtk_tree_drag_source_drag_data_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_drag_source_drag_data_delete", drag_source, path);
            }
            return (int)mh$.invokeExact(drag_source, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_drag_source_drag_data_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_drag_source_drag_data_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_drag_data_get(GtkTreeDragSource *drag_source, GtkTreePath *path, GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_tree_drag_source_drag_data_get$descriptor() {
        return gtk_tree_drag_source_drag_data_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_drag_data_get(GtkTreeDragSource *drag_source, GtkTreePath *path, GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_tree_drag_source_drag_data_get$handle() {
        return gtk_tree_drag_source_drag_data_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_source_drag_data_get(GtkTreeDragSource *drag_source, GtkTreePath *path, GtkSelectionData *selection_data)
     * }
     */
    public static int gtk_tree_drag_source_drag_data_get(MemorySegment drag_source, MemorySegment path, MemorySegment selection_data) {
        var mh$ = gtk_tree_drag_source_drag_data_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_drag_source_drag_data_get", drag_source, path, selection_data);
            }
            return (int)mh$.invokeExact(drag_source, path, selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_drag_dest_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_drag_dest_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_drag_dest_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_drag_dest_get_type$descriptor() {
        return gtk_tree_drag_dest_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_drag_dest_get_type()
     * }
     */
    public static MethodHandle gtk_tree_drag_dest_get_type$handle() {
        return gtk_tree_drag_dest_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_drag_dest_get_type()
     * }
     */
    public static long gtk_tree_drag_dest_get_type() {
        var mh$ = gtk_tree_drag_dest_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_drag_dest_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_drag_dest_drag_data_received {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_drag_dest_drag_data_received"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_dest_drag_data_received(GtkTreeDragDest *drag_dest, GtkTreePath *dest, GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_tree_drag_dest_drag_data_received$descriptor() {
        return gtk_tree_drag_dest_drag_data_received.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_dest_drag_data_received(GtkTreeDragDest *drag_dest, GtkTreePath *dest, GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_tree_drag_dest_drag_data_received$handle() {
        return gtk_tree_drag_dest_drag_data_received.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_dest_drag_data_received(GtkTreeDragDest *drag_dest, GtkTreePath *dest, GtkSelectionData *selection_data)
     * }
     */
    public static int gtk_tree_drag_dest_drag_data_received(MemorySegment drag_dest, MemorySegment dest, MemorySegment selection_data) {
        var mh$ = gtk_tree_drag_dest_drag_data_received.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_drag_dest_drag_data_received", drag_dest, dest, selection_data);
            }
            return (int)mh$.invokeExact(drag_dest, dest, selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_drag_dest_row_drop_possible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_drag_dest_row_drop_possible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_dest_row_drop_possible(GtkTreeDragDest *drag_dest, GtkTreePath *dest_path, GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_tree_drag_dest_row_drop_possible$descriptor() {
        return gtk_tree_drag_dest_row_drop_possible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_dest_row_drop_possible(GtkTreeDragDest *drag_dest, GtkTreePath *dest_path, GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_tree_drag_dest_row_drop_possible$handle() {
        return gtk_tree_drag_dest_row_drop_possible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_drag_dest_row_drop_possible(GtkTreeDragDest *drag_dest, GtkTreePath *dest_path, GtkSelectionData *selection_data)
     * }
     */
    public static int gtk_tree_drag_dest_row_drop_possible(MemorySegment drag_dest, MemorySegment dest_path, MemorySegment selection_data) {
        var mh$ = gtk_tree_drag_dest_row_drop_possible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_drag_dest_row_drop_possible", drag_dest, dest_path, selection_data);
            }
            return (int)mh$.invokeExact(drag_dest, dest_path, selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_set_row_drag_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_set_row_drag_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_set_row_drag_data(GtkSelectionData *selection_data, GtkTreeModel *tree_model, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_set_row_drag_data$descriptor() {
        return gtk_tree_set_row_drag_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_set_row_drag_data(GtkSelectionData *selection_data, GtkTreeModel *tree_model, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_set_row_drag_data$handle() {
        return gtk_tree_set_row_drag_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_set_row_drag_data(GtkSelectionData *selection_data, GtkTreeModel *tree_model, GtkTreePath *path)
     * }
     */
    public static int gtk_tree_set_row_drag_data(MemorySegment selection_data, MemorySegment tree_model, MemorySegment path) {
        var mh$ = gtk_tree_set_row_drag_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_set_row_drag_data", selection_data, tree_model, path);
            }
            return (int)mh$.invokeExact(selection_data, tree_model, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_get_row_drag_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_get_row_drag_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_get_row_drag_data(GtkSelectionData *selection_data, GtkTreeModel **tree_model, GtkTreePath **path)
     * }
     */
    public static FunctionDescriptor gtk_tree_get_row_drag_data$descriptor() {
        return gtk_tree_get_row_drag_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_get_row_drag_data(GtkSelectionData *selection_data, GtkTreeModel **tree_model, GtkTreePath **path)
     * }
     */
    public static MethodHandle gtk_tree_get_row_drag_data$handle() {
        return gtk_tree_get_row_drag_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_get_row_drag_data(GtkSelectionData *selection_data, GtkTreeModel **tree_model, GtkTreePath **path)
     * }
     */
    public static int gtk_tree_get_row_drag_data(MemorySegment selection_data, MemorySegment tree_model, MemorySegment path) {
        var mh$ = gtk_tree_get_row_drag_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_get_row_drag_data", selection_data, tree_model, path);
            }
            return (int)mh$.invokeExact(selection_data, tree_model, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_sort_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_get_type$descriptor() {
        return gtk_tree_model_sort_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_sort_get_type()
     * }
     */
    public static MethodHandle gtk_tree_model_sort_get_type$handle() {
        return gtk_tree_model_sort_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_model_sort_get_type()
     * }
     */
    public static long gtk_tree_model_sort_get_type() {
        var mh$ = gtk_tree_model_sort_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_new_with_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_new_with_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_sort_new_with_model(GtkTreeModel *child_model)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_new_with_model$descriptor() {
        return gtk_tree_model_sort_new_with_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_sort_new_with_model(GtkTreeModel *child_model)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_new_with_model$handle() {
        return gtk_tree_model_sort_new_with_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_sort_new_with_model(GtkTreeModel *child_model)
     * }
     */
    public static MemorySegment gtk_tree_model_sort_new_with_model(MemorySegment child_model) {
        var mh$ = gtk_tree_model_sort_new_with_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_new_with_model", child_model);
            }
            return (MemorySegment)mh$.invokeExact(child_model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_sort_get_model(GtkTreeModelSort *tree_model)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_get_model$descriptor() {
        return gtk_tree_model_sort_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_sort_get_model(GtkTreeModelSort *tree_model)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_get_model$handle() {
        return gtk_tree_model_sort_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_sort_get_model(GtkTreeModelSort *tree_model)
     * }
     */
    public static MemorySegment gtk_tree_model_sort_get_model(MemorySegment tree_model) {
        var mh$ = gtk_tree_model_sort_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_get_model", tree_model);
            }
            return (MemorySegment)mh$.invokeExact(tree_model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_convert_child_path_to_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_convert_child_path_to_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort *tree_model_sort, GtkTreePath *child_path)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_convert_child_path_to_path$descriptor() {
        return gtk_tree_model_sort_convert_child_path_to_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort *tree_model_sort, GtkTreePath *child_path)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_convert_child_path_to_path$handle() {
        return gtk_tree_model_sort_convert_child_path_to_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort *tree_model_sort, GtkTreePath *child_path)
     * }
     */
    public static MemorySegment gtk_tree_model_sort_convert_child_path_to_path(MemorySegment tree_model_sort, MemorySegment child_path) {
        var mh$ = gtk_tree_model_sort_convert_child_path_to_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_convert_child_path_to_path", tree_model_sort, child_path);
            }
            return (MemorySegment)mh$.invokeExact(tree_model_sort, child_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_convert_child_iter_to_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_convert_child_iter_to_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort *tree_model_sort, GtkTreeIter *sort_iter, GtkTreeIter *child_iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_convert_child_iter_to_iter$descriptor() {
        return gtk_tree_model_sort_convert_child_iter_to_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort *tree_model_sort, GtkTreeIter *sort_iter, GtkTreeIter *child_iter)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_convert_child_iter_to_iter$handle() {
        return gtk_tree_model_sort_convert_child_iter_to_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort *tree_model_sort, GtkTreeIter *sort_iter, GtkTreeIter *child_iter)
     * }
     */
    public static int gtk_tree_model_sort_convert_child_iter_to_iter(MemorySegment tree_model_sort, MemorySegment sort_iter, MemorySegment child_iter) {
        var mh$ = gtk_tree_model_sort_convert_child_iter_to_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_convert_child_iter_to_iter", tree_model_sort, sort_iter, child_iter);
            }
            return (int)mh$.invokeExact(tree_model_sort, sort_iter, child_iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_convert_path_to_child_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_convert_path_to_child_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort *tree_model_sort, GtkTreePath *sorted_path)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_convert_path_to_child_path$descriptor() {
        return gtk_tree_model_sort_convert_path_to_child_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort *tree_model_sort, GtkTreePath *sorted_path)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_convert_path_to_child_path$handle() {
        return gtk_tree_model_sort_convert_path_to_child_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort *tree_model_sort, GtkTreePath *sorted_path)
     * }
     */
    public static MemorySegment gtk_tree_model_sort_convert_path_to_child_path(MemorySegment tree_model_sort, MemorySegment sorted_path) {
        var mh$ = gtk_tree_model_sort_convert_path_to_child_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_convert_path_to_child_path", tree_model_sort, sorted_path);
            }
            return (MemorySegment)mh$.invokeExact(tree_model_sort, sorted_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_convert_iter_to_child_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_convert_iter_to_child_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort *tree_model_sort, GtkTreeIter *child_iter, GtkTreeIter *sorted_iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_convert_iter_to_child_iter$descriptor() {
        return gtk_tree_model_sort_convert_iter_to_child_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort *tree_model_sort, GtkTreeIter *child_iter, GtkTreeIter *sorted_iter)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_convert_iter_to_child_iter$handle() {
        return gtk_tree_model_sort_convert_iter_to_child_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort *tree_model_sort, GtkTreeIter *child_iter, GtkTreeIter *sorted_iter)
     * }
     */
    public static void gtk_tree_model_sort_convert_iter_to_child_iter(MemorySegment tree_model_sort, MemorySegment child_iter, MemorySegment sorted_iter) {
        var mh$ = gtk_tree_model_sort_convert_iter_to_child_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_convert_iter_to_child_iter", tree_model_sort, child_iter, sorted_iter);
            }
            mh$.invokeExact(tree_model_sort, child_iter, sorted_iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_reset_default_sort_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_reset_default_sort_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort *tree_model_sort)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_reset_default_sort_func$descriptor() {
        return gtk_tree_model_sort_reset_default_sort_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort *tree_model_sort)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_reset_default_sort_func$handle() {
        return gtk_tree_model_sort_reset_default_sort_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort *tree_model_sort)
     * }
     */
    public static void gtk_tree_model_sort_reset_default_sort_func(MemorySegment tree_model_sort) {
        var mh$ = gtk_tree_model_sort_reset_default_sort_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_reset_default_sort_func", tree_model_sort);
            }
            mh$.invokeExact(tree_model_sort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_clear_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_clear_cache"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_clear_cache(GtkTreeModelSort *tree_model_sort)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_clear_cache$descriptor() {
        return gtk_tree_model_sort_clear_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_clear_cache(GtkTreeModelSort *tree_model_sort)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_clear_cache$handle() {
        return gtk_tree_model_sort_clear_cache.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_sort_clear_cache(GtkTreeModelSort *tree_model_sort)
     * }
     */
    public static void gtk_tree_model_sort_clear_cache(MemorySegment tree_model_sort) {
        var mh$ = gtk_tree_model_sort_clear_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_clear_cache", tree_model_sort);
            }
            mh$.invokeExact(tree_model_sort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_sort_iter_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_sort_iter_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort *tree_model_sort, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_sort_iter_is_valid$descriptor() {
        return gtk_tree_model_sort_iter_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort *tree_model_sort, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_sort_iter_is_valid$handle() {
        return gtk_tree_model_sort_iter_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort *tree_model_sort, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_model_sort_iter_is_valid(MemorySegment tree_model_sort, MemorySegment iter) {
        var mh$ = gtk_tree_model_sort_iter_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_sort_iter_is_valid", tree_model_sort, iter);
            }
            return (int)mh$.invokeExact(tree_model_sort, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_selection_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_get_type$descriptor() {
        return gtk_tree_selection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_selection_get_type()
     * }
     */
    public static MethodHandle gtk_tree_selection_get_type$handle() {
        return gtk_tree_selection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_selection_get_type()
     * }
     */
    public static long gtk_tree_selection_get_type() {
        var mh$ = gtk_tree_selection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_set_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_set_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_set_mode(GtkTreeSelection *selection, GtkSelectionMode type)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_set_mode$descriptor() {
        return gtk_tree_selection_set_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_set_mode(GtkTreeSelection *selection, GtkSelectionMode type)
     * }
     */
    public static MethodHandle gtk_tree_selection_set_mode$handle() {
        return gtk_tree_selection_set_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_set_mode(GtkTreeSelection *selection, GtkSelectionMode type)
     * }
     */
    public static void gtk_tree_selection_set_mode(MemorySegment selection, int type) {
        var mh$ = gtk_tree_selection_set_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_set_mode", selection, type);
            }
            mh$.invokeExact(selection, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_get_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_get_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_tree_selection_get_mode(GtkTreeSelection *selection)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_get_mode$descriptor() {
        return gtk_tree_selection_get_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_tree_selection_get_mode(GtkTreeSelection *selection)
     * }
     */
    public static MethodHandle gtk_tree_selection_get_mode$handle() {
        return gtk_tree_selection_get_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_tree_selection_get_mode(GtkTreeSelection *selection)
     * }
     */
    public static int gtk_tree_selection_get_mode(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_get_mode", selection);
            }
            return (int)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_set_select_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_set_select_function"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_set_select_function(GtkTreeSelection *selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_set_select_function$descriptor() {
        return gtk_tree_selection_set_select_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_set_select_function(GtkTreeSelection *selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_selection_set_select_function$handle() {
        return gtk_tree_selection_set_select_function.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_set_select_function(GtkTreeSelection *selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_selection_set_select_function(MemorySegment selection, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_tree_selection_set_select_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_set_select_function", selection, func, data, destroy);
            }
            mh$.invokeExact(selection, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer gtk_tree_selection_get_user_data(GtkTreeSelection *selection)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_get_user_data$descriptor() {
        return gtk_tree_selection_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer gtk_tree_selection_get_user_data(GtkTreeSelection *selection)
     * }
     */
    public static MethodHandle gtk_tree_selection_get_user_data$handle() {
        return gtk_tree_selection_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer gtk_tree_selection_get_user_data(GtkTreeSelection *selection)
     * }
     */
    public static MemorySegment gtk_tree_selection_get_user_data(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_get_user_data", selection);
            }
            return (MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_get_tree_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_get_tree_view"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeView *gtk_tree_selection_get_tree_view(GtkTreeSelection *selection)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_get_tree_view$descriptor() {
        return gtk_tree_selection_get_tree_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeView *gtk_tree_selection_get_tree_view(GtkTreeSelection *selection)
     * }
     */
    public static MethodHandle gtk_tree_selection_get_tree_view$handle() {
        return gtk_tree_selection_get_tree_view.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeView *gtk_tree_selection_get_tree_view(GtkTreeSelection *selection)
     * }
     */
    public static MemorySegment gtk_tree_selection_get_tree_view(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_tree_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_get_tree_view", selection);
            }
            return (MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_get_select_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_get_select_function"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeSelectionFunc gtk_tree_selection_get_select_function(GtkTreeSelection *selection)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_get_select_function$descriptor() {
        return gtk_tree_selection_get_select_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeSelectionFunc gtk_tree_selection_get_select_function(GtkTreeSelection *selection)
     * }
     */
    public static MethodHandle gtk_tree_selection_get_select_function$handle() {
        return gtk_tree_selection_get_select_function.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeSelectionFunc gtk_tree_selection_get_select_function(GtkTreeSelection *selection)
     * }
     */
    public static MemorySegment gtk_tree_selection_get_select_function(MemorySegment selection) {
        var mh$ = gtk_tree_selection_get_select_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_get_select_function", selection);
            }
            return (MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_get_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_get_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_get_selected(GtkTreeSelection *selection, GtkTreeModel **model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_get_selected$descriptor() {
        return gtk_tree_selection_get_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_get_selected(GtkTreeSelection *selection, GtkTreeModel **model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_selection_get_selected$handle() {
        return gtk_tree_selection_get_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_get_selected(GtkTreeSelection *selection, GtkTreeModel **model, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_selection_get_selected(MemorySegment selection, MemorySegment model, MemorySegment iter) {
        var mh$ = gtk_tree_selection_get_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_get_selected", selection, model, iter);
            }
            return (int)mh$.invokeExact(selection, model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_get_selected_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_get_selected_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_tree_selection_get_selected_rows(GtkTreeSelection *selection, GtkTreeModel **model)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_get_selected_rows$descriptor() {
        return gtk_tree_selection_get_selected_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_tree_selection_get_selected_rows(GtkTreeSelection *selection, GtkTreeModel **model)
     * }
     */
    public static MethodHandle gtk_tree_selection_get_selected_rows$handle() {
        return gtk_tree_selection_get_selected_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_tree_selection_get_selected_rows(GtkTreeSelection *selection, GtkTreeModel **model)
     * }
     */
    public static MemorySegment gtk_tree_selection_get_selected_rows(MemorySegment selection, MemorySegment model) {
        var mh$ = gtk_tree_selection_get_selected_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_get_selected_rows", selection, model);
            }
            return (MemorySegment)mh$.invokeExact(selection, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_count_selected_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_count_selected_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_selection_count_selected_rows(GtkTreeSelection *selection)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_count_selected_rows$descriptor() {
        return gtk_tree_selection_count_selected_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_selection_count_selected_rows(GtkTreeSelection *selection)
     * }
     */
    public static MethodHandle gtk_tree_selection_count_selected_rows$handle() {
        return gtk_tree_selection_count_selected_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_selection_count_selected_rows(GtkTreeSelection *selection)
     * }
     */
    public static int gtk_tree_selection_count_selected_rows(MemorySegment selection) {
        var mh$ = gtk_tree_selection_count_selected_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_count_selected_rows", selection);
            }
            return (int)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_selected_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_selected_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_selected_foreach(GtkTreeSelection *selection, GtkTreeSelectionForeachFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_selected_foreach$descriptor() {
        return gtk_tree_selection_selected_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_selected_foreach(GtkTreeSelection *selection, GtkTreeSelectionForeachFunc func, gpointer data)
     * }
     */
    public static MethodHandle gtk_tree_selection_selected_foreach$handle() {
        return gtk_tree_selection_selected_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_selected_foreach(GtkTreeSelection *selection, GtkTreeSelectionForeachFunc func, gpointer data)
     * }
     */
    public static void gtk_tree_selection_selected_foreach(MemorySegment selection, MemorySegment func, MemorySegment data) {
        var mh$ = gtk_tree_selection_selected_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_selected_foreach", selection, func, data);
            }
            mh$.invokeExact(selection, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_select_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_select_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_path(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_select_path$descriptor() {
        return gtk_tree_selection_select_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_path(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_selection_select_path$handle() {
        return gtk_tree_selection_select_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_path(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static void gtk_tree_selection_select_path(MemorySegment selection, MemorySegment path) {
        var mh$ = gtk_tree_selection_select_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_select_path", selection, path);
            }
            mh$.invokeExact(selection, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_unselect_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_unselect_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_path(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_unselect_path$descriptor() {
        return gtk_tree_selection_unselect_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_path(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_selection_unselect_path$handle() {
        return gtk_tree_selection_unselect_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_path(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static void gtk_tree_selection_unselect_path(MemorySegment selection, MemorySegment path) {
        var mh$ = gtk_tree_selection_unselect_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_unselect_path", selection, path);
            }
            mh$.invokeExact(selection, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_select_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_select_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_iter(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_select_iter$descriptor() {
        return gtk_tree_selection_select_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_iter(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_selection_select_iter$handle() {
        return gtk_tree_selection_select_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_iter(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_selection_select_iter(MemorySegment selection, MemorySegment iter) {
        var mh$ = gtk_tree_selection_select_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_select_iter", selection, iter);
            }
            mh$.invokeExact(selection, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_unselect_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_unselect_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_iter(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_unselect_iter$descriptor() {
        return gtk_tree_selection_unselect_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_iter(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_selection_unselect_iter$handle() {
        return gtk_tree_selection_unselect_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_iter(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_selection_unselect_iter(MemorySegment selection, MemorySegment iter) {
        var mh$ = gtk_tree_selection_unselect_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_unselect_iter", selection, iter);
            }
            mh$.invokeExact(selection, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_path_is_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_path_is_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_path_is_selected(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_path_is_selected$descriptor() {
        return gtk_tree_selection_path_is_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_path_is_selected(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_selection_path_is_selected$handle() {
        return gtk_tree_selection_path_is_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_path_is_selected(GtkTreeSelection *selection, GtkTreePath *path)
     * }
     */
    public static int gtk_tree_selection_path_is_selected(MemorySegment selection, MemorySegment path) {
        var mh$ = gtk_tree_selection_path_is_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_path_is_selected", selection, path);
            }
            return (int)mh$.invokeExact(selection, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_iter_is_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_iter_is_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_iter_is_selected(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_iter_is_selected$descriptor() {
        return gtk_tree_selection_iter_is_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_iter_is_selected(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_selection_iter_is_selected$handle() {
        return gtk_tree_selection_iter_is_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_selection_iter_is_selected(GtkTreeSelection *selection, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_selection_iter_is_selected(MemorySegment selection, MemorySegment iter) {
        var mh$ = gtk_tree_selection_iter_is_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_iter_is_selected", selection, iter);
            }
            return (int)mh$.invokeExact(selection, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_select_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_select_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_all(GtkTreeSelection *selection)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_select_all$descriptor() {
        return gtk_tree_selection_select_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_all(GtkTreeSelection *selection)
     * }
     */
    public static MethodHandle gtk_tree_selection_select_all$handle() {
        return gtk_tree_selection_select_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_all(GtkTreeSelection *selection)
     * }
     */
    public static void gtk_tree_selection_select_all(MemorySegment selection) {
        var mh$ = gtk_tree_selection_select_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_select_all", selection);
            }
            mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_unselect_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_unselect_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_all(GtkTreeSelection *selection)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_unselect_all$descriptor() {
        return gtk_tree_selection_unselect_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_all(GtkTreeSelection *selection)
     * }
     */
    public static MethodHandle gtk_tree_selection_unselect_all$handle() {
        return gtk_tree_selection_unselect_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_all(GtkTreeSelection *selection)
     * }
     */
    public static void gtk_tree_selection_unselect_all(MemorySegment selection) {
        var mh$ = gtk_tree_selection_unselect_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_unselect_all", selection);
            }
            mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_select_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_select_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_range(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_select_range$descriptor() {
        return gtk_tree_selection_select_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_range(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path)
     * }
     */
    public static MethodHandle gtk_tree_selection_select_range$handle() {
        return gtk_tree_selection_select_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_select_range(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path)
     * }
     */
    public static void gtk_tree_selection_select_range(MemorySegment selection, MemorySegment start_path, MemorySegment end_path) {
        var mh$ = gtk_tree_selection_select_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_select_range", selection, start_path, end_path);
            }
            mh$.invokeExact(selection, start_path, end_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_selection_unselect_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_selection_unselect_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_range(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path)
     * }
     */
    public static FunctionDescriptor gtk_tree_selection_unselect_range$descriptor() {
        return gtk_tree_selection_unselect_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_range(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path)
     * }
     */
    public static MethodHandle gtk_tree_selection_unselect_range$handle() {
        return gtk_tree_selection_unselect_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_selection_unselect_range(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path)
     * }
     */
    public static void gtk_tree_selection_unselect_range(MemorySegment selection, MemorySegment start_path, MemorySegment end_path) {
        var mh$ = gtk_tree_selection_unselect_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_selection_unselect_range", selection, start_path, end_path);
            }
            mh$.invokeExact(selection, start_path, end_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_store_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_store_get_type$descriptor() {
        return gtk_tree_store_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_store_get_type()
     * }
     */
    public static MethodHandle gtk_tree_store_get_type$handle() {
        return gtk_tree_store_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_store_get_type()
     * }
     */
    public static long gtk_tree_store_get_type() {
        var mh$ = gtk_tree_store_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkTreeStore *gtk_tree_store_new(gint n_columns, ...)
     * }
     */
    public static class gtk_tree_store_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_store_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_store_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkTreeStore *gtk_tree_store_new(gint n_columns, ...)
         * }
         */
        public static gtk_tree_store_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_store_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n_columns, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_store_new", n_columns, x1);
                }
                return (MemorySegment)spreader.invokeExact(n_columns, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_store_newv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_newv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeStore *gtk_tree_store_newv(gint n_columns, GType *types)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_newv$descriptor() {
        return gtk_tree_store_newv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeStore *gtk_tree_store_newv(gint n_columns, GType *types)
     * }
     */
    public static MethodHandle gtk_tree_store_newv$handle() {
        return gtk_tree_store_newv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeStore *gtk_tree_store_newv(gint n_columns, GType *types)
     * }
     */
    public static MemorySegment gtk_tree_store_newv(int n_columns, MemorySegment types) {
        var mh$ = gtk_tree_store_newv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_newv", n_columns, types);
            }
            return (MemorySegment)mh$.invokeExact(n_columns, types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_set_column_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_set_column_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_column_types(GtkTreeStore *tree_store, gint n_columns, GType *types)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_set_column_types$descriptor() {
        return gtk_tree_store_set_column_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_column_types(GtkTreeStore *tree_store, gint n_columns, GType *types)
     * }
     */
    public static MethodHandle gtk_tree_store_set_column_types$handle() {
        return gtk_tree_store_set_column_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_column_types(GtkTreeStore *tree_store, gint n_columns, GType *types)
     * }
     */
    public static void gtk_tree_store_set_column_types(MemorySegment tree_store, int n_columns, MemorySegment types) {
        var mh$ = gtk_tree_store_set_column_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_set_column_types", tree_store, n_columns, types);
            }
            mh$.invokeExact(tree_store, n_columns, types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_value(GtkTreeStore *tree_store, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_set_value$descriptor() {
        return gtk_tree_store_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_value(GtkTreeStore *tree_store, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static MethodHandle gtk_tree_store_set_value$handle() {
        return gtk_tree_store_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_value(GtkTreeStore *tree_store, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static void gtk_tree_store_set_value(MemorySegment tree_store, MemorySegment iter, int column, MemorySegment value) {
        var mh$ = gtk_tree_store_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_set_value", tree_store, iter, column, value);
            }
            mh$.invokeExact(tree_store, iter, column, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_set(GtkTreeStore *tree_store, GtkTreeIter *iter, ...)
     * }
     */
    public static class gtk_tree_store_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_store_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_store_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_tree_store_set(GtkTreeStore *tree_store, GtkTreeIter *iter, ...)
         * }
         */
        public static gtk_tree_store_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_store_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment tree_store, MemorySegment iter, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_store_set", tree_store, iter, x2);
                }
                spreader.invokeExact(tree_store, iter, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_store_set_valuesv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_set_valuesv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_valuesv(GtkTreeStore *tree_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_set_valuesv$descriptor() {
        return gtk_tree_store_set_valuesv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_valuesv(GtkTreeStore *tree_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static MethodHandle gtk_tree_store_set_valuesv$handle() {
        return gtk_tree_store_set_valuesv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_set_valuesv(GtkTreeStore *tree_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static void gtk_tree_store_set_valuesv(MemorySegment tree_store, MemorySegment iter, MemorySegment columns, MemorySegment values, int n_values) {
        var mh$ = gtk_tree_store_set_valuesv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_set_valuesv", tree_store, iter, columns, values, n_values);
            }
            mh$.invokeExact(tree_store, iter, columns, values, n_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_remove(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_remove$descriptor() {
        return gtk_tree_store_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_remove(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_store_remove$handle() {
        return gtk_tree_store_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_remove(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_store_remove(MemorySegment tree_store, MemorySegment iter) {
        var mh$ = gtk_tree_store_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_remove", tree_store, iter);
            }
            return (int)mh$.invokeExact(tree_store, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_insert$descriptor() {
        return gtk_tree_store_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position)
     * }
     */
    public static MethodHandle gtk_tree_store_insert$handle() {
        return gtk_tree_store_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position)
     * }
     */
    public static void gtk_tree_store_insert(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, int position) {
        var mh$ = gtk_tree_store_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_insert", tree_store, iter, parent, position);
            }
            mh$.invokeExact(tree_store, iter, parent, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_before(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_insert_before$descriptor() {
        return gtk_tree_store_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_before(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling)
     * }
     */
    public static MethodHandle gtk_tree_store_insert_before$handle() {
        return gtk_tree_store_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_before(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling)
     * }
     */
    public static void gtk_tree_store_insert_before(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, MemorySegment sibling) {
        var mh$ = gtk_tree_store_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_insert_before", tree_store, iter, parent, sibling);
            }
            mh$.invokeExact(tree_store, iter, parent, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_insert_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_insert_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_after(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_insert_after$descriptor() {
        return gtk_tree_store_insert_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_after(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling)
     * }
     */
    public static MethodHandle gtk_tree_store_insert_after$handle() {
        return gtk_tree_store_insert_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_after(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling)
     * }
     */
    public static void gtk_tree_store_insert_after(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, MemorySegment sibling) {
        var mh$ = gtk_tree_store_insert_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_insert_after", tree_store, iter, parent, sibling);
            }
            mh$.invokeExact(tree_store, iter, parent, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_with_values(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, ...)
     * }
     */
    public static class gtk_tree_store_insert_with_values {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_store_insert_with_values");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_store_insert_with_values(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_tree_store_insert_with_values(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, ...)
         * }
         */
        public static gtk_tree_store_insert_with_values makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_store_insert_with_values(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, int position, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_store_insert_with_values", tree_store, iter, parent, position, x4);
                }
                spreader.invokeExact(tree_store, iter, parent, position, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_store_insert_with_valuesv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_insert_with_valuesv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_with_valuesv(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_insert_with_valuesv$descriptor() {
        return gtk_tree_store_insert_with_valuesv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_with_valuesv(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static MethodHandle gtk_tree_store_insert_with_valuesv$handle() {
        return gtk_tree_store_insert_with_valuesv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_insert_with_valuesv(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static void gtk_tree_store_insert_with_valuesv(MemorySegment tree_store, MemorySegment iter, MemorySegment parent, int position, MemorySegment columns, MemorySegment values, int n_values) {
        var mh$ = gtk_tree_store_insert_with_valuesv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_insert_with_valuesv", tree_store, iter, parent, position, columns, values, n_values);
            }
            mh$.invokeExact(tree_store, iter, parent, position, columns, values, n_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_prepend(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_prepend$descriptor() {
        return gtk_tree_store_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_prepend(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static MethodHandle gtk_tree_store_prepend$handle() {
        return gtk_tree_store_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_prepend(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static void gtk_tree_store_prepend(MemorySegment tree_store, MemorySegment iter, MemorySegment parent) {
        var mh$ = gtk_tree_store_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_prepend", tree_store, iter, parent);
            }
            mh$.invokeExact(tree_store, iter, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_append(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_append$descriptor() {
        return gtk_tree_store_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_append(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static MethodHandle gtk_tree_store_append$handle() {
        return gtk_tree_store_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_append(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static void gtk_tree_store_append(MemorySegment tree_store, MemorySegment iter, MemorySegment parent) {
        var mh$ = gtk_tree_store_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_append", tree_store, iter, parent);
            }
            mh$.invokeExact(tree_store, iter, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_is_ancestor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_is_ancestor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_is_ancestor(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *descendant)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_is_ancestor$descriptor() {
        return gtk_tree_store_is_ancestor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_is_ancestor(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *descendant)
     * }
     */
    public static MethodHandle gtk_tree_store_is_ancestor$handle() {
        return gtk_tree_store_is_ancestor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_is_ancestor(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *descendant)
     * }
     */
    public static int gtk_tree_store_is_ancestor(MemorySegment tree_store, MemorySegment iter, MemorySegment descendant) {
        var mh$ = gtk_tree_store_is_ancestor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_is_ancestor", tree_store, iter, descendant);
            }
            return (int)mh$.invokeExact(tree_store, iter, descendant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_iter_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_iter_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_store_iter_depth(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_iter_depth$descriptor() {
        return gtk_tree_store_iter_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_store_iter_depth(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_store_iter_depth$handle() {
        return gtk_tree_store_iter_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_store_iter_depth(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_store_iter_depth(MemorySegment tree_store, MemorySegment iter) {
        var mh$ = gtk_tree_store_iter_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_iter_depth", tree_store, iter);
            }
            return (int)mh$.invokeExact(tree_store, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_clear(GtkTreeStore *tree_store)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_clear$descriptor() {
        return gtk_tree_store_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_clear(GtkTreeStore *tree_store)
     * }
     */
    public static MethodHandle gtk_tree_store_clear$handle() {
        return gtk_tree_store_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_clear(GtkTreeStore *tree_store)
     * }
     */
    public static void gtk_tree_store_clear(MemorySegment tree_store) {
        var mh$ = gtk_tree_store_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_clear", tree_store);
            }
            mh$.invokeExact(tree_store);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_iter_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_iter_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_iter_is_valid(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_iter_is_valid$descriptor() {
        return gtk_tree_store_iter_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_iter_is_valid(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_store_iter_is_valid$handle() {
        return gtk_tree_store_iter_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_store_iter_is_valid(GtkTreeStore *tree_store, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_store_iter_is_valid(MemorySegment tree_store, MemorySegment iter) {
        var mh$ = gtk_tree_store_iter_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_iter_is_valid", tree_store, iter);
            }
            return (int)mh$.invokeExact(tree_store, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_reorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_reorder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_reorder(GtkTreeStore *tree_store, GtkTreeIter *parent, gint *new_order)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_reorder$descriptor() {
        return gtk_tree_store_reorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_reorder(GtkTreeStore *tree_store, GtkTreeIter *parent, gint *new_order)
     * }
     */
    public static MethodHandle gtk_tree_store_reorder$handle() {
        return gtk_tree_store_reorder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_reorder(GtkTreeStore *tree_store, GtkTreeIter *parent, gint *new_order)
     * }
     */
    public static void gtk_tree_store_reorder(MemorySegment tree_store, MemorySegment parent, MemorySegment new_order) {
        var mh$ = gtk_tree_store_reorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_reorder", tree_store, parent, new_order);
            }
            mh$.invokeExact(tree_store, parent, new_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_swap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_swap(GtkTreeStore *tree_store, GtkTreeIter *a, GtkTreeIter *b)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_swap$descriptor() {
        return gtk_tree_store_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_swap(GtkTreeStore *tree_store, GtkTreeIter *a, GtkTreeIter *b)
     * }
     */
    public static MethodHandle gtk_tree_store_swap$handle() {
        return gtk_tree_store_swap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_swap(GtkTreeStore *tree_store, GtkTreeIter *a, GtkTreeIter *b)
     * }
     */
    public static void gtk_tree_store_swap(MemorySegment tree_store, MemorySegment a, MemorySegment b) {
        var mh$ = gtk_tree_store_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_swap", tree_store, a, b);
            }
            mh$.invokeExact(tree_store, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_move_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_move_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_move_before(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_move_before$descriptor() {
        return gtk_tree_store_move_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_move_before(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static MethodHandle gtk_tree_store_move_before$handle() {
        return gtk_tree_store_move_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_move_before(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static void gtk_tree_store_move_before(MemorySegment tree_store, MemorySegment iter, MemorySegment position) {
        var mh$ = gtk_tree_store_move_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_move_before", tree_store, iter, position);
            }
            mh$.invokeExact(tree_store, iter, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_store_move_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_store_move_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_move_after(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static FunctionDescriptor gtk_tree_store_move_after$descriptor() {
        return gtk_tree_store_move_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_store_move_after(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static MethodHandle gtk_tree_store_move_after$handle() {
        return gtk_tree_store_move_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_store_move_after(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static void gtk_tree_store_move_after(MemorySegment tree_store, MemorySegment iter, MemorySegment position) {
        var mh$ = gtk_tree_store_move_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_store_move_after", tree_store, iter, position);
            }
            mh$.invokeExact(tree_store, iter, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_rc_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_rc_flags_get_type$descriptor() {
        return gtk_rc_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_rc_flags_get_type()
     * }
     */
    public static MethodHandle gtk_rc_flags_get_type$handle() {
        return gtk_rc_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_rc_flags_get_type()
     * }
     */
    public static long gtk_rc_flags_get_type() {
        var mh$ = gtk_rc_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_token_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_token_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_rc_token_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_rc_token_type_get_type$descriptor() {
        return gtk_rc_token_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_rc_token_type_get_type()
     * }
     */
    public static MethodHandle gtk_rc_token_type_get_type$handle() {
        return gtk_rc_token_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_rc_token_type_get_type()
     * }
     */
    public static long gtk_rc_token_type_get_type() {
        var mh$ = gtk_rc_token_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_token_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_path_priority_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_path_priority_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_path_priority_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_path_priority_type_get_type$descriptor() {
        return gtk_path_priority_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_path_priority_type_get_type()
     * }
     */
    public static MethodHandle gtk_path_priority_type_get_type$handle() {
        return gtk_path_priority_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_path_priority_type_get_type()
     * }
     */
    public static long gtk_path_priority_type_get_type() {
        var mh$ = gtk_path_priority_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_path_priority_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_path_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_path_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_path_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_path_type_get_type$descriptor() {
        return gtk_path_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_path_type_get_type()
     * }
     */
    public static MethodHandle gtk_path_type_get_type$handle() {
        return gtk_path_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_path_type_get_type()
     * }
     */
    public static long gtk_path_type_get_type() {
        var mh$ = gtk_path_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_path_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_expander_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_expander_style_get_type$descriptor() {
        return gtk_expander_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_expander_style_get_type()
     * }
     */
    public static MethodHandle gtk_expander_style_get_type$handle() {
        return gtk_expander_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_expander_style_get_type()
     * }
     */
    public static long gtk_expander_style_get_type() {
        var mh$ = gtk_expander_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_attach_options_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_attach_options_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_attach_options_get_type()
     * }
     */
    public static FunctionDescriptor gtk_attach_options_get_type$descriptor() {
        return gtk_attach_options_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_attach_options_get_type()
     * }
     */
    public static MethodHandle gtk_attach_options_get_type$handle() {
        return gtk_attach_options_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_attach_options_get_type()
     * }
     */
    public static long gtk_attach_options_get_type() {
        var mh$ = gtk_attach_options_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_attach_options_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_item_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_item_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_ui_manager_item_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_item_type_get_type$descriptor() {
        return gtk_ui_manager_item_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_ui_manager_item_type_get_type()
     * }
     */
    public static MethodHandle gtk_ui_manager_item_type_get_type$handle() {
        return gtk_ui_manager_item_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_ui_manager_item_type_get_type()
     * }
     */
    public static long gtk_ui_manager_item_type_get_type() {
        var mh$ = gtk_ui_manager_item_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_item_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_license_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_license_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_license_get_type()
     * }
     */
    public static FunctionDescriptor gtk_license_get_type$descriptor() {
        return gtk_license_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_license_get_type()
     * }
     */
    public static MethodHandle gtk_license_get_type$handle() {
        return gtk_license_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_license_get_type()
     * }
     */
    public static long gtk_license_get_type() {
        var mh$ = gtk_license_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_license_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_accel_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_accel_flags_get_type$descriptor() {
        return gtk_accel_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_accel_flags_get_type()
     * }
     */
    public static MethodHandle gtk_accel_flags_get_type$handle() {
        return gtk_accel_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_accel_flags_get_type()
     * }
     */
    public static long gtk_accel_flags_get_type() {
        var mh$ = gtk_accel_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_inhibit_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_inhibit_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_application_inhibit_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_application_inhibit_flags_get_type$descriptor() {
        return gtk_application_inhibit_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_application_inhibit_flags_get_type()
     * }
     */
    public static MethodHandle gtk_application_inhibit_flags_get_type$handle() {
        return gtk_application_inhibit_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_application_inhibit_flags_get_type()
     * }
     */
    public static long gtk_application_inhibit_flags_get_type() {
        var mh$ = gtk_application_inhibit_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_inhibit_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_page_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_page_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_assistant_page_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_assistant_page_type_get_type$descriptor() {
        return gtk_assistant_page_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_assistant_page_type_get_type()
     * }
     */
    public static MethodHandle gtk_assistant_page_type_get_type$handle() {
        return gtk_assistant_page_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_assistant_page_type_get_type()
     * }
     */
    public static long gtk_assistant_page_type_get_type() {
        var mh$ = gtk_assistant_page_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_page_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_button_box_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_button_box_style_get_type$descriptor() {
        return gtk_button_box_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_button_box_style_get_type()
     * }
     */
    public static MethodHandle gtk_button_box_style_get_type$handle() {
        return gtk_button_box_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_button_box_style_get_type()
     * }
     */
    public static long gtk_button_box_style_get_type() {
        var mh$ = gtk_button_box_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_builder_error_get_type()
     * }
     */
    public static FunctionDescriptor gtk_builder_error_get_type$descriptor() {
        return gtk_builder_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_builder_error_get_type()
     * }
     */
    public static MethodHandle gtk_builder_error_get_type$handle() {
        return gtk_builder_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_builder_error_get_type()
     * }
     */
    public static long gtk_builder_error_get_type() {
        var mh$ = gtk_builder_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_display_options_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_display_options_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_calendar_display_options_get_type()
     * }
     */
    public static FunctionDescriptor gtk_calendar_display_options_get_type$descriptor() {
        return gtk_calendar_display_options_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_calendar_display_options_get_type()
     * }
     */
    public static MethodHandle gtk_calendar_display_options_get_type$handle() {
        return gtk_calendar_display_options_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_calendar_display_options_get_type()
     * }
     */
    public static long gtk_calendar_display_options_get_type() {
        var mh$ = gtk_calendar_display_options_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_display_options_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_state_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_state_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_state_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_state_get_type$descriptor() {
        return gtk_cell_renderer_state_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_state_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_state_get_type$handle() {
        return gtk_cell_renderer_state_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_state_get_type()
     * }
     */
    public static long gtk_cell_renderer_state_get_type() {
        var mh$ = gtk_cell_renderer_state_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_state_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_mode_get_type$descriptor() {
        return gtk_cell_renderer_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_mode_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_mode_get_type$handle() {
        return gtk_cell_renderer_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_mode_get_type()
     * }
     */
    public static long gtk_cell_renderer_mode_get_type() {
        var mh$ = gtk_cell_renderer_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_accel_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_accel_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_accel_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_accel_mode_get_type$descriptor() {
        return gtk_cell_renderer_accel_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_accel_mode_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_accel_mode_get_type$handle() {
        return gtk_cell_renderer_accel_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_accel_mode_get_type()
     * }
     */
    public static long gtk_cell_renderer_accel_mode_get_type() {
        var mh$ = gtk_cell_renderer_accel_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_accel_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_resize_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_resize_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_resize_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_resize_mode_get_type$descriptor() {
        return gtk_resize_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_resize_mode_get_type()
     * }
     */
    public static MethodHandle gtk_resize_mode_get_type$handle() {
        return gtk_resize_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_resize_mode_get_type()
     * }
     */
    public static long gtk_resize_mode_get_type() {
        var mh$ = gtk_resize_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_resize_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_css_provider_error_get_type()
     * }
     */
    public static FunctionDescriptor gtk_css_provider_error_get_type$descriptor() {
        return gtk_css_provider_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_css_provider_error_get_type()
     * }
     */
    public static MethodHandle gtk_css_provider_error_get_type$handle() {
        return gtk_css_provider_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_css_provider_error_get_type()
     * }
     */
    public static long gtk_css_provider_error_get_type() {
        var mh$ = gtk_css_provider_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_css_section_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_css_section_type_get_type$descriptor() {
        return gtk_css_section_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_css_section_type_get_type()
     * }
     */
    public static MethodHandle gtk_css_section_type_get_type$handle() {
        return gtk_css_section_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_css_section_type_get_type()
     * }
     */
    public static long gtk_css_section_type_get_type() {
        var mh$ = gtk_css_section_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_debug_flag_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_debug_flag_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_debug_flag_get_type()
     * }
     */
    public static FunctionDescriptor gtk_debug_flag_get_type$descriptor() {
        return gtk_debug_flag_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_debug_flag_get_type()
     * }
     */
    public static MethodHandle gtk_debug_flag_get_type$handle() {
        return gtk_debug_flag_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_debug_flag_get_type()
     * }
     */
    public static long gtk_debug_flag_get_type() {
        var mh$ = gtk_debug_flag_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_debug_flag_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_dialog_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_dialog_flags_get_type$descriptor() {
        return gtk_dialog_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_dialog_flags_get_type()
     * }
     */
    public static MethodHandle gtk_dialog_flags_get_type$handle() {
        return gtk_dialog_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_dialog_flags_get_type()
     * }
     */
    public static long gtk_dialog_flags_get_type() {
        var mh$ = gtk_dialog_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_response_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_response_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_response_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_response_type_get_type$descriptor() {
        return gtk_response_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_response_type_get_type()
     * }
     */
    public static MethodHandle gtk_response_type_get_type$handle() {
        return gtk_response_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_response_type_get_type()
     * }
     */
    public static long gtk_response_type_get_type() {
        var mh$ = gtk_response_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_response_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dest_defaults_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dest_defaults_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_dest_defaults_get_type()
     * }
     */
    public static FunctionDescriptor gtk_dest_defaults_get_type$descriptor() {
        return gtk_dest_defaults_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_dest_defaults_get_type()
     * }
     */
    public static MethodHandle gtk_dest_defaults_get_type$handle() {
        return gtk_dest_defaults_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_dest_defaults_get_type()
     * }
     */
    public static long gtk_dest_defaults_get_type() {
        var mh$ = gtk_dest_defaults_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dest_defaults_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_icon_position_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_icon_position_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_entry_icon_position_get_type()
     * }
     */
    public static FunctionDescriptor gtk_entry_icon_position_get_type$descriptor() {
        return gtk_entry_icon_position_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_entry_icon_position_get_type()
     * }
     */
    public static MethodHandle gtk_entry_icon_position_get_type$handle() {
        return gtk_entry_icon_position_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_entry_icon_position_get_type()
     * }
     */
    public static long gtk_entry_icon_position_get_type() {
        var mh$ = gtk_entry_icon_position_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_icon_position_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_align_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_align_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_align_get_type()
     * }
     */
    public static FunctionDescriptor gtk_align_get_type$descriptor() {
        return gtk_align_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_align_get_type()
     * }
     */
    public static MethodHandle gtk_align_get_type$handle() {
        return gtk_align_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_align_get_type()
     * }
     */
    public static long gtk_align_get_type() {
        var mh$ = gtk_align_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_align_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_arrow_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_arrow_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_arrow_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_arrow_type_get_type$descriptor() {
        return gtk_arrow_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_arrow_type_get_type()
     * }
     */
    public static MethodHandle gtk_arrow_type_get_type$handle() {
        return gtk_arrow_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_arrow_type_get_type()
     * }
     */
    public static long gtk_arrow_type_get_type() {
        var mh$ = gtk_arrow_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_arrow_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_baseline_position_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_baseline_position_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_baseline_position_get_type()
     * }
     */
    public static FunctionDescriptor gtk_baseline_position_get_type$descriptor() {
        return gtk_baseline_position_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_baseline_position_get_type()
     * }
     */
    public static MethodHandle gtk_baseline_position_get_type$handle() {
        return gtk_baseline_position_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_baseline_position_get_type()
     * }
     */
    public static long gtk_baseline_position_get_type() {
        var mh$ = gtk_baseline_position_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_baseline_position_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_delete_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_delete_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_delete_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_delete_type_get_type$descriptor() {
        return gtk_delete_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_delete_type_get_type()
     * }
     */
    public static MethodHandle gtk_delete_type_get_type$handle() {
        return gtk_delete_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_delete_type_get_type()
     * }
     */
    public static long gtk_delete_type_get_type() {
        var mh$ = gtk_delete_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_delete_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_direction_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_direction_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_direction_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_direction_type_get_type$descriptor() {
        return gtk_direction_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_direction_type_get_type()
     * }
     */
    public static MethodHandle gtk_direction_type_get_type$handle() {
        return gtk_direction_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_direction_type_get_type()
     * }
     */
    public static long gtk_direction_type_get_type() {
        var mh$ = gtk_direction_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_direction_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_size_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_size_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_size_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_size_get_type$descriptor() {
        return gtk_icon_size_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_size_get_type()
     * }
     */
    public static MethodHandle gtk_icon_size_get_type$handle() {
        return gtk_icon_size_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_size_get_type()
     * }
     */
    public static long gtk_icon_size_get_type() {
        var mh$ = gtk_icon_size_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_size_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_sensitivity_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_sensitivity_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_sensitivity_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_sensitivity_type_get_type$descriptor() {
        return gtk_sensitivity_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_sensitivity_type_get_type()
     * }
     */
    public static MethodHandle gtk_sensitivity_type_get_type$handle() {
        return gtk_sensitivity_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_sensitivity_type_get_type()
     * }
     */
    public static long gtk_sensitivity_type_get_type() {
        var mh$ = gtk_sensitivity_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_sensitivity_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_direction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_direction_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_direction_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_direction_get_type$descriptor() {
        return gtk_text_direction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_direction_get_type()
     * }
     */
    public static MethodHandle gtk_text_direction_get_type$handle() {
        return gtk_text_direction_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_direction_get_type()
     * }
     */
    public static long gtk_text_direction_get_type() {
        var mh$ = gtk_text_direction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_direction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_justification_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_justification_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_justification_get_type()
     * }
     */
    public static FunctionDescriptor gtk_justification_get_type$descriptor() {
        return gtk_justification_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_justification_get_type()
     * }
     */
    public static MethodHandle gtk_justification_get_type$handle() {
        return gtk_justification_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_justification_get_type()
     * }
     */
    public static long gtk_justification_get_type() {
        var mh$ = gtk_justification_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_justification_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_direction_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_direction_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_menu_direction_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_menu_direction_type_get_type$descriptor() {
        return gtk_menu_direction_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_menu_direction_type_get_type()
     * }
     */
    public static MethodHandle gtk_menu_direction_type_get_type$handle() {
        return gtk_menu_direction_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_menu_direction_type_get_type()
     * }
     */
    public static long gtk_menu_direction_type_get_type() {
        var mh$ = gtk_menu_direction_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_direction_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_message_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_message_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_message_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_message_type_get_type$descriptor() {
        return gtk_message_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_message_type_get_type()
     * }
     */
    public static MethodHandle gtk_message_type_get_type$handle() {
        return gtk_message_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_message_type_get_type()
     * }
     */
    public static long gtk_message_type_get_type() {
        var mh$ = gtk_message_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_message_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_movement_step_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_movement_step_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_movement_step_get_type()
     * }
     */
    public static FunctionDescriptor gtk_movement_step_get_type$descriptor() {
        return gtk_movement_step_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_movement_step_get_type()
     * }
     */
    public static MethodHandle gtk_movement_step_get_type$handle() {
        return gtk_movement_step_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_movement_step_get_type()
     * }
     */
    public static long gtk_movement_step_get_type() {
        var mh$ = gtk_movement_step_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_movement_step_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scroll_step_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scroll_step_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scroll_step_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scroll_step_get_type$descriptor() {
        return gtk_scroll_step_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scroll_step_get_type()
     * }
     */
    public static MethodHandle gtk_scroll_step_get_type$handle() {
        return gtk_scroll_step_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scroll_step_get_type()
     * }
     */
    public static long gtk_scroll_step_get_type() {
        var mh$ = gtk_scroll_step_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scroll_step_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_orientation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_orientation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_orientation_get_type()
     * }
     */
    public static FunctionDescriptor gtk_orientation_get_type$descriptor() {
        return gtk_orientation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_orientation_get_type()
     * }
     */
    public static MethodHandle gtk_orientation_get_type$handle() {
        return gtk_orientation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_orientation_get_type()
     * }
     */
    public static long gtk_orientation_get_type() {
        var mh$ = gtk_orientation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_orientation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_pack_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pack_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_pack_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_pack_type_get_type$descriptor() {
        return gtk_pack_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_pack_type_get_type()
     * }
     */
    public static MethodHandle gtk_pack_type_get_type$handle() {
        return gtk_pack_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_pack_type_get_type()
     * }
     */
    public static long gtk_pack_type_get_type() {
        var mh$ = gtk_pack_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pack_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_position_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_position_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_position_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_position_type_get_type$descriptor() {
        return gtk_position_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_position_type_get_type()
     * }
     */
    public static MethodHandle gtk_position_type_get_type$handle() {
        return gtk_position_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_position_type_get_type()
     * }
     */
    public static long gtk_position_type_get_type() {
        var mh$ = gtk_position_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_position_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_relief_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_relief_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_relief_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_relief_style_get_type$descriptor() {
        return gtk_relief_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_relief_style_get_type()
     * }
     */
    public static MethodHandle gtk_relief_style_get_type$handle() {
        return gtk_relief_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_relief_style_get_type()
     * }
     */
    public static long gtk_relief_style_get_type() {
        var mh$ = gtk_relief_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_relief_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scroll_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scroll_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scroll_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scroll_type_get_type$descriptor() {
        return gtk_scroll_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scroll_type_get_type()
     * }
     */
    public static MethodHandle gtk_scroll_type_get_type$handle() {
        return gtk_scroll_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scroll_type_get_type()
     * }
     */
    public static long gtk_scroll_type_get_type() {
        var mh$ = gtk_scroll_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scroll_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_selection_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_selection_mode_get_type$descriptor() {
        return gtk_selection_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_selection_mode_get_type()
     * }
     */
    public static MethodHandle gtk_selection_mode_get_type$handle() {
        return gtk_selection_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_selection_mode_get_type()
     * }
     */
    public static long gtk_selection_mode_get_type() {
        var mh$ = gtk_selection_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shadow_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shadow_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_shadow_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_shadow_type_get_type$descriptor() {
        return gtk_shadow_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_shadow_type_get_type()
     * }
     */
    public static MethodHandle gtk_shadow_type_get_type$handle() {
        return gtk_shadow_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_shadow_type_get_type()
     * }
     */
    public static long gtk_shadow_type_get_type() {
        var mh$ = gtk_shadow_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shadow_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_state_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_state_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_state_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_state_type_get_type$descriptor() {
        return gtk_state_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_state_type_get_type()
     * }
     */
    public static MethodHandle gtk_state_type_get_type$handle() {
        return gtk_state_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_state_type_get_type()
     * }
     */
    public static long gtk_state_type_get_type() {
        var mh$ = gtk_state_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_state_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_toolbar_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_toolbar_style_get_type$descriptor() {
        return gtk_toolbar_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_toolbar_style_get_type()
     * }
     */
    public static MethodHandle gtk_toolbar_style_get_type$handle() {
        return gtk_toolbar_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_toolbar_style_get_type()
     * }
     */
    public static long gtk_toolbar_style_get_type() {
        var mh$ = gtk_toolbar_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_wrap_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_wrap_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_wrap_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_wrap_mode_get_type$descriptor() {
        return gtk_wrap_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_wrap_mode_get_type()
     * }
     */
    public static MethodHandle gtk_wrap_mode_get_type$handle() {
        return gtk_wrap_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_wrap_mode_get_type()
     * }
     */
    public static long gtk_wrap_mode_get_type() {
        var mh$ = gtk_wrap_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_wrap_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_sort_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_sort_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_sort_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_sort_type_get_type$descriptor() {
        return gtk_sort_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_sort_type_get_type()
     * }
     */
    public static MethodHandle gtk_sort_type_get_type$handle() {
        return gtk_sort_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_sort_type_get_type()
     * }
     */
    public static long gtk_sort_type_get_type() {
        var mh$ = gtk_sort_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_sort_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_preedit_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_preedit_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_im_preedit_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_im_preedit_style_get_type$descriptor() {
        return gtk_im_preedit_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_im_preedit_style_get_type()
     * }
     */
    public static MethodHandle gtk_im_preedit_style_get_type$handle() {
        return gtk_im_preedit_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_im_preedit_style_get_type()
     * }
     */
    public static long gtk_im_preedit_style_get_type() {
        var mh$ = gtk_im_preedit_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_preedit_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_status_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_status_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_im_status_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_im_status_style_get_type$descriptor() {
        return gtk_im_status_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_im_status_style_get_type()
     * }
     */
    public static MethodHandle gtk_im_status_style_get_type$handle() {
        return gtk_im_status_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_im_status_style_get_type()
     * }
     */
    public static long gtk_im_status_style_get_type() {
        var mh$ = gtk_im_status_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_status_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_pack_direction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pack_direction_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_pack_direction_get_type()
     * }
     */
    public static FunctionDescriptor gtk_pack_direction_get_type$descriptor() {
        return gtk_pack_direction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_pack_direction_get_type()
     * }
     */
    public static MethodHandle gtk_pack_direction_get_type$handle() {
        return gtk_pack_direction_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_pack_direction_get_type()
     * }
     */
    public static long gtk_pack_direction_get_type() {
        var mh$ = gtk_pack_direction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pack_direction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_pages_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_pages_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_pages_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_pages_get_type$descriptor() {
        return gtk_print_pages_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_pages_get_type()
     * }
     */
    public static MethodHandle gtk_print_pages_get_type$handle() {
        return gtk_print_pages_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_pages_get_type()
     * }
     */
    public static long gtk_print_pages_get_type() {
        var mh$ = gtk_print_pages_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_pages_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_set_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_set_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_page_set_get_type()
     * }
     */
    public static FunctionDescriptor gtk_page_set_get_type$descriptor() {
        return gtk_page_set_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_page_set_get_type()
     * }
     */
    public static MethodHandle gtk_page_set_get_type$handle() {
        return gtk_page_set_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_page_set_get_type()
     * }
     */
    public static long gtk_page_set_get_type() {
        var mh$ = gtk_page_set_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_set_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_number_up_layout_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_number_up_layout_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_number_up_layout_get_type()
     * }
     */
    public static FunctionDescriptor gtk_number_up_layout_get_type$descriptor() {
        return gtk_number_up_layout_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_number_up_layout_get_type()
     * }
     */
    public static MethodHandle gtk_number_up_layout_get_type$handle() {
        return gtk_number_up_layout_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_number_up_layout_get_type()
     * }
     */
    public static long gtk_number_up_layout_get_type() {
        var mh$ = gtk_number_up_layout_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_number_up_layout_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_orientation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_orientation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_page_orientation_get_type()
     * }
     */
    public static FunctionDescriptor gtk_page_orientation_get_type$descriptor() {
        return gtk_page_orientation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_page_orientation_get_type()
     * }
     */
    public static MethodHandle gtk_page_orientation_get_type$handle() {
        return gtk_page_orientation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_page_orientation_get_type()
     * }
     */
    public static long gtk_page_orientation_get_type() {
        var mh$ = gtk_page_orientation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_orientation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_quality_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_quality_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_quality_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_quality_get_type$descriptor() {
        return gtk_print_quality_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_quality_get_type()
     * }
     */
    public static MethodHandle gtk_print_quality_get_type$handle() {
        return gtk_print_quality_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_quality_get_type()
     * }
     */
    public static long gtk_print_quality_get_type() {
        var mh$ = gtk_print_quality_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_quality_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_duplex_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_duplex_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_duplex_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_duplex_get_type$descriptor() {
        return gtk_print_duplex_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_duplex_get_type()
     * }
     */
    public static MethodHandle gtk_print_duplex_get_type$handle() {
        return gtk_print_duplex_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_duplex_get_type()
     * }
     */
    public static long gtk_print_duplex_get_type() {
        var mh$ = gtk_print_duplex_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_duplex_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_unit_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_unit_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_unit_get_type()
     * }
     */
    public static FunctionDescriptor gtk_unit_get_type$descriptor() {
        return gtk_unit_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_unit_get_type()
     * }
     */
    public static MethodHandle gtk_unit_get_type$handle() {
        return gtk_unit_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_unit_get_type()
     * }
     */
    public static long gtk_unit_get_type() {
        var mh$ = gtk_unit_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_unit_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_grid_lines_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_grid_lines_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_grid_lines_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_view_grid_lines_get_type$descriptor() {
        return gtk_tree_view_grid_lines_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_grid_lines_get_type()
     * }
     */
    public static MethodHandle gtk_tree_view_grid_lines_get_type$handle() {
        return gtk_tree_view_grid_lines_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_view_grid_lines_get_type()
     * }
     */
    public static long gtk_tree_view_grid_lines_get_type() {
        var mh$ = gtk_tree_view_grid_lines_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_grid_lines_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_result_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_result_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_drag_result_get_type()
     * }
     */
    public static FunctionDescriptor gtk_drag_result_get_type$descriptor() {
        return gtk_drag_result_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_drag_result_get_type()
     * }
     */
    public static MethodHandle gtk_drag_result_get_type$handle() {
        return gtk_drag_result_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_drag_result_get_type()
     * }
     */
    public static long gtk_drag_result_get_type() {
        var mh$ = gtk_drag_result_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_result_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_size_group_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_size_group_mode_get_type$descriptor() {
        return gtk_size_group_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_size_group_mode_get_type()
     * }
     */
    public static MethodHandle gtk_size_group_mode_get_type$handle() {
        return gtk_size_group_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_size_group_mode_get_type()
     * }
     */
    public static long gtk_size_group_mode_get_type() {
        var mh$ = gtk_size_group_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_request_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_request_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_size_request_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_size_request_mode_get_type$descriptor() {
        return gtk_size_request_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_size_request_mode_get_type()
     * }
     */
    public static MethodHandle gtk_size_request_mode_get_type$handle() {
        return gtk_size_request_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_size_request_mode_get_type()
     * }
     */
    public static long gtk_size_request_mode_get_type() {
        var mh$ = gtk_size_request_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_request_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_scrollable_policy_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_scrollable_policy_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_scrollable_policy_get_type()
     * }
     */
    public static FunctionDescriptor gtk_scrollable_policy_get_type$descriptor() {
        return gtk_scrollable_policy_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_scrollable_policy_get_type()
     * }
     */
    public static MethodHandle gtk_scrollable_policy_get_type$handle() {
        return gtk_scrollable_policy_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_scrollable_policy_get_type()
     * }
     */
    public static long gtk_scrollable_policy_get_type() {
        var mh$ = gtk_scrollable_policy_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_scrollable_policy_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_state_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_state_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_state_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_state_flags_get_type$descriptor() {
        return gtk_state_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_state_flags_get_type()
     * }
     */
    public static MethodHandle gtk_state_flags_get_type$handle() {
        return gtk_state_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_state_flags_get_type()
     * }
     */
    public static long gtk_state_flags_get_type() {
        var mh$ = gtk_state_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_state_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_region_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_region_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_region_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_region_flags_get_type$descriptor() {
        return gtk_region_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_region_flags_get_type()
     * }
     */
    public static MethodHandle gtk_region_flags_get_type$handle() {
        return gtk_region_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_region_flags_get_type()
     * }
     */
    public static long gtk_region_flags_get_type() {
        var mh$ = gtk_region_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_region_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_junction_sides_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_junction_sides_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_junction_sides_get_type()
     * }
     */
    public static FunctionDescriptor gtk_junction_sides_get_type$descriptor() {
        return gtk_junction_sides_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_junction_sides_get_type()
     * }
     */
    public static MethodHandle gtk_junction_sides_get_type$handle() {
        return gtk_junction_sides_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_junction_sides_get_type()
     * }
     */
    public static long gtk_junction_sides_get_type() {
        var mh$ = gtk_junction_sides_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_junction_sides_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_border_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_border_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_border_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_border_style_get_type$descriptor() {
        return gtk_border_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_border_style_get_type()
     * }
     */
    public static MethodHandle gtk_border_style_get_type$handle() {
        return gtk_border_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_border_style_get_type()
     * }
     */
    public static long gtk_border_style_get_type() {
        var mh$ = gtk_border_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_border_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_level_bar_mode_get_type()
     * }
     */
    public static FunctionDescriptor gtk_level_bar_mode_get_type$descriptor() {
        return gtk_level_bar_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_level_bar_mode_get_type()
     * }
     */
    public static MethodHandle gtk_level_bar_mode_get_type$handle() {
        return gtk_level_bar_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_level_bar_mode_get_type()
     * }
     */
    public static long gtk_level_bar_mode_get_type() {
        var mh$ = gtk_level_bar_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_input_purpose_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_input_purpose_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_input_purpose_get_type()
     * }
     */
    public static FunctionDescriptor gtk_input_purpose_get_type$descriptor() {
        return gtk_input_purpose_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_input_purpose_get_type()
     * }
     */
    public static MethodHandle gtk_input_purpose_get_type$handle() {
        return gtk_input_purpose_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_input_purpose_get_type()
     * }
     */
    public static long gtk_input_purpose_get_type() {
        var mh$ = gtk_input_purpose_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_input_purpose_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_input_hints_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_input_hints_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_input_hints_get_type()
     * }
     */
    public static FunctionDescriptor gtk_input_hints_get_type$descriptor() {
        return gtk_input_hints_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_input_hints_get_type()
     * }
     */
    public static MethodHandle gtk_input_hints_get_type$handle() {
        return gtk_input_hints_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_input_hints_get_type()
     * }
     */
    public static long gtk_input_hints_get_type() {
        var mh$ = gtk_input_hints_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_input_hints_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_propagation_phase_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_propagation_phase_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_propagation_phase_get_type()
     * }
     */
    public static FunctionDescriptor gtk_propagation_phase_get_type$descriptor() {
        return gtk_propagation_phase_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_propagation_phase_get_type()
     * }
     */
    public static MethodHandle gtk_propagation_phase_get_type$handle() {
        return gtk_propagation_phase_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_propagation_phase_get_type()
     * }
     */
    public static long gtk_propagation_phase_get_type() {
        var mh$ = gtk_propagation_phase_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_propagation_phase_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_sequence_state_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_sequence_state_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_event_sequence_state_get_type()
     * }
     */
    public static FunctionDescriptor gtk_event_sequence_state_get_type$descriptor() {
        return gtk_event_sequence_state_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_event_sequence_state_get_type()
     * }
     */
    public static MethodHandle gtk_event_sequence_state_get_type$handle() {
        return gtk_event_sequence_state_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_event_sequence_state_get_type()
     * }
     */
    public static long gtk_event_sequence_state_get_type() {
        var mh$ = gtk_event_sequence_state_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_sequence_state_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_pan_direction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pan_direction_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_pan_direction_get_type()
     * }
     */
    public static FunctionDescriptor gtk_pan_direction_get_type$descriptor() {
        return gtk_pan_direction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_pan_direction_get_type()
     * }
     */
    public static MethodHandle gtk_pan_direction_get_type$handle() {
        return gtk_pan_direction_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_pan_direction_get_type()
     * }
     */
    public static long gtk_pan_direction_get_type() {
        var mh$ = gtk_pan_direction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pan_direction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_constraint_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_constraint_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_popover_constraint_get_type()
     * }
     */
    public static FunctionDescriptor gtk_popover_constraint_get_type$descriptor() {
        return gtk_popover_constraint_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_popover_constraint_get_type()
     * }
     */
    public static MethodHandle gtk_popover_constraint_get_type$handle() {
        return gtk_popover_constraint_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_popover_constraint_get_type()
     * }
     */
    public static long gtk_popover_constraint_get_type() {
        var mh$ = gtk_popover_constraint_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_constraint_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_scroll_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_scroll_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_scroll_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_event_controller_scroll_flags_get_type$descriptor() {
        return gtk_event_controller_scroll_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_scroll_flags_get_type()
     * }
     */
    public static MethodHandle gtk_event_controller_scroll_flags_get_type$handle() {
        return gtk_event_controller_scroll_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_event_controller_scroll_flags_get_type()
     * }
     */
    public static long gtk_event_controller_scroll_flags_get_type() {
        var mh$ = gtk_event_controller_scroll_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_scroll_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_action_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_action_get_type$descriptor() {
        return gtk_file_chooser_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_action_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_action_get_type$handle() {
        return gtk_file_chooser_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_action_get_type()
     * }
     */
    public static long gtk_file_chooser_action_get_type() {
        var mh$ = gtk_file_chooser_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_confirmation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_confirmation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_confirmation_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_confirmation_get_type$descriptor() {
        return gtk_file_chooser_confirmation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_confirmation_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_confirmation_get_type$handle() {
        return gtk_file_chooser_confirmation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_confirmation_get_type()
     * }
     */
    public static long gtk_file_chooser_confirmation_get_type() {
        var mh$ = gtk_file_chooser_confirmation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_confirmation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_error_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_error_get_type$descriptor() {
        return gtk_file_chooser_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_error_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_error_get_type$handle() {
        return gtk_file_chooser_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_error_get_type()
     * }
     */
    public static long gtk_file_chooser_error_get_type() {
        var mh$ = gtk_file_chooser_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_filter_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_filter_flags_get_type$descriptor() {
        return gtk_file_filter_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_filter_flags_get_type()
     * }
     */
    public static MethodHandle gtk_file_filter_flags_get_type$handle() {
        return gtk_file_filter_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_filter_flags_get_type()
     * }
     */
    public static long gtk_file_filter_flags_get_type() {
        var mh$ = gtk_file_filter_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_level_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_level_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_level_get_type()
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_level_get_type$descriptor() {
        return gtk_font_chooser_level_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_level_get_type()
     * }
     */
    public static MethodHandle gtk_font_chooser_level_get_type$handle() {
        return gtk_font_chooser_level_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_level_get_type()
     * }
     */
    public static long gtk_font_chooser_level_get_type() {
        var mh$ = gtk_font_chooser_level_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_level_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_lookup_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_lookup_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_lookup_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_lookup_flags_get_type$descriptor() {
        return gtk_icon_lookup_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_lookup_flags_get_type()
     * }
     */
    public static MethodHandle gtk_icon_lookup_flags_get_type$handle() {
        return gtk_icon_lookup_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_lookup_flags_get_type()
     * }
     */
    public static long gtk_icon_lookup_flags_get_type() {
        var mh$ = gtk_icon_lookup_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_lookup_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_theme_error_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_error_get_type$descriptor() {
        return gtk_icon_theme_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_theme_error_get_type()
     * }
     */
    public static MethodHandle gtk_icon_theme_error_get_type$handle() {
        return gtk_icon_theme_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_theme_error_get_type()
     * }
     */
    public static long gtk_icon_theme_error_get_type() {
        var mh$ = gtk_icon_theme_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_drop_position_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_drop_position_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_view_drop_position_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_view_drop_position_get_type$descriptor() {
        return gtk_icon_view_drop_position_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_view_drop_position_get_type()
     * }
     */
    public static MethodHandle gtk_icon_view_drop_position_get_type$handle() {
        return gtk_icon_view_drop_position_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_view_drop_position_get_type()
     * }
     */
    public static long gtk_icon_view_drop_position_get_type() {
        var mh$ = gtk_icon_view_drop_position_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_drop_position_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_image_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_image_type_get_type$descriptor() {
        return gtk_image_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_image_type_get_type()
     * }
     */
    public static MethodHandle gtk_image_type_get_type$handle() {
        return gtk_image_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_image_type_get_type()
     * }
     */
    public static long gtk_image_type_get_type() {
        var mh$ = gtk_image_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_arrow_placement_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_arrow_placement_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_arrow_placement_get_type()
     * }
     */
    public static FunctionDescriptor gtk_arrow_placement_get_type$descriptor() {
        return gtk_arrow_placement_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_arrow_placement_get_type()
     * }
     */
    public static MethodHandle gtk_arrow_placement_get_type$handle() {
        return gtk_arrow_placement_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_arrow_placement_get_type()
     * }
     */
    public static long gtk_arrow_placement_get_type() {
        var mh$ = gtk_arrow_placement_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_arrow_placement_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buttons_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buttons_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_buttons_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_buttons_type_get_type$descriptor() {
        return gtk_buttons_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_buttons_type_get_type()
     * }
     */
    public static MethodHandle gtk_buttons_type_get_type$handle() {
        return gtk_buttons_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_buttons_type_get_type()
     * }
     */
    public static long gtk_buttons_type_get_type() {
        var mh$ = gtk_buttons_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buttons_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_role_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_role_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_button_role_get_type()
     * }
     */
    public static FunctionDescriptor gtk_button_role_get_type$descriptor() {
        return gtk_button_role_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_button_role_get_type()
     * }
     */
    public static MethodHandle gtk_button_role_get_type$handle() {
        return gtk_button_role_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_button_role_get_type()
     * }
     */
    public static long gtk_button_role_get_type() {
        var mh$ = gtk_button_role_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_role_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_tab_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_tab_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_notebook_tab_get_type()
     * }
     */
    public static FunctionDescriptor gtk_notebook_tab_get_type$descriptor() {
        return gtk_notebook_tab_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_notebook_tab_get_type()
     * }
     */
    public static MethodHandle gtk_notebook_tab_get_type$handle() {
        return gtk_notebook_tab_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_notebook_tab_get_type()
     * }
     */
    public static long gtk_notebook_tab_get_type() {
        var mh$ = gtk_notebook_tab_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_tab_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_pad_action_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pad_action_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_pad_action_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_pad_action_type_get_type$descriptor() {
        return gtk_pad_action_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_pad_action_type_get_type()
     * }
     */
    public static MethodHandle gtk_pad_action_type_get_type$handle() {
        return gtk_pad_action_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_pad_action_type_get_type()
     * }
     */
    public static long gtk_pad_action_type_get_type() {
        var mh$ = gtk_pad_action_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pad_action_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_open_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_open_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_places_open_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_places_open_flags_get_type$descriptor() {
        return gtk_places_open_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_places_open_flags_get_type()
     * }
     */
    public static MethodHandle gtk_places_open_flags_get_type$handle() {
        return gtk_places_open_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_places_open_flags_get_type()
     * }
     */
    public static long gtk_places_open_flags_get_type() {
        var mh$ = gtk_places_open_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_open_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_status_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_status_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_status_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_status_get_type$descriptor() {
        return gtk_print_status_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_status_get_type()
     * }
     */
    public static MethodHandle gtk_print_status_get_type$handle() {
        return gtk_print_status_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_status_get_type()
     * }
     */
    public static long gtk_print_status_get_type() {
        var mh$ = gtk_print_status_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_status_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_result_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_result_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_result_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_operation_result_get_type$descriptor() {
        return gtk_print_operation_result_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_result_get_type()
     * }
     */
    public static MethodHandle gtk_print_operation_result_get_type$handle() {
        return gtk_print_operation_result_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_operation_result_get_type()
     * }
     */
    public static long gtk_print_operation_result_get_type() {
        var mh$ = gtk_print_operation_result_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_result_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_action_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_operation_action_get_type$descriptor() {
        return gtk_print_operation_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_action_get_type()
     * }
     */
    public static MethodHandle gtk_print_operation_action_get_type$handle() {
        return gtk_print_operation_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_operation_action_get_type()
     * }
     */
    public static long gtk_print_operation_action_get_type() {
        var mh$ = gtk_print_operation_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_error_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_error_get_type$descriptor() {
        return gtk_print_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_error_get_type()
     * }
     */
    public static MethodHandle gtk_print_error_get_type$handle() {
        return gtk_print_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_error_get_type()
     * }
     */
    public static long gtk_print_error_get_type() {
        var mh$ = gtk_print_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_sort_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_sort_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_sort_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_sort_type_get_type$descriptor() {
        return gtk_recent_sort_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_sort_type_get_type()
     * }
     */
    public static MethodHandle gtk_recent_sort_type_get_type$handle() {
        return gtk_recent_sort_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_sort_type_get_type()
     * }
     */
    public static long gtk_recent_sort_type_get_type() {
        var mh$ = gtk_recent_sort_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_sort_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_chooser_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_chooser_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_error_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_chooser_error_get_type$descriptor() {
        return gtk_recent_chooser_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_error_get_type()
     * }
     */
    public static MethodHandle gtk_recent_chooser_error_get_type$handle() {
        return gtk_recent_chooser_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_chooser_error_get_type()
     * }
     */
    public static long gtk_recent_chooser_error_get_type() {
        var mh$ = gtk_recent_chooser_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_chooser_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_filter_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_filter_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_filter_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_filter_flags_get_type$descriptor() {
        return gtk_recent_filter_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_filter_flags_get_type()
     * }
     */
    public static MethodHandle gtk_recent_filter_flags_get_type$handle() {
        return gtk_recent_filter_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_filter_flags_get_type()
     * }
     */
    public static long gtk_recent_filter_flags_get_type() {
        var mh$ = gtk_recent_filter_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_filter_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_manager_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_manager_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_manager_error_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_manager_error_get_type$descriptor() {
        return gtk_recent_manager_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_manager_error_get_type()
     * }
     */
    public static MethodHandle gtk_recent_manager_error_get_type$handle() {
        return gtk_recent_manager_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_manager_error_get_type()
     * }
     */
    public static long gtk_recent_manager_error_get_type() {
        var mh$ = gtk_recent_manager_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_manager_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_revealer_transition_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_revealer_transition_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_revealer_transition_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_revealer_transition_type_get_type$descriptor() {
        return gtk_revealer_transition_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_revealer_transition_type_get_type()
     * }
     */
    public static MethodHandle gtk_revealer_transition_type_get_type$handle() {
        return gtk_revealer_transition_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_revealer_transition_type_get_type()
     * }
     */
    public static long gtk_revealer_transition_type_get_type() {
        var mh$ = gtk_revealer_transition_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_revealer_transition_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_corner_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_corner_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_corner_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_corner_type_get_type$descriptor() {
        return gtk_corner_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_corner_type_get_type()
     * }
     */
    public static MethodHandle gtk_corner_type_get_type$handle() {
        return gtk_corner_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_corner_type_get_type()
     * }
     */
    public static long gtk_corner_type_get_type() {
        var mh$ = gtk_corner_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_corner_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_policy_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_policy_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_policy_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_policy_type_get_type$descriptor() {
        return gtk_policy_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_policy_type_get_type()
     * }
     */
    public static MethodHandle gtk_policy_type_get_type$handle() {
        return gtk_policy_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_policy_type_get_type()
     * }
     */
    public static long gtk_policy_type_get_type() {
        var mh$ = gtk_policy_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_policy_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_target_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_target_flags_get_type$descriptor() {
        return gtk_target_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_target_flags_get_type()
     * }
     */
    public static MethodHandle gtk_target_flags_get_type$handle() {
        return gtk_target_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_target_flags_get_type()
     * }
     */
    public static long gtk_target_flags_get_type() {
        var mh$ = gtk_target_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcut_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcut_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_shortcut_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_shortcut_type_get_type$descriptor() {
        return gtk_shortcut_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_shortcut_type_get_type()
     * }
     */
    public static MethodHandle gtk_shortcut_type_get_type$handle() {
        return gtk_shortcut_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_shortcut_type_get_type()
     * }
     */
    public static long gtk_shortcut_type_get_type() {
        var mh$ = gtk_shortcut_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcut_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_button_update_policy_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_button_update_policy_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_spin_button_update_policy_get_type()
     * }
     */
    public static FunctionDescriptor gtk_spin_button_update_policy_get_type$descriptor() {
        return gtk_spin_button_update_policy_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_spin_button_update_policy_get_type()
     * }
     */
    public static MethodHandle gtk_spin_button_update_policy_get_type$handle() {
        return gtk_spin_button_update_policy_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_spin_button_update_policy_get_type()
     * }
     */
    public static long gtk_spin_button_update_policy_get_type() {
        var mh$ = gtk_spin_button_update_policy_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_button_update_policy_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_spin_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_spin_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_spin_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_spin_type_get_type$descriptor() {
        return gtk_spin_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_spin_type_get_type()
     * }
     */
    public static MethodHandle gtk_spin_type_get_type$handle() {
        return gtk_spin_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_spin_type_get_type()
     * }
     */
    public static long gtk_spin_type_get_type() {
        var mh$ = gtk_spin_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_spin_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stack_transition_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stack_transition_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_stack_transition_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_stack_transition_type_get_type$descriptor() {
        return gtk_stack_transition_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_stack_transition_type_get_type()
     * }
     */
    public static MethodHandle gtk_stack_transition_type_get_type$handle() {
        return gtk_stack_transition_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_stack_transition_type_get_type()
     * }
     */
    public static long gtk_stack_transition_type_get_type() {
        var mh$ = gtk_stack_transition_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stack_transition_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_print_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_print_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_style_context_print_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_style_context_print_flags_get_type$descriptor() {
        return gtk_style_context_print_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_style_context_print_flags_get_type()
     * }
     */
    public static MethodHandle gtk_style_context_print_flags_get_type$handle() {
        return gtk_style_context_print_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_style_context_print_flags_get_type()
     * }
     */
    public static long gtk_style_context_print_flags_get_type() {
        var mh$ = gtk_style_context_print_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_print_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_buffer_target_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_buffer_target_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_buffer_target_info_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_buffer_target_info_get_type$descriptor() {
        return gtk_text_buffer_target_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_buffer_target_info_get_type()
     * }
     */
    public static MethodHandle gtk_text_buffer_target_info_get_type$handle() {
        return gtk_text_buffer_target_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_buffer_target_info_get_type()
     * }
     */
    public static long gtk_text_buffer_target_info_get_type() {
        var mh$ = gtk_text_buffer_target_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_buffer_target_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_search_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_search_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_search_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_search_flags_get_type$descriptor() {
        return gtk_text_search_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_search_flags_get_type()
     * }
     */
    public static MethodHandle gtk_text_search_flags_get_type$handle() {
        return gtk_text_search_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_search_flags_get_type()
     * }
     */
    public static long gtk_text_search_flags_get_type() {
        var mh$ = gtk_text_search_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_search_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_window_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_window_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_window_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_window_type_get_type$descriptor() {
        return gtk_text_window_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_window_type_get_type()
     * }
     */
    public static MethodHandle gtk_text_window_type_get_type$handle() {
        return gtk_text_window_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_window_type_get_type()
     * }
     */
    public static long gtk_text_window_type_get_type() {
        var mh$ = gtk_text_window_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_window_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_view_layer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_view_layer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_view_layer_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_view_layer_get_type$descriptor() {
        return gtk_text_view_layer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_view_layer_get_type()
     * }
     */
    public static MethodHandle gtk_text_view_layer_get_type$handle() {
        return gtk_text_view_layer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_view_layer_get_type()
     * }
     */
    public static long gtk_text_view_layer_get_type() {
        var mh$ = gtk_text_view_layer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_view_layer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_extend_selection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_extend_selection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_extend_selection_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_extend_selection_get_type$descriptor() {
        return gtk_text_extend_selection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_extend_selection_get_type()
     * }
     */
    public static MethodHandle gtk_text_extend_selection_get_type$handle() {
        return gtk_text_extend_selection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_extend_selection_get_type()
     * }
     */
    public static long gtk_text_extend_selection_get_type() {
        var mh$ = gtk_text_extend_selection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_extend_selection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toolbar_space_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toolbar_space_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_toolbar_space_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_toolbar_space_style_get_type$descriptor() {
        return gtk_toolbar_space_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_toolbar_space_style_get_type()
     * }
     */
    public static MethodHandle gtk_toolbar_space_style_get_type$handle() {
        return gtk_toolbar_space_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_toolbar_space_style_get_type()
     * }
     */
    public static long gtk_toolbar_space_style_get_type() {
        var mh$ = gtk_toolbar_space_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toolbar_space_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_palette_drag_targets_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_palette_drag_targets_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tool_palette_drag_targets_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tool_palette_drag_targets_get_type$descriptor() {
        return gtk_tool_palette_drag_targets_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tool_palette_drag_targets_get_type()
     * }
     */
    public static MethodHandle gtk_tool_palette_drag_targets_get_type$handle() {
        return gtk_tool_palette_drag_targets_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tool_palette_drag_targets_get_type()
     * }
     */
    public static long gtk_tool_palette_drag_targets_get_type() {
        var mh$ = gtk_tool_palette_drag_targets_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_palette_drag_targets_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_flags_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_model_flags_get_type$descriptor() {
        return gtk_tree_model_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_flags_get_type()
     * }
     */
    public static MethodHandle gtk_tree_model_flags_get_type$handle() {
        return gtk_tree_model_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_model_flags_get_type()
     * }
     */
    public static long gtk_tree_model_flags_get_type() {
        var mh$ = gtk_tree_model_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_drop_position_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_drop_position_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_drop_position_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_view_drop_position_get_type$descriptor() {
        return gtk_tree_view_drop_position_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_drop_position_get_type()
     * }
     */
    public static MethodHandle gtk_tree_view_drop_position_get_type$handle() {
        return gtk_tree_view_drop_position_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_view_drop_position_get_type()
     * }
     */
    public static long gtk_tree_view_drop_position_get_type() {
        var mh$ = gtk_tree_view_drop_position_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_drop_position_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_sizing_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_sizing_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_column_sizing_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_sizing_get_type$descriptor() {
        return gtk_tree_view_column_sizing_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_column_sizing_get_type()
     * }
     */
    public static MethodHandle gtk_tree_view_column_sizing_get_type$handle() {
        return gtk_tree_view_column_sizing_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_view_column_sizing_get_type()
     * }
     */
    public static long gtk_tree_view_column_sizing_get_type() {
        var mh$ = gtk_tree_view_column_sizing_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_sizing_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_help_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_help_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_widget_help_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_widget_help_type_get_type$descriptor() {
        return gtk_widget_help_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_widget_help_type_get_type()
     * }
     */
    public static MethodHandle gtk_widget_help_type_get_type$handle() {
        return gtk_widget_help_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_widget_help_type_get_type()
     * }
     */
    public static long gtk_widget_help_type_get_type() {
        var mh$ = gtk_widget_help_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_help_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_window_type_get_type()
     * }
     */
    public static FunctionDescriptor gtk_window_type_get_type$descriptor() {
        return gtk_window_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_window_type_get_type()
     * }
     */
    public static MethodHandle gtk_window_type_get_type$handle() {
        return gtk_window_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_window_type_get_type()
     * }
     */
    public static long gtk_window_type_get_type() {
        var mh$ = gtk_window_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_position_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_position_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_window_position_get_type()
     * }
     */
    public static FunctionDescriptor gtk_window_position_get_type$descriptor() {
        return gtk_window_position_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_window_position_get_type()
     * }
     */
    public static MethodHandle gtk_window_position_get_type$handle() {
        return gtk_window_position_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_window_position_get_type()
     * }
     */
    public static long gtk_window_position_get_type() {
        var mh$ = gtk_window_position_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_position_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_viewport_get_type()
     * }
     */
    public static FunctionDescriptor gtk_viewport_get_type$descriptor() {
        return gtk_viewport_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_viewport_get_type()
     * }
     */
    public static MethodHandle gtk_viewport_get_type$handle() {
        return gtk_viewport_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_viewport_get_type()
     * }
     */
    public static long gtk_viewport_get_type() {
        var mh$ = gtk_viewport_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_viewport_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static FunctionDescriptor gtk_viewport_new$descriptor() {
        return gtk_viewport_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_viewport_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MethodHandle gtk_viewport_new$handle() {
        return gtk_viewport_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_viewport_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MemorySegment gtk_viewport_new(MemorySegment hadjustment, MemorySegment vadjustment) {
        var mh$ = gtk_viewport_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_new", hadjustment, vadjustment);
            }
            return (MemorySegment)mh$.invokeExact(hadjustment, vadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_get_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_get_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_viewport_get_hadjustment(GtkViewport *viewport)
     * }
     */
    public static FunctionDescriptor gtk_viewport_get_hadjustment$descriptor() {
        return gtk_viewport_get_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_viewport_get_hadjustment(GtkViewport *viewport)
     * }
     */
    public static MethodHandle gtk_viewport_get_hadjustment$handle() {
        return gtk_viewport_get_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_viewport_get_hadjustment(GtkViewport *viewport)
     * }
     */
    public static MemorySegment gtk_viewport_get_hadjustment(MemorySegment viewport) {
        var mh$ = gtk_viewport_get_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_get_hadjustment", viewport);
            }
            return (MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_get_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_get_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_viewport_get_vadjustment(GtkViewport *viewport)
     * }
     */
    public static FunctionDescriptor gtk_viewport_get_vadjustment$descriptor() {
        return gtk_viewport_get_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_viewport_get_vadjustment(GtkViewport *viewport)
     * }
     */
    public static MethodHandle gtk_viewport_get_vadjustment$handle() {
        return gtk_viewport_get_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_viewport_get_vadjustment(GtkViewport *viewport)
     * }
     */
    public static MemorySegment gtk_viewport_get_vadjustment(MemorySegment viewport) {
        var mh$ = gtk_viewport_get_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_get_vadjustment", viewport);
            }
            return (MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_set_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_set_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_viewport_set_hadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_viewport_set_hadjustment$descriptor() {
        return gtk_viewport_set_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_viewport_set_hadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_viewport_set_hadjustment$handle() {
        return gtk_viewport_set_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_viewport_set_hadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_viewport_set_hadjustment(MemorySegment viewport, MemorySegment adjustment) {
        var mh$ = gtk_viewport_set_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_set_hadjustment", viewport, adjustment);
            }
            mh$.invokeExact(viewport, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_set_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_set_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_viewport_set_vadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_viewport_set_vadjustment$descriptor() {
        return gtk_viewport_set_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_viewport_set_vadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_viewport_set_vadjustment$handle() {
        return gtk_viewport_set_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_viewport_set_vadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_viewport_set_vadjustment(MemorySegment viewport, MemorySegment adjustment) {
        var mh$ = gtk_viewport_set_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_set_vadjustment", viewport, adjustment);
            }
            mh$.invokeExact(viewport, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_set_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_set_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_viewport_set_shadow_type(GtkViewport *viewport, GtkShadowType type)
     * }
     */
    public static FunctionDescriptor gtk_viewport_set_shadow_type$descriptor() {
        return gtk_viewport_set_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_viewport_set_shadow_type(GtkViewport *viewport, GtkShadowType type)
     * }
     */
    public static MethodHandle gtk_viewport_set_shadow_type$handle() {
        return gtk_viewport_set_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_viewport_set_shadow_type(GtkViewport *viewport, GtkShadowType type)
     * }
     */
    public static void gtk_viewport_set_shadow_type(MemorySegment viewport, int type) {
        var mh$ = gtk_viewport_set_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_set_shadow_type", viewport, type);
            }
            mh$.invokeExact(viewport, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_get_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_get_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_viewport_get_shadow_type(GtkViewport *viewport)
     * }
     */
    public static FunctionDescriptor gtk_viewport_get_shadow_type$descriptor() {
        return gtk_viewport_get_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_viewport_get_shadow_type(GtkViewport *viewport)
     * }
     */
    public static MethodHandle gtk_viewport_get_shadow_type$handle() {
        return gtk_viewport_get_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkShadowType gtk_viewport_get_shadow_type(GtkViewport *viewport)
     * }
     */
    public static int gtk_viewport_get_shadow_type(MemorySegment viewport) {
        var mh$ = gtk_viewport_get_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_get_shadow_type", viewport);
            }
            return (int)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_get_bin_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_get_bin_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_viewport_get_bin_window(GtkViewport *viewport)
     * }
     */
    public static FunctionDescriptor gtk_viewport_get_bin_window$descriptor() {
        return gtk_viewport_get_bin_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_viewport_get_bin_window(GtkViewport *viewport)
     * }
     */
    public static MethodHandle gtk_viewport_get_bin_window$handle() {
        return gtk_viewport_get_bin_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_viewport_get_bin_window(GtkViewport *viewport)
     * }
     */
    public static MemorySegment gtk_viewport_get_bin_window(MemorySegment viewport) {
        var mh$ = gtk_viewport_get_bin_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_get_bin_window", viewport);
            }
            return (MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_viewport_get_view_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_viewport_get_view_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_viewport_get_view_window(GtkViewport *viewport)
     * }
     */
    public static FunctionDescriptor gtk_viewport_get_view_window$descriptor() {
        return gtk_viewport_get_view_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_viewport_get_view_window(GtkViewport *viewport)
     * }
     */
    public static MethodHandle gtk_viewport_get_view_window$handle() {
        return gtk_viewport_get_view_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_viewport_get_view_window(GtkViewport *viewport)
     * }
     */
    public static MemorySegment gtk_viewport_get_view_window(MemorySegment viewport) {
        var mh$ = gtk_viewport_get_view_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_viewport_get_view_window", viewport);
            }
            return (MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_volume_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_volume_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_volume_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_volume_button_get_type$descriptor() {
        return gtk_volume_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_volume_button_get_type()
     * }
     */
    public static MethodHandle gtk_volume_button_get_type$handle() {
        return gtk_volume_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_volume_button_get_type()
     * }
     */
    public static long gtk_volume_button_get_type() {
        var mh$ = gtk_volume_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_volume_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_volume_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_volume_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_volume_button_new()
     * }
     */
    public static FunctionDescriptor gtk_volume_button_new$descriptor() {
        return gtk_volume_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_volume_button_new()
     * }
     */
    public static MethodHandle gtk_volume_button_new$handle() {
        return gtk_volume_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_volume_button_new()
     * }
     */
    public static MemorySegment gtk_volume_button_new() {
        var mh$ = gtk_volume_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_volume_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_widget_path_get_type()
     * }
     */
    public static FunctionDescriptor gtk_widget_path_get_type$descriptor() {
        return gtk_widget_path_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_widget_path_get_type()
     * }
     */
    public static MethodHandle gtk_widget_path_get_type$handle() {
        return gtk_widget_path_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_widget_path_get_type()
     * }
     */
    public static long gtk_widget_path_get_type() {
        var mh$ = gtk_widget_path_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_new()
     * }
     */
    public static FunctionDescriptor gtk_widget_path_new$descriptor() {
        return gtk_widget_path_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_new()
     * }
     */
    public static MethodHandle gtk_widget_path_new$handle() {
        return gtk_widget_path_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_new()
     * }
     */
    public static MemorySegment gtk_widget_path_new() {
        var mh$ = gtk_widget_path_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_copy(const GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_copy$descriptor() {
        return gtk_widget_path_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_copy(const GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_widget_path_copy$handle() {
        return gtk_widget_path_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_copy(const GtkWidgetPath *path)
     * }
     */
    public static MemorySegment gtk_widget_path_copy(MemorySegment path) {
        var mh$ = gtk_widget_path_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_copy", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_ref(GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_ref$descriptor() {
        return gtk_widget_path_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_ref(GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_widget_path_ref$handle() {
        return gtk_widget_path_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_path_ref(GtkWidgetPath *path)
     * }
     */
    public static MemorySegment gtk_widget_path_ref(MemorySegment path) {
        var mh$ = gtk_widget_path_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_ref", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_unref(GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_unref$descriptor() {
        return gtk_widget_path_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_unref(GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_widget_path_unref$handle() {
        return gtk_widget_path_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_unref(GtkWidgetPath *path)
     * }
     */
    public static void gtk_widget_path_unref(MemorySegment path) {
        var mh$ = gtk_widget_path_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_unref", path);
            }
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_free(GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_free$descriptor() {
        return gtk_widget_path_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_free(GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_widget_path_free$handle() {
        return gtk_widget_path_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_free(GtkWidgetPath *path)
     * }
     */
    public static void gtk_widget_path_free(MemorySegment path) {
        var mh$ = gtk_widget_path_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_free", path);
            }
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_widget_path_to_string(const GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_to_string$descriptor() {
        return gtk_widget_path_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_widget_path_to_string(const GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_widget_path_to_string$handle() {
        return gtk_widget_path_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_widget_path_to_string(const GtkWidgetPath *path)
     * }
     */
    public static MemorySegment gtk_widget_path_to_string(MemorySegment path) {
        var mh$ = gtk_widget_path_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_to_string", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_length(const GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_length$descriptor() {
        return gtk_widget_path_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_length(const GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_widget_path_length$handle() {
        return gtk_widget_path_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_path_length(const GtkWidgetPath *path)
     * }
     */
    public static int gtk_widget_path_length(MemorySegment path) {
        var mh$ = gtk_widget_path_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_length", path);
            }
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_append_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_append_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_type(GtkWidgetPath *path, GType type)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_append_type$descriptor() {
        return gtk_widget_path_append_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_type(GtkWidgetPath *path, GType type)
     * }
     */
    public static MethodHandle gtk_widget_path_append_type$handle() {
        return gtk_widget_path_append_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_type(GtkWidgetPath *path, GType type)
     * }
     */
    public static int gtk_widget_path_append_type(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_append_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_append_type", path, type);
            }
            return (int)mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_prepend_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_prepend_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_prepend_type(GtkWidgetPath *path, GType type)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_prepend_type$descriptor() {
        return gtk_widget_path_prepend_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_prepend_type(GtkWidgetPath *path, GType type)
     * }
     */
    public static MethodHandle gtk_widget_path_prepend_type$handle() {
        return gtk_widget_path_prepend_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_prepend_type(GtkWidgetPath *path, GType type)
     * }
     */
    public static void gtk_widget_path_prepend_type(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_prepend_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_prepend_type", path, type);
            }
            mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_append_with_siblings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_append_with_siblings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_with_siblings(GtkWidgetPath *path, GtkWidgetPath *siblings, guint sibling_index)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_append_with_siblings$descriptor() {
        return gtk_widget_path_append_with_siblings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_with_siblings(GtkWidgetPath *path, GtkWidgetPath *siblings, guint sibling_index)
     * }
     */
    public static MethodHandle gtk_widget_path_append_with_siblings$handle() {
        return gtk_widget_path_append_with_siblings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_with_siblings(GtkWidgetPath *path, GtkWidgetPath *siblings, guint sibling_index)
     * }
     */
    public static int gtk_widget_path_append_with_siblings(MemorySegment path, MemorySegment siblings, int sibling_index) {
        var mh$ = gtk_widget_path_append_with_siblings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_append_with_siblings", path, siblings, sibling_index);
            }
            return (int)mh$.invokeExact(path, siblings, sibling_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_append_for_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_append_for_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_for_widget(GtkWidgetPath *path, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_append_for_widget$descriptor() {
        return gtk_widget_path_append_for_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_for_widget(GtkWidgetPath *path, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_path_append_for_widget$handle() {
        return gtk_widget_path_append_for_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_path_append_for_widget(GtkWidgetPath *path, GtkWidget *widget)
     * }
     */
    public static int gtk_widget_path_append_for_widget(MemorySegment path, MemorySegment widget) {
        var mh$ = gtk_widget_path_append_for_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_append_for_widget", path, widget);
            }
            return (int)mh$.invokeExact(path, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_get_object_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_get_object_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_widget_path_iter_get_object_type(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_get_object_type$descriptor() {
        return gtk_widget_path_iter_get_object_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_widget_path_iter_get_object_type(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_get_object_type$handle() {
        return gtk_widget_path_iter_get_object_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_widget_path_iter_get_object_type(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static long gtk_widget_path_iter_get_object_type(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_object_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_get_object_type", path, pos);
            }
            return (long)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_set_object_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_set_object_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_object_type(GtkWidgetPath *path, gint pos, GType type)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_set_object_type$descriptor() {
        return gtk_widget_path_iter_set_object_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_object_type(GtkWidgetPath *path, gint pos, GType type)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_set_object_type$handle() {
        return gtk_widget_path_iter_set_object_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_object_type(GtkWidgetPath *path, gint pos, GType type)
     * }
     */
    public static void gtk_widget_path_iter_set_object_type(MemorySegment path, int pos, long type) {
        var mh$ = gtk_widget_path_iter_set_object_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_set_object_type", path, pos, type);
            }
            mh$.invokeExact(path, pos, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_get_object_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_get_object_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gtk_widget_path_iter_get_object_name(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_get_object_name$descriptor() {
        return gtk_widget_path_iter_get_object_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gtk_widget_path_iter_get_object_name(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_get_object_name$handle() {
        return gtk_widget_path_iter_get_object_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gtk_widget_path_iter_get_object_name(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MemorySegment gtk_widget_path_iter_get_object_name(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_object_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_get_object_name", path, pos);
            }
            return (MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_set_object_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_set_object_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_object_name(GtkWidgetPath *path, gint pos, const char *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_set_object_name$descriptor() {
        return gtk_widget_path_iter_set_object_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_object_name(GtkWidgetPath *path, gint pos, const char *name)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_set_object_name$handle() {
        return gtk_widget_path_iter_set_object_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_object_name(GtkWidgetPath *path, gint pos, const char *name)
     * }
     */
    public static void gtk_widget_path_iter_set_object_name(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_set_object_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_set_object_name", path, pos, name);
            }
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_get_siblings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_get_siblings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_widget_path_iter_get_siblings(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_get_siblings$descriptor() {
        return gtk_widget_path_iter_get_siblings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_widget_path_iter_get_siblings(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_get_siblings$handle() {
        return gtk_widget_path_iter_get_siblings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_widget_path_iter_get_siblings(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MemorySegment gtk_widget_path_iter_get_siblings(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_siblings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_get_siblings", path, pos);
            }
            return (MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_get_sibling_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_get_sibling_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_widget_path_iter_get_sibling_index(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_get_sibling_index$descriptor() {
        return gtk_widget_path_iter_get_sibling_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_widget_path_iter_get_sibling_index(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_get_sibling_index$handle() {
        return gtk_widget_path_iter_get_sibling_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_widget_path_iter_get_sibling_index(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static int gtk_widget_path_iter_get_sibling_index(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_sibling_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_get_sibling_index", path, pos);
            }
            return (int)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_widget_path_iter_get_name(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_get_name$descriptor() {
        return gtk_widget_path_iter_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_widget_path_iter_get_name(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_get_name$handle() {
        return gtk_widget_path_iter_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_widget_path_iter_get_name(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MemorySegment gtk_widget_path_iter_get_name(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_get_name", path, pos);
            }
            return (MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_name(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_set_name$descriptor() {
        return gtk_widget_path_iter_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_name(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_set_name$handle() {
        return gtk_widget_path_iter_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_name(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static void gtk_widget_path_iter_set_name(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_set_name", path, pos, name);
            }
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_has_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_has_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_name(const GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_has_name$descriptor() {
        return gtk_widget_path_iter_has_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_name(const GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_has_name$handle() {
        return gtk_widget_path_iter_has_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_name(const GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static int gtk_widget_path_iter_has_name(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_has_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_has_name", path, pos, name);
            }
            return (int)mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_has_qname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_has_qname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qname(const GtkWidgetPath *path, gint pos, GQuark qname)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_has_qname$descriptor() {
        return gtk_widget_path_iter_has_qname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qname(const GtkWidgetPath *path, gint pos, GQuark qname)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_has_qname$handle() {
        return gtk_widget_path_iter_has_qname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qname(const GtkWidgetPath *path, gint pos, GQuark qname)
     * }
     */
    public static int gtk_widget_path_iter_has_qname(MemorySegment path, int pos, int qname) {
        var mh$ = gtk_widget_path_iter_has_qname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_has_qname", path, pos, qname);
            }
            return (int)mh$.invokeExact(path, pos, qname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_widget_path_iter_get_state(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_get_state$descriptor() {
        return gtk_widget_path_iter_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_widget_path_iter_get_state(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_get_state$handle() {
        return gtk_widget_path_iter_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_widget_path_iter_get_state(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static int gtk_widget_path_iter_get_state(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_get_state", path, pos);
            }
            return (int)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_set_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_set_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_state(GtkWidgetPath *path, gint pos, GtkStateFlags state)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_set_state$descriptor() {
        return gtk_widget_path_iter_set_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_state(GtkWidgetPath *path, gint pos, GtkStateFlags state)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_set_state$handle() {
        return gtk_widget_path_iter_set_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_set_state(GtkWidgetPath *path, gint pos, GtkStateFlags state)
     * }
     */
    public static void gtk_widget_path_iter_set_state(MemorySegment path, int pos, int state) {
        var mh$ = gtk_widget_path_iter_set_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_set_state", path, pos, state);
            }
            mh$.invokeExact(path, pos, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_add_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_add_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_add_class(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_add_class$descriptor() {
        return gtk_widget_path_iter_add_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_add_class(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_add_class$handle() {
        return gtk_widget_path_iter_add_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_add_class(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static void gtk_widget_path_iter_add_class(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_add_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_add_class", path, pos, name);
            }
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_remove_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_remove_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_remove_class(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_remove_class$descriptor() {
        return gtk_widget_path_iter_remove_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_remove_class(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_remove_class$handle() {
        return gtk_widget_path_iter_remove_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_remove_class(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static void gtk_widget_path_iter_remove_class(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_remove_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_remove_class", path, pos, name);
            }
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_clear_classes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_clear_classes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_clear_classes(GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_clear_classes$descriptor() {
        return gtk_widget_path_iter_clear_classes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_clear_classes(GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_clear_classes$handle() {
        return gtk_widget_path_iter_clear_classes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_clear_classes(GtkWidgetPath *path, gint pos)
     * }
     */
    public static void gtk_widget_path_iter_clear_classes(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_clear_classes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_clear_classes", path, pos);
            }
            mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_list_classes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_list_classes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_widget_path_iter_list_classes(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_list_classes$descriptor() {
        return gtk_widget_path_iter_list_classes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_widget_path_iter_list_classes(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_list_classes$handle() {
        return gtk_widget_path_iter_list_classes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_widget_path_iter_list_classes(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MemorySegment gtk_widget_path_iter_list_classes(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_list_classes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_list_classes", path, pos);
            }
            return (MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_has_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_has_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_class(const GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_has_class$descriptor() {
        return gtk_widget_path_iter_has_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_class(const GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_has_class$handle() {
        return gtk_widget_path_iter_has_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_class(const GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static int gtk_widget_path_iter_has_class(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_has_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_has_class", path, pos, name);
            }
            return (int)mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_has_qclass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_has_qclass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qclass(const GtkWidgetPath *path, gint pos, GQuark qname)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_has_qclass$descriptor() {
        return gtk_widget_path_iter_has_qclass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qclass(const GtkWidgetPath *path, gint pos, GQuark qname)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_has_qclass$handle() {
        return gtk_widget_path_iter_has_qclass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qclass(const GtkWidgetPath *path, gint pos, GQuark qname)
     * }
     */
    public static int gtk_widget_path_iter_has_qclass(MemorySegment path, int pos, int qname) {
        var mh$ = gtk_widget_path_iter_has_qclass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_has_qclass", path, pos, qname);
            }
            return (int)mh$.invokeExact(path, pos, qname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_add_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_add_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_add_region(GtkWidgetPath *path, gint pos, const gchar *name, GtkRegionFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_add_region$descriptor() {
        return gtk_widget_path_iter_add_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_add_region(GtkWidgetPath *path, gint pos, const gchar *name, GtkRegionFlags flags)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_add_region$handle() {
        return gtk_widget_path_iter_add_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_add_region(GtkWidgetPath *path, gint pos, const gchar *name, GtkRegionFlags flags)
     * }
     */
    public static void gtk_widget_path_iter_add_region(MemorySegment path, int pos, MemorySegment name, int flags) {
        var mh$ = gtk_widget_path_iter_add_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_add_region", path, pos, name, flags);
            }
            mh$.invokeExact(path, pos, name, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_remove_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_remove_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_remove_region(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_remove_region$descriptor() {
        return gtk_widget_path_iter_remove_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_remove_region(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_remove_region$handle() {
        return gtk_widget_path_iter_remove_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_remove_region(GtkWidgetPath *path, gint pos, const gchar *name)
     * }
     */
    public static void gtk_widget_path_iter_remove_region(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_remove_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_remove_region", path, pos, name);
            }
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_clear_regions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_clear_regions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_clear_regions(GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_clear_regions$descriptor() {
        return gtk_widget_path_iter_clear_regions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_clear_regions(GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_clear_regions$handle() {
        return gtk_widget_path_iter_clear_regions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path_iter_clear_regions(GtkWidgetPath *path, gint pos)
     * }
     */
    public static void gtk_widget_path_iter_clear_regions(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_clear_regions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_clear_regions", path, pos);
            }
            mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_list_regions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_list_regions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_widget_path_iter_list_regions(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_list_regions$descriptor() {
        return gtk_widget_path_iter_list_regions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_widget_path_iter_list_regions(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_list_regions$handle() {
        return gtk_widget_path_iter_list_regions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_widget_path_iter_list_regions(const GtkWidgetPath *path, gint pos)
     * }
     */
    public static MemorySegment gtk_widget_path_iter_list_regions(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_list_regions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_list_regions", path, pos);
            }
            return (MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_has_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_has_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_region(const GtkWidgetPath *path, gint pos, const gchar *name, GtkRegionFlags *flags)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_has_region$descriptor() {
        return gtk_widget_path_iter_has_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_region(const GtkWidgetPath *path, gint pos, const gchar *name, GtkRegionFlags *flags)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_has_region$handle() {
        return gtk_widget_path_iter_has_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_region(const GtkWidgetPath *path, gint pos, const gchar *name, GtkRegionFlags *flags)
     * }
     */
    public static int gtk_widget_path_iter_has_region(MemorySegment path, int pos, MemorySegment name, MemorySegment flags) {
        var mh$ = gtk_widget_path_iter_has_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_has_region", path, pos, name, flags);
            }
            return (int)mh$.invokeExact(path, pos, name, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_iter_has_qregion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_iter_has_qregion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qregion(const GtkWidgetPath *path, gint pos, GQuark qname, GtkRegionFlags *flags)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_iter_has_qregion$descriptor() {
        return gtk_widget_path_iter_has_qregion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qregion(const GtkWidgetPath *path, gint pos, GQuark qname, GtkRegionFlags *flags)
     * }
     */
    public static MethodHandle gtk_widget_path_iter_has_qregion$handle() {
        return gtk_widget_path_iter_has_qregion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_iter_has_qregion(const GtkWidgetPath *path, gint pos, GQuark qname, GtkRegionFlags *flags)
     * }
     */
    public static int gtk_widget_path_iter_has_qregion(MemorySegment path, int pos, int qname, MemorySegment flags) {
        var mh$ = gtk_widget_path_iter_has_qregion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_iter_has_qregion", path, pos, qname, flags);
            }
            return (int)mh$.invokeExact(path, pos, qname, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_get_object_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_get_object_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_widget_path_get_object_type(const GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_get_object_type$descriptor() {
        return gtk_widget_path_get_object_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_widget_path_get_object_type(const GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_widget_path_get_object_type$handle() {
        return gtk_widget_path_get_object_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_widget_path_get_object_type(const GtkWidgetPath *path)
     * }
     */
    public static long gtk_widget_path_get_object_type(MemorySegment path) {
        var mh$ = gtk_widget_path_get_object_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_get_object_type", path);
            }
            return (long)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_is_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_is_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_is_type(const GtkWidgetPath *path, GType type)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_is_type$descriptor() {
        return gtk_widget_path_is_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_is_type(const GtkWidgetPath *path, GType type)
     * }
     */
    public static MethodHandle gtk_widget_path_is_type$handle() {
        return gtk_widget_path_is_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_is_type(const GtkWidgetPath *path, GType type)
     * }
     */
    public static int gtk_widget_path_is_type(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_is_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_is_type", path, type);
            }
            return (int)mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path_has_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path_has_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_has_parent(const GtkWidgetPath *path, GType type)
     * }
     */
    public static FunctionDescriptor gtk_widget_path_has_parent$descriptor() {
        return gtk_widget_path_has_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_has_parent(const GtkWidgetPath *path, GType type)
     * }
     */
    public static MethodHandle gtk_widget_path_has_parent$handle() {
        return gtk_widget_path_has_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_path_has_parent(const GtkWidgetPath *path, GType type)
     * }
     */
    public static int gtk_widget_path_has_parent(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_has_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path_has_parent", path, type);
            }
            return (int)mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_window_group_get_type()
     * }
     */
    public static FunctionDescriptor gtk_window_group_get_type$descriptor() {
        return gtk_window_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_window_group_get_type()
     * }
     */
    public static MethodHandle gtk_window_group_get_type$handle() {
        return gtk_window_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_window_group_get_type()
     * }
     */
    public static long gtk_window_group_get_type() {
        var mh$ = gtk_window_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindowGroup *gtk_window_group_new()
     * }
     */
    public static FunctionDescriptor gtk_window_group_new$descriptor() {
        return gtk_window_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindowGroup *gtk_window_group_new()
     * }
     */
    public static MethodHandle gtk_window_group_new$handle() {
        return gtk_window_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindowGroup *gtk_window_group_new()
     * }
     */
    public static MemorySegment gtk_window_group_new() {
        var mh$ = gtk_window_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_group_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_group_add_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_group_add_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_group_add_window(GtkWindowGroup *window_group, GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_group_add_window$descriptor() {
        return gtk_window_group_add_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_group_add_window(GtkWindowGroup *window_group, GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_group_add_window$handle() {
        return gtk_window_group_add_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_group_add_window(GtkWindowGroup *window_group, GtkWindow *window)
     * }
     */
    public static void gtk_window_group_add_window(MemorySegment window_group, MemorySegment window) {
        var mh$ = gtk_window_group_add_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_group_add_window", window_group, window);
            }
            mh$.invokeExact(window_group, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_group_remove_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_group_remove_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_group_remove_window(GtkWindowGroup *window_group, GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_group_remove_window$descriptor() {
        return gtk_window_group_remove_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_group_remove_window(GtkWindowGroup *window_group, GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_group_remove_window$handle() {
        return gtk_window_group_remove_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_group_remove_window(GtkWindowGroup *window_group, GtkWindow *window)
     * }
     */
    public static void gtk_window_group_remove_window(MemorySegment window_group, MemorySegment window) {
        var mh$ = gtk_window_group_remove_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_group_remove_window", window_group, window);
            }
            mh$.invokeExact(window_group, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_group_list_windows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_group_list_windows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_window_group_list_windows(GtkWindowGroup *window_group)
     * }
     */
    public static FunctionDescriptor gtk_window_group_list_windows$descriptor() {
        return gtk_window_group_list_windows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_window_group_list_windows(GtkWindowGroup *window_group)
     * }
     */
    public static MethodHandle gtk_window_group_list_windows$handle() {
        return gtk_window_group_list_windows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_window_group_list_windows(GtkWindowGroup *window_group)
     * }
     */
    public static MemorySegment gtk_window_group_list_windows(MemorySegment window_group) {
        var mh$ = gtk_window_group_list_windows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_group_list_windows", window_group);
            }
            return (MemorySegment)mh$.invokeExact(window_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_group_get_current_grab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_group_get_current_grab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_group_get_current_grab(GtkWindowGroup *window_group)
     * }
     */
    public static FunctionDescriptor gtk_window_group_get_current_grab$descriptor() {
        return gtk_window_group_get_current_grab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_group_get_current_grab(GtkWindowGroup *window_group)
     * }
     */
    public static MethodHandle gtk_window_group_get_current_grab$handle() {
        return gtk_window_group_get_current_grab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_group_get_current_grab(GtkWindowGroup *window_group)
     * }
     */
    public static MemorySegment gtk_window_group_get_current_grab(MemorySegment window_group) {
        var mh$ = gtk_window_group_get_current_grab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_group_get_current_grab", window_group);
            }
            return (MemorySegment)mh$.invokeExact(window_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

