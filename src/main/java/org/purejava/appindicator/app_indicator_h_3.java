// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class app_indicator_h_3 extends app_indicator_h_2 {

    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"memcmp");
    }
    /**
     * {@snippet :
     * int memcmp(void* __s1, void* __s2, unsigned long __n);
     * }
     */
    public static int memcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __memcmpeq$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4,"__memcmpeq");
    }
    /**
     * {@snippet :
     * int __memcmpeq(void* __s1, void* __s2, unsigned long __n);
     * }
     */
    public static int __memcmpeq(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = __memcmpeq$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"memchr");
    }
    /**
     * {@snippet :
     * void* memchr(void* __s, int __c, unsigned long __n);
     * }
     */
    public static MemorySegment memchr(MemorySegment __s, int __c, long __n) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"strcpy");
    }
    /**
     * {@snippet :
     * char* strcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment strcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"strncpy");
    }
    /**
     * {@snippet :
     * char* strncpy(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment strncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"strcat");
    }
    /**
     * {@snippet :
     * char* strcat(char* __dest, char* __src);
     * }
     */
    public static MemorySegment strcat(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"strncat");
    }
    /**
     * {@snippet :
     * char* strncat(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment strncat(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"strcmp");
    }
    /**
     * {@snippet :
     * int strcmp(char* __s1, char* __s2);
     * }
     */
    public static int strcmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"strncmp");
    }
    /**
     * {@snippet :
     * int strncmp(char* __s1, char* __s2, unsigned long __n);
     * }
     */
    public static int strncmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"strcoll");
    }
    /**
     * {@snippet :
     * int strcoll(char* __s1, char* __s2);
     * }
     */
    public static int strcoll(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"strxfrm");
    }
    /**
     * {@snippet :
     * unsigned long strxfrm(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static long strxfrm(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"strcoll_l");
    }
    /**
     * {@snippet :
     * int strcoll_l(char* __s1, char* __s2, struct __locale_struct* __l);
     * }
     */
    public static int strcoll_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __l) {
        var mh$ = strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"strxfrm_l");
    }
    /**
     * {@snippet :
     * unsigned long strxfrm_l(char* __dest, char* __src, unsigned long __n, struct __locale_struct* __l);
     * }
     */
    public static long strxfrm_l(MemorySegment __dest, MemorySegment __src, long __n, MemorySegment __l) {
        var mh$ = strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"strdup");
    }
    /**
     * {@snippet :
     * char* strdup(char* __s);
     * }
     */
    public static MemorySegment strdup(MemorySegment __s) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"strndup");
    }
    /**
     * {@snippet :
     * char* strndup(char* __string, unsigned long __n);
     * }
     */
    public static MemorySegment strndup(MemorySegment __string, long __n) {
        var mh$ = strndup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"strchr");
    }
    /**
     * {@snippet :
     * char* strchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strchr(MemorySegment __s, int __c) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"strrchr");
    }
    /**
     * {@snippet :
     * char* strrchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strrchr(MemorySegment __s, int __c) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"strcspn");
    }
    /**
     * {@snippet :
     * unsigned long strcspn(char* __s, char* __reject);
     * }
     */
    public static long strcspn(MemorySegment __s, MemorySegment __reject) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"strspn");
    }
    /**
     * {@snippet :
     * unsigned long strspn(char* __s, char* __accept);
     * }
     */
    public static long strspn(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"strpbrk");
    }
    /**
     * {@snippet :
     * char* strpbrk(char* __s, char* __accept);
     * }
     */
    public static MemorySegment strpbrk(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4,"strstr");
    }
    /**
     * {@snippet :
     * char* strstr(char* __haystack, char* __needle);
     * }
     */
    public static MemorySegment strstr(MemorySegment __haystack, MemorySegment __needle) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"strtok");
    }
    /**
     * {@snippet :
     * char* strtok(char* __s, char* __delim);
     * }
     */
    public static MemorySegment strtok(MemorySegment __s, MemorySegment __delim) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"__strtok_r");
    }
    /**
     * {@snippet :
     * char* __strtok_r(char* __s, char* __delim, char** __save_ptr);
     * }
     */
    public static MemorySegment __strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = __strtok_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"strtok_r");
    }
    /**
     * {@snippet :
     * char* strtok_r(char* __s, char* __delim, char** __save_ptr);
     * }
     */
    public static MemorySegment strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = strtok_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3,"strlen");
    }
    /**
     * {@snippet :
     * unsigned long strlen(char* __s);
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"strnlen");
    }
    /**
     * {@snippet :
     * unsigned long strnlen(char* __string, unsigned long __maxlen);
     * }
     */
    public static long strnlen(MemorySegment __string, long __maxlen) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"strerror");
    }
    /**
     * {@snippet :
     * char* strerror(int __errnum);
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"strerror_r");
    }
    /**
     * {@snippet :
     * int strerror_r(int __errnum, char* __buf, unsigned long __buflen);
     * }
     */
    public static int strerror_r(int __errnum, MemorySegment __buf, long __buflen) {
        var mh$ = strerror_r$MH();
        try {
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"strerror_l");
    }
    /**
     * {@snippet :
     * char* strerror_l(int __errnum, struct __locale_struct* __l);
     * }
     */
    public static MemorySegment strerror_l(int __errnum, MemorySegment __l) {
        var mh$ = strerror_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0,"bcmp");
    }
    /**
     * {@snippet :
     * int bcmp(void* __s1, void* __s2, unsigned long __n);
     * }
     */
    public static int bcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = bcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"bcopy");
    }
    /**
     * {@snippet :
     * void bcopy(void* __src, void* __dest, unsigned long __n);
     * }
     */
    public static void bcopy(MemorySegment __src, MemorySegment __dest, long __n) {
        var mh$ = bcopy$MH();
        try {
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"bzero");
    }
    /**
     * {@snippet :
     * void bzero(void* __s, unsigned long __n);
     * }
     */
    public static void bzero(MemorySegment __s, long __n) {
        var mh$ = bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"index");
    }
    /**
     * {@snippet :
     * char* index(char* __s, int __c);
     * }
     */
    public static MemorySegment index(MemorySegment __s, int __c) {
        var mh$ = index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"rindex");
    }
    /**
     * {@snippet :
     * char* rindex(char* __s, int __c);
     * }
     */
    public static MemorySegment rindex(MemorySegment __s, int __c) {
        var mh$ = rindex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"ffs");
    }
    /**
     * {@snippet :
     * int ffs(int __i);
     * }
     */
    public static int ffs(int __i) {
        var mh$ = ffs$MH();
        try {
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"ffsl");
    }
    /**
     * {@snippet :
     * int ffsl(long __l);
     * }
     */
    public static int ffsl(long __l) {
        var mh$ = ffsl$MH();
        try {
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"ffsll");
    }
    /**
     * {@snippet :
     * int ffsll(long long __ll);
     * }
     */
    public static int ffsll(long __ll) {
        var mh$ = ffsll$MH();
        try {
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"strcasecmp");
    }
    /**
     * {@snippet :
     * int strcasecmp(char* __s1, char* __s2);
     * }
     */
    public static int strcasecmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"strncasecmp");
    }
    /**
     * {@snippet :
     * int strncasecmp(char* __s1, char* __s2, unsigned long __n);
     * }
     */
    public static int strncasecmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"strcasecmp_l");
    }
    /**
     * {@snippet :
     * int strcasecmp_l(char* __s1, char* __s2, struct __locale_struct* __loc);
     * }
     */
    public static int strcasecmp_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __loc) {
        var mh$ = strcasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"strncasecmp_l");
    }
    /**
     * {@snippet :
     * int strncasecmp_l(char* __s1, char* __s2, unsigned long __n, struct __locale_struct* __loc);
     * }
     */
    public static int strncasecmp_l(MemorySegment __s1, MemorySegment __s2, long __n, MemorySegment __loc) {
        var mh$ = strncasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"explicit_bzero");
    }
    /**
     * {@snippet :
     * void explicit_bzero(void* __s, unsigned long __n);
     * }
     */
    public static void explicit_bzero(MemorySegment __s, long __n) {
        var mh$ = explicit_bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"strsep");
    }
    /**
     * {@snippet :
     * char* strsep(char** __stringp, char* __delim);
     * }
     */
    public static MemorySegment strsep(MemorySegment __stringp, MemorySegment __delim) {
        var mh$ = strsep$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"strsignal");
    }
    /**
     * {@snippet :
     * char* strsignal(int __sig);
     * }
     */
    public static MemorySegment strsignal(int __sig) {
        var mh$ = strsignal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"__stpcpy");
    }
    /**
     * {@snippet :
     * char* __stpcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment __stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = __stpcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"stpcpy");
    }
    /**
     * {@snippet :
     * char* stpcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = stpcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3,"__stpncpy");
    }
    /**
     * {@snippet :
     * char* __stpncpy(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment __stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = __stpncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"stpncpy");
    }
    /**
     * {@snippet :
     * char* stpncpy(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = stpncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"g_array_new");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_new(int zero_terminated, int clear_, unsigned int element_size);
     * }
     */
    public static MemorySegment g_array_new(int zero_terminated, int clear_, int element_size) {
        var mh$ = g_array_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(zero_terminated, clear_, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_new_take$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"g_array_new_take");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_new_take(void* data, unsigned long len, int clear, unsigned long element_size);
     * }
     */
    public static MemorySegment g_array_new_take(MemorySegment data, long len, int clear, long element_size) {
        var mh$ = g_array_new_take$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, len, clear, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_new_take_zero_terminated$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"g_array_new_take_zero_terminated");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_new_take_zero_terminated(void* data, int clear, unsigned long element_size);
     * }
     */
    public static MemorySegment g_array_new_take_zero_terminated(MemorySegment data, int clear, long element_size) {
        var mh$ = g_array_new_take_zero_terminated$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, clear, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"g_array_steal");
    }
    /**
     * {@snippet :
     * void* g_array_steal(struct _GArray* array, unsigned long* len);
     * }
     */
    public static MemorySegment g_array_steal(MemorySegment array, MemorySegment len) {
        var mh$ = g_array_steal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"g_array_sized_new");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_sized_new(int zero_terminated, int clear_, unsigned int element_size, unsigned int reserved_size);
     * }
     */
    public static MemorySegment g_array_sized_new(int zero_terminated, int clear_, int element_size, int reserved_size) {
        var mh$ = g_array_sized_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(zero_terminated, clear_, element_size, reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"g_array_copy");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_copy(struct _GArray* array);
     * }
     */
    public static MemorySegment g_array_copy(MemorySegment array) {
        var mh$ = g_array_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"g_array_free");
    }
    /**
     * {@snippet :
     * char* g_array_free(struct _GArray* array, int free_segment);
     * }
     */
    public static MemorySegment g_array_free(MemorySegment array, int free_segment) {
        var mh$ = g_array_free$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"g_array_ref");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_ref(struct _GArray* array);
     * }
     */
    public static MemorySegment g_array_ref(MemorySegment array) {
        var mh$ = g_array_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"g_array_unref");
    }
    /**
     * {@snippet :
     * void g_array_unref(struct _GArray* array);
     * }
     */
    public static void g_array_unref(MemorySegment array) {
        var mh$ = g_array_unref$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_get_element_size$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"g_array_get_element_size");
    }
    /**
     * {@snippet :
     * unsigned int g_array_get_element_size(struct _GArray* array);
     * }
     */
    public static int g_array_get_element_size(MemorySegment array) {
        var mh$ = g_array_get_element_size$MH();
        try {
            return (int)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_append_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"g_array_append_vals");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_append_vals(struct _GArray* array, void* data, unsigned int len);
     * }
     */
    public static MemorySegment g_array_append_vals(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_array_append_vals$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_prepend_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"g_array_prepend_vals");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_prepend_vals(struct _GArray* array, void* data, unsigned int len);
     * }
     */
    public static MemorySegment g_array_prepend_vals(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_array_prepend_vals$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_insert_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"g_array_insert_vals");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_insert_vals(struct _GArray* array, unsigned int index_, void* data, unsigned int len);
     * }
     */
    public static MemorySegment g_array_insert_vals(MemorySegment array, int index_, MemorySegment data, int len) {
        var mh$ = g_array_insert_vals$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"g_array_set_size");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_set_size(struct _GArray* array, unsigned int length);
     * }
     */
    public static MemorySegment g_array_set_size(MemorySegment array, int length) {
        var mh$ = g_array_set_size$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"g_array_remove_index");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_remove_index(struct _GArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_array_remove_index(MemorySegment array, int index_) {
        var mh$ = g_array_remove_index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"g_array_remove_index_fast");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_remove_index_fast(struct _GArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_array_remove_index_fast(MemorySegment array, int index_) {
        var mh$ = g_array_remove_index_fast$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$6,"g_array_remove_range");
    }
    /**
     * {@snippet :
     * struct _GArray* g_array_remove_range(struct _GArray* array, unsigned int index_, unsigned int length);
     * }
     */
    public static MemorySegment g_array_remove_range(MemorySegment array, int index_, int length) {
        var mh$ = g_array_remove_range$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"g_array_sort");
    }
    /**
     * {@snippet :
     * void g_array_sort(struct _GArray* array, int (*compare_func)(void*,void*));
     * }
     */
    public static void g_array_sort(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_array_sort$MH();
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"g_array_sort_with_data");
    }
    /**
     * {@snippet :
     * void g_array_sort_with_data(struct _GArray* array, int (*compare_func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_array_sort_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_array_sort_with_data$MH();
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_binary_search$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$6,"g_array_binary_search");
    }
    /**
     * {@snippet :
     * int g_array_binary_search(struct _GArray* array, void* target, int (*compare_func)(void*,void*), unsigned int* out_match_index);
     * }
     */
    public static int g_array_binary_search(MemorySegment array, MemorySegment target, MemorySegment compare_func, MemorySegment out_match_index) {
        var mh$ = g_array_binary_search$MH();
        try {
            return (int)mh$.invokeExact(array, target, compare_func, out_match_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_set_clear_func$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"g_array_set_clear_func");
    }
    /**
     * {@snippet :
     * void g_array_set_clear_func(struct _GArray* array, void (*clear_func)(void*));
     * }
     */
    public static void g_array_set_clear_func(MemorySegment array, MemorySegment clear_func) {
        var mh$ = g_array_set_clear_func$MH();
        try {
            mh$.invokeExact(array, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"g_ptr_array_new");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new();
     * }
     */
    public static MemorySegment g_ptr_array_new() {
        var mh$ = g_ptr_array_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_with_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"g_ptr_array_new_with_free_func");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new_with_free_func(void (*element_free_func)(void*));
     * }
     */
    public static MemorySegment g_ptr_array_new_with_free_func(MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_with_free_func$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_take$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"g_ptr_array_new_take");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new_take(void** data, unsigned long len, void (*element_free_func)(void*));
     * }
     */
    public static MemorySegment g_ptr_array_new_take(MemorySegment data, long len, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_take$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, len, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_from_array$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$6,"g_ptr_array_new_from_array");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new_from_array(void** data, unsigned long len, void* (*copy_func)(void*,void*), void* copy_func_user_data, void (*element_free_func)(void*));
     * }
     */
    public static MemorySegment g_ptr_array_new_from_array(MemorySegment data, long len, MemorySegment copy_func, MemorySegment copy_func_user_data, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_from_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, len, copy_func, copy_func_user_data, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"g_ptr_array_steal");
    }
    /**
     * {@snippet :
     * void** g_ptr_array_steal(struct _GPtrArray* array, unsigned long* len);
     * }
     */
    public static MemorySegment g_ptr_array_steal(MemorySegment array, MemorySegment len) {
        var mh$ = g_ptr_array_steal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"g_ptr_array_copy");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_copy(struct _GPtrArray* array, void* (*func)(void*,void*), void* user_data);
     * }
     */
    public static MemorySegment g_ptr_array_copy(MemorySegment array, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_ptr_array_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"g_ptr_array_sized_new");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_sized_new(unsigned int reserved_size);
     * }
     */
    public static MemorySegment g_ptr_array_sized_new(int reserved_size) {
        var mh$ = g_ptr_array_sized_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"g_ptr_array_new_full");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new_full(unsigned int reserved_size, void (*element_free_func)(void*));
     * }
     */
    public static MemorySegment g_ptr_array_new_full(int reserved_size, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reserved_size, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_null_terminated$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"g_ptr_array_new_null_terminated");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new_null_terminated(unsigned int reserved_size, void (*element_free_func)(void*), int null_terminated);
     * }
     */
    public static MemorySegment g_ptr_array_new_null_terminated(int reserved_size, MemorySegment element_free_func, int null_terminated) {
        var mh$ = g_ptr_array_new_null_terminated$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reserved_size, element_free_func, null_terminated);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_take_null_terminated$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"g_ptr_array_new_take_null_terminated");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new_take_null_terminated(void** data, void (*element_free_func)(void*));
     * }
     */
    public static MemorySegment g_ptr_array_new_take_null_terminated(MemorySegment data, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_take_null_terminated$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_from_null_terminated_array$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"g_ptr_array_new_from_null_terminated_array");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_new_from_null_terminated_array(void** data, void* (*copy_func)(void*,void*), void* copy_func_user_data, void (*element_free_func)(void*));
     * }
     */
    public static MemorySegment g_ptr_array_new_from_null_terminated_array(MemorySegment data, MemorySegment copy_func, MemorySegment copy_func_user_data, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_from_null_terminated_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, copy_func, copy_func_user_data, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"g_ptr_array_free");
    }
    /**
     * {@snippet :
     * void** g_ptr_array_free(struct _GPtrArray* array, int free_seg);
     * }
     */
    public static MemorySegment g_ptr_array_free(MemorySegment array, int free_seg) {
        var mh$ = g_ptr_array_free$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, free_seg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"g_ptr_array_ref");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_ref(struct _GPtrArray* array);
     * }
     */
    public static MemorySegment g_ptr_array_ref(MemorySegment array) {
        var mh$ = g_ptr_array_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"g_ptr_array_unref");
    }
    /**
     * {@snippet :
     * void g_ptr_array_unref(struct _GPtrArray* array);
     * }
     */
    public static void g_ptr_array_unref(MemorySegment array) {
        var mh$ = g_ptr_array_unref$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_set_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"g_ptr_array_set_free_func");
    }
    /**
     * {@snippet :
     * void g_ptr_array_set_free_func(struct _GPtrArray* array, void (*element_free_func)(void*));
     * }
     */
    public static void g_ptr_array_set_free_func(MemorySegment array, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_set_free_func$MH();
        try {
            mh$.invokeExact(array, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"g_ptr_array_set_size");
    }
    /**
     * {@snippet :
     * void g_ptr_array_set_size(struct _GPtrArray* array, int length);
     * }
     */
    public static void g_ptr_array_set_size(MemorySegment array, int length) {
        var mh$ = g_ptr_array_set_size$MH();
        try {
            mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"g_ptr_array_remove_index");
    }
    /**
     * {@snippet :
     * void* g_ptr_array_remove_index(struct _GPtrArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_ptr_array_remove_index(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_remove_index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"g_ptr_array_remove_index_fast");
    }
    /**
     * {@snippet :
     * void* g_ptr_array_remove_index_fast(struct _GPtrArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_ptr_array_remove_index_fast(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_remove_index_fast$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal_index$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"g_ptr_array_steal_index");
    }
    /**
     * {@snippet :
     * void* g_ptr_array_steal_index(struct _GPtrArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_ptr_array_steal_index(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_steal_index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"g_ptr_array_steal_index_fast");
    }
    /**
     * {@snippet :
     * void* g_ptr_array_steal_index_fast(struct _GPtrArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_ptr_array_steal_index_fast(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_steal_index_fast$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"g_ptr_array_remove");
    }
    /**
     * {@snippet :
     * int g_ptr_array_remove(struct _GPtrArray* array, void* data);
     * }
     */
    public static int g_ptr_array_remove(MemorySegment array, MemorySegment data) {
        var mh$ = g_ptr_array_remove$MH();
        try {
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"g_ptr_array_remove_fast");
    }
    /**
     * {@snippet :
     * int g_ptr_array_remove_fast(struct _GPtrArray* array, void* data);
     * }
     */
    public static int g_ptr_array_remove_fast(MemorySegment array, MemorySegment data) {
        var mh$ = g_ptr_array_remove_fast$MH();
        try {
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"g_ptr_array_remove_range");
    }
    /**
     * {@snippet :
     * struct _GPtrArray* g_ptr_array_remove_range(struct _GPtrArray* array, unsigned int index_, unsigned int length);
     * }
     */
    public static MemorySegment g_ptr_array_remove_range(MemorySegment array, int index_, int length) {
        var mh$ = g_ptr_array_remove_range$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_add$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"g_ptr_array_add");
    }
    /**
     * {@snippet :
     * void g_ptr_array_add(struct _GPtrArray* array, void* data);
     * }
     */
    public static void g_ptr_array_add(MemorySegment array, MemorySegment data) {
        var mh$ = g_ptr_array_add$MH();
        try {
            mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_extend$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"g_ptr_array_extend");
    }
    /**
     * {@snippet :
     * void g_ptr_array_extend(struct _GPtrArray* array_to_extend, struct _GPtrArray* array, void* (*func)(void*,void*), void* user_data);
     * }
     */
    public static void g_ptr_array_extend(MemorySegment array_to_extend, MemorySegment array, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_ptr_array_extend$MH();
        try {
            mh$.invokeExact(array_to_extend, array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_extend_and_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"g_ptr_array_extend_and_steal");
    }
    /**
     * {@snippet :
     * void g_ptr_array_extend_and_steal(struct _GPtrArray* array_to_extend, struct _GPtrArray* array);
     * }
     */
    public static void g_ptr_array_extend_and_steal(MemorySegment array_to_extend, MemorySegment array) {
        var mh$ = g_ptr_array_extend_and_steal$MH();
        try {
            mh$.invokeExact(array_to_extend, array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"g_ptr_array_insert");
    }
    /**
     * {@snippet :
     * void g_ptr_array_insert(struct _GPtrArray* array, int index_, void* data);
     * }
     */
    public static void g_ptr_array_insert(MemorySegment array, int index_, MemorySegment data) {
        var mh$ = g_ptr_array_insert$MH();
        try {
            mh$.invokeExact(array, index_, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"g_ptr_array_sort");
    }
    /**
     * {@snippet :
     * void g_ptr_array_sort(struct _GPtrArray* array, int (*compare_func)(void*,void*));
     * }
     */
    public static void g_ptr_array_sort(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_ptr_array_sort$MH();
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"g_ptr_array_sort_with_data");
    }
    /**
     * {@snippet :
     * void g_ptr_array_sort_with_data(struct _GPtrArray* array, int (*compare_func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_ptr_array_sort_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_ptr_array_sort_with_data$MH();
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort_values$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"g_ptr_array_sort_values");
    }
    /**
     * {@snippet :
     * void g_ptr_array_sort_values(struct _GPtrArray* array, int (*compare_func)(void*,void*));
     * }
     */
    public static void g_ptr_array_sort_values(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_ptr_array_sort_values$MH();
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort_values_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"g_ptr_array_sort_values_with_data");
    }
    /**
     * {@snippet :
     * void g_ptr_array_sort_values_with_data(struct _GPtrArray* array, int (*compare_func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_ptr_array_sort_values_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_ptr_array_sort_values_with_data$MH();
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"g_ptr_array_foreach");
    }
    /**
     * {@snippet :
     * void g_ptr_array_foreach(struct _GPtrArray* array, void (*func)(void*,void*), void* user_data);
     * }
     */
    public static void g_ptr_array_foreach(MemorySegment array, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_ptr_array_foreach$MH();
        try {
            mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_find$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"g_ptr_array_find");
    }
    /**
     * {@snippet :
     * int g_ptr_array_find(struct _GPtrArray* haystack, void* needle, unsigned int* index_);
     * }
     */
    public static int g_ptr_array_find(MemorySegment haystack, MemorySegment needle, MemorySegment index_) {
        var mh$ = g_ptr_array_find$MH();
        try {
            return (int)mh$.invokeExact(haystack, needle, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_find_with_equal_func$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0,"g_ptr_array_find_with_equal_func");
    }
    /**
     * {@snippet :
     * int g_ptr_array_find_with_equal_func(struct _GPtrArray* haystack, void* needle, int (*equal_func)(void*,void*), unsigned int* index_);
     * }
     */
    public static int g_ptr_array_find_with_equal_func(MemorySegment haystack, MemorySegment needle, MemorySegment equal_func, MemorySegment index_) {
        var mh$ = g_ptr_array_find_with_equal_func$MH();
        try {
            return (int)mh$.invokeExact(haystack, needle, equal_func, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_is_null_terminated$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"g_ptr_array_is_null_terminated");
    }
    /**
     * {@snippet :
     * int g_ptr_array_is_null_terminated(struct _GPtrArray* array);
     * }
     */
    public static int g_ptr_array_is_null_terminated(MemorySegment array) {
        var mh$ = g_ptr_array_is_null_terminated$MH();
        try {
            return (int)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"g_byte_array_new");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_new();
     * }
     */
    public static MemorySegment g_byte_array_new() {
        var mh$ = g_byte_array_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_new_take$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"g_byte_array_new_take");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_new_take(unsigned char* data, unsigned long len);
     * }
     */
    public static MemorySegment g_byte_array_new_take(MemorySegment data, long len) {
        var mh$ = g_byte_array_new_take$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"g_byte_array_steal");
    }
    /**
     * {@snippet :
     * unsigned char* g_byte_array_steal(struct _GByteArray* array, unsigned long* len);
     * }
     */
    public static MemorySegment g_byte_array_steal(MemorySegment array, MemorySegment len) {
        var mh$ = g_byte_array_steal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"g_byte_array_sized_new");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_sized_new(unsigned int reserved_size);
     * }
     */
    public static MemorySegment g_byte_array_sized_new(int reserved_size) {
        var mh$ = g_byte_array_sized_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"g_byte_array_free");
    }
    /**
     * {@snippet :
     * unsigned char* g_byte_array_free(struct _GByteArray* array, int free_segment);
     * }
     */
    public static MemorySegment g_byte_array_free(MemorySegment array, int free_segment) {
        var mh$ = g_byte_array_free$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_free_to_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1,"g_byte_array_free_to_bytes");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_byte_array_free_to_bytes(struct _GByteArray* array);
     * }
     */
    public static MemorySegment g_byte_array_free_to_bytes(MemorySegment array) {
        var mh$ = g_byte_array_free_to_bytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"g_byte_array_ref");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_ref(struct _GByteArray* array);
     * }
     */
    public static MemorySegment g_byte_array_ref(MemorySegment array) {
        var mh$ = g_byte_array_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"g_byte_array_unref");
    }
    /**
     * {@snippet :
     * void g_byte_array_unref(struct _GByteArray* array);
     * }
     */
    public static void g_byte_array_unref(MemorySegment array) {
        var mh$ = g_byte_array_unref$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_append$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"g_byte_array_append");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_append(struct _GByteArray* array, unsigned char* data, unsigned int len);
     * }
     */
    public static MemorySegment g_byte_array_append(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_byte_array_append$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"g_byte_array_prepend");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_prepend(struct _GByteArray* array, unsigned char* data, unsigned int len);
     * }
     */
    public static MemorySegment g_byte_array_prepend(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_byte_array_prepend$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"g_byte_array_set_size");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_set_size(struct _GByteArray* array, unsigned int length);
     * }
     */
    public static MemorySegment g_byte_array_set_size(MemorySegment array, int length) {
        var mh$ = g_byte_array_set_size$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"g_byte_array_remove_index");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_remove_index(struct _GByteArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_byte_array_remove_index(MemorySegment array, int index_) {
        var mh$ = g_byte_array_remove_index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"g_byte_array_remove_index_fast");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_remove_index_fast(struct _GByteArray* array, unsigned int index_);
     * }
     */
    public static MemorySegment g_byte_array_remove_index_fast(MemorySegment array, int index_) {
        var mh$ = g_byte_array_remove_index_fast$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"g_byte_array_remove_range");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_byte_array_remove_range(struct _GByteArray* array, unsigned int index_, unsigned int length);
     * }
     */
    public static MemorySegment g_byte_array_remove_range(MemorySegment array, int index_, int length) {
        var mh$ = g_byte_array_remove_range$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"g_byte_array_sort");
    }
    /**
     * {@snippet :
     * void g_byte_array_sort(struct _GByteArray* array, int (*compare_func)(void*,void*));
     * }
     */
    public static void g_byte_array_sort(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_byte_array_sort$MH();
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"g_byte_array_sort_with_data");
    }
    /**
     * {@snippet :
     * void g_byte_array_sort_with_data(struct _GByteArray* array, int (*compare_func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_byte_array_sort_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_byte_array_sort_with_data$MH();
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_get$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"g_atomic_int_get");
    }
    /**
     * {@snippet :
     * int g_atomic_int_get(int* atomic);
     * }
     */
    public static int g_atomic_int_get(MemorySegment atomic) {
        var mh$ = g_atomic_int_get$MH();
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_set$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"g_atomic_int_set");
    }
    /**
     * {@snippet :
     * void g_atomic_int_set(int* atomic, int newval);
     * }
     */
    public static void g_atomic_int_set(MemorySegment atomic, int newval) {
        var mh$ = g_atomic_int_set$MH();
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"g_atomic_int_inc");
    }
    /**
     * {@snippet :
     * void g_atomic_int_inc(int* atomic);
     * }
     */
    public static void g_atomic_int_inc(MemorySegment atomic) {
        var mh$ = g_atomic_int_inc$MH();
        try {
            mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_dec_and_test$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"g_atomic_int_dec_and_test");
    }
    /**
     * {@snippet :
     * int g_atomic_int_dec_and_test(int* atomic);
     * }
     */
    public static int g_atomic_int_dec_and_test(MemorySegment atomic) {
        var mh$ = g_atomic_int_dec_and_test$MH();
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"g_atomic_int_compare_and_exchange");
    }
    /**
     * {@snippet :
     * int g_atomic_int_compare_and_exchange(int* atomic, int oldval, int newval);
     * }
     */
    public static int g_atomic_int_compare_and_exchange(MemorySegment atomic, int oldval, int newval) {
        var mh$ = g_atomic_int_compare_and_exchange$MH();
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_compare_and_exchange_full$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"g_atomic_int_compare_and_exchange_full");
    }
    /**
     * {@snippet :
     * int g_atomic_int_compare_and_exchange_full(int* atomic, int oldval, int newval, int* preval);
     * }
     */
    public static int g_atomic_int_compare_and_exchange_full(MemorySegment atomic, int oldval, int newval, MemorySegment preval) {
        var mh$ = g_atomic_int_compare_and_exchange_full$MH();
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval, preval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4,"g_atomic_int_exchange");
    }
    /**
     * {@snippet :
     * int g_atomic_int_exchange(int* atomic, int newval);
     * }
     */
    public static int g_atomic_int_exchange(MemorySegment atomic, int newval) {
        var mh$ = g_atomic_int_exchange$MH();
        try {
            return (int)mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_add$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"g_atomic_int_add");
    }
    /**
     * {@snippet :
     * int g_atomic_int_add(int* atomic, int val);
     * }
     */
    public static int g_atomic_int_add(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_add$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_and$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"g_atomic_int_and");
    }
    /**
     * {@snippet :
     * unsigned int g_atomic_int_and(unsigned int* atomic, unsigned int val);
     * }
     */
    public static int g_atomic_int_and(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_and$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_or$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"g_atomic_int_or");
    }
    /**
     * {@snippet :
     * unsigned int g_atomic_int_or(unsigned int* atomic, unsigned int val);
     * }
     */
    public static int g_atomic_int_or(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_or$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"g_atomic_int_xor");
    }
    /**
     * {@snippet :
     * unsigned int g_atomic_int_xor(unsigned int* atomic, unsigned int val);
     * }
     */
    public static int g_atomic_int_xor(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_xor$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_get$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"g_atomic_pointer_get");
    }
    /**
     * {@snippet :
     * void* g_atomic_pointer_get(void* atomic);
     * }
     */
    public static MemorySegment g_atomic_pointer_get(MemorySegment atomic) {
        var mh$ = g_atomic_pointer_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_set$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"g_atomic_pointer_set");
    }
    /**
     * {@snippet :
     * void g_atomic_pointer_set(void* atomic, void* newval);
     * }
     */
    public static void g_atomic_pointer_set(MemorySegment atomic, MemorySegment newval) {
        var mh$ = g_atomic_pointer_set$MH();
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"g_atomic_pointer_compare_and_exchange");
    }
    /**
     * {@snippet :
     * int g_atomic_pointer_compare_and_exchange(void* atomic, void* oldval, void* newval);
     * }
     */
    public static int g_atomic_pointer_compare_and_exchange(MemorySegment atomic, MemorySegment oldval, MemorySegment newval) {
        var mh$ = g_atomic_pointer_compare_and_exchange$MH();
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_compare_and_exchange_full$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"g_atomic_pointer_compare_and_exchange_full");
    }
    /**
     * {@snippet :
     * int g_atomic_pointer_compare_and_exchange_full(void* atomic, void* oldval, void* newval, void* preval);
     * }
     */
    public static int g_atomic_pointer_compare_and_exchange_full(MemorySegment atomic, MemorySegment oldval, MemorySegment newval, MemorySegment preval) {
        var mh$ = g_atomic_pointer_compare_and_exchange_full$MH();
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval, preval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"g_atomic_pointer_exchange");
    }
    /**
     * {@snippet :
     * void* g_atomic_pointer_exchange(void* atomic, void* newval);
     * }
     */
    public static MemorySegment g_atomic_pointer_exchange(MemorySegment atomic, MemorySegment newval) {
        var mh$ = g_atomic_pointer_exchange$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_add$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"g_atomic_pointer_add");
    }
    /**
     * {@snippet :
     * long g_atomic_pointer_add(void* atomic, long val);
     * }
     */
    public static long g_atomic_pointer_add(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_add$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_and$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"g_atomic_pointer_and");
    }
    /**
     * {@snippet :
     * unsigned long g_atomic_pointer_and(void* atomic, unsigned long val);
     * }
     */
    public static long g_atomic_pointer_and(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_and$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_or$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"g_atomic_pointer_or");
    }
    /**
     * {@snippet :
     * unsigned long g_atomic_pointer_or(void* atomic, unsigned long val);
     * }
     */
    public static long g_atomic_pointer_or(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_or$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"g_atomic_pointer_xor");
    }
    /**
     * {@snippet :
     * unsigned long g_atomic_pointer_xor(void* atomic, unsigned long val);
     * }
     */
    public static long g_atomic_pointer_xor(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_xor$MH();
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_exchange_and_add$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"g_atomic_int_exchange_and_add");
    }
    /**
     * {@snippet :
     * int g_atomic_int_exchange_and_add(int* atomic, int val);
     * }
     */
    public static int g_atomic_int_exchange_and_add(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_exchange_and_add$MH();
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int GQuark;
     * }
     */
    public static final OfInt GQuark = JAVA_INT;
    public static MethodHandle g_quark_try_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"g_quark_try_string");
    }
    /**
     * {@snippet :
     * unsigned int g_quark_try_string(char* string);
     * }
     */
    public static int g_quark_try_string(MemorySegment string) {
        var mh$ = g_quark_try_string$MH();
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"g_quark_from_static_string");
    }
    /**
     * {@snippet :
     * unsigned int g_quark_from_static_string(char* string);
     * }
     */
    public static int g_quark_from_static_string(MemorySegment string) {
        var mh$ = g_quark_from_static_string$MH();
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"g_quark_from_string");
    }
    /**
     * {@snippet :
     * unsigned int g_quark_from_string(char* string);
     * }
     */
    public static int g_quark_from_string(MemorySegment string) {
        var mh$ = g_quark_from_string$MH();
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"g_quark_to_string");
    }
    /**
     * {@snippet :
     * char* g_quark_to_string(unsigned int quark);
     * }
     */
    public static MemorySegment g_quark_to_string(int quark) {
        var mh$ = g_quark_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(quark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"g_intern_string");
    }
    /**
     * {@snippet :
     * char* g_intern_string(char* string);
     * }
     */
    public static MemorySegment g_intern_string(MemorySegment string) {
        var mh$ = g_intern_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"g_intern_static_string");
    }
    /**
     * {@snippet :
     * char* g_intern_static_string(char* string);
     * }
     */
    public static MemorySegment g_intern_static_string(MemorySegment string) {
        var mh$ = g_intern_static_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register_static$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$6,"g_error_domain_register_static");
    }
    /**
     * {@snippet :
     * unsigned int g_error_domain_register_static(char* error_type_name, unsigned long error_type_private_size, void (*error_type_init)(struct _GError*), void (*error_type_copy)(struct _GError*,struct _GError*), void (*error_type_clear)(struct _GError*));
     * }
     */
    public static int g_error_domain_register_static(MemorySegment error_type_name, long error_type_private_size, MemorySegment error_type_init, MemorySegment error_type_copy, MemorySegment error_type_clear) {
        var mh$ = g_error_domain_register_static$MH();
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"g_error_domain_register");
    }
    /**
     * {@snippet :
     * unsigned int g_error_domain_register(char* error_type_name, unsigned long error_type_private_size, void (*error_type_init)(struct _GError*), void (*error_type_copy)(struct _GError*,struct _GError*), void (*error_type_clear)(struct _GError*));
     * }
     */
    public static int g_error_domain_register(MemorySegment error_type_name, long error_type_private_size, MemorySegment error_type_init, MemorySegment error_type_copy, MemorySegment error_type_clear) {
        var mh$ = g_error_domain_register$MH();
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"g_error_new");
    }
    /**
     * {@snippet :
     * struct _GError* g_error_new(unsigned int domain, int code, char* format,...);
     * }
     */
    public static MemorySegment g_error_new(int domain, int code, MemorySegment format, Object... x3) {
        var mh$ = g_error_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, code, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"g_error_new_literal");
    }
    /**
     * {@snippet :
     * struct _GError* g_error_new_literal(unsigned int domain, int code, char* message);
     * }
     */
    public static MemorySegment g_error_new_literal(int domain, int code, MemorySegment message) {
        var mh$ = g_error_new_literal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"g_error_new_valist");
    }
    /**
     * {@snippet :
     * struct _GError* g_error_new_valist(unsigned int domain, int code, char* format, struct __va_list args);
     * }
     */
    public static MemorySegment g_error_new_valist(int domain, int code, MemorySegment format, MemorySegment args) {
        var mh$ = g_error_new_valist$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, code, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_free$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"g_error_free");
    }
    /**
     * {@snippet :
     * void g_error_free(struct _GError* error);
     * }
     */
    public static void g_error_free(MemorySegment error) {
        var mh$ = g_error_free$MH();
        try {
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"g_error_copy");
    }
    /**
     * {@snippet :
     * struct _GError* g_error_copy(struct _GError* error);
     * }
     */
    public static MemorySegment g_error_copy(MemorySegment error) {
        var mh$ = g_error_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"g_error_matches");
    }
    /**
     * {@snippet :
     * int g_error_matches(struct _GError* error, unsigned int domain, int code);
     * }
     */
    public static int g_error_matches(MemorySegment error, int domain, int code) {
        var mh$ = g_error_matches$MH();
        try {
            return (int)mh$.invokeExact(error, domain, code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"g_set_error");
    }
    /**
     * {@snippet :
     * void g_set_error(struct _GError** err, unsigned int domain, int code, char* format,...);
     * }
     */
    public static void g_set_error(MemorySegment err, int domain, int code, MemorySegment format, Object... x4) {
        var mh$ = g_set_error$MH();
        try {
            mh$.invokeExact(err, domain, code, format, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"g_set_error_literal");
    }
    /**
     * {@snippet :
     * void g_set_error_literal(struct _GError** err, unsigned int domain, int code, char* message);
     * }
     */
    public static void g_set_error_literal(MemorySegment err, int domain, int code, MemorySegment message) {
        var mh$ = g_set_error_literal$MH();
        try {
            mh$.invokeExact(err, domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_error$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"g_propagate_error");
    }
    /**
     * {@snippet :
     * void g_propagate_error(struct _GError** dest, struct _GError* src);
     * }
     */
    public static void g_propagate_error(MemorySegment dest, MemorySegment src) {
        var mh$ = g_propagate_error$MH();
        try {
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_error$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"g_clear_error");
    }
    /**
     * {@snippet :
     * void g_clear_error(struct _GError** err);
     * }
     */
    public static void g_clear_error(MemorySegment err) {
        var mh$ = g_clear_error$MH();
        try {
            mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_prefix_error$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"g_prefix_error");
    }
    /**
     * {@snippet :
     * void g_prefix_error(struct _GError** err, char* format,...);
     * }
     */
    public static void g_prefix_error(MemorySegment err, MemorySegment format, Object... x2) {
        var mh$ = g_prefix_error$MH();
        try {
            mh$.invokeExact(err, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_prefix_error_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"g_prefix_error_literal");
    }
    /**
     * {@snippet :
     * void g_prefix_error_literal(struct _GError** err, char* prefix);
     * }
     */
    public static void g_prefix_error_literal(MemorySegment err, MemorySegment prefix) {
        var mh$ = g_prefix_error_literal$MH();
        try {
            mh$.invokeExact(err, prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_prefixed_error$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"g_propagate_prefixed_error");
    }
    /**
     * {@snippet :
     * void g_propagate_prefixed_error(struct _GError** dest, struct _GError* src, char* format,...);
     * }
     */
    public static void g_propagate_prefixed_error(MemorySegment dest, MemorySegment src, MemorySegment format, Object... x3) {
        var mh$ = g_propagate_prefixed_error$MH();
        try {
            mh$.invokeExact(dest, src, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_name$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"g_get_user_name");
    }
    /**
     * {@snippet :
     * char* g_get_user_name();
     * }
     */
    public static MemorySegment g_get_user_name() {
        var mh$ = g_get_user_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_real_name$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"g_get_real_name");
    }
    /**
     * {@snippet :
     * char* g_get_real_name();
     * }
     */
    public static MemorySegment g_get_real_name() {
        var mh$ = g_get_real_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_home_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"g_get_home_dir");
    }
    /**
     * {@snippet :
     * char* g_get_home_dir();
     * }
     */
    public static MemorySegment g_get_home_dir() {
        var mh$ = g_get_home_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_tmp_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"g_get_tmp_dir");
    }
    /**
     * {@snippet :
     * char* g_get_tmp_dir();
     * }
     */
    public static MemorySegment g_get_tmp_dir() {
        var mh$ = g_get_tmp_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_host_name$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"g_get_host_name");
    }
    /**
     * {@snippet :
     * char* g_get_host_name();
     * }
     */
    public static MemorySegment g_get_host_name() {
        var mh$ = g_get_host_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"g_get_prgname");
    }
    /**
     * {@snippet :
     * char* g_get_prgname();
     * }
     */
    public static MemorySegment g_get_prgname() {
        var mh$ = g_get_prgname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"g_set_prgname");
    }
    /**
     * {@snippet :
     * void g_set_prgname(char* prgname);
     * }
     */
    public static void g_set_prgname(MemorySegment prgname) {
        var mh$ = g_set_prgname$MH();
        try {
            mh$.invokeExact(prgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3,"g_get_application_name");
    }
    /**
     * {@snippet :
     * char* g_get_application_name();
     * }
     */
    public static MemorySegment g_get_application_name() {
        var mh$ = g_get_application_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"g_set_application_name");
    }
    /**
     * {@snippet :
     * void g_set_application_name(char* application_name);
     * }
     */
    public static void g_set_application_name(MemorySegment application_name) {
        var mh$ = g_set_application_name$MH();
        try {
            mh$.invokeExact(application_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_os_info$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"g_get_os_info");
    }
    /**
     * {@snippet :
     * char* g_get_os_info(char* key_name);
     * }
     */
    public static MemorySegment g_get_os_info(MemorySegment key_name) {
        var mh$ = g_get_os_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_reload_user_special_dirs_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"g_reload_user_special_dirs_cache");
    }
    /**
     * {@snippet :
     * void g_reload_user_special_dirs_cache();
     * }
     */
    public static void g_reload_user_special_dirs_cache() {
        var mh$ = g_reload_user_special_dirs_cache$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_data_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"g_get_user_data_dir");
    }
    /**
     * {@snippet :
     * char* g_get_user_data_dir();
     * }
     */
    public static MemorySegment g_get_user_data_dir() {
        var mh$ = g_get_user_data_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_config_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"g_get_user_config_dir");
    }
    /**
     * {@snippet :
     * char* g_get_user_config_dir();
     * }
     */
    public static MemorySegment g_get_user_config_dir() {
        var mh$ = g_get_user_config_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_cache_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"g_get_user_cache_dir");
    }
    /**
     * {@snippet :
     * char* g_get_user_cache_dir();
     * }
     */
    public static MemorySegment g_get_user_cache_dir() {
        var mh$ = g_get_user_cache_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_state_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"g_get_user_state_dir");
    }
    /**
     * {@snippet :
     * char* g_get_user_state_dir();
     * }
     */
    public static MemorySegment g_get_user_state_dir() {
        var mh$ = g_get_user_state_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_data_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"g_get_system_data_dirs");
    }
    /**
     * {@snippet :
     * char** g_get_system_data_dirs();
     * }
     */
    public static MemorySegment g_get_system_data_dirs() {
        var mh$ = g_get_system_data_dirs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_config_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"g_get_system_config_dirs");
    }
    /**
     * {@snippet :
     * char** g_get_system_config_dirs();
     * }
     */
    public static MemorySegment g_get_system_config_dirs() {
        var mh$ = g_get_system_config_dirs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_runtime_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"g_get_user_runtime_dir");
    }
    /**
     * {@snippet :
     * char* g_get_user_runtime_dir();
     * }
     */
    public static MemorySegment g_get_user_runtime_dir() {
        var mh$ = g_get_user_runtime_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_DESKTOP = 0;
     * }
     */
    public static int G_USER_DIRECTORY_DESKTOP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_DOCUMENTS = 1;
     * }
     */
    public static int G_USER_DIRECTORY_DOCUMENTS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_DOWNLOAD = 2;
     * }
     */
    public static int G_USER_DIRECTORY_DOWNLOAD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_MUSIC = 3;
     * }
     */
    public static int G_USER_DIRECTORY_MUSIC() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_PICTURES = 4;
     * }
     */
    public static int G_USER_DIRECTORY_PICTURES() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_PUBLIC_SHARE = 5;
     * }
     */
    public static int G_USER_DIRECTORY_PUBLIC_SHARE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_TEMPLATES = 6;
     * }
     */
    public static int G_USER_DIRECTORY_TEMPLATES() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_DIRECTORY_VIDEOS = 7;
     * }
     */
    public static int G_USER_DIRECTORY_VIDEOS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GUserDirectory.G_USER_N_DIRECTORIES = 8;
     * }
     */
    public static int G_USER_N_DIRECTORIES() {
        return (int)8L;
    }
    public static MethodHandle g_get_user_special_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"g_get_user_special_dir");
    }
    /**
     * {@snippet :
     * char* g_get_user_special_dir(enum GUserDirectory directory);
     * }
     */
    public static MemorySegment g_get_user_special_dir(int directory) {
        var mh$ = g_get_user_special_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(directory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_parse_debug_string$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1,"g_parse_debug_string");
    }
    /**
     * {@snippet :
     * unsigned int g_parse_debug_string(char* string, struct _GDebugKey* keys, unsigned int nkeys);
     * }
     */
    public static int g_parse_debug_string(MemorySegment string, MemorySegment keys, int nkeys) {
        var mh$ = g_parse_debug_string$MH();
        try {
            return (int)mh$.invokeExact(string, keys, nkeys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"g_snprintf");
    }
    /**
     * {@snippet :
     * int g_snprintf(char* string, unsigned long n, char* format,...);
     * }
     */
    public static int g_snprintf(MemorySegment string, long n, MemorySegment format, Object... x3) {
        var mh$ = g_snprintf$MH();
        try {
            return (int)mh$.invokeExact(string, n, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"g_vsnprintf");
    }
    /**
     * {@snippet :
     * int g_vsnprintf(char* string, unsigned long n, char* format, struct __va_list args);
     * }
     */
    public static int g_vsnprintf(MemorySegment string, long n, MemorySegment format, MemorySegment args) {
        var mh$ = g_vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(string, n, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_nullify_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"g_nullify_pointer");
    }
    /**
     * {@snippet :
     * void g_nullify_pointer(void** nullify_location);
     * }
     */
    public static void g_nullify_pointer(MemorySegment nullify_location) {
        var mh$ = g_nullify_pointer$MH();
        try {
            mh$.invokeExact(nullify_location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GFormatSizeFlags.G_FORMAT_SIZE_DEFAULT = 0;
     * }
     */
    public static int G_FORMAT_SIZE_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GFormatSizeFlags.G_FORMAT_SIZE_LONG_FORMAT = 1;
     * }
     */
    public static int G_FORMAT_SIZE_LONG_FORMAT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GFormatSizeFlags.G_FORMAT_SIZE_IEC_UNITS = 2;
     * }
     */
    public static int G_FORMAT_SIZE_IEC_UNITS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GFormatSizeFlags.G_FORMAT_SIZE_BITS = 4;
     * }
     */
    public static int G_FORMAT_SIZE_BITS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GFormatSizeFlags.G_FORMAT_SIZE_ONLY_VALUE = 8;
     * }
     */
    public static int G_FORMAT_SIZE_ONLY_VALUE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GFormatSizeFlags.G_FORMAT_SIZE_ONLY_UNIT = 16;
     * }
     */
    public static int G_FORMAT_SIZE_ONLY_UNIT() {
        return (int)16L;
    }
    public static MethodHandle g_format_size_full$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"g_format_size_full");
    }
    /**
     * {@snippet :
     * char* g_format_size_full(unsigned long size, enum GFormatSizeFlags flags);
     * }
     */
    public static MemorySegment g_format_size_full(long size, int flags) {
        var mh$ = g_format_size_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"g_format_size");
    }
    /**
     * {@snippet :
     * char* g_format_size(unsigned long size);
     * }
     */
    public static MemorySegment g_format_size(long size) {
        var mh$ = g_format_size$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"g_format_size_for_display");
    }
    /**
     * {@snippet :
     * char* g_format_size_for_display(long size);
     * }
     */
    public static MemorySegment g_format_size_for_display(long size) {
        var mh$ = g_format_size_for_display$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"g_atexit");
    }
    /**
     * {@snippet :
     * void g_atexit(void (*func)());
     * }
     */
    public static void g_atexit(MemorySegment func) {
        var mh$ = g_atexit$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_find_program_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"g_find_program_in_path");
    }
    /**
     * {@snippet :
     * char* g_find_program_in_path(char* program);
     * }
     */
    public static MemorySegment g_find_program_in_path(MemorySegment program) {
        var mh$ = g_find_program_in_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_lsf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$6,"g_bit_nth_lsf");
    }
    /**
     * {@snippet :
     * int g_bit_nth_lsf(unsigned long mask, int nth_bit);
     * }
     */
    public static int g_bit_nth_lsf(long mask, int nth_bit) {
        var mh$ = g_bit_nth_lsf$MH();
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_msf$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$0,"g_bit_nth_msf");
    }
    /**
     * {@snippet :
     * int g_bit_nth_msf(unsigned long mask, int nth_bit);
     * }
     */
    public static int g_bit_nth_msf(long mask, int nth_bit) {
        var mh$ = g_bit_nth_msf$MH();
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_storage$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"g_bit_storage");
    }
    /**
     * {@snippet :
     * unsigned int g_bit_storage(unsigned long number);
     * }
     */
    public static int g_bit_storage(long number) {
        var mh$ = g_bit_storage$MH();
        try {
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = JAVA_DOUBLE;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * unsigned long __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$6,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$3,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$5,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$3,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int nlink_t;
     * }
     */
    public static final OfInt nlink_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final AddressLayout caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = JAVA_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$1,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timespec* __timeout, struct __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int blksize_t;
     * }
     */
    public static final OfInt blksize_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = JAVA_INT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$0,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$2,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$4,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, unsigned long __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$5,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$2,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$3,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$5,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, unsigned long __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$0,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$2,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$3,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$4,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$6,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$0,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$1,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$2,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$3,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$4,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$6,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$0,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$1,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$0,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$1,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$2,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$3,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$4,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$5,"jrand48_r");
    }
    /**
     * {@snippet :
     * int jrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$1,"srand48_r");
    }
    /**
     * {@snippet :
     * int srand48_r(long __seedval, struct drand48_data* __buffer);
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$2,"seed48_r");
    }
    /**
     * {@snippet :
     * int seed48_r(unsigned short __seed16v[3], struct drand48_data* __buffer);
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$3,"lcong48_r");
    }
    /**
     * {@snippet :
     * int lcong48_r(unsigned short __param[7], struct drand48_data* __buffer);
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$4,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(unsigned long __size);
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$6,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$0,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* __ptr, unsigned long __size);
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$1,"free");
    }
    /**
     * {@snippet :
     * void free(void* __ptr);
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$3,"reallocarray");
    }
    /**
     * {@snippet :
     * void* reallocarray(void* __ptr, unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$4,"alloca");
    }
    /**
     * {@snippet :
     * void* alloca(unsigned long __size);
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$5,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(unsigned long __size);
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$1,"posix_memalign");
    }
    /**
     * {@snippet :
     * int posix_memalign(void** __memptr, unsigned long __alignment, unsigned long __size);
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$2,"aligned_alloc");
    }
    /**
     * {@snippet :
     * void* aligned_alloc(unsigned long __alignment, unsigned long __size);
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$3,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$5,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*__func)());
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$1,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*__func)());
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$5,"on_exit");
    }
    /**
     * {@snippet :
     * int on_exit(void (*__func)(int,void*), void* __arg);
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$0,"exit");
    }
    /**
     * {@snippet :
     * void exit(int __status);
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$1,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int __status);
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$2,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int __status);
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$3,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* __name);
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$4,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* __string);
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$5,"setenv");
    }
    /**
     * {@snippet :
     * int setenv(char* __name, char* __value, int __replace);
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$0,"unsetenv");
    }
    /**
     * {@snippet :
     * int unsetenv(char* __name);
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$1,"clearenv");
    }
    /**
     * {@snippet :
     * int clearenv();
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$2,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char* __template);
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$3,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char* __template);
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$4,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char* __template, int __suffixlen);
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$5,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char* __template);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$0,"system");
    }
    /**
     * {@snippet :
     * int system(char* __command);
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$1,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$5,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* __key, void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$2,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$3,"abs");
    }
    /**
     * {@snippet :
     * int abs(int __x);
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$5,"labs");
    }
    /**
     * {@snippet :
     * long labs(long __x);
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$0,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long __x);
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$2,"div");
    }
    /**
     * {@snippet :
     * struct div_t div(int __numer, int __denom);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$4,"ldiv");
    }
    /**
     * {@snippet :
     * struct ldiv_t ldiv(long __numer, long __denom);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$6,"lldiv");
    }
    /**
     * {@snippet :
     * struct lldiv_t lldiv(long long __numer, long long __denom);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$1,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$2,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$4,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double __value, int __ndigit, char* __buf);
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$6,"ecvt_r");
    }
    /**
     * {@snippet :
     * int ecvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$0,"fcvt_r");
    }
    /**
     * {@snippet :
     * int fcvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$2,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* __s, unsigned long __n);
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$3,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(unsigned int* __pwc, char* __s, unsigned long __n);
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$4,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* __s, unsigned int __wchar);
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$5,"mbstowcs");
    }
    /**
     * {@snippet :
     * unsigned long mbstowcs(unsigned int* __pwcs, char* __s, unsigned long __n);
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$0,"wcstombs");
    }
    /**
     * {@snippet :
     * unsigned long wcstombs(char* __s, unsigned int* __pwcs, unsigned long __n);
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$1,"rpmatch");
    }
    /**
     * {@snippet :
     * int rpmatch(char* __response);
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$2,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char** __optionp, char** __tokens, char** __valuep);
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$3,"getloadavg");
    }
    /**
     * {@snippet :
     * int getloadavg(double __loadavg[], int __nelem);
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$4,"g_thread_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_thread_error_quark();
     * }
     */
    public static int g_thread_error_quark() {
        var mh$ = g_thread_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GThreadError.G_THREAD_ERROR_AGAIN = 0;
     * }
     */
    public static int G_THREAD_ERROR_AGAIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GOnceStatus.G_ONCE_STATUS_NOTCALLED = 0;
     * }
     */
    public static int G_ONCE_STATUS_NOTCALLED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GOnceStatus.G_ONCE_STATUS_PROGRESS = 1;
     * }
     */
    public static int G_ONCE_STATUS_PROGRESS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GOnceStatus.G_ONCE_STATUS_READY = 2;
     * }
     */
    public static int G_ONCE_STATUS_READY() {
        return (int)2L;
    }
    public static MethodHandle g_thread_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$4,"g_thread_ref");
    }
    /**
     * {@snippet :
     * struct _GThread* g_thread_ref(struct _GThread* thread);
     * }
     */
    public static MemorySegment g_thread_ref(MemorySegment thread) {
        var mh$ = g_thread_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$5,"g_thread_unref");
    }
    /**
     * {@snippet :
     * void g_thread_unref(struct _GThread* thread);
     * }
     */
    public static void g_thread_unref(MemorySegment thread) {
        var mh$ = g_thread_unref$MH();
        try {
            mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_new$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$1,"g_thread_new");
    }
    /**
     * {@snippet :
     * struct _GThread* g_thread_new(char* name, void* (*func)(void*), void* data);
     * }
     */
    public static MemorySegment g_thread_new(MemorySegment name, MemorySegment func, MemorySegment data) {
        var mh$ = g_thread_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_try_new$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$3,"g_thread_try_new");
    }
    /**
     * {@snippet :
     * struct _GThread* g_thread_try_new(char* name, void* (*func)(void*), void* data, struct _GError** error);
     * }
     */
    public static MemorySegment g_thread_try_new(MemorySegment name, MemorySegment func, MemorySegment data, MemorySegment error) {
        var mh$ = g_thread_try_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, func, data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$4,"g_thread_self");
    }
    /**
     * {@snippet :
     * struct _GThread* g_thread_self();
     * }
     */
    public static MemorySegment g_thread_self() {
        var mh$ = g_thread_self$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$5,"g_thread_exit");
    }
    /**
     * {@snippet :
     * void g_thread_exit(void* retval);
     * }
     */
    public static void g_thread_exit(MemorySegment retval) {
        var mh$ = g_thread_exit$MH();
        try {
            mh$.invokeExact(retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$0,"g_thread_join");
    }
    /**
     * {@snippet :
     * void* g_thread_join(struct _GThread* thread);
     * }
     */
    public static MemorySegment g_thread_join(MemorySegment thread) {
        var mh$ = g_thread_join$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"g_thread_yield");
    }
    /**
     * {@snippet :
     * void g_thread_yield();
     * }
     */
    public static void g_thread_yield() {
        var mh$ = g_thread_yield$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$2,"g_mutex_init");
    }
    /**
     * {@snippet :
     * void g_mutex_init(union _GMutex* mutex);
     * }
     */
    public static void g_mutex_init(MemorySegment mutex) {
        var mh$ = g_mutex_init$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$3,"g_mutex_clear");
    }
    /**
     * {@snippet :
     * void g_mutex_clear(union _GMutex* mutex);
     * }
     */
    public static void g_mutex_clear(MemorySegment mutex) {
        var mh$ = g_mutex_clear$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$4,"g_mutex_lock");
    }
    /**
     * {@snippet :
     * void g_mutex_lock(union _GMutex* mutex);
     * }
     */
    public static void g_mutex_lock(MemorySegment mutex) {
        var mh$ = g_mutex_lock$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$5,"g_mutex_trylock");
    }
    /**
     * {@snippet :
     * int g_mutex_trylock(union _GMutex* mutex);
     * }
     */
    public static int g_mutex_trylock(MemorySegment mutex) {
        var mh$ = g_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$0,"g_mutex_unlock");
    }
    /**
     * {@snippet :
     * void g_mutex_unlock(union _GMutex* mutex);
     * }
     */
    public static void g_mutex_unlock(MemorySegment mutex) {
        var mh$ = g_mutex_unlock$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$1,"g_rw_lock_init");
    }
    /**
     * {@snippet :
     * void g_rw_lock_init(struct _GRWLock* rw_lock);
     * }
     */
    public static void g_rw_lock_init(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_init$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"g_rw_lock_clear");
    }
    /**
     * {@snippet :
     * void g_rw_lock_clear(struct _GRWLock* rw_lock);
     * }
     */
    public static void g_rw_lock_clear(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_clear$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"g_rw_lock_writer_lock");
    }
    /**
     * {@snippet :
     * void g_rw_lock_writer_lock(struct _GRWLock* rw_lock);
     * }
     */
    public static void g_rw_lock_writer_lock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_writer_lock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$4,"g_rw_lock_writer_trylock");
    }
    /**
     * {@snippet :
     * int g_rw_lock_writer_trylock(struct _GRWLock* rw_lock);
     * }
     */
    public static int g_rw_lock_writer_trylock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_writer_trylock$MH();
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"g_rw_lock_writer_unlock");
    }
    /**
     * {@snippet :
     * void g_rw_lock_writer_unlock(struct _GRWLock* rw_lock);
     * }
     */
    public static void g_rw_lock_writer_unlock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_writer_unlock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$0,"g_rw_lock_reader_lock");
    }
    /**
     * {@snippet :
     * void g_rw_lock_reader_lock(struct _GRWLock* rw_lock);
     * }
     */
    public static void g_rw_lock_reader_lock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_reader_lock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"g_rw_lock_reader_trylock");
    }
    /**
     * {@snippet :
     * int g_rw_lock_reader_trylock(struct _GRWLock* rw_lock);
     * }
     */
    public static int g_rw_lock_reader_trylock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_reader_trylock$MH();
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$2,"g_rw_lock_reader_unlock");
    }
    /**
     * {@snippet :
     * void g_rw_lock_reader_unlock(struct _GRWLock* rw_lock);
     * }
     */
    public static void g_rw_lock_reader_unlock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_reader_unlock$MH();
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$3,"g_rec_mutex_init");
    }
    /**
     * {@snippet :
     * void g_rec_mutex_init(struct _GRecMutex* rec_mutex);
     * }
     */
    public static void g_rec_mutex_init(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_init$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$4,"g_rec_mutex_clear");
    }
    /**
     * {@snippet :
     * void g_rec_mutex_clear(struct _GRecMutex* rec_mutex);
     * }
     */
    public static void g_rec_mutex_clear(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_clear$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$5,"g_rec_mutex_lock");
    }
    /**
     * {@snippet :
     * void g_rec_mutex_lock(struct _GRecMutex* rec_mutex);
     * }
     */
    public static void g_rec_mutex_lock(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_lock$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$0,"g_rec_mutex_trylock");
    }
    /**
     * {@snippet :
     * int g_rec_mutex_trylock(struct _GRecMutex* rec_mutex);
     * }
     */
    public static int g_rec_mutex_trylock(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"g_rec_mutex_unlock");
    }
    /**
     * {@snippet :
     * void g_rec_mutex_unlock(struct _GRecMutex* rec_mutex);
     * }
     */
    public static void g_rec_mutex_unlock(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_unlock$MH();
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$2,"g_cond_init");
    }
    /**
     * {@snippet :
     * void g_cond_init(struct _GCond* cond);
     * }
     */
    public static void g_cond_init(MemorySegment cond) {
        var mh$ = g_cond_init$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"g_cond_clear");
    }
    /**
     * {@snippet :
     * void g_cond_clear(struct _GCond* cond);
     * }
     */
    public static void g_cond_clear(MemorySegment cond) {
        var mh$ = g_cond_clear$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$4,"g_cond_wait");
    }
    /**
     * {@snippet :
     * void g_cond_wait(struct _GCond* cond, union _GMutex* mutex);
     * }
     */
    public static void g_cond_wait(MemorySegment cond, MemorySegment mutex) {
        var mh$ = g_cond_wait$MH();
        try {
            mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"g_cond_signal");
    }
    /**
     * {@snippet :
     * void g_cond_signal(struct _GCond* cond);
     * }
     */
    public static void g_cond_signal(MemorySegment cond) {
        var mh$ = g_cond_signal$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$0,"g_cond_broadcast");
    }
    /**
     * {@snippet :
     * void g_cond_broadcast(struct _GCond* cond);
     * }
     */
    public static void g_cond_broadcast(MemorySegment cond) {
        var mh$ = g_cond_broadcast$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait_until$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$1,"g_cond_wait_until");
    }
    /**
     * {@snippet :
     * int g_cond_wait_until(struct _GCond* cond, union _GMutex* mutex, long end_time);
     * }
     */
    public static int g_cond_wait_until(MemorySegment cond, MemorySegment mutex, long end_time) {
        var mh$ = g_cond_wait_until$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_get$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$2,"g_private_get");
    }
    /**
     * {@snippet :
     * void* g_private_get(struct _GPrivate* key);
     * }
     */
    public static MemorySegment g_private_get(MemorySegment key) {
        var mh$ = g_private_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_set$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"g_private_set");
    }
    /**
     * {@snippet :
     * void g_private_set(struct _GPrivate* key, void* value);
     * }
     */
    public static void g_private_set(MemorySegment key, MemorySegment value) {
        var mh$ = g_private_set$MH();
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$4,"g_private_replace");
    }
    /**
     * {@snippet :
     * void g_private_replace(struct _GPrivate* key, void* value);
     * }
     */
    public static void g_private_replace(MemorySegment key, MemorySegment value) {
        var mh$ = g_private_replace$MH();
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$0,"g_once_impl");
    }
    /**
     * {@snippet :
     * void* g_once_impl(struct _GOnce* once, void* (*func)(void*), void* arg);
     * }
     */
    public static MemorySegment g_once_impl(MemorySegment once, MemorySegment func, MemorySegment arg) {
        var mh$ = g_once_impl$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(once, func, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_enter$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$1,"g_once_init_enter");
    }
    /**
     * {@snippet :
     * int g_once_init_enter(void* location);
     * }
     */
    public static int g_once_init_enter(MemorySegment location) {
        var mh$ = g_once_init_enter$MH();
        try {
            return (int)mh$.invokeExact(location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_leave$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$2,"g_once_init_leave");
    }
    /**
     * {@snippet :
     * void g_once_init_leave(void* location, unsigned long result);
     * }
     */
    public static void g_once_init_leave(MemorySegment location, long result) {
        var mh$ = g_once_init_leave$MH();
        try {
            mh$.invokeExact(location, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_num_processors$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$3,"g_get_num_processors");
    }
    /**
     * {@snippet :
     * unsigned int g_get_num_processors();
     * }
     */
    public static int g_get_num_processors() {
        var mh$ = g_get_num_processors$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$4,"g_async_queue_new");
    }
    /**
     * {@snippet :
     * struct _GAsyncQueue* g_async_queue_new();
     * }
     */
    public static MemorySegment g_async_queue_new() {
        var mh$ = g_async_queue_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$0,"g_async_queue_new_full");
    }
    /**
     * {@snippet :
     * struct _GAsyncQueue* g_async_queue_new_full(void (*item_free_func)(void*));
     * }
     */
    public static MemorySegment g_async_queue_new_full(MemorySegment item_free_func) {
        var mh$ = g_async_queue_new_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(item_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$1,"g_async_queue_lock");
    }
    /**
     * {@snippet :
     * void g_async_queue_lock(struct _GAsyncQueue* queue);
     * }
     */
    public static void g_async_queue_lock(MemorySegment queue) {
        var mh$ = g_async_queue_lock$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$2,"g_async_queue_unlock");
    }
    /**
     * {@snippet :
     * void g_async_queue_unlock(struct _GAsyncQueue* queue);
     * }
     */
    public static void g_async_queue_unlock(MemorySegment queue) {
        var mh$ = g_async_queue_unlock$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$3,"g_async_queue_ref");
    }
    /**
     * {@snippet :
     * struct _GAsyncQueue* g_async_queue_ref(struct _GAsyncQueue* queue);
     * }
     */
    public static MemorySegment g_async_queue_ref(MemorySegment queue) {
        var mh$ = g_async_queue_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$4,"g_async_queue_unref");
    }
    /**
     * {@snippet :
     * void g_async_queue_unref(struct _GAsyncQueue* queue);
     * }
     */
    public static void g_async_queue_unref(MemorySegment queue) {
        var mh$ = g_async_queue_unref$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$5,"g_async_queue_ref_unlocked");
    }
    /**
     * {@snippet :
     * void g_async_queue_ref_unlocked(struct _GAsyncQueue* queue);
     * }
     */
    public static void g_async_queue_ref_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_ref_unlocked$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref_and_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$0,"g_async_queue_unref_and_unlock");
    }
    /**
     * {@snippet :
     * void g_async_queue_unref_and_unlock(struct _GAsyncQueue* queue);
     * }
     */
    public static void g_async_queue_unref_and_unlock(MemorySegment queue) {
        var mh$ = g_async_queue_unref_and_unlock$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$1,"g_async_queue_push");
    }
    /**
     * {@snippet :
     * void g_async_queue_push(struct _GAsyncQueue* queue, void* data);
     * }
     */
    public static void g_async_queue_push(MemorySegment queue, MemorySegment data) {
        var mh$ = g_async_queue_push$MH();
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$2,"g_async_queue_push_unlocked");
    }
    /**
     * {@snippet :
     * void g_async_queue_push_unlocked(struct _GAsyncQueue* queue, void* data);
     * }
     */
    public static void g_async_queue_push_unlocked(MemorySegment queue, MemorySegment data) {
        var mh$ = g_async_queue_push_unlocked$MH();
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$4,"g_async_queue_push_sorted");
    }
    /**
     * {@snippet :
     * void g_async_queue_push_sorted(struct _GAsyncQueue* queue, void* data, int (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_async_queue_push_sorted(MemorySegment queue, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_push_sorted$MH();
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$0,"g_async_queue_push_sorted_unlocked");
    }
    /**
     * {@snippet :
     * void g_async_queue_push_sorted_unlocked(struct _GAsyncQueue* queue, void* data, int (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_async_queue_push_sorted_unlocked(MemorySegment queue, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_push_sorted_unlocked$MH();
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$1,"g_async_queue_pop");
    }
    /**
     * {@snippet :
     * void* g_async_queue_pop(struct _GAsyncQueue* queue);
     * }
     */
    public static MemorySegment g_async_queue_pop(MemorySegment queue) {
        var mh$ = g_async_queue_pop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$2,"g_async_queue_pop_unlocked");
    }
    /**
     * {@snippet :
     * void* g_async_queue_pop_unlocked(struct _GAsyncQueue* queue);
     * }
     */
    public static MemorySegment g_async_queue_pop_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$3,"g_async_queue_try_pop");
    }
    /**
     * {@snippet :
     * void* g_async_queue_try_pop(struct _GAsyncQueue* queue);
     * }
     */
    public static MemorySegment g_async_queue_try_pop(MemorySegment queue) {
        var mh$ = g_async_queue_try_pop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$4,"g_async_queue_try_pop_unlocked");
    }
    /**
     * {@snippet :
     * void* g_async_queue_try_pop_unlocked(struct _GAsyncQueue* queue);
     * }
     */
    public static MemorySegment g_async_queue_try_pop_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_try_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$5,"g_async_queue_timeout_pop");
    }
    /**
     * {@snippet :
     * void* g_async_queue_timeout_pop(struct _GAsyncQueue* queue, unsigned long timeout);
     * }
     */
    public static MemorySegment g_async_queue_timeout_pop(MemorySegment queue, long timeout) {
        var mh$ = g_async_queue_timeout_pop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$0,"g_async_queue_timeout_pop_unlocked");
    }
    /**
     * {@snippet :
     * void* g_async_queue_timeout_pop_unlocked(struct _GAsyncQueue* queue, unsigned long timeout);
     * }
     */
    public static MemorySegment g_async_queue_timeout_pop_unlocked(MemorySegment queue, long timeout) {
        var mh$ = g_async_queue_timeout_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$1,"g_async_queue_length");
    }
    /**
     * {@snippet :
     * int g_async_queue_length(struct _GAsyncQueue* queue);
     * }
     */
    public static int g_async_queue_length(MemorySegment queue) {
        var mh$ = g_async_queue_length$MH();
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$2,"g_async_queue_length_unlocked");
    }
    /**
     * {@snippet :
     * int g_async_queue_length_unlocked(struct _GAsyncQueue* queue);
     * }
     */
    public static int g_async_queue_length_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_length_unlocked$MH();
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$4,"g_async_queue_sort");
    }
    /**
     * {@snippet :
     * void g_async_queue_sort(struct _GAsyncQueue* queue, int (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_async_queue_sort(MemorySegment queue, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_sort$MH();
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$0,"g_async_queue_sort_unlocked");
    }
    /**
     * {@snippet :
     * void g_async_queue_sort_unlocked(struct _GAsyncQueue* queue, int (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_async_queue_sort_unlocked(MemorySegment queue, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_sort_unlocked$MH();
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$1,"g_async_queue_remove");
    }
    /**
     * {@snippet :
     * int g_async_queue_remove(struct _GAsyncQueue* queue, void* item);
     * }
     */
    public static int g_async_queue_remove(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_remove$MH();
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$2,"g_async_queue_remove_unlocked");
    }
    /**
     * {@snippet :
     * int g_async_queue_remove_unlocked(struct _GAsyncQueue* queue, void* item);
     * }
     */
    public static int g_async_queue_remove_unlocked(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_remove_unlocked$MH();
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$3,"g_async_queue_push_front");
    }
    /**
     * {@snippet :
     * void g_async_queue_push_front(struct _GAsyncQueue* queue, void* item);
     * }
     */
    public static void g_async_queue_push_front(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_push_front$MH();
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$4,"g_async_queue_push_front_unlocked");
    }
    /**
     * {@snippet :
     * void g_async_queue_push_front_unlocked(struct _GAsyncQueue* queue, void* item);
     * }
     */
    public static void g_async_queue_push_front_unlocked(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_push_front_unlocked$MH();
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$5,"g_async_queue_timed_pop");
    }
    /**
     * {@snippet :
     * void* g_async_queue_timed_pop(struct _GAsyncQueue* queue, struct _GTimeVal* end_time);
     * }
     */
    public static MemorySegment g_async_queue_timed_pop(MemorySegment queue, MemorySegment end_time) {
        var mh$ = g_async_queue_timed_pop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$0,"g_async_queue_timed_pop_unlocked");
    }
    /**
     * {@snippet :
     * void* g_async_queue_timed_pop_unlocked(struct _GAsyncQueue* queue, struct _GTimeVal* end_time);
     * }
     */
    public static MemorySegment g_async_queue_timed_pop_unlocked(MemorySegment queue, MemorySegment end_time) {
        var mh$ = g_async_queue_timed_pop_unlocked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int sig_atomic_t;
     * }
     */
    public static final OfInt sig_atomic_t = JAVA_INT;
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_ASYNCNL = -60;
     * }
     */
    public static int SI_ASYNCNL() {
        return (int)-60L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_DETHREAD = -7;
     * }
     */
    public static int SI_DETHREAD() {
        return (int)-7L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_TKILL = -6;
     * }
     */
    public static int SI_TKILL() {
        return (int)-6L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_SIGIO = -5;
     * }
     */
    public static int SI_SIGIO() {
        return (int)-5L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_ASYNCIO = -4;
     * }
     */
    public static int SI_ASYNCIO() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_MESGQ = -3;
     * }
     */
    public static int SI_MESGQ() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_TIMER = -2;
     * }
     */
    public static int SI_TIMER() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_QUEUE = -1;
     * }
     */
    public static int SI_QUEUE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_USER = 0;
     * }
     */
    public static int SI_USER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:35:1).SI_KERNEL = 128;
     * }
     */
    public static int SI_KERNEL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_ILLOPC = 1;
     * }
     */
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_ILLOPN = 2;
     * }
     */
    public static int ILL_ILLOPN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_ILLADR = 3;
     * }
     */
    public static int ILL_ILLADR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_ILLTRP = 4;
     * }
     */
    public static int ILL_ILLTRP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_PRVOPC = 5;
     * }
     */
    public static int ILL_PRVOPC() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_PRVREG = 6;
     * }
     */
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_COPROC = 7;
     * }
     */
    public static int ILL_COPROC() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_BADSTK = 8;
     * }
     */
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:71:1).ILL_BADIADDR = 9;
     * }
     */
    public static int ILL_BADIADDR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_INTDIV = 1;
     * }
     */
    public static int FPE_INTDIV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_INTOVF = 2;
     * }
     */
    public static int FPE_INTOVF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_FLTDIV = 3;
     * }
     */
    public static int FPE_FLTDIV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_FLTOVF = 4;
     * }
     */
    public static int FPE_FLTOVF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_FLTUND = 5;
     * }
     */
    public static int FPE_FLTUND() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_FLTRES = 6;
     * }
     */
    public static int FPE_FLTRES() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_FLTINV = 7;
     * }
     */
    public static int FPE_FLTINV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_FLTSUB = 8;
     * }
     */
    public static int FPE_FLTSUB() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_FLTUNK = 14;
     * }
     */
    public static int FPE_FLTUNK() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:94:1).FPE_CONDTRAP = 15;
     * }
     */
    public static int FPE_CONDTRAP() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_MAPERR = 1;
     * }
     */
    public static int SEGV_MAPERR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_ACCERR = 2;
     * }
     */
    public static int SEGV_ACCERR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_BNDERR = 3;
     * }
     */
    public static int SEGV_BNDERR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_PKUERR = 4;
     * }
     */
    public static int SEGV_PKUERR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_ACCADI = 5;
     * }
     */
    public static int SEGV_ACCADI() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_ADIDERR = 6;
     * }
     */
    public static int SEGV_ADIDERR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_ADIPERR = 7;
     * }
     */
    public static int SEGV_ADIPERR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_MTEAERR = 8;
     * }
     */
    public static int SEGV_MTEAERR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:119:1).SEGV_MTESERR = 9;
     * }
     */
    public static int SEGV_MTESERR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:142:1).BUS_ADRALN = 1;
     * }
     */
    public static int BUS_ADRALN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:142:1).BUS_ADRERR = 2;
     * }
     */
    public static int BUS_ADRERR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:142:1).BUS_OBJERR = 3;
     * }
     */
    public static int BUS_OBJERR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:142:1).BUS_MCEERR_AR = 4;
     * }
     */
    public static int BUS_MCEERR_AR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:142:1).BUS_MCEERR_AO = 5;
     * }
     */
    public static int BUS_MCEERR_AO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:176:1).CLD_EXITED = 1;
     * }
     */
    public static int CLD_EXITED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:176:1).CLD_KILLED = 2;
     * }
     */
    public static int CLD_KILLED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:176:1).CLD_DUMPED = 3;
     * }
     */
    public static int CLD_DUMPED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:176:1).CLD_TRAPPED = 4;
     * }
     */
    public static int CLD_TRAPPED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:176:1).CLD_STOPPED = 5;
     * }
     */
    public static int CLD_STOPPED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:176:1).CLD_CONTINUED = 6;
     * }
     */
    public static int CLD_CONTINUED() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:193:1).POLL_IN = 1;
     * }
     */
    public static int POLL_IN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:193:1).POLL_OUT = 2;
     * }
     */
    public static int POLL_OUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:193:1).POLL_MSG = 3;
     * }
     */
    public static int POLL_MSG() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:193:1).POLL_ERR = 4;
     * }
     */
    public static int POLL_ERR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:193:1).POLL_PRI = 5;
     * }
     */
    public static int POLL_PRI() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/siginfo-consts.h:193:1).POLL_HUP = 6;
     * }
     */
    public static int POLL_HUP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/sigevent-consts.h:27:1).SIGEV_SIGNAL = 0;
     * }
     */
    public static int SIGEV_SIGNAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/sigevent-consts.h:27:1).SIGEV_NONE = 1;
     * }
     */
    public static int SIGEV_NONE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/sigevent-consts.h:27:1).SIGEV_THREAD = 2;
     * }
     */
    public static int SIGEV_THREAD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/sigevent-consts.h:27:1).SIGEV_THREAD_ID = 4;
     * }
     */
    public static int SIGEV_THREAD_ID() {
        return (int)4L;
    }
    public static MethodHandle __sysv_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$1,"__sysv_signal");
    }
    /**
     * {@snippet :
     * void (*__sysv_signal(int __sig, void (*__handler)(int)))(int);
     * }
     */
    public static MemorySegment __sysv_signal(int __sig, MemorySegment __handler) {
        var mh$ = __sysv_signal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle signal$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$4,"signal");
    }
    /**
     * {@snippet :
     * void (*signal(int __sig, void (*__handler)(int)))(int);
     * }
     */
    public static MemorySegment signal(int __sig, MemorySegment __handler) {
        var mh$ = signal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kill$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$6,"kill");
    }
    /**
     * {@snippet :
     * int kill(int __pid, int __sig);
     * }
     */
    public static int kill(int __pid, int __sig) {
        var mh$ = kill$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle killpg$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$0,"killpg");
    }
    /**
     * {@snippet :
     * int killpg(int __pgrp, int __sig);
     * }
     */
    public static int killpg(int __pgrp, int __sig) {
        var mh$ = killpg$MH();
        try {
            return (int)mh$.invokeExact(__pgrp, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle raise$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$1,"raise");
    }
    /**
     * {@snippet :
     * int raise(int __sig);
     * }
     */
    public static int raise(int __sig) {
        var mh$ = raise$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ssignal$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$4,"ssignal");
    }
    /**
     * {@snippet :
     * void (*ssignal(int __sig, void (*__handler)(int)))(int);
     * }
     */
    public static MemorySegment ssignal(int __sig, MemorySegment __handler) {
        var mh$ = ssignal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$5,"gsignal");
    }
    /**
     * {@snippet :
     * int gsignal(int __sig);
     * }
     */
    public static int gsignal(int __sig) {
        var mh$ = gsignal$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psignal$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$0,"psignal");
    }
    /**
     * {@snippet :
     * void psignal(int __sig, char* __s);
     * }
     */
    public static void psignal(int __sig, MemorySegment __s) {
        var mh$ = psignal$MH();
        try {
            mh$.invokeExact(__sig, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psiginfo$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$1,"psiginfo");
    }
    /**
     * {@snippet :
     * void psiginfo(struct siginfo_t* __pinfo, char* __s);
     * }
     */
    public static void psiginfo(MemorySegment __pinfo, MemorySegment __s) {
        var mh$ = psiginfo$MH();
        try {
            mh$.invokeExact(__pinfo, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigblock$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$2,"sigblock");
    }
    /**
     * {@snippet :
     * int sigblock(int __mask);
     * }
     */
    public static int sigblock(int __mask) {
        var mh$ = sigblock$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$3,"sigsetmask");
    }
    /**
     * {@snippet :
     * int sigsetmask(int __mask);
     * }
     */
    public static int sigsetmask(int __mask) {
        var mh$ = sigsetmask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle siggetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$4,"siggetmask");
    }
    /**
     * {@snippet :
     * int siggetmask();
     * }
     */
    public static int siggetmask() {
        var mh$ = siggetmask$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigemptyset$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$0,"sigemptyset");
    }
    /**
     * {@snippet :
     * int sigemptyset(struct __sigset_t* __set);
     * }
     */
    public static int sigemptyset(MemorySegment __set) {
        var mh$ = sigemptyset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigfillset$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$1,"sigfillset");
    }
    /**
     * {@snippet :
     * int sigfillset(struct __sigset_t* __set);
     * }
     */
    public static int sigfillset(MemorySegment __set) {
        var mh$ = sigfillset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaddset$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$2,"sigaddset");
    }
    /**
     * {@snippet :
     * int sigaddset(struct __sigset_t* __set, int __signo);
     * }
     */
    public static int sigaddset(MemorySegment __set, int __signo) {
        var mh$ = sigaddset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigdelset$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$3,"sigdelset");
    }
    /**
     * {@snippet :
     * int sigdelset(struct __sigset_t* __set, int __signo);
     * }
     */
    public static int sigdelset(MemorySegment __set, int __signo) {
        var mh$ = sigdelset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigismember$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$4,"sigismember");
    }
    /**
     * {@snippet :
     * int sigismember(struct __sigset_t* __set, int __signo);
     * }
     */
    public static int sigismember(MemorySegment __set, int __signo) {
        var mh$ = sigismember$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigprocmask$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$4,"sigprocmask");
    }
    /**
     * {@snippet :
     * int sigprocmask(int __how, struct __sigset_t* __set, struct __sigset_t* __oset);
     * }
     */
    public static int sigprocmask(int __how, MemorySegment __set, MemorySegment __oset) {
        var mh$ = sigprocmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __set, __oset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsuspend$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$5,"sigsuspend");
    }
    /**
     * {@snippet :
     * int sigsuspend(struct __sigset_t* __set);
     * }
     */
    public static int sigsuspend(MemorySegment __set) {
        var mh$ = sigsuspend$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaction$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$0,"sigaction");
    }
    /**
     * {@snippet :
     * int sigaction(int __sig, struct sigaction* __act, struct sigaction* __oact);
     * }
     */
    public static int sigaction(int __sig, MemorySegment __act, MemorySegment __oact) {
        var mh$ = sigaction$MH();
        try {
            return (int)mh$.invokeExact(__sig, __act, __oact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigpending$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$1,"sigpending");
    }
    /**
     * {@snippet :
     * int sigpending(struct __sigset_t* __set);
     * }
     */
    public static int sigpending(MemorySegment __set) {
        var mh$ = sigpending$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwait$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$2,"sigwait");
    }
    /**
     * {@snippet :
     * int sigwait(struct __sigset_t* __set, int* __sig);
     * }
     */
    public static int sigwait(MemorySegment __set, MemorySegment __sig) {
        var mh$ = sigwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwaitinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$3,"sigwaitinfo");
    }
    /**
     * {@snippet :
     * int sigwaitinfo(struct __sigset_t* __set, struct siginfo_t* __info);
     * }
     */
    public static int sigwaitinfo(MemorySegment __set, MemorySegment __info) {
        var mh$ = sigwaitinfo$MH();
        try {
            return (int)mh$.invokeExact(__set, __info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigtimedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$4,"sigtimedwait");
    }
    /**
     * {@snippet :
     * int sigtimedwait(struct __sigset_t* __set, struct siginfo_t* __info, struct timespec* __timeout);
     * }
     */
    public static int sigtimedwait(MemorySegment __set, MemorySegment __info, MemorySegment __timeout) {
        var mh$ = sigtimedwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __info, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigqueue$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$6,"sigqueue");
    }
    /**
     * {@snippet :
     * int sigqueue(int __pid, int __sig, union sigval __val);
     * }
     */
    public static int sigqueue(int __pid, int __sig, MemorySegment __val) {
        var mh$ = sigqueue$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef signed char __s8;
     * }
     */
    public static final OfByte __s8 = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __u8;
     * }
     */
    public static final OfByte __u8 = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __s16;
     * }
     */
    public static final OfShort __s16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __u16;
     * }
     */
    public static final OfShort __u16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __s32;
     * }
     */
    public static final OfInt __s32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __u32;
     * }
     */
    public static final OfInt __u32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __s64;
     * }
     */
    public static final OfLong __s64 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __u64;
     * }
     */
    public static final OfLong __u64 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __kernel_key_t;
     * }
     */
    public static final OfInt __kernel_key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_mqd_t;
     * }
     */
    public static final OfInt __kernel_mqd_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_old_uid_t;
     * }
     */
    public static final OfShort __kernel_old_uid_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_old_gid_t;
     * }
     */
    public static final OfShort __kernel_old_gid_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef long __kernel_long_t;
     * }
     */
    public static final OfLong __kernel_long_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_ulong_t;
     * }
     */
    public static final OfLong __kernel_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_ino_t;
     * }
     */
    public static final OfLong __kernel_ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_mode_t;
     * }
     */
    public static final OfInt __kernel_mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_pid_t;
     * }
     */
    public static final OfInt __kernel_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_ipc_pid_t;
     * }
     */
    public static final OfInt __kernel_ipc_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_uid_t;
     * }
     */
    public static final OfInt __kernel_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_gid_t;
     * }
     */
    public static final OfInt __kernel_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __kernel_suseconds_t;
     * }
     */
    public static final OfLong __kernel_suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __kernel_daddr_t;
     * }
     */
    public static final OfInt __kernel_daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_uid32_t;
     * }
     */
    public static final OfInt __kernel_uid32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_gid32_t;
     * }
     */
    public static final OfInt __kernel_gid32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __kernel_old_dev_t;
     * }
     */
    public static final OfInt __kernel_old_dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __kernel_size_t;
     * }
     */
    public static final OfLong __kernel_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_ssize_t;
     * }
     */
    public static final OfLong __kernel_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_ptrdiff_t;
     * }
     */
    public static final OfLong __kernel_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_off_t;
     * }
     */
    public static final OfLong __kernel_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __kernel_loff_t;
     * }
     */
    public static final OfLong __kernel_loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_old_time_t;
     * }
     */
    public static final OfLong __kernel_old_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_time_t;
     * }
     */
    public static final OfLong __kernel_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __kernel_time64_t;
     * }
     */
    public static final OfLong __kernel_time64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __kernel_clock_t;
     * }
     */
    public static final OfLong __kernel_clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __kernel_timer_t;
     * }
     */
    public static final OfInt __kernel_timer_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __kernel_clockid_t;
     * }
     */
    public static final OfInt __kernel_clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char* __kernel_caddr_t;
     * }
     */
    public static final AddressLayout __kernel_caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_uid16_t;
     * }
     */
    public static final OfShort __kernel_uid16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __kernel_gid16_t;
     * }
     */
    public static final OfShort __kernel_gid16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __le16;
     * }
     */
    public static final OfShort __le16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __be16;
     * }
     */
    public static final OfShort __be16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int __le32;
     * }
     */
    public static final OfInt __le32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __be32;
     * }
     */
    public static final OfInt __be32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long __le64;
     * }
     */
    public static final OfLong __le64 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __be64;
     * }
     */
    public static final OfLong __be64 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short __sum16;
     * }
     */
    public static final OfShort __sum16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int __wsum;
     * }
     */
    public static final OfInt __wsum = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __poll_t;
     * }
     */
    public static final OfInt __poll_t = JAVA_INT;
    public static MethodHandle sigreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$4,"sigreturn");
    }
    /**
     * {@snippet :
     * int sigreturn(struct sigcontext* __scp);
     * }
     */
    public static int sigreturn(MemorySegment __scp) {
        var mh$ = sigreturn$MH();
        try {
            return (int)mh$.invokeExact(__scp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$0,"gettimeofday");
    }
    /**
     * {@snippet :
     * int gettimeofday(struct timeval* __tv, void* __tz);
     * }
     */
    public static int gettimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = gettimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle settimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$1,"settimeofday");
    }
    /**
     * {@snippet :
     * int settimeofday(struct timeval* __tv, struct timezone* __tz);
     * }
     */
    public static int settimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = settimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$2,"adjtime");
    }
    /**
     * {@snippet :
     * int adjtime(struct timeval* __delta, struct timeval* __olddelta);
     * }
     */
    public static int adjtime(MemorySegment __delta, MemorySegment __olddelta) {
        var mh$ = adjtime$MH();
        try {
            return (int)mh$.invokeExact(__delta, __olddelta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_REAL = 0;
     * }
     */
    public static int ITIMER_REAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_VIRTUAL = 1;
     * }
     */
    public static int ITIMER_VIRTUAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_PROF = 2;
     * }
     */
    public static int ITIMER_PROF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef int __itimer_which_t;
     * }
     */
    public static final OfInt __itimer_which_t = JAVA_INT;
    public static MethodHandle getitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$4,"getitimer");
    }
    /**
     * {@snippet :
     * int getitimer(int __which, struct itimerval* __value);
     * }
     */
    public static int getitimer(int __which, MemorySegment __value) {
        var mh$ = getitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$5,"setitimer");
    }
    /**
     * {@snippet :
     * int setitimer(int __which, struct itimerval* __new, struct itimerval* __old);
     * }
     */
    public static int setitimer(int __which, MemorySegment __new, MemorySegment __old) {
        var mh$ = setitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __new, __old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimes$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$0,"utimes");
    }
    /**
     * {@snippet :
     * int utimes(char* __file, struct timeval __tvp[2]);
     * }
     */
    public static int utimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = utimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lutimes$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$1,"lutimes");
    }
    /**
     * {@snippet :
     * int lutimes(char* __file, struct timeval __tvp[2]);
     * }
     */
    public static int lutimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = lutimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimes$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$2,"futimes");
    }
    /**
     * {@snippet :
     * int futimes(int __fd, struct timeval __tvp[2]);
     * }
     */
    public static int futimes(int __fd, MemorySegment __tvp) {
        var mh$ = futimes$MH();
        try {
            return (int)mh$.invokeExact(__fd, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long elf_greg_t;
     * }
     */
    public static final OfLong elf_greg_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __pr_uid_t;
     * }
     */
    public static final OfInt __pr_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __pr_gid_t;
     * }
     */
    public static final OfInt __pr_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef void* psaddr_t;
     * }
     */
    public static final AddressLayout psaddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int lwpid_t;
     * }
     */
    public static final OfInt lwpid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long greg_t;
     * }
     */
    public static final OfLong greg_t = JAVA_LONG;
    public static MethodHandle siginterrupt$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$1,"siginterrupt");
    }
    /**
     * {@snippet :
     * int siginterrupt(int __sig, int __interrupt);
     * }
     */
    public static int siginterrupt(int __sig, int __interrupt) {
        var mh$ = siginterrupt$MH();
        try {
            return (int)mh$.invokeExact(__sig, __interrupt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/ss_flags.h:27:1).SS_ONSTACK = 1;
     * }
     */
    public static int SS_ONSTACK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/bits/ss_flags.h:27:1).SS_DISABLE = 2;
     * }
     */
    public static int SS_DISABLE() {
        return (int)2L;
    }
    public static MethodHandle sigaltstack$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$2,"sigaltstack");
    }
    /**
     * {@snippet :
     * int sigaltstack(struct stack_t* __ss, struct stack_t* __oss);
     * }
     */
    public static int sigaltstack(MemorySegment __ss, MemorySegment __oss) {
        var mh$ = sigaltstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigstack$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$0,"sigstack");
    }
    /**
     * {@snippet :
     * int sigstack(struct sigstack* __ss, struct sigstack* __oss);
     * }
     */
    public static int sigstack(MemorySegment __ss, MemorySegment __oss) {
        var mh$ = sigstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_sigmask$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$1,"pthread_sigmask");
    }
    /**
     * {@snippet :
     * int pthread_sigmask(int __how, struct __sigset_t* __newmask, struct __sigset_t* __oldmask);
     * }
     */
    public static int pthread_sigmask(int __how, MemorySegment __newmask, MemorySegment __oldmask) {
        var mh$ = pthread_sigmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __newmask, __oldmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_kill$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$2,"pthread_kill");
    }
    /**
     * {@snippet :
     * int pthread_kill(unsigned long __threadid, int __signo);
     * }
     */
    public static int pthread_kill(long __threadid, int __signo) {
        var mh$ = pthread_kill$MH();
        try {
            return (int)mh$.invokeExact(__threadid, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmin$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$3,"__libc_current_sigrtmin");
    }
    /**
     * {@snippet :
     * int __libc_current_sigrtmin();
     * }
     */
    public static int __libc_current_sigrtmin() {
        var mh$ = __libc_current_sigrtmin$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmax$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$4,"__libc_current_sigrtmax");
    }
    /**
     * {@snippet :
     * int __libc_current_sigrtmax();
     * }
     */
    public static int __libc_current_sigrtmax() {
        var mh$ = __libc_current_sigrtmax$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_on_error_query$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$5,"g_on_error_query");
    }
    /**
     * {@snippet :
     * void g_on_error_query(char* prg_name);
     * }
     */
    public static void g_on_error_query(MemorySegment prg_name) {
        var mh$ = g_on_error_query$MH();
        try {
            mh$.invokeExact(prg_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_on_error_stack_trace$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$0,"g_on_error_stack_trace");
    }
    /**
     * {@snippet :
     * void g_on_error_stack_trace(char* prg_name);
     * }
     */
    public static void g_on_error_stack_trace(MemorySegment prg_name) {
        var mh$ = g_on_error_stack_trace$MH();
        try {
            mh$.invokeExact(prg_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_encode_step$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$2,"g_base64_encode_step");
    }
    /**
     * {@snippet :
     * unsigned long g_base64_encode_step(unsigned char* in, unsigned long len, int break_lines, char* out, int* state, int* save);
     * }
     */
    public static long g_base64_encode_step(MemorySegment in, long len, int break_lines, MemorySegment out, MemorySegment state, MemorySegment save) {
        var mh$ = g_base64_encode_step$MH();
        try {
            return (long)mh$.invokeExact(in, len, break_lines, out, state, save);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_encode_close$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$4,"g_base64_encode_close");
    }
    /**
     * {@snippet :
     * unsigned long g_base64_encode_close(int break_lines, char* out, int* state, int* save);
     * }
     */
    public static long g_base64_encode_close(int break_lines, MemorySegment out, MemorySegment state, MemorySegment save) {
        var mh$ = g_base64_encode_close$MH();
        try {
            return (long)mh$.invokeExact(break_lines, out, state, save);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_encode$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$5,"g_base64_encode");
    }
    /**
     * {@snippet :
     * char* g_base64_encode(unsigned char* data, unsigned long len);
     * }
     */
    public static MemorySegment g_base64_encode(MemorySegment data, long len) {
        var mh$ = g_base64_encode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_decode_step$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$0,"g_base64_decode_step");
    }
    /**
     * {@snippet :
     * unsigned long g_base64_decode_step(char* in, unsigned long len, unsigned char* out, int* state, unsigned int* save);
     * }
     */
    public static long g_base64_decode_step(MemorySegment in, long len, MemorySegment out, MemorySegment state, MemorySegment save) {
        var mh$ = g_base64_decode_step$MH();
        try {
            return (long)mh$.invokeExact(in, len, out, state, save);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_decode$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$1,"g_base64_decode");
    }
    /**
     * {@snippet :
     * unsigned char* g_base64_decode(char* text, unsigned long* out_len);
     * }
     */
    public static MemorySegment g_base64_decode(MemorySegment text, MemorySegment out_len) {
        var mh$ = g_base64_decode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_base64_decode_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$2,"g_base64_decode_inplace");
    }
    /**
     * {@snippet :
     * unsigned char* g_base64_decode_inplace(char* text, unsigned long* out_len);
     * }
     */
    public static MemorySegment g_base64_decode_inplace(MemorySegment text, MemorySegment out_len) {
        var mh$ = g_base64_decode_inplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$3,"g_bit_lock");
    }
    /**
     * {@snippet :
     * void g_bit_lock(int* address, int lock_bit);
     * }
     */
    public static void g_bit_lock(MemorySegment address, int lock_bit) {
        var mh$ = g_bit_lock$MH();
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$4,"g_bit_trylock");
    }
    /**
     * {@snippet :
     * int g_bit_trylock(int* address, int lock_bit);
     * }
     */
    public static int g_bit_trylock(MemorySegment address, int lock_bit) {
        var mh$ = g_bit_trylock$MH();
        try {
            return (int)mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$5,"g_bit_unlock");
    }
    /**
     * {@snippet :
     * void g_bit_unlock(int* address, int lock_bit);
     * }
     */
    public static void g_bit_unlock(MemorySegment address, int lock_bit) {
        var mh$ = g_bit_unlock$MH();
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pointer_bit_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$0,"g_pointer_bit_lock");
    }
    /**
     * {@snippet :
     * void g_pointer_bit_lock(void* address, int lock_bit);
     * }
     */
    public static void g_pointer_bit_lock(MemorySegment address, int lock_bit) {
        var mh$ = g_pointer_bit_lock$MH();
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pointer_bit_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$1,"g_pointer_bit_trylock");
    }
    /**
     * {@snippet :
     * int g_pointer_bit_trylock(void* address, int lock_bit);
     * }
     */
    public static int g_pointer_bit_trylock(MemorySegment address, int lock_bit) {
        var mh$ = g_pointer_bit_trylock$MH();
        try {
            return (int)mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pointer_bit_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$2,"g_pointer_bit_unlock");
    }
    /**
     * {@snippet :
     * void g_pointer_bit_unlock(void* address, int lock_bit);
     * }
     */
    public static void g_pointer_bit_unlock(MemorySegment address, int lock_bit) {
        var mh$ = g_pointer_bit_unlock$MH();
        try {
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GTimeType.G_TIME_TYPE_STANDARD = 0;
     * }
     */
    public static int G_TIME_TYPE_STANDARD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GTimeType.G_TIME_TYPE_DAYLIGHT = 1;
     * }
     */
    public static int G_TIME_TYPE_DAYLIGHT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GTimeType.G_TIME_TYPE_UNIVERSAL = 2;
     * }
     */
    public static int G_TIME_TYPE_UNIVERSAL() {
        return (int)2L;
    }
    public static MethodHandle g_time_zone_new$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$3,"g_time_zone_new");
    }
    /**
     * {@snippet :
     * struct _GTimeZone* g_time_zone_new(char* identifier);
     * }
     */
    public static MemorySegment g_time_zone_new(MemorySegment identifier) {
        var mh$ = g_time_zone_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_identifier$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$4,"g_time_zone_new_identifier");
    }
    /**
     * {@snippet :
     * struct _GTimeZone* g_time_zone_new_identifier(char* identifier);
     * }
     */
    public static MemorySegment g_time_zone_new_identifier(MemorySegment identifier) {
        var mh$ = g_time_zone_new_identifier$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$5,"g_time_zone_new_utc");
    }
    /**
     * {@snippet :
     * struct _GTimeZone* g_time_zone_new_utc();
     * }
     */
    public static MemorySegment g_time_zone_new_utc() {
        var mh$ = g_time_zone_new_utc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_local$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$0,"g_time_zone_new_local");
    }
    /**
     * {@snippet :
     * struct _GTimeZone* g_time_zone_new_local();
     * }
     */
    public static MemorySegment g_time_zone_new_local() {
        var mh$ = g_time_zone_new_local$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_new_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$1,"g_time_zone_new_offset");
    }
    /**
     * {@snippet :
     * struct _GTimeZone* g_time_zone_new_offset(int seconds);
     * }
     */
    public static MemorySegment g_time_zone_new_offset(int seconds) {
        var mh$ = g_time_zone_new_offset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$2,"g_time_zone_ref");
    }
    /**
     * {@snippet :
     * struct _GTimeZone* g_time_zone_ref(struct _GTimeZone* tz);
     * }
     */
    public static MemorySegment g_time_zone_ref(MemorySegment tz) {
        var mh$ = g_time_zone_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$3,"g_time_zone_unref");
    }
    /**
     * {@snippet :
     * void g_time_zone_unref(struct _GTimeZone* tz);
     * }
     */
    public static void g_time_zone_unref(MemorySegment tz) {
        var mh$ = g_time_zone_unref$MH();
        try {
            mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_find_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$5,"g_time_zone_find_interval");
    }
    /**
     * {@snippet :
     * int g_time_zone_find_interval(struct _GTimeZone* tz, enum GTimeType type, long time_);
     * }
     */
    public static int g_time_zone_find_interval(MemorySegment tz, int type, long time_) {
        var mh$ = g_time_zone_find_interval$MH();
        try {
            return (int)mh$.invokeExact(tz, type, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_adjust_time$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$1,"g_time_zone_adjust_time");
    }
    /**
     * {@snippet :
     * int g_time_zone_adjust_time(struct _GTimeZone* tz, enum GTimeType type, long* time_);
     * }
     */
    public static int g_time_zone_adjust_time(MemorySegment tz, int type, MemorySegment time_) {
        var mh$ = g_time_zone_adjust_time$MH();
        try {
            return (int)mh$.invokeExact(tz, type, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_get_abbreviation$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$2,"g_time_zone_get_abbreviation");
    }
    /**
     * {@snippet :
     * char* g_time_zone_get_abbreviation(struct _GTimeZone* tz, int interval);
     * }
     */
    public static MemorySegment g_time_zone_get_abbreviation(MemorySegment tz, int interval) {
        var mh$ = g_time_zone_get_abbreviation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_get_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$3,"g_time_zone_get_offset");
    }
    /**
     * {@snippet :
     * int g_time_zone_get_offset(struct _GTimeZone* tz, int interval);
     * }
     */
    public static int g_time_zone_get_offset(MemorySegment tz, int interval) {
        var mh$ = g_time_zone_get_offset$MH();
        try {
            return (int)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_is_dst$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$4,"g_time_zone_is_dst");
    }
    /**
     * {@snippet :
     * int g_time_zone_is_dst(struct _GTimeZone* tz, int interval);
     * }
     */
    public static int g_time_zone_is_dst(MemorySegment tz, int interval) {
        var mh$ = g_time_zone_is_dst$MH();
        try {
            return (int)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_zone_get_identifier$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$5,"g_time_zone_get_identifier");
    }
    /**
     * {@snippet :
     * char* g_time_zone_get_identifier(struct _GTimeZone* tz);
     * }
     */
    public static MemorySegment g_time_zone_get_identifier(MemorySegment tz) {
        var mh$ = g_time_zone_get_identifier$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long GTimeSpan;
     * }
     */
    public static final OfLong GTimeSpan = JAVA_LONG;
    public static MethodHandle g_date_time_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$0,"g_date_time_unref");
    }
    /**
     * {@snippet :
     * void g_date_time_unref(struct _GDateTime* datetime);
     * }
     */
    public static void g_date_time_unref(MemorySegment datetime) {
        var mh$ = g_date_time_unref$MH();
        try {
            mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$1,"g_date_time_ref");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_ref(struct _GDateTime* datetime);
     * }
     */
    public static MemorySegment g_date_time_ref(MemorySegment datetime) {
        var mh$ = g_date_time_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_now$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$2,"g_date_time_new_now");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_now(struct _GTimeZone* tz);
     * }
     */
    public static MemorySegment g_date_time_new_now(MemorySegment tz) {
        var mh$ = g_date_time_new_now$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_now_local$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$3,"g_date_time_new_now_local");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_now_local();
     * }
     */
    public static MemorySegment g_date_time_new_now_local() {
        var mh$ = g_date_time_new_now_local$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_now_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$4,"g_date_time_new_now_utc");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_now_utc();
     * }
     */
    public static MemorySegment g_date_time_new_now_utc() {
        var mh$ = g_date_time_new_now_utc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_unix_local$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$5,"g_date_time_new_from_unix_local");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_from_unix_local(long t);
     * }
     */
    public static MemorySegment g_date_time_new_from_unix_local(long t) {
        var mh$ = g_date_time_new_from_unix_local$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_unix_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$0,"g_date_time_new_from_unix_utc");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_from_unix_utc(long t);
     * }
     */
    public static MemorySegment g_date_time_new_from_unix_utc(long t) {
        var mh$ = g_date_time_new_from_unix_utc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_timeval_local$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$1,"g_date_time_new_from_timeval_local");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_from_timeval_local(struct _GTimeVal* tv);
     * }
     */
    public static MemorySegment g_date_time_new_from_timeval_local(MemorySegment tv) {
        var mh$ = g_date_time_new_from_timeval_local$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_timeval_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$2,"g_date_time_new_from_timeval_utc");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_from_timeval_utc(struct _GTimeVal* tv);
     * }
     */
    public static MemorySegment g_date_time_new_from_timeval_utc(MemorySegment tv) {
        var mh$ = g_date_time_new_from_timeval_utc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_from_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$3,"g_date_time_new_from_iso8601");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_from_iso8601(char* text, struct _GTimeZone* default_tz);
     * }
     */
    public static MemorySegment g_date_time_new_from_iso8601(MemorySegment text, MemorySegment default_tz) {
        var mh$ = g_date_time_new_from_iso8601$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, default_tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$5,"g_date_time_new");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new(struct _GTimeZone* tz, int year, int month, int day, int hour, int minute, double seconds);
     * }
     */
    public static MemorySegment g_date_time_new(MemorySegment tz, int year, int month, int day, int hour, int minute, double seconds) {
        var mh$ = g_date_time_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tz, year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_local$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$1,"g_date_time_new_local");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_local(int year, int month, int day, int hour, int minute, double seconds);
     * }
     */
    public static MemorySegment g_date_time_new_local(int year, int month, int day, int hour, int minute, double seconds) {
        var mh$ = g_date_time_new_local$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_new_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$2,"g_date_time_new_utc");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_new_utc(int year, int month, int day, int hour, int minute, double seconds);
     * }
     */
    public static MemorySegment g_date_time_new_utc(int year, int month, int day, int hour, int minute, double seconds) {
        var mh$ = g_date_time_new_utc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$3,"g_date_time_add");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add(struct _GDateTime* datetime, long timespan);
     * }
     */
    public static MemorySegment g_date_time_add(MemorySegment datetime, long timespan) {
        var mh$ = g_date_time_add$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, timespan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_years$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$4,"g_date_time_add_years");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_years(struct _GDateTime* datetime, int years);
     * }
     */
    public static MemorySegment g_date_time_add_years(MemorySegment datetime, int years) {
        var mh$ = g_date_time_add_years$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, years);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_months$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$5,"g_date_time_add_months");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_months(struct _GDateTime* datetime, int months);
     * }
     */
    public static MemorySegment g_date_time_add_months(MemorySegment datetime, int months) {
        var mh$ = g_date_time_add_months$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, months);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_weeks$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$0,"g_date_time_add_weeks");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_weeks(struct _GDateTime* datetime, int weeks);
     * }
     */
    public static MemorySegment g_date_time_add_weeks(MemorySegment datetime, int weeks) {
        var mh$ = g_date_time_add_weeks$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, weeks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_days$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$1,"g_date_time_add_days");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_days(struct _GDateTime* datetime, int days);
     * }
     */
    public static MemorySegment g_date_time_add_days(MemorySegment datetime, int days) {
        var mh$ = g_date_time_add_days$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, days);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_hours$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$2,"g_date_time_add_hours");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_hours(struct _GDateTime* datetime, int hours);
     * }
     */
    public static MemorySegment g_date_time_add_hours(MemorySegment datetime, int hours) {
        var mh$ = g_date_time_add_hours$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, hours);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_minutes$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$3,"g_date_time_add_minutes");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_minutes(struct _GDateTime* datetime, int minutes);
     * }
     */
    public static MemorySegment g_date_time_add_minutes(MemorySegment datetime, int minutes) {
        var mh$ = g_date_time_add_minutes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, minutes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_seconds$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$5,"g_date_time_add_seconds");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_seconds(struct _GDateTime* datetime, double seconds);
     * }
     */
    public static MemorySegment g_date_time_add_seconds(MemorySegment datetime, double seconds) {
        var mh$ = g_date_time_add_seconds$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_add_full$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$0,"g_date_time_add_full");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_add_full(struct _GDateTime* datetime, int years, int months, int days, int hours, int minutes, double seconds);
     * }
     */
    public static MemorySegment g_date_time_add_full(MemorySegment datetime, int years, int months, int days, int hours, int minutes, double seconds) {
        var mh$ = g_date_time_add_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, years, months, days, hours, minutes, seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$1,"g_date_time_compare");
    }
    /**
     * {@snippet :
     * int g_date_time_compare(void* dt1, void* dt2);
     * }
     */
    public static int g_date_time_compare(MemorySegment dt1, MemorySegment dt2) {
        var mh$ = g_date_time_compare$MH();
        try {
            return (int)mh$.invokeExact(dt1, dt2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_difference$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$2,"g_date_time_difference");
    }
    /**
     * {@snippet :
     * long g_date_time_difference(struct _GDateTime* end, struct _GDateTime* begin);
     * }
     */
    public static long g_date_time_difference(MemorySegment end, MemorySegment begin) {
        var mh$ = g_date_time_difference$MH();
        try {
            return (long)mh$.invokeExact(end, begin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$3,"g_date_time_hash");
    }
    /**
     * {@snippet :
     * unsigned int g_date_time_hash(void* datetime);
     * }
     */
    public static int g_date_time_hash(MemorySegment datetime) {
        var mh$ = g_date_time_hash$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$4,"g_date_time_equal");
    }
    /**
     * {@snippet :
     * int g_date_time_equal(void* dt1, void* dt2);
     * }
     */
    public static int g_date_time_equal(MemorySegment dt1, MemorySegment dt2) {
        var mh$ = g_date_time_equal$MH();
        try {
            return (int)mh$.invokeExact(dt1, dt2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_ymd$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$5,"g_date_time_get_ymd");
    }
    /**
     * {@snippet :
     * void g_date_time_get_ymd(struct _GDateTime* datetime, int* year, int* month, int* day);
     * }
     */
    public static void g_date_time_get_ymd(MemorySegment datetime, MemorySegment year, MemorySegment month, MemorySegment day) {
        var mh$ = g_date_time_get_ymd$MH();
        try {
            mh$.invokeExact(datetime, year, month, day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_year$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$0,"g_date_time_get_year");
    }
    /**
     * {@snippet :
     * int g_date_time_get_year(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_year$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_month$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$1,"g_date_time_get_month");
    }
    /**
     * {@snippet :
     * int g_date_time_get_month(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_month(MemorySegment datetime) {
        var mh$ = g_date_time_get_month$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_day_of_month$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$2,"g_date_time_get_day_of_month");
    }
    /**
     * {@snippet :
     * int g_date_time_get_day_of_month(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_day_of_month(MemorySegment datetime) {
        var mh$ = g_date_time_get_day_of_month$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_week_numbering_year$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$3,"g_date_time_get_week_numbering_year");
    }
    /**
     * {@snippet :
     * int g_date_time_get_week_numbering_year(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_week_numbering_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_week_numbering_year$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$4,"g_date_time_get_week_of_year");
    }
    /**
     * {@snippet :
     * int g_date_time_get_week_of_year(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_week_of_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_week_of_year$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_day_of_week$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$5,"g_date_time_get_day_of_week");
    }
    /**
     * {@snippet :
     * int g_date_time_get_day_of_week(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_day_of_week(MemorySegment datetime) {
        var mh$ = g_date_time_get_day_of_week$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_day_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$0,"g_date_time_get_day_of_year");
    }
    /**
     * {@snippet :
     * int g_date_time_get_day_of_year(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_day_of_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_day_of_year$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_hour$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$1,"g_date_time_get_hour");
    }
    /**
     * {@snippet :
     * int g_date_time_get_hour(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_hour(MemorySegment datetime) {
        var mh$ = g_date_time_get_hour$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_minute$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$2,"g_date_time_get_minute");
    }
    /**
     * {@snippet :
     * int g_date_time_get_minute(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_minute(MemorySegment datetime) {
        var mh$ = g_date_time_get_minute$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_second$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$3,"g_date_time_get_second");
    }
    /**
     * {@snippet :
     * int g_date_time_get_second(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_second(MemorySegment datetime) {
        var mh$ = g_date_time_get_second$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_microsecond$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$4,"g_date_time_get_microsecond");
    }
    /**
     * {@snippet :
     * int g_date_time_get_microsecond(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_get_microsecond(MemorySegment datetime) {
        var mh$ = g_date_time_get_microsecond$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_seconds$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$5,"g_date_time_get_seconds");
    }
    /**
     * {@snippet :
     * double g_date_time_get_seconds(struct _GDateTime* datetime);
     * }
     */
    public static double g_date_time_get_seconds(MemorySegment datetime) {
        var mh$ = g_date_time_get_seconds$MH();
        try {
            return (double)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_unix$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$0,"g_date_time_to_unix");
    }
    /**
     * {@snippet :
     * long g_date_time_to_unix(struct _GDateTime* datetime);
     * }
     */
    public static long g_date_time_to_unix(MemorySegment datetime) {
        var mh$ = g_date_time_to_unix$MH();
        try {
            return (long)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_timeval$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$1,"g_date_time_to_timeval");
    }
    /**
     * {@snippet :
     * int g_date_time_to_timeval(struct _GDateTime* datetime, struct _GTimeVal* tv);
     * }
     */
    public static int g_date_time_to_timeval(MemorySegment datetime, MemorySegment tv) {
        var mh$ = g_date_time_to_timeval$MH();
        try {
            return (int)mh$.invokeExact(datetime, tv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_utc_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$2,"g_date_time_get_utc_offset");
    }
    /**
     * {@snippet :
     * long g_date_time_get_utc_offset(struct _GDateTime* datetime);
     * }
     */
    public static long g_date_time_get_utc_offset(MemorySegment datetime) {
        var mh$ = g_date_time_get_utc_offset$MH();
        try {
            return (long)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_timezone$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$3,"g_date_time_get_timezone");
    }
    /**
     * {@snippet :
     * struct _GTimeZone* g_date_time_get_timezone(struct _GDateTime* datetime);
     * }
     */
    public static MemorySegment g_date_time_get_timezone(MemorySegment datetime) {
        var mh$ = g_date_time_get_timezone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_get_timezone_abbreviation$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$4,"g_date_time_get_timezone_abbreviation");
    }
    /**
     * {@snippet :
     * char* g_date_time_get_timezone_abbreviation(struct _GDateTime* datetime);
     * }
     */
    public static MemorySegment g_date_time_get_timezone_abbreviation(MemorySegment datetime) {
        var mh$ = g_date_time_get_timezone_abbreviation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_is_daylight_savings$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$5,"g_date_time_is_daylight_savings");
    }
    /**
     * {@snippet :
     * int g_date_time_is_daylight_savings(struct _GDateTime* datetime);
     * }
     */
    public static int g_date_time_is_daylight_savings(MemorySegment datetime) {
        var mh$ = g_date_time_is_daylight_savings$MH();
        try {
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_timezone$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$0,"g_date_time_to_timezone");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_to_timezone(struct _GDateTime* datetime, struct _GTimeZone* tz);
     * }
     */
    public static MemorySegment g_date_time_to_timezone(MemorySegment datetime, MemorySegment tz) {
        var mh$ = g_date_time_to_timezone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_local$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$1,"g_date_time_to_local");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_to_local(struct _GDateTime* datetime);
     * }
     */
    public static MemorySegment g_date_time_to_local(MemorySegment datetime) {
        var mh$ = g_date_time_to_local$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_to_utc$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$2,"g_date_time_to_utc");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_date_time_to_utc(struct _GDateTime* datetime);
     * }
     */
    public static MemorySegment g_date_time_to_utc(MemorySegment datetime) {
        var mh$ = g_date_time_to_utc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_format$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$3,"g_date_time_format");
    }
    /**
     * {@snippet :
     * char* g_date_time_format(struct _GDateTime* datetime, char* format);
     * }
     */
    public static MemorySegment g_date_time_format(MemorySegment datetime, MemorySegment format) {
        var mh$ = g_date_time_format$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_time_format_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$4,"g_date_time_format_iso8601");
    }
    /**
     * {@snippet :
     * char* g_date_time_format_iso8601(struct _GDateTime* datetime);
     * }
     */
    public static MemorySegment g_date_time_format_iso8601(MemorySegment datetime) {
        var mh$ = g_date_time_format_iso8601$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_INVALID_URI = 0;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_INVALID_URI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_INVALID_VALUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_READ = 4;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_READ() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_WRITE = 6;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_WRITE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GBookmarkFileError.G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7;
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND() {
        return (int)7L;
    }
    public static MethodHandle g_bookmark_file_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$5,"g_bookmark_file_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_bookmark_file_error_quark();
     * }
     */
    public static int g_bookmark_file_error_quark() {
        var mh$ = g_bookmark_file_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_new$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$0,"g_bookmark_file_new");
    }
    /**
     * {@snippet :
     * struct _GBookmarkFile* g_bookmark_file_new();
     * }
     */
    public static MemorySegment g_bookmark_file_new() {
        var mh$ = g_bookmark_file_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_free$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$1,"g_bookmark_file_free");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_free(struct _GBookmarkFile* bookmark);
     * }
     */
    public static void g_bookmark_file_free(MemorySegment bookmark) {
        var mh$ = g_bookmark_file_free$MH();
        try {
            mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$2,"g_bookmark_file_copy");
    }
    /**
     * {@snippet :
     * struct _GBookmarkFile* g_bookmark_file_copy(struct _GBookmarkFile* bookmark);
     * }
     */
    public static MemorySegment g_bookmark_file_copy(MemorySegment bookmark) {
        var mh$ = g_bookmark_file_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_load_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$3,"g_bookmark_file_load_from_file");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_load_from_file(struct _GBookmarkFile* bookmark, char* filename, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_load_from_file(MemorySegment bookmark, MemorySegment filename, MemorySegment error) {
        var mh$ = g_bookmark_file_load_from_file$MH();
        try {
            return (int)mh$.invokeExact(bookmark, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_load_from_data$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$4,"g_bookmark_file_load_from_data");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_load_from_data(struct _GBookmarkFile* bookmark, char* data, unsigned long length, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_load_from_data(MemorySegment bookmark, MemorySegment data, long length, MemorySegment error) {
        var mh$ = g_bookmark_file_load_from_data$MH();
        try {
            return (int)mh$.invokeExact(bookmark, data, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_load_from_data_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$5,"g_bookmark_file_load_from_data_dirs");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_load_from_data_dirs(struct _GBookmarkFile* bookmark, char* file, char** full_path, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_load_from_data_dirs(MemorySegment bookmark, MemorySegment file, MemorySegment full_path, MemorySegment error) {
        var mh$ = g_bookmark_file_load_from_data_dirs$MH();
        try {
            return (int)mh$.invokeExact(bookmark, file, full_path, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_to_data$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$0,"g_bookmark_file_to_data");
    }
    /**
     * {@snippet :
     * char* g_bookmark_file_to_data(struct _GBookmarkFile* bookmark, unsigned long* length, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_to_data(MemorySegment bookmark, MemorySegment length, MemorySegment error) {
        var mh$ = g_bookmark_file_to_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$1,"g_bookmark_file_to_file");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_to_file(struct _GBookmarkFile* bookmark, char* filename, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_to_file(MemorySegment bookmark, MemorySegment filename, MemorySegment error) {
        var mh$ = g_bookmark_file_to_file$MH();
        try {
            return (int)mh$.invokeExact(bookmark, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_title$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$2,"g_bookmark_file_set_title");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_title(struct _GBookmarkFile* bookmark, char* uri, char* title);
     * }
     */
    public static void g_bookmark_file_set_title(MemorySegment bookmark, MemorySegment uri, MemorySegment title) {
        var mh$ = g_bookmark_file_set_title$MH();
        try {
            mh$.invokeExact(bookmark, uri, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_title$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$3,"g_bookmark_file_get_title");
    }
    /**
     * {@snippet :
     * char* g_bookmark_file_get_title(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_title(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_title$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_description$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$4,"g_bookmark_file_set_description");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_description(struct _GBookmarkFile* bookmark, char* uri, char* description);
     * }
     */
    public static void g_bookmark_file_set_description(MemorySegment bookmark, MemorySegment uri, MemorySegment description) {
        var mh$ = g_bookmark_file_set_description$MH();
        try {
            mh$.invokeExact(bookmark, uri, description);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_description$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$5,"g_bookmark_file_get_description");
    }
    /**
     * {@snippet :
     * char* g_bookmark_file_get_description(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_description(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_description$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_mime_type$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$0,"g_bookmark_file_set_mime_type");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_mime_type(struct _GBookmarkFile* bookmark, char* uri, char* mime_type);
     * }
     */
    public static void g_bookmark_file_set_mime_type(MemorySegment bookmark, MemorySegment uri, MemorySegment mime_type) {
        var mh$ = g_bookmark_file_set_mime_type$MH();
        try {
            mh$.invokeExact(bookmark, uri, mime_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_mime_type$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$1,"g_bookmark_file_get_mime_type");
    }
    /**
     * {@snippet :
     * char* g_bookmark_file_get_mime_type(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_mime_type(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_mime_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$3,"g_bookmark_file_set_groups");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_groups(struct _GBookmarkFile* bookmark, char* uri, char** groups, unsigned long length);
     * }
     */
    public static void g_bookmark_file_set_groups(MemorySegment bookmark, MemorySegment uri, MemorySegment groups, long length) {
        var mh$ = g_bookmark_file_set_groups$MH();
        try {
            mh$.invokeExact(bookmark, uri, groups, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_add_group$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$4,"g_bookmark_file_add_group");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_add_group(struct _GBookmarkFile* bookmark, char* uri, char* group);
     * }
     */
    public static void g_bookmark_file_add_group(MemorySegment bookmark, MemorySegment uri, MemorySegment group) {
        var mh$ = g_bookmark_file_add_group$MH();
        try {
            mh$.invokeExact(bookmark, uri, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_has_group$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$5,"g_bookmark_file_has_group");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_has_group(struct _GBookmarkFile* bookmark, char* uri, char* group, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_has_group(MemorySegment bookmark, MemorySegment uri, MemorySegment group, MemorySegment error) {
        var mh$ = g_bookmark_file_has_group$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, group, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$0,"g_bookmark_file_get_groups");
    }
    /**
     * {@snippet :
     * char** g_bookmark_file_get_groups(struct _GBookmarkFile* bookmark, char* uri, unsigned long* length, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_groups(MemorySegment bookmark, MemorySegment uri, MemorySegment length, MemorySegment error) {
        var mh$ = g_bookmark_file_get_groups$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_add_application$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$1,"g_bookmark_file_add_application");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_add_application(struct _GBookmarkFile* bookmark, char* uri, char* name, char* exec);
     * }
     */
    public static void g_bookmark_file_add_application(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec) {
        var mh$ = g_bookmark_file_add_application$MH();
        try {
            mh$.invokeExact(bookmark, uri, name, exec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_has_application$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$2,"g_bookmark_file_has_application");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_has_application(struct _GBookmarkFile* bookmark, char* uri, char* name, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_has_application(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment error) {
        var mh$ = g_bookmark_file_has_application$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_applications$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$3,"g_bookmark_file_get_applications");
    }
    /**
     * {@snippet :
     * char** g_bookmark_file_get_applications(struct _GBookmarkFile* bookmark, char* uri, unsigned long* length, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_applications(MemorySegment bookmark, MemorySegment uri, MemorySegment length, MemorySegment error) {
        var mh$ = g_bookmark_file_get_applications$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_app_info$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$5,"g_bookmark_file_set_app_info");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_set_app_info(struct _GBookmarkFile* bookmark, char* uri, char* name, char* exec, int count, long stamp, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_set_app_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, int count, long stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_set_app_info$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_application_info$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$1,"g_bookmark_file_set_application_info");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_set_application_info(struct _GBookmarkFile* bookmark, char* uri, char* name, char* exec, int count, struct _GDateTime* stamp, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_set_application_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, int count, MemorySegment stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_set_application_info$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_app_info$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$3,"g_bookmark_file_get_app_info");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_get_app_info(struct _GBookmarkFile* bookmark, char* uri, char* name, char** exec, unsigned int* count, long* stamp, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_get_app_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, MemorySegment count, MemorySegment stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_get_app_info$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_application_info$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$4,"g_bookmark_file_get_application_info");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_get_application_info(struct _GBookmarkFile* bookmark, char* uri, char* name, char** exec, unsigned int* count, struct _GDateTime** stamp, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_get_application_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, MemorySegment count, MemorySegment stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_get_application_info$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_is_private$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$6,"g_bookmark_file_set_is_private");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_is_private(struct _GBookmarkFile* bookmark, char* uri, int is_private);
     * }
     */
    public static void g_bookmark_file_set_is_private(MemorySegment bookmark, MemorySegment uri, int is_private) {
        var mh$ = g_bookmark_file_set_is_private$MH();
        try {
            mh$.invokeExact(bookmark, uri, is_private);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_is_private$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$0,"g_bookmark_file_get_is_private");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_get_is_private(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_get_is_private(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_is_private$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$1,"g_bookmark_file_set_icon");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_icon(struct _GBookmarkFile* bookmark, char* uri, char* href, char* mime_type);
     * }
     */
    public static void g_bookmark_file_set_icon(MemorySegment bookmark, MemorySegment uri, MemorySegment href, MemorySegment mime_type) {
        var mh$ = g_bookmark_file_set_icon$MH();
        try {
            mh$.invokeExact(bookmark, uri, href, mime_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$3,"g_bookmark_file_get_icon");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_get_icon(struct _GBookmarkFile* bookmark, char* uri, char** href, char** mime_type, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_get_icon(MemorySegment bookmark, MemorySegment uri, MemorySegment href, MemorySegment mime_type, MemorySegment error) {
        var mh$ = g_bookmark_file_get_icon$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, href, mime_type, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_added$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$4,"g_bookmark_file_set_added");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_added(struct _GBookmarkFile* bookmark, char* uri, long added);
     * }
     */
    public static void g_bookmark_file_set_added(MemorySegment bookmark, MemorySegment uri, long added) {
        var mh$ = g_bookmark_file_set_added$MH();
        try {
            mh$.invokeExact(bookmark, uri, added);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_added_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$5,"g_bookmark_file_set_added_date_time");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_added_date_time(struct _GBookmarkFile* bookmark, char* uri, struct _GDateTime* added);
     * }
     */
    public static void g_bookmark_file_set_added_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment added) {
        var mh$ = g_bookmark_file_set_added_date_time$MH();
        try {
            mh$.invokeExact(bookmark, uri, added);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_added$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$1,"g_bookmark_file_get_added");
    }
    /**
     * {@snippet :
     * long g_bookmark_file_get_added(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static long g_bookmark_file_get_added(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_added$MH();
        try {
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_added_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$2,"g_bookmark_file_get_added_date_time");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_bookmark_file_get_added_date_time(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_added_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_added_date_time$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_modified$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$3,"g_bookmark_file_set_modified");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_modified(struct _GBookmarkFile* bookmark, char* uri, long modified);
     * }
     */
    public static void g_bookmark_file_set_modified(MemorySegment bookmark, MemorySegment uri, long modified) {
        var mh$ = g_bookmark_file_set_modified$MH();
        try {
            mh$.invokeExact(bookmark, uri, modified);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_modified_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$4,"g_bookmark_file_set_modified_date_time");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_modified_date_time(struct _GBookmarkFile* bookmark, char* uri, struct _GDateTime* modified);
     * }
     */
    public static void g_bookmark_file_set_modified_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment modified) {
        var mh$ = g_bookmark_file_set_modified_date_time$MH();
        try {
            mh$.invokeExact(bookmark, uri, modified);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_modified$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$5,"g_bookmark_file_get_modified");
    }
    /**
     * {@snippet :
     * long g_bookmark_file_get_modified(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static long g_bookmark_file_get_modified(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_modified$MH();
        try {
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_modified_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$0,"g_bookmark_file_get_modified_date_time");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_bookmark_file_get_modified_date_time(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_modified_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_modified_date_time$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_visited$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$1,"g_bookmark_file_set_visited");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_visited(struct _GBookmarkFile* bookmark, char* uri, long visited);
     * }
     */
    public static void g_bookmark_file_set_visited(MemorySegment bookmark, MemorySegment uri, long visited) {
        var mh$ = g_bookmark_file_set_visited$MH();
        try {
            mh$.invokeExact(bookmark, uri, visited);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_set_visited_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$2,"g_bookmark_file_set_visited_date_time");
    }
    /**
     * {@snippet :
     * void g_bookmark_file_set_visited_date_time(struct _GBookmarkFile* bookmark, char* uri, struct _GDateTime* visited);
     * }
     */
    public static void g_bookmark_file_set_visited_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment visited) {
        var mh$ = g_bookmark_file_set_visited_date_time$MH();
        try {
            mh$.invokeExact(bookmark, uri, visited);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_visited$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$3,"g_bookmark_file_get_visited");
    }
    /**
     * {@snippet :
     * long g_bookmark_file_get_visited(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static long g_bookmark_file_get_visited(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_visited$MH();
        try {
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_visited_date_time$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$4,"g_bookmark_file_get_visited_date_time");
    }
    /**
     * {@snippet :
     * struct _GDateTime* g_bookmark_file_get_visited_date_time(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static MemorySegment g_bookmark_file_get_visited_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_visited_date_time$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_has_item$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$5,"g_bookmark_file_has_item");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_has_item(struct _GBookmarkFile* bookmark, char* uri);
     * }
     */
    public static int g_bookmark_file_has_item(MemorySegment bookmark, MemorySegment uri) {
        var mh$ = g_bookmark_file_has_item$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$0,"g_bookmark_file_get_size");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_get_size(struct _GBookmarkFile* bookmark);
     * }
     */
    public static int g_bookmark_file_get_size(MemorySegment bookmark) {
        var mh$ = g_bookmark_file_get_size$MH();
        try {
            return (int)mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_get_uris$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$1,"g_bookmark_file_get_uris");
    }
    /**
     * {@snippet :
     * char** g_bookmark_file_get_uris(struct _GBookmarkFile* bookmark, unsigned long* length);
     * }
     */
    public static MemorySegment g_bookmark_file_get_uris(MemorySegment bookmark, MemorySegment length) {
        var mh$ = g_bookmark_file_get_uris$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bookmark, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_remove_group$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$2,"g_bookmark_file_remove_group");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_remove_group(struct _GBookmarkFile* bookmark, char* uri, char* group, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_remove_group(MemorySegment bookmark, MemorySegment uri, MemorySegment group, MemorySegment error) {
        var mh$ = g_bookmark_file_remove_group$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, group, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_remove_application$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$3,"g_bookmark_file_remove_application");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_remove_application(struct _GBookmarkFile* bookmark, char* uri, char* name, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_remove_application(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment error) {
        var mh$ = g_bookmark_file_remove_application$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, name, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_remove_item$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$4,"g_bookmark_file_remove_item");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_remove_item(struct _GBookmarkFile* bookmark, char* uri, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_remove_item(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_remove_item$MH();
        try {
            return (int)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bookmark_file_move_item$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$5,"g_bookmark_file_move_item");
    }
    /**
     * {@snippet :
     * int g_bookmark_file_move_item(struct _GBookmarkFile* bookmark, char* old_uri, char* new_uri, struct _GError** error);
     * }
     */
    public static int g_bookmark_file_move_item(MemorySegment bookmark, MemorySegment old_uri, MemorySegment new_uri, MemorySegment error) {
        var mh$ = g_bookmark_file_move_item$MH();
        try {
            return (int)mh$.invokeExact(bookmark, old_uri, new_uri, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$0,"g_bytes_new");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_bytes_new(void* data, unsigned long size);
     * }
     */
    public static MemorySegment g_bytes_new(MemorySegment data, long size) {
        var mh$ = g_bytes_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_take$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$1,"g_bytes_new_take");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_bytes_new_take(void* data, unsigned long size);
     * }
     */
    public static MemorySegment g_bytes_new_take(MemorySegment data, long size) {
        var mh$ = g_bytes_new_take$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_static$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$2,"g_bytes_new_static");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_bytes_new_static(void* data, unsigned long size);
     * }
     */
    public static MemorySegment g_bytes_new_static(MemorySegment data, long size) {
        var mh$ = g_bytes_new_static$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_with_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$5,"g_bytes_new_with_free_func");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_bytes_new_with_free_func(void* data, unsigned long size, void (*free_func)(void*), void* user_data);
     * }
     */
    public static MemorySegment g_bytes_new_with_free_func(MemorySegment data, long size, MemorySegment free_func, MemorySegment user_data) {
        var mh$ = g_bytes_new_with_free_func$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, size, free_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_new_from_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$0,"g_bytes_new_from_bytes");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_bytes_new_from_bytes(struct _GBytes* bytes, unsigned long offset, unsigned long length);
     * }
     */
    public static MemorySegment g_bytes_new_from_bytes(MemorySegment bytes, long offset, long length) {
        var mh$ = g_bytes_new_from_bytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bytes, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$1,"g_bytes_get_data");
    }
    /**
     * {@snippet :
     * void* g_bytes_get_data(struct _GBytes* bytes, unsigned long* size);
     * }
     */
    public static MemorySegment g_bytes_get_data(MemorySegment bytes, MemorySegment size) {
        var mh$ = g_bytes_get_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bytes, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$2,"g_bytes_get_size");
    }
    /**
     * {@snippet :
     * unsigned long g_bytes_get_size(struct _GBytes* bytes);
     * }
     */
    public static long g_bytes_get_size(MemorySegment bytes) {
        var mh$ = g_bytes_get_size$MH();
        try {
            return (long)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$3,"g_bytes_ref");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_bytes_ref(struct _GBytes* bytes);
     * }
     */
    public static MemorySegment g_bytes_ref(MemorySegment bytes) {
        var mh$ = g_bytes_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$4,"g_bytes_unref");
    }
    /**
     * {@snippet :
     * void g_bytes_unref(struct _GBytes* bytes);
     * }
     */
    public static void g_bytes_unref(MemorySegment bytes) {
        var mh$ = g_bytes_unref$MH();
        try {
            mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_unref_to_data$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$5,"g_bytes_unref_to_data");
    }
    /**
     * {@snippet :
     * void* g_bytes_unref_to_data(struct _GBytes* bytes, unsigned long* size);
     * }
     */
    public static MemorySegment g_bytes_unref_to_data(MemorySegment bytes, MemorySegment size) {
        var mh$ = g_bytes_unref_to_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bytes, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_unref_to_array$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$0,"g_bytes_unref_to_array");
    }
    /**
     * {@snippet :
     * struct _GByteArray* g_bytes_unref_to_array(struct _GBytes* bytes);
     * }
     */
    public static MemorySegment g_bytes_unref_to_array(MemorySegment bytes) {
        var mh$ = g_bytes_unref_to_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$1,"g_bytes_hash");
    }
    /**
     * {@snippet :
     * unsigned int g_bytes_hash(void* bytes);
     * }
     */
    public static int g_bytes_hash(MemorySegment bytes) {
        var mh$ = g_bytes_hash$MH();
        try {
            return (int)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$2,"g_bytes_equal");
    }
    /**
     * {@snippet :
     * int g_bytes_equal(void* bytes1, void* bytes2);
     * }
     */
    public static int g_bytes_equal(MemorySegment bytes1, MemorySegment bytes2) {
        var mh$ = g_bytes_equal$MH();
        try {
            return (int)mh$.invokeExact(bytes1, bytes2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$3,"g_bytes_compare");
    }
    /**
     * {@snippet :
     * int g_bytes_compare(void* bytes1, void* bytes2);
     * }
     */
    public static int g_bytes_compare(MemorySegment bytes1, MemorySegment bytes2) {
        var mh$ = g_bytes_compare$MH();
        try {
            return (int)mh$.invokeExact(bytes1, bytes2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bytes_get_region$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$5,"g_bytes_get_region");
    }
    /**
     * {@snippet :
     * void* g_bytes_get_region(struct _GBytes* bytes, unsigned long element_size, unsigned long offset, unsigned long n_elements);
     * }
     */
    public static MemorySegment g_bytes_get_region(MemorySegment bytes, long element_size, long offset, long n_elements) {
        var mh$ = g_bytes_get_region$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bytes, element_size, offset, n_elements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_charset$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$0,"g_get_charset");
    }
    /**
     * {@snippet :
     * int g_get_charset(char** charset);
     * }
     */
    public static int g_get_charset(MemorySegment charset) {
        var mh$ = g_get_charset$MH();
        try {
            return (int)mh$.invokeExact(charset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_codeset$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$1,"g_get_codeset");
    }
    /**
     * {@snippet :
     * char* g_get_codeset();
     * }
     */
    public static MemorySegment g_get_codeset() {
        var mh$ = g_get_codeset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_console_charset$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$2,"g_get_console_charset");
    }
    /**
     * {@snippet :
     * int g_get_console_charset(char** charset);
     * }
     */
    public static int g_get_console_charset(MemorySegment charset) {
        var mh$ = g_get_console_charset$MH();
        try {
            return (int)mh$.invokeExact(charset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_language_names$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$3,"g_get_language_names");
    }
    /**
     * {@snippet :
     * char** g_get_language_names();
     * }
     */
    public static MemorySegment g_get_language_names() {
        var mh$ = g_get_language_names$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_language_names_with_category$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$4,"g_get_language_names_with_category");
    }
    /**
     * {@snippet :
     * char** g_get_language_names_with_category(char* category_name);
     * }
     */
    public static MemorySegment g_get_language_names_with_category(MemorySegment category_name) {
        var mh$ = g_get_language_names_with_category$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(category_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_locale_variants$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$5,"g_get_locale_variants");
    }
    /**
     * {@snippet :
     * char** g_get_locale_variants(char* locale);
     * }
     */
    public static MemorySegment g_get_locale_variants(MemorySegment locale) {
        var mh$ = g_get_locale_variants$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GChecksumType.G_CHECKSUM_MD5 = 0;
     * }
     */
    public static int G_CHECKSUM_MD5() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GChecksumType.G_CHECKSUM_SHA1 = 1;
     * }
     */
    public static int G_CHECKSUM_SHA1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GChecksumType.G_CHECKSUM_SHA256 = 2;
     * }
     */
    public static int G_CHECKSUM_SHA256() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GChecksumType.G_CHECKSUM_SHA512 = 3;
     * }
     */
    public static int G_CHECKSUM_SHA512() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GChecksumType.G_CHECKSUM_SHA384 = 4;
     * }
     */
    public static int G_CHECKSUM_SHA384() {
        return (int)4L;
    }
    public static MethodHandle g_checksum_type_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$1,"g_checksum_type_get_length");
    }
    /**
     * {@snippet :
     * long g_checksum_type_get_length(enum GChecksumType checksum_type);
     * }
     */
    public static long g_checksum_type_get_length(int checksum_type) {
        var mh$ = g_checksum_type_get_length$MH();
        try {
            return (long)mh$.invokeExact(checksum_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_new$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$2,"g_checksum_new");
    }
    /**
     * {@snippet :
     * struct _GChecksum* g_checksum_new(enum GChecksumType checksum_type);
     * }
     */
    public static MemorySegment g_checksum_new(int checksum_type) {
        var mh$ = g_checksum_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(checksum_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$3,"g_checksum_reset");
    }
    /**
     * {@snippet :
     * void g_checksum_reset(struct _GChecksum* checksum);
     * }
     */
    public static void g_checksum_reset(MemorySegment checksum) {
        var mh$ = g_checksum_reset$MH();
        try {
            mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$4,"g_checksum_copy");
    }
    /**
     * {@snippet :
     * struct _GChecksum* g_checksum_copy(struct _GChecksum* checksum);
     * }
     */
    public static MemorySegment g_checksum_copy(MemorySegment checksum) {
        var mh$ = g_checksum_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_free$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$5,"g_checksum_free");
    }
    /**
     * {@snippet :
     * void g_checksum_free(struct _GChecksum* checksum);
     * }
     */
    public static void g_checksum_free(MemorySegment checksum) {
        var mh$ = g_checksum_free$MH();
        try {
            mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_update$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$0,"g_checksum_update");
    }
    /**
     * {@snippet :
     * void g_checksum_update(struct _GChecksum* checksum, unsigned char* data, long length);
     * }
     */
    public static void g_checksum_update(MemorySegment checksum, MemorySegment data, long length) {
        var mh$ = g_checksum_update$MH();
        try {
            mh$.invokeExact(checksum, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$1,"g_checksum_get_string");
    }
    /**
     * {@snippet :
     * char* g_checksum_get_string(struct _GChecksum* checksum);
     * }
     */
    public static MemorySegment g_checksum_get_string(MemorySegment checksum) {
        var mh$ = g_checksum_get_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_checksum_get_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$2,"g_checksum_get_digest");
    }
    /**
     * {@snippet :
     * void g_checksum_get_digest(struct _GChecksum* checksum, unsigned char* buffer, unsigned long* digest_len);
     * }
     */
    public static void g_checksum_get_digest(MemorySegment checksum, MemorySegment buffer, MemorySegment digest_len) {
        var mh$ = g_checksum_get_digest$MH();
        try {
            mh$.invokeExact(checksum, buffer, digest_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_checksum_for_data$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$3,"g_compute_checksum_for_data");
    }
    /**
     * {@snippet :
     * char* g_compute_checksum_for_data(enum GChecksumType checksum_type, unsigned char* data, unsigned long length);
     * }
     */
    public static MemorySegment g_compute_checksum_for_data(int checksum_type, MemorySegment data, long length) {
        var mh$ = g_compute_checksum_for_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(checksum_type, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_checksum_for_string$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$4,"g_compute_checksum_for_string");
    }
    /**
     * {@snippet :
     * char* g_compute_checksum_for_string(enum GChecksumType checksum_type, char* str, long length);
     * }
     */
    public static MemorySegment g_compute_checksum_for_string(int checksum_type, MemorySegment str, long length) {
        var mh$ = g_compute_checksum_for_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(checksum_type, str, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_compute_checksum_for_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$5,"g_compute_checksum_for_bytes");
    }
    /**
     * {@snippet :
     * char* g_compute_checksum_for_bytes(enum GChecksumType checksum_type, struct _GBytes* data);
     * }
     */
    public static MemorySegment g_compute_checksum_for_bytes(int checksum_type, MemorySegment data) {
        var mh$ = g_compute_checksum_for_bytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(checksum_type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_NO_CONVERSION = 0;
     * }
     */
    public static int G_CONVERT_ERROR_NO_CONVERSION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1;
     * }
     */
    public static int G_CONVERT_ERROR_ILLEGAL_SEQUENCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_FAILED = 2;
     * }
     */
    public static int G_CONVERT_ERROR_FAILED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_PARTIAL_INPUT = 3;
     * }
     */
    public static int G_CONVERT_ERROR_PARTIAL_INPUT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_BAD_URI = 4;
     * }
     */
    public static int G_CONVERT_ERROR_BAD_URI() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5;
     * }
     */
    public static int G_CONVERT_ERROR_NOT_ABSOLUTE_PATH() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_NO_MEMORY = 6;
     * }
     */
    public static int G_CONVERT_ERROR_NO_MEMORY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GConvertError.G_CONVERT_ERROR_EMBEDDED_NUL = 7;
     * }
     */
    public static int G_CONVERT_ERROR_EMBEDDED_NUL() {
        return (int)7L;
    }
    public static MethodHandle g_convert_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$0,"g_convert_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_convert_error_quark();
     * }
     */
    public static int g_convert_error_quark() {
        var mh$ = g_convert_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GIConv* GIConv;
     * }
     */
    public static final AddressLayout GIConv = RuntimeHelper.POINTER;
    public static MethodHandle g_iconv_open$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$1,"g_iconv_open");
    }
    /**
     * {@snippet :
     * struct _GIConv* g_iconv_open(char* to_codeset, char* from_codeset);
     * }
     */
    public static MemorySegment g_iconv_open(MemorySegment to_codeset, MemorySegment from_codeset) {
        var mh$ = g_iconv_open$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(to_codeset, from_codeset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_iconv$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$3,"g_iconv");
    }
    /**
     * {@snippet :
     * unsigned long g_iconv(struct _GIConv* converter, char** inbuf, unsigned long* inbytes_left, char** outbuf, unsigned long* outbytes_left);
     * }
     */
    public static long g_iconv(MemorySegment converter, MemorySegment inbuf, MemorySegment inbytes_left, MemorySegment outbuf, MemorySegment outbytes_left) {
        var mh$ = g_iconv$MH();
        try {
            return (long)mh$.invokeExact(converter, inbuf, inbytes_left, outbuf, outbytes_left);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_iconv_close$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$4,"g_iconv_close");
    }
    /**
     * {@snippet :
     * int g_iconv_close(struct _GIConv* converter);
     * }
     */
    public static int g_iconv_close(MemorySegment converter) {
        var mh$ = g_iconv_close$MH();
        try {
            return (int)mh$.invokeExact(converter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_convert$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$6,"g_convert");
    }
    /**
     * {@snippet :
     * char* g_convert(char* str, long len, char* to_codeset, char* from_codeset, unsigned long* bytes_read, unsigned long* bytes_written, struct _GError** error);
     * }
     */
    public static MemorySegment g_convert(MemorySegment str, long len, MemorySegment to_codeset, MemorySegment from_codeset, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_convert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, len, to_codeset, from_codeset, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_convert_with_iconv$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$1,"g_convert_with_iconv");
    }
    /**
     * {@snippet :
     * char* g_convert_with_iconv(char* str, long len, struct _GIConv* converter, unsigned long* bytes_read, unsigned long* bytes_written, struct _GError** error);
     * }
     */
    public static MemorySegment g_convert_with_iconv(MemorySegment str, long len, MemorySegment converter, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_convert_with_iconv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, len, converter, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_convert_with_fallback$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$3,"g_convert_with_fallback");
    }
    /**
     * {@snippet :
     * char* g_convert_with_fallback(char* str, long len, char* to_codeset, char* from_codeset, char* fallback, unsigned long* bytes_read, unsigned long* bytes_written, struct _GError** error);
     * }
     */
    public static MemorySegment g_convert_with_fallback(MemorySegment str, long len, MemorySegment to_codeset, MemorySegment from_codeset, MemorySegment fallback, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_convert_with_fallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, len, to_codeset, from_codeset, fallback, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_locale_to_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$4,"g_locale_to_utf8");
    }
    /**
     * {@snippet :
     * char* g_locale_to_utf8(char* opsysstring, long len, unsigned long* bytes_read, unsigned long* bytes_written, struct _GError** error);
     * }
     */
    public static MemorySegment g_locale_to_utf8(MemorySegment opsysstring, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_locale_to_utf8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opsysstring, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_locale_from_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$5,"g_locale_from_utf8");
    }
    /**
     * {@snippet :
     * char* g_locale_from_utf8(char* utf8string, long len, unsigned long* bytes_read, unsigned long* bytes_written, struct _GError** error);
     * }
     */
    public static MemorySegment g_locale_from_utf8(MemorySegment utf8string, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_locale_from_utf8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(utf8string, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_to_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$0,"g_filename_to_utf8");
    }
    /**
     * {@snippet :
     * char* g_filename_to_utf8(char* opsysstring, long len, unsigned long* bytes_read, unsigned long* bytes_written, struct _GError** error);
     * }
     */
    public static MemorySegment g_filename_to_utf8(MemorySegment opsysstring, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_filename_to_utf8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opsysstring, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_from_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$1,"g_filename_from_utf8");
    }
    /**
     * {@snippet :
     * char* g_filename_from_utf8(char* utf8string, long len, unsigned long* bytes_read, unsigned long* bytes_written, struct _GError** error);
     * }
     */
    public static MemorySegment g_filename_from_utf8(MemorySegment utf8string, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_filename_from_utf8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(utf8string, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_from_uri$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$2,"g_filename_from_uri");
    }
    /**
     * {@snippet :
     * char* g_filename_from_uri(char* uri, char** hostname, struct _GError** error);
     * }
     */
    public static MemorySegment g_filename_from_uri(MemorySegment uri, MemorySegment hostname, MemorySegment error) {
        var mh$ = g_filename_from_uri$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri, hostname, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_to_uri$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$3,"g_filename_to_uri");
    }
    /**
     * {@snippet :
     * char* g_filename_to_uri(char* filename, char* hostname, struct _GError** error);
     * }
     */
    public static MemorySegment g_filename_to_uri(MemorySegment filename, MemorySegment hostname, MemorySegment error) {
        var mh$ = g_filename_to_uri$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename, hostname, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_display_name$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$4,"g_filename_display_name");
    }
    /**
     * {@snippet :
     * char* g_filename_display_name(char* filename);
     * }
     */
    public static MemorySegment g_filename_display_name(MemorySegment filename) {
        var mh$ = g_filename_display_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_filename_charsets$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$5,"g_get_filename_charsets");
    }
    /**
     * {@snippet :
     * int g_get_filename_charsets(char*** filename_charsets);
     * }
     */
    public static int g_get_filename_charsets(MemorySegment filename_charsets) {
        var mh$ = g_get_filename_charsets$MH();
        try {
            return (int)mh$.invokeExact(filename_charsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_filename_display_basename$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$0,"g_filename_display_basename");
    }
    /**
     * {@snippet :
     * char* g_filename_display_basename(char* filename);
     * }
     */
    public static MemorySegment g_filename_display_basename(MemorySegment filename) {
        var mh$ = g_filename_display_basename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_list_extract_uris$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$1,"g_uri_list_extract_uris");
    }
    /**
     * {@snippet :
     * char** g_uri_list_extract_uris(char* uri_list);
     * }
     */
    public static MemorySegment g_uri_list_extract_uris(MemorySegment uri_list) {
        var mh$ = g_uri_list_extract_uris$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_init$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$3,"g_datalist_init");
    }
    /**
     * {@snippet :
     * void g_datalist_init(struct _GData** datalist);
     * }
     */
    public static void g_datalist_init(MemorySegment datalist) {
        var mh$ = g_datalist_init$MH();
        try {
            mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$4,"g_datalist_clear");
    }
    /**
     * {@snippet :
     * void g_datalist_clear(struct _GData** datalist);
     * }
     */
    public static void g_datalist_clear(MemorySegment datalist) {
        var mh$ = g_datalist_clear$MH();
        try {
            mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$5,"g_datalist_id_get_data");
    }
    /**
     * {@snippet :
     * void* g_datalist_id_get_data(struct _GData** datalist, unsigned int key_id);
     * }
     */
    public static MemorySegment g_datalist_id_get_data(MemorySegment datalist, int key_id) {
        var mh$ = g_datalist_id_get_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datalist, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_set_data_full$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$2,"g_datalist_id_set_data_full");
    }
    /**
     * {@snippet :
     * void g_datalist_id_set_data_full(struct _GData** datalist, unsigned int key_id, void* data, void (*destroy_func)(void*));
     * }
     */
    public static void g_datalist_id_set_data_full(MemorySegment datalist, int key_id, MemorySegment data, MemorySegment destroy_func) {
        var mh$ = g_datalist_id_set_data_full$MH();
        try {
            mh$.invokeExact(datalist, key_id, data, destroy_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_remove_multiple$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$3,"g_datalist_id_remove_multiple");
    }
    /**
     * {@snippet :
     * void g_datalist_id_remove_multiple(struct _GData** datalist, unsigned int* keys, unsigned long n_keys);
     * }
     */
    public static void g_datalist_id_remove_multiple(MemorySegment datalist, MemorySegment keys, long n_keys) {
        var mh$ = g_datalist_id_remove_multiple$MH();
        try {
            mh$.invokeExact(datalist, keys, n_keys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_dup_data$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"g_datalist_id_dup_data");
    }
    /**
     * {@snippet :
     * void* g_datalist_id_dup_data(struct _GData** datalist, unsigned int key_id, void* (*dup_func)(void*,void*), void* user_data);
     * }
     */
    public static MemorySegment g_datalist_id_dup_data(MemorySegment datalist, int key_id, MemorySegment dup_func, MemorySegment user_data) {
        var mh$ = g_datalist_id_dup_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datalist, key_id, dup_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_replace_data$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$5,"g_datalist_id_replace_data");
    }
    /**
     * {@snippet :
     * int g_datalist_id_replace_data(struct _GData** datalist, unsigned int key_id, void* oldval, void* newval, void (*destroy)(void*), void (**old_destroy)(void*));
     * }
     */
    public static int g_datalist_id_replace_data(MemorySegment datalist, int key_id, MemorySegment oldval, MemorySegment newval, MemorySegment destroy, MemorySegment old_destroy) {
        var mh$ = g_datalist_id_replace_data$MH();
        try {
            return (int)mh$.invokeExact(datalist, key_id, oldval, newval, destroy, old_destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_id_remove_no_notify$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"g_datalist_id_remove_no_notify");
    }
    /**
     * {@snippet :
     * void* g_datalist_id_remove_no_notify(struct _GData** datalist, unsigned int key_id);
     * }
     */
    public static MemorySegment g_datalist_id_remove_no_notify(MemorySegment datalist, int key_id) {
        var mh$ = g_datalist_id_remove_no_notify$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datalist, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"g_datalist_foreach");
    }
    /**
     * {@snippet :
     * void g_datalist_foreach(struct _GData** datalist, void (*func)(unsigned int,void*,void*), void* user_data);
     * }
     */
    public static void g_datalist_foreach(MemorySegment datalist, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_datalist_foreach$MH();
        try {
            mh$.invokeExact(datalist, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$3,"g_datalist_set_flags");
    }
    /**
     * {@snippet :
     * void g_datalist_set_flags(struct _GData** datalist, unsigned int flags);
     * }
     */
    public static void g_datalist_set_flags(MemorySegment datalist, int flags) {
        var mh$ = g_datalist_set_flags$MH();
        try {
            mh$.invokeExact(datalist, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_unset_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"g_datalist_unset_flags");
    }
    /**
     * {@snippet :
     * void g_datalist_unset_flags(struct _GData** datalist, unsigned int flags);
     * }
     */
    public static void g_datalist_unset_flags(MemorySegment datalist, int flags) {
        var mh$ = g_datalist_unset_flags$MH();
        try {
            mh$.invokeExact(datalist, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"g_datalist_get_flags");
    }
    /**
     * {@snippet :
     * unsigned int g_datalist_get_flags(struct _GData** datalist);
     * }
     */
    public static int g_datalist_get_flags(MemorySegment datalist) {
        var mh$ = g_datalist_get_flags$MH();
        try {
            return (int)mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$0,"g_dataset_destroy");
    }
    /**
     * {@snippet :
     * void g_dataset_destroy(void* dataset_location);
     * }
     */
    public static void g_dataset_destroy(MemorySegment dataset_location) {
        var mh$ = g_dataset_destroy$MH();
        try {
            mh$.invokeExact(dataset_location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_id_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"g_dataset_id_get_data");
    }
    /**
     * {@snippet :
     * void* g_dataset_id_get_data(void* dataset_location, unsigned int key_id);
     * }
     */
    public static MemorySegment g_dataset_id_get_data(MemorySegment dataset_location, int key_id) {
        var mh$ = g_dataset_id_get_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dataset_location, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_datalist_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"g_datalist_get_data");
    }
    /**
     * {@snippet :
     * void* g_datalist_get_data(struct _GData** datalist, char* key);
     * }
     */
    public static MemorySegment g_datalist_get_data(MemorySegment datalist, MemorySegment key) {
        var mh$ = g_datalist_get_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(datalist, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_id_set_data_full$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$4,"g_dataset_id_set_data_full");
    }
    /**
     * {@snippet :
     * void g_dataset_id_set_data_full(void* dataset_location, unsigned int key_id, void* data, void (*destroy_func)(void*));
     * }
     */
    public static void g_dataset_id_set_data_full(MemorySegment dataset_location, int key_id, MemorySegment data, MemorySegment destroy_func) {
        var mh$ = g_dataset_id_set_data_full$MH();
        try {
            mh$.invokeExact(dataset_location, key_id, data, destroy_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_id_remove_no_notify$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"g_dataset_id_remove_no_notify");
    }
    /**
     * {@snippet :
     * void* g_dataset_id_remove_no_notify(void* dataset_location, unsigned int key_id);
     * }
     */
    public static MemorySegment g_dataset_id_remove_no_notify(MemorySegment dataset_location, int key_id) {
        var mh$ = g_dataset_id_remove_no_notify$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dataset_location, key_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dataset_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$1,"g_dataset_foreach");
    }
    /**
     * {@snippet :
     * void g_dataset_foreach(void* dataset_location, void (*func)(unsigned int,void*,void*), void* user_data);
     * }
     */
    public static void g_dataset_foreach(MemorySegment dataset_location, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_dataset_foreach$MH();
        try {
            mh$.invokeExact(dataset_location, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int GTime;
     * }
     */
    public static final OfInt GTime = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short GDateYear;
     * }
     */
    public static final OfShort GDateYear = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned char GDateDay;
     * }
     */
    public static final OfByte GDateDay = JAVA_BYTE;
    /**
     * {@snippet :
     * enum GDateDMY.G_DATE_DAY = 0;
     * }
     */
    public static int G_DATE_DAY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GDateDMY.G_DATE_MONTH = 1;
     * }
     */
    public static int G_DATE_MONTH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GDateDMY.G_DATE_YEAR = 2;
     * }
     */
    public static int G_DATE_YEAR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_BAD_WEEKDAY = 0;
     * }
     */
    public static int G_DATE_BAD_WEEKDAY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_MONDAY = 1;
     * }
     */
    public static int G_DATE_MONDAY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_TUESDAY = 2;
     * }
     */
    public static int G_DATE_TUESDAY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_WEDNESDAY = 3;
     * }
     */
    public static int G_DATE_WEDNESDAY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_THURSDAY = 4;
     * }
     */
    public static int G_DATE_THURSDAY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_FRIDAY = 5;
     * }
     */
    public static int G_DATE_FRIDAY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_SATURDAY = 6;
     * }
     */
    public static int G_DATE_SATURDAY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GDateWeekday.G_DATE_SUNDAY = 7;
     * }
     */
    public static int G_DATE_SUNDAY() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_BAD_MONTH = 0;
     * }
     */
    public static int G_DATE_BAD_MONTH() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_JANUARY = 1;
     * }
     */
    public static int G_DATE_JANUARY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_FEBRUARY = 2;
     * }
     */
    public static int G_DATE_FEBRUARY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_MARCH = 3;
     * }
     */
    public static int G_DATE_MARCH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_APRIL = 4;
     * }
     */
    public static int G_DATE_APRIL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_MAY = 5;
     * }
     */
    public static int G_DATE_MAY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_JUNE = 6;
     * }
     */
    public static int G_DATE_JUNE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_JULY = 7;
     * }
     */
    public static int G_DATE_JULY() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_AUGUST = 8;
     * }
     */
    public static int G_DATE_AUGUST() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_SEPTEMBER = 9;
     * }
     */
    public static int G_DATE_SEPTEMBER() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_OCTOBER = 10;
     * }
     */
    public static int G_DATE_OCTOBER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_NOVEMBER = 11;
     * }
     */
    public static int G_DATE_NOVEMBER() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum GDateMonth.G_DATE_DECEMBER = 12;
     * }
     */
    public static int G_DATE_DECEMBER() {
        return (int)12L;
    }
    public static MethodHandle g_date_new$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$3,"g_date_new");
    }
    /**
     * {@snippet :
     * struct _GDate* g_date_new();
     * }
     */
    public static MemorySegment g_date_new() {
        var mh$ = g_date_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_new_dmy$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$5,"g_date_new_dmy");
    }
    /**
     * {@snippet :
     * struct _GDate* g_date_new_dmy(unsigned char day, enum GDateMonth month, unsigned short year);
     * }
     */
    public static MemorySegment g_date_new_dmy(byte day, int month, short year) {
        var mh$ = g_date_new_dmy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(day, month, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_new_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$0,"g_date_new_julian");
    }
    /**
     * {@snippet :
     * struct _GDate* g_date_new_julian(unsigned int julian_day);
     * }
     */
    public static MemorySegment g_date_new_julian(int julian_day) {
        var mh$ = g_date_new_julian$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(julian_day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_free$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$1,"g_date_free");
    }
    /**
     * {@snippet :
     * void g_date_free(struct _GDate* date);
     * }
     */
    public static void g_date_free(MemorySegment date) {
        var mh$ = g_date_free$MH();
        try {
            mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$2,"g_date_copy");
    }
    /**
     * {@snippet :
     * struct _GDate* g_date_copy(struct _GDate* date);
     * }
     */
    public static MemorySegment g_date_copy(MemorySegment date) {
        var mh$ = g_date_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$3,"g_date_valid");
    }
    /**
     * {@snippet :
     * int g_date_valid(struct _GDate* date);
     * }
     */
    public static int g_date_valid(MemorySegment date) {
        var mh$ = g_date_valid$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_day$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$5,"g_date_valid_day");
    }
    /**
     * {@snippet :
     * int g_date_valid_day(unsigned char day);
     * }
     */
    public static int g_date_valid_day(byte day) {
        var mh$ = g_date_valid_day$MH();
        try {
            return (int)mh$.invokeExact(day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_month$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$0,"g_date_valid_month");
    }
    /**
     * {@snippet :
     * int g_date_valid_month(enum GDateMonth month);
     * }
     */
    public static int g_date_valid_month(int month) {
        var mh$ = g_date_valid_month$MH();
        try {
            return (int)mh$.invokeExact(month);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_year$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$2,"g_date_valid_year");
    }
    /**
     * {@snippet :
     * int g_date_valid_year(unsigned short year);
     * }
     */
    public static int g_date_valid_year(short year) {
        var mh$ = g_date_valid_year$MH();
        try {
            return (int)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_weekday$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$3,"g_date_valid_weekday");
    }
    /**
     * {@snippet :
     * int g_date_valid_weekday(enum GDateWeekday weekday);
     * }
     */
    public static int g_date_valid_weekday(int weekday) {
        var mh$ = g_date_valid_weekday$MH();
        try {
            return (int)mh$.invokeExact(weekday);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$4,"g_date_valid_julian");
    }
    /**
     * {@snippet :
     * int g_date_valid_julian(unsigned int julian_date);
     * }
     */
    public static int g_date_valid_julian(int julian_date) {
        var mh$ = g_date_valid_julian$MH();
        try {
            return (int)mh$.invokeExact(julian_date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_valid_dmy$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$6,"g_date_valid_dmy");
    }
    /**
     * {@snippet :
     * int g_date_valid_dmy(unsigned char day, enum GDateMonth month, unsigned short year);
     * }
     */
    public static int g_date_valid_dmy(byte day, int month, short year) {
        var mh$ = g_date_valid_dmy$MH();
        try {
            return (int)mh$.invokeExact(day, month, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_weekday$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$0,"g_date_get_weekday");
    }
    /**
     * {@snippet :
     * enum GDateWeekday g_date_get_weekday(struct _GDate* date);
     * }
     */
    public static int g_date_get_weekday(MemorySegment date) {
        var mh$ = g_date_get_weekday$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_month$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$1,"g_date_get_month");
    }
    /**
     * {@snippet :
     * enum GDateMonth g_date_get_month(struct _GDate* date);
     * }
     */
    public static int g_date_get_month(MemorySegment date) {
        var mh$ = g_date_get_month$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_year$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$3,"g_date_get_year");
    }
    /**
     * {@snippet :
     * unsigned short g_date_get_year(struct _GDate* date);
     * }
     */
    public static short g_date_get_year(MemorySegment date) {
        var mh$ = g_date_get_year$MH();
        try {
            return (short)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_day$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$5,"g_date_get_day");
    }
    /**
     * {@snippet :
     * unsigned char g_date_get_day(struct _GDate* date);
     * }
     */
    public static byte g_date_get_day(MemorySegment date) {
        var mh$ = g_date_get_day$MH();
        try {
            return (byte)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$0,"g_date_get_julian");
    }
    /**
     * {@snippet :
     * unsigned int g_date_get_julian(struct _GDate* date);
     * }
     */
    public static int g_date_get_julian(MemorySegment date) {
        var mh$ = g_date_get_julian$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_day_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$1,"g_date_get_day_of_year");
    }
    /**
     * {@snippet :
     * unsigned int g_date_get_day_of_year(struct _GDate* date);
     * }
     */
    public static int g_date_get_day_of_year(MemorySegment date) {
        var mh$ = g_date_get_day_of_year$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_monday_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"g_date_get_monday_week_of_year");
    }
    /**
     * {@snippet :
     * unsigned int g_date_get_monday_week_of_year(struct _GDate* date);
     * }
     */
    public static int g_date_get_monday_week_of_year(MemorySegment date) {
        var mh$ = g_date_get_monday_week_of_year$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_sunday_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$3,"g_date_get_sunday_week_of_year");
    }
    /**
     * {@snippet :
     * unsigned int g_date_get_sunday_week_of_year(struct _GDate* date);
     * }
     */
    public static int g_date_get_sunday_week_of_year(MemorySegment date) {
        var mh$ = g_date_get_sunday_week_of_year$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_iso8601_week_of_year$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"g_date_get_iso8601_week_of_year");
    }
    /**
     * {@snippet :
     * unsigned int g_date_get_iso8601_week_of_year(struct _GDate* date);
     * }
     */
    public static int g_date_get_iso8601_week_of_year(MemorySegment date) {
        var mh$ = g_date_get_iso8601_week_of_year$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$5,"g_date_clear");
    }
    /**
     * {@snippet :
     * void g_date_clear(struct _GDate* date, unsigned int n_dates);
     * }
     */
    public static void g_date_clear(MemorySegment date, int n_dates) {
        var mh$ = g_date_clear$MH();
        try {
            mh$.invokeExact(date, n_dates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$0,"g_date_set_parse");
    }
    /**
     * {@snippet :
     * void g_date_set_parse(struct _GDate* date, char* str);
     * }
     */
    public static void g_date_set_parse(MemorySegment date, MemorySegment str) {
        var mh$ = g_date_set_parse$MH();
        try {
            mh$.invokeExact(date, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_time_t$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"g_date_set_time_t");
    }
    /**
     * {@snippet :
     * void g_date_set_time_t(struct _GDate* date, long timet);
     * }
     */
    public static void g_date_set_time_t(MemorySegment date, long timet) {
        var mh$ = g_date_set_time_t$MH();
        try {
            mh$.invokeExact(date, timet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_time_val$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$2,"g_date_set_time_val");
    }
    /**
     * {@snippet :
     * void g_date_set_time_val(struct _GDate* date, struct _GTimeVal* timeval);
     * }
     */
    public static void g_date_set_time_val(MemorySegment date, MemorySegment timeval) {
        var mh$ = g_date_set_time_val$MH();
        try {
            mh$.invokeExact(date, timeval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_time$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"g_date_set_time");
    }
    /**
     * {@snippet :
     * void g_date_set_time(struct _GDate* date, int time_);
     * }
     */
    public static void g_date_set_time(MemorySegment date, int time_) {
        var mh$ = g_date_set_time$MH();
        try {
            mh$.invokeExact(date, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_month$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"g_date_set_month");
    }
    /**
     * {@snippet :
     * void g_date_set_month(struct _GDate* date, enum GDateMonth month);
     * }
     */
    public static void g_date_set_month(MemorySegment date, int month) {
        var mh$ = g_date_set_month$MH();
        try {
            mh$.invokeExact(date, month);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_day$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$6,"g_date_set_day");
    }
    /**
     * {@snippet :
     * void g_date_set_day(struct _GDate* date, unsigned char day);
     * }
     */
    public static void g_date_set_day(MemorySegment date, byte day) {
        var mh$ = g_date_set_day$MH();
        try {
            mh$.invokeExact(date, day);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_year$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$1,"g_date_set_year");
    }
    /**
     * {@snippet :
     * void g_date_set_year(struct _GDate* date, unsigned short year);
     * }
     */
    public static void g_date_set_year(MemorySegment date, short year) {
        var mh$ = g_date_set_year$MH();
        try {
            mh$.invokeExact(date, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_dmy$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$3,"g_date_set_dmy");
    }
    /**
     * {@snippet :
     * void g_date_set_dmy(struct _GDate* date, unsigned char day, enum GDateMonth month, unsigned short y);
     * }
     */
    public static void g_date_set_dmy(MemorySegment date, byte day, int month, short y) {
        var mh$ = g_date_set_dmy$MH();
        try {
            mh$.invokeExact(date, day, month, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_set_julian$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$4,"g_date_set_julian");
    }
    /**
     * {@snippet :
     * void g_date_set_julian(struct _GDate* date, unsigned int julian_date);
     * }
     */
    public static void g_date_set_julian(MemorySegment date, int julian_date) {
        var mh$ = g_date_set_julian$MH();
        try {
            mh$.invokeExact(date, julian_date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_is_first_of_month$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$5,"g_date_is_first_of_month");
    }
    /**
     * {@snippet :
     * int g_date_is_first_of_month(struct _GDate* date);
     * }
     */
    public static int g_date_is_first_of_month(MemorySegment date) {
        var mh$ = g_date_is_first_of_month$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_is_last_of_month$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$0,"g_date_is_last_of_month");
    }
    /**
     * {@snippet :
     * int g_date_is_last_of_month(struct _GDate* date);
     * }
     */
    public static int g_date_is_last_of_month(MemorySegment date) {
        var mh$ = g_date_is_last_of_month$MH();
        try {
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_add_days$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$1,"g_date_add_days");
    }
    /**
     * {@snippet :
     * void g_date_add_days(struct _GDate* date, unsigned int n_days);
     * }
     */
    public static void g_date_add_days(MemorySegment date, int n_days) {
        var mh$ = g_date_add_days$MH();
        try {
            mh$.invokeExact(date, n_days);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_subtract_days$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$2,"g_date_subtract_days");
    }
    /**
     * {@snippet :
     * void g_date_subtract_days(struct _GDate* date, unsigned int n_days);
     * }
     */
    public static void g_date_subtract_days(MemorySegment date, int n_days) {
        var mh$ = g_date_subtract_days$MH();
        try {
            mh$.invokeExact(date, n_days);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_add_months$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$3,"g_date_add_months");
    }
    /**
     * {@snippet :
     * void g_date_add_months(struct _GDate* date, unsigned int n_months);
     * }
     */
    public static void g_date_add_months(MemorySegment date, int n_months) {
        var mh$ = g_date_add_months$MH();
        try {
            mh$.invokeExact(date, n_months);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_subtract_months$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$4,"g_date_subtract_months");
    }
    /**
     * {@snippet :
     * void g_date_subtract_months(struct _GDate* date, unsigned int n_months);
     * }
     */
    public static void g_date_subtract_months(MemorySegment date, int n_months) {
        var mh$ = g_date_subtract_months$MH();
        try {
            mh$.invokeExact(date, n_months);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_add_years$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$5,"g_date_add_years");
    }
    /**
     * {@snippet :
     * void g_date_add_years(struct _GDate* date, unsigned int n_years);
     * }
     */
    public static void g_date_add_years(MemorySegment date, int n_years) {
        var mh$ = g_date_add_years$MH();
        try {
            mh$.invokeExact(date, n_years);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_subtract_years$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$0,"g_date_subtract_years");
    }
    /**
     * {@snippet :
     * void g_date_subtract_years(struct _GDate* date, unsigned int n_years);
     * }
     */
    public static void g_date_subtract_years(MemorySegment date, int n_years) {
        var mh$ = g_date_subtract_years$MH();
        try {
            mh$.invokeExact(date, n_years);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_is_leap_year$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"g_date_is_leap_year");
    }
    /**
     * {@snippet :
     * int g_date_is_leap_year(unsigned short year);
     * }
     */
    public static int g_date_is_leap_year(short year) {
        var mh$ = g_date_is_leap_year$MH();
        try {
            return (int)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_days_in_month$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"g_date_get_days_in_month");
    }
    /**
     * {@snippet :
     * unsigned char g_date_get_days_in_month(enum GDateMonth month, unsigned short year);
     * }
     */
    public static byte g_date_get_days_in_month(int month, short year) {
        var mh$ = g_date_get_days_in_month$MH();
        try {
            return (byte)mh$.invokeExact(month, year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_monday_weeks_in_year$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$5,"g_date_get_monday_weeks_in_year");
    }
    /**
     * {@snippet :
     * unsigned char g_date_get_monday_weeks_in_year(unsigned short year);
     * }
     */
    public static byte g_date_get_monday_weeks_in_year(short year) {
        var mh$ = g_date_get_monday_weeks_in_year$MH();
        try {
            return (byte)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_get_sunday_weeks_in_year$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$0,"g_date_get_sunday_weeks_in_year");
    }
    /**
     * {@snippet :
     * unsigned char g_date_get_sunday_weeks_in_year(unsigned short year);
     * }
     */
    public static byte g_date_get_sunday_weeks_in_year(short year) {
        var mh$ = g_date_get_sunday_weeks_in_year$MH();
        try {
            return (byte)mh$.invokeExact(year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_days_between$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$1,"g_date_days_between");
    }
    /**
     * {@snippet :
     * int g_date_days_between(struct _GDate* date1, struct _GDate* date2);
     * }
     */
    public static int g_date_days_between(MemorySegment date1, MemorySegment date2) {
        var mh$ = g_date_days_between$MH();
        try {
            return (int)mh$.invokeExact(date1, date2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$2,"g_date_compare");
    }
    /**
     * {@snippet :
     * int g_date_compare(struct _GDate* lhs, struct _GDate* rhs);
     * }
     */
    public static int g_date_compare(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = g_date_compare$MH();
        try {
            return (int)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_to_struct_tm$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$3,"g_date_to_struct_tm");
    }
    /**
     * {@snippet :
     * void g_date_to_struct_tm(struct _GDate* date, struct tm* tm);
     * }
     */
    public static void g_date_to_struct_tm(MemorySegment date, MemorySegment tm) {
        var mh$ = g_date_to_struct_tm$MH();
        try {
            mh$.invokeExact(date, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_clamp$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$4,"g_date_clamp");
    }
    /**
     * {@snippet :
     * void g_date_clamp(struct _GDate* date, struct _GDate* min_date, struct _GDate* max_date);
     * }
     */
    public static void g_date_clamp(MemorySegment date, MemorySegment min_date, MemorySegment max_date) {
        var mh$ = g_date_clamp$MH();
        try {
            mh$.invokeExact(date, min_date, max_date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_order$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$5,"g_date_order");
    }
    /**
     * {@snippet :
     * void g_date_order(struct _GDate* date1, struct _GDate* date2);
     * }
     */
    public static void g_date_order(MemorySegment date1, MemorySegment date2) {
        var mh$ = g_date_order$MH();
        try {
            mh$.invokeExact(date1, date2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_date_strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$0,"g_date_strftime");
    }
    /**
     * {@snippet :
     * unsigned long g_date_strftime(char* s, unsigned long slen, char* format, struct _GDate* date);
     * }
     */
    public static long g_date_strftime(MemorySegment s, long slen, MemorySegment format, MemorySegment date) {
        var mh$ = g_date_strftime$MH();
        try {
            return (long)mh$.invokeExact(s, slen, format, date);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_UNKNOWN = 0;
     * }
     */
    public static int DT_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_FIFO = 1;
     * }
     */
    public static int DT_FIFO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_CHR = 2;
     * }
     */
    public static int DT_CHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_DIR = 4;
     * }
     */
    public static int DT_DIR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_BLK = 6;
     * }
     */
    public static int DT_BLK() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_REG = 8;
     * }
     */
    public static int DT_REG() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_LNK = 10;
     * }
     */
    public static int DT_LNK() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_SOCK = 12;
     * }
     */
    public static int DT_SOCK() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/dirent.h:97:1).DT_WHT = 14;
     * }
     */
    public static int DT_WHT() {
        return (int)14L;
    }
    public static MethodHandle opendir$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$0,"opendir");
    }
    /**
     * {@snippet :
     * struct __dirstream* opendir(char* __name);
     * }
     */
    public static MemorySegment opendir(MemorySegment __name) {
        var mh$ = opendir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopendir$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$1,"fdopendir");
    }
    /**
     * {@snippet :
     * struct __dirstream* fdopendir(int __fd);
     * }
     */
    public static MemorySegment fdopendir(int __fd) {
        var mh$ = fdopendir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closedir$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$2,"closedir");
    }
    /**
     * {@snippet :
     * int closedir(struct __dirstream* __dirp);
     * }
     */
    public static int closedir(MemorySegment __dirp) {
        var mh$ = closedir$MH();
        try {
            return (int)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readdir$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$3,"readdir");
    }
    /**
     * {@snippet :
     * struct dirent* readdir(struct __dirstream* __dirp);
     * }
     */
    public static MemorySegment readdir(MemorySegment __dirp) {
        var mh$ = readdir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readdir_r$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$4,"readdir_r");
    }
    /**
     * {@snippet :
     * int readdir_r(struct __dirstream* __dirp, struct dirent* __entry, struct dirent** __result);
     * }
     */
    public static int readdir_r(MemorySegment __dirp, MemorySegment __entry, MemorySegment __result) {
        var mh$ = readdir_r$MH();
        try {
            return (int)mh$.invokeExact(__dirp, __entry, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewinddir$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$5,"rewinddir");
    }
    /**
     * {@snippet :
     * void rewinddir(struct __dirstream* __dirp);
     * }
     */
    public static void rewinddir(MemorySegment __dirp) {
        var mh$ = rewinddir$MH();
        try {
            mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seekdir$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$0,"seekdir");
    }
    /**
     * {@snippet :
     * void seekdir(struct __dirstream* __dirp, long __pos);
     * }
     */
    public static void seekdir(MemorySegment __dirp, long __pos) {
        var mh$ = seekdir$MH();
        try {
            mh$.invokeExact(__dirp, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle telldir$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$1,"telldir");
    }
    /**
     * {@snippet :
     * long telldir(struct __dirstream* __dirp);
     * }
     */
    public static long telldir(MemorySegment __dirp) {
        var mh$ = telldir$MH();
        try {
            return (long)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dirfd$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$2,"dirfd");
    }
    /**
     * {@snippet :
     * int dirfd(struct __dirstream* __dirp);
     * }
     */
    public static int dirfd(MemorySegment __dirp) {
        var mh$ = dirfd$MH();
        try {
            return (int)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scandir$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$5,"scandir");
    }
    /**
     * {@snippet :
     * int scandir(char* __dir, struct dirent*** __namelist, int (*__selector)(struct dirent*), int (*__cmp)(struct dirent**,struct dirent**));
     * }
     */
    public static int scandir(MemorySegment __dir, MemorySegment __namelist, MemorySegment __selector, MemorySegment __cmp) {
        var mh$ = scandir$MH();
        try {
            return (int)mh$.invokeExact(__dir, __namelist, __selector, __cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alphasort$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$0,"alphasort");
    }
    /**
     * {@snippet :
     * int alphasort(struct dirent** __e1, struct dirent** __e2);
     * }
     */
    public static int alphasort(MemorySegment __e1, MemorySegment __e2) {
        var mh$ = alphasort$MH();
        try {
            return (int)mh$.invokeExact(__e1, __e2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdirentries$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$2,"getdirentries");
    }
    /**
     * {@snippet :
     * long getdirentries(int __fd, char* __buf, unsigned long __nbytes, long* __basep);
     * }
     */
    public static long getdirentries(int __fd, MemorySegment __buf, long __nbytes, MemorySegment __basep) {
        var mh$ = getdirentries$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __basep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_open$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$4,"g_dir_open");
    }
    /**
     * {@snippet :
     * struct _GDir* g_dir_open(char* path, unsigned int flags, struct _GError** error);
     * }
     */
    public static MemorySegment g_dir_open(MemorySegment path, int flags, MemorySegment error) {
        var mh$ = g_dir_open$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_read_name$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$5,"g_dir_read_name");
    }
    /**
     * {@snippet :
     * char* g_dir_read_name(struct _GDir* dir);
     * }
     */
    public static MemorySegment g_dir_read_name(MemorySegment dir) {
        var mh$ = g_dir_read_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$0,"g_dir_rewind");
    }
    /**
     * {@snippet :
     * void g_dir_rewind(struct _GDir* dir);
     * }
     */
    public static void g_dir_rewind(MemorySegment dir) {
        var mh$ = g_dir_rewind$MH();
        try {
            mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_close$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$1,"g_dir_close");
    }
    /**
     * {@snippet :
     * void g_dir_close(struct _GDir* dir);
     * }
     */
    public static void g_dir_close(MemorySegment dir) {
        var mh$ = g_dir_close$MH();
        try {
            mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$2,"g_getenv");
    }
    /**
     * {@snippet :
     * char* g_getenv(char* variable);
     * }
     */
    public static MemorySegment g_getenv(MemorySegment variable) {
        var mh$ = g_getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$3,"g_setenv");
    }
    /**
     * {@snippet :
     * int g_setenv(char* variable, char* value, int overwrite);
     * }
     */
    public static int g_setenv(MemorySegment variable, MemorySegment value, int overwrite) {
        var mh$ = g_setenv$MH();
        try {
            return (int)mh$.invokeExact(variable, value, overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$4,"g_unsetenv");
    }
    /**
     * {@snippet :
     * void g_unsetenv(char* variable);
     * }
     */
    public static void g_unsetenv(MemorySegment variable) {
        var mh$ = g_unsetenv$MH();
        try {
            mh$.invokeExact(variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_listenv$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$5,"g_listenv");
    }
    /**
     * {@snippet :
     * char** g_listenv();
     * }
     */
    public static MemorySegment g_listenv() {
        var mh$ = g_listenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_environ$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$0,"g_get_environ");
    }
    /**
     * {@snippet :
     * char** g_get_environ();
     * }
     */
    public static MemorySegment g_get_environ() {
        var mh$ = g_get_environ$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_environ_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$1,"g_environ_getenv");
    }
    /**
     * {@snippet :
     * char* g_environ_getenv(char** envp, char* variable);
     * }
     */
    public static MemorySegment g_environ_getenv(MemorySegment envp, MemorySegment variable) {
        var mh$ = g_environ_getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(envp, variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_environ_setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$3,"g_environ_setenv");
    }
    /**
     * {@snippet :
     * char** g_environ_setenv(char** envp, char* variable, char* value, int overwrite);
     * }
     */
    public static MemorySegment g_environ_setenv(MemorySegment envp, MemorySegment variable, MemorySegment value, int overwrite) {
        var mh$ = g_environ_setenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(envp, variable, value, overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_environ_unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$4,"g_environ_unsetenv");
    }
    /**
     * {@snippet :
     * char** g_environ_unsetenv(char** envp, char* variable);
     * }
     */
    public static MemorySegment g_environ_unsetenv(MemorySegment envp, MemorySegment variable) {
        var mh$ = g_environ_unsetenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(envp, variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_EXIST = 0;
     * }
     */
    public static int G_FILE_ERROR_EXIST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_ISDIR = 1;
     * }
     */
    public static int G_FILE_ERROR_ISDIR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_ACCES = 2;
     * }
     */
    public static int G_FILE_ERROR_ACCES() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NAMETOOLONG = 3;
     * }
     */
    public static int G_FILE_ERROR_NAMETOOLONG() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NOENT = 4;
     * }
     */
    public static int G_FILE_ERROR_NOENT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NOTDIR = 5;
     * }
     */
    public static int G_FILE_ERROR_NOTDIR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NXIO = 6;
     * }
     */
    public static int G_FILE_ERROR_NXIO() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NODEV = 7;
     * }
     */
    public static int G_FILE_ERROR_NODEV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_ROFS = 8;
     * }
     */
    public static int G_FILE_ERROR_ROFS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_TXTBSY = 9;
     * }
     */
    public static int G_FILE_ERROR_TXTBSY() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_FAULT = 10;
     * }
     */
    public static int G_FILE_ERROR_FAULT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_LOOP = 11;
     * }
     */
    public static int G_FILE_ERROR_LOOP() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NOSPC = 12;
     * }
     */
    public static int G_FILE_ERROR_NOSPC() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NOMEM = 13;
     * }
     */
    public static int G_FILE_ERROR_NOMEM() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_MFILE = 14;
     * }
     */
    public static int G_FILE_ERROR_MFILE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NFILE = 15;
     * }
     */
    public static int G_FILE_ERROR_NFILE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_BADF = 16;
     * }
     */
    public static int G_FILE_ERROR_BADF() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_INVAL = 17;
     * }
     */
    public static int G_FILE_ERROR_INVAL() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_PIPE = 18;
     * }
     */
    public static int G_FILE_ERROR_PIPE() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_AGAIN = 19;
     * }
     */
    public static int G_FILE_ERROR_AGAIN() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_INTR = 20;
     * }
     */
    public static int G_FILE_ERROR_INTR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_IO = 21;
     * }
     */
    public static int G_FILE_ERROR_IO() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_PERM = 22;
     * }
     */
    public static int G_FILE_ERROR_PERM() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_NOSYS = 23;
     * }
     */
    public static int G_FILE_ERROR_NOSYS() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum GFileError.G_FILE_ERROR_FAILED = 24;
     * }
     */
    public static int G_FILE_ERROR_FAILED() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum GFileTest.G_FILE_TEST_IS_REGULAR = 1;
     * }
     */
    public static int G_FILE_TEST_IS_REGULAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GFileTest.G_FILE_TEST_IS_SYMLINK = 2;
     * }
     */
    public static int G_FILE_TEST_IS_SYMLINK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GFileTest.G_FILE_TEST_IS_DIR = 4;
     * }
     */
    public static int G_FILE_TEST_IS_DIR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GFileTest.G_FILE_TEST_IS_EXECUTABLE = 8;
     * }
     */
    public static int G_FILE_TEST_IS_EXECUTABLE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GFileTest.G_FILE_TEST_EXISTS = 16;
     * }
     */
    public static int G_FILE_TEST_EXISTS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GFileSetContentsFlags.G_FILE_SET_CONTENTS_NONE = 0;
     * }
     */
    public static int G_FILE_SET_CONTENTS_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GFileSetContentsFlags.G_FILE_SET_CONTENTS_CONSISTENT = 1;
     * }
     */
    public static int G_FILE_SET_CONTENTS_CONSISTENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GFileSetContentsFlags.G_FILE_SET_CONTENTS_DURABLE = 2;
     * }
     */
    public static int G_FILE_SET_CONTENTS_DURABLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GFileSetContentsFlags.G_FILE_SET_CONTENTS_ONLY_EXISTING = 4;
     * }
     */
    public static int G_FILE_SET_CONTENTS_ONLY_EXISTING() {
        return (int)4L;
    }
    public static MethodHandle g_file_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$5,"g_file_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_file_error_quark();
     * }
     */
    public static int g_file_error_quark() {
        var mh$ = g_file_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_error_from_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$0,"g_file_error_from_errno");
    }
    /**
     * {@snippet :
     * enum GFileError g_file_error_from_errno(int err_no);
     * }
     */
    public static int g_file_error_from_errno(int err_no) {
        var mh$ = g_file_error_from_errno$MH();
        try {
            return (int)mh$.invokeExact(err_no);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_test$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$1,"g_file_test");
    }
    /**
     * {@snippet :
     * int g_file_test(char* filename, enum GFileTest test);
     * }
     */
    public static int g_file_test(MemorySegment filename, int test) {
        var mh$ = g_file_test$MH();
        try {
            return (int)mh$.invokeExact(filename, test);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_get_contents$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$2,"g_file_get_contents");
    }
    /**
     * {@snippet :
     * int g_file_get_contents(char* filename, char** contents, unsigned long* length, struct _GError** error);
     * }
     */
    public static int g_file_get_contents(MemorySegment filename, MemorySegment contents, MemorySegment length, MemorySegment error) {
        var mh$ = g_file_get_contents$MH();
        try {
            return (int)mh$.invokeExact(filename, contents, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_set_contents$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$3,"g_file_set_contents");
    }
    /**
     * {@snippet :
     * int g_file_set_contents(char* filename, char* contents, long length, struct _GError** error);
     * }
     */
    public static int g_file_set_contents(MemorySegment filename, MemorySegment contents, long length, MemorySegment error) {
        var mh$ = g_file_set_contents$MH();
        try {
            return (int)mh$.invokeExact(filename, contents, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_set_contents_full$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$5,"g_file_set_contents_full");
    }
    /**
     * {@snippet :
     * int g_file_set_contents_full(char* filename, char* contents, long length, enum GFileSetContentsFlags flags, int mode, struct _GError** error);
     * }
     */
    public static int g_file_set_contents_full(MemorySegment filename, MemorySegment contents, long length, int flags, int mode, MemorySegment error) {
        var mh$ = g_file_set_contents_full$MH();
        try {
            return (int)mh$.invokeExact(filename, contents, length, flags, mode, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_read_link$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$0,"g_file_read_link");
    }
    /**
     * {@snippet :
     * char* g_file_read_link(char* filename, struct _GError** error);
     * }
     */
    public static MemorySegment g_file_read_link(MemorySegment filename, MemorySegment error) {
        var mh$ = g_file_read_link$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$1,"g_mkdtemp");
    }
    /**
     * {@snippet :
     * char* g_mkdtemp(char* tmpl);
     * }
     */
    public static MemorySegment g_mkdtemp(MemorySegment tmpl) {
        var mh$ = g_mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tmpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkdtemp_full$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$2,"g_mkdtemp_full");
    }
    /**
     * {@snippet :
     * char* g_mkdtemp_full(char* tmpl, int mode);
     * }
     */
    public static MemorySegment g_mkdtemp_full(MemorySegment tmpl, int mode) {
        var mh$ = g_mkdtemp_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tmpl, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$3,"g_mkstemp");
    }
    /**
     * {@snippet :
     * int g_mkstemp(char* tmpl);
     * }
     */
    public static int g_mkstemp(MemorySegment tmpl) {
        var mh$ = g_mkstemp$MH();
        try {
            return (int)mh$.invokeExact(tmpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkstemp_full$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$4,"g_mkstemp_full");
    }
    /**
     * {@snippet :
     * int g_mkstemp_full(char* tmpl, int flags, int mode);
     * }
     */
    public static int g_mkstemp_full(MemorySegment tmpl, int flags, int mode) {
        var mh$ = g_mkstemp_full$MH();
        try {
            return (int)mh$.invokeExact(tmpl, flags, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_file_open_tmp$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$5,"g_file_open_tmp");
    }
    /**
     * {@snippet :
     * int g_file_open_tmp(char* tmpl, char** name_used, struct _GError** error);
     * }
     */
    public static int g_file_open_tmp(MemorySegment tmpl, MemorySegment name_used, MemorySegment error) {
        var mh$ = g_file_open_tmp$MH();
        try {
            return (int)mh$.invokeExact(tmpl, name_used, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dir_make_tmp$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$0,"g_dir_make_tmp");
    }
    /**
     * {@snippet :
     * char* g_dir_make_tmp(char* tmpl, struct _GError** error);
     * }
     */
    public static MemorySegment g_dir_make_tmp(MemorySegment tmpl, MemorySegment error) {
        var mh$ = g_dir_make_tmp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tmpl, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_path$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$1,"g_build_path");
    }
    /**
     * {@snippet :
     * char* g_build_path(char* separator, char* first_element,...);
     * }
     */
    public static MemorySegment g_build_path(MemorySegment separator, MemorySegment first_element, Object... x2) {
        var mh$ = g_build_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(separator, first_element, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_pathv$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$2,"g_build_pathv");
    }
    /**
     * {@snippet :
     * char* g_build_pathv(char* separator, char** args);
     * }
     */
    public static MemorySegment g_build_pathv(MemorySegment separator, MemorySegment args) {
        var mh$ = g_build_pathv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(separator, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$3,"g_build_filename");
    }
    /**
     * {@snippet :
     * char* g_build_filename(char* first_element,...);
     * }
     */
    public static MemorySegment g_build_filename(MemorySegment first_element, Object... x1) {
        var mh$ = g_build_filename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(first_element, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_filenamev$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$4,"g_build_filenamev");
    }
    /**
     * {@snippet :
     * char* g_build_filenamev(char** args);
     * }
     */
    public static MemorySegment g_build_filenamev(MemorySegment args) {
        var mh$ = g_build_filenamev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_build_filename_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$5,"g_build_filename_valist");
    }
    /**
     * {@snippet :
     * char* g_build_filename_valist(char* first_element, struct __va_list* args);
     * }
     */
    public static MemorySegment g_build_filename_valist(MemorySegment first_element, MemorySegment args) {
        var mh$ = g_build_filename_valist$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(first_element, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mkdir_with_parents$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$0,"g_mkdir_with_parents");
    }
    /**
     * {@snippet :
     * int g_mkdir_with_parents(char* pathname, int mode);
     * }
     */
    public static int g_mkdir_with_parents(MemorySegment pathname, int mode) {
        var mh$ = g_mkdir_with_parents$MH();
        try {
            return (int)mh$.invokeExact(pathname, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_is_absolute$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$1,"g_path_is_absolute");
    }
    /**
     * {@snippet :
     * int g_path_is_absolute(char* file_name);
     * }
     */
    public static int g_path_is_absolute(MemorySegment file_name) {
        var mh$ = g_path_is_absolute$MH();
        try {
            return (int)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_skip_root$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$2,"g_path_skip_root");
    }
    /**
     * {@snippet :
     * char* g_path_skip_root(char* file_name);
     * }
     */
    public static MemorySegment g_path_skip_root(MemorySegment file_name) {
        var mh$ = g_path_skip_root$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_basename$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$3,"g_basename");
    }
    /**
     * {@snippet :
     * char* g_basename(char* file_name);
     * }
     */
    public static MemorySegment g_basename(MemorySegment file_name) {
        var mh$ = g_basename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_current_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$4,"g_get_current_dir");
    }
    /**
     * {@snippet :
     * char* g_get_current_dir();
     * }
     */
    public static MemorySegment g_get_current_dir() {
        var mh$ = g_get_current_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_get_basename$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$5,"g_path_get_basename");
    }
    /**
     * {@snippet :
     * char* g_path_get_basename(char* file_name);
     * }
     */
    public static MemorySegment g_path_get_basename(MemorySegment file_name) {
        var mh$ = g_path_get_basename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_get_dirname$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$0,"g_path_get_dirname");
    }
    /**
     * {@snippet :
     * char* g_path_get_dirname(char* file_name);
     * }
     */
    public static MemorySegment g_path_get_dirname(MemorySegment file_name) {
        var mh$ = g_path_get_dirname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_canonicalize_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$1,"g_canonicalize_filename");
    }
    /**
     * {@snippet :
     * char* g_canonicalize_filename(char* filename, char* relative_to);
     * }
     */
    public static MemorySegment g_canonicalize_filename(MemorySegment filename, MemorySegment relative_to) {
        var mh$ = g_canonicalize_filename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename, relative_to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strip_context$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$2,"g_strip_context");
    }
    /**
     * {@snippet :
     * char* g_strip_context(char* msgid, char* msgval);
     * }
     */
    public static MemorySegment g_strip_context(MemorySegment msgid, MemorySegment msgval) {
        var mh$ = g_strip_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(msgid, msgval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dgettext$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$3,"g_dgettext");
    }
    /**
     * {@snippet :
     * char* g_dgettext(char* domain, char* msgid);
     * }
     */
    public static MemorySegment g_dgettext(MemorySegment domain, MemorySegment msgid) {
        var mh$ = g_dgettext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, msgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dcgettext$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$4,"g_dcgettext");
    }
    /**
     * {@snippet :
     * char* g_dcgettext(char* domain, char* msgid, int category);
     * }
     */
    public static MemorySegment g_dcgettext(MemorySegment domain, MemorySegment msgid, int category) {
        var mh$ = g_dcgettext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, msgid, category);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dngettext$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$6,"g_dngettext");
    }
    /**
     * {@snippet :
     * char* g_dngettext(char* domain, char* msgid, char* msgid_plural, unsigned long n);
     * }
     */
    public static MemorySegment g_dngettext(MemorySegment domain, MemorySegment msgid, MemorySegment msgid_plural, long n) {
        var mh$ = g_dngettext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, msgid, msgid_plural, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dpgettext$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$0,"g_dpgettext");
    }
    /**
     * {@snippet :
     * char* g_dpgettext(char* domain, char* msgctxtid, unsigned long msgidoffset);
     * }
     */
    public static MemorySegment g_dpgettext(MemorySegment domain, MemorySegment msgctxtid, long msgidoffset) {
        var mh$ = g_dpgettext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, msgctxtid, msgidoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_dpgettext2$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$1,"g_dpgettext2");
    }
    /**
     * {@snippet :
     * char* g_dpgettext2(char* domain, char* context, char* msgid);
     * }
     */
    public static MemorySegment g_dpgettext2(MemorySegment domain, MemorySegment context, MemorySegment msgid) {
        var mh$ = g_dpgettext2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(domain, context, msgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_free$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$2,"g_free");
    }
    /**
     * {@snippet :
     * void g_free(void* mem);
     * }
     */
    public static void g_free(MemorySegment mem) {
        var mh$ = g_free$MH();
        try {
            mh$.invokeExact(mem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_free_sized$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$3,"g_free_sized");
    }
    /**
     * {@snippet :
     * void g_free_sized(void* mem, unsigned long size);
     * }
     */
    public static void g_free_sized(MemorySegment mem, long size) {
        var mh$ = g_free_sized$MH();
        try {
            mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$5,"g_clear_pointer");
    }
    /**
     * {@snippet :
     * void g_clear_pointer(void** pp, void (*destroy)(void*));
     * }
     */
    public static void g_clear_pointer(MemorySegment pp, MemorySegment destroy) {
        var mh$ = g_clear_pointer$MH();
        try {
            mh$.invokeExact(pp, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$0,"g_malloc");
    }
    /**
     * {@snippet :
     * void* g_malloc(unsigned long n_bytes);
     * }
     */
    public static MemorySegment g_malloc(long n_bytes) {
        var mh$ = g_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$1,"g_malloc0");
    }
    /**
     * {@snippet :
     * void* g_malloc0(unsigned long n_bytes);
     * }
     */
    public static MemorySegment g_malloc0(long n_bytes) {
        var mh$ = g_malloc0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$2,"g_realloc");
    }
    /**
     * {@snippet :
     * void* g_realloc(void* mem, unsigned long n_bytes);
     * }
     */
    public static MemorySegment g_realloc(MemorySegment mem, long n_bytes) {
        var mh$ = g_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$3,"g_try_malloc");
    }
    /**
     * {@snippet :
     * void* g_try_malloc(unsigned long n_bytes);
     * }
     */
    public static MemorySegment g_try_malloc(long n_bytes) {
        var mh$ = g_try_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$4,"g_try_malloc0");
    }
    /**
     * {@snippet :
     * void* g_try_malloc0(unsigned long n_bytes);
     * }
     */
    public static MemorySegment g_try_malloc0(long n_bytes) {
        var mh$ = g_try_malloc0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$5,"g_try_realloc");
    }
    /**
     * {@snippet :
     * void* g_try_realloc(void* mem, unsigned long n_bytes);
     * }
     */
    public static MemorySegment g_try_realloc(MemorySegment mem, long n_bytes) {
        var mh$ = g_try_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, n_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$0,"g_malloc_n");
    }
    /**
     * {@snippet :
     * void* g_malloc_n(unsigned long n_blocks, unsigned long n_block_bytes);
     * }
     */
    public static MemorySegment g_malloc_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_malloc_n$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_malloc0_n$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$1,"g_malloc0_n");
    }
    /**
     * {@snippet :
     * void* g_malloc0_n(unsigned long n_blocks, unsigned long n_block_bytes);
     * }
     */
    public static MemorySegment g_malloc0_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_malloc0_n$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_realloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$2,"g_realloc_n");
    }
    /**
     * {@snippet :
     * void* g_realloc_n(void* mem, unsigned long n_blocks, unsigned long n_block_bytes);
     * }
     */
    public static MemorySegment g_realloc_n(MemorySegment mem, long n_blocks, long n_block_bytes) {
        var mh$ = g_realloc_n$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$3,"g_try_malloc_n");
    }
    /**
     * {@snippet :
     * void* g_try_malloc_n(unsigned long n_blocks, unsigned long n_block_bytes);
     * }
     */
    public static MemorySegment g_try_malloc_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_try_malloc_n$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_malloc0_n$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$4,"g_try_malloc0_n");
    }
    /**
     * {@snippet :
     * void* g_try_malloc0_n(unsigned long n_blocks, unsigned long n_block_bytes);
     * }
     */
    public static MemorySegment g_try_malloc0_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_try_malloc0_n$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_try_realloc_n$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$5,"g_try_realloc_n");
    }
    /**
     * {@snippet :
     * void* g_try_realloc_n(void* mem, unsigned long n_blocks, unsigned long n_block_bytes);
     * }
     */
    public static MemorySegment g_try_realloc_n(MemorySegment mem, long n_blocks, long n_block_bytes) {
        var mh$ = g_try_realloc_n$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$1,"g_aligned_alloc");
    }
    /**
     * {@snippet :
     * void* g_aligned_alloc(unsigned long n_blocks, unsigned long n_block_bytes, unsigned long alignment);
     * }
     */
    public static MemorySegment g_aligned_alloc(long n_blocks, long n_block_bytes, long alignment) {
        var mh$ = g_aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes, alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_aligned_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$2,"g_aligned_alloc0");
    }
    /**
     * {@snippet :
     * void* g_aligned_alloc0(unsigned long n_blocks, unsigned long n_block_bytes, unsigned long alignment);
     * }
     */
    public static MemorySegment g_aligned_alloc0(long n_blocks, long n_block_bytes, long alignment) {
        var mh$ = g_aligned_alloc0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes, alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


