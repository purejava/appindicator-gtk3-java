// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * enum _cairo_status (*cairo_user_scaled_font_text_to_glyphs_func_t)(struct _cairo_scaled_font* scaled_font,char* utf8,int utf8_len,struct cairo_glyph_t** glyphs,int* num_glyphs,struct cairo_text_cluster_t** clusters,int* num_clusters,enum _cairo_text_cluster_flags* cluster_flags);
 * }
 */
public interface cairo_user_scaled_font_text_to_glyphs_func_t {

    int apply(java.lang.foreign.MemorySegment scaled_font, java.lang.foreign.MemorySegment utf8, int utf8_len, java.lang.foreign.MemorySegment glyphs, java.lang.foreign.MemorySegment num_glyphs, java.lang.foreign.MemorySegment clusters, java.lang.foreign.MemorySegment num_clusters, java.lang.foreign.MemorySegment cluster_flags);
    static MemorySegment allocate(cairo_user_scaled_font_text_to_glyphs_func_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1716.const$3, fi, constants$1716.const$2, scope);
    }
    static cairo_user_scaled_font_text_to_glyphs_func_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _scaled_font, java.lang.foreign.MemorySegment _utf8, int _utf8_len, java.lang.foreign.MemorySegment _glyphs, java.lang.foreign.MemorySegment _num_glyphs, java.lang.foreign.MemorySegment _clusters, java.lang.foreign.MemorySegment _num_clusters, java.lang.foreign.MemorySegment _cluster_flags) -> {
            try {
                return (int)constants$1716.const$4.invokeExact(symbol, _scaled_font, _utf8, _utf8_len, _glyphs, _num_glyphs, _clusters, _num_clusters, _cluster_flags);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


