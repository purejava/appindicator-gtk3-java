// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GInterfaceInfo {
 *     void (*interface_init)(void*,void*);
 *     void (*interface_finalize)(void*,void*);
 *     void* interface_data;
 * };
 * }
 */
public class _GInterfaceInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$556.const$2;
    }
    /**
     * {@snippet :
 * void (*interface_init)(void*,void*);
     * }
     */
    public interface interface_init {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(interface_init fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$556.const$3, fi, constants$13.const$4, scope);
        }
        static interface_init ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle interface_init$VH() {
        return constants$556.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*interface_init)(void*,void*);
     * }
     */
    public static MemorySegment interface_init$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$556.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*interface_init)(void*,void*);
     * }
     */
    public static void interface_init$set(MemorySegment seg, MemorySegment x) {
        constants$556.const$4.set(seg, x);
    }
    public static MemorySegment interface_init$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$556.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_init$set(MemorySegment seg, long index, MemorySegment x) {
        constants$556.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static interface_init interface_init(MemorySegment segment, Arena scope) {
        return interface_init.ofAddress(interface_init$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*interface_finalize)(void*,void*);
     * }
     */
    public interface interface_finalize {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(interface_finalize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$556.const$5, fi, constants$13.const$4, scope);
        }
        static interface_finalize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle interface_finalize$VH() {
        return constants$557.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*interface_finalize)(void*,void*);
     * }
     */
    public static MemorySegment interface_finalize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$557.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*interface_finalize)(void*,void*);
     * }
     */
    public static void interface_finalize$set(MemorySegment seg, MemorySegment x) {
        constants$557.const$0.set(seg, x);
    }
    public static MemorySegment interface_finalize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$557.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_finalize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$557.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static interface_finalize interface_finalize(MemorySegment segment, Arena scope) {
        return interface_finalize.ofAddress(interface_finalize$get(segment), scope);
    }
    public static VarHandle interface_data$VH() {
        return constants$557.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* interface_data;
     * }
     */
    public static MemorySegment interface_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$557.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* interface_data;
     * }
     */
    public static void interface_data$set(MemorySegment seg, MemorySegment x) {
        constants$557.const$1.set(seg, x);
    }
    public static MemorySegment interface_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$557.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$557.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


