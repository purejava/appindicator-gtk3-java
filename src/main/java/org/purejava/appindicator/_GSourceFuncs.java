// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GSourceFuncs {
 *     gboolean (*prepare)(GSource *, gint *);
 *     gboolean (*check)(GSource *);
 *     gboolean (*dispatch)(GSource *, GSourceFunc, gpointer);
 *     void (*finalize)(GSource *);
 *     GSourceFunc closure_callback;
 *     GSourceDummyMarshal closure_marshal;
 * }
 * }
 */
public class _GSourceFuncs {

    _GSourceFuncs() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("prepare"),
        app_indicator_h.C_POINTER.withName("check"),
        app_indicator_h.C_POINTER.withName("dispatch"),
        app_indicator_h.C_POINTER.withName("finalize"),
        app_indicator_h.C_POINTER.withName("closure_callback"),
        app_indicator_h.C_POINTER.withName("closure_marshal")
    ).withName("_GSourceFuncs");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * gboolean (*prepare)(GSource *, gint *)
     * }
     */
    public class prepare {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(prepare.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(prepare.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout prepare$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("prepare"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*prepare)(GSource *, gint *)
     * }
     */
    public static final AddressLayout prepare$layout() {
        return prepare$LAYOUT;
    }

    private static final long prepare$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*prepare)(GSource *, gint *)
     * }
     */
    public static final long prepare$offset() {
        return prepare$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*prepare)(GSource *, gint *)
     * }
     */
    public static MemorySegment prepare(MemorySegment struct) {
        return struct.get(prepare$LAYOUT, prepare$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*prepare)(GSource *, gint *)
     * }
     */
    public static void prepare(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(prepare$LAYOUT, prepare$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*check)(GSource *)
     * }
     */
    public class check {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(check.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(check.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout check$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("check"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*check)(GSource *)
     * }
     */
    public static final AddressLayout check$layout() {
        return check$LAYOUT;
    }

    private static final long check$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*check)(GSource *)
     * }
     */
    public static final long check$offset() {
        return check$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*check)(GSource *)
     * }
     */
    public static MemorySegment check(MemorySegment struct) {
        return struct.get(check$LAYOUT, check$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*check)(GSource *)
     * }
     */
    public static void check(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(check$LAYOUT, check$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*dispatch)(GSource *, GSourceFunc, gpointer)
     * }
     */
    public class dispatch {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(dispatch.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(dispatch.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout dispatch$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dispatch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*dispatch)(GSource *, GSourceFunc, gpointer)
     * }
     */
    public static final AddressLayout dispatch$layout() {
        return dispatch$LAYOUT;
    }

    private static final long dispatch$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*dispatch)(GSource *, GSourceFunc, gpointer)
     * }
     */
    public static final long dispatch$offset() {
        return dispatch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*dispatch)(GSource *, GSourceFunc, gpointer)
     * }
     */
    public static MemorySegment dispatch(MemorySegment struct) {
        return struct.get(dispatch$LAYOUT, dispatch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*dispatch)(GSource *, GSourceFunc, gpointer)
     * }
     */
    public static void dispatch(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dispatch$LAYOUT, dispatch$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*finalize)(GSource *)
     * }
     */
    public class finalize {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(finalize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(finalize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout finalize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("finalize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*finalize)(GSource *)
     * }
     */
    public static final AddressLayout finalize$layout() {
        return finalize$LAYOUT;
    }

    private static final long finalize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*finalize)(GSource *)
     * }
     */
    public static final long finalize$offset() {
        return finalize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*finalize)(GSource *)
     * }
     */
    public static MemorySegment finalize(MemorySegment struct) {
        return struct.get(finalize$LAYOUT, finalize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*finalize)(GSource *)
     * }
     */
    public static void finalize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(finalize$LAYOUT, finalize$OFFSET, fieldValue);
    }

    private static final AddressLayout closure_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("closure_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSourceFunc closure_callback
     * }
     */
    public static final AddressLayout closure_callback$layout() {
        return closure_callback$LAYOUT;
    }

    private static final long closure_callback$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSourceFunc closure_callback
     * }
     */
    public static final long closure_callback$offset() {
        return closure_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSourceFunc closure_callback
     * }
     */
    public static MemorySegment closure_callback(MemorySegment struct) {
        return struct.get(closure_callback$LAYOUT, closure_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSourceFunc closure_callback
     * }
     */
    public static void closure_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(closure_callback$LAYOUT, closure_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout closure_marshal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("closure_marshal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSourceDummyMarshal closure_marshal
     * }
     */
    public static final AddressLayout closure_marshal$layout() {
        return closure_marshal$LAYOUT;
    }

    private static final long closure_marshal$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSourceDummyMarshal closure_marshal
     * }
     */
    public static final long closure_marshal$offset() {
        return closure_marshal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSourceDummyMarshal closure_marshal
     * }
     */
    public static MemorySegment closure_marshal(MemorySegment struct) {
        return struct.get(closure_marshal$LAYOUT, closure_marshal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSourceDummyMarshal closure_marshal
     * }
     */
    public static void closure_marshal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(closure_marshal$LAYOUT, closure_marshal$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

