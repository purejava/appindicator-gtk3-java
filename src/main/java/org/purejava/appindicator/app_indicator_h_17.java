// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_17 extends app_indicator_h_18 {

    app_indicator_h_17() {
        // Should not be called directly
    }

    private static class g_mem_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_profile()
     * }
     */
    public static FunctionDescriptor g_mem_profile$descriptor() {
        return g_mem_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_profile()
     * }
     */
    public static MethodHandle g_mem_profile$handle() {
        return g_mem_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_profile()
     * }
     */
    public static void g_mem_profile() {
        var mh$ = g_mem_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_profile");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TRAVERSE_LEAVES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TRAVERSE_LEAVES = 1
     * }
     */
    public static int G_TRAVERSE_LEAVES() {
        return G_TRAVERSE_LEAVES;
    }
    private static final int G_TRAVERSE_NON_LEAVES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TRAVERSE_NON_LEAVES = 2
     * }
     */
    public static int G_TRAVERSE_NON_LEAVES() {
        return G_TRAVERSE_NON_LEAVES;
    }
    private static final int G_TRAVERSE_ALL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TRAVERSE_ALL = 3
     * }
     */
    public static int G_TRAVERSE_ALL() {
        return G_TRAVERSE_ALL;
    }
    private static final int G_TRAVERSE_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TRAVERSE_MASK = 3
     * }
     */
    public static int G_TRAVERSE_MASK() {
        return G_TRAVERSE_MASK;
    }
    private static final int G_TRAVERSE_LEAFS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TRAVERSE_LEAFS = 1
     * }
     */
    public static int G_TRAVERSE_LEAFS() {
        return G_TRAVERSE_LEAFS;
    }
    private static final int G_TRAVERSE_NON_LEAFS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TRAVERSE_NON_LEAFS = 2
     * }
     */
    public static int G_TRAVERSE_NON_LEAFS() {
        return G_TRAVERSE_NON_LEAFS;
    }
    private static final int G_IN_ORDER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IN_ORDER = 0
     * }
     */
    public static int G_IN_ORDER() {
        return G_IN_ORDER;
    }
    private static final int G_PRE_ORDER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PRE_ORDER = 1
     * }
     */
    public static int G_PRE_ORDER() {
        return G_PRE_ORDER;
    }
    private static final int G_POST_ORDER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_POST_ORDER = 2
     * }
     */
    public static int G_POST_ORDER() {
        return G_POST_ORDER;
    }
    private static final int G_LEVEL_ORDER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LEVEL_ORDER = 3
     * }
     */
    public static int G_LEVEL_ORDER() {
        return G_LEVEL_ORDER;
    }

    private static class g_node_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_new(gpointer data)
     * }
     */
    public static FunctionDescriptor g_node_new$descriptor() {
        return g_node_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_new(gpointer data)
     * }
     */
    public static MethodHandle g_node_new$handle() {
        return g_node_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_new(gpointer data)
     * }
     */
    public static MemorySegment g_node_new(MemorySegment data) {
        var mh$ = g_node_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_new", data);
            }
            return (MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_node_destroy(GNode *root)
     * }
     */
    public static FunctionDescriptor g_node_destroy$descriptor() {
        return g_node_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_node_destroy(GNode *root)
     * }
     */
    public static MethodHandle g_node_destroy$handle() {
        return g_node_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_node_destroy(GNode *root)
     * }
     */
    public static void g_node_destroy(MemorySegment root) {
        var mh$ = g_node_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_destroy", root);
            }
            mh$.invokeExact(root);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_unlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_unlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_node_unlink(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_unlink$descriptor() {
        return g_node_unlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_node_unlink(GNode *node)
     * }
     */
    public static MethodHandle g_node_unlink$handle() {
        return g_node_unlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_node_unlink(GNode *node)
     * }
     */
    public static void g_node_unlink(MemorySegment node) {
        var mh$ = g_node_unlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_unlink", node);
            }
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_copy_deep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_copy_deep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_copy_deep(GNode *node, GCopyFunc copy_func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_node_copy_deep$descriptor() {
        return g_node_copy_deep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_copy_deep(GNode *node, GCopyFunc copy_func, gpointer data)
     * }
     */
    public static MethodHandle g_node_copy_deep$handle() {
        return g_node_copy_deep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_copy_deep(GNode *node, GCopyFunc copy_func, gpointer data)
     * }
     */
    public static MemorySegment g_node_copy_deep(MemorySegment node, MemorySegment copy_func, MemorySegment data) {
        var mh$ = g_node_copy_deep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_copy_deep", node, copy_func, data);
            }
            return (MemorySegment)mh$.invokeExact(node, copy_func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_copy(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_copy$descriptor() {
        return g_node_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_copy(GNode *node)
     * }
     */
    public static MethodHandle g_node_copy$handle() {
        return g_node_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_copy(GNode *node)
     * }
     */
    public static MemorySegment g_node_copy(MemorySegment node) {
        var mh$ = g_node_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_copy", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_insert(GNode *parent, gint position, GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_insert$descriptor() {
        return g_node_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_insert(GNode *parent, gint position, GNode *node)
     * }
     */
    public static MethodHandle g_node_insert$handle() {
        return g_node_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_insert(GNode *parent, gint position, GNode *node)
     * }
     */
    public static MemorySegment g_node_insert(MemorySegment parent, int position, MemorySegment node) {
        var mh$ = g_node_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_insert", parent, position, node);
            }
            return (MemorySegment)mh$.invokeExact(parent, position, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_insert_before(GNode *parent, GNode *sibling, GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_insert_before$descriptor() {
        return g_node_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_insert_before(GNode *parent, GNode *sibling, GNode *node)
     * }
     */
    public static MethodHandle g_node_insert_before$handle() {
        return g_node_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_insert_before(GNode *parent, GNode *sibling, GNode *node)
     * }
     */
    public static MemorySegment g_node_insert_before(MemorySegment parent, MemorySegment sibling, MemorySegment node) {
        var mh$ = g_node_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_insert_before", parent, sibling, node);
            }
            return (MemorySegment)mh$.invokeExact(parent, sibling, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_insert_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_insert_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_insert_after(GNode *parent, GNode *sibling, GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_insert_after$descriptor() {
        return g_node_insert_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_insert_after(GNode *parent, GNode *sibling, GNode *node)
     * }
     */
    public static MethodHandle g_node_insert_after$handle() {
        return g_node_insert_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_insert_after(GNode *parent, GNode *sibling, GNode *node)
     * }
     */
    public static MemorySegment g_node_insert_after(MemorySegment parent, MemorySegment sibling, MemorySegment node) {
        var mh$ = g_node_insert_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_insert_after", parent, sibling, node);
            }
            return (MemorySegment)mh$.invokeExact(parent, sibling, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_prepend(GNode *parent, GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_prepend$descriptor() {
        return g_node_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_prepend(GNode *parent, GNode *node)
     * }
     */
    public static MethodHandle g_node_prepend$handle() {
        return g_node_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_prepend(GNode *parent, GNode *node)
     * }
     */
    public static MemorySegment g_node_prepend(MemorySegment parent, MemorySegment node) {
        var mh$ = g_node_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_prepend", parent, node);
            }
            return (MemorySegment)mh$.invokeExact(parent, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_n_nodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_n_nodes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_node_n_nodes(GNode *root, GTraverseFlags flags)
     * }
     */
    public static FunctionDescriptor g_node_n_nodes$descriptor() {
        return g_node_n_nodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_node_n_nodes(GNode *root, GTraverseFlags flags)
     * }
     */
    public static MethodHandle g_node_n_nodes$handle() {
        return g_node_n_nodes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_node_n_nodes(GNode *root, GTraverseFlags flags)
     * }
     */
    public static int g_node_n_nodes(MemorySegment root, int flags) {
        var mh$ = g_node_n_nodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_n_nodes", root, flags);
            }
            return (int)mh$.invokeExact(root, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_get_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_get_root"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_get_root(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_get_root$descriptor() {
        return g_node_get_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_get_root(GNode *node)
     * }
     */
    public static MethodHandle g_node_get_root$handle() {
        return g_node_get_root.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_get_root(GNode *node)
     * }
     */
    public static MemorySegment g_node_get_root(MemorySegment node) {
        var mh$ = g_node_get_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_get_root", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_is_ancestor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_is_ancestor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_node_is_ancestor(GNode *node, GNode *descendant)
     * }
     */
    public static FunctionDescriptor g_node_is_ancestor$descriptor() {
        return g_node_is_ancestor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_node_is_ancestor(GNode *node, GNode *descendant)
     * }
     */
    public static MethodHandle g_node_is_ancestor$handle() {
        return g_node_is_ancestor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_node_is_ancestor(GNode *node, GNode *descendant)
     * }
     */
    public static int g_node_is_ancestor(MemorySegment node, MemorySegment descendant) {
        var mh$ = g_node_is_ancestor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_is_ancestor", node, descendant);
            }
            return (int)mh$.invokeExact(node, descendant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_node_depth(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_depth$descriptor() {
        return g_node_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_node_depth(GNode *node)
     * }
     */
    public static MethodHandle g_node_depth$handle() {
        return g_node_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_node_depth(GNode *node)
     * }
     */
    public static int g_node_depth(MemorySegment node) {
        var mh$ = g_node_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_depth", node);
            }
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_find(GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data)
     * }
     */
    public static FunctionDescriptor g_node_find$descriptor() {
        return g_node_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_find(GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data)
     * }
     */
    public static MethodHandle g_node_find$handle() {
        return g_node_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_find(GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data)
     * }
     */
    public static MemorySegment g_node_find(MemorySegment root, int order, int flags, MemorySegment data) {
        var mh$ = g_node_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_find", root, order, flags, data);
            }
            return (MemorySegment)mh$.invokeExact(root, order, flags, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_traverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_traverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_node_traverse(GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_node_traverse$descriptor() {
        return g_node_traverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_node_traverse(GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data)
     * }
     */
    public static MethodHandle g_node_traverse$handle() {
        return g_node_traverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_node_traverse(GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data)
     * }
     */
    public static void g_node_traverse(MemorySegment root, int order, int flags, int max_depth, MemorySegment func, MemorySegment data) {
        var mh$ = g_node_traverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_traverse", root, order, flags, max_depth, func, data);
            }
            mh$.invokeExact(root, order, flags, max_depth, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_max_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_max_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_node_max_height(GNode *root)
     * }
     */
    public static FunctionDescriptor g_node_max_height$descriptor() {
        return g_node_max_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_node_max_height(GNode *root)
     * }
     */
    public static MethodHandle g_node_max_height$handle() {
        return g_node_max_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_node_max_height(GNode *root)
     * }
     */
    public static int g_node_max_height(MemorySegment root) {
        var mh$ = g_node_max_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_max_height", root);
            }
            return (int)mh$.invokeExact(root);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_children_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_children_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_node_children_foreach(GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_node_children_foreach$descriptor() {
        return g_node_children_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_node_children_foreach(GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data)
     * }
     */
    public static MethodHandle g_node_children_foreach$handle() {
        return g_node_children_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_node_children_foreach(GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data)
     * }
     */
    public static void g_node_children_foreach(MemorySegment node, int flags, MemorySegment func, MemorySegment data) {
        var mh$ = g_node_children_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_children_foreach", node, flags, func, data);
            }
            mh$.invokeExact(node, flags, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_reverse_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_reverse_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_node_reverse_children(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_reverse_children$descriptor() {
        return g_node_reverse_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_node_reverse_children(GNode *node)
     * }
     */
    public static MethodHandle g_node_reverse_children$handle() {
        return g_node_reverse_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_node_reverse_children(GNode *node)
     * }
     */
    public static void g_node_reverse_children(MemorySegment node) {
        var mh$ = g_node_reverse_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_reverse_children", node);
            }
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_n_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_n_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_node_n_children(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_n_children$descriptor() {
        return g_node_n_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_node_n_children(GNode *node)
     * }
     */
    public static MethodHandle g_node_n_children$handle() {
        return g_node_n_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_node_n_children(GNode *node)
     * }
     */
    public static int g_node_n_children(MemorySegment node) {
        var mh$ = g_node_n_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_n_children", node);
            }
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_nth_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_nth_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_nth_child(GNode *node, guint n)
     * }
     */
    public static FunctionDescriptor g_node_nth_child$descriptor() {
        return g_node_nth_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_nth_child(GNode *node, guint n)
     * }
     */
    public static MethodHandle g_node_nth_child$handle() {
        return g_node_nth_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_nth_child(GNode *node, guint n)
     * }
     */
    public static MemorySegment g_node_nth_child(MemorySegment node, int n) {
        var mh$ = g_node_nth_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_nth_child", node, n);
            }
            return (MemorySegment)mh$.invokeExact(node, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_last_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_last_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_last_child(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_last_child$descriptor() {
        return g_node_last_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_last_child(GNode *node)
     * }
     */
    public static MethodHandle g_node_last_child$handle() {
        return g_node_last_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_last_child(GNode *node)
     * }
     */
    public static MemorySegment g_node_last_child(MemorySegment node) {
        var mh$ = g_node_last_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_last_child", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_find_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_find_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_find_child(GNode *node, GTraverseFlags flags, gpointer data)
     * }
     */
    public static FunctionDescriptor g_node_find_child$descriptor() {
        return g_node_find_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_find_child(GNode *node, GTraverseFlags flags, gpointer data)
     * }
     */
    public static MethodHandle g_node_find_child$handle() {
        return g_node_find_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_find_child(GNode *node, GTraverseFlags flags, gpointer data)
     * }
     */
    public static MemorySegment g_node_find_child(MemorySegment node, int flags, MemorySegment data) {
        var mh$ = g_node_find_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_find_child", node, flags, data);
            }
            return (MemorySegment)mh$.invokeExact(node, flags, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_child_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_child_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_node_child_position(GNode *node, GNode *child)
     * }
     */
    public static FunctionDescriptor g_node_child_position$descriptor() {
        return g_node_child_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_node_child_position(GNode *node, GNode *child)
     * }
     */
    public static MethodHandle g_node_child_position$handle() {
        return g_node_child_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_node_child_position(GNode *node, GNode *child)
     * }
     */
    public static int g_node_child_position(MemorySegment node, MemorySegment child) {
        var mh$ = g_node_child_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_child_position", node, child);
            }
            return (int)mh$.invokeExact(node, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_child_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_child_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_node_child_index(GNode *node, gpointer data)
     * }
     */
    public static FunctionDescriptor g_node_child_index$descriptor() {
        return g_node_child_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_node_child_index(GNode *node, gpointer data)
     * }
     */
    public static MethodHandle g_node_child_index$handle() {
        return g_node_child_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_node_child_index(GNode *node, gpointer data)
     * }
     */
    public static int g_node_child_index(MemorySegment node, MemorySegment data) {
        var mh$ = g_node_child_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_child_index", node, data);
            }
            return (int)mh$.invokeExact(node, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_first_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_first_sibling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_first_sibling(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_first_sibling$descriptor() {
        return g_node_first_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_first_sibling(GNode *node)
     * }
     */
    public static MethodHandle g_node_first_sibling$handle() {
        return g_node_first_sibling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_first_sibling(GNode *node)
     * }
     */
    public static MemorySegment g_node_first_sibling(MemorySegment node) {
        var mh$ = g_node_first_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_first_sibling", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_last_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_last_sibling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNode *g_node_last_sibling(GNode *node)
     * }
     */
    public static FunctionDescriptor g_node_last_sibling$descriptor() {
        return g_node_last_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNode *g_node_last_sibling(GNode *node)
     * }
     */
    public static MethodHandle g_node_last_sibling$handle() {
        return g_node_last_sibling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNode *g_node_last_sibling(GNode *node)
     * }
     */
    public static MemorySegment g_node_last_sibling(MemorySegment node) {
        var mh$ = g_node_last_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_last_sibling", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_alloc()
     * }
     */
    public static FunctionDescriptor g_list_alloc$descriptor() {
        return g_list_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_alloc()
     * }
     */
    public static MethodHandle g_list_alloc$handle() {
        return g_list_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_alloc()
     * }
     */
    public static MemorySegment g_list_alloc() {
        var mh$ = g_list_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_alloc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_free(GList *list)
     * }
     */
    public static FunctionDescriptor g_list_free$descriptor() {
        return g_list_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_free(GList *list)
     * }
     */
    public static MethodHandle g_list_free$handle() {
        return g_list_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_free(GList *list)
     * }
     */
    public static void g_list_free(MemorySegment list) {
        var mh$ = g_list_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_free", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_free_1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_free_1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_free_1(GList *list)
     * }
     */
    public static FunctionDescriptor g_list_free_1$descriptor() {
        return g_list_free_1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_free_1(GList *list)
     * }
     */
    public static MethodHandle g_list_free_1$handle() {
        return g_list_free_1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_free_1(GList *list)
     * }
     */
    public static void g_list_free_1(MemorySegment list) {
        var mh$ = g_list_free_1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_free_1", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_free_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_free_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_free_full(GList *list, GDestroyNotify free_func)
     * }
     */
    public static FunctionDescriptor g_list_free_full$descriptor() {
        return g_list_free_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_free_full(GList *list, GDestroyNotify free_func)
     * }
     */
    public static MethodHandle g_list_free_full$handle() {
        return g_list_free_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_free_full(GList *list, GDestroyNotify free_func)
     * }
     */
    public static void g_list_free_full(MemorySegment list, MemorySegment free_func) {
        var mh$ = g_list_free_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_free_full", list, free_func);
            }
            mh$.invokeExact(list, free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_append(GList *list, gpointer data)
     * }
     */
    public static FunctionDescriptor g_list_append$descriptor() {
        return g_list_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_append(GList *list, gpointer data)
     * }
     */
    public static MethodHandle g_list_append$handle() {
        return g_list_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_append(GList *list, gpointer data)
     * }
     */
    public static MemorySegment g_list_append(MemorySegment list, MemorySegment data) {
        var mh$ = g_list_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_append", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_prepend(GList *list, gpointer data)
     * }
     */
    public static FunctionDescriptor g_list_prepend$descriptor() {
        return g_list_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_prepend(GList *list, gpointer data)
     * }
     */
    public static MethodHandle g_list_prepend$handle() {
        return g_list_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_prepend(GList *list, gpointer data)
     * }
     */
    public static MemorySegment g_list_prepend(MemorySegment list, MemorySegment data) {
        var mh$ = g_list_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_prepend", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_insert(GList *list, gpointer data, gint position)
     * }
     */
    public static FunctionDescriptor g_list_insert$descriptor() {
        return g_list_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_insert(GList *list, gpointer data, gint position)
     * }
     */
    public static MethodHandle g_list_insert$handle() {
        return g_list_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_insert(GList *list, gpointer data, gint position)
     * }
     */
    public static MemorySegment g_list_insert(MemorySegment list, MemorySegment data, int position) {
        var mh$ = g_list_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_insert", list, data, position);
            }
            return (MemorySegment)mh$.invokeExact(list, data, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_insert_sorted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_insert_sorted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_sorted(GList *list, gpointer data, GCompareFunc func)
     * }
     */
    public static FunctionDescriptor g_list_insert_sorted$descriptor() {
        return g_list_insert_sorted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_sorted(GList *list, gpointer data, GCompareFunc func)
     * }
     */
    public static MethodHandle g_list_insert_sorted$handle() {
        return g_list_insert_sorted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_insert_sorted(GList *list, gpointer data, GCompareFunc func)
     * }
     */
    public static MemorySegment g_list_insert_sorted(MemorySegment list, MemorySegment data, MemorySegment func) {
        var mh$ = g_list_insert_sorted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_insert_sorted", list, data, func);
            }
            return (MemorySegment)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_insert_sorted_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_insert_sorted_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_sorted_with_data(GList *list, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_list_insert_sorted_with_data$descriptor() {
        return g_list_insert_sorted_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_sorted_with_data(GList *list, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_list_insert_sorted_with_data$handle() {
        return g_list_insert_sorted_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_insert_sorted_with_data(GList *list, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MemorySegment g_list_insert_sorted_with_data(MemorySegment list, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_list_insert_sorted_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_insert_sorted_with_data", list, data, func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(list, data, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_before(GList *list, GList *sibling, gpointer data)
     * }
     */
    public static FunctionDescriptor g_list_insert_before$descriptor() {
        return g_list_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_before(GList *list, GList *sibling, gpointer data)
     * }
     */
    public static MethodHandle g_list_insert_before$handle() {
        return g_list_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_insert_before(GList *list, GList *sibling, gpointer data)
     * }
     */
    public static MemorySegment g_list_insert_before(MemorySegment list, MemorySegment sibling, MemorySegment data) {
        var mh$ = g_list_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_insert_before", list, sibling, data);
            }
            return (MemorySegment)mh$.invokeExact(list, sibling, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_insert_before_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_insert_before_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_before_link(GList *list, GList *sibling, GList *link_)
     * }
     */
    public static FunctionDescriptor g_list_insert_before_link$descriptor() {
        return g_list_insert_before_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_insert_before_link(GList *list, GList *sibling, GList *link_)
     * }
     */
    public static MethodHandle g_list_insert_before_link$handle() {
        return g_list_insert_before_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_insert_before_link(GList *list, GList *sibling, GList *link_)
     * }
     */
    public static MemorySegment g_list_insert_before_link(MemorySegment list, MemorySegment sibling, MemorySegment link_) {
        var mh$ = g_list_insert_before_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_insert_before_link", list, sibling, link_);
            }
            return (MemorySegment)mh$.invokeExact(list, sibling, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_concat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_concat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_concat(GList *list1, GList *list2)
     * }
     */
    public static FunctionDescriptor g_list_concat$descriptor() {
        return g_list_concat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_concat(GList *list1, GList *list2)
     * }
     */
    public static MethodHandle g_list_concat$handle() {
        return g_list_concat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_concat(GList *list1, GList *list2)
     * }
     */
    public static MemorySegment g_list_concat(MemorySegment list1, MemorySegment list2) {
        var mh$ = g_list_concat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_concat", list1, list2);
            }
            return (MemorySegment)mh$.invokeExact(list1, list2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_remove(GList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_list_remove$descriptor() {
        return g_list_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_remove(GList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_list_remove$handle() {
        return g_list_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_remove(GList *list, gconstpointer data)
     * }
     */
    public static MemorySegment g_list_remove(MemorySegment list, MemorySegment data) {
        var mh$ = g_list_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_remove", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_remove_all(GList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_list_remove_all$descriptor() {
        return g_list_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_remove_all(GList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_list_remove_all$handle() {
        return g_list_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_remove_all(GList *list, gconstpointer data)
     * }
     */
    public static MemorySegment g_list_remove_all(MemorySegment list, MemorySegment data) {
        var mh$ = g_list_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_remove_all", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_remove_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_remove_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_remove_link(GList *list, GList *llink)
     * }
     */
    public static FunctionDescriptor g_list_remove_link$descriptor() {
        return g_list_remove_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_remove_link(GList *list, GList *llink)
     * }
     */
    public static MethodHandle g_list_remove_link$handle() {
        return g_list_remove_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_remove_link(GList *list, GList *llink)
     * }
     */
    public static MemorySegment g_list_remove_link(MemorySegment list, MemorySegment llink) {
        var mh$ = g_list_remove_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_remove_link", list, llink);
            }
            return (MemorySegment)mh$.invokeExact(list, llink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_delete_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_delete_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_delete_link(GList *list, GList *link_)
     * }
     */
    public static FunctionDescriptor g_list_delete_link$descriptor() {
        return g_list_delete_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_delete_link(GList *list, GList *link_)
     * }
     */
    public static MethodHandle g_list_delete_link$handle() {
        return g_list_delete_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_delete_link(GList *list, GList *link_)
     * }
     */
    public static MemorySegment g_list_delete_link(MemorySegment list, MemorySegment link_) {
        var mh$ = g_list_delete_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_delete_link", list, link_);
            }
            return (MemorySegment)mh$.invokeExact(list, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_reverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_reverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_reverse(GList *list)
     * }
     */
    public static FunctionDescriptor g_list_reverse$descriptor() {
        return g_list_reverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_reverse(GList *list)
     * }
     */
    public static MethodHandle g_list_reverse$handle() {
        return g_list_reverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_reverse(GList *list)
     * }
     */
    public static MemorySegment g_list_reverse(MemorySegment list) {
        var mh$ = g_list_reverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_reverse", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_copy(GList *list)
     * }
     */
    public static FunctionDescriptor g_list_copy$descriptor() {
        return g_list_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_copy(GList *list)
     * }
     */
    public static MethodHandle g_list_copy$handle() {
        return g_list_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_copy(GList *list)
     * }
     */
    public static MemorySegment g_list_copy(MemorySegment list) {
        var mh$ = g_list_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_copy", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_copy_deep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_copy_deep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_copy_deep(GList *list, GCopyFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_list_copy_deep$descriptor() {
        return g_list_copy_deep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_copy_deep(GList *list, GCopyFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_list_copy_deep$handle() {
        return g_list_copy_deep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_copy_deep(GList *list, GCopyFunc func, gpointer user_data)
     * }
     */
    public static MemorySegment g_list_copy_deep(MemorySegment list, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_list_copy_deep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_copy_deep", list, func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_nth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_nth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_nth(GList *list, guint n)
     * }
     */
    public static FunctionDescriptor g_list_nth$descriptor() {
        return g_list_nth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_nth(GList *list, guint n)
     * }
     */
    public static MethodHandle g_list_nth$handle() {
        return g_list_nth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_nth(GList *list, guint n)
     * }
     */
    public static MemorySegment g_list_nth(MemorySegment list, int n) {
        var mh$ = g_list_nth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_nth", list, n);
            }
            return (MemorySegment)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_nth_prev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_nth_prev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_nth_prev(GList *list, guint n)
     * }
     */
    public static FunctionDescriptor g_list_nth_prev$descriptor() {
        return g_list_nth_prev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_nth_prev(GList *list, guint n)
     * }
     */
    public static MethodHandle g_list_nth_prev$handle() {
        return g_list_nth_prev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_nth_prev(GList *list, guint n)
     * }
     */
    public static MemorySegment g_list_nth_prev(MemorySegment list, int n) {
        var mh$ = g_list_nth_prev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_nth_prev", list, n);
            }
            return (MemorySegment)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_find(GList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_list_find$descriptor() {
        return g_list_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_find(GList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_list_find$handle() {
        return g_list_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_find(GList *list, gconstpointer data)
     * }
     */
    public static MemorySegment g_list_find(MemorySegment list, MemorySegment data) {
        var mh$ = g_list_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_find", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_find_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_find_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_find_custom(GList *list, gconstpointer data, GCompareFunc func)
     * }
     */
    public static FunctionDescriptor g_list_find_custom$descriptor() {
        return g_list_find_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_find_custom(GList *list, gconstpointer data, GCompareFunc func)
     * }
     */
    public static MethodHandle g_list_find_custom$handle() {
        return g_list_find_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_find_custom(GList *list, gconstpointer data, GCompareFunc func)
     * }
     */
    public static MemorySegment g_list_find_custom(MemorySegment list, MemorySegment data, MemorySegment func) {
        var mh$ = g_list_find_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_find_custom", list, data, func);
            }
            return (MemorySegment)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_list_position(GList *list, GList *llink)
     * }
     */
    public static FunctionDescriptor g_list_position$descriptor() {
        return g_list_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_list_position(GList *list, GList *llink)
     * }
     */
    public static MethodHandle g_list_position$handle() {
        return g_list_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_list_position(GList *list, GList *llink)
     * }
     */
    public static int g_list_position(MemorySegment list, MemorySegment llink) {
        var mh$ = g_list_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_position", list, llink);
            }
            return (int)mh$.invokeExact(list, llink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_list_index(GList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_list_index$descriptor() {
        return g_list_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_list_index(GList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_list_index$handle() {
        return g_list_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_list_index(GList *list, gconstpointer data)
     * }
     */
    public static int g_list_index(MemorySegment list, MemorySegment data) {
        var mh$ = g_list_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_index", list, data);
            }
            return (int)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_last {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_last"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_last(GList *list)
     * }
     */
    public static FunctionDescriptor g_list_last$descriptor() {
        return g_list_last.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_last(GList *list)
     * }
     */
    public static MethodHandle g_list_last$handle() {
        return g_list_last.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_last(GList *list)
     * }
     */
    public static MemorySegment g_list_last(MemorySegment list) {
        var mh$ = g_list_last.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_last", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_first {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_first"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_first(GList *list)
     * }
     */
    public static FunctionDescriptor g_list_first$descriptor() {
        return g_list_first.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_first(GList *list)
     * }
     */
    public static MethodHandle g_list_first$handle() {
        return g_list_first.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_first(GList *list)
     * }
     */
    public static MemorySegment g_list_first(MemorySegment list) {
        var mh$ = g_list_first.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_first", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_list_length(GList *list)
     * }
     */
    public static FunctionDescriptor g_list_length$descriptor() {
        return g_list_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_list_length(GList *list)
     * }
     */
    public static MethodHandle g_list_length$handle() {
        return g_list_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_list_length(GList *list)
     * }
     */
    public static int g_list_length(MemorySegment list) {
        var mh$ = g_list_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_length", list);
            }
            return (int)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_foreach(GList *list, GFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_list_foreach$descriptor() {
        return g_list_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_foreach(GList *list, GFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_list_foreach$handle() {
        return g_list_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_foreach(GList *list, GFunc func, gpointer user_data)
     * }
     */
    public static void g_list_foreach(MemorySegment list, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_list_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_foreach", list, func, user_data);
            }
            mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_sort(GList *list, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_list_sort$descriptor() {
        return g_list_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_sort(GList *list, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_list_sort$handle() {
        return g_list_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_sort(GList *list, GCompareFunc compare_func)
     * }
     */
    public static MemorySegment g_list_sort(MemorySegment list, MemorySegment compare_func) {
        var mh$ = g_list_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_sort", list, compare_func);
            }
            return (MemorySegment)mh$.invokeExact(list, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_sort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_sort_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_list_sort_with_data(GList *list, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_list_sort_with_data$descriptor() {
        return g_list_sort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_list_sort_with_data(GList *list, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_list_sort_with_data$handle() {
        return g_list_sort_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_list_sort_with_data(GList *list, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_list_sort_with_data(MemorySegment list, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_list_sort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_sort_with_data", list, compare_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(list, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_nth_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_nth_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_list_nth_data(GList *list, guint n)
     * }
     */
    public static FunctionDescriptor g_list_nth_data$descriptor() {
        return g_list_nth_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_list_nth_data(GList *list, guint n)
     * }
     */
    public static MethodHandle g_list_nth_data$handle() {
        return g_list_nth_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_list_nth_data(GList *list, guint n)
     * }
     */
    public static MemorySegment g_list_nth_data(MemorySegment list, int n) {
        var mh$ = g_list_nth_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_nth_data", list, n);
            }
            return (MemorySegment)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_clear_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_clear_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_clear_list(GList **list_ptr, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_clear_list$descriptor() {
        return g_clear_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_clear_list(GList **list_ptr, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_clear_list$handle() {
        return g_clear_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_clear_list(GList **list_ptr, GDestroyNotify destroy)
     * }
     */
    public static void g_clear_list(MemorySegment list_ptr, MemorySegment destroy) {
        var mh$ = g_clear_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_clear_list", list_ptr, destroy);
            }
            mh$.invokeExact(list_ptr, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new(GHashFunc hash_func, GEqualFunc key_equal_func)
     * }
     */
    public static FunctionDescriptor g_hash_table_new$descriptor() {
        return g_hash_table_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new(GHashFunc hash_func, GEqualFunc key_equal_func)
     * }
     */
    public static MethodHandle g_hash_table_new$handle() {
        return g_hash_table_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new(GHashFunc hash_func, GEqualFunc key_equal_func)
     * }
     */
    public static MemorySegment g_hash_table_new(MemorySegment hash_func, MemorySegment key_equal_func) {
        var mh$ = g_hash_table_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_new", hash_func, key_equal_func);
            }
            return (MemorySegment)mh$.invokeExact(hash_func, key_equal_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_new_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_new_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new_full(GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func)
     * }
     */
    public static FunctionDescriptor g_hash_table_new_full$descriptor() {
        return g_hash_table_new_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new_full(GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func)
     * }
     */
    public static MethodHandle g_hash_table_new_full$handle() {
        return g_hash_table_new_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new_full(GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func)
     * }
     */
    public static MemorySegment g_hash_table_new_full(MemorySegment hash_func, MemorySegment key_equal_func, MemorySegment key_destroy_func, MemorySegment value_destroy_func) {
        var mh$ = g_hash_table_new_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_new_full", hash_func, key_equal_func, key_destroy_func, value_destroy_func);
            }
            return (MemorySegment)mh$.invokeExact(hash_func, key_equal_func, key_destroy_func, value_destroy_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_new_similar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_new_similar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new_similar(GHashTable *other_hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_new_similar$descriptor() {
        return g_hash_table_new_similar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new_similar(GHashTable *other_hash_table)
     * }
     */
    public static MethodHandle g_hash_table_new_similar$handle() {
        return g_hash_table_new_similar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_new_similar(GHashTable *other_hash_table)
     * }
     */
    public static MemorySegment g_hash_table_new_similar(MemorySegment other_hash_table) {
        var mh$ = g_hash_table_new_similar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_new_similar", other_hash_table);
            }
            return (MemorySegment)mh$.invokeExact(other_hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_destroy(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_destroy$descriptor() {
        return g_hash_table_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_destroy(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_destroy$handle() {
        return g_hash_table_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_destroy(GHashTable *hash_table)
     * }
     */
    public static void g_hash_table_destroy(MemorySegment hash_table) {
        var mh$ = g_hash_table_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_destroy", hash_table);
            }
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_insert(GHashTable *hash_table, gpointer key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_hash_table_insert$descriptor() {
        return g_hash_table_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_insert(GHashTable *hash_table, gpointer key, gpointer value)
     * }
     */
    public static MethodHandle g_hash_table_insert$handle() {
        return g_hash_table_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_insert(GHashTable *hash_table, gpointer key, gpointer value)
     * }
     */
    public static int g_hash_table_insert(MemorySegment hash_table, MemorySegment key, MemorySegment value) {
        var mh$ = g_hash_table_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_insert", hash_table, key, value);
            }
            return (int)mh$.invokeExact(hash_table, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_replace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_replace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_replace(GHashTable *hash_table, gpointer key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_hash_table_replace$descriptor() {
        return g_hash_table_replace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_replace(GHashTable *hash_table, gpointer key, gpointer value)
     * }
     */
    public static MethodHandle g_hash_table_replace$handle() {
        return g_hash_table_replace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_replace(GHashTable *hash_table, gpointer key, gpointer value)
     * }
     */
    public static int g_hash_table_replace(MemorySegment hash_table, MemorySegment key, MemorySegment value) {
        var mh$ = g_hash_table_replace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_replace", hash_table, key, value);
            }
            return (int)mh$.invokeExact(hash_table, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_add(GHashTable *hash_table, gpointer key)
     * }
     */
    public static FunctionDescriptor g_hash_table_add$descriptor() {
        return g_hash_table_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_add(GHashTable *hash_table, gpointer key)
     * }
     */
    public static MethodHandle g_hash_table_add$handle() {
        return g_hash_table_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_add(GHashTable *hash_table, gpointer key)
     * }
     */
    public static int g_hash_table_add(MemorySegment hash_table, MemorySegment key) {
        var mh$ = g_hash_table_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_add", hash_table, key);
            }
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_remove(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_hash_table_remove$descriptor() {
        return g_hash_table_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_remove(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static MethodHandle g_hash_table_remove$handle() {
        return g_hash_table_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_remove(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static int g_hash_table_remove(MemorySegment hash_table, MemorySegment key) {
        var mh$ = g_hash_table_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_remove", hash_table, key);
            }
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_remove_all(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_remove_all$descriptor() {
        return g_hash_table_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_remove_all(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_remove_all$handle() {
        return g_hash_table_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_remove_all(GHashTable *hash_table)
     * }
     */
    public static void g_hash_table_remove_all(MemorySegment hash_table) {
        var mh$ = g_hash_table_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_remove_all", hash_table);
            }
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_steal(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_hash_table_steal$descriptor() {
        return g_hash_table_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_steal(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static MethodHandle g_hash_table_steal$handle() {
        return g_hash_table_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_steal(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static int g_hash_table_steal(MemorySegment hash_table, MemorySegment key) {
        var mh$ = g_hash_table_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_steal", hash_table, key);
            }
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_steal_extended {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_steal_extended"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_steal_extended(GHashTable *hash_table, gconstpointer lookup_key, gpointer *stolen_key, gpointer *stolen_value)
     * }
     */
    public static FunctionDescriptor g_hash_table_steal_extended$descriptor() {
        return g_hash_table_steal_extended.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_steal_extended(GHashTable *hash_table, gconstpointer lookup_key, gpointer *stolen_key, gpointer *stolen_value)
     * }
     */
    public static MethodHandle g_hash_table_steal_extended$handle() {
        return g_hash_table_steal_extended.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_steal_extended(GHashTable *hash_table, gconstpointer lookup_key, gpointer *stolen_key, gpointer *stolen_value)
     * }
     */
    public static int g_hash_table_steal_extended(MemorySegment hash_table, MemorySegment lookup_key, MemorySegment stolen_key, MemorySegment stolen_value) {
        var mh$ = g_hash_table_steal_extended.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_steal_extended", hash_table, lookup_key, stolen_key, stolen_value);
            }
            return (int)mh$.invokeExact(hash_table, lookup_key, stolen_key, stolen_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_steal_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_steal_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_steal_all(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_steal_all$descriptor() {
        return g_hash_table_steal_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_steal_all(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_steal_all$handle() {
        return g_hash_table_steal_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_steal_all(GHashTable *hash_table)
     * }
     */
    public static void g_hash_table_steal_all(MemorySegment hash_table) {
        var mh$ = g_hash_table_steal_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_steal_all", hash_table);
            }
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_steal_all_keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_steal_all_keys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_steal_all_keys(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_steal_all_keys$descriptor() {
        return g_hash_table_steal_all_keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_steal_all_keys(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_steal_all_keys$handle() {
        return g_hash_table_steal_all_keys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_steal_all_keys(GHashTable *hash_table)
     * }
     */
    public static MemorySegment g_hash_table_steal_all_keys(MemorySegment hash_table) {
        var mh$ = g_hash_table_steal_all_keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_steal_all_keys", hash_table);
            }
            return (MemorySegment)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_steal_all_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_steal_all_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_steal_all_values(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_steal_all_values$descriptor() {
        return g_hash_table_steal_all_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_steal_all_values(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_steal_all_values$handle() {
        return g_hash_table_steal_all_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_steal_all_values(GHashTable *hash_table)
     * }
     */
    public static MemorySegment g_hash_table_steal_all_values(MemorySegment hash_table) {
        var mh$ = g_hash_table_steal_all_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_steal_all_values", hash_table);
            }
            return (MemorySegment)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_hash_table_lookup(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_hash_table_lookup$descriptor() {
        return g_hash_table_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_hash_table_lookup(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static MethodHandle g_hash_table_lookup$handle() {
        return g_hash_table_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_hash_table_lookup(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static MemorySegment g_hash_table_lookup(MemorySegment hash_table, MemorySegment key) {
        var mh$ = g_hash_table_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_lookup", hash_table, key);
            }
            return (MemorySegment)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_contains {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_contains"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_contains(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_hash_table_contains$descriptor() {
        return g_hash_table_contains.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_contains(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static MethodHandle g_hash_table_contains$handle() {
        return g_hash_table_contains.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_contains(GHashTable *hash_table, gconstpointer key)
     * }
     */
    public static int g_hash_table_contains(MemorySegment hash_table, MemorySegment key) {
        var mh$ = g_hash_table_contains.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_contains", hash_table, key);
            }
            return (int)mh$.invokeExact(hash_table, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_lookup_extended {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_lookup_extended"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_lookup_extended(GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value)
     * }
     */
    public static FunctionDescriptor g_hash_table_lookup_extended$descriptor() {
        return g_hash_table_lookup_extended.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_lookup_extended(GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value)
     * }
     */
    public static MethodHandle g_hash_table_lookup_extended$handle() {
        return g_hash_table_lookup_extended.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_lookup_extended(GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value)
     * }
     */
    public static int g_hash_table_lookup_extended(MemorySegment hash_table, MemorySegment lookup_key, MemorySegment orig_key, MemorySegment value) {
        var mh$ = g_hash_table_lookup_extended.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_lookup_extended", hash_table, lookup_key, orig_key, value);
            }
            return (int)mh$.invokeExact(hash_table, lookup_key, orig_key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_foreach(GHashTable *hash_table, GHFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_hash_table_foreach$descriptor() {
        return g_hash_table_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_foreach(GHashTable *hash_table, GHFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_hash_table_foreach$handle() {
        return g_hash_table_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_foreach(GHashTable *hash_table, GHFunc func, gpointer user_data)
     * }
     */
    public static void g_hash_table_foreach(MemorySegment hash_table, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_hash_table_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_foreach", hash_table, func, user_data);
            }
            mh$.invokeExact(hash_table, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_hash_table_find(GHashTable *hash_table, GHRFunc predicate, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_hash_table_find$descriptor() {
        return g_hash_table_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_hash_table_find(GHashTable *hash_table, GHRFunc predicate, gpointer user_data)
     * }
     */
    public static MethodHandle g_hash_table_find$handle() {
        return g_hash_table_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_hash_table_find(GHashTable *hash_table, GHRFunc predicate, gpointer user_data)
     * }
     */
    public static MemorySegment g_hash_table_find(MemorySegment hash_table, MemorySegment predicate, MemorySegment user_data) {
        var mh$ = g_hash_table_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_find", hash_table, predicate, user_data);
            }
            return (MemorySegment)mh$.invokeExact(hash_table, predicate, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_foreach_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_foreach_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_hash_table_foreach_remove(GHashTable *hash_table, GHRFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_hash_table_foreach_remove$descriptor() {
        return g_hash_table_foreach_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_hash_table_foreach_remove(GHashTable *hash_table, GHRFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_hash_table_foreach_remove$handle() {
        return g_hash_table_foreach_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_hash_table_foreach_remove(GHashTable *hash_table, GHRFunc func, gpointer user_data)
     * }
     */
    public static int g_hash_table_foreach_remove(MemorySegment hash_table, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_hash_table_foreach_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_foreach_remove", hash_table, func, user_data);
            }
            return (int)mh$.invokeExact(hash_table, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_foreach_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_foreach_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_hash_table_foreach_steal(GHashTable *hash_table, GHRFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_hash_table_foreach_steal$descriptor() {
        return g_hash_table_foreach_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_hash_table_foreach_steal(GHashTable *hash_table, GHRFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_hash_table_foreach_steal$handle() {
        return g_hash_table_foreach_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_hash_table_foreach_steal(GHashTable *hash_table, GHRFunc func, gpointer user_data)
     * }
     */
    public static int g_hash_table_foreach_steal(MemorySegment hash_table, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_hash_table_foreach_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_foreach_steal", hash_table, func, user_data);
            }
            return (int)mh$.invokeExact(hash_table, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_hash_table_size(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_size$descriptor() {
        return g_hash_table_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_hash_table_size(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_size$handle() {
        return g_hash_table_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_hash_table_size(GHashTable *hash_table)
     * }
     */
    public static int g_hash_table_size(MemorySegment hash_table) {
        var mh$ = g_hash_table_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_size", hash_table);
            }
            return (int)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_get_keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_get_keys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_hash_table_get_keys(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_get_keys$descriptor() {
        return g_hash_table_get_keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_hash_table_get_keys(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_get_keys$handle() {
        return g_hash_table_get_keys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_hash_table_get_keys(GHashTable *hash_table)
     * }
     */
    public static MemorySegment g_hash_table_get_keys(MemorySegment hash_table) {
        var mh$ = g_hash_table_get_keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_get_keys", hash_table);
            }
            return (MemorySegment)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_get_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_get_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_hash_table_get_values(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_get_values$descriptor() {
        return g_hash_table_get_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_hash_table_get_values(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_get_values$handle() {
        return g_hash_table_get_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_hash_table_get_values(GHashTable *hash_table)
     * }
     */
    public static MemorySegment g_hash_table_get_values(MemorySegment hash_table) {
        var mh$ = g_hash_table_get_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_get_values", hash_table);
            }
            return (MemorySegment)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_get_keys_as_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_get_keys_as_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer *g_hash_table_get_keys_as_array(GHashTable *hash_table, guint *length)
     * }
     */
    public static FunctionDescriptor g_hash_table_get_keys_as_array$descriptor() {
        return g_hash_table_get_keys_as_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer *g_hash_table_get_keys_as_array(GHashTable *hash_table, guint *length)
     * }
     */
    public static MethodHandle g_hash_table_get_keys_as_array$handle() {
        return g_hash_table_get_keys_as_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer *g_hash_table_get_keys_as_array(GHashTable *hash_table, guint *length)
     * }
     */
    public static MemorySegment g_hash_table_get_keys_as_array(MemorySegment hash_table, MemorySegment length) {
        var mh$ = g_hash_table_get_keys_as_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_get_keys_as_array", hash_table, length);
            }
            return (MemorySegment)mh$.invokeExact(hash_table, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_get_keys_as_ptr_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_get_keys_as_ptr_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_get_keys_as_ptr_array(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_get_keys_as_ptr_array$descriptor() {
        return g_hash_table_get_keys_as_ptr_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_get_keys_as_ptr_array(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_get_keys_as_ptr_array$handle() {
        return g_hash_table_get_keys_as_ptr_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_get_keys_as_ptr_array(GHashTable *hash_table)
     * }
     */
    public static MemorySegment g_hash_table_get_keys_as_ptr_array(MemorySegment hash_table) {
        var mh$ = g_hash_table_get_keys_as_ptr_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_get_keys_as_ptr_array", hash_table);
            }
            return (MemorySegment)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_get_values_as_ptr_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_get_values_as_ptr_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_get_values_as_ptr_array(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_get_values_as_ptr_array$descriptor() {
        return g_hash_table_get_values_as_ptr_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_get_values_as_ptr_array(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_get_values_as_ptr_array$handle() {
        return g_hash_table_get_values_as_ptr_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_hash_table_get_values_as_ptr_array(GHashTable *hash_table)
     * }
     */
    public static MemorySegment g_hash_table_get_values_as_ptr_array(MemorySegment hash_table) {
        var mh$ = g_hash_table_get_values_as_ptr_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_get_values_as_ptr_array", hash_table);
            }
            return (MemorySegment)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_iter_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_iter_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_init(GHashTableIter *iter, GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_iter_init$descriptor() {
        return g_hash_table_iter_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_init(GHashTableIter *iter, GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_iter_init$handle() {
        return g_hash_table_iter_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_iter_init(GHashTableIter *iter, GHashTable *hash_table)
     * }
     */
    public static void g_hash_table_iter_init(MemorySegment iter, MemorySegment hash_table) {
        var mh$ = g_hash_table_iter_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_iter_init", iter, hash_table);
            }
            mh$.invokeExact(iter, hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_iter_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_iter_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_iter_next(GHashTableIter *iter, gpointer *key, gpointer *value)
     * }
     */
    public static FunctionDescriptor g_hash_table_iter_next$descriptor() {
        return g_hash_table_iter_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hash_table_iter_next(GHashTableIter *iter, gpointer *key, gpointer *value)
     * }
     */
    public static MethodHandle g_hash_table_iter_next$handle() {
        return g_hash_table_iter_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hash_table_iter_next(GHashTableIter *iter, gpointer *key, gpointer *value)
     * }
     */
    public static int g_hash_table_iter_next(MemorySegment iter, MemorySegment key, MemorySegment value) {
        var mh$ = g_hash_table_iter_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_iter_next", iter, key, value);
            }
            return (int)mh$.invokeExact(iter, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_iter_get_hash_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_iter_get_hash_table"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_iter_get_hash_table(GHashTableIter *iter)
     * }
     */
    public static FunctionDescriptor g_hash_table_iter_get_hash_table$descriptor() {
        return g_hash_table_iter_get_hash_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_iter_get_hash_table(GHashTableIter *iter)
     * }
     */
    public static MethodHandle g_hash_table_iter_get_hash_table$handle() {
        return g_hash_table_iter_get_hash_table.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_iter_get_hash_table(GHashTableIter *iter)
     * }
     */
    public static MemorySegment g_hash_table_iter_get_hash_table(MemorySegment iter) {
        var mh$ = g_hash_table_iter_get_hash_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_iter_get_hash_table", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_iter_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_iter_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_remove(GHashTableIter *iter)
     * }
     */
    public static FunctionDescriptor g_hash_table_iter_remove$descriptor() {
        return g_hash_table_iter_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_remove(GHashTableIter *iter)
     * }
     */
    public static MethodHandle g_hash_table_iter_remove$handle() {
        return g_hash_table_iter_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_iter_remove(GHashTableIter *iter)
     * }
     */
    public static void g_hash_table_iter_remove(MemorySegment iter) {
        var mh$ = g_hash_table_iter_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_iter_remove", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_iter_replace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_iter_replace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_replace(GHashTableIter *iter, gpointer value)
     * }
     */
    public static FunctionDescriptor g_hash_table_iter_replace$descriptor() {
        return g_hash_table_iter_replace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_replace(GHashTableIter *iter, gpointer value)
     * }
     */
    public static MethodHandle g_hash_table_iter_replace$handle() {
        return g_hash_table_iter_replace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_iter_replace(GHashTableIter *iter, gpointer value)
     * }
     */
    public static void g_hash_table_iter_replace(MemorySegment iter, MemorySegment value) {
        var mh$ = g_hash_table_iter_replace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_iter_replace", iter, value);
            }
            mh$.invokeExact(iter, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_iter_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_iter_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_steal(GHashTableIter *iter)
     * }
     */
    public static FunctionDescriptor g_hash_table_iter_steal$descriptor() {
        return g_hash_table_iter_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_iter_steal(GHashTableIter *iter)
     * }
     */
    public static MethodHandle g_hash_table_iter_steal$handle() {
        return g_hash_table_iter_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_iter_steal(GHashTableIter *iter)
     * }
     */
    public static void g_hash_table_iter_steal(MemorySegment iter) {
        var mh$ = g_hash_table_iter_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_iter_steal", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_ref(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_ref$descriptor() {
        return g_hash_table_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_ref(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_ref$handle() {
        return g_hash_table_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHashTable *g_hash_table_ref(GHashTable *hash_table)
     * }
     */
    public static MemorySegment g_hash_table_ref(MemorySegment hash_table) {
        var mh$ = g_hash_table_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_ref", hash_table);
            }
            return (MemorySegment)mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hash_table_unref(GHashTable *hash_table)
     * }
     */
    public static FunctionDescriptor g_hash_table_unref$descriptor() {
        return g_hash_table_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hash_table_unref(GHashTable *hash_table)
     * }
     */
    public static MethodHandle g_hash_table_unref$handle() {
        return g_hash_table_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hash_table_unref(GHashTable *hash_table)
     * }
     */
    public static void g_hash_table_unref(MemorySegment hash_table) {
        var mh$ = g_hash_table_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_unref", hash_table);
            }
            mh$.invokeExact(hash_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_str_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static FunctionDescriptor g_str_equal$descriptor() {
        return g_str_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_str_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static MethodHandle g_str_equal$handle() {
        return g_str_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_str_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static int g_str_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = g_str_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_equal", v1, v2);
            }
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_str_hash(gconstpointer v)
     * }
     */
    public static FunctionDescriptor g_str_hash$descriptor() {
        return g_str_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_str_hash(gconstpointer v)
     * }
     */
    public static MethodHandle g_str_hash$handle() {
        return g_str_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_str_hash(gconstpointer v)
     * }
     */
    public static int g_str_hash(MemorySegment v) {
        var mh$ = g_str_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_hash", v);
            }
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_int_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_int_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_int_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static FunctionDescriptor g_int_equal$descriptor() {
        return g_int_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_int_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static MethodHandle g_int_equal$handle() {
        return g_int_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_int_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static int g_int_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = g_int_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_int_equal", v1, v2);
            }
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_int_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_int_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_int_hash(gconstpointer v)
     * }
     */
    public static FunctionDescriptor g_int_hash$descriptor() {
        return g_int_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_int_hash(gconstpointer v)
     * }
     */
    public static MethodHandle g_int_hash$handle() {
        return g_int_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_int_hash(gconstpointer v)
     * }
     */
    public static int g_int_hash(MemorySegment v) {
        var mh$ = g_int_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_int_hash", v);
            }
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_int64_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_int64_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_int64_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static FunctionDescriptor g_int64_equal$descriptor() {
        return g_int64_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_int64_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static MethodHandle g_int64_equal$handle() {
        return g_int64_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_int64_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static int g_int64_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = g_int64_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_int64_equal", v1, v2);
            }
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_int64_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_int64_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_int64_hash(gconstpointer v)
     * }
     */
    public static FunctionDescriptor g_int64_hash$descriptor() {
        return g_int64_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_int64_hash(gconstpointer v)
     * }
     */
    public static MethodHandle g_int64_hash$handle() {
        return g_int64_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_int64_hash(gconstpointer v)
     * }
     */
    public static int g_int64_hash(MemorySegment v) {
        var mh$ = g_int64_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_int64_hash", v);
            }
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_double_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_double_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_double_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static FunctionDescriptor g_double_equal$descriptor() {
        return g_double_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_double_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static MethodHandle g_double_equal$handle() {
        return g_double_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_double_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static int g_double_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = g_double_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_double_equal", v1, v2);
            }
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_double_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_double_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_double_hash(gconstpointer v)
     * }
     */
    public static FunctionDescriptor g_double_hash$descriptor() {
        return g_double_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_double_hash(gconstpointer v)
     * }
     */
    public static MethodHandle g_double_hash$handle() {
        return g_double_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_double_hash(gconstpointer v)
     * }
     */
    public static int g_double_hash(MemorySegment v) {
        var mh$ = g_double_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_double_hash", v);
            }
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_direct_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_direct_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_direct_hash(gconstpointer v)
     * }
     */
    public static FunctionDescriptor g_direct_hash$descriptor() {
        return g_direct_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_direct_hash(gconstpointer v)
     * }
     */
    public static MethodHandle g_direct_hash$handle() {
        return g_direct_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_direct_hash(gconstpointer v)
     * }
     */
    public static int g_direct_hash(MemorySegment v) {
        var mh$ = g_direct_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_direct_hash", v);
            }
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_direct_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_direct_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_direct_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static FunctionDescriptor g_direct_equal$descriptor() {
        return g_direct_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_direct_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static MethodHandle g_direct_equal$handle() {
        return g_direct_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_direct_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static int g_direct_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = g_direct_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_direct_equal", v1, v2);
            }
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hmac_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hmac_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHmac *g_hmac_new(GChecksumType digest_type, const guchar *key, gsize key_len)
     * }
     */
    public static FunctionDescriptor g_hmac_new$descriptor() {
        return g_hmac_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHmac *g_hmac_new(GChecksumType digest_type, const guchar *key, gsize key_len)
     * }
     */
    public static MethodHandle g_hmac_new$handle() {
        return g_hmac_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHmac *g_hmac_new(GChecksumType digest_type, const guchar *key, gsize key_len)
     * }
     */
    public static MemorySegment g_hmac_new(int digest_type, MemorySegment key, long key_len) {
        var mh$ = g_hmac_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hmac_new", digest_type, key, key_len);
            }
            return (MemorySegment)mh$.invokeExact(digest_type, key, key_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hmac_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hmac_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHmac *g_hmac_copy(const GHmac *hmac)
     * }
     */
    public static FunctionDescriptor g_hmac_copy$descriptor() {
        return g_hmac_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHmac *g_hmac_copy(const GHmac *hmac)
     * }
     */
    public static MethodHandle g_hmac_copy$handle() {
        return g_hmac_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHmac *g_hmac_copy(const GHmac *hmac)
     * }
     */
    public static MemorySegment g_hmac_copy(MemorySegment hmac) {
        var mh$ = g_hmac_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hmac_copy", hmac);
            }
            return (MemorySegment)mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hmac_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hmac_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHmac *g_hmac_ref(GHmac *hmac)
     * }
     */
    public static FunctionDescriptor g_hmac_ref$descriptor() {
        return g_hmac_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHmac *g_hmac_ref(GHmac *hmac)
     * }
     */
    public static MethodHandle g_hmac_ref$handle() {
        return g_hmac_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHmac *g_hmac_ref(GHmac *hmac)
     * }
     */
    public static MemorySegment g_hmac_ref(MemorySegment hmac) {
        var mh$ = g_hmac_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hmac_ref", hmac);
            }
            return (MemorySegment)mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hmac_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hmac_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hmac_unref(GHmac *hmac)
     * }
     */
    public static FunctionDescriptor g_hmac_unref$descriptor() {
        return g_hmac_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hmac_unref(GHmac *hmac)
     * }
     */
    public static MethodHandle g_hmac_unref$handle() {
        return g_hmac_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hmac_unref(GHmac *hmac)
     * }
     */
    public static void g_hmac_unref(MemorySegment hmac) {
        var mh$ = g_hmac_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hmac_unref", hmac);
            }
            mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hmac_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hmac_update"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hmac_update(GHmac *hmac, const guchar *data, gssize length)
     * }
     */
    public static FunctionDescriptor g_hmac_update$descriptor() {
        return g_hmac_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hmac_update(GHmac *hmac, const guchar *data, gssize length)
     * }
     */
    public static MethodHandle g_hmac_update$handle() {
        return g_hmac_update.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hmac_update(GHmac *hmac, const guchar *data, gssize length)
     * }
     */
    public static void g_hmac_update(MemorySegment hmac, MemorySegment data, long length) {
        var mh$ = g_hmac_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hmac_update", hmac, data, length);
            }
            mh$.invokeExact(hmac, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hmac_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hmac_get_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_hmac_get_string(GHmac *hmac)
     * }
     */
    public static FunctionDescriptor g_hmac_get_string$descriptor() {
        return g_hmac_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_hmac_get_string(GHmac *hmac)
     * }
     */
    public static MethodHandle g_hmac_get_string$handle() {
        return g_hmac_get_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_hmac_get_string(GHmac *hmac)
     * }
     */
    public static MemorySegment g_hmac_get_string(MemorySegment hmac) {
        var mh$ = g_hmac_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hmac_get_string", hmac);
            }
            return (MemorySegment)mh$.invokeExact(hmac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hmac_get_digest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hmac_get_digest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hmac_get_digest(GHmac *hmac, guint8 *buffer, gsize *digest_len)
     * }
     */
    public static FunctionDescriptor g_hmac_get_digest$descriptor() {
        return g_hmac_get_digest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hmac_get_digest(GHmac *hmac, guint8 *buffer, gsize *digest_len)
     * }
     */
    public static MethodHandle g_hmac_get_digest$handle() {
        return g_hmac_get_digest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hmac_get_digest(GHmac *hmac, guint8 *buffer, gsize *digest_len)
     * }
     */
    public static void g_hmac_get_digest(MemorySegment hmac, MemorySegment buffer, MemorySegment digest_len) {
        var mh$ = g_hmac_get_digest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hmac_get_digest", hmac, buffer, digest_len);
            }
            mh$.invokeExact(hmac, buffer, digest_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_compute_hmac_for_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_compute_hmac_for_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_data(GChecksumType digest_type, const guchar *key, gsize key_len, const guchar *data, gsize length)
     * }
     */
    public static FunctionDescriptor g_compute_hmac_for_data$descriptor() {
        return g_compute_hmac_for_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_data(GChecksumType digest_type, const guchar *key, gsize key_len, const guchar *data, gsize length)
     * }
     */
    public static MethodHandle g_compute_hmac_for_data$handle() {
        return g_compute_hmac_for_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_data(GChecksumType digest_type, const guchar *key, gsize key_len, const guchar *data, gsize length)
     * }
     */
    public static MemorySegment g_compute_hmac_for_data(int digest_type, MemorySegment key, long key_len, MemorySegment data, long length) {
        var mh$ = g_compute_hmac_for_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_compute_hmac_for_data", digest_type, key, key_len, data, length);
            }
            return (MemorySegment)mh$.invokeExact(digest_type, key, key_len, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_compute_hmac_for_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_compute_hmac_for_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_string(GChecksumType digest_type, const guchar *key, gsize key_len, const gchar *str, gssize length)
     * }
     */
    public static FunctionDescriptor g_compute_hmac_for_string$descriptor() {
        return g_compute_hmac_for_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_string(GChecksumType digest_type, const guchar *key, gsize key_len, const gchar *str, gssize length)
     * }
     */
    public static MethodHandle g_compute_hmac_for_string$handle() {
        return g_compute_hmac_for_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_string(GChecksumType digest_type, const guchar *key, gsize key_len, const gchar *str, gssize length)
     * }
     */
    public static MemorySegment g_compute_hmac_for_string(int digest_type, MemorySegment key, long key_len, MemorySegment str, long length) {
        var mh$ = g_compute_hmac_for_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_compute_hmac_for_string", digest_type, key, key_len, str, length);
            }
            return (MemorySegment)mh$.invokeExact(digest_type, key, key_len, str, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_compute_hmac_for_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_compute_hmac_for_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_bytes(GChecksumType digest_type, GBytes *key, GBytes *data)
     * }
     */
    public static FunctionDescriptor g_compute_hmac_for_bytes$descriptor() {
        return g_compute_hmac_for_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_bytes(GChecksumType digest_type, GBytes *key, GBytes *data)
     * }
     */
    public static MethodHandle g_compute_hmac_for_bytes$handle() {
        return g_compute_hmac_for_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_compute_hmac_for_bytes(GChecksumType digest_type, GBytes *key, GBytes *data)
     * }
     */
    public static MemorySegment g_compute_hmac_for_bytes(int digest_type, MemorySegment key, MemorySegment data) {
        var mh$ = g_compute_hmac_for_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_compute_hmac_for_bytes", digest_type, key, data);
            }
            return (MemorySegment)mh$.invokeExact(digest_type, key, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_HOOK_FLAG_ACTIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_HOOK_FLAG_ACTIVE = 1
     * }
     */
    public static int G_HOOK_FLAG_ACTIVE() {
        return G_HOOK_FLAG_ACTIVE;
    }
    private static final int G_HOOK_FLAG_IN_CALL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_HOOK_FLAG_IN_CALL = 2
     * }
     */
    public static int G_HOOK_FLAG_IN_CALL() {
        return G_HOOK_FLAG_IN_CALL;
    }
    private static final int G_HOOK_FLAG_MASK = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_HOOK_FLAG_MASK = 15
     * }
     */
    public static int G_HOOK_FLAG_MASK() {
        return G_HOOK_FLAG_MASK;
    }

    private static class g_hook_list_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_list_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_list_init(GHookList *hook_list, guint hook_size)
     * }
     */
    public static FunctionDescriptor g_hook_list_init$descriptor() {
        return g_hook_list_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_list_init(GHookList *hook_list, guint hook_size)
     * }
     */
    public static MethodHandle g_hook_list_init$handle() {
        return g_hook_list_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_list_init(GHookList *hook_list, guint hook_size)
     * }
     */
    public static void g_hook_list_init(MemorySegment hook_list, int hook_size) {
        var mh$ = g_hook_list_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_list_init", hook_list, hook_size);
            }
            mh$.invokeExact(hook_list, hook_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_list_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_list_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_list_clear(GHookList *hook_list)
     * }
     */
    public static FunctionDescriptor g_hook_list_clear$descriptor() {
        return g_hook_list_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_list_clear(GHookList *hook_list)
     * }
     */
    public static MethodHandle g_hook_list_clear$handle() {
        return g_hook_list_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_list_clear(GHookList *hook_list)
     * }
     */
    public static void g_hook_list_clear(MemorySegment hook_list) {
        var mh$ = g_hook_list_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_list_clear", hook_list);
            }
            mh$.invokeExact(hook_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_alloc(GHookList *hook_list)
     * }
     */
    public static FunctionDescriptor g_hook_alloc$descriptor() {
        return g_hook_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_alloc(GHookList *hook_list)
     * }
     */
    public static MethodHandle g_hook_alloc$handle() {
        return g_hook_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_alloc(GHookList *hook_list)
     * }
     */
    public static MemorySegment g_hook_alloc(MemorySegment hook_list) {
        var mh$ = g_hook_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_alloc", hook_list);
            }
            return (MemorySegment)mh$.invokeExact(hook_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_free(GHookList *hook_list, GHook *hook)
     * }
     */
    public static FunctionDescriptor g_hook_free$descriptor() {
        return g_hook_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_free(GHookList *hook_list, GHook *hook)
     * }
     */
    public static MethodHandle g_hook_free$handle() {
        return g_hook_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_free(GHookList *hook_list, GHook *hook)
     * }
     */
    public static void g_hook_free(MemorySegment hook_list, MemorySegment hook) {
        var mh$ = g_hook_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_free", hook_list, hook);
            }
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_ref(GHookList *hook_list, GHook *hook)
     * }
     */
    public static FunctionDescriptor g_hook_ref$descriptor() {
        return g_hook_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_ref(GHookList *hook_list, GHook *hook)
     * }
     */
    public static MethodHandle g_hook_ref$handle() {
        return g_hook_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_ref(GHookList *hook_list, GHook *hook)
     * }
     */
    public static MemorySegment g_hook_ref(MemorySegment hook_list, MemorySegment hook) {
        var mh$ = g_hook_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_ref", hook_list, hook);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_unref(GHookList *hook_list, GHook *hook)
     * }
     */
    public static FunctionDescriptor g_hook_unref$descriptor() {
        return g_hook_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_unref(GHookList *hook_list, GHook *hook)
     * }
     */
    public static MethodHandle g_hook_unref$handle() {
        return g_hook_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_unref(GHookList *hook_list, GHook *hook)
     * }
     */
    public static void g_hook_unref(MemorySegment hook_list, MemorySegment hook) {
        var mh$ = g_hook_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_unref", hook_list, hook);
            }
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hook_destroy(GHookList *hook_list, gulong hook_id)
     * }
     */
    public static FunctionDescriptor g_hook_destroy$descriptor() {
        return g_hook_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hook_destroy(GHookList *hook_list, gulong hook_id)
     * }
     */
    public static MethodHandle g_hook_destroy$handle() {
        return g_hook_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hook_destroy(GHookList *hook_list, gulong hook_id)
     * }
     */
    public static int g_hook_destroy(MemorySegment hook_list, long hook_id) {
        var mh$ = g_hook_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_destroy", hook_list, hook_id);
            }
            return (int)mh$.invokeExact(hook_list, hook_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_destroy_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_destroy_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_destroy_link(GHookList *hook_list, GHook *hook)
     * }
     */
    public static FunctionDescriptor g_hook_destroy_link$descriptor() {
        return g_hook_destroy_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_destroy_link(GHookList *hook_list, GHook *hook)
     * }
     */
    public static MethodHandle g_hook_destroy_link$handle() {
        return g_hook_destroy_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_destroy_link(GHookList *hook_list, GHook *hook)
     * }
     */
    public static void g_hook_destroy_link(MemorySegment hook_list, MemorySegment hook) {
        var mh$ = g_hook_destroy_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_destroy_link", hook_list, hook);
            }
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_prepend(GHookList *hook_list, GHook *hook)
     * }
     */
    public static FunctionDescriptor g_hook_prepend$descriptor() {
        return g_hook_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_prepend(GHookList *hook_list, GHook *hook)
     * }
     */
    public static MethodHandle g_hook_prepend$handle() {
        return g_hook_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_prepend(GHookList *hook_list, GHook *hook)
     * }
     */
    public static void g_hook_prepend(MemorySegment hook_list, MemorySegment hook) {
        var mh$ = g_hook_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_prepend", hook_list, hook);
            }
            mh$.invokeExact(hook_list, hook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_insert_before(GHookList *hook_list, GHook *sibling, GHook *hook)
     * }
     */
    public static FunctionDescriptor g_hook_insert_before$descriptor() {
        return g_hook_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_insert_before(GHookList *hook_list, GHook *sibling, GHook *hook)
     * }
     */
    public static MethodHandle g_hook_insert_before$handle() {
        return g_hook_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_insert_before(GHookList *hook_list, GHook *sibling, GHook *hook)
     * }
     */
    public static void g_hook_insert_before(MemorySegment hook_list, MemorySegment sibling, MemorySegment hook) {
        var mh$ = g_hook_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_insert_before", hook_list, sibling, hook);
            }
            mh$.invokeExact(hook_list, sibling, hook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_insert_sorted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_insert_sorted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_insert_sorted(GHookList *hook_list, GHook *hook, GHookCompareFunc func)
     * }
     */
    public static FunctionDescriptor g_hook_insert_sorted$descriptor() {
        return g_hook_insert_sorted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_insert_sorted(GHookList *hook_list, GHook *hook, GHookCompareFunc func)
     * }
     */
    public static MethodHandle g_hook_insert_sorted$handle() {
        return g_hook_insert_sorted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_insert_sorted(GHookList *hook_list, GHook *hook, GHookCompareFunc func)
     * }
     */
    public static void g_hook_insert_sorted(MemorySegment hook_list, MemorySegment hook, MemorySegment func) {
        var mh$ = g_hook_insert_sorted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_insert_sorted", hook_list, hook, func);
            }
            mh$.invokeExact(hook_list, hook, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_get(GHookList *hook_list, gulong hook_id)
     * }
     */
    public static FunctionDescriptor g_hook_get$descriptor() {
        return g_hook_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_get(GHookList *hook_list, gulong hook_id)
     * }
     */
    public static MethodHandle g_hook_get$handle() {
        return g_hook_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_get(GHookList *hook_list, gulong hook_id)
     * }
     */
    public static MemorySegment g_hook_get(MemorySegment hook_list, long hook_id) {
        var mh$ = g_hook_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_get", hook_list, hook_id);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, hook_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find(GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_hook_find$descriptor() {
        return g_hook_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find(GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data)
     * }
     */
    public static MethodHandle g_hook_find$handle() {
        return g_hook_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_find(GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data)
     * }
     */
    public static MemorySegment g_hook_find(MemorySegment hook_list, int need_valids, MemorySegment func, MemorySegment data) {
        var mh$ = g_hook_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_find", hook_list, need_valids, func, data);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, need_valids, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_find_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_find_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find_data(GHookList *hook_list, gboolean need_valids, gpointer data)
     * }
     */
    public static FunctionDescriptor g_hook_find_data$descriptor() {
        return g_hook_find_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find_data(GHookList *hook_list, gboolean need_valids, gpointer data)
     * }
     */
    public static MethodHandle g_hook_find_data$handle() {
        return g_hook_find_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_find_data(GHookList *hook_list, gboolean need_valids, gpointer data)
     * }
     */
    public static MemorySegment g_hook_find_data(MemorySegment hook_list, int need_valids, MemorySegment data) {
        var mh$ = g_hook_find_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_find_data", hook_list, need_valids, data);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, need_valids, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_find_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_find_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find_func(GHookList *hook_list, gboolean need_valids, gpointer func)
     * }
     */
    public static FunctionDescriptor g_hook_find_func$descriptor() {
        return g_hook_find_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find_func(GHookList *hook_list, gboolean need_valids, gpointer func)
     * }
     */
    public static MethodHandle g_hook_find_func$handle() {
        return g_hook_find_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_find_func(GHookList *hook_list, gboolean need_valids, gpointer func)
     * }
     */
    public static MemorySegment g_hook_find_func(MemorySegment hook_list, int need_valids, MemorySegment func) {
        var mh$ = g_hook_find_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_find_func", hook_list, need_valids, func);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, need_valids, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_find_func_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_find_func_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find_func_data(GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_hook_find_func_data$descriptor() {
        return g_hook_find_func_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_find_func_data(GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data)
     * }
     */
    public static MethodHandle g_hook_find_func_data$handle() {
        return g_hook_find_func_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_find_func_data(GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data)
     * }
     */
    public static MemorySegment g_hook_find_func_data(MemorySegment hook_list, int need_valids, MemorySegment func, MemorySegment data) {
        var mh$ = g_hook_find_func_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_find_func_data", hook_list, need_valids, func, data);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, need_valids, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_first_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_first_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_first_valid(GHookList *hook_list, gboolean may_be_in_call)
     * }
     */
    public static FunctionDescriptor g_hook_first_valid$descriptor() {
        return g_hook_first_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_first_valid(GHookList *hook_list, gboolean may_be_in_call)
     * }
     */
    public static MethodHandle g_hook_first_valid$handle() {
        return g_hook_first_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_first_valid(GHookList *hook_list, gboolean may_be_in_call)
     * }
     */
    public static MemorySegment g_hook_first_valid(MemorySegment hook_list, int may_be_in_call) {
        var mh$ = g_hook_first_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_first_valid", hook_list, may_be_in_call);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, may_be_in_call);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_next_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_next_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHook *g_hook_next_valid(GHookList *hook_list, GHook *hook, gboolean may_be_in_call)
     * }
     */
    public static FunctionDescriptor g_hook_next_valid$descriptor() {
        return g_hook_next_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHook *g_hook_next_valid(GHookList *hook_list, GHook *hook, gboolean may_be_in_call)
     * }
     */
    public static MethodHandle g_hook_next_valid$handle() {
        return g_hook_next_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHook *g_hook_next_valid(GHookList *hook_list, GHook *hook, gboolean may_be_in_call)
     * }
     */
    public static MemorySegment g_hook_next_valid(MemorySegment hook_list, MemorySegment hook, int may_be_in_call) {
        var mh$ = g_hook_next_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_next_valid", hook_list, hook, may_be_in_call);
            }
            return (MemorySegment)mh$.invokeExact(hook_list, hook, may_be_in_call);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_compare_ids {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_compare_ids"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_hook_compare_ids(GHook *new_hook, GHook *sibling)
     * }
     */
    public static FunctionDescriptor g_hook_compare_ids$descriptor() {
        return g_hook_compare_ids.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_hook_compare_ids(GHook *new_hook, GHook *sibling)
     * }
     */
    public static MethodHandle g_hook_compare_ids$handle() {
        return g_hook_compare_ids.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_hook_compare_ids(GHook *new_hook, GHook *sibling)
     * }
     */
    public static int g_hook_compare_ids(MemorySegment new_hook, MemorySegment sibling) {
        var mh$ = g_hook_compare_ids.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_compare_ids", new_hook, sibling);
            }
            return (int)mh$.invokeExact(new_hook, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_list_invoke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_list_invoke"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_list_invoke(GHookList *hook_list, gboolean may_recurse)
     * }
     */
    public static FunctionDescriptor g_hook_list_invoke$descriptor() {
        return g_hook_list_invoke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_list_invoke(GHookList *hook_list, gboolean may_recurse)
     * }
     */
    public static MethodHandle g_hook_list_invoke$handle() {
        return g_hook_list_invoke.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_list_invoke(GHookList *hook_list, gboolean may_recurse)
     * }
     */
    public static void g_hook_list_invoke(MemorySegment hook_list, int may_recurse) {
        var mh$ = g_hook_list_invoke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_list_invoke", hook_list, may_recurse);
            }
            mh$.invokeExact(hook_list, may_recurse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_list_invoke_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_list_invoke_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_list_invoke_check(GHookList *hook_list, gboolean may_recurse)
     * }
     */
    public static FunctionDescriptor g_hook_list_invoke_check$descriptor() {
        return g_hook_list_invoke_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_list_invoke_check(GHookList *hook_list, gboolean may_recurse)
     * }
     */
    public static MethodHandle g_hook_list_invoke_check$handle() {
        return g_hook_list_invoke_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_list_invoke_check(GHookList *hook_list, gboolean may_recurse)
     * }
     */
    public static void g_hook_list_invoke_check(MemorySegment hook_list, int may_recurse) {
        var mh$ = g_hook_list_invoke_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_list_invoke_check", hook_list, may_recurse);
            }
            mh$.invokeExact(hook_list, may_recurse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_list_marshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_list_marshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_list_marshal(GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_hook_list_marshal$descriptor() {
        return g_hook_list_marshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_list_marshal(GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_hook_list_marshal$handle() {
        return g_hook_list_marshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_list_marshal(GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data)
     * }
     */
    public static void g_hook_list_marshal(MemorySegment hook_list, int may_recurse, MemorySegment marshaller, MemorySegment marshal_data) {
        var mh$ = g_hook_list_marshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_list_marshal", hook_list, may_recurse, marshaller, marshal_data);
            }
            mh$.invokeExact(hook_list, may_recurse, marshaller, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hook_list_marshal_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hook_list_marshal_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_hook_list_marshal_check(GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_hook_list_marshal_check$descriptor() {
        return g_hook_list_marshal_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_hook_list_marshal_check(GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_hook_list_marshal_check$handle() {
        return g_hook_list_marshal_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_hook_list_marshal_check(GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data)
     * }
     */
    public static void g_hook_list_marshal_check(MemorySegment hook_list, int may_recurse, MemorySegment marshaller, MemorySegment marshal_data) {
        var mh$ = g_hook_list_marshal_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hook_list_marshal_check", hook_list, may_recurse, marshaller, marshal_data);
            }
            mh$.invokeExact(hook_list, may_recurse, marshaller, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hostname_is_non_ascii {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hostname_is_non_ascii"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_non_ascii(const gchar *hostname)
     * }
     */
    public static FunctionDescriptor g_hostname_is_non_ascii$descriptor() {
        return g_hostname_is_non_ascii.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_non_ascii(const gchar *hostname)
     * }
     */
    public static MethodHandle g_hostname_is_non_ascii$handle() {
        return g_hostname_is_non_ascii.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_non_ascii(const gchar *hostname)
     * }
     */
    public static int g_hostname_is_non_ascii(MemorySegment hostname) {
        var mh$ = g_hostname_is_non_ascii.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hostname_is_non_ascii", hostname);
            }
            return (int)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hostname_is_ascii_encoded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hostname_is_ascii_encoded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_ascii_encoded(const gchar *hostname)
     * }
     */
    public static FunctionDescriptor g_hostname_is_ascii_encoded$descriptor() {
        return g_hostname_is_ascii_encoded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_ascii_encoded(const gchar *hostname)
     * }
     */
    public static MethodHandle g_hostname_is_ascii_encoded$handle() {
        return g_hostname_is_ascii_encoded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_ascii_encoded(const gchar *hostname)
     * }
     */
    public static int g_hostname_is_ascii_encoded(MemorySegment hostname) {
        var mh$ = g_hostname_is_ascii_encoded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hostname_is_ascii_encoded", hostname);
            }
            return (int)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hostname_is_ip_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hostname_is_ip_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_ip_address(const gchar *hostname)
     * }
     */
    public static FunctionDescriptor g_hostname_is_ip_address$descriptor() {
        return g_hostname_is_ip_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_ip_address(const gchar *hostname)
     * }
     */
    public static MethodHandle g_hostname_is_ip_address$handle() {
        return g_hostname_is_ip_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_hostname_is_ip_address(const gchar *hostname)
     * }
     */
    public static int g_hostname_is_ip_address(MemorySegment hostname) {
        var mh$ = g_hostname_is_ip_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hostname_is_ip_address", hostname);
            }
            return (int)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hostname_to_ascii {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hostname_to_ascii"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_hostname_to_ascii(const gchar *hostname)
     * }
     */
    public static FunctionDescriptor g_hostname_to_ascii$descriptor() {
        return g_hostname_to_ascii.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_hostname_to_ascii(const gchar *hostname)
     * }
     */
    public static MethodHandle g_hostname_to_ascii$handle() {
        return g_hostname_to_ascii.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_hostname_to_ascii(const gchar *hostname)
     * }
     */
    public static MemorySegment g_hostname_to_ascii(MemorySegment hostname) {
        var mh$ = g_hostname_to_ascii.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hostname_to_ascii", hostname);
            }
            return (MemorySegment)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hostname_to_unicode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hostname_to_unicode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_hostname_to_unicode(const gchar *hostname)
     * }
     */
    public static FunctionDescriptor g_hostname_to_unicode$descriptor() {
        return g_hostname_to_unicode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_hostname_to_unicode(const gchar *hostname)
     * }
     */
    public static MethodHandle g_hostname_to_unicode$handle() {
        return g_hostname_to_unicode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_hostname_to_unicode(const gchar *hostname)
     * }
     */
    public static MemorySegment g_hostname_to_unicode(MemorySegment hostname) {
        var mh$ = g_hostname_to_unicode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hostname_to_unicode", hostname);
            }
            return (MemorySegment)mh$.invokeExact(hostname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_poll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_poll(GPollFD *fds, guint nfds, gint timeout)
     * }
     */
    public static FunctionDescriptor g_poll$descriptor() {
        return g_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_poll(GPollFD *fds, guint nfds, gint timeout)
     * }
     */
    public static MethodHandle g_poll$handle() {
        return g_poll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_poll(GPollFD *fds, guint nfds, gint timeout)
     * }
     */
    public static int g_poll(MemorySegment fds, int nfds, int timeout) {
        var mh$ = g_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_poll", fds, nfds, timeout);
            }
            return (int)mh$.invokeExact(fds, nfds, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_alloc()
     * }
     */
    public static FunctionDescriptor g_slist_alloc$descriptor() {
        return g_slist_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_alloc()
     * }
     */
    public static MethodHandle g_slist_alloc$handle() {
        return g_slist_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_alloc()
     * }
     */
    public static MemorySegment g_slist_alloc() {
        var mh$ = g_slist_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_alloc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slist_free(GSList *list)
     * }
     */
    public static FunctionDescriptor g_slist_free$descriptor() {
        return g_slist_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slist_free(GSList *list)
     * }
     */
    public static MethodHandle g_slist_free$handle() {
        return g_slist_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slist_free(GSList *list)
     * }
     */
    public static void g_slist_free(MemorySegment list) {
        var mh$ = g_slist_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_free", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_free_1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_free_1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slist_free_1(GSList *list)
     * }
     */
    public static FunctionDescriptor g_slist_free_1$descriptor() {
        return g_slist_free_1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slist_free_1(GSList *list)
     * }
     */
    public static MethodHandle g_slist_free_1$handle() {
        return g_slist_free_1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slist_free_1(GSList *list)
     * }
     */
    public static void g_slist_free_1(MemorySegment list) {
        var mh$ = g_slist_free_1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_free_1", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_free_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_free_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slist_free_full(GSList *list, GDestroyNotify free_func)
     * }
     */
    public static FunctionDescriptor g_slist_free_full$descriptor() {
        return g_slist_free_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slist_free_full(GSList *list, GDestroyNotify free_func)
     * }
     */
    public static MethodHandle g_slist_free_full$handle() {
        return g_slist_free_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slist_free_full(GSList *list, GDestroyNotify free_func)
     * }
     */
    public static void g_slist_free_full(MemorySegment list, MemorySegment free_func) {
        var mh$ = g_slist_free_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_free_full", list, free_func);
            }
            mh$.invokeExact(list, free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_append(GSList *list, gpointer data)
     * }
     */
    public static FunctionDescriptor g_slist_append$descriptor() {
        return g_slist_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_append(GSList *list, gpointer data)
     * }
     */
    public static MethodHandle g_slist_append$handle() {
        return g_slist_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_append(GSList *list, gpointer data)
     * }
     */
    public static MemorySegment g_slist_append(MemorySegment list, MemorySegment data) {
        var mh$ = g_slist_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_append", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_prepend(GSList *list, gpointer data)
     * }
     */
    public static FunctionDescriptor g_slist_prepend$descriptor() {
        return g_slist_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_prepend(GSList *list, gpointer data)
     * }
     */
    public static MethodHandle g_slist_prepend$handle() {
        return g_slist_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_prepend(GSList *list, gpointer data)
     * }
     */
    public static MemorySegment g_slist_prepend(MemorySegment list, MemorySegment data) {
        var mh$ = g_slist_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_prepend", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert(GSList *list, gpointer data, gint position)
     * }
     */
    public static FunctionDescriptor g_slist_insert$descriptor() {
        return g_slist_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert(GSList *list, gpointer data, gint position)
     * }
     */
    public static MethodHandle g_slist_insert$handle() {
        return g_slist_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_insert(GSList *list, gpointer data, gint position)
     * }
     */
    public static MemorySegment g_slist_insert(MemorySegment list, MemorySegment data, int position) {
        var mh$ = g_slist_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_insert", list, data, position);
            }
            return (MemorySegment)mh$.invokeExact(list, data, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_insert_sorted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_insert_sorted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_sorted(GSList *list, gpointer data, GCompareFunc func)
     * }
     */
    public static FunctionDescriptor g_slist_insert_sorted$descriptor() {
        return g_slist_insert_sorted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_sorted(GSList *list, gpointer data, GCompareFunc func)
     * }
     */
    public static MethodHandle g_slist_insert_sorted$handle() {
        return g_slist_insert_sorted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_sorted(GSList *list, gpointer data, GCompareFunc func)
     * }
     */
    public static MemorySegment g_slist_insert_sorted(MemorySegment list, MemorySegment data, MemorySegment func) {
        var mh$ = g_slist_insert_sorted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_insert_sorted", list, data, func);
            }
            return (MemorySegment)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_insert_sorted_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_insert_sorted_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_sorted_with_data(GSList *list, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_slist_insert_sorted_with_data$descriptor() {
        return g_slist_insert_sorted_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_sorted_with_data(GSList *list, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_slist_insert_sorted_with_data$handle() {
        return g_slist_insert_sorted_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_sorted_with_data(GSList *list, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MemorySegment g_slist_insert_sorted_with_data(MemorySegment list, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_slist_insert_sorted_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_insert_sorted_with_data", list, data, func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(list, data, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_before(GSList *slist, GSList *sibling, gpointer data)
     * }
     */
    public static FunctionDescriptor g_slist_insert_before$descriptor() {
        return g_slist_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_before(GSList *slist, GSList *sibling, gpointer data)
     * }
     */
    public static MethodHandle g_slist_insert_before$handle() {
        return g_slist_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_insert_before(GSList *slist, GSList *sibling, gpointer data)
     * }
     */
    public static MemorySegment g_slist_insert_before(MemorySegment slist, MemorySegment sibling, MemorySegment data) {
        var mh$ = g_slist_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_insert_before", slist, sibling, data);
            }
            return (MemorySegment)mh$.invokeExact(slist, sibling, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_concat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_concat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_concat(GSList *list1, GSList *list2)
     * }
     */
    public static FunctionDescriptor g_slist_concat$descriptor() {
        return g_slist_concat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_concat(GSList *list1, GSList *list2)
     * }
     */
    public static MethodHandle g_slist_concat$handle() {
        return g_slist_concat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_concat(GSList *list1, GSList *list2)
     * }
     */
    public static MemorySegment g_slist_concat(MemorySegment list1, MemorySegment list2) {
        var mh$ = g_slist_concat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_concat", list1, list2);
            }
            return (MemorySegment)mh$.invokeExact(list1, list2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_remove(GSList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_slist_remove$descriptor() {
        return g_slist_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_remove(GSList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_slist_remove$handle() {
        return g_slist_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_remove(GSList *list, gconstpointer data)
     * }
     */
    public static MemorySegment g_slist_remove(MemorySegment list, MemorySegment data) {
        var mh$ = g_slist_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_remove", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_remove_all(GSList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_slist_remove_all$descriptor() {
        return g_slist_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_remove_all(GSList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_slist_remove_all$handle() {
        return g_slist_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_remove_all(GSList *list, gconstpointer data)
     * }
     */
    public static MemorySegment g_slist_remove_all(MemorySegment list, MemorySegment data) {
        var mh$ = g_slist_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_remove_all", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_remove_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_remove_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_remove_link(GSList *list, GSList *link_)
     * }
     */
    public static FunctionDescriptor g_slist_remove_link$descriptor() {
        return g_slist_remove_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_remove_link(GSList *list, GSList *link_)
     * }
     */
    public static MethodHandle g_slist_remove_link$handle() {
        return g_slist_remove_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_remove_link(GSList *list, GSList *link_)
     * }
     */
    public static MemorySegment g_slist_remove_link(MemorySegment list, MemorySegment link_) {
        var mh$ = g_slist_remove_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_remove_link", list, link_);
            }
            return (MemorySegment)mh$.invokeExact(list, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_delete_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_delete_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_delete_link(GSList *list, GSList *link_)
     * }
     */
    public static FunctionDescriptor g_slist_delete_link$descriptor() {
        return g_slist_delete_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_delete_link(GSList *list, GSList *link_)
     * }
     */
    public static MethodHandle g_slist_delete_link$handle() {
        return g_slist_delete_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_delete_link(GSList *list, GSList *link_)
     * }
     */
    public static MemorySegment g_slist_delete_link(MemorySegment list, MemorySegment link_) {
        var mh$ = g_slist_delete_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_delete_link", list, link_);
            }
            return (MemorySegment)mh$.invokeExact(list, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_reverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_reverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_reverse(GSList *list)
     * }
     */
    public static FunctionDescriptor g_slist_reverse$descriptor() {
        return g_slist_reverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_reverse(GSList *list)
     * }
     */
    public static MethodHandle g_slist_reverse$handle() {
        return g_slist_reverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_reverse(GSList *list)
     * }
     */
    public static MemorySegment g_slist_reverse(MemorySegment list) {
        var mh$ = g_slist_reverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_reverse", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_copy(GSList *list)
     * }
     */
    public static FunctionDescriptor g_slist_copy$descriptor() {
        return g_slist_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_copy(GSList *list)
     * }
     */
    public static MethodHandle g_slist_copy$handle() {
        return g_slist_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_copy(GSList *list)
     * }
     */
    public static MemorySegment g_slist_copy(MemorySegment list) {
        var mh$ = g_slist_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_copy", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_copy_deep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_copy_deep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_copy_deep(GSList *list, GCopyFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_slist_copy_deep$descriptor() {
        return g_slist_copy_deep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_copy_deep(GSList *list, GCopyFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_slist_copy_deep$handle() {
        return g_slist_copy_deep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_copy_deep(GSList *list, GCopyFunc func, gpointer user_data)
     * }
     */
    public static MemorySegment g_slist_copy_deep(MemorySegment list, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_slist_copy_deep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_copy_deep", list, func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_nth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_nth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_nth(GSList *list, guint n)
     * }
     */
    public static FunctionDescriptor g_slist_nth$descriptor() {
        return g_slist_nth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_nth(GSList *list, guint n)
     * }
     */
    public static MethodHandle g_slist_nth$handle() {
        return g_slist_nth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_nth(GSList *list, guint n)
     * }
     */
    public static MemorySegment g_slist_nth(MemorySegment list, int n) {
        var mh$ = g_slist_nth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_nth", list, n);
            }
            return (MemorySegment)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_find(GSList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_slist_find$descriptor() {
        return g_slist_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_find(GSList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_slist_find$handle() {
        return g_slist_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_find(GSList *list, gconstpointer data)
     * }
     */
    public static MemorySegment g_slist_find(MemorySegment list, MemorySegment data) {
        var mh$ = g_slist_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_find", list, data);
            }
            return (MemorySegment)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_find_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_find_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_find_custom(GSList *list, gconstpointer data, GCompareFunc func)
     * }
     */
    public static FunctionDescriptor g_slist_find_custom$descriptor() {
        return g_slist_find_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_find_custom(GSList *list, gconstpointer data, GCompareFunc func)
     * }
     */
    public static MethodHandle g_slist_find_custom$handle() {
        return g_slist_find_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_find_custom(GSList *list, gconstpointer data, GCompareFunc func)
     * }
     */
    public static MemorySegment g_slist_find_custom(MemorySegment list, MemorySegment data, MemorySegment func) {
        var mh$ = g_slist_find_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_find_custom", list, data, func);
            }
            return (MemorySegment)mh$.invokeExact(list, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_slist_position(GSList *list, GSList *llink)
     * }
     */
    public static FunctionDescriptor g_slist_position$descriptor() {
        return g_slist_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_slist_position(GSList *list, GSList *llink)
     * }
     */
    public static MethodHandle g_slist_position$handle() {
        return g_slist_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_slist_position(GSList *list, GSList *llink)
     * }
     */
    public static int g_slist_position(MemorySegment list, MemorySegment llink) {
        var mh$ = g_slist_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_position", list, llink);
            }
            return (int)mh$.invokeExact(list, llink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_slist_index(GSList *list, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_slist_index$descriptor() {
        return g_slist_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_slist_index(GSList *list, gconstpointer data)
     * }
     */
    public static MethodHandle g_slist_index$handle() {
        return g_slist_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_slist_index(GSList *list, gconstpointer data)
     * }
     */
    public static int g_slist_index(MemorySegment list, MemorySegment data) {
        var mh$ = g_slist_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_index", list, data);
            }
            return (int)mh$.invokeExact(list, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_last {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_last"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_last(GSList *list)
     * }
     */
    public static FunctionDescriptor g_slist_last$descriptor() {
        return g_slist_last.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_last(GSList *list)
     * }
     */
    public static MethodHandle g_slist_last$handle() {
        return g_slist_last.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_last(GSList *list)
     * }
     */
    public static MemorySegment g_slist_last(MemorySegment list) {
        var mh$ = g_slist_last.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_last", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_slist_length(GSList *list)
     * }
     */
    public static FunctionDescriptor g_slist_length$descriptor() {
        return g_slist_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_slist_length(GSList *list)
     * }
     */
    public static MethodHandle g_slist_length$handle() {
        return g_slist_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_slist_length(GSList *list)
     * }
     */
    public static int g_slist_length(MemorySegment list) {
        var mh$ = g_slist_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_length", list);
            }
            return (int)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slist_foreach(GSList *list, GFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_slist_foreach$descriptor() {
        return g_slist_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slist_foreach(GSList *list, GFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_slist_foreach$handle() {
        return g_slist_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slist_foreach(GSList *list, GFunc func, gpointer user_data)
     * }
     */
    public static void g_slist_foreach(MemorySegment list, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_slist_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_foreach", list, func, user_data);
            }
            mh$.invokeExact(list, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_sort(GSList *list, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_slist_sort$descriptor() {
        return g_slist_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_sort(GSList *list, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_slist_sort$handle() {
        return g_slist_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_sort(GSList *list, GCompareFunc compare_func)
     * }
     */
    public static MemorySegment g_slist_sort(MemorySegment list, MemorySegment compare_func) {
        var mh$ = g_slist_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_sort", list, compare_func);
            }
            return (MemorySegment)mh$.invokeExact(list, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_sort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_sort_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *g_slist_sort_with_data(GSList *list, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_slist_sort_with_data$descriptor() {
        return g_slist_sort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *g_slist_sort_with_data(GSList *list, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_slist_sort_with_data$handle() {
        return g_slist_sort_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *g_slist_sort_with_data(GSList *list, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_slist_sort_with_data(MemorySegment list, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_slist_sort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_sort_with_data", list, compare_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(list, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_nth_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_nth_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_slist_nth_data(GSList *list, guint n)
     * }
     */
    public static FunctionDescriptor g_slist_nth_data$descriptor() {
        return g_slist_nth_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_slist_nth_data(GSList *list, guint n)
     * }
     */
    public static MethodHandle g_slist_nth_data$handle() {
        return g_slist_nth_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_slist_nth_data(GSList *list, guint n)
     * }
     */
    public static MemorySegment g_slist_nth_data(MemorySegment list, int n) {
        var mh$ = g_slist_nth_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_nth_data", list, n);
            }
            return (MemorySegment)mh$.invokeExact(list, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_clear_slist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_clear_slist"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_clear_slist(GSList **slist_ptr, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_clear_slist$descriptor() {
        return g_clear_slist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_clear_slist(GSList **slist_ptr, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_clear_slist$handle() {
        return g_clear_slist.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_clear_slist(GSList **slist_ptr, GDestroyNotify destroy)
     * }
     */
    public static void g_clear_slist(MemorySegment slist_ptr, MemorySegment destroy) {
        var mh$ = g_clear_slist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_clear_slist", slist_ptr, destroy);
            }
            mh$.invokeExact(slist_ptr, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_IO_IN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_IN = 1
     * }
     */
    public static int G_IO_IN() {
        return G_IO_IN;
    }
    private static final int G_IO_OUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_OUT = 4
     * }
     */
    public static int G_IO_OUT() {
        return G_IO_OUT;
    }
    private static final int G_IO_PRI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_PRI = 2
     * }
     */
    public static int G_IO_PRI() {
        return G_IO_PRI;
    }
    private static final int G_IO_ERR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERR = 8
     * }
     */
    public static int G_IO_ERR() {
        return G_IO_ERR;
    }
    private static final int G_IO_HUP = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_HUP = 16
     * }
     */
    public static int G_IO_HUP() {
        return G_IO_HUP;
    }
    private static final int G_IO_NVAL = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_NVAL = 32
     * }
     */
    public static int G_IO_NVAL() {
        return G_IO_NVAL;
    }
    private static final int G_MAIN_CONTEXT_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MAIN_CONTEXT_FLAGS_NONE = 0
     * }
     */
    public static int G_MAIN_CONTEXT_FLAGS_NONE() {
        return G_MAIN_CONTEXT_FLAGS_NONE;
    }
    private static final int G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1
     * }
     */
    public static int G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING() {
        return G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING;
    }

    private static class g_main_context_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_new()
     * }
     */
    public static FunctionDescriptor g_main_context_new$descriptor() {
        return g_main_context_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_new()
     * }
     */
    public static MethodHandle g_main_context_new$handle() {
        return g_main_context_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_new()
     * }
     */
    public static MemorySegment g_main_context_new() {
        var mh$ = g_main_context_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_new_with_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_new_with_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_new_with_flags(GMainContextFlags flags)
     * }
     */
    public static FunctionDescriptor g_main_context_new_with_flags$descriptor() {
        return g_main_context_new_with_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_new_with_flags(GMainContextFlags flags)
     * }
     */
    public static MethodHandle g_main_context_new_with_flags$handle() {
        return g_main_context_new_with_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_new_with_flags(GMainContextFlags flags)
     * }
     */
    public static MemorySegment g_main_context_new_with_flags(int flags) {
        var mh$ = g_main_context_new_with_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_new_with_flags", flags);
            }
            return (MemorySegment)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_ref(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_ref$descriptor() {
        return g_main_context_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_ref(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_ref$handle() {
        return g_main_context_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_ref(GMainContext *context)
     * }
     */
    public static MemorySegment g_main_context_ref(MemorySegment context) {
        var mh$ = g_main_context_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_ref", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_unref(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_unref$descriptor() {
        return g_main_context_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_unref(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_unref$handle() {
        return g_main_context_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_unref(GMainContext *context)
     * }
     */
    public static void g_main_context_unref(MemorySegment context) {
        var mh$ = g_main_context_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_unref", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_default()
     * }
     */
    public static FunctionDescriptor g_main_context_default$descriptor() {
        return g_main_context_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_default()
     * }
     */
    public static MethodHandle g_main_context_default$handle() {
        return g_main_context_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_default()
     * }
     */
    public static MemorySegment g_main_context_default() {
        var mh$ = g_main_context_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_iteration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_iteration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_iteration(GMainContext *context, gboolean may_block)
     * }
     */
    public static FunctionDescriptor g_main_context_iteration$descriptor() {
        return g_main_context_iteration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_iteration(GMainContext *context, gboolean may_block)
     * }
     */
    public static MethodHandle g_main_context_iteration$handle() {
        return g_main_context_iteration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_context_iteration(GMainContext *context, gboolean may_block)
     * }
     */
    public static int g_main_context_iteration(MemorySegment context, int may_block) {
        var mh$ = g_main_context_iteration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_iteration", context, may_block);
            }
            return (int)mh$.invokeExact(context, may_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_pending(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_pending$descriptor() {
        return g_main_context_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_pending(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_pending$handle() {
        return g_main_context_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_context_pending(GMainContext *context)
     * }
     */
    public static int g_main_context_pending(MemorySegment context) {
        var mh$ = g_main_context_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_pending", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_find_source_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_find_source_by_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_id(GMainContext *context, guint source_id)
     * }
     */
    public static FunctionDescriptor g_main_context_find_source_by_id$descriptor() {
        return g_main_context_find_source_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_id(GMainContext *context, guint source_id)
     * }
     */
    public static MethodHandle g_main_context_find_source_by_id$handle() {
        return g_main_context_find_source_by_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_id(GMainContext *context, guint source_id)
     * }
     */
    public static MemorySegment g_main_context_find_source_by_id(MemorySegment context, int source_id) {
        var mh$ = g_main_context_find_source_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_find_source_by_id", context, source_id);
            }
            return (MemorySegment)mh$.invokeExact(context, source_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_find_source_by_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_find_source_by_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_user_data(GMainContext *context, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_main_context_find_source_by_user_data$descriptor() {
        return g_main_context_find_source_by_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_user_data(GMainContext *context, gpointer user_data)
     * }
     */
    public static MethodHandle g_main_context_find_source_by_user_data$handle() {
        return g_main_context_find_source_by_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_user_data(GMainContext *context, gpointer user_data)
     * }
     */
    public static MemorySegment g_main_context_find_source_by_user_data(MemorySegment context, MemorySegment user_data) {
        var mh$ = g_main_context_find_source_by_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_find_source_by_user_data", context, user_data);
            }
            return (MemorySegment)mh$.invokeExact(context, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_find_source_by_funcs_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_find_source_by_funcs_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_funcs_user_data(GMainContext *context, GSourceFuncs *funcs, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_main_context_find_source_by_funcs_user_data$descriptor() {
        return g_main_context_find_source_by_funcs_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_funcs_user_data(GMainContext *context, GSourceFuncs *funcs, gpointer user_data)
     * }
     */
    public static MethodHandle g_main_context_find_source_by_funcs_user_data$handle() {
        return g_main_context_find_source_by_funcs_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_main_context_find_source_by_funcs_user_data(GMainContext *context, GSourceFuncs *funcs, gpointer user_data)
     * }
     */
    public static MemorySegment g_main_context_find_source_by_funcs_user_data(MemorySegment context, MemorySegment funcs, MemorySegment user_data) {
        var mh$ = g_main_context_find_source_by_funcs_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_find_source_by_funcs_user_data", context, funcs, user_data);
            }
            return (MemorySegment)mh$.invokeExact(context, funcs, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_wakeup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_wakeup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_wakeup(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_wakeup$descriptor() {
        return g_main_context_wakeup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_wakeup(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_wakeup$handle() {
        return g_main_context_wakeup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_wakeup(GMainContext *context)
     * }
     */
    public static void g_main_context_wakeup(MemorySegment context) {
        var mh$ = g_main_context_wakeup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_wakeup", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_acquire(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_acquire$descriptor() {
        return g_main_context_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_acquire(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_acquire$handle() {
        return g_main_context_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_context_acquire(GMainContext *context)
     * }
     */
    public static int g_main_context_acquire(MemorySegment context) {
        var mh$ = g_main_context_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_acquire", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_release(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_release$descriptor() {
        return g_main_context_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_release(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_release$handle() {
        return g_main_context_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_release(GMainContext *context)
     * }
     */
    public static void g_main_context_release(MemorySegment context) {
        var mh$ = g_main_context_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_release", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_is_owner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_is_owner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_is_owner(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_is_owner$descriptor() {
        return g_main_context_is_owner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_is_owner(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_is_owner$handle() {
        return g_main_context_is_owner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_context_is_owner(GMainContext *context)
     * }
     */
    public static int g_main_context_is_owner(MemorySegment context) {
        var mh$ = g_main_context_is_owner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_is_owner", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_wait(GMainContext *context, GCond *cond, GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_main_context_wait$descriptor() {
        return g_main_context_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_wait(GMainContext *context, GCond *cond, GMutex *mutex)
     * }
     */
    public static MethodHandle g_main_context_wait$handle() {
        return g_main_context_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_context_wait(GMainContext *context, GCond *cond, GMutex *mutex)
     * }
     */
    public static int g_main_context_wait(MemorySegment context, MemorySegment cond, MemorySegment mutex) {
        var mh$ = g_main_context_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_wait", context, cond, mutex);
            }
            return (int)mh$.invokeExact(context, cond, mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_prepare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_prepare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_prepare(GMainContext *context, gint *priority)
     * }
     */
    public static FunctionDescriptor g_main_context_prepare$descriptor() {
        return g_main_context_prepare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_prepare(GMainContext *context, gint *priority)
     * }
     */
    public static MethodHandle g_main_context_prepare$handle() {
        return g_main_context_prepare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_context_prepare(GMainContext *context, gint *priority)
     * }
     */
    public static int g_main_context_prepare(MemorySegment context, MemorySegment priority) {
        var mh$ = g_main_context_prepare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_prepare", context, priority);
            }
            return (int)mh$.invokeExact(context, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_main_context_query(GMainContext *context, gint max_priority, gint *timeout_, GPollFD *fds, gint n_fds)
     * }
     */
    public static FunctionDescriptor g_main_context_query$descriptor() {
        return g_main_context_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_main_context_query(GMainContext *context, gint max_priority, gint *timeout_, GPollFD *fds, gint n_fds)
     * }
     */
    public static MethodHandle g_main_context_query$handle() {
        return g_main_context_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_main_context_query(GMainContext *context, gint max_priority, gint *timeout_, GPollFD *fds, gint n_fds)
     * }
     */
    public static int g_main_context_query(MemorySegment context, int max_priority, MemorySegment timeout_, MemorySegment fds, int n_fds) {
        var mh$ = g_main_context_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_query", context, max_priority, timeout_, fds, n_fds);
            }
            return (int)mh$.invokeExact(context, max_priority, timeout_, fds, n_fds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_check(GMainContext *context, gint max_priority, GPollFD *fds, gint n_fds)
     * }
     */
    public static FunctionDescriptor g_main_context_check$descriptor() {
        return g_main_context_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_context_check(GMainContext *context, gint max_priority, GPollFD *fds, gint n_fds)
     * }
     */
    public static MethodHandle g_main_context_check$handle() {
        return g_main_context_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_context_check(GMainContext *context, gint max_priority, GPollFD *fds, gint n_fds)
     * }
     */
    public static int g_main_context_check(MemorySegment context, int max_priority, MemorySegment fds, int n_fds) {
        var mh$ = g_main_context_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_check", context, max_priority, fds, n_fds);
            }
            return (int)mh$.invokeExact(context, max_priority, fds, n_fds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_dispatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_dispatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_dispatch(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_dispatch$descriptor() {
        return g_main_context_dispatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_dispatch(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_dispatch$handle() {
        return g_main_context_dispatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_dispatch(GMainContext *context)
     * }
     */
    public static void g_main_context_dispatch(MemorySegment context) {
        var mh$ = g_main_context_dispatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_dispatch", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_set_poll_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_set_poll_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_set_poll_func(GMainContext *context, GPollFunc func)
     * }
     */
    public static FunctionDescriptor g_main_context_set_poll_func$descriptor() {
        return g_main_context_set_poll_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_set_poll_func(GMainContext *context, GPollFunc func)
     * }
     */
    public static MethodHandle g_main_context_set_poll_func$handle() {
        return g_main_context_set_poll_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_set_poll_func(GMainContext *context, GPollFunc func)
     * }
     */
    public static void g_main_context_set_poll_func(MemorySegment context, MemorySegment func) {
        var mh$ = g_main_context_set_poll_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_set_poll_func", context, func);
            }
            mh$.invokeExact(context, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_get_poll_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_get_poll_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPollFunc g_main_context_get_poll_func(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_get_poll_func$descriptor() {
        return g_main_context_get_poll_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPollFunc g_main_context_get_poll_func(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_get_poll_func$handle() {
        return g_main_context_get_poll_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPollFunc g_main_context_get_poll_func(GMainContext *context)
     * }
     */
    public static MemorySegment g_main_context_get_poll_func(MemorySegment context) {
        var mh$ = g_main_context_get_poll_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_get_poll_func", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_add_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_add_poll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_add_poll(GMainContext *context, GPollFD *fd, gint priority)
     * }
     */
    public static FunctionDescriptor g_main_context_add_poll$descriptor() {
        return g_main_context_add_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_add_poll(GMainContext *context, GPollFD *fd, gint priority)
     * }
     */
    public static MethodHandle g_main_context_add_poll$handle() {
        return g_main_context_add_poll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_add_poll(GMainContext *context, GPollFD *fd, gint priority)
     * }
     */
    public static void g_main_context_add_poll(MemorySegment context, MemorySegment fd, int priority) {
        var mh$ = g_main_context_add_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_add_poll", context, fd, priority);
            }
            mh$.invokeExact(context, fd, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_remove_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_remove_poll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_remove_poll(GMainContext *context, GPollFD *fd)
     * }
     */
    public static FunctionDescriptor g_main_context_remove_poll$descriptor() {
        return g_main_context_remove_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_remove_poll(GMainContext *context, GPollFD *fd)
     * }
     */
    public static MethodHandle g_main_context_remove_poll$handle() {
        return g_main_context_remove_poll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_remove_poll(GMainContext *context, GPollFD *fd)
     * }
     */
    public static void g_main_context_remove_poll(MemorySegment context, MemorySegment fd) {
        var mh$ = g_main_context_remove_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_remove_poll", context, fd);
            }
            mh$.invokeExact(context, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_main_depth()
     * }
     */
    public static FunctionDescriptor g_main_depth$descriptor() {
        return g_main_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_main_depth()
     * }
     */
    public static MethodHandle g_main_depth$handle() {
        return g_main_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_main_depth()
     * }
     */
    public static int g_main_depth() {
        var mh$ = g_main_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_depth");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_current_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_current_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_main_current_source()
     * }
     */
    public static FunctionDescriptor g_main_current_source$descriptor() {
        return g_main_current_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_main_current_source()
     * }
     */
    public static MethodHandle g_main_current_source$handle() {
        return g_main_current_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_main_current_source()
     * }
     */
    public static MemorySegment g_main_current_source() {
        var mh$ = g_main_current_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_current_source");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_push_thread_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_push_thread_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_push_thread_default(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_push_thread_default$descriptor() {
        return g_main_context_push_thread_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_push_thread_default(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_push_thread_default$handle() {
        return g_main_context_push_thread_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_push_thread_default(GMainContext *context)
     * }
     */
    public static void g_main_context_push_thread_default(MemorySegment context) {
        var mh$ = g_main_context_push_thread_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_push_thread_default", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_pop_thread_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_pop_thread_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_pop_thread_default(GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_main_context_pop_thread_default$descriptor() {
        return g_main_context_pop_thread_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_pop_thread_default(GMainContext *context)
     * }
     */
    public static MethodHandle g_main_context_pop_thread_default$handle() {
        return g_main_context_pop_thread_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_pop_thread_default(GMainContext *context)
     * }
     */
    public static void g_main_context_pop_thread_default(MemorySegment context) {
        var mh$ = g_main_context_pop_thread_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_pop_thread_default", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_get_thread_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_get_thread_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_get_thread_default()
     * }
     */
    public static FunctionDescriptor g_main_context_get_thread_default$descriptor() {
        return g_main_context_get_thread_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_get_thread_default()
     * }
     */
    public static MethodHandle g_main_context_get_thread_default$handle() {
        return g_main_context_get_thread_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_get_thread_default()
     * }
     */
    public static MemorySegment g_main_context_get_thread_default() {
        var mh$ = g_main_context_get_thread_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_get_thread_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_ref_thread_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_ref_thread_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_ref_thread_default()
     * }
     */
    public static FunctionDescriptor g_main_context_ref_thread_default$descriptor() {
        return g_main_context_ref_thread_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_ref_thread_default()
     * }
     */
    public static MethodHandle g_main_context_ref_thread_default$handle() {
        return g_main_context_ref_thread_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_main_context_ref_thread_default()
     * }
     */
    public static MemorySegment g_main_context_ref_thread_default() {
        var mh$ = g_main_context_ref_thread_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_ref_thread_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainLoop *g_main_loop_new(GMainContext *context, gboolean is_running)
     * }
     */
    public static FunctionDescriptor g_main_loop_new$descriptor() {
        return g_main_loop_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainLoop *g_main_loop_new(GMainContext *context, gboolean is_running)
     * }
     */
    public static MethodHandle g_main_loop_new$handle() {
        return g_main_loop_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainLoop *g_main_loop_new(GMainContext *context, gboolean is_running)
     * }
     */
    public static MemorySegment g_main_loop_new(MemorySegment context, int is_running) {
        var mh$ = g_main_loop_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_new", context, is_running);
            }
            return (MemorySegment)mh$.invokeExact(context, is_running);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_loop_run(GMainLoop *loop)
     * }
     */
    public static FunctionDescriptor g_main_loop_run$descriptor() {
        return g_main_loop_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_loop_run(GMainLoop *loop)
     * }
     */
    public static MethodHandle g_main_loop_run$handle() {
        return g_main_loop_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_loop_run(GMainLoop *loop)
     * }
     */
    public static void g_main_loop_run(MemorySegment loop) {
        var mh$ = g_main_loop_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_run", loop);
            }
            mh$.invokeExact(loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_quit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_quit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_loop_quit(GMainLoop *loop)
     * }
     */
    public static FunctionDescriptor g_main_loop_quit$descriptor() {
        return g_main_loop_quit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_loop_quit(GMainLoop *loop)
     * }
     */
    public static MethodHandle g_main_loop_quit$handle() {
        return g_main_loop_quit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_loop_quit(GMainLoop *loop)
     * }
     */
    public static void g_main_loop_quit(MemorySegment loop) {
        var mh$ = g_main_loop_quit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_quit", loop);
            }
            mh$.invokeExact(loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainLoop *g_main_loop_ref(GMainLoop *loop)
     * }
     */
    public static FunctionDescriptor g_main_loop_ref$descriptor() {
        return g_main_loop_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainLoop *g_main_loop_ref(GMainLoop *loop)
     * }
     */
    public static MethodHandle g_main_loop_ref$handle() {
        return g_main_loop_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainLoop *g_main_loop_ref(GMainLoop *loop)
     * }
     */
    public static MemorySegment g_main_loop_ref(MemorySegment loop) {
        var mh$ = g_main_loop_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_ref", loop);
            }
            return (MemorySegment)mh$.invokeExact(loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_loop_unref(GMainLoop *loop)
     * }
     */
    public static FunctionDescriptor g_main_loop_unref$descriptor() {
        return g_main_loop_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_loop_unref(GMainLoop *loop)
     * }
     */
    public static MethodHandle g_main_loop_unref$handle() {
        return g_main_loop_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_loop_unref(GMainLoop *loop)
     * }
     */
    public static void g_main_loop_unref(MemorySegment loop) {
        var mh$ = g_main_loop_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_unref", loop);
            }
            mh$.invokeExact(loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_is_running {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_is_running"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_main_loop_is_running(GMainLoop *loop)
     * }
     */
    public static FunctionDescriptor g_main_loop_is_running$descriptor() {
        return g_main_loop_is_running.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_main_loop_is_running(GMainLoop *loop)
     * }
     */
    public static MethodHandle g_main_loop_is_running$handle() {
        return g_main_loop_is_running.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_main_loop_is_running(GMainLoop *loop)
     * }
     */
    public static int g_main_loop_is_running(MemorySegment loop) {
        var mh$ = g_main_loop_is_running.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_is_running", loop);
            }
            return (int)mh$.invokeExact(loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_get_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_get_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_loop_get_context(GMainLoop *loop)
     * }
     */
    public static FunctionDescriptor g_main_loop_get_context$descriptor() {
        return g_main_loop_get_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_main_loop_get_context(GMainLoop *loop)
     * }
     */
    public static MethodHandle g_main_loop_get_context$handle() {
        return g_main_loop_get_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_main_loop_get_context(GMainLoop *loop)
     * }
     */
    public static MemorySegment g_main_loop_get_context(MemorySegment loop) {
        var mh$ = g_main_loop_get_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_get_context", loop);
            }
            return (MemorySegment)mh$.invokeExact(loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_source_new(GSourceFuncs *source_funcs, guint struct_size)
     * }
     */
    public static FunctionDescriptor g_source_new$descriptor() {
        return g_source_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_source_new(GSourceFuncs *source_funcs, guint struct_size)
     * }
     */
    public static MethodHandle g_source_new$handle() {
        return g_source_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_source_new(GSourceFuncs *source_funcs, guint struct_size)
     * }
     */
    public static MemorySegment g_source_new(MemorySegment source_funcs, int struct_size) {
        var mh$ = g_source_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_new", source_funcs, struct_size);
            }
            return (MemorySegment)mh$.invokeExact(source_funcs, struct_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_dispose_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_dispose_function"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_dispose_function(GSource *source, GSourceDisposeFunc dispose)
     * }
     */
    public static FunctionDescriptor g_source_set_dispose_function$descriptor() {
        return g_source_set_dispose_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_dispose_function(GSource *source, GSourceDisposeFunc dispose)
     * }
     */
    public static MethodHandle g_source_set_dispose_function$handle() {
        return g_source_set_dispose_function.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_dispose_function(GSource *source, GSourceDisposeFunc dispose)
     * }
     */
    public static void g_source_set_dispose_function(MemorySegment source, MemorySegment dispose) {
        var mh$ = g_source_set_dispose_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_dispose_function", source, dispose);
            }
            mh$.invokeExact(source, dispose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_source_ref(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_ref$descriptor() {
        return g_source_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_source_ref(GSource *source)
     * }
     */
    public static MethodHandle g_source_ref$handle() {
        return g_source_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_source_ref(GSource *source)
     * }
     */
    public static MemorySegment g_source_ref(MemorySegment source) {
        var mh$ = g_source_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_ref", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_unref(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_unref$descriptor() {
        return g_source_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_unref(GSource *source)
     * }
     */
    public static MethodHandle g_source_unref$handle() {
        return g_source_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_unref(GSource *source)
     * }
     */
    public static void g_source_unref(MemorySegment source) {
        var mh$ = g_source_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_unref", source);
            }
            mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_attach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_source_attach(GSource *source, GMainContext *context)
     * }
     */
    public static FunctionDescriptor g_source_attach$descriptor() {
        return g_source_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_source_attach(GSource *source, GMainContext *context)
     * }
     */
    public static MethodHandle g_source_attach$handle() {
        return g_source_attach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_source_attach(GSource *source, GMainContext *context)
     * }
     */
    public static int g_source_attach(MemorySegment source, MemorySegment context) {
        var mh$ = g_source_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_attach", source, context);
            }
            return (int)mh$.invokeExact(source, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_destroy(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_destroy$descriptor() {
        return g_source_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_destroy(GSource *source)
     * }
     */
    public static MethodHandle g_source_destroy$handle() {
        return g_source_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_destroy(GSource *source)
     * }
     */
    public static void g_source_destroy(MemorySegment source) {
        var mh$ = g_source_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_destroy", source);
            }
            mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_priority(GSource *source, gint priority)
     * }
     */
    public static FunctionDescriptor g_source_set_priority$descriptor() {
        return g_source_set_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_priority(GSource *source, gint priority)
     * }
     */
    public static MethodHandle g_source_set_priority$handle() {
        return g_source_set_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_priority(GSource *source, gint priority)
     * }
     */
    public static void g_source_set_priority(MemorySegment source, int priority) {
        var mh$ = g_source_set_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_priority", source, priority);
            }
            mh$.invokeExact(source, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_source_get_priority(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_get_priority$descriptor() {
        return g_source_get_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_source_get_priority(GSource *source)
     * }
     */
    public static MethodHandle g_source_get_priority$handle() {
        return g_source_get_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_source_get_priority(GSource *source)
     * }
     */
    public static int g_source_get_priority(MemorySegment source) {
        var mh$ = g_source_get_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_priority", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_can_recurse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_can_recurse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_can_recurse(GSource *source, gboolean can_recurse)
     * }
     */
    public static FunctionDescriptor g_source_set_can_recurse$descriptor() {
        return g_source_set_can_recurse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_can_recurse(GSource *source, gboolean can_recurse)
     * }
     */
    public static MethodHandle g_source_set_can_recurse$handle() {
        return g_source_set_can_recurse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_can_recurse(GSource *source, gboolean can_recurse)
     * }
     */
    public static void g_source_set_can_recurse(MemorySegment source, int can_recurse) {
        var mh$ = g_source_set_can_recurse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_can_recurse", source, can_recurse);
            }
            mh$.invokeExact(source, can_recurse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_can_recurse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_can_recurse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_source_get_can_recurse(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_get_can_recurse$descriptor() {
        return g_source_get_can_recurse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_source_get_can_recurse(GSource *source)
     * }
     */
    public static MethodHandle g_source_get_can_recurse$handle() {
        return g_source_get_can_recurse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_source_get_can_recurse(GSource *source)
     * }
     */
    public static int g_source_get_can_recurse(MemorySegment source) {
        var mh$ = g_source_get_can_recurse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_can_recurse", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_source_get_id(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_get_id$descriptor() {
        return g_source_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_source_get_id(GSource *source)
     * }
     */
    public static MethodHandle g_source_get_id$handle() {
        return g_source_get_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_source_get_id(GSource *source)
     * }
     */
    public static int g_source_get_id(MemorySegment source) {
        var mh$ = g_source_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_id", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_source_get_context(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_get_context$descriptor() {
        return g_source_get_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_source_get_context(GSource *source)
     * }
     */
    public static MethodHandle g_source_get_context$handle() {
        return g_source_get_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_source_get_context(GSource *source)
     * }
     */
    public static MemorySegment g_source_get_context(MemorySegment source) {
        var mh$ = g_source_get_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_context", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_callback(GSource *source, GSourceFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_source_set_callback$descriptor() {
        return g_source_set_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_callback(GSource *source, GSourceFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_source_set_callback$handle() {
        return g_source_set_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_callback(GSource *source, GSourceFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static void g_source_set_callback(MemorySegment source, MemorySegment func, MemorySegment data, MemorySegment notify) {
        var mh$ = g_source_set_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_callback", source, func, data, notify);
            }
            mh$.invokeExact(source, func, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_funcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_funcs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_funcs(GSource *source, GSourceFuncs *funcs)
     * }
     */
    public static FunctionDescriptor g_source_set_funcs$descriptor() {
        return g_source_set_funcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_funcs(GSource *source, GSourceFuncs *funcs)
     * }
     */
    public static MethodHandle g_source_set_funcs$handle() {
        return g_source_set_funcs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_funcs(GSource *source, GSourceFuncs *funcs)
     * }
     */
    public static void g_source_set_funcs(MemorySegment source, MemorySegment funcs) {
        var mh$ = g_source_set_funcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_funcs", source, funcs);
            }
            mh$.invokeExact(source, funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_is_destroyed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_is_destroyed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_source_is_destroyed(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_is_destroyed$descriptor() {
        return g_source_is_destroyed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_source_is_destroyed(GSource *source)
     * }
     */
    public static MethodHandle g_source_is_destroyed$handle() {
        return g_source_is_destroyed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_source_is_destroyed(GSource *source)
     * }
     */
    public static int g_source_is_destroyed(MemorySegment source) {
        var mh$ = g_source_is_destroyed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_is_destroyed", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_name(GSource *source, const char *name)
     * }
     */
    public static FunctionDescriptor g_source_set_name$descriptor() {
        return g_source_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_name(GSource *source, const char *name)
     * }
     */
    public static MethodHandle g_source_set_name$handle() {
        return g_source_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_name(GSource *source, const char *name)
     * }
     */
    public static void g_source_set_name(MemorySegment source, MemorySegment name) {
        var mh$ = g_source_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_name", source, name);
            }
            mh$.invokeExact(source, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_static_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_static_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_static_name(GSource *source, const char *name)
     * }
     */
    public static FunctionDescriptor g_source_set_static_name$descriptor() {
        return g_source_set_static_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_static_name(GSource *source, const char *name)
     * }
     */
    public static MethodHandle g_source_set_static_name$handle() {
        return g_source_set_static_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_static_name(GSource *source, const char *name)
     * }
     */
    public static void g_source_set_static_name(MemorySegment source, MemorySegment name) {
        var mh$ = g_source_set_static_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_static_name", source, name);
            }
            mh$.invokeExact(source, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_source_get_name(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_get_name$descriptor() {
        return g_source_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_source_get_name(GSource *source)
     * }
     */
    public static MethodHandle g_source_get_name$handle() {
        return g_source_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_source_get_name(GSource *source)
     * }
     */
    public static MemorySegment g_source_get_name(MemorySegment source) {
        var mh$ = g_source_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_name", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_name_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_name_by_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_name_by_id(guint tag, const char *name)
     * }
     */
    public static FunctionDescriptor g_source_set_name_by_id$descriptor() {
        return g_source_set_name_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_name_by_id(guint tag, const char *name)
     * }
     */
    public static MethodHandle g_source_set_name_by_id$handle() {
        return g_source_set_name_by_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_name_by_id(guint tag, const char *name)
     * }
     */
    public static void g_source_set_name_by_id(int tag, MemorySegment name) {
        var mh$ = g_source_set_name_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_name_by_id", tag, name);
            }
            mh$.invokeExact(tag, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_ready_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_ready_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_ready_time(GSource *source, gint64 ready_time)
     * }
     */
    public static FunctionDescriptor g_source_set_ready_time$descriptor() {
        return g_source_set_ready_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_ready_time(GSource *source, gint64 ready_time)
     * }
     */
    public static MethodHandle g_source_set_ready_time$handle() {
        return g_source_set_ready_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_ready_time(GSource *source, gint64 ready_time)
     * }
     */
    public static void g_source_set_ready_time(MemorySegment source, long ready_time) {
        var mh$ = g_source_set_ready_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_ready_time", source, ready_time);
            }
            mh$.invokeExact(source, ready_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_ready_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_ready_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_source_get_ready_time(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_get_ready_time$descriptor() {
        return g_source_get_ready_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_source_get_ready_time(GSource *source)
     * }
     */
    public static MethodHandle g_source_get_ready_time$handle() {
        return g_source_get_ready_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_source_get_ready_time(GSource *source)
     * }
     */
    public static long g_source_get_ready_time(MemorySegment source) {
        var mh$ = g_source_get_ready_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_ready_time", source);
            }
            return (long)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_add_unix_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_add_unix_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_source_add_unix_fd(GSource *source, gint fd, GIOCondition events)
     * }
     */
    public static FunctionDescriptor g_source_add_unix_fd$descriptor() {
        return g_source_add_unix_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_source_add_unix_fd(GSource *source, gint fd, GIOCondition events)
     * }
     */
    public static MethodHandle g_source_add_unix_fd$handle() {
        return g_source_add_unix_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_source_add_unix_fd(GSource *source, gint fd, GIOCondition events)
     * }
     */
    public static MemorySegment g_source_add_unix_fd(MemorySegment source, int fd, int events) {
        var mh$ = g_source_add_unix_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_add_unix_fd", source, fd, events);
            }
            return (MemorySegment)mh$.invokeExact(source, fd, events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_modify_unix_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_modify_unix_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_modify_unix_fd(GSource *source, gpointer tag, GIOCondition new_events)
     * }
     */
    public static FunctionDescriptor g_source_modify_unix_fd$descriptor() {
        return g_source_modify_unix_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_modify_unix_fd(GSource *source, gpointer tag, GIOCondition new_events)
     * }
     */
    public static MethodHandle g_source_modify_unix_fd$handle() {
        return g_source_modify_unix_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_modify_unix_fd(GSource *source, gpointer tag, GIOCondition new_events)
     * }
     */
    public static void g_source_modify_unix_fd(MemorySegment source, MemorySegment tag, int new_events) {
        var mh$ = g_source_modify_unix_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_modify_unix_fd", source, tag, new_events);
            }
            mh$.invokeExact(source, tag, new_events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_remove_unix_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_remove_unix_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_remove_unix_fd(GSource *source, gpointer tag)
     * }
     */
    public static FunctionDescriptor g_source_remove_unix_fd$descriptor() {
        return g_source_remove_unix_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_remove_unix_fd(GSource *source, gpointer tag)
     * }
     */
    public static MethodHandle g_source_remove_unix_fd$handle() {
        return g_source_remove_unix_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_remove_unix_fd(GSource *source, gpointer tag)
     * }
     */
    public static void g_source_remove_unix_fd(MemorySegment source, MemorySegment tag) {
        var mh$ = g_source_remove_unix_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_remove_unix_fd", source, tag);
            }
            mh$.invokeExact(source, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_query_unix_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_query_unix_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOCondition g_source_query_unix_fd(GSource *source, gpointer tag)
     * }
     */
    public static FunctionDescriptor g_source_query_unix_fd$descriptor() {
        return g_source_query_unix_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOCondition g_source_query_unix_fd(GSource *source, gpointer tag)
     * }
     */
    public static MethodHandle g_source_query_unix_fd$handle() {
        return g_source_query_unix_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOCondition g_source_query_unix_fd(GSource *source, gpointer tag)
     * }
     */
    public static int g_source_query_unix_fd(MemorySegment source, MemorySegment tag) {
        var mh$ = g_source_query_unix_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_query_unix_fd", source, tag);
            }
            return (int)mh$.invokeExact(source, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_callback_indirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_callback_indirect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_callback_indirect(GSource *source, gpointer callback_data, GSourceCallbackFuncs *callback_funcs)
     * }
     */
    public static FunctionDescriptor g_source_set_callback_indirect$descriptor() {
        return g_source_set_callback_indirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_callback_indirect(GSource *source, gpointer callback_data, GSourceCallbackFuncs *callback_funcs)
     * }
     */
    public static MethodHandle g_source_set_callback_indirect$handle() {
        return g_source_set_callback_indirect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_callback_indirect(GSource *source, gpointer callback_data, GSourceCallbackFuncs *callback_funcs)
     * }
     */
    public static void g_source_set_callback_indirect(MemorySegment source, MemorySegment callback_data, MemorySegment callback_funcs) {
        var mh$ = g_source_set_callback_indirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_callback_indirect", source, callback_data, callback_funcs);
            }
            mh$.invokeExact(source, callback_data, callback_funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_add_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_add_poll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_add_poll(GSource *source, GPollFD *fd)
     * }
     */
    public static FunctionDescriptor g_source_add_poll$descriptor() {
        return g_source_add_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_add_poll(GSource *source, GPollFD *fd)
     * }
     */
    public static MethodHandle g_source_add_poll$handle() {
        return g_source_add_poll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_add_poll(GSource *source, GPollFD *fd)
     * }
     */
    public static void g_source_add_poll(MemorySegment source, MemorySegment fd) {
        var mh$ = g_source_add_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_add_poll", source, fd);
            }
            mh$.invokeExact(source, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_remove_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_remove_poll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_remove_poll(GSource *source, GPollFD *fd)
     * }
     */
    public static FunctionDescriptor g_source_remove_poll$descriptor() {
        return g_source_remove_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_remove_poll(GSource *source, GPollFD *fd)
     * }
     */
    public static MethodHandle g_source_remove_poll$handle() {
        return g_source_remove_poll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_remove_poll(GSource *source, GPollFD *fd)
     * }
     */
    public static void g_source_remove_poll(MemorySegment source, MemorySegment fd) {
        var mh$ = g_source_remove_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_remove_poll", source, fd);
            }
            mh$.invokeExact(source, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_add_child_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_add_child_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_add_child_source(GSource *source, GSource *child_source)
     * }
     */
    public static FunctionDescriptor g_source_add_child_source$descriptor() {
        return g_source_add_child_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_add_child_source(GSource *source, GSource *child_source)
     * }
     */
    public static MethodHandle g_source_add_child_source$handle() {
        return g_source_add_child_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_add_child_source(GSource *source, GSource *child_source)
     * }
     */
    public static void g_source_add_child_source(MemorySegment source, MemorySegment child_source) {
        var mh$ = g_source_add_child_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_add_child_source", source, child_source);
            }
            mh$.invokeExact(source, child_source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_remove_child_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_remove_child_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_remove_child_source(GSource *source, GSource *child_source)
     * }
     */
    public static FunctionDescriptor g_source_remove_child_source$descriptor() {
        return g_source_remove_child_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_remove_child_source(GSource *source, GSource *child_source)
     * }
     */
    public static MethodHandle g_source_remove_child_source$handle() {
        return g_source_remove_child_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_remove_child_source(GSource *source, GSource *child_source)
     * }
     */
    public static void g_source_remove_child_source(MemorySegment source, MemorySegment child_source) {
        var mh$ = g_source_remove_child_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_remove_child_source", source, child_source);
            }
            mh$.invokeExact(source, child_source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_current_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_current_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_get_current_time(GSource *source, GTimeVal *timeval)
     * }
     */
    public static FunctionDescriptor g_source_get_current_time$descriptor() {
        return g_source_get_current_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_get_current_time(GSource *source, GTimeVal *timeval)
     * }
     */
    public static MethodHandle g_source_get_current_time$handle() {
        return g_source_get_current_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_get_current_time(GSource *source, GTimeVal *timeval)
     * }
     */
    public static void g_source_get_current_time(MemorySegment source, MemorySegment timeval) {
        var mh$ = g_source_get_current_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_current_time", source, timeval);
            }
            mh$.invokeExact(source, timeval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_source_get_time(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_get_time$descriptor() {
        return g_source_get_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_source_get_time(GSource *source)
     * }
     */
    public static MethodHandle g_source_get_time$handle() {
        return g_source_get_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_source_get_time(GSource *source)
     * }
     */
    public static long g_source_get_time(MemorySegment source) {
        var mh$ = g_source_get_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_time", source);
            }
            return (long)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_idle_source_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_idle_source_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_idle_source_new()
     * }
     */
    public static FunctionDescriptor g_idle_source_new$descriptor() {
        return g_idle_source_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_idle_source_new()
     * }
     */
    public static MethodHandle g_idle_source_new$handle() {
        return g_idle_source_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_idle_source_new()
     * }
     */
    public static MemorySegment g_idle_source_new() {
        var mh$ = g_idle_source_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_idle_source_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_child_watch_source_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_child_watch_source_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_child_watch_source_new(GPid pid)
     * }
     */
    public static FunctionDescriptor g_child_watch_source_new$descriptor() {
        return g_child_watch_source_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_child_watch_source_new(GPid pid)
     * }
     */
    public static MethodHandle g_child_watch_source_new$handle() {
        return g_child_watch_source_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_child_watch_source_new(GPid pid)
     * }
     */
    public static MemorySegment g_child_watch_source_new(int pid) {
        var mh$ = g_child_watch_source_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_child_watch_source_new", pid);
            }
            return (MemorySegment)mh$.invokeExact(pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_source_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_source_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_timeout_source_new(guint interval)
     * }
     */
    public static FunctionDescriptor g_timeout_source_new$descriptor() {
        return g_timeout_source_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_timeout_source_new(guint interval)
     * }
     */
    public static MethodHandle g_timeout_source_new$handle() {
        return g_timeout_source_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_timeout_source_new(guint interval)
     * }
     */
    public static MemorySegment g_timeout_source_new(int interval) {
        var mh$ = g_timeout_source_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_source_new", interval);
            }
            return (MemorySegment)mh$.invokeExact(interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_source_new_seconds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_source_new_seconds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_timeout_source_new_seconds(guint interval)
     * }
     */
    public static FunctionDescriptor g_timeout_source_new_seconds$descriptor() {
        return g_timeout_source_new_seconds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_timeout_source_new_seconds(guint interval)
     * }
     */
    public static MethodHandle g_timeout_source_new_seconds$handle() {
        return g_timeout_source_new_seconds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_timeout_source_new_seconds(guint interval)
     * }
     */
    public static MemorySegment g_timeout_source_new_seconds(int interval) {
        var mh$ = g_timeout_source_new_seconds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_source_new_seconds", interval);
            }
            return (MemorySegment)mh$.invokeExact(interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_current_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_current_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_get_current_time(GTimeVal *result)
     * }
     */
    public static FunctionDescriptor g_get_current_time$descriptor() {
        return g_get_current_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_get_current_time(GTimeVal *result)
     * }
     */
    public static MethodHandle g_get_current_time$handle() {
        return g_get_current_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_get_current_time(GTimeVal *result)
     * }
     */
    public static void g_get_current_time(MemorySegment result) {
        var mh$ = g_get_current_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_current_time", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_monotonic_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_monotonic_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_get_monotonic_time()
     * }
     */
    public static FunctionDescriptor g_get_monotonic_time$descriptor() {
        return g_get_monotonic_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_get_monotonic_time()
     * }
     */
    public static MethodHandle g_get_monotonic_time$handle() {
        return g_get_monotonic_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_get_monotonic_time()
     * }
     */
    public static long g_get_monotonic_time() {
        var mh$ = g_get_monotonic_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_monotonic_time");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_real_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_real_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_get_real_time()
     * }
     */
    public static FunctionDescriptor g_get_real_time$descriptor() {
        return g_get_real_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_get_real_time()
     * }
     */
    public static MethodHandle g_get_real_time$handle() {
        return g_get_real_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_get_real_time()
     * }
     */
    public static long g_get_real_time() {
        var mh$ = g_get_real_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_real_time");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_source_remove(guint tag)
     * }
     */
    public static FunctionDescriptor g_source_remove$descriptor() {
        return g_source_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_source_remove(guint tag)
     * }
     */
    public static MethodHandle g_source_remove$handle() {
        return g_source_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_source_remove(guint tag)
     * }
     */
    public static int g_source_remove(int tag) {
        var mh$ = g_source_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_remove", tag);
            }
            return (int)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_remove_by_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_remove_by_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_source_remove_by_user_data(gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_source_remove_by_user_data$descriptor() {
        return g_source_remove_by_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_source_remove_by_user_data(gpointer user_data)
     * }
     */
    public static MethodHandle g_source_remove_by_user_data$handle() {
        return g_source_remove_by_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_source_remove_by_user_data(gpointer user_data)
     * }
     */
    public static int g_source_remove_by_user_data(MemorySegment user_data) {
        var mh$ = g_source_remove_by_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_remove_by_user_data", user_data);
            }
            return (int)mh$.invokeExact(user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_remove_by_funcs_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_remove_by_funcs_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_source_remove_by_funcs_user_data(GSourceFuncs *funcs, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_source_remove_by_funcs_user_data$descriptor() {
        return g_source_remove_by_funcs_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_source_remove_by_funcs_user_data(GSourceFuncs *funcs, gpointer user_data)
     * }
     */
    public static MethodHandle g_source_remove_by_funcs_user_data$handle() {
        return g_source_remove_by_funcs_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_source_remove_by_funcs_user_data(GSourceFuncs *funcs, gpointer user_data)
     * }
     */
    public static int g_source_remove_by_funcs_user_data(MemorySegment funcs, MemorySegment user_data) {
        var mh$ = g_source_remove_by_funcs_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_remove_by_funcs_user_data", funcs, user_data);
            }
            return (int)mh$.invokeExact(funcs, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_clear_handle_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_clear_handle_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_clear_handle_id(guint *tag_ptr, GClearHandleFunc clear_func)
     * }
     */
    public static FunctionDescriptor g_clear_handle_id$descriptor() {
        return g_clear_handle_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_clear_handle_id(guint *tag_ptr, GClearHandleFunc clear_func)
     * }
     */
    public static MethodHandle g_clear_handle_id$handle() {
        return g_clear_handle_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_clear_handle_id(guint *tag_ptr, GClearHandleFunc clear_func)
     * }
     */
    public static void g_clear_handle_id(MemorySegment tag_ptr, MemorySegment clear_func) {
        var mh$ = g_clear_handle_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_clear_handle_id", tag_ptr, clear_func);
            }
            mh$.invokeExact(tag_ptr, clear_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_add_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_add_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_timeout_add_full$descriptor() {
        return g_timeout_add_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_timeout_add_full$handle() {
        return g_timeout_add_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_timeout_add_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static int g_timeout_add_full(int priority, int interval, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = g_timeout_add_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_add_full", priority, interval, function, data, notify);
            }
            return (int)mh$.invokeExact(priority, interval, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_timeout_add(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_timeout_add$descriptor() {
        return g_timeout_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_timeout_add(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_timeout_add$handle() {
        return g_timeout_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_timeout_add(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static int g_timeout_add(int interval, MemorySegment function, MemorySegment data) {
        var mh$ = g_timeout_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_add", interval, function, data);
            }
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_add_once {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_add_once"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_once(guint interval, GSourceOnceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_timeout_add_once$descriptor() {
        return g_timeout_add_once.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_once(guint interval, GSourceOnceFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_timeout_add_once$handle() {
        return g_timeout_add_once.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_timeout_add_once(guint interval, GSourceOnceFunc function, gpointer data)
     * }
     */
    public static int g_timeout_add_once(int interval, MemorySegment function, MemorySegment data) {
        var mh$ = g_timeout_add_once.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_add_once", interval, function, data);
            }
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_add_seconds_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_add_seconds_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_timeout_add_seconds_full$descriptor() {
        return g_timeout_add_seconds_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_timeout_add_seconds_full$handle() {
        return g_timeout_add_seconds_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static int g_timeout_add_seconds_full(int priority, int interval, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = g_timeout_add_seconds_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_add_seconds_full", priority, interval, function, data, notify);
            }
            return (int)mh$.invokeExact(priority, interval, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_add_seconds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_add_seconds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_timeout_add_seconds$descriptor() {
        return g_timeout_add_seconds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_timeout_add_seconds$handle() {
        return g_timeout_add_seconds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static int g_timeout_add_seconds(int interval, MemorySegment function, MemorySegment data) {
        var mh$ = g_timeout_add_seconds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_add_seconds", interval, function, data);
            }
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_add_seconds_once {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timeout_add_seconds_once"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds_once(guint interval, GSourceOnceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_timeout_add_seconds_once$descriptor() {
        return g_timeout_add_seconds_once.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds_once(guint interval, GSourceOnceFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_timeout_add_seconds_once$handle() {
        return g_timeout_add_seconds_once.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_timeout_add_seconds_once(guint interval, GSourceOnceFunc function, gpointer data)
     * }
     */
    public static int g_timeout_add_seconds_once(int interval, MemorySegment function, MemorySegment data) {
        var mh$ = g_timeout_add_seconds_once.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timeout_add_seconds_once", interval, function, data);
            }
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_child_watch_add_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_child_watch_add_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_child_watch_add_full(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_child_watch_add_full$descriptor() {
        return g_child_watch_add_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_child_watch_add_full(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_child_watch_add_full$handle() {
        return g_child_watch_add_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_child_watch_add_full(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static int g_child_watch_add_full(int priority, int pid, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = g_child_watch_add_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_child_watch_add_full", priority, pid, function, data, notify);
            }
            return (int)mh$.invokeExact(priority, pid, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_child_watch_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_child_watch_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_child_watch_add(GPid pid, GChildWatchFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_child_watch_add$descriptor() {
        return g_child_watch_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_child_watch_add(GPid pid, GChildWatchFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_child_watch_add$handle() {
        return g_child_watch_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_child_watch_add(GPid pid, GChildWatchFunc function, gpointer data)
     * }
     */
    public static int g_child_watch_add(int pid, MemorySegment function, MemorySegment data) {
        var mh$ = g_child_watch_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_child_watch_add", pid, function, data);
            }
            return (int)mh$.invokeExact(pid, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_idle_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_idle_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_idle_add(GSourceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_idle_add$descriptor() {
        return g_idle_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_idle_add(GSourceFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_idle_add$handle() {
        return g_idle_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_idle_add(GSourceFunc function, gpointer data)
     * }
     */
    public static int g_idle_add(MemorySegment function, MemorySegment data) {
        var mh$ = g_idle_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_idle_add", function, data);
            }
            return (int)mh$.invokeExact(function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_idle_add_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_idle_add_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_idle_add_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_idle_add_full$descriptor() {
        return g_idle_add_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_idle_add_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_idle_add_full$handle() {
        return g_idle_add_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_idle_add_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static int g_idle_add_full(int priority, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = g_idle_add_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_idle_add_full", priority, function, data, notify);
            }
            return (int)mh$.invokeExact(priority, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_idle_add_once {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_idle_add_once"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_idle_add_once(GSourceOnceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_idle_add_once$descriptor() {
        return g_idle_add_once.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_idle_add_once(GSourceOnceFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_idle_add_once$handle() {
        return g_idle_add_once.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_idle_add_once(GSourceOnceFunc function, gpointer data)
     * }
     */
    public static int g_idle_add_once(MemorySegment function, MemorySegment data) {
        var mh$ = g_idle_add_once.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_idle_add_once", function, data);
            }
            return (int)mh$.invokeExact(function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_idle_remove_by_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_idle_remove_by_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_idle_remove_by_data(gpointer data)
     * }
     */
    public static FunctionDescriptor g_idle_remove_by_data$descriptor() {
        return g_idle_remove_by_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_idle_remove_by_data(gpointer data)
     * }
     */
    public static MethodHandle g_idle_remove_by_data$handle() {
        return g_idle_remove_by_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_idle_remove_by_data(gpointer data)
     * }
     */
    public static int g_idle_remove_by_data(MemorySegment data) {
        var mh$ = g_idle_remove_by_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_idle_remove_by_data", data);
            }
            return (int)mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_invoke_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_invoke_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_invoke_full(GMainContext *context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_main_context_invoke_full$descriptor() {
        return g_main_context_invoke_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_invoke_full(GMainContext *context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_main_context_invoke_full$handle() {
        return g_main_context_invoke_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_invoke_full(GMainContext *context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static void g_main_context_invoke_full(MemorySegment context, int priority, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = g_main_context_invoke_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_invoke_full", context, priority, function, data, notify);
            }
            mh$.invokeExact(context, priority, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_invoke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_invoke"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_main_context_invoke(GMainContext *context, GSourceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor g_main_context_invoke$descriptor() {
        return g_main_context_invoke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_main_context_invoke(GMainContext *context, GSourceFunc function, gpointer data)
     * }
     */
    public static MethodHandle g_main_context_invoke$handle() {
        return g_main_context_invoke.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_main_context_invoke(GMainContext *context, GSourceFunc function, gpointer data)
     * }
     */
    public static void g_main_context_invoke(MemorySegment context, MemorySegment function, MemorySegment data) {
        var mh$ = g_main_context_invoke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_invoke", context, function, data);
            }
            mh$.invokeExact(context, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timeout_funcs$constants {
        public static final GroupLayout LAYOUT = _GSourceFuncs.layout();
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_timeout_funcs").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_timeout_funcs
     * }
     */
    public static GroupLayout g_timeout_funcs$layout() {
        return g_timeout_funcs$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_timeout_funcs
     * }
     */
    public static MemorySegment g_timeout_funcs() {
        return g_timeout_funcs$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_timeout_funcs
     * }
     */
    public static void g_timeout_funcs(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_timeout_funcs$constants.SEGMENT, 0L, g_timeout_funcs$constants.LAYOUT.byteSize());
    }

    private static class g_child_watch_funcs$constants {
        public static final GroupLayout LAYOUT = _GSourceFuncs.layout();
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_child_watch_funcs").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_child_watch_funcs
     * }
     */
    public static GroupLayout g_child_watch_funcs$layout() {
        return g_child_watch_funcs$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_child_watch_funcs
     * }
     */
    public static MemorySegment g_child_watch_funcs() {
        return g_child_watch_funcs$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_child_watch_funcs
     * }
     */
    public static void g_child_watch_funcs(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_child_watch_funcs$constants.SEGMENT, 0L, g_child_watch_funcs$constants.LAYOUT.byteSize());
    }

    private static class g_idle_funcs$constants {
        public static final GroupLayout LAYOUT = _GSourceFuncs.layout();
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_idle_funcs").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_idle_funcs
     * }
     */
    public static GroupLayout g_idle_funcs$layout() {
        return g_idle_funcs$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_idle_funcs
     * }
     */
    public static MemorySegment g_idle_funcs() {
        return g_idle_funcs$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_idle_funcs
     * }
     */
    public static void g_idle_funcs(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_idle_funcs$constants.SEGMENT, 0L, g_idle_funcs$constants.LAYOUT.byteSize());
    }

    private static class g_unix_signal_funcs$constants {
        public static final GroupLayout LAYOUT = _GSourceFuncs.layout();
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_unix_signal_funcs").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_unix_signal_funcs
     * }
     */
    public static GroupLayout g_unix_signal_funcs$layout() {
        return g_unix_signal_funcs$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_unix_signal_funcs
     * }
     */
    public static MemorySegment g_unix_signal_funcs() {
        return g_unix_signal_funcs$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_unix_signal_funcs
     * }
     */
    public static void g_unix_signal_funcs(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_unix_signal_funcs$constants.SEGMENT, 0L, g_unix_signal_funcs$constants.LAYOUT.byteSize());
    }

    private static class g_unix_fd_source_funcs$constants {
        public static final GroupLayout LAYOUT = _GSourceFuncs.layout();
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_unix_fd_source_funcs").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_unix_fd_source_funcs
     * }
     */
    public static GroupLayout g_unix_fd_source_funcs$layout() {
        return g_unix_fd_source_funcs$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_unix_fd_source_funcs
     * }
     */
    public static MemorySegment g_unix_fd_source_funcs() {
        return g_unix_fd_source_funcs$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_unix_fd_source_funcs
     * }
     */
    public static void g_unix_fd_source_funcs(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_unix_fd_source_funcs$constants.SEGMENT, 0L, g_unix_fd_source_funcs$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef guint32 gunichar
     * }
     */
    public static final OfInt gunichar = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef guint16 gunichar2
     * }
     */
    public static final OfShort gunichar2 = app_indicator_h.C_SHORT;
    private static final int G_UNICODE_CONTROL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_CONTROL = 0
     * }
     */
    public static int G_UNICODE_CONTROL() {
        return G_UNICODE_CONTROL;
    }
    private static final int G_UNICODE_FORMAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_FORMAT = 1
     * }
     */
    public static int G_UNICODE_FORMAT() {
        return G_UNICODE_FORMAT;
    }
    private static final int G_UNICODE_UNASSIGNED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_UNASSIGNED = 2
     * }
     */
    public static int G_UNICODE_UNASSIGNED() {
        return G_UNICODE_UNASSIGNED;
    }
    private static final int G_UNICODE_PRIVATE_USE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_PRIVATE_USE = 3
     * }
     */
    public static int G_UNICODE_PRIVATE_USE() {
        return G_UNICODE_PRIVATE_USE;
    }
    private static final int G_UNICODE_SURROGATE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SURROGATE = 4
     * }
     */
    public static int G_UNICODE_SURROGATE() {
        return G_UNICODE_SURROGATE;
    }
    private static final int G_UNICODE_LOWERCASE_LETTER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_LOWERCASE_LETTER = 5
     * }
     */
    public static int G_UNICODE_LOWERCASE_LETTER() {
        return G_UNICODE_LOWERCASE_LETTER;
    }
    private static final int G_UNICODE_MODIFIER_LETTER = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_MODIFIER_LETTER = 6
     * }
     */
    public static int G_UNICODE_MODIFIER_LETTER() {
        return G_UNICODE_MODIFIER_LETTER;
    }
    private static final int G_UNICODE_OTHER_LETTER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_OTHER_LETTER = 7
     * }
     */
    public static int G_UNICODE_OTHER_LETTER() {
        return G_UNICODE_OTHER_LETTER;
    }
    private static final int G_UNICODE_TITLECASE_LETTER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_TITLECASE_LETTER = 8
     * }
     */
    public static int G_UNICODE_TITLECASE_LETTER() {
        return G_UNICODE_TITLECASE_LETTER;
    }
    private static final int G_UNICODE_UPPERCASE_LETTER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_UPPERCASE_LETTER = 9
     * }
     */
    public static int G_UNICODE_UPPERCASE_LETTER() {
        return G_UNICODE_UPPERCASE_LETTER;
    }
    private static final int G_UNICODE_SPACING_MARK = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SPACING_MARK = 10
     * }
     */
    public static int G_UNICODE_SPACING_MARK() {
        return G_UNICODE_SPACING_MARK;
    }
    private static final int G_UNICODE_ENCLOSING_MARK = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_ENCLOSING_MARK = 11
     * }
     */
    public static int G_UNICODE_ENCLOSING_MARK() {
        return G_UNICODE_ENCLOSING_MARK;
    }
    private static final int G_UNICODE_NON_SPACING_MARK = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_NON_SPACING_MARK = 12
     * }
     */
    public static int G_UNICODE_NON_SPACING_MARK() {
        return G_UNICODE_NON_SPACING_MARK;
    }
    private static final int G_UNICODE_DECIMAL_NUMBER = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_DECIMAL_NUMBER = 13
     * }
     */
    public static int G_UNICODE_DECIMAL_NUMBER() {
        return G_UNICODE_DECIMAL_NUMBER;
    }
    private static final int G_UNICODE_LETTER_NUMBER = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_LETTER_NUMBER = 14
     * }
     */
    public static int G_UNICODE_LETTER_NUMBER() {
        return G_UNICODE_LETTER_NUMBER;
    }
    private static final int G_UNICODE_OTHER_NUMBER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_OTHER_NUMBER = 15
     * }
     */
    public static int G_UNICODE_OTHER_NUMBER() {
        return G_UNICODE_OTHER_NUMBER;
    }
    private static final int G_UNICODE_CONNECT_PUNCTUATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_CONNECT_PUNCTUATION = 16
     * }
     */
    public static int G_UNICODE_CONNECT_PUNCTUATION() {
        return G_UNICODE_CONNECT_PUNCTUATION;
    }
    private static final int G_UNICODE_DASH_PUNCTUATION = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_DASH_PUNCTUATION = 17
     * }
     */
    public static int G_UNICODE_DASH_PUNCTUATION() {
        return G_UNICODE_DASH_PUNCTUATION;
    }
    private static final int G_UNICODE_CLOSE_PUNCTUATION = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_CLOSE_PUNCTUATION = 18
     * }
     */
    public static int G_UNICODE_CLOSE_PUNCTUATION() {
        return G_UNICODE_CLOSE_PUNCTUATION;
    }
    private static final int G_UNICODE_FINAL_PUNCTUATION = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_FINAL_PUNCTUATION = 19
     * }
     */
    public static int G_UNICODE_FINAL_PUNCTUATION() {
        return G_UNICODE_FINAL_PUNCTUATION;
    }
    private static final int G_UNICODE_INITIAL_PUNCTUATION = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_INITIAL_PUNCTUATION = 20
     * }
     */
    public static int G_UNICODE_INITIAL_PUNCTUATION() {
        return G_UNICODE_INITIAL_PUNCTUATION;
    }
    private static final int G_UNICODE_OTHER_PUNCTUATION = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_OTHER_PUNCTUATION = 21
     * }
     */
    public static int G_UNICODE_OTHER_PUNCTUATION() {
        return G_UNICODE_OTHER_PUNCTUATION;
    }
    private static final int G_UNICODE_OPEN_PUNCTUATION = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_OPEN_PUNCTUATION = 22
     * }
     */
    public static int G_UNICODE_OPEN_PUNCTUATION() {
        return G_UNICODE_OPEN_PUNCTUATION;
    }
    private static final int G_UNICODE_CURRENCY_SYMBOL = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_CURRENCY_SYMBOL = 23
     * }
     */
    public static int G_UNICODE_CURRENCY_SYMBOL() {
        return G_UNICODE_CURRENCY_SYMBOL;
    }
    private static final int G_UNICODE_MODIFIER_SYMBOL = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_MODIFIER_SYMBOL = 24
     * }
     */
    public static int G_UNICODE_MODIFIER_SYMBOL() {
        return G_UNICODE_MODIFIER_SYMBOL;
    }
    private static final int G_UNICODE_MATH_SYMBOL = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_MATH_SYMBOL = 25
     * }
     */
    public static int G_UNICODE_MATH_SYMBOL() {
        return G_UNICODE_MATH_SYMBOL;
    }
    private static final int G_UNICODE_OTHER_SYMBOL = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_OTHER_SYMBOL = 26
     * }
     */
    public static int G_UNICODE_OTHER_SYMBOL() {
        return G_UNICODE_OTHER_SYMBOL;
    }
    private static final int G_UNICODE_LINE_SEPARATOR = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_LINE_SEPARATOR = 27
     * }
     */
    public static int G_UNICODE_LINE_SEPARATOR() {
        return G_UNICODE_LINE_SEPARATOR;
    }
    private static final int G_UNICODE_PARAGRAPH_SEPARATOR = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_PARAGRAPH_SEPARATOR = 28
     * }
     */
    public static int G_UNICODE_PARAGRAPH_SEPARATOR() {
        return G_UNICODE_PARAGRAPH_SEPARATOR;
    }
    private static final int G_UNICODE_SPACE_SEPARATOR = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SPACE_SEPARATOR = 29
     * }
     */
    public static int G_UNICODE_SPACE_SEPARATOR() {
        return G_UNICODE_SPACE_SEPARATOR;
    }
    private static final int G_UNICODE_BREAK_MANDATORY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_MANDATORY = 0
     * }
     */
    public static int G_UNICODE_BREAK_MANDATORY() {
        return G_UNICODE_BREAK_MANDATORY;
    }
    private static final int G_UNICODE_BREAK_CARRIAGE_RETURN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_CARRIAGE_RETURN = 1
     * }
     */
    public static int G_UNICODE_BREAK_CARRIAGE_RETURN() {
        return G_UNICODE_BREAK_CARRIAGE_RETURN;
    }
    private static final int G_UNICODE_BREAK_LINE_FEED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_LINE_FEED = 2
     * }
     */
    public static int G_UNICODE_BREAK_LINE_FEED() {
        return G_UNICODE_BREAK_LINE_FEED;
    }
    private static final int G_UNICODE_BREAK_COMBINING_MARK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_COMBINING_MARK = 3
     * }
     */
    public static int G_UNICODE_BREAK_COMBINING_MARK() {
        return G_UNICODE_BREAK_COMBINING_MARK;
    }
    private static final int G_UNICODE_BREAK_SURROGATE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_SURROGATE = 4
     * }
     */
    public static int G_UNICODE_BREAK_SURROGATE() {
        return G_UNICODE_BREAK_SURROGATE;
    }
    private static final int G_UNICODE_BREAK_ZERO_WIDTH_SPACE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5
     * }
     */
    public static int G_UNICODE_BREAK_ZERO_WIDTH_SPACE() {
        return G_UNICODE_BREAK_ZERO_WIDTH_SPACE;
    }
    private static final int G_UNICODE_BREAK_INSEPARABLE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_INSEPARABLE = 6
     * }
     */
    public static int G_UNICODE_BREAK_INSEPARABLE() {
        return G_UNICODE_BREAK_INSEPARABLE;
    }
    private static final int G_UNICODE_BREAK_NON_BREAKING_GLUE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_NON_BREAKING_GLUE = 7
     * }
     */
    public static int G_UNICODE_BREAK_NON_BREAKING_GLUE() {
        return G_UNICODE_BREAK_NON_BREAKING_GLUE;
    }
    private static final int G_UNICODE_BREAK_CONTINGENT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_CONTINGENT = 8
     * }
     */
    public static int G_UNICODE_BREAK_CONTINGENT() {
        return G_UNICODE_BREAK_CONTINGENT;
    }
    private static final int G_UNICODE_BREAK_SPACE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_SPACE = 9
     * }
     */
    public static int G_UNICODE_BREAK_SPACE() {
        return G_UNICODE_BREAK_SPACE;
    }
    private static final int G_UNICODE_BREAK_AFTER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_AFTER = 10
     * }
     */
    public static int G_UNICODE_BREAK_AFTER() {
        return G_UNICODE_BREAK_AFTER;
    }
    private static final int G_UNICODE_BREAK_BEFORE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_BEFORE = 11
     * }
     */
    public static int G_UNICODE_BREAK_BEFORE() {
        return G_UNICODE_BREAK_BEFORE;
    }
    private static final int G_UNICODE_BREAK_BEFORE_AND_AFTER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_BEFORE_AND_AFTER = 12
     * }
     */
    public static int G_UNICODE_BREAK_BEFORE_AND_AFTER() {
        return G_UNICODE_BREAK_BEFORE_AND_AFTER;
    }
    private static final int G_UNICODE_BREAK_HYPHEN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_HYPHEN = 13
     * }
     */
    public static int G_UNICODE_BREAK_HYPHEN() {
        return G_UNICODE_BREAK_HYPHEN;
    }
    private static final int G_UNICODE_BREAK_NON_STARTER = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_NON_STARTER = 14
     * }
     */
    public static int G_UNICODE_BREAK_NON_STARTER() {
        return G_UNICODE_BREAK_NON_STARTER;
    }
    private static final int G_UNICODE_BREAK_OPEN_PUNCTUATION = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_OPEN_PUNCTUATION = 15
     * }
     */
    public static int G_UNICODE_BREAK_OPEN_PUNCTUATION() {
        return G_UNICODE_BREAK_OPEN_PUNCTUATION;
    }
    private static final int G_UNICODE_BREAK_CLOSE_PUNCTUATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16
     * }
     */
    public static int G_UNICODE_BREAK_CLOSE_PUNCTUATION() {
        return G_UNICODE_BREAK_CLOSE_PUNCTUATION;
    }
    private static final int G_UNICODE_BREAK_QUOTATION = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_QUOTATION = 17
     * }
     */
    public static int G_UNICODE_BREAK_QUOTATION() {
        return G_UNICODE_BREAK_QUOTATION;
    }
    private static final int G_UNICODE_BREAK_EXCLAMATION = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_EXCLAMATION = 18
     * }
     */
    public static int G_UNICODE_BREAK_EXCLAMATION() {
        return G_UNICODE_BREAK_EXCLAMATION;
    }
    private static final int G_UNICODE_BREAK_IDEOGRAPHIC = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_IDEOGRAPHIC = 19
     * }
     */
    public static int G_UNICODE_BREAK_IDEOGRAPHIC() {
        return G_UNICODE_BREAK_IDEOGRAPHIC;
    }
    private static final int G_UNICODE_BREAK_NUMERIC = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_NUMERIC = 20
     * }
     */
    public static int G_UNICODE_BREAK_NUMERIC() {
        return G_UNICODE_BREAK_NUMERIC;
    }
    private static final int G_UNICODE_BREAK_INFIX_SEPARATOR = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_INFIX_SEPARATOR = 21
     * }
     */
    public static int G_UNICODE_BREAK_INFIX_SEPARATOR() {
        return G_UNICODE_BREAK_INFIX_SEPARATOR;
    }
    private static final int G_UNICODE_BREAK_SYMBOL = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_SYMBOL = 22
     * }
     */
    public static int G_UNICODE_BREAK_SYMBOL() {
        return G_UNICODE_BREAK_SYMBOL;
    }
    private static final int G_UNICODE_BREAK_ALPHABETIC = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_ALPHABETIC = 23
     * }
     */
    public static int G_UNICODE_BREAK_ALPHABETIC() {
        return G_UNICODE_BREAK_ALPHABETIC;
    }
    private static final int G_UNICODE_BREAK_PREFIX = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_PREFIX = 24
     * }
     */
    public static int G_UNICODE_BREAK_PREFIX() {
        return G_UNICODE_BREAK_PREFIX;
    }
    private static final int G_UNICODE_BREAK_POSTFIX = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_POSTFIX = 25
     * }
     */
    public static int G_UNICODE_BREAK_POSTFIX() {
        return G_UNICODE_BREAK_POSTFIX;
    }
    private static final int G_UNICODE_BREAK_COMPLEX_CONTEXT = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_COMPLEX_CONTEXT = 26
     * }
     */
    public static int G_UNICODE_BREAK_COMPLEX_CONTEXT() {
        return G_UNICODE_BREAK_COMPLEX_CONTEXT;
    }
    private static final int G_UNICODE_BREAK_AMBIGUOUS = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_AMBIGUOUS = 27
     * }
     */
    public static int G_UNICODE_BREAK_AMBIGUOUS() {
        return G_UNICODE_BREAK_AMBIGUOUS;
    }
    private static final int G_UNICODE_BREAK_UNKNOWN = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_UNKNOWN = 28
     * }
     */
    public static int G_UNICODE_BREAK_UNKNOWN() {
        return G_UNICODE_BREAK_UNKNOWN;
    }
    private static final int G_UNICODE_BREAK_NEXT_LINE = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_NEXT_LINE = 29
     * }
     */
    public static int G_UNICODE_BREAK_NEXT_LINE() {
        return G_UNICODE_BREAK_NEXT_LINE;
    }
    private static final int G_UNICODE_BREAK_WORD_JOINER = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_WORD_JOINER = 30
     * }
     */
    public static int G_UNICODE_BREAK_WORD_JOINER() {
        return G_UNICODE_BREAK_WORD_JOINER;
    }
    private static final int G_UNICODE_BREAK_HANGUL_L_JAMO = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_HANGUL_L_JAMO = 31
     * }
     */
    public static int G_UNICODE_BREAK_HANGUL_L_JAMO() {
        return G_UNICODE_BREAK_HANGUL_L_JAMO;
    }
    private static final int G_UNICODE_BREAK_HANGUL_V_JAMO = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_HANGUL_V_JAMO = 32
     * }
     */
    public static int G_UNICODE_BREAK_HANGUL_V_JAMO() {
        return G_UNICODE_BREAK_HANGUL_V_JAMO;
    }
    private static final int G_UNICODE_BREAK_HANGUL_T_JAMO = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_HANGUL_T_JAMO = 33
     * }
     */
    public static int G_UNICODE_BREAK_HANGUL_T_JAMO() {
        return G_UNICODE_BREAK_HANGUL_T_JAMO;
    }
    private static final int G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34
     * }
     */
    public static int G_UNICODE_BREAK_HANGUL_LV_SYLLABLE() {
        return G_UNICODE_BREAK_HANGUL_LV_SYLLABLE;
    }
    private static final int G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35
     * }
     */
    public static int G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE() {
        return G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE;
    }
    private static final int G_UNICODE_BREAK_CLOSE_PARANTHESIS = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36
     * }
     */
    public static int G_UNICODE_BREAK_CLOSE_PARANTHESIS() {
        return G_UNICODE_BREAK_CLOSE_PARANTHESIS;
    }
    private static final int G_UNICODE_BREAK_CLOSE_PARENTHESIS = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_CLOSE_PARENTHESIS = 36
     * }
     */
    public static int G_UNICODE_BREAK_CLOSE_PARENTHESIS() {
        return G_UNICODE_BREAK_CLOSE_PARENTHESIS;
    }
    private static final int G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37
     * }
     */
    public static int G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER() {
        return G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER;
    }
    private static final int G_UNICODE_BREAK_HEBREW_LETTER = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_HEBREW_LETTER = 38
     * }
     */
    public static int G_UNICODE_BREAK_HEBREW_LETTER() {
        return G_UNICODE_BREAK_HEBREW_LETTER;
    }
    private static final int G_UNICODE_BREAK_REGIONAL_INDICATOR = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_REGIONAL_INDICATOR = 39
     * }
     */
    public static int G_UNICODE_BREAK_REGIONAL_INDICATOR() {
        return G_UNICODE_BREAK_REGIONAL_INDICATOR;
    }
    private static final int G_UNICODE_BREAK_EMOJI_BASE = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_EMOJI_BASE = 40
     * }
     */
    public static int G_UNICODE_BREAK_EMOJI_BASE() {
        return G_UNICODE_BREAK_EMOJI_BASE;
    }
    private static final int G_UNICODE_BREAK_EMOJI_MODIFIER = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_EMOJI_MODIFIER = 41
     * }
     */
    public static int G_UNICODE_BREAK_EMOJI_MODIFIER() {
        return G_UNICODE_BREAK_EMOJI_MODIFIER;
    }
    private static final int G_UNICODE_BREAK_ZERO_WIDTH_JOINER = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_BREAK_ZERO_WIDTH_JOINER = 42
     * }
     */
    public static int G_UNICODE_BREAK_ZERO_WIDTH_JOINER() {
        return G_UNICODE_BREAK_ZERO_WIDTH_JOINER;
    }
    private static final int G_UNICODE_SCRIPT_INVALID_CODE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_INVALID_CODE = -1
     * }
     */
    public static int G_UNICODE_SCRIPT_INVALID_CODE() {
        return G_UNICODE_SCRIPT_INVALID_CODE;
    }
    private static final int G_UNICODE_SCRIPT_COMMON = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_COMMON = 0
     * }
     */
    public static int G_UNICODE_SCRIPT_COMMON() {
        return G_UNICODE_SCRIPT_COMMON;
    }
    private static final int G_UNICODE_SCRIPT_INHERITED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_INHERITED = 1
     * }
     */
    public static int G_UNICODE_SCRIPT_INHERITED() {
        return G_UNICODE_SCRIPT_INHERITED;
    }
    private static final int G_UNICODE_SCRIPT_ARABIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ARABIC = 2
     * }
     */
    public static int G_UNICODE_SCRIPT_ARABIC() {
        return G_UNICODE_SCRIPT_ARABIC;
    }
    private static final int G_UNICODE_SCRIPT_ARMENIAN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ARMENIAN = 3
     * }
     */
    public static int G_UNICODE_SCRIPT_ARMENIAN() {
        return G_UNICODE_SCRIPT_ARMENIAN;
    }
    private static final int G_UNICODE_SCRIPT_BENGALI = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BENGALI = 4
     * }
     */
    public static int G_UNICODE_SCRIPT_BENGALI() {
        return G_UNICODE_SCRIPT_BENGALI;
    }
    private static final int G_UNICODE_SCRIPT_BOPOMOFO = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BOPOMOFO = 5
     * }
     */
    public static int G_UNICODE_SCRIPT_BOPOMOFO() {
        return G_UNICODE_SCRIPT_BOPOMOFO;
    }
    private static final int G_UNICODE_SCRIPT_CHEROKEE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CHEROKEE = 6
     * }
     */
    public static int G_UNICODE_SCRIPT_CHEROKEE() {
        return G_UNICODE_SCRIPT_CHEROKEE;
    }
    private static final int G_UNICODE_SCRIPT_COPTIC = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_COPTIC = 7
     * }
     */
    public static int G_UNICODE_SCRIPT_COPTIC() {
        return G_UNICODE_SCRIPT_COPTIC;
    }
    private static final int G_UNICODE_SCRIPT_CYRILLIC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CYRILLIC = 8
     * }
     */
    public static int G_UNICODE_SCRIPT_CYRILLIC() {
        return G_UNICODE_SCRIPT_CYRILLIC;
    }
    private static final int G_UNICODE_SCRIPT_DESERET = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_DESERET = 9
     * }
     */
    public static int G_UNICODE_SCRIPT_DESERET() {
        return G_UNICODE_SCRIPT_DESERET;
    }
    private static final int G_UNICODE_SCRIPT_DEVANAGARI = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_DEVANAGARI = 10
     * }
     */
    public static int G_UNICODE_SCRIPT_DEVANAGARI() {
        return G_UNICODE_SCRIPT_DEVANAGARI;
    }
    private static final int G_UNICODE_SCRIPT_ETHIOPIC = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ETHIOPIC = 11
     * }
     */
    public static int G_UNICODE_SCRIPT_ETHIOPIC() {
        return G_UNICODE_SCRIPT_ETHIOPIC;
    }
    private static final int G_UNICODE_SCRIPT_GEORGIAN = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GEORGIAN = 12
     * }
     */
    public static int G_UNICODE_SCRIPT_GEORGIAN() {
        return G_UNICODE_SCRIPT_GEORGIAN;
    }
    private static final int G_UNICODE_SCRIPT_GOTHIC = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GOTHIC = 13
     * }
     */
    public static int G_UNICODE_SCRIPT_GOTHIC() {
        return G_UNICODE_SCRIPT_GOTHIC;
    }
    private static final int G_UNICODE_SCRIPT_GREEK = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GREEK = 14
     * }
     */
    public static int G_UNICODE_SCRIPT_GREEK() {
        return G_UNICODE_SCRIPT_GREEK;
    }
    private static final int G_UNICODE_SCRIPT_GUJARATI = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GUJARATI = 15
     * }
     */
    public static int G_UNICODE_SCRIPT_GUJARATI() {
        return G_UNICODE_SCRIPT_GUJARATI;
    }
    private static final int G_UNICODE_SCRIPT_GURMUKHI = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GURMUKHI = 16
     * }
     */
    public static int G_UNICODE_SCRIPT_GURMUKHI() {
        return G_UNICODE_SCRIPT_GURMUKHI;
    }
    private static final int G_UNICODE_SCRIPT_HAN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_HAN = 17
     * }
     */
    public static int G_UNICODE_SCRIPT_HAN() {
        return G_UNICODE_SCRIPT_HAN;
    }
    private static final int G_UNICODE_SCRIPT_HANGUL = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_HANGUL = 18
     * }
     */
    public static int G_UNICODE_SCRIPT_HANGUL() {
        return G_UNICODE_SCRIPT_HANGUL;
    }
    private static final int G_UNICODE_SCRIPT_HEBREW = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_HEBREW = 19
     * }
     */
    public static int G_UNICODE_SCRIPT_HEBREW() {
        return G_UNICODE_SCRIPT_HEBREW;
    }
    private static final int G_UNICODE_SCRIPT_HIRAGANA = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_HIRAGANA = 20
     * }
     */
    public static int G_UNICODE_SCRIPT_HIRAGANA() {
        return G_UNICODE_SCRIPT_HIRAGANA;
    }
    private static final int G_UNICODE_SCRIPT_KANNADA = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KANNADA = 21
     * }
     */
    public static int G_UNICODE_SCRIPT_KANNADA() {
        return G_UNICODE_SCRIPT_KANNADA;
    }
    private static final int G_UNICODE_SCRIPT_KATAKANA = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KATAKANA = 22
     * }
     */
    public static int G_UNICODE_SCRIPT_KATAKANA() {
        return G_UNICODE_SCRIPT_KATAKANA;
    }
    private static final int G_UNICODE_SCRIPT_KHMER = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KHMER = 23
     * }
     */
    public static int G_UNICODE_SCRIPT_KHMER() {
        return G_UNICODE_SCRIPT_KHMER;
    }
    private static final int G_UNICODE_SCRIPT_LAO = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LAO = 24
     * }
     */
    public static int G_UNICODE_SCRIPT_LAO() {
        return G_UNICODE_SCRIPT_LAO;
    }
    private static final int G_UNICODE_SCRIPT_LATIN = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LATIN = 25
     * }
     */
    public static int G_UNICODE_SCRIPT_LATIN() {
        return G_UNICODE_SCRIPT_LATIN;
    }
    private static final int G_UNICODE_SCRIPT_MALAYALAM = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MALAYALAM = 26
     * }
     */
    public static int G_UNICODE_SCRIPT_MALAYALAM() {
        return G_UNICODE_SCRIPT_MALAYALAM;
    }
    private static final int G_UNICODE_SCRIPT_MONGOLIAN = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MONGOLIAN = 27
     * }
     */
    public static int G_UNICODE_SCRIPT_MONGOLIAN() {
        return G_UNICODE_SCRIPT_MONGOLIAN;
    }
    private static final int G_UNICODE_SCRIPT_MYANMAR = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MYANMAR = 28
     * }
     */
    public static int G_UNICODE_SCRIPT_MYANMAR() {
        return G_UNICODE_SCRIPT_MYANMAR;
    }
    private static final int G_UNICODE_SCRIPT_OGHAM = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OGHAM = 29
     * }
     */
    public static int G_UNICODE_SCRIPT_OGHAM() {
        return G_UNICODE_SCRIPT_OGHAM;
    }
    private static final int G_UNICODE_SCRIPT_OLD_ITALIC = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_ITALIC = 30
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_ITALIC() {
        return G_UNICODE_SCRIPT_OLD_ITALIC;
    }
    private static final int G_UNICODE_SCRIPT_ORIYA = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ORIYA = 31
     * }
     */
    public static int G_UNICODE_SCRIPT_ORIYA() {
        return G_UNICODE_SCRIPT_ORIYA;
    }
    private static final int G_UNICODE_SCRIPT_RUNIC = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_RUNIC = 32
     * }
     */
    public static int G_UNICODE_SCRIPT_RUNIC() {
        return G_UNICODE_SCRIPT_RUNIC;
    }
    private static final int G_UNICODE_SCRIPT_SINHALA = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SINHALA = 33
     * }
     */
    public static int G_UNICODE_SCRIPT_SINHALA() {
        return G_UNICODE_SCRIPT_SINHALA;
    }
    private static final int G_UNICODE_SCRIPT_SYRIAC = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SYRIAC = 34
     * }
     */
    public static int G_UNICODE_SCRIPT_SYRIAC() {
        return G_UNICODE_SCRIPT_SYRIAC;
    }
    private static final int G_UNICODE_SCRIPT_TAMIL = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TAMIL = 35
     * }
     */
    public static int G_UNICODE_SCRIPT_TAMIL() {
        return G_UNICODE_SCRIPT_TAMIL;
    }
    private static final int G_UNICODE_SCRIPT_TELUGU = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TELUGU = 36
     * }
     */
    public static int G_UNICODE_SCRIPT_TELUGU() {
        return G_UNICODE_SCRIPT_TELUGU;
    }
    private static final int G_UNICODE_SCRIPT_THAANA = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_THAANA = 37
     * }
     */
    public static int G_UNICODE_SCRIPT_THAANA() {
        return G_UNICODE_SCRIPT_THAANA;
    }
    private static final int G_UNICODE_SCRIPT_THAI = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_THAI = 38
     * }
     */
    public static int G_UNICODE_SCRIPT_THAI() {
        return G_UNICODE_SCRIPT_THAI;
    }
    private static final int G_UNICODE_SCRIPT_TIBETAN = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TIBETAN = 39
     * }
     */
    public static int G_UNICODE_SCRIPT_TIBETAN() {
        return G_UNICODE_SCRIPT_TIBETAN;
    }
    private static final int G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40
     * }
     */
    public static int G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL() {
        return G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL;
    }
    private static final int G_UNICODE_SCRIPT_YI = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_YI = 41
     * }
     */
    public static int G_UNICODE_SCRIPT_YI() {
        return G_UNICODE_SCRIPT_YI;
    }
    private static final int G_UNICODE_SCRIPT_TAGALOG = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TAGALOG = 42
     * }
     */
    public static int G_UNICODE_SCRIPT_TAGALOG() {
        return G_UNICODE_SCRIPT_TAGALOG;
    }
    private static final int G_UNICODE_SCRIPT_HANUNOO = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_HANUNOO = 43
     * }
     */
    public static int G_UNICODE_SCRIPT_HANUNOO() {
        return G_UNICODE_SCRIPT_HANUNOO;
    }
    private static final int G_UNICODE_SCRIPT_BUHID = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BUHID = 44
     * }
     */
    public static int G_UNICODE_SCRIPT_BUHID() {
        return G_UNICODE_SCRIPT_BUHID;
    }
    private static final int G_UNICODE_SCRIPT_TAGBANWA = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TAGBANWA = 45
     * }
     */
    public static int G_UNICODE_SCRIPT_TAGBANWA() {
        return G_UNICODE_SCRIPT_TAGBANWA;
    }
    private static final int G_UNICODE_SCRIPT_BRAILLE = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BRAILLE = 46
     * }
     */
    public static int G_UNICODE_SCRIPT_BRAILLE() {
        return G_UNICODE_SCRIPT_BRAILLE;
    }
    private static final int G_UNICODE_SCRIPT_CYPRIOT = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CYPRIOT = 47
     * }
     */
    public static int G_UNICODE_SCRIPT_CYPRIOT() {
        return G_UNICODE_SCRIPT_CYPRIOT;
    }
    private static final int G_UNICODE_SCRIPT_LIMBU = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LIMBU = 48
     * }
     */
    public static int G_UNICODE_SCRIPT_LIMBU() {
        return G_UNICODE_SCRIPT_LIMBU;
    }
    private static final int G_UNICODE_SCRIPT_OSMANYA = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OSMANYA = 49
     * }
     */
    public static int G_UNICODE_SCRIPT_OSMANYA() {
        return G_UNICODE_SCRIPT_OSMANYA;
    }
    private static final int G_UNICODE_SCRIPT_SHAVIAN = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SHAVIAN = 50
     * }
     */
    public static int G_UNICODE_SCRIPT_SHAVIAN() {
        return G_UNICODE_SCRIPT_SHAVIAN;
    }
    private static final int G_UNICODE_SCRIPT_LINEAR_B = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LINEAR_B = 51
     * }
     */
    public static int G_UNICODE_SCRIPT_LINEAR_B() {
        return G_UNICODE_SCRIPT_LINEAR_B;
    }
    private static final int G_UNICODE_SCRIPT_TAI_LE = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TAI_LE = 52
     * }
     */
    public static int G_UNICODE_SCRIPT_TAI_LE() {
        return G_UNICODE_SCRIPT_TAI_LE;
    }
    private static final int G_UNICODE_SCRIPT_UGARITIC = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_UGARITIC = 53
     * }
     */
    public static int G_UNICODE_SCRIPT_UGARITIC() {
        return G_UNICODE_SCRIPT_UGARITIC;
    }
    private static final int G_UNICODE_SCRIPT_NEW_TAI_LUE = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NEW_TAI_LUE = 54
     * }
     */
    public static int G_UNICODE_SCRIPT_NEW_TAI_LUE() {
        return G_UNICODE_SCRIPT_NEW_TAI_LUE;
    }
    private static final int G_UNICODE_SCRIPT_BUGINESE = (int)55L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BUGINESE = 55
     * }
     */
    public static int G_UNICODE_SCRIPT_BUGINESE() {
        return G_UNICODE_SCRIPT_BUGINESE;
    }
    private static final int G_UNICODE_SCRIPT_GLAGOLITIC = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GLAGOLITIC = 56
     * }
     */
    public static int G_UNICODE_SCRIPT_GLAGOLITIC() {
        return G_UNICODE_SCRIPT_GLAGOLITIC;
    }
    private static final int G_UNICODE_SCRIPT_TIFINAGH = (int)57L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TIFINAGH = 57
     * }
     */
    public static int G_UNICODE_SCRIPT_TIFINAGH() {
        return G_UNICODE_SCRIPT_TIFINAGH;
    }
    private static final int G_UNICODE_SCRIPT_SYLOTI_NAGRI = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58
     * }
     */
    public static int G_UNICODE_SCRIPT_SYLOTI_NAGRI() {
        return G_UNICODE_SCRIPT_SYLOTI_NAGRI;
    }
    private static final int G_UNICODE_SCRIPT_OLD_PERSIAN = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_PERSIAN = 59
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_PERSIAN() {
        return G_UNICODE_SCRIPT_OLD_PERSIAN;
    }
    private static final int G_UNICODE_SCRIPT_KHAROSHTHI = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KHAROSHTHI = 60
     * }
     */
    public static int G_UNICODE_SCRIPT_KHAROSHTHI() {
        return G_UNICODE_SCRIPT_KHAROSHTHI;
    }
    private static final int G_UNICODE_SCRIPT_UNKNOWN = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_UNKNOWN = 61
     * }
     */
    public static int G_UNICODE_SCRIPT_UNKNOWN() {
        return G_UNICODE_SCRIPT_UNKNOWN;
    }
    private static final int G_UNICODE_SCRIPT_BALINESE = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BALINESE = 62
     * }
     */
    public static int G_UNICODE_SCRIPT_BALINESE() {
        return G_UNICODE_SCRIPT_BALINESE;
    }
    private static final int G_UNICODE_SCRIPT_CUNEIFORM = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CUNEIFORM = 63
     * }
     */
    public static int G_UNICODE_SCRIPT_CUNEIFORM() {
        return G_UNICODE_SCRIPT_CUNEIFORM;
    }
    private static final int G_UNICODE_SCRIPT_PHOENICIAN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_PHOENICIAN = 64
     * }
     */
    public static int G_UNICODE_SCRIPT_PHOENICIAN() {
        return G_UNICODE_SCRIPT_PHOENICIAN;
    }
    private static final int G_UNICODE_SCRIPT_PHAGS_PA = (int)65L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_PHAGS_PA = 65
     * }
     */
    public static int G_UNICODE_SCRIPT_PHAGS_PA() {
        return G_UNICODE_SCRIPT_PHAGS_PA;
    }
    private static final int G_UNICODE_SCRIPT_NKO = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NKO = 66
     * }
     */
    public static int G_UNICODE_SCRIPT_NKO() {
        return G_UNICODE_SCRIPT_NKO;
    }
    private static final int G_UNICODE_SCRIPT_KAYAH_LI = (int)67L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KAYAH_LI = 67
     * }
     */
    public static int G_UNICODE_SCRIPT_KAYAH_LI() {
        return G_UNICODE_SCRIPT_KAYAH_LI;
    }
    private static final int G_UNICODE_SCRIPT_LEPCHA = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LEPCHA = 68
     * }
     */
    public static int G_UNICODE_SCRIPT_LEPCHA() {
        return G_UNICODE_SCRIPT_LEPCHA;
    }
    private static final int G_UNICODE_SCRIPT_REJANG = (int)69L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_REJANG = 69
     * }
     */
    public static int G_UNICODE_SCRIPT_REJANG() {
        return G_UNICODE_SCRIPT_REJANG;
    }
    private static final int G_UNICODE_SCRIPT_SUNDANESE = (int)70L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SUNDANESE = 70
     * }
     */
    public static int G_UNICODE_SCRIPT_SUNDANESE() {
        return G_UNICODE_SCRIPT_SUNDANESE;
    }
    private static final int G_UNICODE_SCRIPT_SAURASHTRA = (int)71L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SAURASHTRA = 71
     * }
     */
    public static int G_UNICODE_SCRIPT_SAURASHTRA() {
        return G_UNICODE_SCRIPT_SAURASHTRA;
    }
    private static final int G_UNICODE_SCRIPT_CHAM = (int)72L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CHAM = 72
     * }
     */
    public static int G_UNICODE_SCRIPT_CHAM() {
        return G_UNICODE_SCRIPT_CHAM;
    }
    private static final int G_UNICODE_SCRIPT_OL_CHIKI = (int)73L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OL_CHIKI = 73
     * }
     */
    public static int G_UNICODE_SCRIPT_OL_CHIKI() {
        return G_UNICODE_SCRIPT_OL_CHIKI;
    }
    private static final int G_UNICODE_SCRIPT_VAI = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_VAI = 74
     * }
     */
    public static int G_UNICODE_SCRIPT_VAI() {
        return G_UNICODE_SCRIPT_VAI;
    }
    private static final int G_UNICODE_SCRIPT_CARIAN = (int)75L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CARIAN = 75
     * }
     */
    public static int G_UNICODE_SCRIPT_CARIAN() {
        return G_UNICODE_SCRIPT_CARIAN;
    }
    private static final int G_UNICODE_SCRIPT_LYCIAN = (int)76L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LYCIAN = 76
     * }
     */
    public static int G_UNICODE_SCRIPT_LYCIAN() {
        return G_UNICODE_SCRIPT_LYCIAN;
    }
    private static final int G_UNICODE_SCRIPT_LYDIAN = (int)77L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LYDIAN = 77
     * }
     */
    public static int G_UNICODE_SCRIPT_LYDIAN() {
        return G_UNICODE_SCRIPT_LYDIAN;
    }
    private static final int G_UNICODE_SCRIPT_AVESTAN = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_AVESTAN = 78
     * }
     */
    public static int G_UNICODE_SCRIPT_AVESTAN() {
        return G_UNICODE_SCRIPT_AVESTAN;
    }
    private static final int G_UNICODE_SCRIPT_BAMUM = (int)79L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BAMUM = 79
     * }
     */
    public static int G_UNICODE_SCRIPT_BAMUM() {
        return G_UNICODE_SCRIPT_BAMUM;
    }
    private static final int G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80
     * }
     */
    public static int G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS() {
        return G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS;
    }
    private static final int G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = (int)81L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81
     * }
     */
    public static int G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC() {
        return G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC;
    }
    private static final int G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = (int)82L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82
     * }
     */
    public static int G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI() {
        return G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI;
    }
    private static final int G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = (int)83L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83
     * }
     */
    public static int G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN() {
        return G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN;
    }
    private static final int G_UNICODE_SCRIPT_JAVANESE = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_JAVANESE = 84
     * }
     */
    public static int G_UNICODE_SCRIPT_JAVANESE() {
        return G_UNICODE_SCRIPT_JAVANESE;
    }
    private static final int G_UNICODE_SCRIPT_KAITHI = (int)85L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KAITHI = 85
     * }
     */
    public static int G_UNICODE_SCRIPT_KAITHI() {
        return G_UNICODE_SCRIPT_KAITHI;
    }
    private static final int G_UNICODE_SCRIPT_LISU = (int)86L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LISU = 86
     * }
     */
    public static int G_UNICODE_SCRIPT_LISU() {
        return G_UNICODE_SCRIPT_LISU;
    }
    private static final int G_UNICODE_SCRIPT_MEETEI_MAYEK = (int)87L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MEETEI_MAYEK = 87
     * }
     */
    public static int G_UNICODE_SCRIPT_MEETEI_MAYEK() {
        return G_UNICODE_SCRIPT_MEETEI_MAYEK;
    }
    private static final int G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = (int)88L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN() {
        return G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN;
    }
    private static final int G_UNICODE_SCRIPT_OLD_TURKIC = (int)89L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_TURKIC = 89
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_TURKIC() {
        return G_UNICODE_SCRIPT_OLD_TURKIC;
    }
    private static final int G_UNICODE_SCRIPT_SAMARITAN = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SAMARITAN = 90
     * }
     */
    public static int G_UNICODE_SCRIPT_SAMARITAN() {
        return G_UNICODE_SCRIPT_SAMARITAN;
    }
    private static final int G_UNICODE_SCRIPT_TAI_THAM = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TAI_THAM = 91
     * }
     */
    public static int G_UNICODE_SCRIPT_TAI_THAM() {
        return G_UNICODE_SCRIPT_TAI_THAM;
    }
    private static final int G_UNICODE_SCRIPT_TAI_VIET = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TAI_VIET = 92
     * }
     */
    public static int G_UNICODE_SCRIPT_TAI_VIET() {
        return G_UNICODE_SCRIPT_TAI_VIET;
    }
    private static final int G_UNICODE_SCRIPT_BATAK = (int)93L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BATAK = 93
     * }
     */
    public static int G_UNICODE_SCRIPT_BATAK() {
        return G_UNICODE_SCRIPT_BATAK;
    }
    private static final int G_UNICODE_SCRIPT_BRAHMI = (int)94L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BRAHMI = 94
     * }
     */
    public static int G_UNICODE_SCRIPT_BRAHMI() {
        return G_UNICODE_SCRIPT_BRAHMI;
    }
    private static final int G_UNICODE_SCRIPT_MANDAIC = (int)95L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MANDAIC = 95
     * }
     */
    public static int G_UNICODE_SCRIPT_MANDAIC() {
        return G_UNICODE_SCRIPT_MANDAIC;
    }
    private static final int G_UNICODE_SCRIPT_CHAKMA = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CHAKMA = 96
     * }
     */
    public static int G_UNICODE_SCRIPT_CHAKMA() {
        return G_UNICODE_SCRIPT_CHAKMA;
    }
    private static final int G_UNICODE_SCRIPT_MEROITIC_CURSIVE = (int)97L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97
     * }
     */
    public static int G_UNICODE_SCRIPT_MEROITIC_CURSIVE() {
        return G_UNICODE_SCRIPT_MEROITIC_CURSIVE;
    }
    private static final int G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98
     * }
     */
    public static int G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS() {
        return G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS;
    }
    private static final int G_UNICODE_SCRIPT_MIAO = (int)99L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MIAO = 99
     * }
     */
    public static int G_UNICODE_SCRIPT_MIAO() {
        return G_UNICODE_SCRIPT_MIAO;
    }
    private static final int G_UNICODE_SCRIPT_SHARADA = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SHARADA = 100
     * }
     */
    public static int G_UNICODE_SCRIPT_SHARADA() {
        return G_UNICODE_SCRIPT_SHARADA;
    }
    private static final int G_UNICODE_SCRIPT_SORA_SOMPENG = (int)101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SORA_SOMPENG = 101
     * }
     */
    public static int G_UNICODE_SCRIPT_SORA_SOMPENG() {
        return G_UNICODE_SCRIPT_SORA_SOMPENG;
    }
    private static final int G_UNICODE_SCRIPT_TAKRI = (int)102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TAKRI = 102
     * }
     */
    public static int G_UNICODE_SCRIPT_TAKRI() {
        return G_UNICODE_SCRIPT_TAKRI;
    }
    private static final int G_UNICODE_SCRIPT_BASSA_VAH = (int)103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BASSA_VAH = 103
     * }
     */
    public static int G_UNICODE_SCRIPT_BASSA_VAH() {
        return G_UNICODE_SCRIPT_BASSA_VAH;
    }
    private static final int G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = (int)104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104
     * }
     */
    public static int G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN() {
        return G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN;
    }
    private static final int G_UNICODE_SCRIPT_DUPLOYAN = (int)105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_DUPLOYAN = 105
     * }
     */
    public static int G_UNICODE_SCRIPT_DUPLOYAN() {
        return G_UNICODE_SCRIPT_DUPLOYAN;
    }
    private static final int G_UNICODE_SCRIPT_ELBASAN = (int)106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ELBASAN = 106
     * }
     */
    public static int G_UNICODE_SCRIPT_ELBASAN() {
        return G_UNICODE_SCRIPT_ELBASAN;
    }
    private static final int G_UNICODE_SCRIPT_GRANTHA = (int)107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GRANTHA = 107
     * }
     */
    public static int G_UNICODE_SCRIPT_GRANTHA() {
        return G_UNICODE_SCRIPT_GRANTHA;
    }
    private static final int G_UNICODE_SCRIPT_KHOJKI = (int)108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KHOJKI = 108
     * }
     */
    public static int G_UNICODE_SCRIPT_KHOJKI() {
        return G_UNICODE_SCRIPT_KHOJKI;
    }
    private static final int G_UNICODE_SCRIPT_KHUDAWADI = (int)109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KHUDAWADI = 109
     * }
     */
    public static int G_UNICODE_SCRIPT_KHUDAWADI() {
        return G_UNICODE_SCRIPT_KHUDAWADI;
    }
    private static final int G_UNICODE_SCRIPT_LINEAR_A = (int)110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_LINEAR_A = 110
     * }
     */
    public static int G_UNICODE_SCRIPT_LINEAR_A() {
        return G_UNICODE_SCRIPT_LINEAR_A;
    }
    private static final int G_UNICODE_SCRIPT_MAHAJANI = (int)111L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MAHAJANI = 111
     * }
     */
    public static int G_UNICODE_SCRIPT_MAHAJANI() {
        return G_UNICODE_SCRIPT_MAHAJANI;
    }
    private static final int G_UNICODE_SCRIPT_MANICHAEAN = (int)112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MANICHAEAN = 112
     * }
     */
    public static int G_UNICODE_SCRIPT_MANICHAEAN() {
        return G_UNICODE_SCRIPT_MANICHAEAN;
    }
    private static final int G_UNICODE_SCRIPT_MENDE_KIKAKUI = (int)113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113
     * }
     */
    public static int G_UNICODE_SCRIPT_MENDE_KIKAKUI() {
        return G_UNICODE_SCRIPT_MENDE_KIKAKUI;
    }
    private static final int G_UNICODE_SCRIPT_MODI = (int)114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MODI = 114
     * }
     */
    public static int G_UNICODE_SCRIPT_MODI() {
        return G_UNICODE_SCRIPT_MODI;
    }
    private static final int G_UNICODE_SCRIPT_MRO = (int)115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MRO = 115
     * }
     */
    public static int G_UNICODE_SCRIPT_MRO() {
        return G_UNICODE_SCRIPT_MRO;
    }
    private static final int G_UNICODE_SCRIPT_NABATAEAN = (int)116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NABATAEAN = 116
     * }
     */
    public static int G_UNICODE_SCRIPT_NABATAEAN() {
        return G_UNICODE_SCRIPT_NABATAEAN;
    }
    private static final int G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = (int)117L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN() {
        return G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN;
    }
    private static final int G_UNICODE_SCRIPT_OLD_PERMIC = (int)118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_PERMIC = 118
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_PERMIC() {
        return G_UNICODE_SCRIPT_OLD_PERMIC;
    }
    private static final int G_UNICODE_SCRIPT_PAHAWH_HMONG = (int)119L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_PAHAWH_HMONG = 119
     * }
     */
    public static int G_UNICODE_SCRIPT_PAHAWH_HMONG() {
        return G_UNICODE_SCRIPT_PAHAWH_HMONG;
    }
    private static final int G_UNICODE_SCRIPT_PALMYRENE = (int)120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_PALMYRENE = 120
     * }
     */
    public static int G_UNICODE_SCRIPT_PALMYRENE() {
        return G_UNICODE_SCRIPT_PALMYRENE;
    }
    private static final int G_UNICODE_SCRIPT_PAU_CIN_HAU = (int)121L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_PAU_CIN_HAU = 121
     * }
     */
    public static int G_UNICODE_SCRIPT_PAU_CIN_HAU() {
        return G_UNICODE_SCRIPT_PAU_CIN_HAU;
    }
    private static final int G_UNICODE_SCRIPT_PSALTER_PAHLAVI = (int)122L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122
     * }
     */
    public static int G_UNICODE_SCRIPT_PSALTER_PAHLAVI() {
        return G_UNICODE_SCRIPT_PSALTER_PAHLAVI;
    }
    private static final int G_UNICODE_SCRIPT_SIDDHAM = (int)123L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SIDDHAM = 123
     * }
     */
    public static int G_UNICODE_SCRIPT_SIDDHAM() {
        return G_UNICODE_SCRIPT_SIDDHAM;
    }
    private static final int G_UNICODE_SCRIPT_TIRHUTA = (int)124L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TIRHUTA = 124
     * }
     */
    public static int G_UNICODE_SCRIPT_TIRHUTA() {
        return G_UNICODE_SCRIPT_TIRHUTA;
    }
    private static final int G_UNICODE_SCRIPT_WARANG_CITI = (int)125L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_WARANG_CITI = 125
     * }
     */
    public static int G_UNICODE_SCRIPT_WARANG_CITI() {
        return G_UNICODE_SCRIPT_WARANG_CITI;
    }
    private static final int G_UNICODE_SCRIPT_AHOM = (int)126L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_AHOM = 126
     * }
     */
    public static int G_UNICODE_SCRIPT_AHOM() {
        return G_UNICODE_SCRIPT_AHOM;
    }
    private static final int G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = (int)127L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127
     * }
     */
    public static int G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS() {
        return G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS;
    }
    private static final int G_UNICODE_SCRIPT_HATRAN = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_HATRAN = 128
     * }
     */
    public static int G_UNICODE_SCRIPT_HATRAN() {
        return G_UNICODE_SCRIPT_HATRAN;
    }
    private static final int G_UNICODE_SCRIPT_MULTANI = (int)129L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MULTANI = 129
     * }
     */
    public static int G_UNICODE_SCRIPT_MULTANI() {
        return G_UNICODE_SCRIPT_MULTANI;
    }
    private static final int G_UNICODE_SCRIPT_OLD_HUNGARIAN = (int)130L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_HUNGARIAN() {
        return G_UNICODE_SCRIPT_OLD_HUNGARIAN;
    }
    private static final int G_UNICODE_SCRIPT_SIGNWRITING = (int)131L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SIGNWRITING = 131
     * }
     */
    public static int G_UNICODE_SCRIPT_SIGNWRITING() {
        return G_UNICODE_SCRIPT_SIGNWRITING;
    }
    private static final int G_UNICODE_SCRIPT_ADLAM = (int)132L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ADLAM = 132
     * }
     */
    public static int G_UNICODE_SCRIPT_ADLAM() {
        return G_UNICODE_SCRIPT_ADLAM;
    }
    private static final int G_UNICODE_SCRIPT_BHAIKSUKI = (int)133L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_BHAIKSUKI = 133
     * }
     */
    public static int G_UNICODE_SCRIPT_BHAIKSUKI() {
        return G_UNICODE_SCRIPT_BHAIKSUKI;
    }
    private static final int G_UNICODE_SCRIPT_MARCHEN = (int)134L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MARCHEN = 134
     * }
     */
    public static int G_UNICODE_SCRIPT_MARCHEN() {
        return G_UNICODE_SCRIPT_MARCHEN;
    }
    private static final int G_UNICODE_SCRIPT_NEWA = (int)135L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NEWA = 135
     * }
     */
    public static int G_UNICODE_SCRIPT_NEWA() {
        return G_UNICODE_SCRIPT_NEWA;
    }
    private static final int G_UNICODE_SCRIPT_OSAGE = (int)136L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OSAGE = 136
     * }
     */
    public static int G_UNICODE_SCRIPT_OSAGE() {
        return G_UNICODE_SCRIPT_OSAGE;
    }
    private static final int G_UNICODE_SCRIPT_TANGUT = (int)137L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TANGUT = 137
     * }
     */
    public static int G_UNICODE_SCRIPT_TANGUT() {
        return G_UNICODE_SCRIPT_TANGUT;
    }
    private static final int G_UNICODE_SCRIPT_MASARAM_GONDI = (int)138L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MASARAM_GONDI = 138
     * }
     */
    public static int G_UNICODE_SCRIPT_MASARAM_GONDI() {
        return G_UNICODE_SCRIPT_MASARAM_GONDI;
    }
    private static final int G_UNICODE_SCRIPT_NUSHU = (int)139L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NUSHU = 139
     * }
     */
    public static int G_UNICODE_SCRIPT_NUSHU() {
        return G_UNICODE_SCRIPT_NUSHU;
    }
    private static final int G_UNICODE_SCRIPT_SOYOMBO = (int)140L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SOYOMBO = 140
     * }
     */
    public static int G_UNICODE_SCRIPT_SOYOMBO() {
        return G_UNICODE_SCRIPT_SOYOMBO;
    }
    private static final int G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = (int)141L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = 141
     * }
     */
    public static int G_UNICODE_SCRIPT_ZANABAZAR_SQUARE() {
        return G_UNICODE_SCRIPT_ZANABAZAR_SQUARE;
    }
    private static final int G_UNICODE_SCRIPT_DOGRA = (int)142L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_DOGRA = 142
     * }
     */
    public static int G_UNICODE_SCRIPT_DOGRA() {
        return G_UNICODE_SCRIPT_DOGRA;
    }
    private static final int G_UNICODE_SCRIPT_GUNJALA_GONDI = (int)143L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_GUNJALA_GONDI = 143
     * }
     */
    public static int G_UNICODE_SCRIPT_GUNJALA_GONDI() {
        return G_UNICODE_SCRIPT_GUNJALA_GONDI;
    }
    private static final int G_UNICODE_SCRIPT_HANIFI_ROHINGYA = (int)144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_HANIFI_ROHINGYA = 144
     * }
     */
    public static int G_UNICODE_SCRIPT_HANIFI_ROHINGYA() {
        return G_UNICODE_SCRIPT_HANIFI_ROHINGYA;
    }
    private static final int G_UNICODE_SCRIPT_MAKASAR = (int)145L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MAKASAR = 145
     * }
     */
    public static int G_UNICODE_SCRIPT_MAKASAR() {
        return G_UNICODE_SCRIPT_MAKASAR;
    }
    private static final int G_UNICODE_SCRIPT_MEDEFAIDRIN = (int)146L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MEDEFAIDRIN = 146
     * }
     */
    public static int G_UNICODE_SCRIPT_MEDEFAIDRIN() {
        return G_UNICODE_SCRIPT_MEDEFAIDRIN;
    }
    private static final int G_UNICODE_SCRIPT_OLD_SOGDIAN = (int)147L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_SOGDIAN = 147
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_SOGDIAN() {
        return G_UNICODE_SCRIPT_OLD_SOGDIAN;
    }
    private static final int G_UNICODE_SCRIPT_SOGDIAN = (int)148L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_SOGDIAN = 148
     * }
     */
    public static int G_UNICODE_SCRIPT_SOGDIAN() {
        return G_UNICODE_SCRIPT_SOGDIAN;
    }
    private static final int G_UNICODE_SCRIPT_ELYMAIC = (int)149L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_ELYMAIC = 149
     * }
     */
    public static int G_UNICODE_SCRIPT_ELYMAIC() {
        return G_UNICODE_SCRIPT_ELYMAIC;
    }
    private static final int G_UNICODE_SCRIPT_NANDINAGARI = (int)150L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NANDINAGARI = 150
     * }
     */
    public static int G_UNICODE_SCRIPT_NANDINAGARI() {
        return G_UNICODE_SCRIPT_NANDINAGARI;
    }
    private static final int G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG = (int)151L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG = 151
     * }
     */
    public static int G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG() {
        return G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG;
    }
    private static final int G_UNICODE_SCRIPT_WANCHO = (int)152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_WANCHO = 152
     * }
     */
    public static int G_UNICODE_SCRIPT_WANCHO() {
        return G_UNICODE_SCRIPT_WANCHO;
    }
    private static final int G_UNICODE_SCRIPT_CHORASMIAN = (int)153L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CHORASMIAN = 153
     * }
     */
    public static int G_UNICODE_SCRIPT_CHORASMIAN() {
        return G_UNICODE_SCRIPT_CHORASMIAN;
    }
    private static final int G_UNICODE_SCRIPT_DIVES_AKURU = (int)154L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_DIVES_AKURU = 154
     * }
     */
    public static int G_UNICODE_SCRIPT_DIVES_AKURU() {
        return G_UNICODE_SCRIPT_DIVES_AKURU;
    }
    private static final int G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT = (int)155L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT = 155
     * }
     */
    public static int G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT() {
        return G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT;
    }
    private static final int G_UNICODE_SCRIPT_YEZIDI = (int)156L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_YEZIDI = 156
     * }
     */
    public static int G_UNICODE_SCRIPT_YEZIDI() {
        return G_UNICODE_SCRIPT_YEZIDI;
    }
    private static final int G_UNICODE_SCRIPT_CYPRO_MINOAN = (int)157L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_CYPRO_MINOAN = 157
     * }
     */
    public static int G_UNICODE_SCRIPT_CYPRO_MINOAN() {
        return G_UNICODE_SCRIPT_CYPRO_MINOAN;
    }
    private static final int G_UNICODE_SCRIPT_OLD_UYGHUR = (int)158L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_OLD_UYGHUR = 158
     * }
     */
    public static int G_UNICODE_SCRIPT_OLD_UYGHUR() {
        return G_UNICODE_SCRIPT_OLD_UYGHUR;
    }
    private static final int G_UNICODE_SCRIPT_TANGSA = (int)159L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TANGSA = 159
     * }
     */
    public static int G_UNICODE_SCRIPT_TANGSA() {
        return G_UNICODE_SCRIPT_TANGSA;
    }
    private static final int G_UNICODE_SCRIPT_TOTO = (int)160L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_TOTO = 160
     * }
     */
    public static int G_UNICODE_SCRIPT_TOTO() {
        return G_UNICODE_SCRIPT_TOTO;
    }
    private static final int G_UNICODE_SCRIPT_VITHKUQI = (int)161L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_VITHKUQI = 161
     * }
     */
    public static int G_UNICODE_SCRIPT_VITHKUQI() {
        return G_UNICODE_SCRIPT_VITHKUQI;
    }
    private static final int G_UNICODE_SCRIPT_MATH = (int)162L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_MATH = 162
     * }
     */
    public static int G_UNICODE_SCRIPT_MATH() {
        return G_UNICODE_SCRIPT_MATH;
    }
    private static final int G_UNICODE_SCRIPT_KAWI = (int)163L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_KAWI = 163
     * }
     */
    public static int G_UNICODE_SCRIPT_KAWI() {
        return G_UNICODE_SCRIPT_KAWI;
    }
    private static final int G_UNICODE_SCRIPT_NAG_MUNDARI = (int)164L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNICODE_SCRIPT_NAG_MUNDARI = 164
     * }
     */
    public static int G_UNICODE_SCRIPT_NAG_MUNDARI() {
        return G_UNICODE_SCRIPT_NAG_MUNDARI;
    }

    private static class g_unicode_script_to_iso15924 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unicode_script_to_iso15924"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_unicode_script_to_iso15924(GUnicodeScript script)
     * }
     */
    public static FunctionDescriptor g_unicode_script_to_iso15924$descriptor() {
        return g_unicode_script_to_iso15924.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_unicode_script_to_iso15924(GUnicodeScript script)
     * }
     */
    public static MethodHandle g_unicode_script_to_iso15924$handle() {
        return g_unicode_script_to_iso15924.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_unicode_script_to_iso15924(GUnicodeScript script)
     * }
     */
    public static int g_unicode_script_to_iso15924(int script) {
        var mh$ = g_unicode_script_to_iso15924.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unicode_script_to_iso15924", script);
            }
            return (int)mh$.invokeExact(script);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unicode_script_from_iso15924 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unicode_script_from_iso15924"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnicodeScript g_unicode_script_from_iso15924(guint32 iso15924)
     * }
     */
    public static FunctionDescriptor g_unicode_script_from_iso15924$descriptor() {
        return g_unicode_script_from_iso15924.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnicodeScript g_unicode_script_from_iso15924(guint32 iso15924)
     * }
     */
    public static MethodHandle g_unicode_script_from_iso15924$handle() {
        return g_unicode_script_from_iso15924.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnicodeScript g_unicode_script_from_iso15924(guint32 iso15924)
     * }
     */
    public static int g_unicode_script_from_iso15924(int iso15924) {
        var mh$ = g_unicode_script_from_iso15924.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unicode_script_from_iso15924", iso15924);
            }
            return (int)mh$.invokeExact(iso15924);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isalnum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isalnum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isalnum(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isalnum$descriptor() {
        return g_unichar_isalnum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isalnum(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isalnum$handle() {
        return g_unichar_isalnum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isalnum(gunichar c)
     * }
     */
    public static int g_unichar_isalnum(int c) {
        var mh$ = g_unichar_isalnum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isalnum", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isalpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isalpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isalpha(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isalpha$descriptor() {
        return g_unichar_isalpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isalpha(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isalpha$handle() {
        return g_unichar_isalpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isalpha(gunichar c)
     * }
     */
    public static int g_unichar_isalpha(int c) {
        var mh$ = g_unichar_isalpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isalpha", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_iscntrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_iscntrl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iscntrl(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_iscntrl$descriptor() {
        return g_unichar_iscntrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iscntrl(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_iscntrl$handle() {
        return g_unichar_iscntrl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_iscntrl(gunichar c)
     * }
     */
    public static int g_unichar_iscntrl(int c) {
        var mh$ = g_unichar_iscntrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_iscntrl", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isdigit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isdigit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isdigit(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isdigit$descriptor() {
        return g_unichar_isdigit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isdigit(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isdigit$handle() {
        return g_unichar_isdigit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isdigit(gunichar c)
     * }
     */
    public static int g_unichar_isdigit(int c) {
        var mh$ = g_unichar_isdigit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isdigit", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isgraph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isgraph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isgraph(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isgraph$descriptor() {
        return g_unichar_isgraph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isgraph(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isgraph$handle() {
        return g_unichar_isgraph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isgraph(gunichar c)
     * }
     */
    public static int g_unichar_isgraph(int c) {
        var mh$ = g_unichar_isgraph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isgraph", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_islower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_islower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_islower(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_islower$descriptor() {
        return g_unichar_islower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_islower(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_islower$handle() {
        return g_unichar_islower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_islower(gunichar c)
     * }
     */
    public static int g_unichar_islower(int c) {
        var mh$ = g_unichar_islower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_islower", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isprint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isprint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isprint(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isprint$descriptor() {
        return g_unichar_isprint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isprint(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isprint$handle() {
        return g_unichar_isprint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isprint(gunichar c)
     * }
     */
    public static int g_unichar_isprint(int c) {
        var mh$ = g_unichar_isprint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isprint", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_ispunct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_ispunct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_ispunct(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_ispunct$descriptor() {
        return g_unichar_ispunct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_ispunct(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_ispunct$handle() {
        return g_unichar_ispunct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_ispunct(gunichar c)
     * }
     */
    public static int g_unichar_ispunct(int c) {
        var mh$ = g_unichar_ispunct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_ispunct", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isspace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isspace(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isspace$descriptor() {
        return g_unichar_isspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isspace(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isspace$handle() {
        return g_unichar_isspace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isspace(gunichar c)
     * }
     */
    public static int g_unichar_isspace(int c) {
        var mh$ = g_unichar_isspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isspace", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isupper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isupper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isupper(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isupper$descriptor() {
        return g_unichar_isupper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isupper(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isupper$handle() {
        return g_unichar_isupper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isupper(gunichar c)
     * }
     */
    public static int g_unichar_isupper(int c) {
        var mh$ = g_unichar_isupper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isupper", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isxdigit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isxdigit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isxdigit(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isxdigit$descriptor() {
        return g_unichar_isxdigit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isxdigit(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isxdigit$handle() {
        return g_unichar_isxdigit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isxdigit(gunichar c)
     * }
     */
    public static int g_unichar_isxdigit(int c) {
        var mh$ = g_unichar_isxdigit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isxdigit", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_istitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_istitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_istitle(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_istitle$descriptor() {
        return g_unichar_istitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_istitle(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_istitle$handle() {
        return g_unichar_istitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_istitle(gunichar c)
     * }
     */
    public static int g_unichar_istitle(int c) {
        var mh$ = g_unichar_istitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_istitle", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_isdefined {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_isdefined"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isdefined(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_isdefined$descriptor() {
        return g_unichar_isdefined.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_isdefined(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_isdefined$handle() {
        return g_unichar_isdefined.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_isdefined(gunichar c)
     * }
     */
    public static int g_unichar_isdefined(int c) {
        var mh$ = g_unichar_isdefined.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_isdefined", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_iswide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_iswide"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iswide(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_iswide$descriptor() {
        return g_unichar_iswide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iswide(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_iswide$handle() {
        return g_unichar_iswide.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_iswide(gunichar c)
     * }
     */
    public static int g_unichar_iswide(int c) {
        var mh$ = g_unichar_iswide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_iswide", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_iswide_cjk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_iswide_cjk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iswide_cjk(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_iswide_cjk$descriptor() {
        return g_unichar_iswide_cjk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iswide_cjk(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_iswide_cjk$handle() {
        return g_unichar_iswide_cjk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_iswide_cjk(gunichar c)
     * }
     */
    public static int g_unichar_iswide_cjk(int c) {
        var mh$ = g_unichar_iswide_cjk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_iswide_cjk", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_iszerowidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_iszerowidth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iszerowidth(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_iszerowidth$descriptor() {
        return g_unichar_iszerowidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_iszerowidth(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_iszerowidth$handle() {
        return g_unichar_iszerowidth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_iszerowidth(gunichar c)
     * }
     */
    public static int g_unichar_iszerowidth(int c) {
        var mh$ = g_unichar_iszerowidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_iszerowidth", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_ismark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_ismark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_ismark(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_ismark$descriptor() {
        return g_unichar_ismark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_ismark(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_ismark$handle() {
        return g_unichar_ismark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_ismark(gunichar c)
     * }
     */
    public static int g_unichar_ismark(int c) {
        var mh$ = g_unichar_ismark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_ismark", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_toupper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_toupper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar g_unichar_toupper(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_toupper$descriptor() {
        return g_unichar_toupper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar g_unichar_toupper(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_toupper$handle() {
        return g_unichar_toupper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar g_unichar_toupper(gunichar c)
     * }
     */
    public static int g_unichar_toupper(int c) {
        var mh$ = g_unichar_toupper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_toupper", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_tolower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_tolower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar g_unichar_tolower(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_tolower$descriptor() {
        return g_unichar_tolower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar g_unichar_tolower(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_tolower$handle() {
        return g_unichar_tolower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar g_unichar_tolower(gunichar c)
     * }
     */
    public static int g_unichar_tolower(int c) {
        var mh$ = g_unichar_tolower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_tolower", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_totitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_totitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar g_unichar_totitle(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_totitle$descriptor() {
        return g_unichar_totitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar g_unichar_totitle(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_totitle$handle() {
        return g_unichar_totitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar g_unichar_totitle(gunichar c)
     * }
     */
    public static int g_unichar_totitle(int c) {
        var mh$ = g_unichar_totitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_totitle", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_digit_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_digit_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unichar_digit_value(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_digit_value$descriptor() {
        return g_unichar_digit_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unichar_digit_value(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_digit_value$handle() {
        return g_unichar_digit_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unichar_digit_value(gunichar c)
     * }
     */
    public static int g_unichar_digit_value(int c) {
        var mh$ = g_unichar_digit_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_digit_value", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_xdigit_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_xdigit_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unichar_xdigit_value(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_xdigit_value$descriptor() {
        return g_unichar_xdigit_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unichar_xdigit_value(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_xdigit_value$handle() {
        return g_unichar_xdigit_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unichar_xdigit_value(gunichar c)
     * }
     */
    public static int g_unichar_xdigit_value(int c) {
        var mh$ = g_unichar_xdigit_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_xdigit_value", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnicodeType g_unichar_type(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_type$descriptor() {
        return g_unichar_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnicodeType g_unichar_type(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_type$handle() {
        return g_unichar_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnicodeType g_unichar_type(gunichar c)
     * }
     */
    public static int g_unichar_type(int c) {
        var mh$ = g_unichar_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_type", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_break_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_break_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnicodeBreakType g_unichar_break_type(gunichar c)
     * }
     */
    public static FunctionDescriptor g_unichar_break_type$descriptor() {
        return g_unichar_break_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnicodeBreakType g_unichar_break_type(gunichar c)
     * }
     */
    public static MethodHandle g_unichar_break_type$handle() {
        return g_unichar_break_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnicodeBreakType g_unichar_break_type(gunichar c)
     * }
     */
    public static int g_unichar_break_type(int c) {
        var mh$ = g_unichar_break_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_break_type", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_combining_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_combining_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unichar_combining_class(gunichar uc)
     * }
     */
    public static FunctionDescriptor g_unichar_combining_class$descriptor() {
        return g_unichar_combining_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unichar_combining_class(gunichar uc)
     * }
     */
    public static MethodHandle g_unichar_combining_class$handle() {
        return g_unichar_combining_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unichar_combining_class(gunichar uc)
     * }
     */
    public static int g_unichar_combining_class(int uc) {
        var mh$ = g_unichar_combining_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_combining_class", uc);
            }
            return (int)mh$.invokeExact(uc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_get_mirror_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_get_mirror_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_get_mirror_char(gunichar ch, gunichar *mirrored_ch)
     * }
     */
    public static FunctionDescriptor g_unichar_get_mirror_char$descriptor() {
        return g_unichar_get_mirror_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_get_mirror_char(gunichar ch, gunichar *mirrored_ch)
     * }
     */
    public static MethodHandle g_unichar_get_mirror_char$handle() {
        return g_unichar_get_mirror_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_get_mirror_char(gunichar ch, gunichar *mirrored_ch)
     * }
     */
    public static int g_unichar_get_mirror_char(int ch, MemorySegment mirrored_ch) {
        var mh$ = g_unichar_get_mirror_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_get_mirror_char", ch, mirrored_ch);
            }
            return (int)mh$.invokeExact(ch, mirrored_ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_get_script {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_get_script"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnicodeScript g_unichar_get_script(gunichar ch)
     * }
     */
    public static FunctionDescriptor g_unichar_get_script$descriptor() {
        return g_unichar_get_script.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnicodeScript g_unichar_get_script(gunichar ch)
     * }
     */
    public static MethodHandle g_unichar_get_script$handle() {
        return g_unichar_get_script.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnicodeScript g_unichar_get_script(gunichar ch)
     * }
     */
    public static int g_unichar_get_script(int ch) {
        var mh$ = g_unichar_get_script.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_get_script", ch);
            }
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_validate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_validate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_validate(gunichar ch)
     * }
     */
    public static FunctionDescriptor g_unichar_validate$descriptor() {
        return g_unichar_validate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_validate(gunichar ch)
     * }
     */
    public static MethodHandle g_unichar_validate$handle() {
        return g_unichar_validate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_validate(gunichar ch)
     * }
     */
    public static int g_unichar_validate(int ch) {
        var mh$ = g_unichar_validate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_validate", ch);
            }
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_compose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_compose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_compose(gunichar a, gunichar b, gunichar *ch)
     * }
     */
    public static FunctionDescriptor g_unichar_compose$descriptor() {
        return g_unichar_compose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_compose(gunichar a, gunichar b, gunichar *ch)
     * }
     */
    public static MethodHandle g_unichar_compose$handle() {
        return g_unichar_compose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_compose(gunichar a, gunichar b, gunichar *ch)
     * }
     */
    public static int g_unichar_compose(int a, int b, MemorySegment ch) {
        var mh$ = g_unichar_compose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_compose", a, b, ch);
            }
            return (int)mh$.invokeExact(a, b, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_decompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_decompose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_decompose(gunichar ch, gunichar *a, gunichar *b)
     * }
     */
    public static FunctionDescriptor g_unichar_decompose$descriptor() {
        return g_unichar_decompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unichar_decompose(gunichar ch, gunichar *a, gunichar *b)
     * }
     */
    public static MethodHandle g_unichar_decompose$handle() {
        return g_unichar_decompose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unichar_decompose(gunichar ch, gunichar *a, gunichar *b)
     * }
     */
    public static int g_unichar_decompose(int ch, MemorySegment a, MemorySegment b) {
        var mh$ = g_unichar_decompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_decompose", ch, a, b);
            }
            return (int)mh$.invokeExact(ch, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_fully_decompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_fully_decompose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_unichar_fully_decompose(gunichar ch, gboolean compat, gunichar *result, gsize result_len)
     * }
     */
    public static FunctionDescriptor g_unichar_fully_decompose$descriptor() {
        return g_unichar_fully_decompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_unichar_fully_decompose(gunichar ch, gboolean compat, gunichar *result, gsize result_len)
     * }
     */
    public static MethodHandle g_unichar_fully_decompose$handle() {
        return g_unichar_fully_decompose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_unichar_fully_decompose(gunichar ch, gboolean compat, gunichar *result, gsize result_len)
     * }
     */
    public static long g_unichar_fully_decompose(int ch, int compat, MemorySegment result, long result_len) {
        var mh$ = g_unichar_fully_decompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_fully_decompose", ch, compat, result, result_len);
            }
            return (long)mh$.invokeExact(ch, compat, result, result_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unicode_canonical_ordering {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unicode_canonical_ordering"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_unicode_canonical_ordering(gunichar *string, gsize len)
     * }
     */
    public static FunctionDescriptor g_unicode_canonical_ordering$descriptor() {
        return g_unicode_canonical_ordering.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_unicode_canonical_ordering(gunichar *string, gsize len)
     * }
     */
    public static MethodHandle g_unicode_canonical_ordering$handle() {
        return g_unicode_canonical_ordering.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_unicode_canonical_ordering(gunichar *string, gsize len)
     * }
     */
    public static void g_unicode_canonical_ordering(MemorySegment string, long len) {
        var mh$ = g_unicode_canonical_ordering.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unicode_canonical_ordering", string, len);
            }
            mh$.invokeExact(string, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unicode_canonical_decomposition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unicode_canonical_decomposition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar *g_unicode_canonical_decomposition(gunichar ch, gsize *result_len)
     * }
     */
    public static FunctionDescriptor g_unicode_canonical_decomposition$descriptor() {
        return g_unicode_canonical_decomposition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar *g_unicode_canonical_decomposition(gunichar ch, gsize *result_len)
     * }
     */
    public static MethodHandle g_unicode_canonical_decomposition$handle() {
        return g_unicode_canonical_decomposition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar *g_unicode_canonical_decomposition(gunichar ch, gsize *result_len)
     * }
     */
    public static MemorySegment g_unicode_canonical_decomposition(int ch, MemorySegment result_len) {
        var mh$ = g_unicode_canonical_decomposition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unicode_canonical_decomposition", ch, result_len);
            }
            return (MemorySegment)mh$.invokeExact(ch, result_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_skip$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_utf8_skip").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const gchar *const g_utf8_skip
     * }
     */
    public static AddressLayout g_utf8_skip$layout() {
        return g_utf8_skip$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const gchar *const g_utf8_skip
     * }
     */
    public static MemorySegment g_utf8_skip$segment() {
        return g_utf8_skip$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const gchar *const g_utf8_skip
     * }
     */
    public static MemorySegment g_utf8_skip() {
        return g_utf8_skip$constants.SEGMENT.get(g_utf8_skip$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const gchar *const g_utf8_skip
     * }
     */
    public static void g_utf8_skip(MemorySegment varValue) {
        g_utf8_skip$constants.SEGMENT.set(g_utf8_skip$constants.LAYOUT, 0L, varValue);
    }

    private static class g_utf8_get_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_get_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar g_utf8_get_char(const gchar *p)
     * }
     */
    public static FunctionDescriptor g_utf8_get_char$descriptor() {
        return g_utf8_get_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar g_utf8_get_char(const gchar *p)
     * }
     */
    public static MethodHandle g_utf8_get_char$handle() {
        return g_utf8_get_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar g_utf8_get_char(const gchar *p)
     * }
     */
    public static int g_utf8_get_char(MemorySegment p) {
        var mh$ = g_utf8_get_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_get_char", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_get_char_validated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_get_char_validated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar g_utf8_get_char_validated(const gchar *p, gssize max_len)
     * }
     */
    public static FunctionDescriptor g_utf8_get_char_validated$descriptor() {
        return g_utf8_get_char_validated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar g_utf8_get_char_validated(const gchar *p, gssize max_len)
     * }
     */
    public static MethodHandle g_utf8_get_char_validated$handle() {
        return g_utf8_get_char_validated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar g_utf8_get_char_validated(const gchar *p, gssize max_len)
     * }
     */
    public static int g_utf8_get_char_validated(MemorySegment p, long max_len) {
        var mh$ = g_utf8_get_char_validated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_get_char_validated", p, max_len);
            }
            return (int)mh$.invokeExact(p, max_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_offset_to_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_offset_to_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_offset_to_pointer(const gchar *str, glong offset)
     * }
     */
    public static FunctionDescriptor g_utf8_offset_to_pointer$descriptor() {
        return g_utf8_offset_to_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_offset_to_pointer(const gchar *str, glong offset)
     * }
     */
    public static MethodHandle g_utf8_offset_to_pointer$handle() {
        return g_utf8_offset_to_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_offset_to_pointer(const gchar *str, glong offset)
     * }
     */
    public static MemorySegment g_utf8_offset_to_pointer(MemorySegment str, long offset) {
        var mh$ = g_utf8_offset_to_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_offset_to_pointer", str, offset);
            }
            return (MemorySegment)mh$.invokeExact(str, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_pointer_to_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_pointer_to_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern glong g_utf8_pointer_to_offset(const gchar *str, const gchar *pos)
     * }
     */
    public static FunctionDescriptor g_utf8_pointer_to_offset$descriptor() {
        return g_utf8_pointer_to_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern glong g_utf8_pointer_to_offset(const gchar *str, const gchar *pos)
     * }
     */
    public static MethodHandle g_utf8_pointer_to_offset$handle() {
        return g_utf8_pointer_to_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern glong g_utf8_pointer_to_offset(const gchar *str, const gchar *pos)
     * }
     */
    public static long g_utf8_pointer_to_offset(MemorySegment str, MemorySegment pos) {
        var mh$ = g_utf8_pointer_to_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_pointer_to_offset", str, pos);
            }
            return (long)mh$.invokeExact(str, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_prev_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_prev_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_prev_char(const gchar *p)
     * }
     */
    public static FunctionDescriptor g_utf8_prev_char$descriptor() {
        return g_utf8_prev_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_prev_char(const gchar *p)
     * }
     */
    public static MethodHandle g_utf8_prev_char$handle() {
        return g_utf8_prev_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_prev_char(const gchar *p)
     * }
     */
    public static MemorySegment g_utf8_prev_char(MemorySegment p) {
        var mh$ = g_utf8_prev_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_prev_char", p);
            }
            return (MemorySegment)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_find_next_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_find_next_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_find_next_char(const gchar *p, const gchar *end)
     * }
     */
    public static FunctionDescriptor g_utf8_find_next_char$descriptor() {
        return g_utf8_find_next_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_find_next_char(const gchar *p, const gchar *end)
     * }
     */
    public static MethodHandle g_utf8_find_next_char$handle() {
        return g_utf8_find_next_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_find_next_char(const gchar *p, const gchar *end)
     * }
     */
    public static MemorySegment g_utf8_find_next_char(MemorySegment p, MemorySegment end) {
        var mh$ = g_utf8_find_next_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_find_next_char", p, end);
            }
            return (MemorySegment)mh$.invokeExact(p, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_find_prev_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_find_prev_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_find_prev_char(const gchar *str, const gchar *p)
     * }
     */
    public static FunctionDescriptor g_utf8_find_prev_char$descriptor() {
        return g_utf8_find_prev_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_find_prev_char(const gchar *str, const gchar *p)
     * }
     */
    public static MethodHandle g_utf8_find_prev_char$handle() {
        return g_utf8_find_prev_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_find_prev_char(const gchar *str, const gchar *p)
     * }
     */
    public static MemorySegment g_utf8_find_prev_char(MemorySegment str, MemorySegment p) {
        var mh$ = g_utf8_find_prev_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_find_prev_char", str, p);
            }
            return (MemorySegment)mh$.invokeExact(str, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_strlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_strlen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern glong g_utf8_strlen(const gchar *p, gssize max)
     * }
     */
    public static FunctionDescriptor g_utf8_strlen$descriptor() {
        return g_utf8_strlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern glong g_utf8_strlen(const gchar *p, gssize max)
     * }
     */
    public static MethodHandle g_utf8_strlen$handle() {
        return g_utf8_strlen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern glong g_utf8_strlen(const gchar *p, gssize max)
     * }
     */
    public static long g_utf8_strlen(MemorySegment p, long max) {
        var mh$ = g_utf8_strlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_strlen", p, max);
            }
            return (long)mh$.invokeExact(p, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_substring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_substring"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_substring(const gchar *str, glong start_pos, glong end_pos)
     * }
     */
    public static FunctionDescriptor g_utf8_substring$descriptor() {
        return g_utf8_substring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_substring(const gchar *str, glong start_pos, glong end_pos)
     * }
     */
    public static MethodHandle g_utf8_substring$handle() {
        return g_utf8_substring.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_substring(const gchar *str, glong start_pos, glong end_pos)
     * }
     */
    public static MemorySegment g_utf8_substring(MemorySegment str, long start_pos, long end_pos) {
        var mh$ = g_utf8_substring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_substring", str, start_pos, end_pos);
            }
            return (MemorySegment)mh$.invokeExact(str, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_strncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_strncpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strncpy(gchar *dest, const gchar *src, gsize n)
     * }
     */
    public static FunctionDescriptor g_utf8_strncpy$descriptor() {
        return g_utf8_strncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strncpy(gchar *dest, const gchar *src, gsize n)
     * }
     */
    public static MethodHandle g_utf8_strncpy$handle() {
        return g_utf8_strncpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_strncpy(gchar *dest, const gchar *src, gsize n)
     * }
     */
    public static MemorySegment g_utf8_strncpy(MemorySegment dest, MemorySegment src, long n) {
        var mh$ = g_utf8_strncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_strncpy", dest, src, n);
            }
            return (MemorySegment)mh$.invokeExact(dest, src, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_truncate_middle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_truncate_middle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_truncate_middle(const gchar *string, gsize truncate_length)
     * }
     */
    public static FunctionDescriptor g_utf8_truncate_middle$descriptor() {
        return g_utf8_truncate_middle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_truncate_middle(const gchar *string, gsize truncate_length)
     * }
     */
    public static MethodHandle g_utf8_truncate_middle$handle() {
        return g_utf8_truncate_middle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_truncate_middle(const gchar *string, gsize truncate_length)
     * }
     */
    public static MemorySegment g_utf8_truncate_middle(MemorySegment string, long truncate_length) {
        var mh$ = g_utf8_truncate_middle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_truncate_middle", string, truncate_length);
            }
            return (MemorySegment)mh$.invokeExact(string, truncate_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_strchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_strchr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strchr(const gchar *p, gssize len, gunichar c)
     * }
     */
    public static FunctionDescriptor g_utf8_strchr$descriptor() {
        return g_utf8_strchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strchr(const gchar *p, gssize len, gunichar c)
     * }
     */
    public static MethodHandle g_utf8_strchr$handle() {
        return g_utf8_strchr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_strchr(const gchar *p, gssize len, gunichar c)
     * }
     */
    public static MemorySegment g_utf8_strchr(MemorySegment p, long len, int c) {
        var mh$ = g_utf8_strchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_strchr", p, len, c);
            }
            return (MemorySegment)mh$.invokeExact(p, len, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_strrchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_strrchr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strrchr(const gchar *p, gssize len, gunichar c)
     * }
     */
    public static FunctionDescriptor g_utf8_strrchr$descriptor() {
        return g_utf8_strrchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strrchr(const gchar *p, gssize len, gunichar c)
     * }
     */
    public static MethodHandle g_utf8_strrchr$handle() {
        return g_utf8_strrchr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_strrchr(const gchar *p, gssize len, gunichar c)
     * }
     */
    public static MemorySegment g_utf8_strrchr(MemorySegment p, long len, int c) {
        var mh$ = g_utf8_strrchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_strrchr", p, len, c);
            }
            return (MemorySegment)mh$.invokeExact(p, len, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_strreverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_strreverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strreverse(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_utf8_strreverse$descriptor() {
        return g_utf8_strreverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strreverse(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_utf8_strreverse$handle() {
        return g_utf8_strreverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_strreverse(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_utf8_strreverse(MemorySegment str, long len) {
        var mh$ = g_utf8_strreverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_strreverse", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_to_utf16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_to_utf16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar2 *g_utf8_to_utf16(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_utf8_to_utf16$descriptor() {
        return g_utf8_to_utf16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar2 *g_utf8_to_utf16(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MethodHandle g_utf8_to_utf16$handle() {
        return g_utf8_to_utf16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar2 *g_utf8_to_utf16(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MemorySegment g_utf8_to_utf16(MemorySegment str, long len, MemorySegment items_read, MemorySegment items_written, MemorySegment error) {
        var mh$ = g_utf8_to_utf16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_to_utf16", str, len, items_read, items_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_to_ucs4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_to_ucs4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar *g_utf8_to_ucs4(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_utf8_to_ucs4$descriptor() {
        return g_utf8_to_ucs4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar *g_utf8_to_ucs4(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MethodHandle g_utf8_to_ucs4$handle() {
        return g_utf8_to_ucs4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar *g_utf8_to_ucs4(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MemorySegment g_utf8_to_ucs4(MemorySegment str, long len, MemorySegment items_read, MemorySegment items_written, MemorySegment error) {
        var mh$ = g_utf8_to_ucs4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_to_ucs4", str, len, items_read, items_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_to_ucs4_fast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_to_ucs4_fast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar *g_utf8_to_ucs4_fast(const gchar *str, glong len, glong *items_written)
     * }
     */
    public static FunctionDescriptor g_utf8_to_ucs4_fast$descriptor() {
        return g_utf8_to_ucs4_fast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar *g_utf8_to_ucs4_fast(const gchar *str, glong len, glong *items_written)
     * }
     */
    public static MethodHandle g_utf8_to_ucs4_fast$handle() {
        return g_utf8_to_ucs4_fast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar *g_utf8_to_ucs4_fast(const gchar *str, glong len, glong *items_written)
     * }
     */
    public static MemorySegment g_utf8_to_ucs4_fast(MemorySegment str, long len, MemorySegment items_written) {
        var mh$ = g_utf8_to_ucs4_fast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_to_ucs4_fast", str, len, items_written);
            }
            return (MemorySegment)mh$.invokeExact(str, len, items_written);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf16_to_ucs4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf16_to_ucs4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar *g_utf16_to_ucs4(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_utf16_to_ucs4$descriptor() {
        return g_utf16_to_ucs4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar *g_utf16_to_ucs4(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MethodHandle g_utf16_to_ucs4$handle() {
        return g_utf16_to_ucs4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar *g_utf16_to_ucs4(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MemorySegment g_utf16_to_ucs4(MemorySegment str, long len, MemorySegment items_read, MemorySegment items_written, MemorySegment error) {
        var mh$ = g_utf16_to_ucs4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf16_to_ucs4", str, len, items_read, items_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf16_to_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf16_to_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf16_to_utf8(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_utf16_to_utf8$descriptor() {
        return g_utf16_to_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf16_to_utf8(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MethodHandle g_utf16_to_utf8$handle() {
        return g_utf16_to_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf16_to_utf8(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MemorySegment g_utf16_to_utf8(MemorySegment str, long len, MemorySegment items_read, MemorySegment items_written, MemorySegment error) {
        var mh$ = g_utf16_to_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf16_to_utf8", str, len, items_read, items_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ucs4_to_utf16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ucs4_to_utf16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar2 *g_ucs4_to_utf16(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_ucs4_to_utf16$descriptor() {
        return g_ucs4_to_utf16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar2 *g_ucs4_to_utf16(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MethodHandle g_ucs4_to_utf16$handle() {
        return g_ucs4_to_utf16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar2 *g_ucs4_to_utf16(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MemorySegment g_ucs4_to_utf16(MemorySegment str, long len, MemorySegment items_read, MemorySegment items_written, MemorySegment error) {
        var mh$ = g_ucs4_to_utf16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ucs4_to_utf16", str, len, items_read, items_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ucs4_to_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ucs4_to_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_ucs4_to_utf8(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_ucs4_to_utf8$descriptor() {
        return g_ucs4_to_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_ucs4_to_utf8(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MethodHandle g_ucs4_to_utf8$handle() {
        return g_ucs4_to_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_ucs4_to_utf8(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error)
     * }
     */
    public static MemorySegment g_ucs4_to_utf8(MemorySegment str, long len, MemorySegment items_read, MemorySegment items_written, MemorySegment error) {
        var mh$ = g_ucs4_to_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ucs4_to_utf8", str, len, items_read, items_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unichar_to_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unichar_to_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unichar_to_utf8(gunichar c, gchar *outbuf)
     * }
     */
    public static FunctionDescriptor g_unichar_to_utf8$descriptor() {
        return g_unichar_to_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unichar_to_utf8(gunichar c, gchar *outbuf)
     * }
     */
    public static MethodHandle g_unichar_to_utf8$handle() {
        return g_unichar_to_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unichar_to_utf8(gunichar c, gchar *outbuf)
     * }
     */
    public static int g_unichar_to_utf8(int c, MemorySegment outbuf) {
        var mh$ = g_unichar_to_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unichar_to_utf8", c, outbuf);
            }
            return (int)mh$.invokeExact(c, outbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_validate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_validate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_utf8_validate(const gchar *str, gssize max_len, const gchar **end)
     * }
     */
    public static FunctionDescriptor g_utf8_validate$descriptor() {
        return g_utf8_validate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_utf8_validate(const gchar *str, gssize max_len, const gchar **end)
     * }
     */
    public static MethodHandle g_utf8_validate$handle() {
        return g_utf8_validate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_utf8_validate(const gchar *str, gssize max_len, const gchar **end)
     * }
     */
    public static int g_utf8_validate(MemorySegment str, long max_len, MemorySegment end) {
        var mh$ = g_utf8_validate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_validate", str, max_len, end);
            }
            return (int)mh$.invokeExact(str, max_len, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_validate_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_validate_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_utf8_validate_len(const gchar *str, gsize max_len, const gchar **end)
     * }
     */
    public static FunctionDescriptor g_utf8_validate_len$descriptor() {
        return g_utf8_validate_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_utf8_validate_len(const gchar *str, gsize max_len, const gchar **end)
     * }
     */
    public static MethodHandle g_utf8_validate_len$handle() {
        return g_utf8_validate_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_utf8_validate_len(const gchar *str, gsize max_len, const gchar **end)
     * }
     */
    public static int g_utf8_validate_len(MemorySegment str, long max_len, MemorySegment end) {
        var mh$ = g_utf8_validate_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_validate_len", str, max_len, end);
            }
            return (int)mh$.invokeExact(str, max_len, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_strup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_strup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strup(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_utf8_strup$descriptor() {
        return g_utf8_strup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strup(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_utf8_strup$handle() {
        return g_utf8_strup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_strup(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_utf8_strup(MemorySegment str, long len) {
        var mh$ = g_utf8_strup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_strup", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_strdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_strdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strdown(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_utf8_strdown$descriptor() {
        return g_utf8_strdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_strdown(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_utf8_strdown$handle() {
        return g_utf8_strdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_strdown(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_utf8_strdown(MemorySegment str, long len) {
        var mh$ = g_utf8_strdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_strdown", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_casefold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_casefold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_casefold(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_utf8_casefold$descriptor() {
        return g_utf8_casefold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_casefold(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_utf8_casefold$handle() {
        return g_utf8_casefold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_casefold(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_utf8_casefold(MemorySegment str, long len) {
        var mh$ = g_utf8_casefold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_casefold", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_NORMALIZE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_DEFAULT = 0
     * }
     */
    public static int G_NORMALIZE_DEFAULT() {
        return G_NORMALIZE_DEFAULT;
    }
    private static final int G_NORMALIZE_NFD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_NFD = 0
     * }
     */
    public static int G_NORMALIZE_NFD() {
        return G_NORMALIZE_NFD;
    }
    private static final int G_NORMALIZE_DEFAULT_COMPOSE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_DEFAULT_COMPOSE = 1
     * }
     */
    public static int G_NORMALIZE_DEFAULT_COMPOSE() {
        return G_NORMALIZE_DEFAULT_COMPOSE;
    }
    private static final int G_NORMALIZE_NFC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_NFC = 1
     * }
     */
    public static int G_NORMALIZE_NFC() {
        return G_NORMALIZE_NFC;
    }
    private static final int G_NORMALIZE_ALL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_ALL = 2
     * }
     */
    public static int G_NORMALIZE_ALL() {
        return G_NORMALIZE_ALL;
    }
    private static final int G_NORMALIZE_NFKD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_NFKD = 2
     * }
     */
    public static int G_NORMALIZE_NFKD() {
        return G_NORMALIZE_NFKD;
    }
    private static final int G_NORMALIZE_ALL_COMPOSE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_ALL_COMPOSE = 3
     * }
     */
    public static int G_NORMALIZE_ALL_COMPOSE() {
        return G_NORMALIZE_ALL_COMPOSE;
    }
    private static final int G_NORMALIZE_NFKC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NORMALIZE_NFKC = 3
     * }
     */
    public static int G_NORMALIZE_NFKC() {
        return G_NORMALIZE_NFKC;
    }

    private static class g_utf8_normalize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_normalize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_normalize(const gchar *str, gssize len, GNormalizeMode mode)
     * }
     */
    public static FunctionDescriptor g_utf8_normalize$descriptor() {
        return g_utf8_normalize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_normalize(const gchar *str, gssize len, GNormalizeMode mode)
     * }
     */
    public static MethodHandle g_utf8_normalize$handle() {
        return g_utf8_normalize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_normalize(const gchar *str, gssize len, GNormalizeMode mode)
     * }
     */
    public static MemorySegment g_utf8_normalize(MemorySegment str, long len, int mode) {
        var mh$ = g_utf8_normalize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_normalize", str, len, mode);
            }
            return (MemorySegment)mh$.invokeExact(str, len, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_collate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_collate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_utf8_collate(const gchar *str1, const gchar *str2)
     * }
     */
    public static FunctionDescriptor g_utf8_collate$descriptor() {
        return g_utf8_collate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_utf8_collate(const gchar *str1, const gchar *str2)
     * }
     */
    public static MethodHandle g_utf8_collate$handle() {
        return g_utf8_collate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_utf8_collate(const gchar *str1, const gchar *str2)
     * }
     */
    public static int g_utf8_collate(MemorySegment str1, MemorySegment str2) {
        var mh$ = g_utf8_collate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_collate", str1, str2);
            }
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_collate_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_collate_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_collate_key(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_utf8_collate_key$descriptor() {
        return g_utf8_collate_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_collate_key(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_utf8_collate_key$handle() {
        return g_utf8_collate_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_collate_key(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_utf8_collate_key(MemorySegment str, long len) {
        var mh$ = g_utf8_collate_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_collate_key", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_collate_key_for_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_collate_key_for_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_collate_key_for_filename(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_utf8_collate_key_for_filename$descriptor() {
        return g_utf8_collate_key_for_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_collate_key_for_filename(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_utf8_collate_key_for_filename$handle() {
        return g_utf8_collate_key_for_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_collate_key_for_filename(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_utf8_collate_key_for_filename(MemorySegment str, long len) {
        var mh$ = g_utf8_collate_key_for_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_collate_key_for_filename", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_utf8_make_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_utf8_make_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_make_valid(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_utf8_make_valid$descriptor() {
        return g_utf8_make_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_utf8_make_valid(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_utf8_make_valid$handle() {
        return g_utf8_make_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_utf8_make_valid(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_utf8_make_valid(MemorySegment str, long len) {
        var mh$ = g_utf8_make_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_utf8_make_valid", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_ASCII_ALNUM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_ALNUM = 1
     * }
     */
    public static int G_ASCII_ALNUM() {
        return G_ASCII_ALNUM;
    }
    private static final int G_ASCII_ALPHA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_ALPHA = 2
     * }
     */
    public static int G_ASCII_ALPHA() {
        return G_ASCII_ALPHA;
    }
    private static final int G_ASCII_CNTRL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_CNTRL = 4
     * }
     */
    public static int G_ASCII_CNTRL() {
        return G_ASCII_CNTRL;
    }
    private static final int G_ASCII_DIGIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_DIGIT = 8
     * }
     */
    public static int G_ASCII_DIGIT() {
        return G_ASCII_DIGIT;
    }
    private static final int G_ASCII_GRAPH = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_GRAPH = 16
     * }
     */
    public static int G_ASCII_GRAPH() {
        return G_ASCII_GRAPH;
    }
    private static final int G_ASCII_LOWER = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_LOWER = 32
     * }
     */
    public static int G_ASCII_LOWER() {
        return G_ASCII_LOWER;
    }
    private static final int G_ASCII_PRINT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_PRINT = 64
     * }
     */
    public static int G_ASCII_PRINT() {
        return G_ASCII_PRINT;
    }
    private static final int G_ASCII_PUNCT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_PUNCT = 128
     * }
     */
    public static int G_ASCII_PUNCT() {
        return G_ASCII_PUNCT;
    }
    private static final int G_ASCII_SPACE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_SPACE = 256
     * }
     */
    public static int G_ASCII_SPACE() {
        return G_ASCII_SPACE;
    }
    private static final int G_ASCII_UPPER = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_UPPER = 512
     * }
     */
    public static int G_ASCII_UPPER() {
        return G_ASCII_UPPER;
    }
    private static final int G_ASCII_XDIGIT = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASCII_XDIGIT = 1024
     * }
     */
    public static int G_ASCII_XDIGIT() {
        return G_ASCII_XDIGIT;
    }

    private static class g_ascii_table$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_ascii_table").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint16 *const g_ascii_table
     * }
     */
    public static AddressLayout g_ascii_table$layout() {
        return g_ascii_table$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint16 *const g_ascii_table
     * }
     */
    public static MemorySegment g_ascii_table$segment() {
        return g_ascii_table$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint16 *const g_ascii_table
     * }
     */
    public static MemorySegment g_ascii_table() {
        return g_ascii_table$constants.SEGMENT.get(g_ascii_table$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint16 *const g_ascii_table
     * }
     */
    public static void g_ascii_table(MemorySegment varValue) {
        g_ascii_table$constants.SEGMENT.set(g_ascii_table$constants.LAYOUT, 0L, varValue);
    }

    private static class g_ascii_tolower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_tolower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar g_ascii_tolower(gchar c)
     * }
     */
    public static FunctionDescriptor g_ascii_tolower$descriptor() {
        return g_ascii_tolower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar g_ascii_tolower(gchar c)
     * }
     */
    public static MethodHandle g_ascii_tolower$handle() {
        return g_ascii_tolower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar g_ascii_tolower(gchar c)
     * }
     */
    public static byte g_ascii_tolower(byte c) {
        var mh$ = g_ascii_tolower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_tolower", c);
            }
            return (byte)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_toupper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_toupper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar g_ascii_toupper(gchar c)
     * }
     */
    public static FunctionDescriptor g_ascii_toupper$descriptor() {
        return g_ascii_toupper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar g_ascii_toupper(gchar c)
     * }
     */
    public static MethodHandle g_ascii_toupper$handle() {
        return g_ascii_toupper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar g_ascii_toupper(gchar c)
     * }
     */
    public static byte g_ascii_toupper(byte c) {
        var mh$ = g_ascii_toupper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_toupper", c);
            }
            return (byte)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_digit_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_digit_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_ascii_digit_value(gchar c)
     * }
     */
    public static FunctionDescriptor g_ascii_digit_value$descriptor() {
        return g_ascii_digit_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_ascii_digit_value(gchar c)
     * }
     */
    public static MethodHandle g_ascii_digit_value$handle() {
        return g_ascii_digit_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_ascii_digit_value(gchar c)
     * }
     */
    public static int g_ascii_digit_value(byte c) {
        var mh$ = g_ascii_digit_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_digit_value", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_xdigit_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_xdigit_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_ascii_xdigit_value(gchar c)
     * }
     */
    public static FunctionDescriptor g_ascii_xdigit_value$descriptor() {
        return g_ascii_xdigit_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_ascii_xdigit_value(gchar c)
     * }
     */
    public static MethodHandle g_ascii_xdigit_value$handle() {
        return g_ascii_xdigit_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_ascii_xdigit_value(gchar c)
     * }
     */
    public static int g_ascii_xdigit_value(byte c) {
        var mh$ = g_ascii_xdigit_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_xdigit_value", c);
            }
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strdelimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strdelimit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strdelimit(gchar *string, const gchar *delimiters, gchar new_delimiter)
     * }
     */
    public static FunctionDescriptor g_strdelimit$descriptor() {
        return g_strdelimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strdelimit(gchar *string, const gchar *delimiters, gchar new_delimiter)
     * }
     */
    public static MethodHandle g_strdelimit$handle() {
        return g_strdelimit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strdelimit(gchar *string, const gchar *delimiters, gchar new_delimiter)
     * }
     */
    public static MemorySegment g_strdelimit(MemorySegment string, MemorySegment delimiters, byte new_delimiter) {
        var mh$ = g_strdelimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strdelimit", string, delimiters, new_delimiter);
            }
            return (MemorySegment)mh$.invokeExact(string, delimiters, new_delimiter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strcanon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strcanon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strcanon(gchar *string, const gchar *valid_chars, gchar substitutor)
     * }
     */
    public static FunctionDescriptor g_strcanon$descriptor() {
        return g_strcanon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strcanon(gchar *string, const gchar *valid_chars, gchar substitutor)
     * }
     */
    public static MethodHandle g_strcanon$handle() {
        return g_strcanon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strcanon(gchar *string, const gchar *valid_chars, gchar substitutor)
     * }
     */
    public static MemorySegment g_strcanon(MemorySegment string, MemorySegment valid_chars, byte substitutor) {
        var mh$ = g_strcanon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strcanon", string, valid_chars, substitutor);
            }
            return (MemorySegment)mh$.invokeExact(string, valid_chars, substitutor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strerror"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_strerror(gint errnum)
     * }
     */
    public static FunctionDescriptor g_strerror$descriptor() {
        return g_strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_strerror(gint errnum)
     * }
     */
    public static MethodHandle g_strerror$handle() {
        return g_strerror.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_strerror(gint errnum)
     * }
     */
    public static MemorySegment g_strerror(int errnum) {
        var mh$ = g_strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strerror", errnum);
            }
            return (MemorySegment)mh$.invokeExact(errnum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strsignal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strsignal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_strsignal(gint signum)
     * }
     */
    public static FunctionDescriptor g_strsignal$descriptor() {
        return g_strsignal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_strsignal(gint signum)
     * }
     */
    public static MethodHandle g_strsignal$handle() {
        return g_strsignal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_strsignal(gint signum)
     * }
     */
    public static MemorySegment g_strsignal(int signum) {
        var mh$ = g_strsignal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strsignal", signum);
            }
            return (MemorySegment)mh$.invokeExact(signum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strreverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strreverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strreverse(gchar *string)
     * }
     */
    public static FunctionDescriptor g_strreverse$descriptor() {
        return g_strreverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strreverse(gchar *string)
     * }
     */
    public static MethodHandle g_strreverse$handle() {
        return g_strreverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strreverse(gchar *string)
     * }
     */
    public static MemorySegment g_strreverse(MemorySegment string) {
        var mh$ = g_strreverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strreverse", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strlcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strlcpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_strlcpy(gchar *dest, const gchar *src, gsize dest_size)
     * }
     */
    public static FunctionDescriptor g_strlcpy$descriptor() {
        return g_strlcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_strlcpy(gchar *dest, const gchar *src, gsize dest_size)
     * }
     */
    public static MethodHandle g_strlcpy$handle() {
        return g_strlcpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_strlcpy(gchar *dest, const gchar *src, gsize dest_size)
     * }
     */
    public static long g_strlcpy(MemorySegment dest, MemorySegment src, long dest_size) {
        var mh$ = g_strlcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strlcpy", dest, src, dest_size);
            }
            return (long)mh$.invokeExact(dest, src, dest_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strlcat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strlcat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_strlcat(gchar *dest, const gchar *src, gsize dest_size)
     * }
     */
    public static FunctionDescriptor g_strlcat$descriptor() {
        return g_strlcat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_strlcat(gchar *dest, const gchar *src, gsize dest_size)
     * }
     */
    public static MethodHandle g_strlcat$handle() {
        return g_strlcat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_strlcat(gchar *dest, const gchar *src, gsize dest_size)
     * }
     */
    public static long g_strlcat(MemorySegment dest, MemorySegment src, long dest_size) {
        var mh$ = g_strlcat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strlcat", dest, src, dest_size);
            }
            return (long)mh$.invokeExact(dest, src, dest_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strstr_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strstr_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strstr_len(const gchar *haystack, gssize haystack_len, const gchar *needle)
     * }
     */
    public static FunctionDescriptor g_strstr_len$descriptor() {
        return g_strstr_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strstr_len(const gchar *haystack, gssize haystack_len, const gchar *needle)
     * }
     */
    public static MethodHandle g_strstr_len$handle() {
        return g_strstr_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strstr_len(const gchar *haystack, gssize haystack_len, const gchar *needle)
     * }
     */
    public static MemorySegment g_strstr_len(MemorySegment haystack, long haystack_len, MemorySegment needle) {
        var mh$ = g_strstr_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strstr_len", haystack, haystack_len, needle);
            }
            return (MemorySegment)mh$.invokeExact(haystack, haystack_len, needle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strrstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strrstr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strrstr(const gchar *haystack, const gchar *needle)
     * }
     */
    public static FunctionDescriptor g_strrstr$descriptor() {
        return g_strrstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strrstr(const gchar *haystack, const gchar *needle)
     * }
     */
    public static MethodHandle g_strrstr$handle() {
        return g_strrstr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strrstr(const gchar *haystack, const gchar *needle)
     * }
     */
    public static MemorySegment g_strrstr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = g_strrstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strrstr", haystack, needle);
            }
            return (MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strrstr_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strrstr_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strrstr_len(const gchar *haystack, gssize haystack_len, const gchar *needle)
     * }
     */
    public static FunctionDescriptor g_strrstr_len$descriptor() {
        return g_strrstr_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strrstr_len(const gchar *haystack, gssize haystack_len, const gchar *needle)
     * }
     */
    public static MethodHandle g_strrstr_len$handle() {
        return g_strrstr_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strrstr_len(const gchar *haystack, gssize haystack_len, const gchar *needle)
     * }
     */
    public static MemorySegment g_strrstr_len(MemorySegment haystack, long haystack_len, MemorySegment needle) {
        var mh$ = g_strrstr_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strrstr_len", haystack, haystack_len, needle);
            }
            return (MemorySegment)mh$.invokeExact(haystack, haystack_len, needle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_has_suffix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_has_suffix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean (g_str_has_suffix)(const gchar *str, const gchar *suffix)
     * }
     */
    public static FunctionDescriptor g_str_has_suffix$descriptor() {
        return g_str_has_suffix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean (g_str_has_suffix)(const gchar *str, const gchar *suffix)
     * }
     */
    public static MethodHandle g_str_has_suffix$handle() {
        return g_str_has_suffix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean (g_str_has_suffix)(const gchar *str, const gchar *suffix)
     * }
     */
    public static int g_str_has_suffix(MemorySegment str, MemorySegment suffix) {
        var mh$ = g_str_has_suffix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_has_suffix", str, suffix);
            }
            return (int)mh$.invokeExact(str, suffix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_has_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_has_prefix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean (g_str_has_prefix)(const gchar *str, const gchar *prefix)
     * }
     */
    public static FunctionDescriptor g_str_has_prefix$descriptor() {
        return g_str_has_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean (g_str_has_prefix)(const gchar *str, const gchar *prefix)
     * }
     */
    public static MethodHandle g_str_has_prefix$handle() {
        return g_str_has_prefix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean (g_str_has_prefix)(const gchar *str, const gchar *prefix)
     * }
     */
    public static int g_str_has_prefix(MemorySegment str, MemorySegment prefix) {
        var mh$ = g_str_has_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_has_prefix", str, prefix);
            }
            return (int)mh$.invokeExact(str, prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strtod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_strtod(const gchar *nptr, gchar **endptr)
     * }
     */
    public static FunctionDescriptor g_strtod$descriptor() {
        return g_strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_strtod(const gchar *nptr, gchar **endptr)
     * }
     */
    public static MethodHandle g_strtod$handle() {
        return g_strtod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_strtod(const gchar *nptr, gchar **endptr)
     * }
     */
    public static double g_strtod(MemorySegment nptr, MemorySegment endptr) {
        var mh$ = g_strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strtod", nptr, endptr);
            }
            return (double)mh$.invokeExact(nptr, endptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_strtod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_ascii_strtod(const gchar *nptr, gchar **endptr)
     * }
     */
    public static FunctionDescriptor g_ascii_strtod$descriptor() {
        return g_ascii_strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_ascii_strtod(const gchar *nptr, gchar **endptr)
     * }
     */
    public static MethodHandle g_ascii_strtod$handle() {
        return g_ascii_strtod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_ascii_strtod(const gchar *nptr, gchar **endptr)
     * }
     */
    public static double g_ascii_strtod(MemorySegment nptr, MemorySegment endptr) {
        var mh$ = g_ascii_strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_strtod", nptr, endptr);
            }
            return (double)mh$.invokeExact(nptr, endptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_strtoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_strtoull"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_ascii_strtoull(const gchar *nptr, gchar **endptr, guint base)
     * }
     */
    public static FunctionDescriptor g_ascii_strtoull$descriptor() {
        return g_ascii_strtoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_ascii_strtoull(const gchar *nptr, gchar **endptr, guint base)
     * }
     */
    public static MethodHandle g_ascii_strtoull$handle() {
        return g_ascii_strtoull.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 g_ascii_strtoull(const gchar *nptr, gchar **endptr, guint base)
     * }
     */
    public static long g_ascii_strtoull(MemorySegment nptr, MemorySegment endptr, int base) {
        var mh$ = g_ascii_strtoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_strtoull", nptr, endptr, base);
            }
            return (long)mh$.invokeExact(nptr, endptr, base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_strtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_strtoll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_ascii_strtoll(const gchar *nptr, gchar **endptr, guint base)
     * }
     */
    public static FunctionDescriptor g_ascii_strtoll$descriptor() {
        return g_ascii_strtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_ascii_strtoll(const gchar *nptr, gchar **endptr, guint base)
     * }
     */
    public static MethodHandle g_ascii_strtoll$handle() {
        return g_ascii_strtoll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_ascii_strtoll(const gchar *nptr, gchar **endptr, guint base)
     * }
     */
    public static long g_ascii_strtoll(MemorySegment nptr, MemorySegment endptr, int base) {
        var mh$ = g_ascii_strtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_strtoll", nptr, endptr, base);
            }
            return (long)mh$.invokeExact(nptr, endptr, base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_dtostr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_dtostr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_dtostr(gchar *buffer, gint buf_len, gdouble d)
     * }
     */
    public static FunctionDescriptor g_ascii_dtostr$descriptor() {
        return g_ascii_dtostr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_dtostr(gchar *buffer, gint buf_len, gdouble d)
     * }
     */
    public static MethodHandle g_ascii_dtostr$handle() {
        return g_ascii_dtostr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_ascii_dtostr(gchar *buffer, gint buf_len, gdouble d)
     * }
     */
    public static MemorySegment g_ascii_dtostr(MemorySegment buffer, int buf_len, double d) {
        var mh$ = g_ascii_dtostr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_dtostr", buffer, buf_len, d);
            }
            return (MemorySegment)mh$.invokeExact(buffer, buf_len, d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_formatd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_formatd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_formatd(gchar *buffer, gint buf_len, const gchar *format, gdouble d)
     * }
     */
    public static FunctionDescriptor g_ascii_formatd$descriptor() {
        return g_ascii_formatd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_formatd(gchar *buffer, gint buf_len, const gchar *format, gdouble d)
     * }
     */
    public static MethodHandle g_ascii_formatd$handle() {
        return g_ascii_formatd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_ascii_formatd(gchar *buffer, gint buf_len, const gchar *format, gdouble d)
     * }
     */
    public static MemorySegment g_ascii_formatd(MemorySegment buffer, int buf_len, MemorySegment format, double d) {
        var mh$ = g_ascii_formatd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_formatd", buffer, buf_len, format, d);
            }
            return (MemorySegment)mh$.invokeExact(buffer, buf_len, format, d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strchug {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strchug"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strchug(gchar *string)
     * }
     */
    public static FunctionDescriptor g_strchug$descriptor() {
        return g_strchug.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strchug(gchar *string)
     * }
     */
    public static MethodHandle g_strchug$handle() {
        return g_strchug.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strchug(gchar *string)
     * }
     */
    public static MemorySegment g_strchug(MemorySegment string) {
        var mh$ = g_strchug.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strchug", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strchomp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strchomp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strchomp(gchar *string)
     * }
     */
    public static FunctionDescriptor g_strchomp$descriptor() {
        return g_strchomp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strchomp(gchar *string)
     * }
     */
    public static MethodHandle g_strchomp$handle() {
        return g_strchomp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strchomp(gchar *string)
     * }
     */
    public static MemorySegment g_strchomp(MemorySegment string) {
        var mh$ = g_strchomp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strchomp", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_strcasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_strcasecmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_ascii_strcasecmp(const gchar *s1, const gchar *s2)
     * }
     */
    public static FunctionDescriptor g_ascii_strcasecmp$descriptor() {
        return g_ascii_strcasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_ascii_strcasecmp(const gchar *s1, const gchar *s2)
     * }
     */
    public static MethodHandle g_ascii_strcasecmp$handle() {
        return g_ascii_strcasecmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_ascii_strcasecmp(const gchar *s1, const gchar *s2)
     * }
     */
    public static int g_ascii_strcasecmp(MemorySegment s1, MemorySegment s2) {
        var mh$ = g_ascii_strcasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_strcasecmp", s1, s2);
            }
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_strncasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_strncasecmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_ascii_strncasecmp(const gchar *s1, const gchar *s2, gsize n)
     * }
     */
    public static FunctionDescriptor g_ascii_strncasecmp$descriptor() {
        return g_ascii_strncasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_ascii_strncasecmp(const gchar *s1, const gchar *s2, gsize n)
     * }
     */
    public static MethodHandle g_ascii_strncasecmp$handle() {
        return g_ascii_strncasecmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_ascii_strncasecmp(const gchar *s1, const gchar *s2, gsize n)
     * }
     */
    public static int g_ascii_strncasecmp(MemorySegment s1, MemorySegment s2, long n) {
        var mh$ = g_ascii_strncasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_strncasecmp", s1, s2, n);
            }
            return (int)mh$.invokeExact(s1, s2, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_strdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_strdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_strdown(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_ascii_strdown$descriptor() {
        return g_ascii_strdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_strdown(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_ascii_strdown$handle() {
        return g_ascii_strdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_ascii_strdown(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_ascii_strdown(MemorySegment str, long len) {
        var mh$ = g_ascii_strdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_strdown", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_strup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_strup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_strup(const gchar *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_ascii_strup$descriptor() {
        return g_ascii_strup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_ascii_strup(const gchar *str, gssize len)
     * }
     */
    public static MethodHandle g_ascii_strup$handle() {
        return g_ascii_strup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_ascii_strup(const gchar *str, gssize len)
     * }
     */
    public static MemorySegment g_ascii_strup(MemorySegment str, long len) {
        var mh$ = g_ascii_strup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_strup", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_is_ascii {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_is_ascii"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_str_is_ascii(const gchar *str)
     * }
     */
    public static FunctionDescriptor g_str_is_ascii$descriptor() {
        return g_str_is_ascii.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_str_is_ascii(const gchar *str)
     * }
     */
    public static MethodHandle g_str_is_ascii$handle() {
        return g_str_is_ascii.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_str_is_ascii(const gchar *str)
     * }
     */
    public static int g_str_is_ascii(MemorySegment str) {
        var mh$ = g_str_is_ascii.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_is_ascii", str);
            }
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strcasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strcasecmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_strcasecmp(const gchar *s1, const gchar *s2)
     * }
     */
    public static FunctionDescriptor g_strcasecmp$descriptor() {
        return g_strcasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_strcasecmp(const gchar *s1, const gchar *s2)
     * }
     */
    public static MethodHandle g_strcasecmp$handle() {
        return g_strcasecmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_strcasecmp(const gchar *s1, const gchar *s2)
     * }
     */
    public static int g_strcasecmp(MemorySegment s1, MemorySegment s2) {
        var mh$ = g_strcasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strcasecmp", s1, s2);
            }
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strncasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strncasecmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_strncasecmp(const gchar *s1, const gchar *s2, guint n)
     * }
     */
    public static FunctionDescriptor g_strncasecmp$descriptor() {
        return g_strncasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_strncasecmp(const gchar *s1, const gchar *s2, guint n)
     * }
     */
    public static MethodHandle g_strncasecmp$handle() {
        return g_strncasecmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_strncasecmp(const gchar *s1, const gchar *s2, guint n)
     * }
     */
    public static int g_strncasecmp(MemorySegment s1, MemorySegment s2, int n) {
        var mh$ = g_strncasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strncasecmp", s1, s2, n);
            }
            return (int)mh$.invokeExact(s1, s2, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strdown(gchar *string)
     * }
     */
    public static FunctionDescriptor g_strdown$descriptor() {
        return g_strdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strdown(gchar *string)
     * }
     */
    public static MethodHandle g_strdown$handle() {
        return g_strdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strdown(gchar *string)
     * }
     */
    public static MemorySegment g_strdown(MemorySegment string) {
        var mh$ = g_strdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strdown", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strup(gchar *string)
     * }
     */
    public static FunctionDescriptor g_strup$descriptor() {
        return g_strup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strup(gchar *string)
     * }
     */
    public static MethodHandle g_strup$handle() {
        return g_strup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strup(gchar *string)
     * }
     */
    public static MemorySegment g_strup(MemorySegment string) {
        var mh$ = g_strup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strup", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strdup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strdup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *(g_strdup)(const gchar *str)
     * }
     */
    public static FunctionDescriptor g_strdup$descriptor() {
        return g_strdup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *(g_strdup)(const gchar *str)
     * }
     */
    public static MethodHandle g_strdup$handle() {
        return g_strdup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *(g_strdup)(const gchar *str)
     * }
     */
    public static MemorySegment g_strdup(MemorySegment str) {
        var mh$ = g_strdup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strdup", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gchar *g_strdup_printf(const gchar *format, ...)
     * }
     */
    public static class g_strdup_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_strdup_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_strdup_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gchar *g_strdup_printf(const gchar *format, ...)
         * }
         */
        public static g_strdup_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_strdup_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_strdup_printf", format, x1);
                }
                return (MemorySegment)spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_strndup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strndup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strndup(const gchar *str, gsize n)
     * }
     */
    public static FunctionDescriptor g_strndup$descriptor() {
        return g_strndup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strndup(const gchar *str, gsize n)
     * }
     */
    public static MethodHandle g_strndup$handle() {
        return g_strndup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strndup(const gchar *str, gsize n)
     * }
     */
    public static MemorySegment g_strndup(MemorySegment str, long n) {
        var mh$ = g_strndup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strndup", str, n);
            }
            return (MemorySegment)mh$.invokeExact(str, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strnfill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strnfill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strnfill(gsize length, gchar fill_char)
     * }
     */
    public static FunctionDescriptor g_strnfill$descriptor() {
        return g_strnfill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strnfill(gsize length, gchar fill_char)
     * }
     */
    public static MethodHandle g_strnfill$handle() {
        return g_strnfill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strnfill(gsize length, gchar fill_char)
     * }
     */
    public static MemorySegment g_strnfill(long length, byte fill_char) {
        var mh$ = g_strnfill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strnfill", length, fill_char);
            }
            return (MemorySegment)mh$.invokeExact(length, fill_char);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gchar *g_strconcat(const gchar *string1, ...)
     * }
     */
    public static class g_strconcat {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_strconcat");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_strconcat(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gchar *g_strconcat(const gchar *string1, ...)
         * }
         */
        public static g_strconcat makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_strconcat(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment string1, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_strconcat", string1, x1);
                }
                return (MemorySegment)spreader.invokeExact(string1, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gchar *g_strjoin(const gchar *separator, ...)
     * }
     */
    public static class g_strjoin {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_strjoin");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_strjoin(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gchar *g_strjoin(const gchar *separator, ...)
         * }
         */
        public static g_strjoin makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_strjoin(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment separator, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_strjoin", separator, x1);
                }
                return (MemorySegment)spreader.invokeExact(separator, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_strcompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strcompress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strcompress(const gchar *source)
     * }
     */
    public static FunctionDescriptor g_strcompress$descriptor() {
        return g_strcompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strcompress(const gchar *source)
     * }
     */
    public static MethodHandle g_strcompress$handle() {
        return g_strcompress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strcompress(const gchar *source)
     * }
     */
    public static MemorySegment g_strcompress(MemorySegment source) {
        var mh$ = g_strcompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strcompress", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strescape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strescape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strescape(const gchar *source, const gchar *exceptions)
     * }
     */
    public static FunctionDescriptor g_strescape$descriptor() {
        return g_strescape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strescape(const gchar *source, const gchar *exceptions)
     * }
     */
    public static MethodHandle g_strescape$handle() {
        return g_strescape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strescape(const gchar *source, const gchar *exceptions)
     * }
     */
    public static MemorySegment g_strescape(MemorySegment source, MemorySegment exceptions) {
        var mh$ = g_strescape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strescape", source, exceptions);
            }
            return (MemorySegment)mh$.invokeExact(source, exceptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memdup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memdup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_memdup(gconstpointer mem, guint byte_size)
     * }
     */
    public static FunctionDescriptor g_memdup$descriptor() {
        return g_memdup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_memdup(gconstpointer mem, guint byte_size)
     * }
     */
    public static MethodHandle g_memdup$handle() {
        return g_memdup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_memdup(gconstpointer mem, guint byte_size)
     * }
     */
    public static MemorySegment g_memdup(MemorySegment mem, int byte_size) {
        var mh$ = g_memdup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memdup", mem, byte_size);
            }
            return (MemorySegment)mh$.invokeExact(mem, byte_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memdup2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memdup2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_memdup2(gconstpointer mem, gsize byte_size)
     * }
     */
    public static FunctionDescriptor g_memdup2$descriptor() {
        return g_memdup2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_memdup2(gconstpointer mem, gsize byte_size)
     * }
     */
    public static MethodHandle g_memdup2$handle() {
        return g_memdup2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_memdup2(gconstpointer mem, gsize byte_size)
     * }
     */
    public static MemorySegment g_memdup2(MemorySegment mem, long byte_size) {
        var mh$ = g_memdup2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memdup2", mem, byte_size);
            }
            return (MemorySegment)mh$.invokeExact(mem, byte_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef gchar **GStrv
     * }
     */
    public static final AddressLayout GStrv = app_indicator_h.C_POINTER;

    private static class g_strsplit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strsplit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_strsplit(const gchar *string, const gchar *delimiter, gint max_tokens)
     * }
     */
    public static FunctionDescriptor g_strsplit$descriptor() {
        return g_strsplit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_strsplit(const gchar *string, const gchar *delimiter, gint max_tokens)
     * }
     */
    public static MethodHandle g_strsplit$handle() {
        return g_strsplit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_strsplit(const gchar *string, const gchar *delimiter, gint max_tokens)
     * }
     */
    public static MemorySegment g_strsplit(MemorySegment string, MemorySegment delimiter, int max_tokens) {
        var mh$ = g_strsplit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strsplit", string, delimiter, max_tokens);
            }
            return (MemorySegment)mh$.invokeExact(string, delimiter, max_tokens);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strsplit_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strsplit_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_strsplit_set(const gchar *string, const gchar *delimiters, gint max_tokens)
     * }
     */
    public static FunctionDescriptor g_strsplit_set$descriptor() {
        return g_strsplit_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_strsplit_set(const gchar *string, const gchar *delimiters, gint max_tokens)
     * }
     */
    public static MethodHandle g_strsplit_set$handle() {
        return g_strsplit_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_strsplit_set(const gchar *string, const gchar *delimiters, gint max_tokens)
     * }
     */
    public static MemorySegment g_strsplit_set(MemorySegment string, MemorySegment delimiters, int max_tokens) {
        var mh$ = g_strsplit_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strsplit_set", string, delimiters, max_tokens);
            }
            return (MemorySegment)mh$.invokeExact(string, delimiters, max_tokens);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strjoinv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strjoinv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strjoinv(const gchar *separator, gchar **str_array)
     * }
     */
    public static FunctionDescriptor g_strjoinv$descriptor() {
        return g_strjoinv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strjoinv(const gchar *separator, gchar **str_array)
     * }
     */
    public static MethodHandle g_strjoinv$handle() {
        return g_strjoinv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strjoinv(const gchar *separator, gchar **str_array)
     * }
     */
    public static MemorySegment g_strjoinv(MemorySegment separator, MemorySegment str_array) {
        var mh$ = g_strjoinv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strjoinv", separator, str_array);
            }
            return (MemorySegment)mh$.invokeExact(separator, str_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strfreev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strfreev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_strfreev(gchar **str_array)
     * }
     */
    public static FunctionDescriptor g_strfreev$descriptor() {
        return g_strfreev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_strfreev(gchar **str_array)
     * }
     */
    public static MethodHandle g_strfreev$handle() {
        return g_strfreev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_strfreev(gchar **str_array)
     * }
     */
    public static void g_strfreev(MemorySegment str_array) {
        var mh$ = g_strfreev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strfreev", str_array);
            }
            mh$.invokeExact(str_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strdupv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strdupv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_strdupv(gchar **str_array)
     * }
     */
    public static FunctionDescriptor g_strdupv$descriptor() {
        return g_strdupv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_strdupv(gchar **str_array)
     * }
     */
    public static MethodHandle g_strdupv$handle() {
        return g_strdupv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_strdupv(gchar **str_array)
     * }
     */
    public static MemorySegment g_strdupv(MemorySegment str_array) {
        var mh$ = g_strdupv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strdupv", str_array);
            }
            return (MemorySegment)mh$.invokeExact(str_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_strv_length(gchar **str_array)
     * }
     */
    public static FunctionDescriptor g_strv_length$descriptor() {
        return g_strv_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_strv_length(gchar **str_array)
     * }
     */
    public static MethodHandle g_strv_length$handle() {
        return g_strv_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_strv_length(gchar **str_array)
     * }
     */
    public static int g_strv_length(MemorySegment str_array) {
        var mh$ = g_strv_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_length", str_array);
            }
            return (int)mh$.invokeExact(str_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_stpcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_stpcpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_stpcpy(gchar *dest, const char *src)
     * }
     */
    public static FunctionDescriptor g_stpcpy$descriptor() {
        return g_stpcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_stpcpy(gchar *dest, const char *src)
     * }
     */
    public static MethodHandle g_stpcpy$handle() {
        return g_stpcpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_stpcpy(gchar *dest, const char *src)
     * }
     */
    public static MemorySegment g_stpcpy(MemorySegment dest, MemorySegment src) {
        var mh$ = g_stpcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_stpcpy", dest, src);
            }
            return (MemorySegment)mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_to_ascii {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_to_ascii"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_str_to_ascii(const gchar *str, const gchar *from_locale)
     * }
     */
    public static FunctionDescriptor g_str_to_ascii$descriptor() {
        return g_str_to_ascii.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_str_to_ascii(const gchar *str, const gchar *from_locale)
     * }
     */
    public static MethodHandle g_str_to_ascii$handle() {
        return g_str_to_ascii.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_str_to_ascii(const gchar *str, const gchar *from_locale)
     * }
     */
    public static MemorySegment g_str_to_ascii(MemorySegment str, MemorySegment from_locale) {
        var mh$ = g_str_to_ascii.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_to_ascii", str, from_locale);
            }
            return (MemorySegment)mh$.invokeExact(str, from_locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_tokenize_and_fold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_tokenize_and_fold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_str_tokenize_and_fold(const gchar *string, const gchar *translit_locale, gchar ***ascii_alternates)
     * }
     */
    public static FunctionDescriptor g_str_tokenize_and_fold$descriptor() {
        return g_str_tokenize_and_fold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_str_tokenize_and_fold(const gchar *string, const gchar *translit_locale, gchar ***ascii_alternates)
     * }
     */
    public static MethodHandle g_str_tokenize_and_fold$handle() {
        return g_str_tokenize_and_fold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_str_tokenize_and_fold(const gchar *string, const gchar *translit_locale, gchar ***ascii_alternates)
     * }
     */
    public static MemorySegment g_str_tokenize_and_fold(MemorySegment string, MemorySegment translit_locale, MemorySegment ascii_alternates) {
        var mh$ = g_str_tokenize_and_fold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_tokenize_and_fold", string, translit_locale, ascii_alternates);
            }
            return (MemorySegment)mh$.invokeExact(string, translit_locale, ascii_alternates);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_str_match_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_str_match_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_str_match_string(const gchar *search_term, const gchar *potential_hit, gboolean accept_alternates)
     * }
     */
    public static FunctionDescriptor g_str_match_string$descriptor() {
        return g_str_match_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_str_match_string(const gchar *search_term, const gchar *potential_hit, gboolean accept_alternates)
     * }
     */
    public static MethodHandle g_str_match_string$handle() {
        return g_str_match_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_str_match_string(const gchar *search_term, const gchar *potential_hit, gboolean accept_alternates)
     * }
     */
    public static int g_str_match_string(MemorySegment search_term, MemorySegment potential_hit, int accept_alternates) {
        var mh$ = g_str_match_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_str_match_string", search_term, potential_hit, accept_alternates);
            }
            return (int)mh$.invokeExact(search_term, potential_hit, accept_alternates);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_contains {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_contains"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_strv_contains(const gchar *const *strv, const gchar *str)
     * }
     */
    public static FunctionDescriptor g_strv_contains$descriptor() {
        return g_strv_contains.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_strv_contains(const gchar *const *strv, const gchar *str)
     * }
     */
    public static MethodHandle g_strv_contains$handle() {
        return g_strv_contains.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_strv_contains(const gchar *const *strv, const gchar *str)
     * }
     */
    public static int g_strv_contains(MemorySegment strv, MemorySegment str) {
        var mh$ = g_strv_contains.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_contains", strv, str);
            }
            return (int)mh$.invokeExact(strv, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_strv_equal(const gchar *const *strv1, const gchar *const *strv2)
     * }
     */
    public static FunctionDescriptor g_strv_equal$descriptor() {
        return g_strv_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_strv_equal(const gchar *const *strv1, const gchar *const *strv2)
     * }
     */
    public static MethodHandle g_strv_equal$handle() {
        return g_strv_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_strv_equal(const gchar *const *strv1, const gchar *const *strv2)
     * }
     */
    public static int g_strv_equal(MemorySegment strv1, MemorySegment strv2) {
        var mh$ = g_strv_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_equal", strv1, strv2);
            }
            return (int)mh$.invokeExact(strv1, strv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_NUMBER_PARSER_ERROR_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NUMBER_PARSER_ERROR_INVALID = 0
     * }
     */
    public static int G_NUMBER_PARSER_ERROR_INVALID() {
        return G_NUMBER_PARSER_ERROR_INVALID;
    }
    private static final int G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = 1
     * }
     */
    public static int G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS() {
        return G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS;
    }

    private static class g_number_parser_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_number_parser_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_number_parser_error_quark()
     * }
     */
    public static FunctionDescriptor g_number_parser_error_quark$descriptor() {
        return g_number_parser_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_number_parser_error_quark()
     * }
     */
    public static MethodHandle g_number_parser_error_quark$handle() {
        return g_number_parser_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_number_parser_error_quark()
     * }
     */
    public static int g_number_parser_error_quark() {
        var mh$ = g_number_parser_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_number_parser_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_string_to_signed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_string_to_signed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ascii_string_to_signed(const gchar *str, guint base, gint64 min, gint64 max, gint64 *out_num, GError **error)
     * }
     */
    public static FunctionDescriptor g_ascii_string_to_signed$descriptor() {
        return g_ascii_string_to_signed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ascii_string_to_signed(const gchar *str, guint base, gint64 min, gint64 max, gint64 *out_num, GError **error)
     * }
     */
    public static MethodHandle g_ascii_string_to_signed$handle() {
        return g_ascii_string_to_signed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ascii_string_to_signed(const gchar *str, guint base, gint64 min, gint64 max, gint64 *out_num, GError **error)
     * }
     */
    public static int g_ascii_string_to_signed(MemorySegment str, int base, long min, long max, MemorySegment out_num, MemorySegment error) {
        var mh$ = g_ascii_string_to_signed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_string_to_signed", str, base, min, max, out_num, error);
            }
            return (int)mh$.invokeExact(str, base, min, max, out_num, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ascii_string_to_unsigned {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ascii_string_to_unsigned"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ascii_string_to_unsigned(const gchar *str, guint base, guint64 min, guint64 max, guint64 *out_num, GError **error)
     * }
     */
    public static FunctionDescriptor g_ascii_string_to_unsigned$descriptor() {
        return g_ascii_string_to_unsigned.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ascii_string_to_unsigned(const gchar *str, guint base, guint64 min, guint64 max, guint64 *out_num, GError **error)
     * }
     */
    public static MethodHandle g_ascii_string_to_unsigned$handle() {
        return g_ascii_string_to_unsigned.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ascii_string_to_unsigned(const gchar *str, guint base, guint64 min, guint64 max, guint64 *out_num, GError **error)
     * }
     */
    public static int g_ascii_string_to_unsigned(MemorySegment str, int base, long min, long max, MemorySegment out_num, MemorySegment error) {
        var mh$ = g_ascii_string_to_unsigned.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ascii_string_to_unsigned", str, base, min, max, out_num, error);
            }
            return (int)mh$.invokeExact(str, base, min, max, out_num, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_new(const gchar *init)
     * }
     */
    public static FunctionDescriptor g_string_new$descriptor() {
        return g_string_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_new(const gchar *init)
     * }
     */
    public static MethodHandle g_string_new$handle() {
        return g_string_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_new(const gchar *init)
     * }
     */
    public static MemorySegment g_string_new(MemorySegment init) {
        var mh$ = g_string_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_new", init);
            }
            return (MemorySegment)mh$.invokeExact(init);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_new_take {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_new_take"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_new_take(gchar *init)
     * }
     */
    public static FunctionDescriptor g_string_new_take$descriptor() {
        return g_string_new_take.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_new_take(gchar *init)
     * }
     */
    public static MethodHandle g_string_new_take$handle() {
        return g_string_new_take.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_new_take(gchar *init)
     * }
     */
    public static MemorySegment g_string_new_take(MemorySegment init) {
        var mh$ = g_string_new_take.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_new_take", init);
            }
            return (MemorySegment)mh$.invokeExact(init);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_new_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_new_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_new_len(const gchar *init, gssize len)
     * }
     */
    public static FunctionDescriptor g_string_new_len$descriptor() {
        return g_string_new_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_new_len(const gchar *init, gssize len)
     * }
     */
    public static MethodHandle g_string_new_len$handle() {
        return g_string_new_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_new_len(const gchar *init, gssize len)
     * }
     */
    public static MemorySegment g_string_new_len(MemorySegment init, long len) {
        var mh$ = g_string_new_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_new_len", init, len);
            }
            return (MemorySegment)mh$.invokeExact(init, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_sized_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_sized_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_sized_new(gsize dfl_size)
     * }
     */
    public static FunctionDescriptor g_string_sized_new$descriptor() {
        return g_string_sized_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_sized_new(gsize dfl_size)
     * }
     */
    public static MethodHandle g_string_sized_new$handle() {
        return g_string_sized_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_sized_new(gsize dfl_size)
     * }
     */
    public static MemorySegment g_string_sized_new(long dfl_size) {
        var mh$ = g_string_sized_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_sized_new", dfl_size);
            }
            return (MemorySegment)mh$.invokeExact(dfl_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *(g_string_free)(GString *string, gboolean free_segment)
     * }
     */
    public static FunctionDescriptor g_string_free$descriptor() {
        return g_string_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *(g_string_free)(GString *string, gboolean free_segment)
     * }
     */
    public static MethodHandle g_string_free$handle() {
        return g_string_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *(g_string_free)(GString *string, gboolean free_segment)
     * }
     */
    public static MemorySegment g_string_free(MemorySegment string, int free_segment) {
        var mh$ = g_string_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_free", string, free_segment);
            }
            return (MemorySegment)mh$.invokeExact(string, free_segment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_free_and_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_free_and_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_string_free_and_steal(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_free_and_steal$descriptor() {
        return g_string_free_and_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_string_free_and_steal(GString *string)
     * }
     */
    public static MethodHandle g_string_free_and_steal$handle() {
        return g_string_free_and_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_string_free_and_steal(GString *string)
     * }
     */
    public static MemorySegment g_string_free_and_steal(MemorySegment string) {
        var mh$ = g_string_free_and_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_free_and_steal", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_free_to_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_free_to_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_string_free_to_bytes(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_free_to_bytes$descriptor() {
        return g_string_free_to_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_string_free_to_bytes(GString *string)
     * }
     */
    public static MethodHandle g_string_free_to_bytes$handle() {
        return g_string_free_to_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_string_free_to_bytes(GString *string)
     * }
     */
    public static MemorySegment g_string_free_to_bytes(MemorySegment string) {
        var mh$ = g_string_free_to_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_free_to_bytes", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_string_equal(const GString *v, const GString *v2)
     * }
     */
    public static FunctionDescriptor g_string_equal$descriptor() {
        return g_string_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_string_equal(const GString *v, const GString *v2)
     * }
     */
    public static MethodHandle g_string_equal$handle() {
        return g_string_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_string_equal(const GString *v, const GString *v2)
     * }
     */
    public static int g_string_equal(MemorySegment v, MemorySegment v2) {
        var mh$ = g_string_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_equal", v, v2);
            }
            return (int)mh$.invokeExact(v, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_string_hash(const GString *str)
     * }
     */
    public static FunctionDescriptor g_string_hash$descriptor() {
        return g_string_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_string_hash(const GString *str)
     * }
     */
    public static MethodHandle g_string_hash$handle() {
        return g_string_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_string_hash(const GString *str)
     * }
     */
    public static int g_string_hash(MemorySegment str) {
        var mh$ = g_string_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_hash", str);
            }
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_assign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_assign(GString *string, const gchar *rval)
     * }
     */
    public static FunctionDescriptor g_string_assign$descriptor() {
        return g_string_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_assign(GString *string, const gchar *rval)
     * }
     */
    public static MethodHandle g_string_assign$handle() {
        return g_string_assign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_assign(GString *string, const gchar *rval)
     * }
     */
    public static MemorySegment g_string_assign(MemorySegment string, MemorySegment rval) {
        var mh$ = g_string_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_assign", string, rval);
            }
            return (MemorySegment)mh$.invokeExact(string, rval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_truncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_truncate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_truncate(GString *string, gsize len)
     * }
     */
    public static FunctionDescriptor g_string_truncate$descriptor() {
        return g_string_truncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_truncate(GString *string, gsize len)
     * }
     */
    public static MethodHandle g_string_truncate$handle() {
        return g_string_truncate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_truncate(GString *string, gsize len)
     * }
     */
    public static MemorySegment g_string_truncate(MemorySegment string, long len) {
        var mh$ = g_string_truncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_truncate", string, len);
            }
            return (MemorySegment)mh$.invokeExact(string, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_set_size(GString *string, gsize len)
     * }
     */
    public static FunctionDescriptor g_string_set_size$descriptor() {
        return g_string_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_set_size(GString *string, gsize len)
     * }
     */
    public static MethodHandle g_string_set_size$handle() {
        return g_string_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_set_size(GString *string, gsize len)
     * }
     */
    public static MemorySegment g_string_set_size(MemorySegment string, long len) {
        var mh$ = g_string_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_set_size", string, len);
            }
            return (MemorySegment)mh$.invokeExact(string, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_insert_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_insert_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_insert_len(GString *string, gssize pos, const gchar *val, gssize len)
     * }
     */
    public static FunctionDescriptor g_string_insert_len$descriptor() {
        return g_string_insert_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_insert_len(GString *string, gssize pos, const gchar *val, gssize len)
     * }
     */
    public static MethodHandle g_string_insert_len$handle() {
        return g_string_insert_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_insert_len(GString *string, gssize pos, const gchar *val, gssize len)
     * }
     */
    public static MemorySegment g_string_insert_len(MemorySegment string, long pos, MemorySegment val, long len) {
        var mh$ = g_string_insert_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_insert_len", string, pos, val, len);
            }
            return (MemorySegment)mh$.invokeExact(string, pos, val, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_append(GString *string, const gchar *val)
     * }
     */
    public static FunctionDescriptor g_string_append$descriptor() {
        return g_string_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_append(GString *string, const gchar *val)
     * }
     */
    public static MethodHandle g_string_append$handle() {
        return g_string_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_append(GString *string, const gchar *val)
     * }
     */
    public static MemorySegment g_string_append(MemorySegment string, MemorySegment val) {
        var mh$ = g_string_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_append", string, val);
            }
            return (MemorySegment)mh$.invokeExact(string, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_append_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_append_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_append_len(GString *string, const gchar *val, gssize len)
     * }
     */
    public static FunctionDescriptor g_string_append_len$descriptor() {
        return g_string_append_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_append_len(GString *string, const gchar *val, gssize len)
     * }
     */
    public static MethodHandle g_string_append_len$handle() {
        return g_string_append_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_append_len(GString *string, const gchar *val, gssize len)
     * }
     */
    public static MemorySegment g_string_append_len(MemorySegment string, MemorySegment val, long len) {
        var mh$ = g_string_append_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_append_len", string, val, len);
            }
            return (MemorySegment)mh$.invokeExact(string, val, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_append_c {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_append_c"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_append_c(GString *string, gchar c)
     * }
     */
    public static FunctionDescriptor g_string_append_c$descriptor() {
        return g_string_append_c.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_append_c(GString *string, gchar c)
     * }
     */
    public static MethodHandle g_string_append_c$handle() {
        return g_string_append_c.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_append_c(GString *string, gchar c)
     * }
     */
    public static MemorySegment g_string_append_c(MemorySegment string, byte c) {
        var mh$ = g_string_append_c.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_append_c", string, c);
            }
            return (MemorySegment)mh$.invokeExact(string, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_append_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_append_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_append_unichar(GString *string, gunichar wc)
     * }
     */
    public static FunctionDescriptor g_string_append_unichar$descriptor() {
        return g_string_append_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_append_unichar(GString *string, gunichar wc)
     * }
     */
    public static MethodHandle g_string_append_unichar$handle() {
        return g_string_append_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_append_unichar(GString *string, gunichar wc)
     * }
     */
    public static MemorySegment g_string_append_unichar(MemorySegment string, int wc) {
        var mh$ = g_string_append_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_append_unichar", string, wc);
            }
            return (MemorySegment)mh$.invokeExact(string, wc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend(GString *string, const gchar *val)
     * }
     */
    public static FunctionDescriptor g_string_prepend$descriptor() {
        return g_string_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend(GString *string, const gchar *val)
     * }
     */
    public static MethodHandle g_string_prepend$handle() {
        return g_string_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_prepend(GString *string, const gchar *val)
     * }
     */
    public static MemorySegment g_string_prepend(MemorySegment string, MemorySegment val) {
        var mh$ = g_string_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_prepend", string, val);
            }
            return (MemorySegment)mh$.invokeExact(string, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_prepend_c {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_prepend_c"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend_c(GString *string, gchar c)
     * }
     */
    public static FunctionDescriptor g_string_prepend_c$descriptor() {
        return g_string_prepend_c.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend_c(GString *string, gchar c)
     * }
     */
    public static MethodHandle g_string_prepend_c$handle() {
        return g_string_prepend_c.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_prepend_c(GString *string, gchar c)
     * }
     */
    public static MemorySegment g_string_prepend_c(MemorySegment string, byte c) {
        var mh$ = g_string_prepend_c.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_prepend_c", string, c);
            }
            return (MemorySegment)mh$.invokeExact(string, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_prepend_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_prepend_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend_unichar(GString *string, gunichar wc)
     * }
     */
    public static FunctionDescriptor g_string_prepend_unichar$descriptor() {
        return g_string_prepend_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend_unichar(GString *string, gunichar wc)
     * }
     */
    public static MethodHandle g_string_prepend_unichar$handle() {
        return g_string_prepend_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_prepend_unichar(GString *string, gunichar wc)
     * }
     */
    public static MemorySegment g_string_prepend_unichar(MemorySegment string, int wc) {
        var mh$ = g_string_prepend_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_prepend_unichar", string, wc);
            }
            return (MemorySegment)mh$.invokeExact(string, wc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_prepend_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_prepend_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend_len(GString *string, const gchar *val, gssize len)
     * }
     */
    public static FunctionDescriptor g_string_prepend_len$descriptor() {
        return g_string_prepend_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_prepend_len(GString *string, const gchar *val, gssize len)
     * }
     */
    public static MethodHandle g_string_prepend_len$handle() {
        return g_string_prepend_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_prepend_len(GString *string, const gchar *val, gssize len)
     * }
     */
    public static MemorySegment g_string_prepend_len(MemorySegment string, MemorySegment val, long len) {
        var mh$ = g_string_prepend_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_prepend_len", string, val, len);
            }
            return (MemorySegment)mh$.invokeExact(string, val, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_insert(GString *string, gssize pos, const gchar *val)
     * }
     */
    public static FunctionDescriptor g_string_insert$descriptor() {
        return g_string_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_insert(GString *string, gssize pos, const gchar *val)
     * }
     */
    public static MethodHandle g_string_insert$handle() {
        return g_string_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_insert(GString *string, gssize pos, const gchar *val)
     * }
     */
    public static MemorySegment g_string_insert(MemorySegment string, long pos, MemorySegment val) {
        var mh$ = g_string_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_insert", string, pos, val);
            }
            return (MemorySegment)mh$.invokeExact(string, pos, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_insert_c {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_insert_c"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_insert_c(GString *string, gssize pos, gchar c)
     * }
     */
    public static FunctionDescriptor g_string_insert_c$descriptor() {
        return g_string_insert_c.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_insert_c(GString *string, gssize pos, gchar c)
     * }
     */
    public static MethodHandle g_string_insert_c$handle() {
        return g_string_insert_c.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_insert_c(GString *string, gssize pos, gchar c)
     * }
     */
    public static MemorySegment g_string_insert_c(MemorySegment string, long pos, byte c) {
        var mh$ = g_string_insert_c.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_insert_c", string, pos, c);
            }
            return (MemorySegment)mh$.invokeExact(string, pos, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_insert_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_insert_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_insert_unichar(GString *string, gssize pos, gunichar wc)
     * }
     */
    public static FunctionDescriptor g_string_insert_unichar$descriptor() {
        return g_string_insert_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_insert_unichar(GString *string, gssize pos, gunichar wc)
     * }
     */
    public static MethodHandle g_string_insert_unichar$handle() {
        return g_string_insert_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_insert_unichar(GString *string, gssize pos, gunichar wc)
     * }
     */
    public static MemorySegment g_string_insert_unichar(MemorySegment string, long pos, int wc) {
        var mh$ = g_string_insert_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_insert_unichar", string, pos, wc);
            }
            return (MemorySegment)mh$.invokeExact(string, pos, wc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_overwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_overwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_overwrite(GString *string, gsize pos, const gchar *val)
     * }
     */
    public static FunctionDescriptor g_string_overwrite$descriptor() {
        return g_string_overwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_overwrite(GString *string, gsize pos, const gchar *val)
     * }
     */
    public static MethodHandle g_string_overwrite$handle() {
        return g_string_overwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_overwrite(GString *string, gsize pos, const gchar *val)
     * }
     */
    public static MemorySegment g_string_overwrite(MemorySegment string, long pos, MemorySegment val) {
        var mh$ = g_string_overwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_overwrite", string, pos, val);
            }
            return (MemorySegment)mh$.invokeExact(string, pos, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_overwrite_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_overwrite_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_overwrite_len(GString *string, gsize pos, const gchar *val, gssize len)
     * }
     */
    public static FunctionDescriptor g_string_overwrite_len$descriptor() {
        return g_string_overwrite_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_overwrite_len(GString *string, gsize pos, const gchar *val, gssize len)
     * }
     */
    public static MethodHandle g_string_overwrite_len$handle() {
        return g_string_overwrite_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_overwrite_len(GString *string, gsize pos, const gchar *val, gssize len)
     * }
     */
    public static MemorySegment g_string_overwrite_len(MemorySegment string, long pos, MemorySegment val, long len) {
        var mh$ = g_string_overwrite_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_overwrite_len", string, pos, val, len);
            }
            return (MemorySegment)mh$.invokeExact(string, pos, val, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_erase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_erase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_erase(GString *string, gssize pos, gssize len)
     * }
     */
    public static FunctionDescriptor g_string_erase$descriptor() {
        return g_string_erase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_erase(GString *string, gssize pos, gssize len)
     * }
     */
    public static MethodHandle g_string_erase$handle() {
        return g_string_erase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_erase(GString *string, gssize pos, gssize len)
     * }
     */
    public static MemorySegment g_string_erase(MemorySegment string, long pos, long len) {
        var mh$ = g_string_erase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_erase", string, pos, len);
            }
            return (MemorySegment)mh$.invokeExact(string, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_replace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_replace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_string_replace(GString *string, const gchar *find, const gchar *replace, guint limit)
     * }
     */
    public static FunctionDescriptor g_string_replace$descriptor() {
        return g_string_replace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_string_replace(GString *string, const gchar *find, const gchar *replace, guint limit)
     * }
     */
    public static MethodHandle g_string_replace$handle() {
        return g_string_replace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_string_replace(GString *string, const gchar *find, const gchar *replace, guint limit)
     * }
     */
    public static int g_string_replace(MemorySegment string, MemorySegment find, MemorySegment replace, int limit) {
        var mh$ = g_string_replace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_replace", string, find, replace, limit);
            }
            return (int)mh$.invokeExact(string, find, replace, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_ascii_down {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_ascii_down"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_ascii_down(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_ascii_down$descriptor() {
        return g_string_ascii_down.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_ascii_down(GString *string)
     * }
     */
    public static MethodHandle g_string_ascii_down$handle() {
        return g_string_ascii_down.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_ascii_down(GString *string)
     * }
     */
    public static MemorySegment g_string_ascii_down(MemorySegment string) {
        var mh$ = g_string_ascii_down.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_ascii_down", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_ascii_up {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_ascii_up"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_ascii_up(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_ascii_up$descriptor() {
        return g_string_ascii_up.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_ascii_up(GString *string)
     * }
     */
    public static MethodHandle g_string_ascii_up$handle() {
        return g_string_ascii_up.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_ascii_up(GString *string)
     * }
     */
    public static MemorySegment g_string_ascii_up(MemorySegment string) {
        var mh$ = g_string_ascii_up.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_ascii_up", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_string_printf(GString *string, const gchar *format, ...)
     * }
     */
    public static class g_string_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_string_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_string_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_string_printf(GString *string, const gchar *format, ...)
         * }
         */
        public static g_string_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_string_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment string, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_string_printf", string, format, x2);
                }
                spreader.invokeExact(string, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_string_append_printf(GString *string, const gchar *format, ...)
     * }
     */
    public static class g_string_append_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_string_append_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_string_append_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_string_append_printf(GString *string, const gchar *format, ...)
         * }
         */
        public static g_string_append_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_string_append_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment string, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_string_append_printf", string, format, x2);
                }
                spreader.invokeExact(string, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_string_append_uri_escaped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_append_uri_escaped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_append_uri_escaped(GString *string, const gchar *unescaped, const gchar *reserved_chars_allowed, gboolean allow_utf8)
     * }
     */
    public static FunctionDescriptor g_string_append_uri_escaped$descriptor() {
        return g_string_append_uri_escaped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_append_uri_escaped(GString *string, const gchar *unescaped, const gchar *reserved_chars_allowed, gboolean allow_utf8)
     * }
     */
    public static MethodHandle g_string_append_uri_escaped$handle() {
        return g_string_append_uri_escaped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_append_uri_escaped(GString *string, const gchar *unescaped, const gchar *reserved_chars_allowed, gboolean allow_utf8)
     * }
     */
    public static MemorySegment g_string_append_uri_escaped(MemorySegment string, MemorySegment unescaped, MemorySegment reserved_chars_allowed, int allow_utf8) {
        var mh$ = g_string_append_uri_escaped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_append_uri_escaped", string, unescaped, reserved_chars_allowed, allow_utf8);
            }
            return (MemorySegment)mh$.invokeExact(string, unescaped, reserved_chars_allowed, allow_utf8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_down {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_down"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_down(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_down$descriptor() {
        return g_string_down.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_down(GString *string)
     * }
     */
    public static MethodHandle g_string_down$handle() {
        return g_string_down.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_down(GString *string)
     * }
     */
    public static MemorySegment g_string_down(MemorySegment string) {
        var mh$ = g_string_down.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_down", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_up {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_up"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_string_up(GString *string)
     * }
     */
    public static FunctionDescriptor g_string_up$descriptor() {
        return g_string_up.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_string_up(GString *string)
     * }
     */
    public static MethodHandle g_string_up$handle() {
        return g_string_up.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_string_up(GString *string)
     * }
     */
    public static MemorySegment g_string_up(MemorySegment string) {
        var mh$ = g_string_up.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_up", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_IO_ERROR_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NONE = 0
     * }
     */
    public static int G_IO_ERROR_NONE() {
        return G_IO_ERROR_NONE;
    }
    private static final int G_IO_ERROR_AGAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_AGAIN = 1
     * }
     */
    public static int G_IO_ERROR_AGAIN() {
        return G_IO_ERROR_AGAIN;
    }
    private static final int G_IO_ERROR_INVAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_INVAL = 2
     * }
     */
    public static int G_IO_ERROR_INVAL() {
        return G_IO_ERROR_INVAL;
    }
    private static final int G_IO_ERROR_UNKNOWN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_UNKNOWN = 3
     * }
     */
    public static int G_IO_ERROR_UNKNOWN() {
        return G_IO_ERROR_UNKNOWN;
    }
    private static final int G_IO_CHANNEL_ERROR_FBIG = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_FBIG = 0
     * }
     */
    public static int G_IO_CHANNEL_ERROR_FBIG() {
        return G_IO_CHANNEL_ERROR_FBIG;
    }
    private static final int G_IO_CHANNEL_ERROR_INVAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_INVAL = 1
     * }
     */
    public static int G_IO_CHANNEL_ERROR_INVAL() {
        return G_IO_CHANNEL_ERROR_INVAL;
    }
    private static final int G_IO_CHANNEL_ERROR_IO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_IO = 2
     * }
     */
    public static int G_IO_CHANNEL_ERROR_IO() {
        return G_IO_CHANNEL_ERROR_IO;
    }
    private static final int G_IO_CHANNEL_ERROR_ISDIR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_ISDIR = 3
     * }
     */
    public static int G_IO_CHANNEL_ERROR_ISDIR() {
        return G_IO_CHANNEL_ERROR_ISDIR;
    }
    private static final int G_IO_CHANNEL_ERROR_NOSPC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_NOSPC = 4
     * }
     */
    public static int G_IO_CHANNEL_ERROR_NOSPC() {
        return G_IO_CHANNEL_ERROR_NOSPC;
    }
    private static final int G_IO_CHANNEL_ERROR_NXIO = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_NXIO = 5
     * }
     */
    public static int G_IO_CHANNEL_ERROR_NXIO() {
        return G_IO_CHANNEL_ERROR_NXIO;
    }
    private static final int G_IO_CHANNEL_ERROR_OVERFLOW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_OVERFLOW = 6
     * }
     */
    public static int G_IO_CHANNEL_ERROR_OVERFLOW() {
        return G_IO_CHANNEL_ERROR_OVERFLOW;
    }
    private static final int G_IO_CHANNEL_ERROR_PIPE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_PIPE = 7
     * }
     */
    public static int G_IO_CHANNEL_ERROR_PIPE() {
        return G_IO_CHANNEL_ERROR_PIPE;
    }
    private static final int G_IO_CHANNEL_ERROR_FAILED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_CHANNEL_ERROR_FAILED = 8
     * }
     */
    public static int G_IO_CHANNEL_ERROR_FAILED() {
        return G_IO_CHANNEL_ERROR_FAILED;
    }
    private static final int G_IO_STATUS_ERROR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STATUS_ERROR = 0
     * }
     */
    public static int G_IO_STATUS_ERROR() {
        return G_IO_STATUS_ERROR;
    }
    private static final int G_IO_STATUS_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STATUS_NORMAL = 1
     * }
     */
    public static int G_IO_STATUS_NORMAL() {
        return G_IO_STATUS_NORMAL;
    }
    private static final int G_IO_STATUS_EOF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STATUS_EOF = 2
     * }
     */
    public static int G_IO_STATUS_EOF() {
        return G_IO_STATUS_EOF;
    }
    private static final int G_IO_STATUS_AGAIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STATUS_AGAIN = 3
     * }
     */
    public static int G_IO_STATUS_AGAIN() {
        return G_IO_STATUS_AGAIN;
    }
    private static final int G_SEEK_CUR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SEEK_CUR = 0
     * }
     */
    public static int G_SEEK_CUR() {
        return G_SEEK_CUR;
    }
    private static final int G_SEEK_SET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SEEK_SET = 1
     * }
     */
    public static int G_SEEK_SET() {
        return G_SEEK_SET;
    }
    private static final int G_SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SEEK_END = 2
     * }
     */
    public static int G_SEEK_END() {
        return G_SEEK_END;
    }
    private static final int G_IO_FLAG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_NONE = 0
     * }
     */
    public static int G_IO_FLAG_NONE() {
        return G_IO_FLAG_NONE;
    }
    private static final int G_IO_FLAG_APPEND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_APPEND = 1
     * }
     */
    public static int G_IO_FLAG_APPEND() {
        return G_IO_FLAG_APPEND;
    }
    private static final int G_IO_FLAG_NONBLOCK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_NONBLOCK = 2
     * }
     */
    public static int G_IO_FLAG_NONBLOCK() {
        return G_IO_FLAG_NONBLOCK;
    }
    private static final int G_IO_FLAG_IS_READABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_IS_READABLE = 4
     * }
     */
    public static int G_IO_FLAG_IS_READABLE() {
        return G_IO_FLAG_IS_READABLE;
    }
    private static final int G_IO_FLAG_IS_WRITABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_IS_WRITABLE = 8
     * }
     */
    public static int G_IO_FLAG_IS_WRITABLE() {
        return G_IO_FLAG_IS_WRITABLE;
    }
    private static final int G_IO_FLAG_IS_WRITEABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_IS_WRITEABLE = 8
     * }
     */
    public static int G_IO_FLAG_IS_WRITEABLE() {
        return G_IO_FLAG_IS_WRITEABLE;
    }
    private static final int G_IO_FLAG_IS_SEEKABLE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_IS_SEEKABLE = 16
     * }
     */
    public static int G_IO_FLAG_IS_SEEKABLE() {
        return G_IO_FLAG_IS_SEEKABLE;
    }
    private static final int G_IO_FLAG_MASK = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_MASK = 31
     * }
     */
    public static int G_IO_FLAG_MASK() {
        return G_IO_FLAG_MASK;
    }
    private static final int G_IO_FLAG_GET_MASK = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_GET_MASK = 31
     * }
     */
    public static int G_IO_FLAG_GET_MASK() {
        return G_IO_FLAG_GET_MASK;
    }
    private static final int G_IO_FLAG_SET_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_FLAG_SET_MASK = 3
     * }
     */
    public static int G_IO_FLAG_SET_MASK() {
        return G_IO_FLAG_SET_MASK;
    }

    private static class g_io_channel_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_channel_init(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_init$descriptor() {
        return g_io_channel_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_channel_init(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_init$handle() {
        return g_io_channel_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_channel_init(GIOChannel *channel)
     * }
     */
    public static void g_io_channel_init(MemorySegment channel) {
        var mh$ = g_io_channel_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_init", channel);
            }
            mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_ref(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_ref$descriptor() {
        return g_io_channel_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_ref(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_ref$handle() {
        return g_io_channel_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_ref(GIOChannel *channel)
     * }
     */
    public static MemorySegment g_io_channel_ref(MemorySegment channel) {
        var mh$ = g_io_channel_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_ref", channel);
            }
            return (MemorySegment)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_channel_unref(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_unref$descriptor() {
        return g_io_channel_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_channel_unref(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_unref$handle() {
        return g_io_channel_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_channel_unref(GIOChannel *channel)
     * }
     */
    public static void g_io_channel_unref(MemorySegment channel) {
        var mh$ = g_io_channel_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_unref", channel);
            }
            mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_read"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOError g_io_channel_read(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read)
     * }
     */
    public static FunctionDescriptor g_io_channel_read$descriptor() {
        return g_io_channel_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOError g_io_channel_read(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read)
     * }
     */
    public static MethodHandle g_io_channel_read$handle() {
        return g_io_channel_read.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOError g_io_channel_read(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read)
     * }
     */
    public static int g_io_channel_read(MemorySegment channel, MemorySegment buf, long count, MemorySegment bytes_read) {
        var mh$ = g_io_channel_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_read", channel, buf, count, bytes_read);
            }
            return (int)mh$.invokeExact(channel, buf, count, bytes_read);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_write"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOError g_io_channel_write(GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written)
     * }
     */
    public static FunctionDescriptor g_io_channel_write$descriptor() {
        return g_io_channel_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOError g_io_channel_write(GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written)
     * }
     */
    public static MethodHandle g_io_channel_write$handle() {
        return g_io_channel_write.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOError g_io_channel_write(GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written)
     * }
     */
    public static int g_io_channel_write(MemorySegment channel, MemorySegment buf, long count, MemorySegment bytes_written) {
        var mh$ = g_io_channel_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_write", channel, buf, count, bytes_written);
            }
            return (int)mh$.invokeExact(channel, buf, count, bytes_written);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_seek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOError g_io_channel_seek(GIOChannel *channel, gint64 offset, GSeekType type)
     * }
     */
    public static FunctionDescriptor g_io_channel_seek$descriptor() {
        return g_io_channel_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOError g_io_channel_seek(GIOChannel *channel, gint64 offset, GSeekType type)
     * }
     */
    public static MethodHandle g_io_channel_seek$handle() {
        return g_io_channel_seek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOError g_io_channel_seek(GIOChannel *channel, gint64 offset, GSeekType type)
     * }
     */
    public static int g_io_channel_seek(MemorySegment channel, long offset, int type) {
        var mh$ = g_io_channel_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_seek", channel, offset, type);
            }
            return (int)mh$.invokeExact(channel, offset, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_channel_close(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_close$descriptor() {
        return g_io_channel_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_channel_close(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_close$handle() {
        return g_io_channel_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_channel_close(GIOChannel *channel)
     * }
     */
    public static void g_io_channel_close(MemorySegment channel) {
        var mh$ = g_io_channel_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_close", channel);
            }
            mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_shutdown(GIOChannel *channel, gboolean flush, GError **err)
     * }
     */
    public static FunctionDescriptor g_io_channel_shutdown$descriptor() {
        return g_io_channel_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_shutdown(GIOChannel *channel, gboolean flush, GError **err)
     * }
     */
    public static MethodHandle g_io_channel_shutdown$handle() {
        return g_io_channel_shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_shutdown(GIOChannel *channel, gboolean flush, GError **err)
     * }
     */
    public static int g_io_channel_shutdown(MemorySegment channel, int flush, MemorySegment err) {
        var mh$ = g_io_channel_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_shutdown", channel, flush, err);
            }
            return (int)mh$.invokeExact(channel, flush, err);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_add_watch_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_add_watch_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_io_add_watch_full(GIOChannel *channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_io_add_watch_full$descriptor() {
        return g_io_add_watch_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_io_add_watch_full(GIOChannel *channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_io_add_watch_full$handle() {
        return g_io_add_watch_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_io_add_watch_full(GIOChannel *channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static int g_io_add_watch_full(MemorySegment channel, int priority, int condition, MemorySegment func, MemorySegment user_data, MemorySegment notify) {
        var mh$ = g_io_add_watch_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_add_watch_full", channel, priority, condition, func, user_data, notify);
            }
            return (int)mh$.invokeExact(channel, priority, condition, func, user_data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_create_watch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_create_watch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_io_create_watch(GIOChannel *channel, GIOCondition condition)
     * }
     */
    public static FunctionDescriptor g_io_create_watch$descriptor() {
        return g_io_create_watch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_io_create_watch(GIOChannel *channel, GIOCondition condition)
     * }
     */
    public static MethodHandle g_io_create_watch$handle() {
        return g_io_create_watch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_io_create_watch(GIOChannel *channel, GIOCondition condition)
     * }
     */
    public static MemorySegment g_io_create_watch(MemorySegment channel, int condition) {
        var mh$ = g_io_create_watch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_create_watch", channel, condition);
            }
            return (MemorySegment)mh$.invokeExact(channel, condition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_add_watch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_add_watch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_io_add_watch(GIOChannel *channel, GIOCondition condition, GIOFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_io_add_watch$descriptor() {
        return g_io_add_watch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_io_add_watch(GIOChannel *channel, GIOCondition condition, GIOFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_io_add_watch$handle() {
        return g_io_add_watch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_io_add_watch(GIOChannel *channel, GIOCondition condition, GIOFunc func, gpointer user_data)
     * }
     */
    public static int g_io_add_watch(MemorySegment channel, int condition, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_io_add_watch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_add_watch", channel, condition, func, user_data);
            }
            return (int)mh$.invokeExact(channel, condition, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_set_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_set_buffer_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_buffer_size(GIOChannel *channel, gsize size)
     * }
     */
    public static FunctionDescriptor g_io_channel_set_buffer_size$descriptor() {
        return g_io_channel_set_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_buffer_size(GIOChannel *channel, gsize size)
     * }
     */
    public static MethodHandle g_io_channel_set_buffer_size$handle() {
        return g_io_channel_set_buffer_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_channel_set_buffer_size(GIOChannel *channel, gsize size)
     * }
     */
    public static void g_io_channel_set_buffer_size(MemorySegment channel, long size) {
        var mh$ = g_io_channel_set_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_set_buffer_size", channel, size);
            }
            mh$.invokeExact(channel, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_buffer_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_io_channel_get_buffer_size(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_get_buffer_size$descriptor() {
        return g_io_channel_get_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_io_channel_get_buffer_size(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_get_buffer_size$handle() {
        return g_io_channel_get_buffer_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_io_channel_get_buffer_size(GIOChannel *channel)
     * }
     */
    public static long g_io_channel_get_buffer_size(MemorySegment channel) {
        var mh$ = g_io_channel_get_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_buffer_size", channel);
            }
            return (long)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_buffer_condition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_buffer_condition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOCondition g_io_channel_get_buffer_condition(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_get_buffer_condition$descriptor() {
        return g_io_channel_get_buffer_condition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOCondition g_io_channel_get_buffer_condition(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_get_buffer_condition$handle() {
        return g_io_channel_get_buffer_condition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOCondition g_io_channel_get_buffer_condition(GIOChannel *channel)
     * }
     */
    public static int g_io_channel_get_buffer_condition(MemorySegment channel) {
        var mh$ = g_io_channel_get_buffer_condition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_buffer_condition", channel);
            }
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_set_flags(GIOChannel *channel, GIOFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_set_flags$descriptor() {
        return g_io_channel_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_set_flags(GIOChannel *channel, GIOFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_set_flags$handle() {
        return g_io_channel_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_set_flags(GIOChannel *channel, GIOFlags flags, GError **error)
     * }
     */
    public static int g_io_channel_set_flags(MemorySegment channel, int flags, MemorySegment error) {
        var mh$ = g_io_channel_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_set_flags", channel, flags, error);
            }
            return (int)mh$.invokeExact(channel, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOFlags g_io_channel_get_flags(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_get_flags$descriptor() {
        return g_io_channel_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOFlags g_io_channel_get_flags(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_get_flags$handle() {
        return g_io_channel_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOFlags g_io_channel_get_flags(GIOChannel *channel)
     * }
     */
    public static int g_io_channel_get_flags(MemorySegment channel) {
        var mh$ = g_io_channel_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_flags", channel);
            }
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_set_line_term {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_set_line_term"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_line_term(GIOChannel *channel, const gchar *line_term, gint length)
     * }
     */
    public static FunctionDescriptor g_io_channel_set_line_term$descriptor() {
        return g_io_channel_set_line_term.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_line_term(GIOChannel *channel, const gchar *line_term, gint length)
     * }
     */
    public static MethodHandle g_io_channel_set_line_term$handle() {
        return g_io_channel_set_line_term.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_channel_set_line_term(GIOChannel *channel, const gchar *line_term, gint length)
     * }
     */
    public static void g_io_channel_set_line_term(MemorySegment channel, MemorySegment line_term, int length) {
        var mh$ = g_io_channel_set_line_term.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_set_line_term", channel, line_term, length);
            }
            mh$.invokeExact(channel, line_term, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_line_term {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_line_term"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_io_channel_get_line_term(GIOChannel *channel, gint *length)
     * }
     */
    public static FunctionDescriptor g_io_channel_get_line_term$descriptor() {
        return g_io_channel_get_line_term.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_io_channel_get_line_term(GIOChannel *channel, gint *length)
     * }
     */
    public static MethodHandle g_io_channel_get_line_term$handle() {
        return g_io_channel_get_line_term.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_io_channel_get_line_term(GIOChannel *channel, gint *length)
     * }
     */
    public static MemorySegment g_io_channel_get_line_term(MemorySegment channel, MemorySegment length) {
        var mh$ = g_io_channel_get_line_term.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_line_term", channel, length);
            }
            return (MemorySegment)mh$.invokeExact(channel, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_set_buffered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_set_buffered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_buffered(GIOChannel *channel, gboolean buffered)
     * }
     */
    public static FunctionDescriptor g_io_channel_set_buffered$descriptor() {
        return g_io_channel_set_buffered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_buffered(GIOChannel *channel, gboolean buffered)
     * }
     */
    public static MethodHandle g_io_channel_set_buffered$handle() {
        return g_io_channel_set_buffered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_channel_set_buffered(GIOChannel *channel, gboolean buffered)
     * }
     */
    public static void g_io_channel_set_buffered(MemorySegment channel, int buffered) {
        var mh$ = g_io_channel_set_buffered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_set_buffered", channel, buffered);
            }
            mh$.invokeExact(channel, buffered);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_buffered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_buffered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_channel_get_buffered(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_get_buffered$descriptor() {
        return g_io_channel_get_buffered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_channel_get_buffered(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_get_buffered$handle() {
        return g_io_channel_get_buffered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_channel_get_buffered(GIOChannel *channel)
     * }
     */
    public static int g_io_channel_get_buffered(MemorySegment channel) {
        var mh$ = g_io_channel_get_buffered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_buffered", channel);
            }
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_set_encoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_set_encoding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_set_encoding(GIOChannel *channel, const gchar *encoding, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_set_encoding$descriptor() {
        return g_io_channel_set_encoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_set_encoding(GIOChannel *channel, const gchar *encoding, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_set_encoding$handle() {
        return g_io_channel_set_encoding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_set_encoding(GIOChannel *channel, const gchar *encoding, GError **error)
     * }
     */
    public static int g_io_channel_set_encoding(MemorySegment channel, MemorySegment encoding, MemorySegment error) {
        var mh$ = g_io_channel_set_encoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_set_encoding", channel, encoding, error);
            }
            return (int)mh$.invokeExact(channel, encoding, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_encoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_encoding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_io_channel_get_encoding(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_get_encoding$descriptor() {
        return g_io_channel_get_encoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_io_channel_get_encoding(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_get_encoding$handle() {
        return g_io_channel_get_encoding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_io_channel_get_encoding(GIOChannel *channel)
     * }
     */
    public static MemorySegment g_io_channel_get_encoding(MemorySegment channel) {
        var mh$ = g_io_channel_get_encoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_encoding", channel);
            }
            return (MemorySegment)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_set_close_on_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_set_close_on_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_close_on_unref(GIOChannel *channel, gboolean do_close)
     * }
     */
    public static FunctionDescriptor g_io_channel_set_close_on_unref$descriptor() {
        return g_io_channel_set_close_on_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_channel_set_close_on_unref(GIOChannel *channel, gboolean do_close)
     * }
     */
    public static MethodHandle g_io_channel_set_close_on_unref$handle() {
        return g_io_channel_set_close_on_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_channel_set_close_on_unref(GIOChannel *channel, gboolean do_close)
     * }
     */
    public static void g_io_channel_set_close_on_unref(MemorySegment channel, int do_close) {
        var mh$ = g_io_channel_set_close_on_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_set_close_on_unref", channel, do_close);
            }
            mh$.invokeExact(channel, do_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_close_on_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_close_on_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_channel_get_close_on_unref(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_get_close_on_unref$descriptor() {
        return g_io_channel_get_close_on_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_channel_get_close_on_unref(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_get_close_on_unref$handle() {
        return g_io_channel_get_close_on_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_channel_get_close_on_unref(GIOChannel *channel)
     * }
     */
    public static int g_io_channel_get_close_on_unref(MemorySegment channel) {
        var mh$ = g_io_channel_get_close_on_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_close_on_unref", channel);
            }
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_flush(GIOChannel *channel, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_flush$descriptor() {
        return g_io_channel_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_flush(GIOChannel *channel, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_flush$handle() {
        return g_io_channel_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_flush(GIOChannel *channel, GError **error)
     * }
     */
    public static int g_io_channel_flush(MemorySegment channel, MemorySegment error) {
        var mh$ = g_io_channel_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_flush", channel, error);
            }
            return (int)mh$.invokeExact(channel, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_read_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_read_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_line(GIOChannel *channel, gchar **str_return, gsize *length, gsize *terminator_pos, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_read_line$descriptor() {
        return g_io_channel_read_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_line(GIOChannel *channel, gchar **str_return, gsize *length, gsize *terminator_pos, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_read_line$handle() {
        return g_io_channel_read_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_line(GIOChannel *channel, gchar **str_return, gsize *length, gsize *terminator_pos, GError **error)
     * }
     */
    public static int g_io_channel_read_line(MemorySegment channel, MemorySegment str_return, MemorySegment length, MemorySegment terminator_pos, MemorySegment error) {
        var mh$ = g_io_channel_read_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_read_line", channel, str_return, length, terminator_pos, error);
            }
            return (int)mh$.invokeExact(channel, str_return, length, terminator_pos, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_read_line_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_read_line_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_line_string(GIOChannel *channel, GString *buffer, gsize *terminator_pos, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_read_line_string$descriptor() {
        return g_io_channel_read_line_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_line_string(GIOChannel *channel, GString *buffer, gsize *terminator_pos, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_read_line_string$handle() {
        return g_io_channel_read_line_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_line_string(GIOChannel *channel, GString *buffer, gsize *terminator_pos, GError **error)
     * }
     */
    public static int g_io_channel_read_line_string(MemorySegment channel, MemorySegment buffer, MemorySegment terminator_pos, MemorySegment error) {
        var mh$ = g_io_channel_read_line_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_read_line_string", channel, buffer, terminator_pos, error);
            }
            return (int)mh$.invokeExact(channel, buffer, terminator_pos, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_read_to_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_read_to_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_to_end(GIOChannel *channel, gchar **str_return, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_read_to_end$descriptor() {
        return g_io_channel_read_to_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_to_end(GIOChannel *channel, gchar **str_return, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_read_to_end$handle() {
        return g_io_channel_read_to_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_to_end(GIOChannel *channel, gchar **str_return, gsize *length, GError **error)
     * }
     */
    public static int g_io_channel_read_to_end(MemorySegment channel, MemorySegment str_return, MemorySegment length, MemorySegment error) {
        var mh$ = g_io_channel_read_to_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_read_to_end", channel, str_return, length, error);
            }
            return (int)mh$.invokeExact(channel, str_return, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_read_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_read_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_chars(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_read_chars$descriptor() {
        return g_io_channel_read_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_chars(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_read_chars$handle() {
        return g_io_channel_read_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_chars(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **error)
     * }
     */
    public static int g_io_channel_read_chars(MemorySegment channel, MemorySegment buf, long count, MemorySegment bytes_read, MemorySegment error) {
        var mh$ = g_io_channel_read_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_read_chars", channel, buf, count, bytes_read, error);
            }
            return (int)mh$.invokeExact(channel, buf, count, bytes_read, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_read_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_read_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_unichar(GIOChannel *channel, gunichar *thechar, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_read_unichar$descriptor() {
        return g_io_channel_read_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_unichar(GIOChannel *channel, gunichar *thechar, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_read_unichar$handle() {
        return g_io_channel_read_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_read_unichar(GIOChannel *channel, gunichar *thechar, GError **error)
     * }
     */
    public static int g_io_channel_read_unichar(MemorySegment channel, MemorySegment thechar, MemorySegment error) {
        var mh$ = g_io_channel_read_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_read_unichar", channel, thechar, error);
            }
            return (int)mh$.invokeExact(channel, thechar, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_write_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_write_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_write_chars(GIOChannel *channel, const gchar *buf, gssize count, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_write_chars$descriptor() {
        return g_io_channel_write_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_write_chars(GIOChannel *channel, const gchar *buf, gssize count, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_write_chars$handle() {
        return g_io_channel_write_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_write_chars(GIOChannel *channel, const gchar *buf, gssize count, gsize *bytes_written, GError **error)
     * }
     */
    public static int g_io_channel_write_chars(MemorySegment channel, MemorySegment buf, long count, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_io_channel_write_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_write_chars", channel, buf, count, bytes_written, error);
            }
            return (int)mh$.invokeExact(channel, buf, count, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_write_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_write_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_write_unichar(GIOChannel *channel, gunichar thechar, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_write_unichar$descriptor() {
        return g_io_channel_write_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_write_unichar(GIOChannel *channel, gunichar thechar, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_write_unichar$handle() {
        return g_io_channel_write_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_write_unichar(GIOChannel *channel, gunichar thechar, GError **error)
     * }
     */
    public static int g_io_channel_write_unichar(MemorySegment channel, int thechar, MemorySegment error) {
        var mh$ = g_io_channel_write_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_write_unichar", channel, thechar, error);
            }
            return (int)mh$.invokeExact(channel, thechar, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_seek_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_seek_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_seek_position(GIOChannel *channel, gint64 offset, GSeekType type, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_seek_position$descriptor() {
        return g_io_channel_seek_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_seek_position(GIOChannel *channel, gint64 offset, GSeekType type, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_seek_position$handle() {
        return g_io_channel_seek_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStatus g_io_channel_seek_position(GIOChannel *channel, gint64 offset, GSeekType type, GError **error)
     * }
     */
    public static int g_io_channel_seek_position(MemorySegment channel, long offset, int type, MemorySegment error) {
        var mh$ = g_io_channel_seek_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_seek_position", channel, offset, type, error);
            }
            return (int)mh$.invokeExact(channel, offset, type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_new_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_new_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_new_file(const gchar *filename, const gchar *mode, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_channel_new_file$descriptor() {
        return g_io_channel_new_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_new_file(const gchar *filename, const gchar *mode, GError **error)
     * }
     */
    public static MethodHandle g_io_channel_new_file$handle() {
        return g_io_channel_new_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_new_file(const gchar *filename, const gchar *mode, GError **error)
     * }
     */
    public static MemorySegment g_io_channel_new_file(MemorySegment filename, MemorySegment mode, MemorySegment error) {
        var mh$ = g_io_channel_new_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_new_file", filename, mode, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, mode, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_io_channel_error_quark()
     * }
     */
    public static FunctionDescriptor g_io_channel_error_quark$descriptor() {
        return g_io_channel_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_io_channel_error_quark()
     * }
     */
    public static MethodHandle g_io_channel_error_quark$handle() {
        return g_io_channel_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_io_channel_error_quark()
     * }
     */
    public static int g_io_channel_error_quark() {
        var mh$ = g_io_channel_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_error_from_errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_error_from_errno"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOChannelError g_io_channel_error_from_errno(gint en)
     * }
     */
    public static FunctionDescriptor g_io_channel_error_from_errno$descriptor() {
        return g_io_channel_error_from_errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOChannelError g_io_channel_error_from_errno(gint en)
     * }
     */
    public static MethodHandle g_io_channel_error_from_errno$handle() {
        return g_io_channel_error_from_errno.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOChannelError g_io_channel_error_from_errno(gint en)
     * }
     */
    public static int g_io_channel_error_from_errno(int en) {
        var mh$ = g_io_channel_error_from_errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_error_from_errno", en);
            }
            return (int)mh$.invokeExact(en);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_unix_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_unix_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_unix_new(int fd)
     * }
     */
    public static FunctionDescriptor g_io_channel_unix_new$descriptor() {
        return g_io_channel_unix_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_unix_new(int fd)
     * }
     */
    public static MethodHandle g_io_channel_unix_new$handle() {
        return g_io_channel_unix_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOChannel *g_io_channel_unix_new(int fd)
     * }
     */
    public static MemorySegment g_io_channel_unix_new(int fd) {
        var mh$ = g_io_channel_unix_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_unix_new", fd);
            }
            return (MemorySegment)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_unix_get_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_unix_get_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_io_channel_unix_get_fd(GIOChannel *channel)
     * }
     */
    public static FunctionDescriptor g_io_channel_unix_get_fd$descriptor() {
        return g_io_channel_unix_get_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_io_channel_unix_get_fd(GIOChannel *channel)
     * }
     */
    public static MethodHandle g_io_channel_unix_get_fd$handle() {
        return g_io_channel_unix_get_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_io_channel_unix_get_fd(GIOChannel *channel)
     * }
     */
    public static int g_io_channel_unix_get_fd(MemorySegment channel) {
        var mh$ = g_io_channel_unix_get_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_unix_get_fd", channel);
            }
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_watch_funcs$constants {
        public static final GroupLayout LAYOUT = _GSourceFuncs.layout();
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_io_watch_funcs").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_io_watch_funcs
     * }
     */
    public static GroupLayout g_io_watch_funcs$layout() {
        return g_io_watch_funcs$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_io_watch_funcs
     * }
     */
    public static MemorySegment g_io_watch_funcs() {
        return g_io_watch_funcs$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GSourceFuncs g_io_watch_funcs
     * }
     */
    public static void g_io_watch_funcs(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_io_watch_funcs$constants.SEGMENT, 0L, g_io_watch_funcs$constants.LAYOUT.byteSize());
    }
    private static final int G_KEY_FILE_ERROR_UNKNOWN_ENCODING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0
     * }
     */
    public static int G_KEY_FILE_ERROR_UNKNOWN_ENCODING() {
        return G_KEY_FILE_ERROR_UNKNOWN_ENCODING;
    }
    private static final int G_KEY_FILE_ERROR_PARSE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_ERROR_PARSE = 1
     * }
     */
    public static int G_KEY_FILE_ERROR_PARSE() {
        return G_KEY_FILE_ERROR_PARSE;
    }
    private static final int G_KEY_FILE_ERROR_NOT_FOUND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_ERROR_NOT_FOUND = 2
     * }
     */
    public static int G_KEY_FILE_ERROR_NOT_FOUND() {
        return G_KEY_FILE_ERROR_NOT_FOUND;
    }
    private static final int G_KEY_FILE_ERROR_KEY_NOT_FOUND = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3
     * }
     */
    public static int G_KEY_FILE_ERROR_KEY_NOT_FOUND() {
        return G_KEY_FILE_ERROR_KEY_NOT_FOUND;
    }
    private static final int G_KEY_FILE_ERROR_GROUP_NOT_FOUND = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4
     * }
     */
    public static int G_KEY_FILE_ERROR_GROUP_NOT_FOUND() {
        return G_KEY_FILE_ERROR_GROUP_NOT_FOUND;
    }
    private static final int G_KEY_FILE_ERROR_INVALID_VALUE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_ERROR_INVALID_VALUE = 5
     * }
     */
    public static int G_KEY_FILE_ERROR_INVALID_VALUE() {
        return G_KEY_FILE_ERROR_INVALID_VALUE;
    }

    private static class g_key_file_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_key_file_error_quark()
     * }
     */
    public static FunctionDescriptor g_key_file_error_quark$descriptor() {
        return g_key_file_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_key_file_error_quark()
     * }
     */
    public static MethodHandle g_key_file_error_quark$handle() {
        return g_key_file_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_key_file_error_quark()
     * }
     */
    public static int g_key_file_error_quark() {
        var mh$ = g_key_file_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_KEY_FILE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_NONE = 0
     * }
     */
    public static int G_KEY_FILE_NONE() {
        return G_KEY_FILE_NONE;
    }
    private static final int G_KEY_FILE_KEEP_COMMENTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_KEEP_COMMENTS = 1
     * }
     */
    public static int G_KEY_FILE_KEEP_COMMENTS() {
        return G_KEY_FILE_KEEP_COMMENTS;
    }
    private static final int G_KEY_FILE_KEEP_TRANSLATIONS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_KEY_FILE_KEEP_TRANSLATIONS = 2
     * }
     */
    public static int G_KEY_FILE_KEEP_TRANSLATIONS() {
        return G_KEY_FILE_KEEP_TRANSLATIONS;
    }

    private static class g_key_file_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GKeyFile *g_key_file_new()
     * }
     */
    public static FunctionDescriptor g_key_file_new$descriptor() {
        return g_key_file_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GKeyFile *g_key_file_new()
     * }
     */
    public static MethodHandle g_key_file_new$handle() {
        return g_key_file_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GKeyFile *g_key_file_new()
     * }
     */
    public static MemorySegment g_key_file_new() {
        var mh$ = g_key_file_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GKeyFile *g_key_file_ref(GKeyFile *key_file)
     * }
     */
    public static FunctionDescriptor g_key_file_ref$descriptor() {
        return g_key_file_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GKeyFile *g_key_file_ref(GKeyFile *key_file)
     * }
     */
    public static MethodHandle g_key_file_ref$handle() {
        return g_key_file_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GKeyFile *g_key_file_ref(GKeyFile *key_file)
     * }
     */
    public static MemorySegment g_key_file_ref(MemorySegment key_file) {
        var mh$ = g_key_file_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_ref", key_file);
            }
            return (MemorySegment)mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_unref(GKeyFile *key_file)
     * }
     */
    public static FunctionDescriptor g_key_file_unref$descriptor() {
        return g_key_file_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_unref(GKeyFile *key_file)
     * }
     */
    public static MethodHandle g_key_file_unref$handle() {
        return g_key_file_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_unref(GKeyFile *key_file)
     * }
     */
    public static void g_key_file_unref(MemorySegment key_file) {
        var mh$ = g_key_file_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_unref", key_file);
            }
            mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_free(GKeyFile *key_file)
     * }
     */
    public static FunctionDescriptor g_key_file_free$descriptor() {
        return g_key_file_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_free(GKeyFile *key_file)
     * }
     */
    public static MethodHandle g_key_file_free$handle() {
        return g_key_file_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_free(GKeyFile *key_file)
     * }
     */
    public static void g_key_file_free(MemorySegment key_file) {
        var mh$ = g_key_file_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_free", key_file);
            }
            mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_list_separator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_list_separator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_list_separator(GKeyFile *key_file, gchar separator)
     * }
     */
    public static FunctionDescriptor g_key_file_set_list_separator$descriptor() {
        return g_key_file_set_list_separator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_list_separator(GKeyFile *key_file, gchar separator)
     * }
     */
    public static MethodHandle g_key_file_set_list_separator$handle() {
        return g_key_file_set_list_separator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_list_separator(GKeyFile *key_file, gchar separator)
     * }
     */
    public static void g_key_file_set_list_separator(MemorySegment key_file, byte separator) {
        var mh$ = g_key_file_set_list_separator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_list_separator", key_file, separator);
            }
            mh$.invokeExact(key_file, separator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_load_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_load_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_file(GKeyFile *key_file, const gchar *file, GKeyFileFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_load_from_file$descriptor() {
        return g_key_file_load_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_file(GKeyFile *key_file, const gchar *file, GKeyFileFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_key_file_load_from_file$handle() {
        return g_key_file_load_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_file(GKeyFile *key_file, const gchar *file, GKeyFileFlags flags, GError **error)
     * }
     */
    public static int g_key_file_load_from_file(MemorySegment key_file, MemorySegment file, int flags, MemorySegment error) {
        var mh$ = g_key_file_load_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_load_from_file", key_file, file, flags, error);
            }
            return (int)mh$.invokeExact(key_file, file, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_load_from_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_load_from_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_data(GKeyFile *key_file, const gchar *data, gsize length, GKeyFileFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_load_from_data$descriptor() {
        return g_key_file_load_from_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_data(GKeyFile *key_file, const gchar *data, gsize length, GKeyFileFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_key_file_load_from_data$handle() {
        return g_key_file_load_from_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_data(GKeyFile *key_file, const gchar *data, gsize length, GKeyFileFlags flags, GError **error)
     * }
     */
    public static int g_key_file_load_from_data(MemorySegment key_file, MemorySegment data, long length, int flags, MemorySegment error) {
        var mh$ = g_key_file_load_from_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_load_from_data", key_file, data, length, flags, error);
            }
            return (int)mh$.invokeExact(key_file, data, length, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_load_from_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_load_from_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_bytes(GKeyFile *key_file, GBytes *bytes, GKeyFileFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_load_from_bytes$descriptor() {
        return g_key_file_load_from_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_bytes(GKeyFile *key_file, GBytes *bytes, GKeyFileFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_key_file_load_from_bytes$handle() {
        return g_key_file_load_from_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_bytes(GKeyFile *key_file, GBytes *bytes, GKeyFileFlags flags, GError **error)
     * }
     */
    public static int g_key_file_load_from_bytes(MemorySegment key_file, MemorySegment bytes, int flags, MemorySegment error) {
        var mh$ = g_key_file_load_from_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_load_from_bytes", key_file, bytes, flags, error);
            }
            return (int)mh$.invokeExact(key_file, bytes, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_load_from_dirs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_load_from_dirs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_dirs(GKeyFile *key_file, const gchar *file, const gchar **search_dirs, gchar **full_path, GKeyFileFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_load_from_dirs$descriptor() {
        return g_key_file_load_from_dirs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_dirs(GKeyFile *key_file, const gchar *file, const gchar **search_dirs, gchar **full_path, GKeyFileFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_key_file_load_from_dirs$handle() {
        return g_key_file_load_from_dirs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_dirs(GKeyFile *key_file, const gchar *file, const gchar **search_dirs, gchar **full_path, GKeyFileFlags flags, GError **error)
     * }
     */
    public static int g_key_file_load_from_dirs(MemorySegment key_file, MemorySegment file, MemorySegment search_dirs, MemorySegment full_path, int flags, MemorySegment error) {
        var mh$ = g_key_file_load_from_dirs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_load_from_dirs", key_file, file, search_dirs, full_path, flags, error);
            }
            return (int)mh$.invokeExact(key_file, file, search_dirs, full_path, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_load_from_data_dirs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_load_from_data_dirs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_data_dirs(GKeyFile *key_file, const gchar *file, gchar **full_path, GKeyFileFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_load_from_data_dirs$descriptor() {
        return g_key_file_load_from_data_dirs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_data_dirs(GKeyFile *key_file, const gchar *file, gchar **full_path, GKeyFileFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_key_file_load_from_data_dirs$handle() {
        return g_key_file_load_from_data_dirs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_load_from_data_dirs(GKeyFile *key_file, const gchar *file, gchar **full_path, GKeyFileFlags flags, GError **error)
     * }
     */
    public static int g_key_file_load_from_data_dirs(MemorySegment key_file, MemorySegment file, MemorySegment full_path, int flags, MemorySegment error) {
        var mh$ = g_key_file_load_from_data_dirs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_load_from_data_dirs", key_file, file, full_path, flags, error);
            }
            return (int)mh$.invokeExact(key_file, file, full_path, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_to_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_to_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_to_data(GKeyFile *key_file, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_to_data$descriptor() {
        return g_key_file_to_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_to_data(GKeyFile *key_file, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_key_file_to_data$handle() {
        return g_key_file_to_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_key_file_to_data(GKeyFile *key_file, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_key_file_to_data(MemorySegment key_file, MemorySegment length, MemorySegment error) {
        var mh$ = g_key_file_to_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_to_data", key_file, length, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_save_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_save_to_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_save_to_file(GKeyFile *key_file, const gchar *filename, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_save_to_file$descriptor() {
        return g_key_file_save_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_save_to_file(GKeyFile *key_file, const gchar *filename, GError **error)
     * }
     */
    public static MethodHandle g_key_file_save_to_file$handle() {
        return g_key_file_save_to_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_save_to_file(GKeyFile *key_file, const gchar *filename, GError **error)
     * }
     */
    public static int g_key_file_save_to_file(MemorySegment key_file, MemorySegment filename, MemorySegment error) {
        var mh$ = g_key_file_save_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_save_to_file", key_file, filename, error);
            }
            return (int)mh$.invokeExact(key_file, filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_start_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_start_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_start_group(GKeyFile *key_file)
     * }
     */
    public static FunctionDescriptor g_key_file_get_start_group$descriptor() {
        return g_key_file_get_start_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_start_group(GKeyFile *key_file)
     * }
     */
    public static MethodHandle g_key_file_get_start_group$handle() {
        return g_key_file_get_start_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_start_group(GKeyFile *key_file)
     * }
     */
    public static MemorySegment g_key_file_get_start_group(MemorySegment key_file) {
        var mh$ = g_key_file_get_start_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_start_group", key_file);
            }
            return (MemorySegment)mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_groups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_groups(GKeyFile *key_file, gsize *length)
     * }
     */
    public static FunctionDescriptor g_key_file_get_groups$descriptor() {
        return g_key_file_get_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_groups(GKeyFile *key_file, gsize *length)
     * }
     */
    public static MethodHandle g_key_file_get_groups$handle() {
        return g_key_file_get_groups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_groups(GKeyFile *key_file, gsize *length)
     * }
     */
    public static MemorySegment g_key_file_get_groups(MemorySegment key_file, MemorySegment length) {
        var mh$ = g_key_file_get_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_groups", key_file, length);
            }
            return (MemorySegment)mh$.invokeExact(key_file, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_keys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_keys(GKeyFile *key_file, const gchar *group_name, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_keys$descriptor() {
        return g_key_file_get_keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_keys(GKeyFile *key_file, const gchar *group_name, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_keys$handle() {
        return g_key_file_get_keys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_keys(GKeyFile *key_file, const gchar *group_name, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_keys(MemorySegment key_file, MemorySegment group_name, MemorySegment length, MemorySegment error) {
        var mh$ = g_key_file_get_keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_keys", key_file, group_name, length, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_has_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_has_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_has_group(GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static FunctionDescriptor g_key_file_has_group$descriptor() {
        return g_key_file_has_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_has_group(GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static MethodHandle g_key_file_has_group$handle() {
        return g_key_file_has_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_has_group(GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static int g_key_file_has_group(MemorySegment key_file, MemorySegment group_name) {
        var mh$ = g_key_file_has_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_has_group", key_file, group_name);
            }
            return (int)mh$.invokeExact(key_file, group_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_has_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_has_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_has_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_has_key$descriptor() {
        return g_key_file_has_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_has_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_has_key$handle() {
        return g_key_file_has_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_has_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static int g_key_file_has_key(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_has_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_has_key", key_file, group_name, key, error);
            }
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_value(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_value$descriptor() {
        return g_key_file_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_value(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_value$handle() {
        return g_key_file_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_value(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_value(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_value", key_file, group_name, key, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_value(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_key_file_set_value$descriptor() {
        return g_key_file_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_value(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *value)
     * }
     */
    public static MethodHandle g_key_file_set_value$handle() {
        return g_key_file_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_value(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *value)
     * }
     */
    public static void g_key_file_set_value(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment value) {
        var mh$ = g_key_file_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_value", key_file, group_name, key, value);
            }
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_string$descriptor() {
        return g_key_file_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_string$handle() {
        return g_key_file_get_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_string(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_string", key_file, group_name, key, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *string)
     * }
     */
    public static FunctionDescriptor g_key_file_set_string$descriptor() {
        return g_key_file_set_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *string)
     * }
     */
    public static MethodHandle g_key_file_set_string$handle() {
        return g_key_file_set_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *string)
     * }
     */
    public static void g_key_file_set_string(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment string) {
        var mh$ = g_key_file_set_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_string", key_file, group_name, key, string);
            }
            mh$.invokeExact(key_file, group_name, key, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_locale_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_locale_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_locale_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_locale_string$descriptor() {
        return g_key_file_get_locale_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_locale_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_locale_string$handle() {
        return g_key_file_get_locale_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_locale_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_locale_string(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment locale, MemorySegment error) {
        var mh$ = g_key_file_get_locale_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_locale_string", key_file, group_name, key, locale, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, locale, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_locale_for_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_locale_for_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_locale_for_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale)
     * }
     */
    public static FunctionDescriptor g_key_file_get_locale_for_key$descriptor() {
        return g_key_file_get_locale_for_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_locale_for_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale)
     * }
     */
    public static MethodHandle g_key_file_get_locale_for_key$handle() {
        return g_key_file_get_locale_for_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_locale_for_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale)
     * }
     */
    public static MemorySegment g_key_file_get_locale_for_key(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment locale) {
        var mh$ = g_key_file_get_locale_for_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_locale_for_key", key_file, group_name, key, locale);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_locale_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_locale_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_locale_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *string)
     * }
     */
    public static FunctionDescriptor g_key_file_set_locale_string$descriptor() {
        return g_key_file_set_locale_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_locale_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *string)
     * }
     */
    public static MethodHandle g_key_file_set_locale_string$handle() {
        return g_key_file_set_locale_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_locale_string(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *string)
     * }
     */
    public static void g_key_file_set_locale_string(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment locale, MemorySegment string) {
        var mh$ = g_key_file_set_locale_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_locale_string", key_file, group_name, key, locale, string);
            }
            mh$.invokeExact(key_file, group_name, key, locale, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_get_boolean(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_boolean$descriptor() {
        return g_key_file_get_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_get_boolean(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_boolean$handle() {
        return g_key_file_get_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_get_boolean(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static int g_key_file_get_boolean(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_boolean", key_file, group_name, key, error);
            }
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_boolean(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean value)
     * }
     */
    public static FunctionDescriptor g_key_file_set_boolean$descriptor() {
        return g_key_file_set_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_boolean(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean value)
     * }
     */
    public static MethodHandle g_key_file_set_boolean$handle() {
        return g_key_file_set_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_boolean(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean value)
     * }
     */
    public static void g_key_file_set_boolean(MemorySegment key_file, MemorySegment group_name, MemorySegment key, int value) {
        var mh$ = g_key_file_set_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_boolean", key_file, group_name, key, value);
            }
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_integer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_integer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_key_file_get_integer(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_integer$descriptor() {
        return g_key_file_get_integer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_key_file_get_integer(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_integer$handle() {
        return g_key_file_get_integer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_key_file_get_integer(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static int g_key_file_get_integer(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_integer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_integer", key_file, group_name, key, error);
            }
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_integer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_integer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_integer(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint value)
     * }
     */
    public static FunctionDescriptor g_key_file_set_integer$descriptor() {
        return g_key_file_set_integer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_integer(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint value)
     * }
     */
    public static MethodHandle g_key_file_set_integer$handle() {
        return g_key_file_set_integer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_integer(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint value)
     * }
     */
    public static void g_key_file_set_integer(MemorySegment key_file, MemorySegment group_name, MemorySegment key, int value) {
        var mh$ = g_key_file_set_integer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_integer", key_file, group_name, key, value);
            }
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_key_file_get_int64(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_int64$descriptor() {
        return g_key_file_get_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_key_file_get_int64(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_int64$handle() {
        return g_key_file_get_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_key_file_get_int64(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static long g_key_file_get_int64(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_int64", key_file, group_name, key, error);
            }
            return (long)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_int64(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint64 value)
     * }
     */
    public static FunctionDescriptor g_key_file_set_int64$descriptor() {
        return g_key_file_set_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_int64(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint64 value)
     * }
     */
    public static MethodHandle g_key_file_set_int64$handle() {
        return g_key_file_set_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_int64(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint64 value)
     * }
     */
    public static void g_key_file_set_int64(MemorySegment key_file, MemorySegment group_name, MemorySegment key, long value) {
        var mh$ = g_key_file_set_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_int64", key_file, group_name, key, value);
            }
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_key_file_get_uint64(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_uint64$descriptor() {
        return g_key_file_get_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_key_file_get_uint64(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_uint64$handle() {
        return g_key_file_get_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 g_key_file_get_uint64(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static long g_key_file_get_uint64(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_uint64", key_file, group_name, key, error);
            }
            return (long)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_uint64(GKeyFile *key_file, const gchar *group_name, const gchar *key, guint64 value)
     * }
     */
    public static FunctionDescriptor g_key_file_set_uint64$descriptor() {
        return g_key_file_set_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_uint64(GKeyFile *key_file, const gchar *group_name, const gchar *key, guint64 value)
     * }
     */
    public static MethodHandle g_key_file_set_uint64$handle() {
        return g_key_file_set_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_uint64(GKeyFile *key_file, const gchar *group_name, const gchar *key, guint64 value)
     * }
     */
    public static void g_key_file_set_uint64(MemorySegment key_file, MemorySegment group_name, MemorySegment key, long value) {
        var mh$ = g_key_file_set_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_uint64", key_file, group_name, key, value);
            }
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_key_file_get_double(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_double$descriptor() {
        return g_key_file_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_key_file_get_double(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_double$handle() {
        return g_key_file_get_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_key_file_get_double(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static double g_key_file_get_double(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_double", key_file, group_name, key, error);
            }
            return (double)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_double(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble value)
     * }
     */
    public static FunctionDescriptor g_key_file_set_double$descriptor() {
        return g_key_file_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_double(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble value)
     * }
     */
    public static MethodHandle g_key_file_set_double$handle() {
        return g_key_file_set_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_double(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble value)
     * }
     */
    public static void g_key_file_set_double(MemorySegment key_file, MemorySegment group_name, MemorySegment key, double value) {
        var mh$ = g_key_file_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_double", key_file, group_name, key, value);
            }
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_string_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_string_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_string_list$descriptor() {
        return g_key_file_get_string_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_string_list$handle() {
        return g_key_file_get_string_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_string_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment length, MemorySegment error) {
        var mh$ = g_key_file_get_string_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_string_list", key_file, group_name, key, length, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_string_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_string_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *const list[], gsize length)
     * }
     */
    public static FunctionDescriptor g_key_file_set_string_list$descriptor() {
        return g_key_file_set_string_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *const list[], gsize length)
     * }
     */
    public static MethodHandle g_key_file_set_string_list$handle() {
        return g_key_file_set_string_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *const list[], gsize length)
     * }
     */
    public static void g_key_file_set_string_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment list, long length) {
        var mh$ = g_key_file_set_string_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_string_list", key_file, group_name, key, list, length);
            }
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_locale_string_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_locale_string_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_locale_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_locale_string_list$descriptor() {
        return g_key_file_get_locale_string_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_locale_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_locale_string_list$handle() {
        return g_key_file_get_locale_string_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_key_file_get_locale_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_locale_string_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment locale, MemorySegment length, MemorySegment error) {
        var mh$ = g_key_file_get_locale_string_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_locale_string_list", key_file, group_name, key, locale, length, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, locale, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_locale_string_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_locale_string_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_locale_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *const list[], gsize length)
     * }
     */
    public static FunctionDescriptor g_key_file_set_locale_string_list$descriptor() {
        return g_key_file_set_locale_string_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_locale_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *const list[], gsize length)
     * }
     */
    public static MethodHandle g_key_file_set_locale_string_list$handle() {
        return g_key_file_set_locale_string_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_locale_string_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *const list[], gsize length)
     * }
     */
    public static void g_key_file_set_locale_string_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment locale, MemorySegment list, long length) {
        var mh$ = g_key_file_set_locale_string_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_locale_string_list", key_file, group_name, key, locale, list, length);
            }
            mh$.invokeExact(key_file, group_name, key, locale, list, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_boolean_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_boolean_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean *g_key_file_get_boolean_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_boolean_list$descriptor() {
        return g_key_file_get_boolean_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean *g_key_file_get_boolean_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_boolean_list$handle() {
        return g_key_file_get_boolean_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean *g_key_file_get_boolean_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_boolean_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment length, MemorySegment error) {
        var mh$ = g_key_file_get_boolean_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_boolean_list", key_file, group_name, key, length, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_boolean_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_boolean_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_boolean_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean list[], gsize length)
     * }
     */
    public static FunctionDescriptor g_key_file_set_boolean_list$descriptor() {
        return g_key_file_set_boolean_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_boolean_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean list[], gsize length)
     * }
     */
    public static MethodHandle g_key_file_set_boolean_list$handle() {
        return g_key_file_set_boolean_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_boolean_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean list[], gsize length)
     * }
     */
    public static void g_key_file_set_boolean_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment list, long length) {
        var mh$ = g_key_file_set_boolean_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_boolean_list", key_file, group_name, key, list, length);
            }
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_integer_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_integer_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint *g_key_file_get_integer_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_integer_list$descriptor() {
        return g_key_file_get_integer_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint *g_key_file_get_integer_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_integer_list$handle() {
        return g_key_file_get_integer_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint *g_key_file_get_integer_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_integer_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment length, MemorySegment error) {
        var mh$ = g_key_file_get_integer_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_integer_list", key_file, group_name, key, length, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_double_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_double_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_double_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble list[], gsize length)
     * }
     */
    public static FunctionDescriptor g_key_file_set_double_list$descriptor() {
        return g_key_file_set_double_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_double_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble list[], gsize length)
     * }
     */
    public static MethodHandle g_key_file_set_double_list$handle() {
        return g_key_file_set_double_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_double_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble list[], gsize length)
     * }
     */
    public static void g_key_file_set_double_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment list, long length) {
        var mh$ = g_key_file_set_double_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_double_list", key_file, group_name, key, list, length);
            }
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_double_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_double_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble *g_key_file_get_double_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_double_list$descriptor() {
        return g_key_file_get_double_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble *g_key_file_get_double_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_double_list$handle() {
        return g_key_file_get_double_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble *g_key_file_get_double_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_double_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment length, MemorySegment error) {
        var mh$ = g_key_file_get_double_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_double_list", key_file, group_name, key, length, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_integer_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_integer_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_key_file_set_integer_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint list[], gsize length)
     * }
     */
    public static FunctionDescriptor g_key_file_set_integer_list$descriptor() {
        return g_key_file_set_integer_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_key_file_set_integer_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint list[], gsize length)
     * }
     */
    public static MethodHandle g_key_file_set_integer_list$handle() {
        return g_key_file_set_integer_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_key_file_set_integer_list(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint list[], gsize length)
     * }
     */
    public static void g_key_file_set_integer_list(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment list, long length) {
        var mh$ = g_key_file_set_integer_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_integer_list", key_file, group_name, key, list, length);
            }
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_set_comment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_set_comment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_set_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *comment, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_set_comment$descriptor() {
        return g_key_file_set_comment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_set_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *comment, GError **error)
     * }
     */
    public static MethodHandle g_key_file_set_comment$handle() {
        return g_key_file_set_comment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_set_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *comment, GError **error)
     * }
     */
    public static int g_key_file_set_comment(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment comment, MemorySegment error) {
        var mh$ = g_key_file_set_comment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_set_comment", key_file, group_name, key, comment, error);
            }
            return (int)mh$.invokeExact(key_file, group_name, key, comment, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_comment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_comment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_get_comment$descriptor() {
        return g_key_file_get_comment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_get_comment$handle() {
        return g_key_file_get_comment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_key_file_get_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MemorySegment g_key_file_get_comment(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_get_comment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_comment", key_file, group_name, key, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_remove_comment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_remove_comment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_remove_comment$descriptor() {
        return g_key_file_remove_comment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_remove_comment$handle() {
        return g_key_file_remove_comment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_comment(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static int g_key_file_remove_comment(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_remove_comment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_remove_comment", key_file, group_name, key, error);
            }
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_remove_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_remove_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_remove_key$descriptor() {
        return g_key_file_remove_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static MethodHandle g_key_file_remove_key$handle() {
        return g_key_file_remove_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_key(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error)
     * }
     */
    public static int g_key_file_remove_key(MemorySegment key_file, MemorySegment group_name, MemorySegment key, MemorySegment error) {
        var mh$ = g_key_file_remove_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_remove_key", key_file, group_name, key, error);
            }
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_remove_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_remove_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_group(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static FunctionDescriptor g_key_file_remove_group$descriptor() {
        return g_key_file_remove_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_group(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MethodHandle g_key_file_remove_group$handle() {
        return g_key_file_remove_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_key_file_remove_group(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static int g_key_file_remove_group(MemorySegment key_file, MemorySegment group_name, MemorySegment error) {
        var mh$ = g_key_file_remove_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_remove_group", key_file, group_name, error);
            }
            return (int)mh$.invokeExact(key_file, group_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_new(const gchar *filename, gboolean writable, GError **error)
     * }
     */
    public static FunctionDescriptor g_mapped_file_new$descriptor() {
        return g_mapped_file_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_new(const gchar *filename, gboolean writable, GError **error)
     * }
     */
    public static MethodHandle g_mapped_file_new$handle() {
        return g_mapped_file_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_new(const gchar *filename, gboolean writable, GError **error)
     * }
     */
    public static MemorySegment g_mapped_file_new(MemorySegment filename, int writable, MemorySegment error) {
        var mh$ = g_mapped_file_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_new", filename, writable, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, writable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_new_from_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_new_from_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_new_from_fd(gint fd, gboolean writable, GError **error)
     * }
     */
    public static FunctionDescriptor g_mapped_file_new_from_fd$descriptor() {
        return g_mapped_file_new_from_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_new_from_fd(gint fd, gboolean writable, GError **error)
     * }
     */
    public static MethodHandle g_mapped_file_new_from_fd$handle() {
        return g_mapped_file_new_from_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_new_from_fd(gint fd, gboolean writable, GError **error)
     * }
     */
    public static MemorySegment g_mapped_file_new_from_fd(int fd, int writable, MemorySegment error) {
        var mh$ = g_mapped_file_new_from_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_new_from_fd", fd, writable, error);
            }
            return (MemorySegment)mh$.invokeExact(fd, writable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_mapped_file_get_length(GMappedFile *file)
     * }
     */
    public static FunctionDescriptor g_mapped_file_get_length$descriptor() {
        return g_mapped_file_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_mapped_file_get_length(GMappedFile *file)
     * }
     */
    public static MethodHandle g_mapped_file_get_length$handle() {
        return g_mapped_file_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_mapped_file_get_length(GMappedFile *file)
     * }
     */
    public static long g_mapped_file_get_length(MemorySegment file) {
        var mh$ = g_mapped_file_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_get_length", file);
            }
            return (long)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_get_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_get_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_mapped_file_get_contents(GMappedFile *file)
     * }
     */
    public static FunctionDescriptor g_mapped_file_get_contents$descriptor() {
        return g_mapped_file_get_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_mapped_file_get_contents(GMappedFile *file)
     * }
     */
    public static MethodHandle g_mapped_file_get_contents$handle() {
        return g_mapped_file_get_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_mapped_file_get_contents(GMappedFile *file)
     * }
     */
    public static MemorySegment g_mapped_file_get_contents(MemorySegment file) {
        var mh$ = g_mapped_file_get_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_get_contents", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_get_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_get_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_mapped_file_get_bytes(GMappedFile *file)
     * }
     */
    public static FunctionDescriptor g_mapped_file_get_bytes$descriptor() {
        return g_mapped_file_get_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_mapped_file_get_bytes(GMappedFile *file)
     * }
     */
    public static MethodHandle g_mapped_file_get_bytes$handle() {
        return g_mapped_file_get_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_mapped_file_get_bytes(GMappedFile *file)
     * }
     */
    public static MemorySegment g_mapped_file_get_bytes(MemorySegment file) {
        var mh$ = g_mapped_file_get_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_get_bytes", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_ref(GMappedFile *file)
     * }
     */
    public static FunctionDescriptor g_mapped_file_ref$descriptor() {
        return g_mapped_file_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_ref(GMappedFile *file)
     * }
     */
    public static MethodHandle g_mapped_file_ref$handle() {
        return g_mapped_file_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMappedFile *g_mapped_file_ref(GMappedFile *file)
     * }
     */
    public static MemorySegment g_mapped_file_ref(MemorySegment file) {
        var mh$ = g_mapped_file_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_ref", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mapped_file_unref(GMappedFile *file)
     * }
     */
    public static FunctionDescriptor g_mapped_file_unref$descriptor() {
        return g_mapped_file_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mapped_file_unref(GMappedFile *file)
     * }
     */
    public static MethodHandle g_mapped_file_unref$handle() {
        return g_mapped_file_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mapped_file_unref(GMappedFile *file)
     * }
     */
    public static void g_mapped_file_unref(MemorySegment file) {
        var mh$ = g_mapped_file_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_unref", file);
            }
            mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mapped_file_free(GMappedFile *file)
     * }
     */
    public static FunctionDescriptor g_mapped_file_free$descriptor() {
        return g_mapped_file_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mapped_file_free(GMappedFile *file)
     * }
     */
    public static MethodHandle g_mapped_file_free$handle() {
        return g_mapped_file_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mapped_file_free(GMappedFile *file)
     * }
     */
    public static void g_mapped_file_free(MemorySegment file) {
        var mh$ = g_mapped_file_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_free", file);
            }
            mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_MARKUP_ERROR_BAD_UTF8 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_ERROR_BAD_UTF8 = 0
     * }
     */
    public static int G_MARKUP_ERROR_BAD_UTF8() {
        return G_MARKUP_ERROR_BAD_UTF8;
    }
    private static final int G_MARKUP_ERROR_EMPTY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_ERROR_EMPTY = 1
     * }
     */
    public static int G_MARKUP_ERROR_EMPTY() {
        return G_MARKUP_ERROR_EMPTY;
    }
    private static final int G_MARKUP_ERROR_PARSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_ERROR_PARSE = 2
     * }
     */
    public static int G_MARKUP_ERROR_PARSE() {
        return G_MARKUP_ERROR_PARSE;
    }
    private static final int G_MARKUP_ERROR_UNKNOWN_ELEMENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3
     * }
     */
    public static int G_MARKUP_ERROR_UNKNOWN_ELEMENT() {
        return G_MARKUP_ERROR_UNKNOWN_ELEMENT;
    }
    private static final int G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4
     * }
     */
    public static int G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE() {
        return G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE;
    }
    private static final int G_MARKUP_ERROR_INVALID_CONTENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_ERROR_INVALID_CONTENT = 5
     * }
     */
    public static int G_MARKUP_ERROR_INVALID_CONTENT() {
        return G_MARKUP_ERROR_INVALID_CONTENT;
    }
    private static final int G_MARKUP_ERROR_MISSING_ATTRIBUTE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6
     * }
     */
    public static int G_MARKUP_ERROR_MISSING_ATTRIBUTE() {
        return G_MARKUP_ERROR_MISSING_ATTRIBUTE;
    }

    private static class g_markup_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_markup_error_quark()
     * }
     */
    public static FunctionDescriptor g_markup_error_quark$descriptor() {
        return g_markup_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_markup_error_quark()
     * }
     */
    public static MethodHandle g_markup_error_quark$handle() {
        return g_markup_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_markup_error_quark()
     * }
     */
    public static int g_markup_error_quark() {
        var mh$ = g_markup_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_MARKUP_DEFAULT_FLAGS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_DEFAULT_FLAGS = 0
     * }
     */
    public static int G_MARKUP_DEFAULT_FLAGS() {
        return G_MARKUP_DEFAULT_FLAGS;
    }
    private static final int G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1
     * }
     */
    public static int G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG() {
        return G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG;
    }
    private static final int G_MARKUP_TREAT_CDATA_AS_TEXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_TREAT_CDATA_AS_TEXT = 2
     * }
     */
    public static int G_MARKUP_TREAT_CDATA_AS_TEXT() {
        return G_MARKUP_TREAT_CDATA_AS_TEXT;
    }
    private static final int G_MARKUP_PREFIX_ERROR_POSITION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_PREFIX_ERROR_POSITION = 4
     * }
     */
    public static int G_MARKUP_PREFIX_ERROR_POSITION() {
        return G_MARKUP_PREFIX_ERROR_POSITION;
    }
    private static final int G_MARKUP_IGNORE_QUALIFIED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_IGNORE_QUALIFIED = 8
     * }
     */
    public static int G_MARKUP_IGNORE_QUALIFIED() {
        return G_MARKUP_IGNORE_QUALIFIED;
    }

    private static class g_markup_parse_context_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMarkupParseContext *g_markup_parse_context_new(const GMarkupParser *parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_new$descriptor() {
        return g_markup_parse_context_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMarkupParseContext *g_markup_parse_context_new(const GMarkupParser *parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify)
     * }
     */
    public static MethodHandle g_markup_parse_context_new$handle() {
        return g_markup_parse_context_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMarkupParseContext *g_markup_parse_context_new(const GMarkupParser *parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify)
     * }
     */
    public static MemorySegment g_markup_parse_context_new(MemorySegment parser, int flags, MemorySegment user_data, MemorySegment user_data_dnotify) {
        var mh$ = g_markup_parse_context_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_new", parser, flags, user_data, user_data_dnotify);
            }
            return (MemorySegment)mh$.invokeExact(parser, flags, user_data, user_data_dnotify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMarkupParseContext *g_markup_parse_context_ref(GMarkupParseContext *context)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_ref$descriptor() {
        return g_markup_parse_context_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMarkupParseContext *g_markup_parse_context_ref(GMarkupParseContext *context)
     * }
     */
    public static MethodHandle g_markup_parse_context_ref$handle() {
        return g_markup_parse_context_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMarkupParseContext *g_markup_parse_context_ref(GMarkupParseContext *context)
     * }
     */
    public static MemorySegment g_markup_parse_context_ref(MemorySegment context) {
        var mh$ = g_markup_parse_context_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_ref", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_unref(GMarkupParseContext *context)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_unref$descriptor() {
        return g_markup_parse_context_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_unref(GMarkupParseContext *context)
     * }
     */
    public static MethodHandle g_markup_parse_context_unref$handle() {
        return g_markup_parse_context_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_markup_parse_context_unref(GMarkupParseContext *context)
     * }
     */
    public static void g_markup_parse_context_unref(MemorySegment context) {
        var mh$ = g_markup_parse_context_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_unref", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_free(GMarkupParseContext *context)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_free$descriptor() {
        return g_markup_parse_context_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_free(GMarkupParseContext *context)
     * }
     */
    public static MethodHandle g_markup_parse_context_free$handle() {
        return g_markup_parse_context_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_markup_parse_context_free(GMarkupParseContext *context)
     * }
     */
    public static void g_markup_parse_context_free(MemorySegment context) {
        var mh$ = g_markup_parse_context_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_free", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_markup_parse_context_parse(GMarkupParseContext *context, const gchar *text, gssize text_len, GError **error)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_parse$descriptor() {
        return g_markup_parse_context_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_markup_parse_context_parse(GMarkupParseContext *context, const gchar *text, gssize text_len, GError **error)
     * }
     */
    public static MethodHandle g_markup_parse_context_parse$handle() {
        return g_markup_parse_context_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_markup_parse_context_parse(GMarkupParseContext *context, const gchar *text, gssize text_len, GError **error)
     * }
     */
    public static int g_markup_parse_context_parse(MemorySegment context, MemorySegment text, long text_len, MemorySegment error) {
        var mh$ = g_markup_parse_context_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_parse", context, text, text_len, error);
            }
            return (int)mh$.invokeExact(context, text, text_len, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_push(GMarkupParseContext *context, const GMarkupParser *parser, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_push$descriptor() {
        return g_markup_parse_context_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_push(GMarkupParseContext *context, const GMarkupParser *parser, gpointer user_data)
     * }
     */
    public static MethodHandle g_markup_parse_context_push$handle() {
        return g_markup_parse_context_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_markup_parse_context_push(GMarkupParseContext *context, const GMarkupParser *parser, gpointer user_data)
     * }
     */
    public static void g_markup_parse_context_push(MemorySegment context, MemorySegment parser, MemorySegment user_data) {
        var mh$ = g_markup_parse_context_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_push", context, parser, user_data);
            }
            mh$.invokeExact(context, parser, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_markup_parse_context_pop(GMarkupParseContext *context)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_pop$descriptor() {
        return g_markup_parse_context_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_markup_parse_context_pop(GMarkupParseContext *context)
     * }
     */
    public static MethodHandle g_markup_parse_context_pop$handle() {
        return g_markup_parse_context_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_markup_parse_context_pop(GMarkupParseContext *context)
     * }
     */
    public static MemorySegment g_markup_parse_context_pop(MemorySegment context) {
        var mh$ = g_markup_parse_context_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_pop", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_end_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_end_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_markup_parse_context_end_parse(GMarkupParseContext *context, GError **error)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_end_parse$descriptor() {
        return g_markup_parse_context_end_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_markup_parse_context_end_parse(GMarkupParseContext *context, GError **error)
     * }
     */
    public static MethodHandle g_markup_parse_context_end_parse$handle() {
        return g_markup_parse_context_end_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_markup_parse_context_end_parse(GMarkupParseContext *context, GError **error)
     * }
     */
    public static int g_markup_parse_context_end_parse(MemorySegment context, MemorySegment error) {
        var mh$ = g_markup_parse_context_end_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_end_parse", context, error);
            }
            return (int)mh$.invokeExact(context, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_get_element {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_get_element"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_markup_parse_context_get_element(GMarkupParseContext *context)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_get_element$descriptor() {
        return g_markup_parse_context_get_element.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_markup_parse_context_get_element(GMarkupParseContext *context)
     * }
     */
    public static MethodHandle g_markup_parse_context_get_element$handle() {
        return g_markup_parse_context_get_element.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_markup_parse_context_get_element(GMarkupParseContext *context)
     * }
     */
    public static MemorySegment g_markup_parse_context_get_element(MemorySegment context) {
        var mh$ = g_markup_parse_context_get_element.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_get_element", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_get_element_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_get_element_stack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GSList *g_markup_parse_context_get_element_stack(GMarkupParseContext *context)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_get_element_stack$descriptor() {
        return g_markup_parse_context_get_element_stack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GSList *g_markup_parse_context_get_element_stack(GMarkupParseContext *context)
     * }
     */
    public static MethodHandle g_markup_parse_context_get_element_stack$handle() {
        return g_markup_parse_context_get_element_stack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GSList *g_markup_parse_context_get_element_stack(GMarkupParseContext *context)
     * }
     */
    public static MemorySegment g_markup_parse_context_get_element_stack(MemorySegment context) {
        var mh$ = g_markup_parse_context_get_element_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_get_element_stack", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_get_position(GMarkupParseContext *context, gint *line_number, gint *char_number)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_get_position$descriptor() {
        return g_markup_parse_context_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_markup_parse_context_get_position(GMarkupParseContext *context, gint *line_number, gint *char_number)
     * }
     */
    public static MethodHandle g_markup_parse_context_get_position$handle() {
        return g_markup_parse_context_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_markup_parse_context_get_position(GMarkupParseContext *context, gint *line_number, gint *char_number)
     * }
     */
    public static void g_markup_parse_context_get_position(MemorySegment context, MemorySegment line_number, MemorySegment char_number) {
        var mh$ = g_markup_parse_context_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_get_position", context, line_number, char_number);
            }
            mh$.invokeExact(context, line_number, char_number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_markup_parse_context_get_user_data(GMarkupParseContext *context)
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_get_user_data$descriptor() {
        return g_markup_parse_context_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_markup_parse_context_get_user_data(GMarkupParseContext *context)
     * }
     */
    public static MethodHandle g_markup_parse_context_get_user_data$handle() {
        return g_markup_parse_context_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_markup_parse_context_get_user_data(GMarkupParseContext *context)
     * }
     */
    public static MemorySegment g_markup_parse_context_get_user_data(MemorySegment context) {
        var mh$ = g_markup_parse_context_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_get_user_data", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_escape_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_escape_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_markup_escape_text(const gchar *text, gssize length)
     * }
     */
    public static FunctionDescriptor g_markup_escape_text$descriptor() {
        return g_markup_escape_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_markup_escape_text(const gchar *text, gssize length)
     * }
     */
    public static MethodHandle g_markup_escape_text$handle() {
        return g_markup_escape_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_markup_escape_text(const gchar *text, gssize length)
     * }
     */
    public static MemorySegment g_markup_escape_text(MemorySegment text, long length) {
        var mh$ = g_markup_escape_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_escape_text", text, length);
            }
            return (MemorySegment)mh$.invokeExact(text, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gchar *g_markup_printf_escaped(const char *format, ...)
     * }
     */
    public static class g_markup_printf_escaped {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_markup_printf_escaped");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_markup_printf_escaped(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gchar *g_markup_printf_escaped(const char *format, ...)
         * }
         */
        public static g_markup_printf_escaped makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_markup_printf_escaped(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_markup_printf_escaped", format, x1);
                }
                return (MemorySegment)spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int G_MARKUP_COLLECT_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_COLLECT_INVALID = 0
     * }
     */
    public static int G_MARKUP_COLLECT_INVALID() {
        return G_MARKUP_COLLECT_INVALID;
    }
    private static final int G_MARKUP_COLLECT_STRING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_COLLECT_STRING = 1
     * }
     */
    public static int G_MARKUP_COLLECT_STRING() {
        return G_MARKUP_COLLECT_STRING;
    }
    private static final int G_MARKUP_COLLECT_STRDUP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_COLLECT_STRDUP = 2
     * }
     */
    public static int G_MARKUP_COLLECT_STRDUP() {
        return G_MARKUP_COLLECT_STRDUP;
    }
    private static final int G_MARKUP_COLLECT_BOOLEAN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_COLLECT_BOOLEAN = 3
     * }
     */
    public static int G_MARKUP_COLLECT_BOOLEAN() {
        return G_MARKUP_COLLECT_BOOLEAN;
    }
    private static final int G_MARKUP_COLLECT_TRISTATE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_COLLECT_TRISTATE = 4
     * }
     */
    public static int G_MARKUP_COLLECT_TRISTATE() {
        return G_MARKUP_COLLECT_TRISTATE;
    }
    private static final int G_MARKUP_COLLECT_OPTIONAL = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MARKUP_COLLECT_OPTIONAL = 65536
     * }
     */
    public static int G_MARKUP_COLLECT_OPTIONAL() {
        return G_MARKUP_COLLECT_OPTIONAL;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_markup_collect_attributes(const gchar *element_name, const gchar **attribute_names, const gchar **attribute_values, GError **error, GMarkupCollectType first_type, const gchar *first_attr, ...)
     * }
     */
    public static class g_markup_collect_attributes {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_markup_collect_attributes");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_markup_collect_attributes(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_markup_collect_attributes(const gchar *element_name, const gchar **attribute_names, const gchar **attribute_values, GError **error, GMarkupCollectType first_type, const gchar *first_attr, ...)
         * }
         */
        public static g_markup_collect_attributes makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_markup_collect_attributes(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment element_name, MemorySegment attribute_names, MemorySegment attribute_values, MemorySegment error, int first_type, MemorySegment first_attr, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_markup_collect_attributes", element_name, attribute_names, attribute_values, error, first_type, first_attr, x6);
                }
                return (int)spreader.invokeExact(element_name, attribute_names, attribute_values, error, first_type, first_attr, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_type_string_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_string_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_string_is_valid(const gchar *type_string)
     * }
     */
    public static FunctionDescriptor g_variant_type_string_is_valid$descriptor() {
        return g_variant_type_string_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_string_is_valid(const gchar *type_string)
     * }
     */
    public static MethodHandle g_variant_type_string_is_valid$handle() {
        return g_variant_type_string_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_string_is_valid(const gchar *type_string)
     * }
     */
    public static int g_variant_type_string_is_valid(MemorySegment type_string) {
        var mh$ = g_variant_type_string_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_string_is_valid", type_string);
            }
            return (int)mh$.invokeExact(type_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_string_scan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_string_scan"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_string_scan(const gchar *string, const gchar *limit, const gchar **endptr)
     * }
     */
    public static FunctionDescriptor g_variant_type_string_scan$descriptor() {
        return g_variant_type_string_scan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_string_scan(const gchar *string, const gchar *limit, const gchar **endptr)
     * }
     */
    public static MethodHandle g_variant_type_string_scan$handle() {
        return g_variant_type_string_scan.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_string_scan(const gchar *string, const gchar *limit, const gchar **endptr)
     * }
     */
    public static int g_variant_type_string_scan(MemorySegment string, MemorySegment limit, MemorySegment endptr) {
        var mh$ = g_variant_type_string_scan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_string_scan", string, limit, endptr);
            }
            return (int)mh$.invokeExact(string, limit, endptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_type_free(GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_free$descriptor() {
        return g_variant_type_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_type_free(GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_free$handle() {
        return g_variant_type_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_type_free(GVariantType *type)
     * }
     */
    public static void g_variant_type_free(MemorySegment type) {
        var mh$ = g_variant_type_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_free", type);
            }
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_copy(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_copy$descriptor() {
        return g_variant_type_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_copy(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_copy$handle() {
        return g_variant_type_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_copy(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_copy(MemorySegment type) {
        var mh$ = g_variant_type_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_copy", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new(const gchar *type_string)
     * }
     */
    public static FunctionDescriptor g_variant_type_new$descriptor() {
        return g_variant_type_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new(const gchar *type_string)
     * }
     */
    public static MethodHandle g_variant_type_new$handle() {
        return g_variant_type_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new(const gchar *type_string)
     * }
     */
    public static MemorySegment g_variant_type_new(MemorySegment type_string) {
        var mh$ = g_variant_type_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_new", type_string);
            }
            return (MemorySegment)mh$.invokeExact(type_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_get_string_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_get_string_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_variant_type_get_string_length(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_get_string_length$descriptor() {
        return g_variant_type_get_string_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_variant_type_get_string_length(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_get_string_length$handle() {
        return g_variant_type_get_string_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_variant_type_get_string_length(const GVariantType *type)
     * }
     */
    public static long g_variant_type_get_string_length(MemorySegment type) {
        var mh$ = g_variant_type_get_string_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_get_string_length", type);
            }
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_peek_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_peek_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_type_peek_string(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_peek_string$descriptor() {
        return g_variant_type_peek_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_type_peek_string(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_peek_string$handle() {
        return g_variant_type_peek_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_variant_type_peek_string(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_peek_string(MemorySegment type) {
        var mh$ = g_variant_type_peek_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_peek_string", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_dup_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_dup_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_variant_type_dup_string(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_dup_string$descriptor() {
        return g_variant_type_dup_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_variant_type_dup_string(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_dup_string$handle() {
        return g_variant_type_dup_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_variant_type_dup_string(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_dup_string(MemorySegment type) {
        var mh$ = g_variant_type_dup_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_dup_string", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_definite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_definite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_definite(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_definite$descriptor() {
        return g_variant_type_is_definite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_definite(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_definite$handle() {
        return g_variant_type_is_definite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_definite(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_definite(MemorySegment type) {
        var mh$ = g_variant_type_is_definite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_definite", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_container {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_container"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_container(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_container$descriptor() {
        return g_variant_type_is_container.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_container(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_container$handle() {
        return g_variant_type_is_container.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_container(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_container(MemorySegment type) {
        var mh$ = g_variant_type_is_container.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_container", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_basic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_basic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_basic(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_basic$descriptor() {
        return g_variant_type_is_basic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_basic(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_basic$handle() {
        return g_variant_type_is_basic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_basic(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_basic(MemorySegment type) {
        var mh$ = g_variant_type_is_basic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_basic", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_maybe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_maybe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_maybe(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_maybe$descriptor() {
        return g_variant_type_is_maybe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_maybe(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_maybe$handle() {
        return g_variant_type_is_maybe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_maybe(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_maybe(MemorySegment type) {
        var mh$ = g_variant_type_is_maybe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_maybe", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_array(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_array$descriptor() {
        return g_variant_type_is_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_array(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_array$handle() {
        return g_variant_type_is_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_array(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_array(MemorySegment type) {
        var mh$ = g_variant_type_is_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_array", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_tuple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_tuple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_tuple(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_tuple$descriptor() {
        return g_variant_type_is_tuple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_tuple(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_tuple$handle() {
        return g_variant_type_is_tuple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_tuple(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_tuple(MemorySegment type) {
        var mh$ = g_variant_type_is_tuple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_tuple", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_dict_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_dict_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_dict_entry(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_dict_entry$descriptor() {
        return g_variant_type_is_dict_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_dict_entry(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_dict_entry$handle() {
        return g_variant_type_is_dict_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_dict_entry(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_dict_entry(MemorySegment type) {
        var mh$ = g_variant_type_is_dict_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_dict_entry", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_variant(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_variant$descriptor() {
        return g_variant_type_is_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_variant(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_is_variant$handle() {
        return g_variant_type_is_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_variant(const GVariantType *type)
     * }
     */
    public static int g_variant_type_is_variant(MemorySegment type) {
        var mh$ = g_variant_type_is_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_variant", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_variant_type_hash(gconstpointer type)
     * }
     */
    public static FunctionDescriptor g_variant_type_hash$descriptor() {
        return g_variant_type_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_variant_type_hash(gconstpointer type)
     * }
     */
    public static MethodHandle g_variant_type_hash$handle() {
        return g_variant_type_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_variant_type_hash(gconstpointer type)
     * }
     */
    public static int g_variant_type_hash(MemorySegment type) {
        var mh$ = g_variant_type_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_hash", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_equal(gconstpointer type1, gconstpointer type2)
     * }
     */
    public static FunctionDescriptor g_variant_type_equal$descriptor() {
        return g_variant_type_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_equal(gconstpointer type1, gconstpointer type2)
     * }
     */
    public static MethodHandle g_variant_type_equal$handle() {
        return g_variant_type_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_equal(gconstpointer type1, gconstpointer type2)
     * }
     */
    public static int g_variant_type_equal(MemorySegment type1, MemorySegment type2) {
        var mh$ = g_variant_type_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_equal", type1, type2);
            }
            return (int)mh$.invokeExact(type1, type2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_is_subtype_of {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_is_subtype_of"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_subtype_of(const GVariantType *type, const GVariantType *supertype)
     * }
     */
    public static FunctionDescriptor g_variant_type_is_subtype_of$descriptor() {
        return g_variant_type_is_subtype_of.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_subtype_of(const GVariantType *type, const GVariantType *supertype)
     * }
     */
    public static MethodHandle g_variant_type_is_subtype_of$handle() {
        return g_variant_type_is_subtype_of.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_type_is_subtype_of(const GVariantType *type, const GVariantType *supertype)
     * }
     */
    public static int g_variant_type_is_subtype_of(MemorySegment type, MemorySegment supertype) {
        var mh$ = g_variant_type_is_subtype_of.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_is_subtype_of", type, supertype);
            }
            return (int)mh$.invokeExact(type, supertype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_element {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_element"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_element(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_element$descriptor() {
        return g_variant_type_element.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_element(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_element$handle() {
        return g_variant_type_element.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_element(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_element(MemorySegment type) {
        var mh$ = g_variant_type_element.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_element", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_first {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_first"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_first(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_first$descriptor() {
        return g_variant_type_first.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_first(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_first$handle() {
        return g_variant_type_first.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_first(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_first(MemorySegment type) {
        var mh$ = g_variant_type_first.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_first", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_next(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_next$descriptor() {
        return g_variant_type_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_next(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_next$handle() {
        return g_variant_type_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_next(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_next(MemorySegment type) {
        var mh$ = g_variant_type_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_next", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_n_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_n_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_variant_type_n_items(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_n_items$descriptor() {
        return g_variant_type_n_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_variant_type_n_items(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_n_items$handle() {
        return g_variant_type_n_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_variant_type_n_items(const GVariantType *type)
     * }
     */
    public static long g_variant_type_n_items(MemorySegment type) {
        var mh$ = g_variant_type_n_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_n_items", type);
            }
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_key(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_key$descriptor() {
        return g_variant_type_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_key(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_key$handle() {
        return g_variant_type_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_key(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_key(MemorySegment type) {
        var mh$ = g_variant_type_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_key", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_value(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_type_value$descriptor() {
        return g_variant_type_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_value(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_type_value$handle() {
        return g_variant_type_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_value(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_type_value(MemorySegment type) {
        var mh$ = g_variant_type_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_value", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_new_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_new_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_array(const GVariantType *element)
     * }
     */
    public static FunctionDescriptor g_variant_type_new_array$descriptor() {
        return g_variant_type_new_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_array(const GVariantType *element)
     * }
     */
    public static MethodHandle g_variant_type_new_array$handle() {
        return g_variant_type_new_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_array(const GVariantType *element)
     * }
     */
    public static MemorySegment g_variant_type_new_array(MemorySegment element) {
        var mh$ = g_variant_type_new_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_new_array", element);
            }
            return (MemorySegment)mh$.invokeExact(element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_new_maybe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_new_maybe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_maybe(const GVariantType *element)
     * }
     */
    public static FunctionDescriptor g_variant_type_new_maybe$descriptor() {
        return g_variant_type_new_maybe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_maybe(const GVariantType *element)
     * }
     */
    public static MethodHandle g_variant_type_new_maybe$handle() {
        return g_variant_type_new_maybe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_maybe(const GVariantType *element)
     * }
     */
    public static MemorySegment g_variant_type_new_maybe(MemorySegment element) {
        var mh$ = g_variant_type_new_maybe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_new_maybe", element);
            }
            return (MemorySegment)mh$.invokeExact(element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_new_tuple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_new_tuple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_tuple(const GVariantType *const *items, gint length)
     * }
     */
    public static FunctionDescriptor g_variant_type_new_tuple$descriptor() {
        return g_variant_type_new_tuple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_tuple(const GVariantType *const *items, gint length)
     * }
     */
    public static MethodHandle g_variant_type_new_tuple$handle() {
        return g_variant_type_new_tuple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_tuple(const GVariantType *const *items, gint length)
     * }
     */
    public static MemorySegment g_variant_type_new_tuple(MemorySegment items, int length) {
        var mh$ = g_variant_type_new_tuple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_new_tuple", items, length);
            }
            return (MemorySegment)mh$.invokeExact(items, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_new_dict_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_new_dict_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_dict_entry(const GVariantType *key, const GVariantType *value)
     * }
     */
    public static FunctionDescriptor g_variant_type_new_dict_entry$descriptor() {
        return g_variant_type_new_dict_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_dict_entry(const GVariantType *key, const GVariantType *value)
     * }
     */
    public static MethodHandle g_variant_type_new_dict_entry$handle() {
        return g_variant_type_new_dict_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantType *g_variant_type_new_dict_entry(const GVariantType *key, const GVariantType *value)
     * }
     */
    public static MemorySegment g_variant_type_new_dict_entry(MemorySegment key, MemorySegment value) {
        var mh$ = g_variant_type_new_dict_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_new_dict_entry", key, value);
            }
            return (MemorySegment)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_checked_ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_checked_"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_checked_(const gchar *)
     * }
     */
    public static FunctionDescriptor g_variant_type_checked_$descriptor() {
        return g_variant_type_checked_.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_checked_(const gchar *)
     * }
     */
    public static MethodHandle g_variant_type_checked_$handle() {
        return g_variant_type_checked_.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_type_checked_(const gchar *)
     * }
     */
    public static MemorySegment g_variant_type_checked_(MemorySegment x0) {
        var mh$ = g_variant_type_checked_.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_checked_", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_string_get_depth_ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_string_get_depth_"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_variant_type_string_get_depth_(const gchar *type_string)
     * }
     */
    public static FunctionDescriptor g_variant_type_string_get_depth_$descriptor() {
        return g_variant_type_string_get_depth_.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_variant_type_string_get_depth_(const gchar *type_string)
     * }
     */
    public static MethodHandle g_variant_type_string_get_depth_$handle() {
        return g_variant_type_string_get_depth_.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_variant_type_string_get_depth_(const gchar *type_string)
     * }
     */
    public static long g_variant_type_string_get_depth_(MemorySegment type_string) {
        var mh$ = g_variant_type_string_get_depth_.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_string_get_depth_", type_string);
            }
            return (long)mh$.invokeExact(type_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_VARIANT_CLASS_BOOLEAN = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_BOOLEAN = 98
     * }
     */
    public static int G_VARIANT_CLASS_BOOLEAN() {
        return G_VARIANT_CLASS_BOOLEAN;
    }
    private static final int G_VARIANT_CLASS_BYTE = (int)121L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_BYTE = 121
     * }
     */
    public static int G_VARIANT_CLASS_BYTE() {
        return G_VARIANT_CLASS_BYTE;
    }
    private static final int G_VARIANT_CLASS_INT16 = (int)110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_INT16 = 110
     * }
     */
    public static int G_VARIANT_CLASS_INT16() {
        return G_VARIANT_CLASS_INT16;
    }
    private static final int G_VARIANT_CLASS_UINT16 = (int)113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_UINT16 = 113
     * }
     */
    public static int G_VARIANT_CLASS_UINT16() {
        return G_VARIANT_CLASS_UINT16;
    }
    private static final int G_VARIANT_CLASS_INT32 = (int)105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_INT32 = 105
     * }
     */
    public static int G_VARIANT_CLASS_INT32() {
        return G_VARIANT_CLASS_INT32;
    }
    private static final int G_VARIANT_CLASS_UINT32 = (int)117L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_UINT32 = 117
     * }
     */
    public static int G_VARIANT_CLASS_UINT32() {
        return G_VARIANT_CLASS_UINT32;
    }
    private static final int G_VARIANT_CLASS_INT64 = (int)120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_INT64 = 120
     * }
     */
    public static int G_VARIANT_CLASS_INT64() {
        return G_VARIANT_CLASS_INT64;
    }
    private static final int G_VARIANT_CLASS_UINT64 = (int)116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_UINT64 = 116
     * }
     */
    public static int G_VARIANT_CLASS_UINT64() {
        return G_VARIANT_CLASS_UINT64;
    }
    private static final int G_VARIANT_CLASS_HANDLE = (int)104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_HANDLE = 104
     * }
     */
    public static int G_VARIANT_CLASS_HANDLE() {
        return G_VARIANT_CLASS_HANDLE;
    }
    private static final int G_VARIANT_CLASS_DOUBLE = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_DOUBLE = 100
     * }
     */
    public static int G_VARIANT_CLASS_DOUBLE() {
        return G_VARIANT_CLASS_DOUBLE;
    }
    private static final int G_VARIANT_CLASS_STRING = (int)115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_STRING = 115
     * }
     */
    public static int G_VARIANT_CLASS_STRING() {
        return G_VARIANT_CLASS_STRING;
    }
    private static final int G_VARIANT_CLASS_OBJECT_PATH = (int)111L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_OBJECT_PATH = 111
     * }
     */
    public static int G_VARIANT_CLASS_OBJECT_PATH() {
        return G_VARIANT_CLASS_OBJECT_PATH;
    }
    private static final int G_VARIANT_CLASS_SIGNATURE = (int)103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_SIGNATURE = 103
     * }
     */
    public static int G_VARIANT_CLASS_SIGNATURE() {
        return G_VARIANT_CLASS_SIGNATURE;
    }
    private static final int G_VARIANT_CLASS_VARIANT = (int)118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_VARIANT = 118
     * }
     */
    public static int G_VARIANT_CLASS_VARIANT() {
        return G_VARIANT_CLASS_VARIANT;
    }
    private static final int G_VARIANT_CLASS_MAYBE = (int)109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_MAYBE = 109
     * }
     */
    public static int G_VARIANT_CLASS_MAYBE() {
        return G_VARIANT_CLASS_MAYBE;
    }
    private static final int G_VARIANT_CLASS_ARRAY = (int)97L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_ARRAY = 97
     * }
     */
    public static int G_VARIANT_CLASS_ARRAY() {
        return G_VARIANT_CLASS_ARRAY;
    }
    private static final int G_VARIANT_CLASS_TUPLE = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_TUPLE = 40
     * }
     */
    public static int G_VARIANT_CLASS_TUPLE() {
        return G_VARIANT_CLASS_TUPLE;
    }
    private static final int G_VARIANT_CLASS_DICT_ENTRY = (int)123L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_CLASS_DICT_ENTRY = 123
     * }
     */
    public static int G_VARIANT_CLASS_DICT_ENTRY() {
        return G_VARIANT_CLASS_DICT_ENTRY;
    }

    private static class g_variant_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_unref(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_unref$descriptor() {
        return g_variant_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_unref(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_unref$handle() {
        return g_variant_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_unref(GVariant *value)
     * }
     */
    public static void g_variant_unref(MemorySegment value) {
        var mh$ = g_variant_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_unref", value);
            }
            mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_ref(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_ref$descriptor() {
        return g_variant_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_ref(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_ref$handle() {
        return g_variant_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_ref(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_ref(MemorySegment value) {
        var mh$ = g_variant_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_ref", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_ref_sink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_ref_sink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_ref_sink(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_ref_sink$descriptor() {
        return g_variant_ref_sink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_ref_sink(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_ref_sink$handle() {
        return g_variant_ref_sink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_ref_sink(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_ref_sink(MemorySegment value) {
        var mh$ = g_variant_ref_sink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_ref_sink", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_is_floating {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_is_floating"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_floating(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_is_floating$descriptor() {
        return g_variant_is_floating.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_floating(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_is_floating$handle() {
        return g_variant_is_floating.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_is_floating(GVariant *value)
     * }
     */
    public static int g_variant_is_floating(MemorySegment value) {
        var mh$ = g_variant_is_floating.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_is_floating", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_take_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_take_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_take_ref(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_take_ref$descriptor() {
        return g_variant_take_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_take_ref(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_take_ref$handle() {
        return g_variant_take_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_take_ref(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_take_ref(MemorySegment value) {
        var mh$ = g_variant_take_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_take_ref", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_get_type(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_type$descriptor() {
        return g_variant_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_get_type(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_type$handle() {
        return g_variant_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_variant_get_type(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_type(MemorySegment value) {
        var mh$ = g_variant_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_type", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_type_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_type_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_type_string(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_type_string$descriptor() {
        return g_variant_get_type_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_type_string(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_type_string$handle() {
        return g_variant_get_type_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_type_string(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_type_string(MemorySegment value) {
        var mh$ = g_variant_get_type_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_type_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_is_of_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_is_of_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_of_type(GVariant *value, const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_is_of_type$descriptor() {
        return g_variant_is_of_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_of_type(GVariant *value, const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_is_of_type$handle() {
        return g_variant_is_of_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_is_of_type(GVariant *value, const GVariantType *type)
     * }
     */
    public static int g_variant_is_of_type(MemorySegment value, MemorySegment type) {
        var mh$ = g_variant_is_of_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_is_of_type", value, type);
            }
            return (int)mh$.invokeExact(value, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_is_container {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_is_container"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_container(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_is_container$descriptor() {
        return g_variant_is_container.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_container(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_is_container$handle() {
        return g_variant_is_container.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_is_container(GVariant *value)
     * }
     */
    public static int g_variant_is_container(MemorySegment value) {
        var mh$ = g_variant_is_container.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_is_container", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_classify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_classify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantClass g_variant_classify(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_classify$descriptor() {
        return g_variant_classify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantClass g_variant_classify(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_classify$handle() {
        return g_variant_classify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantClass g_variant_classify(GVariant *value)
     * }
     */
    public static int g_variant_classify(MemorySegment value) {
        var mh$ = g_variant_classify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_classify", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_boolean(gboolean value)
     * }
     */
    public static FunctionDescriptor g_variant_new_boolean$descriptor() {
        return g_variant_new_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_boolean(gboolean value)
     * }
     */
    public static MethodHandle g_variant_new_boolean$handle() {
        return g_variant_new_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_boolean(gboolean value)
     * }
     */
    public static MemorySegment g_variant_new_boolean(int value) {
        var mh$ = g_variant_new_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_boolean", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_byte"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_byte(guint8 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_byte$descriptor() {
        return g_variant_new_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_byte(guint8 value)
     * }
     */
    public static MethodHandle g_variant_new_byte$handle() {
        return g_variant_new_byte.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_byte(guint8 value)
     * }
     */
    public static MemorySegment g_variant_new_byte(byte value) {
        var mh$ = g_variant_new_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_byte", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_int16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_int16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int16(gint16 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_int16$descriptor() {
        return g_variant_new_int16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int16(gint16 value)
     * }
     */
    public static MethodHandle g_variant_new_int16$handle() {
        return g_variant_new_int16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int16(gint16 value)
     * }
     */
    public static MemorySegment g_variant_new_int16(short value) {
        var mh$ = g_variant_new_int16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_int16", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_uint16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_uint16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint16(guint16 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_uint16$descriptor() {
        return g_variant_new_uint16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint16(guint16 value)
     * }
     */
    public static MethodHandle g_variant_new_uint16$handle() {
        return g_variant_new_uint16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint16(guint16 value)
     * }
     */
    public static MemorySegment g_variant_new_uint16(short value) {
        var mh$ = g_variant_new_uint16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_uint16", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_int32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_int32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int32(gint32 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_int32$descriptor() {
        return g_variant_new_int32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int32(gint32 value)
     * }
     */
    public static MethodHandle g_variant_new_int32$handle() {
        return g_variant_new_int32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int32(gint32 value)
     * }
     */
    public static MemorySegment g_variant_new_int32(int value) {
        var mh$ = g_variant_new_int32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_int32", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_uint32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_uint32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint32(guint32 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_uint32$descriptor() {
        return g_variant_new_uint32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint32(guint32 value)
     * }
     */
    public static MethodHandle g_variant_new_uint32$handle() {
        return g_variant_new_uint32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint32(guint32 value)
     * }
     */
    public static MemorySegment g_variant_new_uint32(int value) {
        var mh$ = g_variant_new_uint32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_uint32", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int64(gint64 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_int64$descriptor() {
        return g_variant_new_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int64(gint64 value)
     * }
     */
    public static MethodHandle g_variant_new_int64$handle() {
        return g_variant_new_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_int64(gint64 value)
     * }
     */
    public static MemorySegment g_variant_new_int64(long value) {
        var mh$ = g_variant_new_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_int64", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint64(guint64 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_uint64$descriptor() {
        return g_variant_new_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint64(guint64 value)
     * }
     */
    public static MethodHandle g_variant_new_uint64$handle() {
        return g_variant_new_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_uint64(guint64 value)
     * }
     */
    public static MemorySegment g_variant_new_uint64(long value) {
        var mh$ = g_variant_new_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_uint64", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_handle(gint32 value)
     * }
     */
    public static FunctionDescriptor g_variant_new_handle$descriptor() {
        return g_variant_new_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_handle(gint32 value)
     * }
     */
    public static MethodHandle g_variant_new_handle$handle() {
        return g_variant_new_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_handle(gint32 value)
     * }
     */
    public static MemorySegment g_variant_new_handle(int value) {
        var mh$ = g_variant_new_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_handle", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_double(gdouble value)
     * }
     */
    public static FunctionDescriptor g_variant_new_double$descriptor() {
        return g_variant_new_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_double(gdouble value)
     * }
     */
    public static MethodHandle g_variant_new_double$handle() {
        return g_variant_new_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_double(gdouble value)
     * }
     */
    public static MemorySegment g_variant_new_double(double value) {
        var mh$ = g_variant_new_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_double", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_string(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_variant_new_string$descriptor() {
        return g_variant_new_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_string(const gchar *string)
     * }
     */
    public static MethodHandle g_variant_new_string$handle() {
        return g_variant_new_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_string(const gchar *string)
     * }
     */
    public static MemorySegment g_variant_new_string(MemorySegment string) {
        var mh$ = g_variant_new_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_string", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_take_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_take_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_take_string(gchar *string)
     * }
     */
    public static FunctionDescriptor g_variant_new_take_string$descriptor() {
        return g_variant_new_take_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_take_string(gchar *string)
     * }
     */
    public static MethodHandle g_variant_new_take_string$handle() {
        return g_variant_new_take_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_take_string(gchar *string)
     * }
     */
    public static MemorySegment g_variant_new_take_string(MemorySegment string) {
        var mh$ = g_variant_new_take_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_take_string", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_printf(const gchar *format_string, ...)
     * }
     */
    public static class g_variant_new_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_new_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_new_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GVariant *g_variant_new_printf(const gchar *format_string, ...)
         * }
         */
        public static g_variant_new_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_new_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment format_string, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_new_printf", format_string, x1);
                }
                return (MemorySegment)spreader.invokeExact(format_string, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_new_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_object_path(const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_variant_new_object_path$descriptor() {
        return g_variant_new_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_object_path(const gchar *object_path)
     * }
     */
    public static MethodHandle g_variant_new_object_path$handle() {
        return g_variant_new_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_object_path(const gchar *object_path)
     * }
     */
    public static MemorySegment g_variant_new_object_path(MemorySegment object_path) {
        var mh$ = g_variant_new_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_object_path", object_path);
            }
            return (MemorySegment)mh$.invokeExact(object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_is_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_is_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_object_path(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_variant_is_object_path$descriptor() {
        return g_variant_is_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_object_path(const gchar *string)
     * }
     */
    public static MethodHandle g_variant_is_object_path$handle() {
        return g_variant_is_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_is_object_path(const gchar *string)
     * }
     */
    public static int g_variant_is_object_path(MemorySegment string) {
        var mh$ = g_variant_is_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_is_object_path", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_signature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_signature"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_signature(const gchar *signature)
     * }
     */
    public static FunctionDescriptor g_variant_new_signature$descriptor() {
        return g_variant_new_signature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_signature(const gchar *signature)
     * }
     */
    public static MethodHandle g_variant_new_signature$handle() {
        return g_variant_new_signature.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_signature(const gchar *signature)
     * }
     */
    public static MemorySegment g_variant_new_signature(MemorySegment signature) {
        var mh$ = g_variant_new_signature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_signature", signature);
            }
            return (MemorySegment)mh$.invokeExact(signature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_is_signature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_is_signature"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_signature(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_variant_is_signature$descriptor() {
        return g_variant_is_signature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_signature(const gchar *string)
     * }
     */
    public static MethodHandle g_variant_is_signature$handle() {
        return g_variant_is_signature.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_is_signature(const gchar *string)
     * }
     */
    public static int g_variant_is_signature(MemorySegment string) {
        var mh$ = g_variant_is_signature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_is_signature", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_variant(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_new_variant$descriptor() {
        return g_variant_new_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_variant(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_new_variant$handle() {
        return g_variant_new_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_variant(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_new_variant(MemorySegment value) {
        var mh$ = g_variant_new_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_variant", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_strv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_strv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_strv(const gchar *const *strv, gssize length)
     * }
     */
    public static FunctionDescriptor g_variant_new_strv$descriptor() {
        return g_variant_new_strv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_strv(const gchar *const *strv, gssize length)
     * }
     */
    public static MethodHandle g_variant_new_strv$handle() {
        return g_variant_new_strv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_strv(const gchar *const *strv, gssize length)
     * }
     */
    public static MemorySegment g_variant_new_strv(MemorySegment strv, long length) {
        var mh$ = g_variant_new_strv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_strv", strv, length);
            }
            return (MemorySegment)mh$.invokeExact(strv, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_objv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_objv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_objv(const gchar *const *strv, gssize length)
     * }
     */
    public static FunctionDescriptor g_variant_new_objv$descriptor() {
        return g_variant_new_objv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_objv(const gchar *const *strv, gssize length)
     * }
     */
    public static MethodHandle g_variant_new_objv$handle() {
        return g_variant_new_objv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_objv(const gchar *const *strv, gssize length)
     * }
     */
    public static MemorySegment g_variant_new_objv(MemorySegment strv, long length) {
        var mh$ = g_variant_new_objv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_objv", strv, length);
            }
            return (MemorySegment)mh$.invokeExact(strv, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_bytestring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_bytestring"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_bytestring(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_variant_new_bytestring$descriptor() {
        return g_variant_new_bytestring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_bytestring(const gchar *string)
     * }
     */
    public static MethodHandle g_variant_new_bytestring$handle() {
        return g_variant_new_bytestring.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_bytestring(const gchar *string)
     * }
     */
    public static MemorySegment g_variant_new_bytestring(MemorySegment string) {
        var mh$ = g_variant_new_bytestring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_bytestring", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_bytestring_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_bytestring_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_bytestring_array(const gchar *const *strv, gssize length)
     * }
     */
    public static FunctionDescriptor g_variant_new_bytestring_array$descriptor() {
        return g_variant_new_bytestring_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_bytestring_array(const gchar *const *strv, gssize length)
     * }
     */
    public static MethodHandle g_variant_new_bytestring_array$handle() {
        return g_variant_new_bytestring_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_bytestring_array(const gchar *const *strv, gssize length)
     * }
     */
    public static MemorySegment g_variant_new_bytestring_array(MemorySegment strv, long length) {
        var mh$ = g_variant_new_bytestring_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_bytestring_array", strv, length);
            }
            return (MemorySegment)mh$.invokeExact(strv, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_fixed_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_fixed_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_fixed_array(const GVariantType *element_type, gconstpointer elements, gsize n_elements, gsize element_size)
     * }
     */
    public static FunctionDescriptor g_variant_new_fixed_array$descriptor() {
        return g_variant_new_fixed_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_fixed_array(const GVariantType *element_type, gconstpointer elements, gsize n_elements, gsize element_size)
     * }
     */
    public static MethodHandle g_variant_new_fixed_array$handle() {
        return g_variant_new_fixed_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_fixed_array(const GVariantType *element_type, gconstpointer elements, gsize n_elements, gsize element_size)
     * }
     */
    public static MemorySegment g_variant_new_fixed_array(MemorySegment element_type, MemorySegment elements, long n_elements, long element_size) {
        var mh$ = g_variant_new_fixed_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_fixed_array", element_type, elements, n_elements, element_size);
            }
            return (MemorySegment)mh$.invokeExact(element_type, elements, n_elements, element_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_get_boolean(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_boolean$descriptor() {
        return g_variant_get_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_get_boolean(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_boolean$handle() {
        return g_variant_get_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_get_boolean(GVariant *value)
     * }
     */
    public static int g_variant_get_boolean(MemorySegment value) {
        var mh$ = g_variant_get_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_boolean", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_byte"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 g_variant_get_byte(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_byte$descriptor() {
        return g_variant_get_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 g_variant_get_byte(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_byte$handle() {
        return g_variant_get_byte.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 g_variant_get_byte(GVariant *value)
     * }
     */
    public static byte g_variant_get_byte(MemorySegment value) {
        var mh$ = g_variant_get_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_byte", value);
            }
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_int16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_int16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint16 g_variant_get_int16(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_int16$descriptor() {
        return g_variant_get_int16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint16 g_variant_get_int16(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_int16$handle() {
        return g_variant_get_int16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint16 g_variant_get_int16(GVariant *value)
     * }
     */
    public static short g_variant_get_int16(MemorySegment value) {
        var mh$ = g_variant_get_int16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_int16", value);
            }
            return (short)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_uint16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_uint16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_variant_get_uint16(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_uint16$descriptor() {
        return g_variant_get_uint16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_variant_get_uint16(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_uint16$handle() {
        return g_variant_get_uint16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_variant_get_uint16(GVariant *value)
     * }
     */
    public static short g_variant_get_uint16(MemorySegment value) {
        var mh$ = g_variant_get_uint16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_uint16", value);
            }
            return (short)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_int32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_int32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_variant_get_int32(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_int32$descriptor() {
        return g_variant_get_int32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_variant_get_int32(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_int32$handle() {
        return g_variant_get_int32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_variant_get_int32(GVariant *value)
     * }
     */
    public static int g_variant_get_int32(MemorySegment value) {
        var mh$ = g_variant_get_int32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_int32", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_uint32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_uint32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_variant_get_uint32(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_uint32$descriptor() {
        return g_variant_get_uint32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_variant_get_uint32(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_uint32$handle() {
        return g_variant_get_uint32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_variant_get_uint32(GVariant *value)
     * }
     */
    public static int g_variant_get_uint32(MemorySegment value) {
        var mh$ = g_variant_get_uint32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_uint32", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_variant_get_int64(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_int64$descriptor() {
        return g_variant_get_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_variant_get_int64(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_int64$handle() {
        return g_variant_get_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_variant_get_int64(GVariant *value)
     * }
     */
    public static long g_variant_get_int64(MemorySegment value) {
        var mh$ = g_variant_get_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_int64", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_variant_get_uint64(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_uint64$descriptor() {
        return g_variant_get_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_variant_get_uint64(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_uint64$handle() {
        return g_variant_get_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 g_variant_get_uint64(GVariant *value)
     * }
     */
    public static long g_variant_get_uint64(MemorySegment value) {
        var mh$ = g_variant_get_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_uint64", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_variant_get_handle(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_handle$descriptor() {
        return g_variant_get_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_variant_get_handle(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_handle$handle() {
        return g_variant_get_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_variant_get_handle(GVariant *value)
     * }
     */
    public static int g_variant_get_handle(MemorySegment value) {
        var mh$ = g_variant_get_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_handle", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_variant_get_double(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_double$descriptor() {
        return g_variant_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_variant_get_double(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_double$handle() {
        return g_variant_get_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_variant_get_double(GVariant *value)
     * }
     */
    public static double g_variant_get_double(MemorySegment value) {
        var mh$ = g_variant_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_double", value);
            }
            return (double)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_variant(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_variant$descriptor() {
        return g_variant_get_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_variant(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_variant$handle() {
        return g_variant_get_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_variant(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_variant(MemorySegment value) {
        var mh$ = g_variant_get_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_variant", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_string(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_get_string$descriptor() {
        return g_variant_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_string(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_get_string$handle() {
        return g_variant_get_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_string(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_get_string(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_string", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dup_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dup_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_variant_dup_string(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_dup_string$descriptor() {
        return g_variant_dup_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_variant_dup_string(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_dup_string$handle() {
        return g_variant_dup_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_variant_dup_string(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_dup_string(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_dup_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dup_string", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_strv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_strv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_strv(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_get_strv$descriptor() {
        return g_variant_get_strv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_strv(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_get_strv$handle() {
        return g_variant_get_strv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_strv(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_get_strv(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_get_strv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_strv", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dup_strv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dup_strv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_strv(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_dup_strv$descriptor() {
        return g_variant_dup_strv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_strv(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_dup_strv$handle() {
        return g_variant_dup_strv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_strv(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_dup_strv(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_dup_strv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dup_strv", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_objv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_objv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_objv(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_get_objv$descriptor() {
        return g_variant_get_objv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_objv(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_get_objv$handle() {
        return g_variant_get_objv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_objv(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_get_objv(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_get_objv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_objv", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dup_objv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dup_objv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_objv(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_dup_objv$descriptor() {
        return g_variant_dup_objv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_objv(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_dup_objv$handle() {
        return g_variant_dup_objv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_objv(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_dup_objv(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_dup_objv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dup_objv", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_bytestring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_bytestring"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_bytestring(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_bytestring$descriptor() {
        return g_variant_get_bytestring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_bytestring(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_bytestring$handle() {
        return g_variant_get_bytestring.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_variant_get_bytestring(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_bytestring(MemorySegment value) {
        var mh$ = g_variant_get_bytestring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_bytestring", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dup_bytestring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dup_bytestring"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_variant_dup_bytestring(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_dup_bytestring$descriptor() {
        return g_variant_dup_bytestring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_variant_dup_bytestring(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_dup_bytestring$handle() {
        return g_variant_dup_bytestring.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_variant_dup_bytestring(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_dup_bytestring(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_dup_bytestring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dup_bytestring", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_bytestring_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_bytestring_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_bytestring_array(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_get_bytestring_array$descriptor() {
        return g_variant_get_bytestring_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_bytestring_array(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_get_bytestring_array$handle() {
        return g_variant_get_bytestring_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar **g_variant_get_bytestring_array(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_get_bytestring_array(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_get_bytestring_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_bytestring_array", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dup_bytestring_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dup_bytestring_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_bytestring_array(GVariant *value, gsize *length)
     * }
     */
    public static FunctionDescriptor g_variant_dup_bytestring_array$descriptor() {
        return g_variant_dup_bytestring_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_bytestring_array(GVariant *value, gsize *length)
     * }
     */
    public static MethodHandle g_variant_dup_bytestring_array$handle() {
        return g_variant_dup_bytestring_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_variant_dup_bytestring_array(GVariant *value, gsize *length)
     * }
     */
    public static MemorySegment g_variant_dup_bytestring_array(MemorySegment value, MemorySegment length) {
        var mh$ = g_variant_dup_bytestring_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dup_bytestring_array", value, length);
            }
            return (MemorySegment)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_maybe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_maybe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_maybe(const GVariantType *child_type, GVariant *child)
     * }
     */
    public static FunctionDescriptor g_variant_new_maybe$descriptor() {
        return g_variant_new_maybe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_maybe(const GVariantType *child_type, GVariant *child)
     * }
     */
    public static MethodHandle g_variant_new_maybe$handle() {
        return g_variant_new_maybe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_maybe(const GVariantType *child_type, GVariant *child)
     * }
     */
    public static MemorySegment g_variant_new_maybe(MemorySegment child_type, MemorySegment child) {
        var mh$ = g_variant_new_maybe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_maybe", child_type, child);
            }
            return (MemorySegment)mh$.invokeExact(child_type, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_array(const GVariantType *child_type, GVariant *const *children, gsize n_children)
     * }
     */
    public static FunctionDescriptor g_variant_new_array$descriptor() {
        return g_variant_new_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_array(const GVariantType *child_type, GVariant *const *children, gsize n_children)
     * }
     */
    public static MethodHandle g_variant_new_array$handle() {
        return g_variant_new_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_array(const GVariantType *child_type, GVariant *const *children, gsize n_children)
     * }
     */
    public static MemorySegment g_variant_new_array(MemorySegment child_type, MemorySegment children, long n_children) {
        var mh$ = g_variant_new_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_array", child_type, children, n_children);
            }
            return (MemorySegment)mh$.invokeExact(child_type, children, n_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_tuple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_tuple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_tuple(GVariant *const *children, gsize n_children)
     * }
     */
    public static FunctionDescriptor g_variant_new_tuple$descriptor() {
        return g_variant_new_tuple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_tuple(GVariant *const *children, gsize n_children)
     * }
     */
    public static MethodHandle g_variant_new_tuple$handle() {
        return g_variant_new_tuple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_tuple(GVariant *const *children, gsize n_children)
     * }
     */
    public static MemorySegment g_variant_new_tuple(MemorySegment children, long n_children) {
        var mh$ = g_variant_new_tuple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_tuple", children, n_children);
            }
            return (MemorySegment)mh$.invokeExact(children, n_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_dict_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_dict_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_dict_entry(GVariant *key, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_new_dict_entry$descriptor() {
        return g_variant_new_dict_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_dict_entry(GVariant *key, GVariant *value)
     * }
     */
    public static MethodHandle g_variant_new_dict_entry$handle() {
        return g_variant_new_dict_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_dict_entry(GVariant *key, GVariant *value)
     * }
     */
    public static MemorySegment g_variant_new_dict_entry(MemorySegment key, MemorySegment value) {
        var mh$ = g_variant_new_dict_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_dict_entry", key, value);
            }
            return (MemorySegment)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_maybe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_maybe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_maybe(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_maybe$descriptor() {
        return g_variant_get_maybe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_maybe(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_maybe$handle() {
        return g_variant_get_maybe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_maybe(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_maybe(MemorySegment value) {
        var mh$ = g_variant_get_maybe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_maybe", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_n_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_n_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_variant_n_children(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_n_children$descriptor() {
        return g_variant_n_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_variant_n_children(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_n_children$handle() {
        return g_variant_n_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_variant_n_children(GVariant *value)
     * }
     */
    public static long g_variant_n_children(MemorySegment value) {
        var mh$ = g_variant_n_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_n_children", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_variant_get_child(GVariant *value, gsize index_, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_get_child {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_get_child");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_get_child(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_variant_get_child(GVariant *value, gsize index_, const gchar *format_string, ...)
         * }
         */
        public static g_variant_get_child makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_get_child(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment value, long index_, MemorySegment format_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_get_child", value, index_, format_string, x3);
                }
                spreader.invokeExact(value, index_, format_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_get_child_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_child_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_child_value(GVariant *value, gsize index_)
     * }
     */
    public static FunctionDescriptor g_variant_get_child_value$descriptor() {
        return g_variant_get_child_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_child_value(GVariant *value, gsize index_)
     * }
     */
    public static MethodHandle g_variant_get_child_value$handle() {
        return g_variant_get_child_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_child_value(GVariant *value, gsize index_)
     * }
     */
    public static MemorySegment g_variant_get_child_value(MemorySegment value, long index_) {
        var mh$ = g_variant_get_child_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_child_value", value, index_);
            }
            return (MemorySegment)mh$.invokeExact(value, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

