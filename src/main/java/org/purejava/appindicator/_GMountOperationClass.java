// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GMountOperationClass {
 *     GObjectClass parent_class;
 *     void (*ask_password)(GMountOperation *, const char *, const char *, const char *, GAskPasswordFlags);
 *     void (*ask_question)(GMountOperation *, const char *, const char **);
 *     void (*reply)(GMountOperation *, GMountOperationResult);
 *     void (*aborted)(GMountOperation *);
 *     void (*show_processes)(GMountOperation *, const gchar *, GArray *, const gchar **);
 *     void (*show_unmount_progress)(GMountOperation *, const gchar *, gint64, gint64);
 *     void (*_g_reserved1)(void);
 *     void (*_g_reserved2)(void);
 *     void (*_g_reserved3)(void);
 *     void (*_g_reserved4)(void);
 *     void (*_g_reserved5)(void);
 *     void (*_g_reserved6)(void);
 *     void (*_g_reserved7)(void);
 *     void (*_g_reserved8)(void);
 *     void (*_g_reserved9)(void);
 * }
 * }
 */
public class _GMountOperationClass {

    _GMountOperationClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("ask_password"),
        app_indicator_h.C_POINTER.withName("ask_question"),
        app_indicator_h.C_POINTER.withName("reply"),
        app_indicator_h.C_POINTER.withName("aborted"),
        app_indicator_h.C_POINTER.withName("show_processes"),
        app_indicator_h.C_POINTER.withName("show_unmount_progress"),
        app_indicator_h.C_POINTER.withName("_g_reserved1"),
        app_indicator_h.C_POINTER.withName("_g_reserved2"),
        app_indicator_h.C_POINTER.withName("_g_reserved3"),
        app_indicator_h.C_POINTER.withName("_g_reserved4"),
        app_indicator_h.C_POINTER.withName("_g_reserved5"),
        app_indicator_h.C_POINTER.withName("_g_reserved6"),
        app_indicator_h.C_POINTER.withName("_g_reserved7"),
        app_indicator_h.C_POINTER.withName("_g_reserved8"),
        app_indicator_h.C_POINTER.withName("_g_reserved9")
    ).withName("_GMountOperationClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*ask_password)(GMountOperation *, const char *, const char *, const char *, GAskPasswordFlags)
     * }
     */
    public class ask_password {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(ask_password.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ask_password.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, int _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ask_password$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ask_password"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*ask_password)(GMountOperation *, const char *, const char *, const char *, GAskPasswordFlags)
     * }
     */
    public static final AddressLayout ask_password$layout() {
        return ask_password$LAYOUT;
    }

    private static final long ask_password$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*ask_password)(GMountOperation *, const char *, const char *, const char *, GAskPasswordFlags)
     * }
     */
    public static final long ask_password$offset() {
        return ask_password$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*ask_password)(GMountOperation *, const char *, const char *, const char *, GAskPasswordFlags)
     * }
     */
    public static MemorySegment ask_password(MemorySegment struct) {
        return struct.get(ask_password$LAYOUT, ask_password$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*ask_password)(GMountOperation *, const char *, const char *, const char *, GAskPasswordFlags)
     * }
     */
    public static void ask_password(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ask_password$LAYOUT, ask_password$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*ask_question)(GMountOperation *, const char *, const char **)
     * }
     */
    public class ask_question {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(ask_question.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ask_question.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ask_question$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ask_question"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*ask_question)(GMountOperation *, const char *, const char **)
     * }
     */
    public static final AddressLayout ask_question$layout() {
        return ask_question$LAYOUT;
    }

    private static final long ask_question$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*ask_question)(GMountOperation *, const char *, const char **)
     * }
     */
    public static final long ask_question$offset() {
        return ask_question$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*ask_question)(GMountOperation *, const char *, const char **)
     * }
     */
    public static MemorySegment ask_question(MemorySegment struct) {
        return struct.get(ask_question$LAYOUT, ask_question$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*ask_question)(GMountOperation *, const char *, const char **)
     * }
     */
    public static void ask_question(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ask_question$LAYOUT, ask_question$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*reply)(GMountOperation *, GMountOperationResult)
     * }
     */
    public class reply {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(reply.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(reply.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout reply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*reply)(GMountOperation *, GMountOperationResult)
     * }
     */
    public static final AddressLayout reply$layout() {
        return reply$LAYOUT;
    }

    private static final long reply$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*reply)(GMountOperation *, GMountOperationResult)
     * }
     */
    public static final long reply$offset() {
        return reply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*reply)(GMountOperation *, GMountOperationResult)
     * }
     */
    public static MemorySegment reply(MemorySegment struct) {
        return struct.get(reply$LAYOUT, reply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*reply)(GMountOperation *, GMountOperationResult)
     * }
     */
    public static void reply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reply$LAYOUT, reply$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*aborted)(GMountOperation *)
     * }
     */
    public class aborted {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(aborted.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(aborted.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout aborted$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aborted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*aborted)(GMountOperation *)
     * }
     */
    public static final AddressLayout aborted$layout() {
        return aborted$LAYOUT;
    }

    private static final long aborted$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*aborted)(GMountOperation *)
     * }
     */
    public static final long aborted$offset() {
        return aborted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*aborted)(GMountOperation *)
     * }
     */
    public static MemorySegment aborted(MemorySegment struct) {
        return struct.get(aborted$LAYOUT, aborted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*aborted)(GMountOperation *)
     * }
     */
    public static void aborted(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aborted$LAYOUT, aborted$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*show_processes)(GMountOperation *, const gchar *, GArray *, const gchar **)
     * }
     */
    public class show_processes {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(show_processes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(show_processes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout show_processes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("show_processes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*show_processes)(GMountOperation *, const gchar *, GArray *, const gchar **)
     * }
     */
    public static final AddressLayout show_processes$layout() {
        return show_processes$LAYOUT;
    }

    private static final long show_processes$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*show_processes)(GMountOperation *, const gchar *, GArray *, const gchar **)
     * }
     */
    public static final long show_processes$offset() {
        return show_processes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*show_processes)(GMountOperation *, const gchar *, GArray *, const gchar **)
     * }
     */
    public static MemorySegment show_processes(MemorySegment struct) {
        return struct.get(show_processes$LAYOUT, show_processes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*show_processes)(GMountOperation *, const gchar *, GArray *, const gchar **)
     * }
     */
    public static void show_processes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(show_processes$LAYOUT, show_processes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*show_unmount_progress)(GMountOperation *, const gchar *, gint64, gint64)
     * }
     */
    public class show_unmount_progress {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(show_unmount_progress.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(show_unmount_progress.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, long _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout show_unmount_progress$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("show_unmount_progress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*show_unmount_progress)(GMountOperation *, const gchar *, gint64, gint64)
     * }
     */
    public static final AddressLayout show_unmount_progress$layout() {
        return show_unmount_progress$LAYOUT;
    }

    private static final long show_unmount_progress$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*show_unmount_progress)(GMountOperation *, const gchar *, gint64, gint64)
     * }
     */
    public static final long show_unmount_progress$offset() {
        return show_unmount_progress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*show_unmount_progress)(GMountOperation *, const gchar *, gint64, gint64)
     * }
     */
    public static MemorySegment show_unmount_progress(MemorySegment struct) {
        return struct.get(show_unmount_progress$LAYOUT, show_unmount_progress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*show_unmount_progress)(GMountOperation *, const gchar *, gint64, gint64)
     * }
     */
    public static void show_unmount_progress(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(show_unmount_progress$LAYOUT, show_unmount_progress$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public class _g_reserved1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static final AddressLayout _g_reserved1$layout() {
        return _g_reserved1$LAYOUT;
    }

    private static final long _g_reserved1$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static final long _g_reserved1$offset() {
        return _g_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static MemorySegment _g_reserved1(MemorySegment struct) {
        return struct.get(_g_reserved1$LAYOUT, _g_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static void _g_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved1$LAYOUT, _g_reserved1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public class _g_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static final AddressLayout _g_reserved2$layout() {
        return _g_reserved2$LAYOUT;
    }

    private static final long _g_reserved2$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static final long _g_reserved2$offset() {
        return _g_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static MemorySegment _g_reserved2(MemorySegment struct) {
        return struct.get(_g_reserved2$LAYOUT, _g_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static void _g_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved2$LAYOUT, _g_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public class _g_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static final AddressLayout _g_reserved3$layout() {
        return _g_reserved3$LAYOUT;
    }

    private static final long _g_reserved3$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static final long _g_reserved3$offset() {
        return _g_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static MemorySegment _g_reserved3(MemorySegment struct) {
        return struct.get(_g_reserved3$LAYOUT, _g_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static void _g_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved3$LAYOUT, _g_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public class _g_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static final AddressLayout _g_reserved4$layout() {
        return _g_reserved4$LAYOUT;
    }

    private static final long _g_reserved4$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static final long _g_reserved4$offset() {
        return _g_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static MemorySegment _g_reserved4(MemorySegment struct) {
        return struct.get(_g_reserved4$LAYOUT, _g_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static void _g_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved4$LAYOUT, _g_reserved4$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public class _g_reserved5 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved5.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved5.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved5$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static final AddressLayout _g_reserved5$layout() {
        return _g_reserved5$LAYOUT;
    }

    private static final long _g_reserved5$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static final long _g_reserved5$offset() {
        return _g_reserved5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static MemorySegment _g_reserved5(MemorySegment struct) {
        return struct.get(_g_reserved5$LAYOUT, _g_reserved5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static void _g_reserved5(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved5$LAYOUT, _g_reserved5$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public class _g_reserved6 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved6.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved6.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved6$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static final AddressLayout _g_reserved6$layout() {
        return _g_reserved6$LAYOUT;
    }

    private static final long _g_reserved6$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static final long _g_reserved6$offset() {
        return _g_reserved6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static MemorySegment _g_reserved6(MemorySegment struct) {
        return struct.get(_g_reserved6$LAYOUT, _g_reserved6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static void _g_reserved6(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved6$LAYOUT, _g_reserved6$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved7)(void)
     * }
     */
    public class _g_reserved7 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved7.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved7.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved7$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved7"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved7)(void)
     * }
     */
    public static final AddressLayout _g_reserved7$layout() {
        return _g_reserved7$LAYOUT;
    }

    private static final long _g_reserved7$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved7)(void)
     * }
     */
    public static final long _g_reserved7$offset() {
        return _g_reserved7$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved7)(void)
     * }
     */
    public static MemorySegment _g_reserved7(MemorySegment struct) {
        return struct.get(_g_reserved7$LAYOUT, _g_reserved7$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved7)(void)
     * }
     */
    public static void _g_reserved7(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved7$LAYOUT, _g_reserved7$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved8)(void)
     * }
     */
    public class _g_reserved8 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved8.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved8.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved8$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved8)(void)
     * }
     */
    public static final AddressLayout _g_reserved8$layout() {
        return _g_reserved8$LAYOUT;
    }

    private static final long _g_reserved8$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved8)(void)
     * }
     */
    public static final long _g_reserved8$offset() {
        return _g_reserved8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved8)(void)
     * }
     */
    public static MemorySegment _g_reserved8(MemorySegment struct) {
        return struct.get(_g_reserved8$LAYOUT, _g_reserved8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved8)(void)
     * }
     */
    public static void _g_reserved8(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved8$LAYOUT, _g_reserved8$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved9)(void)
     * }
     */
    public class _g_reserved9 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved9.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved9.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved9$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved9"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved9)(void)
     * }
     */
    public static final AddressLayout _g_reserved9$layout() {
        return _g_reserved9$LAYOUT;
    }

    private static final long _g_reserved9$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved9)(void)
     * }
     */
    public static final long _g_reserved9$offset() {
        return _g_reserved9$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved9)(void)
     * }
     */
    public static MemorySegment _g_reserved9(MemorySegment struct) {
        return struct.get(_g_reserved9$LAYOUT, _g_reserved9$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved9)(void)
     * }
     */
    public static void _g_reserved9(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved9$LAYOUT, _g_reserved9$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

