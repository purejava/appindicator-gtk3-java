// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkTableChild {
 *     struct _GtkWidget* widget;
 *     unsigned short left_attach;
 *     unsigned short right_attach;
 *     unsigned short top_attach;
 *     unsigned short bottom_attach;
 *     unsigned short xpadding;
 *     unsigned short ypadding;
 *      *     unsigned int xexpand;
 *     unsigned int yexpand;
 *     unsigned int xshrink;
 *     unsigned int yshrink;
 *     unsigned int xfill;
 *     unsigned int yfill;
 * };
 * }
 */
public class _GtkTableChild {

    public static MemoryLayout $LAYOUT() {
        return constants$3377.const$1;
    }
    public static VarHandle widget$VH() {
        return constants$3377.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidget* widget;
     * }
     */
    public static MemorySegment widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3377.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidget* widget;
     * }
     */
    public static void widget$set(MemorySegment seg, MemorySegment x) {
        constants$3377.const$2.set(seg, x);
    }
    public static MemorySegment widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3377.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void widget$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3377.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle left_attach$VH() {
        return constants$3377.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short left_attach;
     * }
     */
    public static short left_attach$get(MemorySegment seg) {
        return (short)constants$3377.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short left_attach;
     * }
     */
    public static void left_attach$set(MemorySegment seg, short x) {
        constants$3377.const$3.set(seg, x);
    }
    public static short left_attach$get(MemorySegment seg, long index) {
        return (short)constants$3377.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void left_attach$set(MemorySegment seg, long index, short x) {
        constants$3377.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle right_attach$VH() {
        return constants$3377.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short right_attach;
     * }
     */
    public static short right_attach$get(MemorySegment seg) {
        return (short)constants$3377.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short right_attach;
     * }
     */
    public static void right_attach$set(MemorySegment seg, short x) {
        constants$3377.const$4.set(seg, x);
    }
    public static short right_attach$get(MemorySegment seg, long index) {
        return (short)constants$3377.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void right_attach$set(MemorySegment seg, long index, short x) {
        constants$3377.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle top_attach$VH() {
        return constants$3377.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short top_attach;
     * }
     */
    public static short top_attach$get(MemorySegment seg) {
        return (short)constants$3377.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short top_attach;
     * }
     */
    public static void top_attach$set(MemorySegment seg, short x) {
        constants$3377.const$5.set(seg, x);
    }
    public static short top_attach$get(MemorySegment seg, long index) {
        return (short)constants$3377.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void top_attach$set(MemorySegment seg, long index, short x) {
        constants$3377.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bottom_attach$VH() {
        return constants$3378.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short bottom_attach;
     * }
     */
    public static short bottom_attach$get(MemorySegment seg) {
        return (short)constants$3378.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short bottom_attach;
     * }
     */
    public static void bottom_attach$set(MemorySegment seg, short x) {
        constants$3378.const$0.set(seg, x);
    }
    public static short bottom_attach$get(MemorySegment seg, long index) {
        return (short)constants$3378.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bottom_attach$set(MemorySegment seg, long index, short x) {
        constants$3378.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle xpadding$VH() {
        return constants$3378.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short xpadding;
     * }
     */
    public static short xpadding$get(MemorySegment seg) {
        return (short)constants$3378.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short xpadding;
     * }
     */
    public static void xpadding$set(MemorySegment seg, short x) {
        constants$3378.const$1.set(seg, x);
    }
    public static short xpadding$get(MemorySegment seg, long index) {
        return (short)constants$3378.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void xpadding$set(MemorySegment seg, long index, short x) {
        constants$3378.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ypadding$VH() {
        return constants$3378.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ypadding;
     * }
     */
    public static short ypadding$get(MemorySegment seg) {
        return (short)constants$3378.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ypadding;
     * }
     */
    public static void ypadding$set(MemorySegment seg, short x) {
        constants$3378.const$2.set(seg, x);
    }
    public static short ypadding$get(MemorySegment seg, long index) {
        return (short)constants$3378.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ypadding$set(MemorySegment seg, long index, short x) {
        constants$3378.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


