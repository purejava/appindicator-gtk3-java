// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*g_clear_handle_id$clear_func)(unsigned int);
 * }
 */
public interface g_clear_handle_id$clear_func {

    void apply(int handle_id);
    static MemorySegment allocate(g_clear_handle_id$clear_func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$276.const$4, fi, constants$80.const$1, scope);
    }
    static g_clear_handle_id$clear_func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _handle_id) -> {
            try {
                constants$122.const$4.invokeExact(symbol, _handle_id);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


