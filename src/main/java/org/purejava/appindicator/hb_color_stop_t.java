// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct hb_color_stop_t {
 *     float offset;
 *     int is_foreground;
 *     unsigned int color;
 * };
 * }
 */
public class hb_color_stop_t {

    public static MemoryLayout $LAYOUT() {
        return constants$1458.const$1;
    }
    public static VarHandle offset$VH() {
        return constants$1458.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float offset;
     * }
     */
    public static float offset$get(MemorySegment seg) {
        return (float)constants$1458.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float offset;
     * }
     */
    public static void offset$set(MemorySegment seg, float x) {
        constants$1458.const$2.set(seg, x);
    }
    public static float offset$get(MemorySegment seg, long index) {
        return (float)constants$1458.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, float x) {
        constants$1458.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle is_foreground$VH() {
        return constants$1458.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int is_foreground;
     * }
     */
    public static int is_foreground$get(MemorySegment seg) {
        return (int)constants$1458.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int is_foreground;
     * }
     */
    public static void is_foreground$set(MemorySegment seg, int x) {
        constants$1458.const$3.set(seg, x);
    }
    public static int is_foreground$get(MemorySegment seg, long index) {
        return (int)constants$1458.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void is_foreground$set(MemorySegment seg, long index, int x) {
        constants$1458.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color$VH() {
        return constants$1458.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int color;
     * }
     */
    public static int color$get(MemorySegment seg) {
        return (int)constants$1458.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int color;
     * }
     */
    public static void color$set(MemorySegment seg, int x) {
        constants$1458.const$4.set(seg, x);
    }
    public static int color$get(MemorySegment seg, long index) {
        return (int)constants$1458.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void color$set(MemorySegment seg, long index, int x) {
        constants$1458.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


