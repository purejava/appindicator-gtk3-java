// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_4 extends app_indicator_h_5 {

    app_indicator_h_4() {
        // Should not be called directly
    }

    private static class gtk_flow_box_invalidate_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_invalidate_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_invalidate_sort(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_invalidate_sort$descriptor() {
        return gtk_flow_box_invalidate_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_invalidate_sort(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_invalidate_sort$handle() {
        return gtk_flow_box_invalidate_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_invalidate_sort(GtkFlowBox *box)
     * }
     */
    public static void gtk_flow_box_invalidate_sort(MemorySegment box) {
        var mh$ = gtk_flow_box_invalidate_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_invalidate_sort", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_font_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_font_button_get_type$descriptor() {
        return gtk_font_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_font_button_get_type()
     * }
     */
    public static MethodHandle gtk_font_button_get_type$handle() {
        return gtk_font_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_font_button_get_type()
     * }
     */
    public static long gtk_font_button_get_type() {
        var mh$ = gtk_font_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_button_new()
     * }
     */
    public static FunctionDescriptor gtk_font_button_new$descriptor() {
        return gtk_font_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_button_new()
     * }
     */
    public static MethodHandle gtk_font_button_new$handle() {
        return gtk_font_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_button_new()
     * }
     */
    public static MemorySegment gtk_font_button_new() {
        var mh$ = gtk_font_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_new_with_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_new_with_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_button_new_with_font(const gchar *fontname)
     * }
     */
    public static FunctionDescriptor gtk_font_button_new_with_font$descriptor() {
        return gtk_font_button_new_with_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_button_new_with_font(const gchar *fontname)
     * }
     */
    public static MethodHandle gtk_font_button_new_with_font$handle() {
        return gtk_font_button_new_with_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_button_new_with_font(const gchar *fontname)
     * }
     */
    public static MemorySegment gtk_font_button_new_with_font(MemorySegment fontname) {
        var mh$ = gtk_font_button_new_with_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_new_with_font", fontname);
            }
            return (MemorySegment)mh$.invokeExact(fontname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_button_get_title(GtkFontButton *font_button)
     * }
     */
    public static FunctionDescriptor gtk_font_button_get_title$descriptor() {
        return gtk_font_button_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_button_get_title(GtkFontButton *font_button)
     * }
     */
    public static MethodHandle gtk_font_button_get_title$handle() {
        return gtk_font_button_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_font_button_get_title(GtkFontButton *font_button)
     * }
     */
    public static MemorySegment gtk_font_button_get_title(MemorySegment font_button) {
        var mh$ = gtk_font_button_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_get_title", font_button);
            }
            return (MemorySegment)mh$.invokeExact(font_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_title(GtkFontButton *font_button, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_font_button_set_title$descriptor() {
        return gtk_font_button_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_title(GtkFontButton *font_button, const gchar *title)
     * }
     */
    public static MethodHandle gtk_font_button_set_title$handle() {
        return gtk_font_button_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_button_set_title(GtkFontButton *font_button, const gchar *title)
     * }
     */
    public static void gtk_font_button_set_title(MemorySegment font_button, MemorySegment title) {
        var mh$ = gtk_font_button_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_set_title", font_button, title);
            }
            mh$.invokeExact(font_button, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_get_use_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_get_use_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_use_font(GtkFontButton *font_button)
     * }
     */
    public static FunctionDescriptor gtk_font_button_get_use_font$descriptor() {
        return gtk_font_button_get_use_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_use_font(GtkFontButton *font_button)
     * }
     */
    public static MethodHandle gtk_font_button_get_use_font$handle() {
        return gtk_font_button_get_use_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_use_font(GtkFontButton *font_button)
     * }
     */
    public static int gtk_font_button_get_use_font(MemorySegment font_button) {
        var mh$ = gtk_font_button_get_use_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_get_use_font", font_button);
            }
            return (int)mh$.invokeExact(font_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_set_use_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_set_use_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_use_font(GtkFontButton *font_button, gboolean use_font)
     * }
     */
    public static FunctionDescriptor gtk_font_button_set_use_font$descriptor() {
        return gtk_font_button_set_use_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_use_font(GtkFontButton *font_button, gboolean use_font)
     * }
     */
    public static MethodHandle gtk_font_button_set_use_font$handle() {
        return gtk_font_button_set_use_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_button_set_use_font(GtkFontButton *font_button, gboolean use_font)
     * }
     */
    public static void gtk_font_button_set_use_font(MemorySegment font_button, int use_font) {
        var mh$ = gtk_font_button_set_use_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_set_use_font", font_button, use_font);
            }
            mh$.invokeExact(font_button, use_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_get_use_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_get_use_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_use_size(GtkFontButton *font_button)
     * }
     */
    public static FunctionDescriptor gtk_font_button_get_use_size$descriptor() {
        return gtk_font_button_get_use_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_use_size(GtkFontButton *font_button)
     * }
     */
    public static MethodHandle gtk_font_button_get_use_size$handle() {
        return gtk_font_button_get_use_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_use_size(GtkFontButton *font_button)
     * }
     */
    public static int gtk_font_button_get_use_size(MemorySegment font_button) {
        var mh$ = gtk_font_button_get_use_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_get_use_size", font_button);
            }
            return (int)mh$.invokeExact(font_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_set_use_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_set_use_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_use_size(GtkFontButton *font_button, gboolean use_size)
     * }
     */
    public static FunctionDescriptor gtk_font_button_set_use_size$descriptor() {
        return gtk_font_button_set_use_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_use_size(GtkFontButton *font_button, gboolean use_size)
     * }
     */
    public static MethodHandle gtk_font_button_set_use_size$handle() {
        return gtk_font_button_set_use_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_button_set_use_size(GtkFontButton *font_button, gboolean use_size)
     * }
     */
    public static void gtk_font_button_set_use_size(MemorySegment font_button, int use_size) {
        var mh$ = gtk_font_button_set_use_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_set_use_size", font_button, use_size);
            }
            mh$.invokeExact(font_button, use_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_get_font_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_get_font_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_button_get_font_name(GtkFontButton *font_button)
     * }
     */
    public static FunctionDescriptor gtk_font_button_get_font_name$descriptor() {
        return gtk_font_button_get_font_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_button_get_font_name(GtkFontButton *font_button)
     * }
     */
    public static MethodHandle gtk_font_button_get_font_name$handle() {
        return gtk_font_button_get_font_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_font_button_get_font_name(GtkFontButton *font_button)
     * }
     */
    public static MemorySegment gtk_font_button_get_font_name(MemorySegment font_button) {
        var mh$ = gtk_font_button_get_font_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_get_font_name", font_button);
            }
            return (MemorySegment)mh$.invokeExact(font_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_set_font_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_set_font_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_set_font_name(GtkFontButton *font_button, const gchar *fontname)
     * }
     */
    public static FunctionDescriptor gtk_font_button_set_font_name$descriptor() {
        return gtk_font_button_set_font_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_set_font_name(GtkFontButton *font_button, const gchar *fontname)
     * }
     */
    public static MethodHandle gtk_font_button_set_font_name$handle() {
        return gtk_font_button_set_font_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_set_font_name(GtkFontButton *font_button, const gchar *fontname)
     * }
     */
    public static int gtk_font_button_set_font_name(MemorySegment font_button, MemorySegment fontname) {
        var mh$ = gtk_font_button_set_font_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_set_font_name", font_button, fontname);
            }
            return (int)mh$.invokeExact(font_button, fontname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_get_show_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_get_show_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_show_style(GtkFontButton *font_button)
     * }
     */
    public static FunctionDescriptor gtk_font_button_get_show_style$descriptor() {
        return gtk_font_button_get_show_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_show_style(GtkFontButton *font_button)
     * }
     */
    public static MethodHandle gtk_font_button_get_show_style$handle() {
        return gtk_font_button_get_show_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_show_style(GtkFontButton *font_button)
     * }
     */
    public static int gtk_font_button_get_show_style(MemorySegment font_button) {
        var mh$ = gtk_font_button_get_show_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_get_show_style", font_button);
            }
            return (int)mh$.invokeExact(font_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_set_show_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_set_show_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_show_style(GtkFontButton *font_button, gboolean show_style)
     * }
     */
    public static FunctionDescriptor gtk_font_button_set_show_style$descriptor() {
        return gtk_font_button_set_show_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_show_style(GtkFontButton *font_button, gboolean show_style)
     * }
     */
    public static MethodHandle gtk_font_button_set_show_style$handle() {
        return gtk_font_button_set_show_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_button_set_show_style(GtkFontButton *font_button, gboolean show_style)
     * }
     */
    public static void gtk_font_button_set_show_style(MemorySegment font_button, int show_style) {
        var mh$ = gtk_font_button_set_show_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_set_show_style", font_button, show_style);
            }
            mh$.invokeExact(font_button, show_style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_get_show_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_get_show_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_show_size(GtkFontButton *font_button)
     * }
     */
    public static FunctionDescriptor gtk_font_button_get_show_size$descriptor() {
        return gtk_font_button_get_show_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_show_size(GtkFontButton *font_button)
     * }
     */
    public static MethodHandle gtk_font_button_get_show_size$handle() {
        return gtk_font_button_get_show_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_button_get_show_size(GtkFontButton *font_button)
     * }
     */
    public static int gtk_font_button_get_show_size(MemorySegment font_button) {
        var mh$ = gtk_font_button_get_show_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_get_show_size", font_button);
            }
            return (int)mh$.invokeExact(font_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_button_set_show_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_button_set_show_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_show_size(GtkFontButton *font_button, gboolean show_size)
     * }
     */
    public static FunctionDescriptor gtk_font_button_set_show_size$descriptor() {
        return gtk_font_button_set_show_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_button_set_show_size(GtkFontButton *font_button, gboolean show_size)
     * }
     */
    public static MethodHandle gtk_font_button_set_show_size$handle() {
        return gtk_font_button_set_show_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_button_set_show_size(GtkFontButton *font_button, gboolean show_size)
     * }
     */
    public static void gtk_font_button_set_show_size(MemorySegment font_button, int show_size) {
        var mh$ = gtk_font_button_set_show_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_button_set_show_size", font_button, show_size);
            }
            mh$.invokeExact(font_button, show_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_FONT_CHOOSER_LEVEL_FAMILY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FONT_CHOOSER_LEVEL_FAMILY = 0
     * }
     */
    public static int GTK_FONT_CHOOSER_LEVEL_FAMILY() {
        return GTK_FONT_CHOOSER_LEVEL_FAMILY;
    }
    private static final int GTK_FONT_CHOOSER_LEVEL_STYLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FONT_CHOOSER_LEVEL_STYLE = 1
     * }
     */
    public static int GTK_FONT_CHOOSER_LEVEL_STYLE() {
        return GTK_FONT_CHOOSER_LEVEL_STYLE;
    }
    private static final int GTK_FONT_CHOOSER_LEVEL_SIZE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FONT_CHOOSER_LEVEL_SIZE = 2
     * }
     */
    public static int GTK_FONT_CHOOSER_LEVEL_SIZE() {
        return GTK_FONT_CHOOSER_LEVEL_SIZE;
    }
    private static final int GTK_FONT_CHOOSER_LEVEL_VARIATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FONT_CHOOSER_LEVEL_VARIATIONS = 4
     * }
     */
    public static int GTK_FONT_CHOOSER_LEVEL_VARIATIONS() {
        return GTK_FONT_CHOOSER_LEVEL_VARIATIONS;
    }
    private static final int GTK_FONT_CHOOSER_LEVEL_FEATURES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FONT_CHOOSER_LEVEL_FEATURES = 8
     * }
     */
    public static int GTK_FONT_CHOOSER_LEVEL_FEATURES() {
        return GTK_FONT_CHOOSER_LEVEL_FEATURES;
    }

    private static class gtk_font_chooser_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_get_type()
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_type$descriptor() {
        return gtk_font_chooser_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_get_type()
     * }
     */
    public static MethodHandle gtk_font_chooser_get_type$handle() {
        return gtk_font_chooser_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_get_type()
     * }
     */
    public static long gtk_font_chooser_get_type() {
        var mh$ = gtk_font_chooser_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_font_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_font_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFamily *gtk_font_chooser_get_font_family(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_font_family$descriptor() {
        return gtk_font_chooser_get_font_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFamily *gtk_font_chooser_get_font_family(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_font_family$handle() {
        return gtk_font_chooser_get_font_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFamily *gtk_font_chooser_get_font_family(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_font_family(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_font_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_font_family", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_font_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_font_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFace *gtk_font_chooser_get_font_face(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_font_face$descriptor() {
        return gtk_font_chooser_get_font_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFace *gtk_font_chooser_get_font_face(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_font_face$handle() {
        return gtk_font_chooser_get_font_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFace *gtk_font_chooser_get_font_face(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_font_face(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_font_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_font_face", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_font_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_font_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_font_chooser_get_font_size(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_font_size$descriptor() {
        return gtk_font_chooser_get_font_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_font_chooser_get_font_size(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_font_size$handle() {
        return gtk_font_chooser_get_font_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_font_chooser_get_font_size(GtkFontChooser *fontchooser)
     * }
     */
    public static int gtk_font_chooser_get_font_size(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_font_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_font_size", fontchooser);
            }
            return (int)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_font_desc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_font_desc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *gtk_font_chooser_get_font_desc(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_font_desc$descriptor() {
        return gtk_font_chooser_get_font_desc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *gtk_font_chooser_get_font_desc(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_font_desc$handle() {
        return gtk_font_chooser_get_font_desc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *gtk_font_chooser_get_font_desc(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_font_desc(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_font_desc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_font_desc", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_font_desc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_font_desc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font_desc(GtkFontChooser *fontchooser, const PangoFontDescription *font_desc)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_font_desc$descriptor() {
        return gtk_font_chooser_set_font_desc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font_desc(GtkFontChooser *fontchooser, const PangoFontDescription *font_desc)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_font_desc$handle() {
        return gtk_font_chooser_set_font_desc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font_desc(GtkFontChooser *fontchooser, const PangoFontDescription *font_desc)
     * }
     */
    public static void gtk_font_chooser_set_font_desc(MemorySegment fontchooser, MemorySegment font_desc) {
        var mh$ = gtk_font_chooser_set_font_desc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_font_desc", fontchooser, font_desc);
            }
            mh$.invokeExact(fontchooser, font_desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_chooser_get_font(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_font$descriptor() {
        return gtk_font_chooser_get_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_chooser_get_font(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_font$handle() {
        return gtk_font_chooser_get_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_font_chooser_get_font(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_font(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_font", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font(GtkFontChooser *fontchooser, const gchar *fontname)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_font$descriptor() {
        return gtk_font_chooser_set_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font(GtkFontChooser *fontchooser, const gchar *fontname)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_font$handle() {
        return gtk_font_chooser_set_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font(GtkFontChooser *fontchooser, const gchar *fontname)
     * }
     */
    public static void gtk_font_chooser_set_font(MemorySegment fontchooser, MemorySegment fontname) {
        var mh$ = gtk_font_chooser_set_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_font", fontchooser, fontname);
            }
            mh$.invokeExact(fontchooser, fontname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_preview_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_preview_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_chooser_get_preview_text(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_preview_text$descriptor() {
        return gtk_font_chooser_get_preview_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_chooser_get_preview_text(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_preview_text$handle() {
        return gtk_font_chooser_get_preview_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_font_chooser_get_preview_text(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_preview_text(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_preview_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_preview_text", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_preview_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_preview_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_preview_text(GtkFontChooser *fontchooser, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_preview_text$descriptor() {
        return gtk_font_chooser_set_preview_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_preview_text(GtkFontChooser *fontchooser, const gchar *text)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_preview_text$handle() {
        return gtk_font_chooser_set_preview_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_preview_text(GtkFontChooser *fontchooser, const gchar *text)
     * }
     */
    public static void gtk_font_chooser_set_preview_text(MemorySegment fontchooser, MemorySegment text) {
        var mh$ = gtk_font_chooser_set_preview_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_preview_text", fontchooser, text);
            }
            mh$.invokeExact(fontchooser, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_show_preview_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_show_preview_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_chooser_get_show_preview_entry(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_show_preview_entry$descriptor() {
        return gtk_font_chooser_get_show_preview_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_chooser_get_show_preview_entry(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_show_preview_entry$handle() {
        return gtk_font_chooser_get_show_preview_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_chooser_get_show_preview_entry(GtkFontChooser *fontchooser)
     * }
     */
    public static int gtk_font_chooser_get_show_preview_entry(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_show_preview_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_show_preview_entry", fontchooser);
            }
            return (int)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_show_preview_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_show_preview_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_show_preview_entry(GtkFontChooser *fontchooser, gboolean show_preview_entry)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_show_preview_entry$descriptor() {
        return gtk_font_chooser_set_show_preview_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_show_preview_entry(GtkFontChooser *fontchooser, gboolean show_preview_entry)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_show_preview_entry$handle() {
        return gtk_font_chooser_set_show_preview_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_show_preview_entry(GtkFontChooser *fontchooser, gboolean show_preview_entry)
     * }
     */
    public static void gtk_font_chooser_set_show_preview_entry(MemorySegment fontchooser, int show_preview_entry) {
        var mh$ = gtk_font_chooser_set_show_preview_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_show_preview_entry", fontchooser, show_preview_entry);
            }
            mh$.invokeExact(fontchooser, show_preview_entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_filter_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_filter_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_filter_func(GtkFontChooser *fontchooser, GtkFontFilterFunc filter, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_filter_func$descriptor() {
        return gtk_font_chooser_set_filter_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_filter_func(GtkFontChooser *fontchooser, GtkFontFilterFunc filter, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_filter_func$handle() {
        return gtk_font_chooser_set_filter_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_filter_func(GtkFontChooser *fontchooser, GtkFontFilterFunc filter, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_font_chooser_set_filter_func(MemorySegment fontchooser, MemorySegment filter, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_font_chooser_set_filter_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_filter_func", fontchooser, filter, user_data, destroy);
            }
            mh$.invokeExact(fontchooser, filter, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_font_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_font_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font_map(GtkFontChooser *fontchooser, PangoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_font_map$descriptor() {
        return gtk_font_chooser_set_font_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font_map(GtkFontChooser *fontchooser, PangoFontMap *fontmap)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_font_map$handle() {
        return gtk_font_chooser_set_font_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_font_map(GtkFontChooser *fontchooser, PangoFontMap *fontmap)
     * }
     */
    public static void gtk_font_chooser_set_font_map(MemorySegment fontchooser, MemorySegment fontmap) {
        var mh$ = gtk_font_chooser_set_font_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_font_map", fontchooser, fontmap);
            }
            mh$.invokeExact(fontchooser, fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_font_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_font_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_font_chooser_get_font_map(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_font_map$descriptor() {
        return gtk_font_chooser_get_font_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_font_chooser_get_font_map(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_font_map$handle() {
        return gtk_font_chooser_get_font_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_font_chooser_get_font_map(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_font_map(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_font_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_font_map", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_level(GtkFontChooser *fontchooser, GtkFontChooserLevel level)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_level$descriptor() {
        return gtk_font_chooser_set_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_level(GtkFontChooser *fontchooser, GtkFontChooserLevel level)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_level$handle() {
        return gtk_font_chooser_set_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_level(GtkFontChooser *fontchooser, GtkFontChooserLevel level)
     * }
     */
    public static void gtk_font_chooser_set_level(MemorySegment fontchooser, int level) {
        var mh$ = gtk_font_chooser_set_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_level", fontchooser, level);
            }
            mh$.invokeExact(fontchooser, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFontChooserLevel gtk_font_chooser_get_level(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_level$descriptor() {
        return gtk_font_chooser_get_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFontChooserLevel gtk_font_chooser_get_level(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_level$handle() {
        return gtk_font_chooser_get_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFontChooserLevel gtk_font_chooser_get_level(GtkFontChooser *fontchooser)
     * }
     */
    public static int gtk_font_chooser_get_level(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_level", fontchooser);
            }
            return (int)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_font_features {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_font_features"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_font_chooser_get_font_features(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_font_features$descriptor() {
        return gtk_font_chooser_get_font_features.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_font_chooser_get_font_features(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_font_features$handle() {
        return gtk_font_chooser_get_font_features.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_font_chooser_get_font_features(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_font_features(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_font_features.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_font_features", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_get_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_get_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_font_chooser_get_language(GtkFontChooser *fontchooser)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_get_language$descriptor() {
        return gtk_font_chooser_get_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_font_chooser_get_language(GtkFontChooser *fontchooser)
     * }
     */
    public static MethodHandle gtk_font_chooser_get_language$handle() {
        return gtk_font_chooser_get_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_font_chooser_get_language(GtkFontChooser *fontchooser)
     * }
     */
    public static MemorySegment gtk_font_chooser_get_language(MemorySegment fontchooser) {
        var mh$ = gtk_font_chooser_get_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_get_language", fontchooser);
            }
            return (MemorySegment)mh$.invokeExact(fontchooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_set_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_set_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_language(GtkFontChooser *fontchooser, const char *language)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_set_language$descriptor() {
        return gtk_font_chooser_set_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_language(GtkFontChooser *fontchooser, const char *language)
     * }
     */
    public static MethodHandle gtk_font_chooser_set_language$handle() {
        return gtk_font_chooser_set_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_chooser_set_language(GtkFontChooser *fontchooser, const char *language)
     * }
     */
    public static void gtk_font_chooser_set_language(MemorySegment fontchooser, MemorySegment language) {
        var mh$ = gtk_font_chooser_set_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_set_language", fontchooser, language);
            }
            mh$.invokeExact(fontchooser, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_dialog_get_type$descriptor() {
        return gtk_font_chooser_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_font_chooser_dialog_get_type$handle() {
        return gtk_font_chooser_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_dialog_get_type()
     * }
     */
    public static long gtk_font_chooser_dialog_get_type() {
        var mh$ = gtk_font_chooser_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_dialog_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_dialog_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_chooser_dialog_new(const gchar *title, GtkWindow *parent)
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_dialog_new$descriptor() {
        return gtk_font_chooser_dialog_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_chooser_dialog_new(const gchar *title, GtkWindow *parent)
     * }
     */
    public static MethodHandle gtk_font_chooser_dialog_new$handle() {
        return gtk_font_chooser_dialog_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_chooser_dialog_new(const gchar *title, GtkWindow *parent)
     * }
     */
    public static MemorySegment gtk_font_chooser_dialog_new(MemorySegment title, MemorySegment parent) {
        var mh$ = gtk_font_chooser_dialog_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_dialog_new", title, parent);
            }
            return (MemorySegment)mh$.invokeExact(title, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_widget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_widget_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_widget_get_type()
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_widget_get_type$descriptor() {
        return gtk_font_chooser_widget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_widget_get_type()
     * }
     */
    public static MethodHandle gtk_font_chooser_widget_get_type$handle() {
        return gtk_font_chooser_widget_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_font_chooser_widget_get_type()
     * }
     */
    public static long gtk_font_chooser_widget_get_type() {
        var mh$ = gtk_font_chooser_widget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_widget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_chooser_widget_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_chooser_widget_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_chooser_widget_new()
     * }
     */
    public static FunctionDescriptor gtk_font_chooser_widget_new$descriptor() {
        return gtk_font_chooser_widget_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_chooser_widget_new()
     * }
     */
    public static MethodHandle gtk_font_chooser_widget_new$handle() {
        return gtk_font_chooser_widget_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_chooser_widget_new()
     * }
     */
    public static MemorySegment gtk_font_chooser_widget_new() {
        var mh$ = gtk_font_chooser_widget_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_chooser_widget_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_type$descriptor() {
        return gtk_gesture_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_get_type$handle() {
        return gtk_gesture_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_get_type()
     * }
     */
    public static long gtk_gesture_get_type() {
        var mh$ = gtk_gesture_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gtk_gesture_get_device(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_device$descriptor() {
        return gtk_gesture_get_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gtk_gesture_get_device(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_get_device$handle() {
        return gtk_gesture_get_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gtk_gesture_get_device(GtkGesture *gesture)
     * }
     */
    public static MemorySegment gtk_gesture_get_device(MemorySegment gesture) {
        var mh$ = gtk_gesture_get_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_device", gesture);
            }
            return (MemorySegment)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_set_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_set_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_set_state(GtkGesture *gesture, GtkEventSequenceState state)
     * }
     */
    public static FunctionDescriptor gtk_gesture_set_state$descriptor() {
        return gtk_gesture_set_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_set_state(GtkGesture *gesture, GtkEventSequenceState state)
     * }
     */
    public static MethodHandle gtk_gesture_set_state$handle() {
        return gtk_gesture_set_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_set_state(GtkGesture *gesture, GtkEventSequenceState state)
     * }
     */
    public static int gtk_gesture_set_state(MemorySegment gesture, int state) {
        var mh$ = gtk_gesture_set_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_set_state", gesture, state);
            }
            return (int)mh$.invokeExact(gesture, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_sequence_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_sequence_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEventSequenceState gtk_gesture_get_sequence_state(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_sequence_state$descriptor() {
        return gtk_gesture_get_sequence_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEventSequenceState gtk_gesture_get_sequence_state(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static MethodHandle gtk_gesture_get_sequence_state$handle() {
        return gtk_gesture_get_sequence_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEventSequenceState gtk_gesture_get_sequence_state(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static int gtk_gesture_get_sequence_state(MemorySegment gesture, MemorySegment sequence) {
        var mh$ = gtk_gesture_get_sequence_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_sequence_state", gesture, sequence);
            }
            return (int)mh$.invokeExact(gesture, sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_set_sequence_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_set_sequence_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_set_sequence_state(GtkGesture *gesture, GdkEventSequence *sequence, GtkEventSequenceState state)
     * }
     */
    public static FunctionDescriptor gtk_gesture_set_sequence_state$descriptor() {
        return gtk_gesture_set_sequence_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_set_sequence_state(GtkGesture *gesture, GdkEventSequence *sequence, GtkEventSequenceState state)
     * }
     */
    public static MethodHandle gtk_gesture_set_sequence_state$handle() {
        return gtk_gesture_set_sequence_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_set_sequence_state(GtkGesture *gesture, GdkEventSequence *sequence, GtkEventSequenceState state)
     * }
     */
    public static int gtk_gesture_set_sequence_state(MemorySegment gesture, MemorySegment sequence, int state) {
        var mh$ = gtk_gesture_set_sequence_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_set_sequence_state", gesture, sequence, state);
            }
            return (int)mh$.invokeExact(gesture, sequence, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_sequences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_sequences"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_gesture_get_sequences(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_sequences$descriptor() {
        return gtk_gesture_get_sequences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_gesture_get_sequences(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_get_sequences$handle() {
        return gtk_gesture_get_sequences.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_gesture_get_sequences(GtkGesture *gesture)
     * }
     */
    public static MemorySegment gtk_gesture_get_sequences(MemorySegment gesture) {
        var mh$ = gtk_gesture_get_sequences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_sequences", gesture);
            }
            return (MemorySegment)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_last_updated_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_last_updated_sequence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventSequence *gtk_gesture_get_last_updated_sequence(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_last_updated_sequence$descriptor() {
        return gtk_gesture_get_last_updated_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventSequence *gtk_gesture_get_last_updated_sequence(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_get_last_updated_sequence$handle() {
        return gtk_gesture_get_last_updated_sequence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventSequence *gtk_gesture_get_last_updated_sequence(GtkGesture *gesture)
     * }
     */
    public static MemorySegment gtk_gesture_get_last_updated_sequence(MemorySegment gesture) {
        var mh$ = gtk_gesture_get_last_updated_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_last_updated_sequence", gesture);
            }
            return (MemorySegment)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_handles_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_handles_sequence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_handles_sequence(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static FunctionDescriptor gtk_gesture_handles_sequence$descriptor() {
        return gtk_gesture_handles_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_handles_sequence(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static MethodHandle gtk_gesture_handles_sequence$handle() {
        return gtk_gesture_handles_sequence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_handles_sequence(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static int gtk_gesture_handles_sequence(MemorySegment gesture, MemorySegment sequence) {
        var mh$ = gtk_gesture_handles_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_handles_sequence", gesture, sequence);
            }
            return (int)mh$.invokeExact(gesture, sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_last_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_last_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GdkEvent *gtk_gesture_get_last_event(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_last_event$descriptor() {
        return gtk_gesture_get_last_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GdkEvent *gtk_gesture_get_last_event(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static MethodHandle gtk_gesture_get_last_event$handle() {
        return gtk_gesture_get_last_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GdkEvent *gtk_gesture_get_last_event(GtkGesture *gesture, GdkEventSequence *sequence)
     * }
     */
    public static MemorySegment gtk_gesture_get_last_event(MemorySegment gesture, MemorySegment sequence) {
        var mh$ = gtk_gesture_get_last_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_last_event", gesture, sequence);
            }
            return (MemorySegment)mh$.invokeExact(gesture, sequence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_point(GtkGesture *gesture, GdkEventSequence *sequence, gdouble *x, gdouble *y)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_point$descriptor() {
        return gtk_gesture_get_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_point(GtkGesture *gesture, GdkEventSequence *sequence, gdouble *x, gdouble *y)
     * }
     */
    public static MethodHandle gtk_gesture_get_point$handle() {
        return gtk_gesture_get_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_point(GtkGesture *gesture, GdkEventSequence *sequence, gdouble *x, gdouble *y)
     * }
     */
    public static int gtk_gesture_get_point(MemorySegment gesture, MemorySegment sequence, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_gesture_get_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_point", gesture, sequence, x, y);
            }
            return (int)mh$.invokeExact(gesture, sequence, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_bounding_box {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_bounding_box"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_bounding_box(GtkGesture *gesture, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_bounding_box$descriptor() {
        return gtk_gesture_get_bounding_box.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_bounding_box(GtkGesture *gesture, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_gesture_get_bounding_box$handle() {
        return gtk_gesture_get_bounding_box.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_bounding_box(GtkGesture *gesture, GdkRectangle *rect)
     * }
     */
    public static int gtk_gesture_get_bounding_box(MemorySegment gesture, MemorySegment rect) {
        var mh$ = gtk_gesture_get_bounding_box.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_bounding_box", gesture, rect);
            }
            return (int)mh$.invokeExact(gesture, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_bounding_box_center {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_bounding_box_center"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_bounding_box_center(GtkGesture *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_bounding_box_center$descriptor() {
        return gtk_gesture_get_bounding_box_center.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_bounding_box_center(GtkGesture *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static MethodHandle gtk_gesture_get_bounding_box_center$handle() {
        return gtk_gesture_get_bounding_box_center.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_get_bounding_box_center(GtkGesture *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static int gtk_gesture_get_bounding_box_center(MemorySegment gesture, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_gesture_get_bounding_box_center.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_bounding_box_center", gesture, x, y);
            }
            return (int)mh$.invokeExact(gesture, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_is_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_active(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_is_active$descriptor() {
        return gtk_gesture_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_active(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_is_active$handle() {
        return gtk_gesture_is_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_active(GtkGesture *gesture)
     * }
     */
    public static int gtk_gesture_is_active(MemorySegment gesture) {
        var mh$ = gtk_gesture_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_is_active", gesture);
            }
            return (int)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_is_recognized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_is_recognized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_recognized(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_is_recognized$descriptor() {
        return gtk_gesture_is_recognized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_recognized(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_is_recognized$handle() {
        return gtk_gesture_is_recognized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_recognized(GtkGesture *gesture)
     * }
     */
    public static int gtk_gesture_is_recognized(MemorySegment gesture) {
        var mh$ = gtk_gesture_is_recognized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_is_recognized", gesture);
            }
            return (int)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_gesture_get_window(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_window$descriptor() {
        return gtk_gesture_get_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_gesture_get_window(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_get_window$handle() {
        return gtk_gesture_get_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_gesture_get_window(GtkGesture *gesture)
     * }
     */
    public static MemorySegment gtk_gesture_get_window(MemorySegment gesture) {
        var mh$ = gtk_gesture_get_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_window", gesture);
            }
            return (MemorySegment)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_set_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_set_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_set_window(GtkGesture *gesture, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_gesture_set_window$descriptor() {
        return gtk_gesture_set_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_set_window(GtkGesture *gesture, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_gesture_set_window$handle() {
        return gtk_gesture_set_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_set_window(GtkGesture *gesture, GdkWindow *window)
     * }
     */
    public static void gtk_gesture_set_window(MemorySegment gesture, MemorySegment window) {
        var mh$ = gtk_gesture_set_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_set_window", gesture, window);
            }
            mh$.invokeExact(gesture, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_group(GtkGesture *group_gesture, GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_group$descriptor() {
        return gtk_gesture_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_group(GtkGesture *group_gesture, GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_group$handle() {
        return gtk_gesture_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_group(GtkGesture *group_gesture, GtkGesture *gesture)
     * }
     */
    public static void gtk_gesture_group(MemorySegment group_gesture, MemorySegment gesture) {
        var mh$ = gtk_gesture_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_group", group_gesture, gesture);
            }
            mh$.invokeExact(group_gesture, gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_ungroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_ungroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_ungroup(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_ungroup$descriptor() {
        return gtk_gesture_ungroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_ungroup(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_ungroup$handle() {
        return gtk_gesture_ungroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_ungroup(GtkGesture *gesture)
     * }
     */
    public static void gtk_gesture_ungroup(MemorySegment gesture) {
        var mh$ = gtk_gesture_ungroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_ungroup", gesture);
            }
            mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_gesture_get_group(GtkGesture *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_get_group$descriptor() {
        return gtk_gesture_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_gesture_get_group(GtkGesture *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_get_group$handle() {
        return gtk_gesture_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_gesture_get_group(GtkGesture *gesture)
     * }
     */
    public static MemorySegment gtk_gesture_get_group(MemorySegment gesture) {
        var mh$ = gtk_gesture_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_get_group", gesture);
            }
            return (MemorySegment)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_is_grouped_with {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_is_grouped_with"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_grouped_with(GtkGesture *gesture, GtkGesture *other)
     * }
     */
    public static FunctionDescriptor gtk_gesture_is_grouped_with$descriptor() {
        return gtk_gesture_is_grouped_with.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_grouped_with(GtkGesture *gesture, GtkGesture *other)
     * }
     */
    public static MethodHandle gtk_gesture_is_grouped_with$handle() {
        return gtk_gesture_is_grouped_with.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_is_grouped_with(GtkGesture *gesture, GtkGesture *other)
     * }
     */
    public static int gtk_gesture_is_grouped_with(MemorySegment gesture, MemorySegment other) {
        var mh$ = gtk_gesture_is_grouped_with.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_is_grouped_with", gesture, other);
            }
            return (int)mh$.invokeExact(gesture, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_single_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_get_type$descriptor() {
        return gtk_gesture_single_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_single_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_single_get_type$handle() {
        return gtk_gesture_single_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_single_get_type()
     * }
     */
    public static long gtk_gesture_single_get_type() {
        var mh$ = gtk_gesture_single_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_get_touch_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_get_touch_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_single_get_touch_only(GtkGestureSingle *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_get_touch_only$descriptor() {
        return gtk_gesture_single_get_touch_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_single_get_touch_only(GtkGestureSingle *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_single_get_touch_only$handle() {
        return gtk_gesture_single_get_touch_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_single_get_touch_only(GtkGestureSingle *gesture)
     * }
     */
    public static int gtk_gesture_single_get_touch_only(MemorySegment gesture) {
        var mh$ = gtk_gesture_single_get_touch_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_get_touch_only", gesture);
            }
            return (int)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_set_touch_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_set_touch_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_touch_only(GtkGestureSingle *gesture, gboolean touch_only)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_set_touch_only$descriptor() {
        return gtk_gesture_single_set_touch_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_touch_only(GtkGestureSingle *gesture, gboolean touch_only)
     * }
     */
    public static MethodHandle gtk_gesture_single_set_touch_only$handle() {
        return gtk_gesture_single_set_touch_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_touch_only(GtkGestureSingle *gesture, gboolean touch_only)
     * }
     */
    public static void gtk_gesture_single_set_touch_only(MemorySegment gesture, int touch_only) {
        var mh$ = gtk_gesture_single_set_touch_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_set_touch_only", gesture, touch_only);
            }
            mh$.invokeExact(gesture, touch_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_get_exclusive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_get_exclusive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_single_get_exclusive(GtkGestureSingle *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_get_exclusive$descriptor() {
        return gtk_gesture_single_get_exclusive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_single_get_exclusive(GtkGestureSingle *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_single_get_exclusive$handle() {
        return gtk_gesture_single_get_exclusive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_single_get_exclusive(GtkGestureSingle *gesture)
     * }
     */
    public static int gtk_gesture_single_get_exclusive(MemorySegment gesture) {
        var mh$ = gtk_gesture_single_get_exclusive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_get_exclusive", gesture);
            }
            return (int)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_set_exclusive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_set_exclusive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_exclusive(GtkGestureSingle *gesture, gboolean exclusive)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_set_exclusive$descriptor() {
        return gtk_gesture_single_set_exclusive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_exclusive(GtkGestureSingle *gesture, gboolean exclusive)
     * }
     */
    public static MethodHandle gtk_gesture_single_set_exclusive$handle() {
        return gtk_gesture_single_set_exclusive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_exclusive(GtkGestureSingle *gesture, gboolean exclusive)
     * }
     */
    public static void gtk_gesture_single_set_exclusive(MemorySegment gesture, int exclusive) {
        var mh$ = gtk_gesture_single_set_exclusive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_set_exclusive", gesture, exclusive);
            }
            mh$.invokeExact(gesture, exclusive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_get_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_get_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_gesture_single_get_button(GtkGestureSingle *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_get_button$descriptor() {
        return gtk_gesture_single_get_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_gesture_single_get_button(GtkGestureSingle *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_single_get_button$handle() {
        return gtk_gesture_single_get_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_gesture_single_get_button(GtkGestureSingle *gesture)
     * }
     */
    public static int gtk_gesture_single_get_button(MemorySegment gesture) {
        var mh$ = gtk_gesture_single_get_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_get_button", gesture);
            }
            return (int)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_set_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_set_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_button(GtkGestureSingle *gesture, guint button)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_set_button$descriptor() {
        return gtk_gesture_single_set_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_button(GtkGestureSingle *gesture, guint button)
     * }
     */
    public static MethodHandle gtk_gesture_single_set_button$handle() {
        return gtk_gesture_single_set_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_single_set_button(GtkGestureSingle *gesture, guint button)
     * }
     */
    public static void gtk_gesture_single_set_button(MemorySegment gesture, int button) {
        var mh$ = gtk_gesture_single_set_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_set_button", gesture, button);
            }
            mh$.invokeExact(gesture, button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_get_current_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_get_current_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_gesture_single_get_current_button(GtkGestureSingle *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_get_current_button$descriptor() {
        return gtk_gesture_single_get_current_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_gesture_single_get_current_button(GtkGestureSingle *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_single_get_current_button$handle() {
        return gtk_gesture_single_get_current_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_gesture_single_get_current_button(GtkGestureSingle *gesture)
     * }
     */
    public static int gtk_gesture_single_get_current_button(MemorySegment gesture) {
        var mh$ = gtk_gesture_single_get_current_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_get_current_button", gesture);
            }
            return (int)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_single_get_current_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_single_get_current_sequence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventSequence *gtk_gesture_single_get_current_sequence(GtkGestureSingle *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_single_get_current_sequence$descriptor() {
        return gtk_gesture_single_get_current_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventSequence *gtk_gesture_single_get_current_sequence(GtkGestureSingle *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_single_get_current_sequence$handle() {
        return gtk_gesture_single_get_current_sequence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventSequence *gtk_gesture_single_get_current_sequence(GtkGestureSingle *gesture)
     * }
     */
    public static MemorySegment gtk_gesture_single_get_current_sequence(MemorySegment gesture) {
        var mh$ = gtk_gesture_single_get_current_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_single_get_current_sequence", gesture);
            }
            return (MemorySegment)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_drag_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_drag_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_drag_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_drag_get_type$descriptor() {
        return gtk_gesture_drag_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_drag_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_drag_get_type$handle() {
        return gtk_gesture_drag_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_drag_get_type()
     * }
     */
    public static long gtk_gesture_drag_get_type() {
        var mh$ = gtk_gesture_drag_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_drag_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_drag_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_drag_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_drag_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_gesture_drag_new$descriptor() {
        return gtk_gesture_drag_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_drag_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_gesture_drag_new$handle() {
        return gtk_gesture_drag_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_drag_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_gesture_drag_new(MemorySegment widget) {
        var mh$ = gtk_gesture_drag_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_drag_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_drag_get_start_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_drag_get_start_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_drag_get_start_point(GtkGestureDrag *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static FunctionDescriptor gtk_gesture_drag_get_start_point$descriptor() {
        return gtk_gesture_drag_get_start_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_drag_get_start_point(GtkGestureDrag *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static MethodHandle gtk_gesture_drag_get_start_point$handle() {
        return gtk_gesture_drag_get_start_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_drag_get_start_point(GtkGestureDrag *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static int gtk_gesture_drag_get_start_point(MemorySegment gesture, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_gesture_drag_get_start_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_drag_get_start_point", gesture, x, y);
            }
            return (int)mh$.invokeExact(gesture, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_drag_get_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_drag_get_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_drag_get_offset(GtkGestureDrag *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static FunctionDescriptor gtk_gesture_drag_get_offset$descriptor() {
        return gtk_gesture_drag_get_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_drag_get_offset(GtkGestureDrag *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static MethodHandle gtk_gesture_drag_get_offset$handle() {
        return gtk_gesture_drag_get_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_drag_get_offset(GtkGestureDrag *gesture, gdouble *x, gdouble *y)
     * }
     */
    public static int gtk_gesture_drag_get_offset(MemorySegment gesture, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_gesture_drag_get_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_drag_get_offset", gesture, x, y);
            }
            return (int)mh$.invokeExact(gesture, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_long_press_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_long_press_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_long_press_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_long_press_get_type$descriptor() {
        return gtk_gesture_long_press_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_long_press_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_long_press_get_type$handle() {
        return gtk_gesture_long_press_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_long_press_get_type()
     * }
     */
    public static long gtk_gesture_long_press_get_type() {
        var mh$ = gtk_gesture_long_press_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_long_press_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_long_press_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_long_press_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_long_press_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_gesture_long_press_new$descriptor() {
        return gtk_gesture_long_press_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_long_press_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_gesture_long_press_new$handle() {
        return gtk_gesture_long_press_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_long_press_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_gesture_long_press_new(MemorySegment widget) {
        var mh$ = gtk_gesture_long_press_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_long_press_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_multi_press_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_multi_press_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_multi_press_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_multi_press_get_type$descriptor() {
        return gtk_gesture_multi_press_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_multi_press_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_multi_press_get_type$handle() {
        return gtk_gesture_multi_press_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_multi_press_get_type()
     * }
     */
    public static long gtk_gesture_multi_press_get_type() {
        var mh$ = gtk_gesture_multi_press_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_multi_press_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_multi_press_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_multi_press_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_multi_press_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_gesture_multi_press_new$descriptor() {
        return gtk_gesture_multi_press_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_multi_press_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_gesture_multi_press_new$handle() {
        return gtk_gesture_multi_press_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_multi_press_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_gesture_multi_press_new(MemorySegment widget) {
        var mh$ = gtk_gesture_multi_press_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_multi_press_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_multi_press_set_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_multi_press_set_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_multi_press_set_area(GtkGestureMultiPress *gesture, const GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_gesture_multi_press_set_area$descriptor() {
        return gtk_gesture_multi_press_set_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_multi_press_set_area(GtkGestureMultiPress *gesture, const GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_gesture_multi_press_set_area$handle() {
        return gtk_gesture_multi_press_set_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_multi_press_set_area(GtkGestureMultiPress *gesture, const GdkRectangle *rect)
     * }
     */
    public static void gtk_gesture_multi_press_set_area(MemorySegment gesture, MemorySegment rect) {
        var mh$ = gtk_gesture_multi_press_set_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_multi_press_set_area", gesture, rect);
            }
            mh$.invokeExact(gesture, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_multi_press_get_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_multi_press_get_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_multi_press_get_area(GtkGestureMultiPress *gesture, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_gesture_multi_press_get_area$descriptor() {
        return gtk_gesture_multi_press_get_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_multi_press_get_area(GtkGestureMultiPress *gesture, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_gesture_multi_press_get_area$handle() {
        return gtk_gesture_multi_press_get_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_multi_press_get_area(GtkGestureMultiPress *gesture, GdkRectangle *rect)
     * }
     */
    public static int gtk_gesture_multi_press_get_area(MemorySegment gesture, MemorySegment rect) {
        var mh$ = gtk_gesture_multi_press_get_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_multi_press_get_area", gesture, rect);
            }
            return (int)mh$.invokeExact(gesture, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_pan_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_pan_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_pan_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_pan_get_type$descriptor() {
        return gtk_gesture_pan_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_pan_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_pan_get_type$handle() {
        return gtk_gesture_pan_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_pan_get_type()
     * }
     */
    public static long gtk_gesture_pan_get_type() {
        var mh$ = gtk_gesture_pan_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_pan_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_pan_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_pan_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_pan_new(GtkWidget *widget, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_gesture_pan_new$descriptor() {
        return gtk_gesture_pan_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_pan_new(GtkWidget *widget, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_gesture_pan_new$handle() {
        return gtk_gesture_pan_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_pan_new(GtkWidget *widget, GtkOrientation orientation)
     * }
     */
    public static MemorySegment gtk_gesture_pan_new(MemorySegment widget, int orientation) {
        var mh$ = gtk_gesture_pan_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_pan_new", widget, orientation);
            }
            return (MemorySegment)mh$.invokeExact(widget, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_pan_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_pan_get_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_gesture_pan_get_orientation(GtkGesturePan *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_pan_get_orientation$descriptor() {
        return gtk_gesture_pan_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_gesture_pan_get_orientation(GtkGesturePan *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_pan_get_orientation$handle() {
        return gtk_gesture_pan_get_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkOrientation gtk_gesture_pan_get_orientation(GtkGesturePan *gesture)
     * }
     */
    public static int gtk_gesture_pan_get_orientation(MemorySegment gesture) {
        var mh$ = gtk_gesture_pan_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_pan_get_orientation", gesture);
            }
            return (int)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_pan_set_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_pan_set_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gesture_pan_set_orientation(GtkGesturePan *gesture, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_gesture_pan_set_orientation$descriptor() {
        return gtk_gesture_pan_set_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gesture_pan_set_orientation(GtkGesturePan *gesture, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_gesture_pan_set_orientation$handle() {
        return gtk_gesture_pan_set_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gesture_pan_set_orientation(GtkGesturePan *gesture, GtkOrientation orientation)
     * }
     */
    public static void gtk_gesture_pan_set_orientation(MemorySegment gesture, int orientation) {
        var mh$ = gtk_gesture_pan_set_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_pan_set_orientation", gesture, orientation);
            }
            mh$.invokeExact(gesture, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_rotate_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_rotate_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_rotate_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_rotate_get_type$descriptor() {
        return gtk_gesture_rotate_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_rotate_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_rotate_get_type$handle() {
        return gtk_gesture_rotate_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_rotate_get_type()
     * }
     */
    public static long gtk_gesture_rotate_get_type() {
        var mh$ = gtk_gesture_rotate_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_rotate_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_rotate_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_rotate_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_rotate_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_gesture_rotate_new$descriptor() {
        return gtk_gesture_rotate_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_rotate_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_gesture_rotate_new$handle() {
        return gtk_gesture_rotate_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_rotate_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_gesture_rotate_new(MemorySegment widget) {
        var mh$ = gtk_gesture_rotate_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_rotate_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_rotate_get_angle_delta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_rotate_get_angle_delta"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_gesture_rotate_get_angle_delta(GtkGestureRotate *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_rotate_get_angle_delta$descriptor() {
        return gtk_gesture_rotate_get_angle_delta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_gesture_rotate_get_angle_delta(GtkGestureRotate *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_rotate_get_angle_delta$handle() {
        return gtk_gesture_rotate_get_angle_delta.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_gesture_rotate_get_angle_delta(GtkGestureRotate *gesture)
     * }
     */
    public static double gtk_gesture_rotate_get_angle_delta(MemorySegment gesture) {
        var mh$ = gtk_gesture_rotate_get_angle_delta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_rotate_get_angle_delta", gesture);
            }
            return (double)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_stylus_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_stylus_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_stylus_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_stylus_get_type$descriptor() {
        return gtk_gesture_stylus_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_stylus_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_stylus_get_type$handle() {
        return gtk_gesture_stylus_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_stylus_get_type()
     * }
     */
    public static long gtk_gesture_stylus_get_type() {
        var mh$ = gtk_gesture_stylus_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_stylus_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_stylus_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_stylus_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_stylus_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_gesture_stylus_new$descriptor() {
        return gtk_gesture_stylus_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_stylus_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_gesture_stylus_new$handle() {
        return gtk_gesture_stylus_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_stylus_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_gesture_stylus_new(MemorySegment widget) {
        var mh$ = gtk_gesture_stylus_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_stylus_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_stylus_get_axis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_stylus_get_axis"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_stylus_get_axis(GtkGestureStylus *gesture, GdkAxisUse axis, gdouble *value)
     * }
     */
    public static FunctionDescriptor gtk_gesture_stylus_get_axis$descriptor() {
        return gtk_gesture_stylus_get_axis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_stylus_get_axis(GtkGestureStylus *gesture, GdkAxisUse axis, gdouble *value)
     * }
     */
    public static MethodHandle gtk_gesture_stylus_get_axis$handle() {
        return gtk_gesture_stylus_get_axis.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_stylus_get_axis(GtkGestureStylus *gesture, GdkAxisUse axis, gdouble *value)
     * }
     */
    public static int gtk_gesture_stylus_get_axis(MemorySegment gesture, int axis, MemorySegment value) {
        var mh$ = gtk_gesture_stylus_get_axis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_stylus_get_axis", gesture, axis, value);
            }
            return (int)mh$.invokeExact(gesture, axis, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_stylus_get_axes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_stylus_get_axes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_stylus_get_axes(GtkGestureStylus *gesture, GdkAxisUse axes[], gdouble **values)
     * }
     */
    public static FunctionDescriptor gtk_gesture_stylus_get_axes$descriptor() {
        return gtk_gesture_stylus_get_axes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_stylus_get_axes(GtkGestureStylus *gesture, GdkAxisUse axes[], gdouble **values)
     * }
     */
    public static MethodHandle gtk_gesture_stylus_get_axes$handle() {
        return gtk_gesture_stylus_get_axes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_stylus_get_axes(GtkGestureStylus *gesture, GdkAxisUse axes[], gdouble **values)
     * }
     */
    public static int gtk_gesture_stylus_get_axes(MemorySegment gesture, MemorySegment axes, MemorySegment values) {
        var mh$ = gtk_gesture_stylus_get_axes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_stylus_get_axes", gesture, axes, values);
            }
            return (int)mh$.invokeExact(gesture, axes, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_stylus_get_device_tool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_stylus_get_device_tool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDeviceTool *gtk_gesture_stylus_get_device_tool(GtkGestureStylus *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_stylus_get_device_tool$descriptor() {
        return gtk_gesture_stylus_get_device_tool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDeviceTool *gtk_gesture_stylus_get_device_tool(GtkGestureStylus *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_stylus_get_device_tool$handle() {
        return gtk_gesture_stylus_get_device_tool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDeviceTool *gtk_gesture_stylus_get_device_tool(GtkGestureStylus *gesture)
     * }
     */
    public static MemorySegment gtk_gesture_stylus_get_device_tool(MemorySegment gesture) {
        var mh$ = gtk_gesture_stylus_get_device_tool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_stylus_get_device_tool", gesture);
            }
            return (MemorySegment)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_swipe_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_swipe_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_swipe_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_swipe_get_type$descriptor() {
        return gtk_gesture_swipe_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_swipe_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_swipe_get_type$handle() {
        return gtk_gesture_swipe_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_swipe_get_type()
     * }
     */
    public static long gtk_gesture_swipe_get_type() {
        var mh$ = gtk_gesture_swipe_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_swipe_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_swipe_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_swipe_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_swipe_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_gesture_swipe_new$descriptor() {
        return gtk_gesture_swipe_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_swipe_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_gesture_swipe_new$handle() {
        return gtk_gesture_swipe_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_swipe_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_gesture_swipe_new(MemorySegment widget) {
        var mh$ = gtk_gesture_swipe_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_swipe_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_swipe_get_velocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_swipe_get_velocity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_swipe_get_velocity(GtkGestureSwipe *gesture, gdouble *velocity_x, gdouble *velocity_y)
     * }
     */
    public static FunctionDescriptor gtk_gesture_swipe_get_velocity$descriptor() {
        return gtk_gesture_swipe_get_velocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_swipe_get_velocity(GtkGestureSwipe *gesture, gdouble *velocity_x, gdouble *velocity_y)
     * }
     */
    public static MethodHandle gtk_gesture_swipe_get_velocity$handle() {
        return gtk_gesture_swipe_get_velocity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gesture_swipe_get_velocity(GtkGestureSwipe *gesture, gdouble *velocity_x, gdouble *velocity_y)
     * }
     */
    public static int gtk_gesture_swipe_get_velocity(MemorySegment gesture, MemorySegment velocity_x, MemorySegment velocity_y) {
        var mh$ = gtk_gesture_swipe_get_velocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_swipe_get_velocity", gesture, velocity_x, velocity_y);
            }
            return (int)mh$.invokeExact(gesture, velocity_x, velocity_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_zoom_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_zoom_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_zoom_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gesture_zoom_get_type$descriptor() {
        return gtk_gesture_zoom_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gesture_zoom_get_type()
     * }
     */
    public static MethodHandle gtk_gesture_zoom_get_type$handle() {
        return gtk_gesture_zoom_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gesture_zoom_get_type()
     * }
     */
    public static long gtk_gesture_zoom_get_type() {
        var mh$ = gtk_gesture_zoom_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_zoom_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_zoom_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_zoom_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_zoom_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_gesture_zoom_new$descriptor() {
        return gtk_gesture_zoom_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_zoom_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_gesture_zoom_new$handle() {
        return gtk_gesture_zoom_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGesture *gtk_gesture_zoom_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_gesture_zoom_new(MemorySegment widget) {
        var mh$ = gtk_gesture_zoom_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_zoom_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gesture_zoom_get_scale_delta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gesture_zoom_get_scale_delta"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_gesture_zoom_get_scale_delta(GtkGestureZoom *gesture)
     * }
     */
    public static FunctionDescriptor gtk_gesture_zoom_get_scale_delta$descriptor() {
        return gtk_gesture_zoom_get_scale_delta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_gesture_zoom_get_scale_delta(GtkGestureZoom *gesture)
     * }
     */
    public static MethodHandle gtk_gesture_zoom_get_scale_delta$handle() {
        return gtk_gesture_zoom_get_scale_delta.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_gesture_zoom_get_scale_delta(GtkGestureZoom *gesture)
     * }
     */
    public static double gtk_gesture_zoom_get_scale_delta(MemorySegment gesture) {
        var mh$ = gtk_gesture_zoom_get_scale_delta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gesture_zoom_get_scale_delta", gesture);
            }
            return (double)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gl_area_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_type$descriptor() {
        return gtk_gl_area_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gl_area_get_type()
     * }
     */
    public static MethodHandle gtk_gl_area_get_type$handle() {
        return gtk_gl_area_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gl_area_get_type()
     * }
     */
    public static long gtk_gl_area_get_type() {
        var mh$ = gtk_gl_area_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_gl_area_new()
     * }
     */
    public static FunctionDescriptor gtk_gl_area_new$descriptor() {
        return gtk_gl_area_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_gl_area_new()
     * }
     */
    public static MethodHandle gtk_gl_area_new$handle() {
        return gtk_gl_area_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_gl_area_new()
     * }
     */
    public static MemorySegment gtk_gl_area_new() {
        var mh$ = gtk_gl_area_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_set_use_es {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_set_use_es"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_use_es(GtkGLArea *area, gboolean use_es)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_set_use_es$descriptor() {
        return gtk_gl_area_set_use_es.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_use_es(GtkGLArea *area, gboolean use_es)
     * }
     */
    public static MethodHandle gtk_gl_area_set_use_es$handle() {
        return gtk_gl_area_set_use_es.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_use_es(GtkGLArea *area, gboolean use_es)
     * }
     */
    public static void gtk_gl_area_set_use_es(MemorySegment area, int use_es) {
        var mh$ = gtk_gl_area_set_use_es.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_set_use_es", area, use_es);
            }
            mh$.invokeExact(area, use_es);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_use_es {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_use_es"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_use_es(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_use_es$descriptor() {
        return gtk_gl_area_get_use_es.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_use_es(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_get_use_es$handle() {
        return gtk_gl_area_get_use_es.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_use_es(GtkGLArea *area)
     * }
     */
    public static int gtk_gl_area_get_use_es(MemorySegment area) {
        var mh$ = gtk_gl_area_get_use_es.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_use_es", area);
            }
            return (int)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_set_required_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_set_required_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_required_version(GtkGLArea *area, gint major, gint minor)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_set_required_version$descriptor() {
        return gtk_gl_area_set_required_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_required_version(GtkGLArea *area, gint major, gint minor)
     * }
     */
    public static MethodHandle gtk_gl_area_set_required_version$handle() {
        return gtk_gl_area_set_required_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_required_version(GtkGLArea *area, gint major, gint minor)
     * }
     */
    public static void gtk_gl_area_set_required_version(MemorySegment area, int major, int minor) {
        var mh$ = gtk_gl_area_set_required_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_set_required_version", area, major, minor);
            }
            mh$.invokeExact(area, major, minor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_required_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_required_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_get_required_version(GtkGLArea *area, gint *major, gint *minor)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_required_version$descriptor() {
        return gtk_gl_area_get_required_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_get_required_version(GtkGLArea *area, gint *major, gint *minor)
     * }
     */
    public static MethodHandle gtk_gl_area_get_required_version$handle() {
        return gtk_gl_area_get_required_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_get_required_version(GtkGLArea *area, gint *major, gint *minor)
     * }
     */
    public static void gtk_gl_area_get_required_version(MemorySegment area, MemorySegment major, MemorySegment minor) {
        var mh$ = gtk_gl_area_get_required_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_required_version", area, major, minor);
            }
            mh$.invokeExact(area, major, minor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_has_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_has_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_alpha(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_has_alpha$descriptor() {
        return gtk_gl_area_get_has_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_alpha(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_get_has_alpha$handle() {
        return gtk_gl_area_get_has_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_alpha(GtkGLArea *area)
     * }
     */
    public static int gtk_gl_area_get_has_alpha(MemorySegment area) {
        var mh$ = gtk_gl_area_get_has_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_has_alpha", area);
            }
            return (int)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_set_has_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_set_has_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_alpha(GtkGLArea *area, gboolean has_alpha)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_set_has_alpha$descriptor() {
        return gtk_gl_area_set_has_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_alpha(GtkGLArea *area, gboolean has_alpha)
     * }
     */
    public static MethodHandle gtk_gl_area_set_has_alpha$handle() {
        return gtk_gl_area_set_has_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_alpha(GtkGLArea *area, gboolean has_alpha)
     * }
     */
    public static void gtk_gl_area_set_has_alpha(MemorySegment area, int has_alpha) {
        var mh$ = gtk_gl_area_set_has_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_set_has_alpha", area, has_alpha);
            }
            mh$.invokeExact(area, has_alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_has_depth_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_has_depth_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_depth_buffer(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_has_depth_buffer$descriptor() {
        return gtk_gl_area_get_has_depth_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_depth_buffer(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_get_has_depth_buffer$handle() {
        return gtk_gl_area_get_has_depth_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_depth_buffer(GtkGLArea *area)
     * }
     */
    public static int gtk_gl_area_get_has_depth_buffer(MemorySegment area) {
        var mh$ = gtk_gl_area_get_has_depth_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_has_depth_buffer", area);
            }
            return (int)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_set_has_depth_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_set_has_depth_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_depth_buffer(GtkGLArea *area, gboolean has_depth_buffer)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_set_has_depth_buffer$descriptor() {
        return gtk_gl_area_set_has_depth_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_depth_buffer(GtkGLArea *area, gboolean has_depth_buffer)
     * }
     */
    public static MethodHandle gtk_gl_area_set_has_depth_buffer$handle() {
        return gtk_gl_area_set_has_depth_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_depth_buffer(GtkGLArea *area, gboolean has_depth_buffer)
     * }
     */
    public static void gtk_gl_area_set_has_depth_buffer(MemorySegment area, int has_depth_buffer) {
        var mh$ = gtk_gl_area_set_has_depth_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_set_has_depth_buffer", area, has_depth_buffer);
            }
            mh$.invokeExact(area, has_depth_buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_has_stencil_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_has_stencil_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_stencil_buffer(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_has_stencil_buffer$descriptor() {
        return gtk_gl_area_get_has_stencil_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_stencil_buffer(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_get_has_stencil_buffer$handle() {
        return gtk_gl_area_get_has_stencil_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_has_stencil_buffer(GtkGLArea *area)
     * }
     */
    public static int gtk_gl_area_get_has_stencil_buffer(MemorySegment area) {
        var mh$ = gtk_gl_area_get_has_stencil_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_has_stencil_buffer", area);
            }
            return (int)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_set_has_stencil_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_set_has_stencil_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_stencil_buffer(GtkGLArea *area, gboolean has_stencil_buffer)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_set_has_stencil_buffer$descriptor() {
        return gtk_gl_area_set_has_stencil_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_stencil_buffer(GtkGLArea *area, gboolean has_stencil_buffer)
     * }
     */
    public static MethodHandle gtk_gl_area_set_has_stencil_buffer$handle() {
        return gtk_gl_area_set_has_stencil_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_has_stencil_buffer(GtkGLArea *area, gboolean has_stencil_buffer)
     * }
     */
    public static void gtk_gl_area_set_has_stencil_buffer(MemorySegment area, int has_stencil_buffer) {
        var mh$ = gtk_gl_area_set_has_stencil_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_set_has_stencil_buffer", area, has_stencil_buffer);
            }
            mh$.invokeExact(area, has_stencil_buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_auto_render {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_auto_render"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_auto_render(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_auto_render$descriptor() {
        return gtk_gl_area_get_auto_render.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_auto_render(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_get_auto_render$handle() {
        return gtk_gl_area_get_auto_render.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gl_area_get_auto_render(GtkGLArea *area)
     * }
     */
    public static int gtk_gl_area_get_auto_render(MemorySegment area) {
        var mh$ = gtk_gl_area_get_auto_render.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_auto_render", area);
            }
            return (int)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_set_auto_render {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_set_auto_render"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_auto_render(GtkGLArea *area, gboolean auto_render)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_set_auto_render$descriptor() {
        return gtk_gl_area_set_auto_render.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_auto_render(GtkGLArea *area, gboolean auto_render)
     * }
     */
    public static MethodHandle gtk_gl_area_set_auto_render$handle() {
        return gtk_gl_area_set_auto_render.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_auto_render(GtkGLArea *area, gboolean auto_render)
     * }
     */
    public static void gtk_gl_area_set_auto_render(MemorySegment area, int auto_render) {
        var mh$ = gtk_gl_area_set_auto_render.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_set_auto_render", area, auto_render);
            }
            mh$.invokeExact(area, auto_render);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_queue_render {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_queue_render"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_queue_render(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_queue_render$descriptor() {
        return gtk_gl_area_queue_render.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_queue_render(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_queue_render$handle() {
        return gtk_gl_area_queue_render.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_queue_render(GtkGLArea *area)
     * }
     */
    public static void gtk_gl_area_queue_render(MemorySegment area) {
        var mh$ = gtk_gl_area_queue_render.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_queue_render", area);
            }
            mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGLContext *gtk_gl_area_get_context(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_context$descriptor() {
        return gtk_gl_area_get_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGLContext *gtk_gl_area_get_context(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_get_context$handle() {
        return gtk_gl_area_get_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGLContext *gtk_gl_area_get_context(GtkGLArea *area)
     * }
     */
    public static MemorySegment gtk_gl_area_get_context(MemorySegment area) {
        var mh$ = gtk_gl_area_get_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_context", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_make_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_make_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_make_current(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_make_current$descriptor() {
        return gtk_gl_area_make_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_make_current(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_make_current$handle() {
        return gtk_gl_area_make_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_make_current(GtkGLArea *area)
     * }
     */
    public static void gtk_gl_area_make_current(MemorySegment area) {
        var mh$ = gtk_gl_area_make_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_make_current", area);
            }
            mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_attach_buffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_attach_buffers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_attach_buffers(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_attach_buffers$descriptor() {
        return gtk_gl_area_attach_buffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_attach_buffers(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_attach_buffers$handle() {
        return gtk_gl_area_attach_buffers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_attach_buffers(GtkGLArea *area)
     * }
     */
    public static void gtk_gl_area_attach_buffers(MemorySegment area) {
        var mh$ = gtk_gl_area_attach_buffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_attach_buffers", area);
            }
            mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_set_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_set_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_error(GtkGLArea *area, const GError *error)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_set_error$descriptor() {
        return gtk_gl_area_set_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_error(GtkGLArea *area, const GError *error)
     * }
     */
    public static MethodHandle gtk_gl_area_set_error$handle() {
        return gtk_gl_area_set_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gl_area_set_error(GtkGLArea *area, const GError *error)
     * }
     */
    public static void gtk_gl_area_set_error(MemorySegment area, MemorySegment error) {
        var mh$ = gtk_gl_area_set_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_set_error", area, error);
            }
            mh$.invokeExact(area, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gl_area_get_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gl_area_get_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GError *gtk_gl_area_get_error(GtkGLArea *area)
     * }
     */
    public static FunctionDescriptor gtk_gl_area_get_error$descriptor() {
        return gtk_gl_area_get_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GError *gtk_gl_area_get_error(GtkGLArea *area)
     * }
     */
    public static MethodHandle gtk_gl_area_get_error$handle() {
        return gtk_gl_area_get_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GError *gtk_gl_area_get_error(GtkGLArea *area)
     * }
     */
    public static MemorySegment gtk_gl_area_get_error(MemorySegment area) {
        var mh$ = gtk_gl_area_get_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gl_area_get_error", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_grid_get_type()
     * }
     */
    public static FunctionDescriptor gtk_grid_get_type$descriptor() {
        return gtk_grid_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_grid_get_type()
     * }
     */
    public static MethodHandle gtk_grid_get_type$handle() {
        return gtk_grid_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_grid_get_type()
     * }
     */
    public static long gtk_grid_get_type() {
        var mh$ = gtk_grid_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grid_new()
     * }
     */
    public static FunctionDescriptor gtk_grid_new$descriptor() {
        return gtk_grid_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grid_new()
     * }
     */
    public static MethodHandle gtk_grid_new$handle() {
        return gtk_grid_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grid_new()
     * }
     */
    public static MemorySegment gtk_grid_new() {
        var mh$ = gtk_grid_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_attach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_attach(GtkGrid *grid, GtkWidget *child, gint left, gint top, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_grid_attach$descriptor() {
        return gtk_grid_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_attach(GtkGrid *grid, GtkWidget *child, gint left, gint top, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_grid_attach$handle() {
        return gtk_grid_attach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_attach(GtkGrid *grid, GtkWidget *child, gint left, gint top, gint width, gint height)
     * }
     */
    public static void gtk_grid_attach(MemorySegment grid, MemorySegment child, int left, int top, int width, int height) {
        var mh$ = gtk_grid_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_attach", grid, child, left, top, width, height);
            }
            mh$.invokeExact(grid, child, left, top, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_attach_next_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_attach_next_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_attach_next_to(GtkGrid *grid, GtkWidget *child, GtkWidget *sibling, GtkPositionType side, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_grid_attach_next_to$descriptor() {
        return gtk_grid_attach_next_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_attach_next_to(GtkGrid *grid, GtkWidget *child, GtkWidget *sibling, GtkPositionType side, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_grid_attach_next_to$handle() {
        return gtk_grid_attach_next_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_attach_next_to(GtkGrid *grid, GtkWidget *child, GtkWidget *sibling, GtkPositionType side, gint width, gint height)
     * }
     */
    public static void gtk_grid_attach_next_to(MemorySegment grid, MemorySegment child, MemorySegment sibling, int side, int width, int height) {
        var mh$ = gtk_grid_attach_next_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_attach_next_to", grid, child, sibling, side, width, height);
            }
            mh$.invokeExact(grid, child, sibling, side, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_child_at {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_child_at"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grid_get_child_at(GtkGrid *grid, gint left, gint top)
     * }
     */
    public static FunctionDescriptor gtk_grid_get_child_at$descriptor() {
        return gtk_grid_get_child_at.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grid_get_child_at(GtkGrid *grid, gint left, gint top)
     * }
     */
    public static MethodHandle gtk_grid_get_child_at$handle() {
        return gtk_grid_get_child_at.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grid_get_child_at(GtkGrid *grid, gint left, gint top)
     * }
     */
    public static MemorySegment gtk_grid_get_child_at(MemorySegment grid, int left, int top) {
        var mh$ = gtk_grid_get_child_at.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_child_at", grid, left, top);
            }
            return (MemorySegment)mh$.invokeExact(grid, left, top);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_insert_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_insert_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_insert_row(GtkGrid *grid, gint position)
     * }
     */
    public static FunctionDescriptor gtk_grid_insert_row$descriptor() {
        return gtk_grid_insert_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_insert_row(GtkGrid *grid, gint position)
     * }
     */
    public static MethodHandle gtk_grid_insert_row$handle() {
        return gtk_grid_insert_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_insert_row(GtkGrid *grid, gint position)
     * }
     */
    public static void gtk_grid_insert_row(MemorySegment grid, int position) {
        var mh$ = gtk_grid_insert_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_insert_row", grid, position);
            }
            mh$.invokeExact(grid, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_insert_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_insert_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_insert_column(GtkGrid *grid, gint position)
     * }
     */
    public static FunctionDescriptor gtk_grid_insert_column$descriptor() {
        return gtk_grid_insert_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_insert_column(GtkGrid *grid, gint position)
     * }
     */
    public static MethodHandle gtk_grid_insert_column$handle() {
        return gtk_grid_insert_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_insert_column(GtkGrid *grid, gint position)
     * }
     */
    public static void gtk_grid_insert_column(MemorySegment grid, int position) {
        var mh$ = gtk_grid_insert_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_insert_column", grid, position);
            }
            mh$.invokeExact(grid, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_remove_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_remove_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_remove_row(GtkGrid *grid, gint position)
     * }
     */
    public static FunctionDescriptor gtk_grid_remove_row$descriptor() {
        return gtk_grid_remove_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_remove_row(GtkGrid *grid, gint position)
     * }
     */
    public static MethodHandle gtk_grid_remove_row$handle() {
        return gtk_grid_remove_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_remove_row(GtkGrid *grid, gint position)
     * }
     */
    public static void gtk_grid_remove_row(MemorySegment grid, int position) {
        var mh$ = gtk_grid_remove_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_remove_row", grid, position);
            }
            mh$.invokeExact(grid, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_remove_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_remove_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_remove_column(GtkGrid *grid, gint position)
     * }
     */
    public static FunctionDescriptor gtk_grid_remove_column$descriptor() {
        return gtk_grid_remove_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_remove_column(GtkGrid *grid, gint position)
     * }
     */
    public static MethodHandle gtk_grid_remove_column$handle() {
        return gtk_grid_remove_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_remove_column(GtkGrid *grid, gint position)
     * }
     */
    public static void gtk_grid_remove_column(MemorySegment grid, int position) {
        var mh$ = gtk_grid_remove_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_remove_column", grid, position);
            }
            mh$.invokeExact(grid, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_insert_next_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_insert_next_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_insert_next_to(GtkGrid *grid, GtkWidget *sibling, GtkPositionType side)
     * }
     */
    public static FunctionDescriptor gtk_grid_insert_next_to$descriptor() {
        return gtk_grid_insert_next_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_insert_next_to(GtkGrid *grid, GtkWidget *sibling, GtkPositionType side)
     * }
     */
    public static MethodHandle gtk_grid_insert_next_to$handle() {
        return gtk_grid_insert_next_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_insert_next_to(GtkGrid *grid, GtkWidget *sibling, GtkPositionType side)
     * }
     */
    public static void gtk_grid_insert_next_to(MemorySegment grid, MemorySegment sibling, int side) {
        var mh$ = gtk_grid_insert_next_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_insert_next_to", grid, sibling, side);
            }
            mh$.invokeExact(grid, sibling, side);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_set_row_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_set_row_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_homogeneous(GtkGrid *grid, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_grid_set_row_homogeneous$descriptor() {
        return gtk_grid_set_row_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_homogeneous(GtkGrid *grid, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_grid_set_row_homogeneous$handle() {
        return gtk_grid_set_row_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_homogeneous(GtkGrid *grid, gboolean homogeneous)
     * }
     */
    public static void gtk_grid_set_row_homogeneous(MemorySegment grid, int homogeneous) {
        var mh$ = gtk_grid_set_row_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_set_row_homogeneous", grid, homogeneous);
            }
            mh$.invokeExact(grid, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_row_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_row_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_grid_get_row_homogeneous(GtkGrid *grid)
     * }
     */
    public static FunctionDescriptor gtk_grid_get_row_homogeneous$descriptor() {
        return gtk_grid_get_row_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_grid_get_row_homogeneous(GtkGrid *grid)
     * }
     */
    public static MethodHandle gtk_grid_get_row_homogeneous$handle() {
        return gtk_grid_get_row_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_grid_get_row_homogeneous(GtkGrid *grid)
     * }
     */
    public static int gtk_grid_get_row_homogeneous(MemorySegment grid) {
        var mh$ = gtk_grid_get_row_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_row_homogeneous", grid);
            }
            return (int)mh$.invokeExact(grid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_set_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_set_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_spacing(GtkGrid *grid, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_grid_set_row_spacing$descriptor() {
        return gtk_grid_set_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_spacing(GtkGrid *grid, guint spacing)
     * }
     */
    public static MethodHandle gtk_grid_set_row_spacing$handle() {
        return gtk_grid_set_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_spacing(GtkGrid *grid, guint spacing)
     * }
     */
    public static void gtk_grid_set_row_spacing(MemorySegment grid, int spacing) {
        var mh$ = gtk_grid_set_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_set_row_spacing", grid, spacing);
            }
            mh$.invokeExact(grid, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_grid_get_row_spacing(GtkGrid *grid)
     * }
     */
    public static FunctionDescriptor gtk_grid_get_row_spacing$descriptor() {
        return gtk_grid_get_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_grid_get_row_spacing(GtkGrid *grid)
     * }
     */
    public static MethodHandle gtk_grid_get_row_spacing$handle() {
        return gtk_grid_get_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_grid_get_row_spacing(GtkGrid *grid)
     * }
     */
    public static int gtk_grid_get_row_spacing(MemorySegment grid) {
        var mh$ = gtk_grid_get_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_row_spacing", grid);
            }
            return (int)mh$.invokeExact(grid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_set_column_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_set_column_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_column_homogeneous(GtkGrid *grid, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_grid_set_column_homogeneous$descriptor() {
        return gtk_grid_set_column_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_column_homogeneous(GtkGrid *grid, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_grid_set_column_homogeneous$handle() {
        return gtk_grid_set_column_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_set_column_homogeneous(GtkGrid *grid, gboolean homogeneous)
     * }
     */
    public static void gtk_grid_set_column_homogeneous(MemorySegment grid, int homogeneous) {
        var mh$ = gtk_grid_set_column_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_set_column_homogeneous", grid, homogeneous);
            }
            mh$.invokeExact(grid, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_column_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_column_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_grid_get_column_homogeneous(GtkGrid *grid)
     * }
     */
    public static FunctionDescriptor gtk_grid_get_column_homogeneous$descriptor() {
        return gtk_grid_get_column_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_grid_get_column_homogeneous(GtkGrid *grid)
     * }
     */
    public static MethodHandle gtk_grid_get_column_homogeneous$handle() {
        return gtk_grid_get_column_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_grid_get_column_homogeneous(GtkGrid *grid)
     * }
     */
    public static int gtk_grid_get_column_homogeneous(MemorySegment grid) {
        var mh$ = gtk_grid_get_column_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_column_homogeneous", grid);
            }
            return (int)mh$.invokeExact(grid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_set_column_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_set_column_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_column_spacing(GtkGrid *grid, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_grid_set_column_spacing$descriptor() {
        return gtk_grid_set_column_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_column_spacing(GtkGrid *grid, guint spacing)
     * }
     */
    public static MethodHandle gtk_grid_set_column_spacing$handle() {
        return gtk_grid_set_column_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_set_column_spacing(GtkGrid *grid, guint spacing)
     * }
     */
    public static void gtk_grid_set_column_spacing(MemorySegment grid, int spacing) {
        var mh$ = gtk_grid_set_column_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_set_column_spacing", grid, spacing);
            }
            mh$.invokeExact(grid, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_column_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_column_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_grid_get_column_spacing(GtkGrid *grid)
     * }
     */
    public static FunctionDescriptor gtk_grid_get_column_spacing$descriptor() {
        return gtk_grid_get_column_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_grid_get_column_spacing(GtkGrid *grid)
     * }
     */
    public static MethodHandle gtk_grid_get_column_spacing$handle() {
        return gtk_grid_get_column_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_grid_get_column_spacing(GtkGrid *grid)
     * }
     */
    public static int gtk_grid_get_column_spacing(MemorySegment grid) {
        var mh$ = gtk_grid_get_column_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_column_spacing", grid);
            }
            return (int)mh$.invokeExact(grid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_set_row_baseline_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_set_row_baseline_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_baseline_position(GtkGrid *grid, gint row, GtkBaselinePosition pos)
     * }
     */
    public static FunctionDescriptor gtk_grid_set_row_baseline_position$descriptor() {
        return gtk_grid_set_row_baseline_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_baseline_position(GtkGrid *grid, gint row, GtkBaselinePosition pos)
     * }
     */
    public static MethodHandle gtk_grid_set_row_baseline_position$handle() {
        return gtk_grid_set_row_baseline_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_set_row_baseline_position(GtkGrid *grid, gint row, GtkBaselinePosition pos)
     * }
     */
    public static void gtk_grid_set_row_baseline_position(MemorySegment grid, int row, int pos) {
        var mh$ = gtk_grid_set_row_baseline_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_set_row_baseline_position", grid, row, pos);
            }
            mh$.invokeExact(grid, row, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_row_baseline_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_row_baseline_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBaselinePosition gtk_grid_get_row_baseline_position(GtkGrid *grid, gint row)
     * }
     */
    public static FunctionDescriptor gtk_grid_get_row_baseline_position$descriptor() {
        return gtk_grid_get_row_baseline_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBaselinePosition gtk_grid_get_row_baseline_position(GtkGrid *grid, gint row)
     * }
     */
    public static MethodHandle gtk_grid_get_row_baseline_position$handle() {
        return gtk_grid_get_row_baseline_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBaselinePosition gtk_grid_get_row_baseline_position(GtkGrid *grid, gint row)
     * }
     */
    public static int gtk_grid_get_row_baseline_position(MemorySegment grid, int row) {
        var mh$ = gtk_grid_get_row_baseline_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_row_baseline_position", grid, row);
            }
            return (int)mh$.invokeExact(grid, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_set_baseline_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_set_baseline_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_baseline_row(GtkGrid *grid, gint row)
     * }
     */
    public static FunctionDescriptor gtk_grid_set_baseline_row$descriptor() {
        return gtk_grid_set_baseline_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grid_set_baseline_row(GtkGrid *grid, gint row)
     * }
     */
    public static MethodHandle gtk_grid_set_baseline_row$handle() {
        return gtk_grid_set_baseline_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grid_set_baseline_row(GtkGrid *grid, gint row)
     * }
     */
    public static void gtk_grid_set_baseline_row(MemorySegment grid, int row) {
        var mh$ = gtk_grid_set_baseline_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_set_baseline_row", grid, row);
            }
            mh$.invokeExact(grid, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grid_get_baseline_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grid_get_baseline_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_grid_get_baseline_row(GtkGrid *grid)
     * }
     */
    public static FunctionDescriptor gtk_grid_get_baseline_row$descriptor() {
        return gtk_grid_get_baseline_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_grid_get_baseline_row(GtkGrid *grid)
     * }
     */
    public static MethodHandle gtk_grid_get_baseline_row$handle() {
        return gtk_grid_get_baseline_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_grid_get_baseline_row(GtkGrid *grid)
     * }
     */
    public static int gtk_grid_get_baseline_row(MemorySegment grid) {
        var mh$ = gtk_grid_get_baseline_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grid_get_baseline_row", grid);
            }
            return (int)mh$.invokeExact(grid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_header_bar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_header_bar_get_type$descriptor() {
        return gtk_header_bar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_header_bar_get_type()
     * }
     */
    public static MethodHandle gtk_header_bar_get_type$handle() {
        return gtk_header_bar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_header_bar_get_type()
     * }
     */
    public static long gtk_header_bar_get_type() {
        var mh$ = gtk_header_bar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_header_bar_new()
     * }
     */
    public static FunctionDescriptor gtk_header_bar_new$descriptor() {
        return gtk_header_bar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_header_bar_new()
     * }
     */
    public static MethodHandle gtk_header_bar_new$handle() {
        return gtk_header_bar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_header_bar_new()
     * }
     */
    public static MemorySegment gtk_header_bar_new() {
        var mh$ = gtk_header_bar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_title(GtkHeaderBar *bar, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_set_title$descriptor() {
        return gtk_header_bar_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_title(GtkHeaderBar *bar, const gchar *title)
     * }
     */
    public static MethodHandle gtk_header_bar_set_title$handle() {
        return gtk_header_bar_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_title(GtkHeaderBar *bar, const gchar *title)
     * }
     */
    public static void gtk_header_bar_set_title(MemorySegment bar, MemorySegment title) {
        var mh$ = gtk_header_bar_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_set_title", bar, title);
            }
            mh$.invokeExact(bar, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_title(GtkHeaderBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_get_title$descriptor() {
        return gtk_header_bar_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_title(GtkHeaderBar *bar)
     * }
     */
    public static MethodHandle gtk_header_bar_get_title$handle() {
        return gtk_header_bar_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_title(GtkHeaderBar *bar)
     * }
     */
    public static MemorySegment gtk_header_bar_get_title(MemorySegment bar) {
        var mh$ = gtk_header_bar_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_get_title", bar);
            }
            return (MemorySegment)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_set_subtitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_set_subtitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_subtitle(GtkHeaderBar *bar, const gchar *subtitle)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_set_subtitle$descriptor() {
        return gtk_header_bar_set_subtitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_subtitle(GtkHeaderBar *bar, const gchar *subtitle)
     * }
     */
    public static MethodHandle gtk_header_bar_set_subtitle$handle() {
        return gtk_header_bar_set_subtitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_subtitle(GtkHeaderBar *bar, const gchar *subtitle)
     * }
     */
    public static void gtk_header_bar_set_subtitle(MemorySegment bar, MemorySegment subtitle) {
        var mh$ = gtk_header_bar_set_subtitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_set_subtitle", bar, subtitle);
            }
            mh$.invokeExact(bar, subtitle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_get_subtitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_get_subtitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_subtitle(GtkHeaderBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_get_subtitle$descriptor() {
        return gtk_header_bar_get_subtitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_subtitle(GtkHeaderBar *bar)
     * }
     */
    public static MethodHandle gtk_header_bar_get_subtitle$handle() {
        return gtk_header_bar_get_subtitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_subtitle(GtkHeaderBar *bar)
     * }
     */
    public static MemorySegment gtk_header_bar_get_subtitle(MemorySegment bar) {
        var mh$ = gtk_header_bar_get_subtitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_get_subtitle", bar);
            }
            return (MemorySegment)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_set_custom_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_set_custom_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_custom_title(GtkHeaderBar *bar, GtkWidget *title_widget)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_set_custom_title$descriptor() {
        return gtk_header_bar_set_custom_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_custom_title(GtkHeaderBar *bar, GtkWidget *title_widget)
     * }
     */
    public static MethodHandle gtk_header_bar_set_custom_title$handle() {
        return gtk_header_bar_set_custom_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_custom_title(GtkHeaderBar *bar, GtkWidget *title_widget)
     * }
     */
    public static void gtk_header_bar_set_custom_title(MemorySegment bar, MemorySegment title_widget) {
        var mh$ = gtk_header_bar_set_custom_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_set_custom_title", bar, title_widget);
            }
            mh$.invokeExact(bar, title_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_get_custom_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_get_custom_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_header_bar_get_custom_title(GtkHeaderBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_get_custom_title$descriptor() {
        return gtk_header_bar_get_custom_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_header_bar_get_custom_title(GtkHeaderBar *bar)
     * }
     */
    public static MethodHandle gtk_header_bar_get_custom_title$handle() {
        return gtk_header_bar_get_custom_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_header_bar_get_custom_title(GtkHeaderBar *bar)
     * }
     */
    public static MemorySegment gtk_header_bar_get_custom_title(MemorySegment bar) {
        var mh$ = gtk_header_bar_get_custom_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_get_custom_title", bar);
            }
            return (MemorySegment)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_pack_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_pack_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_pack_start(GtkHeaderBar *bar, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_pack_start$descriptor() {
        return gtk_header_bar_pack_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_pack_start(GtkHeaderBar *bar, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_header_bar_pack_start$handle() {
        return gtk_header_bar_pack_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_pack_start(GtkHeaderBar *bar, GtkWidget *child)
     * }
     */
    public static void gtk_header_bar_pack_start(MemorySegment bar, MemorySegment child) {
        var mh$ = gtk_header_bar_pack_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_pack_start", bar, child);
            }
            mh$.invokeExact(bar, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_pack_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_pack_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_pack_end(GtkHeaderBar *bar, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_pack_end$descriptor() {
        return gtk_header_bar_pack_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_pack_end(GtkHeaderBar *bar, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_header_bar_pack_end$handle() {
        return gtk_header_bar_pack_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_pack_end(GtkHeaderBar *bar, GtkWidget *child)
     * }
     */
    public static void gtk_header_bar_pack_end(MemorySegment bar, MemorySegment child) {
        var mh$ = gtk_header_bar_pack_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_pack_end", bar, child);
            }
            mh$.invokeExact(bar, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_get_show_close_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_get_show_close_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_header_bar_get_show_close_button(GtkHeaderBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_get_show_close_button$descriptor() {
        return gtk_header_bar_get_show_close_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_header_bar_get_show_close_button(GtkHeaderBar *bar)
     * }
     */
    public static MethodHandle gtk_header_bar_get_show_close_button$handle() {
        return gtk_header_bar_get_show_close_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_header_bar_get_show_close_button(GtkHeaderBar *bar)
     * }
     */
    public static int gtk_header_bar_get_show_close_button(MemorySegment bar) {
        var mh$ = gtk_header_bar_get_show_close_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_get_show_close_button", bar);
            }
            return (int)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_set_show_close_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_set_show_close_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_show_close_button(GtkHeaderBar *bar, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_set_show_close_button$descriptor() {
        return gtk_header_bar_set_show_close_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_show_close_button(GtkHeaderBar *bar, gboolean setting)
     * }
     */
    public static MethodHandle gtk_header_bar_set_show_close_button$handle() {
        return gtk_header_bar_set_show_close_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_show_close_button(GtkHeaderBar *bar, gboolean setting)
     * }
     */
    public static void gtk_header_bar_set_show_close_button(MemorySegment bar, int setting) {
        var mh$ = gtk_header_bar_set_show_close_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_set_show_close_button", bar, setting);
            }
            mh$.invokeExact(bar, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_set_has_subtitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_set_has_subtitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_has_subtitle(GtkHeaderBar *bar, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_set_has_subtitle$descriptor() {
        return gtk_header_bar_set_has_subtitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_has_subtitle(GtkHeaderBar *bar, gboolean setting)
     * }
     */
    public static MethodHandle gtk_header_bar_set_has_subtitle$handle() {
        return gtk_header_bar_set_has_subtitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_has_subtitle(GtkHeaderBar *bar, gboolean setting)
     * }
     */
    public static void gtk_header_bar_set_has_subtitle(MemorySegment bar, int setting) {
        var mh$ = gtk_header_bar_set_has_subtitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_set_has_subtitle", bar, setting);
            }
            mh$.invokeExact(bar, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_get_has_subtitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_get_has_subtitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_header_bar_get_has_subtitle(GtkHeaderBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_get_has_subtitle$descriptor() {
        return gtk_header_bar_get_has_subtitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_header_bar_get_has_subtitle(GtkHeaderBar *bar)
     * }
     */
    public static MethodHandle gtk_header_bar_get_has_subtitle$handle() {
        return gtk_header_bar_get_has_subtitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_header_bar_get_has_subtitle(GtkHeaderBar *bar)
     * }
     */
    public static int gtk_header_bar_get_has_subtitle(MemorySegment bar) {
        var mh$ = gtk_header_bar_get_has_subtitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_get_has_subtitle", bar);
            }
            return (int)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_set_decoration_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_set_decoration_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_decoration_layout(GtkHeaderBar *bar, const gchar *layout)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_set_decoration_layout$descriptor() {
        return gtk_header_bar_set_decoration_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_decoration_layout(GtkHeaderBar *bar, const gchar *layout)
     * }
     */
    public static MethodHandle gtk_header_bar_set_decoration_layout$handle() {
        return gtk_header_bar_set_decoration_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_header_bar_set_decoration_layout(GtkHeaderBar *bar, const gchar *layout)
     * }
     */
    public static void gtk_header_bar_set_decoration_layout(MemorySegment bar, MemorySegment layout) {
        var mh$ = gtk_header_bar_set_decoration_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_set_decoration_layout", bar, layout);
            }
            mh$.invokeExact(bar, layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_header_bar_get_decoration_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_header_bar_get_decoration_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_decoration_layout(GtkHeaderBar *bar)
     * }
     */
    public static FunctionDescriptor gtk_header_bar_get_decoration_layout$descriptor() {
        return gtk_header_bar_get_decoration_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_decoration_layout(GtkHeaderBar *bar)
     * }
     */
    public static MethodHandle gtk_header_bar_get_decoration_layout$handle() {
        return gtk_header_bar_get_decoration_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_header_bar_get_decoration_layout(GtkHeaderBar *bar)
     * }
     */
    public static MemorySegment gtk_header_bar_get_decoration_layout(MemorySegment bar) {
        var mh$ = gtk_header_bar_get_decoration_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_header_bar_get_decoration_layout", bar);
            }
            return (MemorySegment)mh$.invokeExact(bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_factory_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_factory_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_factory_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_factory_get_type$descriptor() {
        return gtk_icon_factory_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_factory_get_type()
     * }
     */
    public static MethodHandle gtk_icon_factory_get_type$handle() {
        return gtk_icon_factory_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_factory_get_type()
     * }
     */
    public static long gtk_icon_factory_get_type() {
        var mh$ = gtk_icon_factory_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_factory_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_factory_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_factory_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconFactory *gtk_icon_factory_new()
     * }
     */
    public static FunctionDescriptor gtk_icon_factory_new$descriptor() {
        return gtk_icon_factory_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconFactory *gtk_icon_factory_new()
     * }
     */
    public static MethodHandle gtk_icon_factory_new$handle() {
        return gtk_icon_factory_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconFactory *gtk_icon_factory_new()
     * }
     */
    public static MemorySegment gtk_icon_factory_new() {
        var mh$ = gtk_icon_factory_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_factory_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_factory_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_factory_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_factory_add(GtkIconFactory *factory, const gchar *stock_id, GtkIconSet *icon_set)
     * }
     */
    public static FunctionDescriptor gtk_icon_factory_add$descriptor() {
        return gtk_icon_factory_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_factory_add(GtkIconFactory *factory, const gchar *stock_id, GtkIconSet *icon_set)
     * }
     */
    public static MethodHandle gtk_icon_factory_add$handle() {
        return gtk_icon_factory_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_factory_add(GtkIconFactory *factory, const gchar *stock_id, GtkIconSet *icon_set)
     * }
     */
    public static void gtk_icon_factory_add(MemorySegment factory, MemorySegment stock_id, MemorySegment icon_set) {
        var mh$ = gtk_icon_factory_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_factory_add", factory, stock_id, icon_set);
            }
            mh$.invokeExact(factory, stock_id, icon_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_factory_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_factory_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_factory_lookup(GtkIconFactory *factory, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_icon_factory_lookup$descriptor() {
        return gtk_icon_factory_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_factory_lookup(GtkIconFactory *factory, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_icon_factory_lookup$handle() {
        return gtk_icon_factory_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_factory_lookup(GtkIconFactory *factory, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_icon_factory_lookup(MemorySegment factory, MemorySegment stock_id) {
        var mh$ = gtk_icon_factory_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_factory_lookup", factory, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(factory, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_factory_add_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_factory_add_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_factory_add_default(GtkIconFactory *factory)
     * }
     */
    public static FunctionDescriptor gtk_icon_factory_add_default$descriptor() {
        return gtk_icon_factory_add_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_factory_add_default(GtkIconFactory *factory)
     * }
     */
    public static MethodHandle gtk_icon_factory_add_default$handle() {
        return gtk_icon_factory_add_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_factory_add_default(GtkIconFactory *factory)
     * }
     */
    public static void gtk_icon_factory_add_default(MemorySegment factory) {
        var mh$ = gtk_icon_factory_add_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_factory_add_default", factory);
            }
            mh$.invokeExact(factory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_factory_remove_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_factory_remove_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_factory_remove_default(GtkIconFactory *factory)
     * }
     */
    public static FunctionDescriptor gtk_icon_factory_remove_default$descriptor() {
        return gtk_icon_factory_remove_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_factory_remove_default(GtkIconFactory *factory)
     * }
     */
    public static MethodHandle gtk_icon_factory_remove_default$handle() {
        return gtk_icon_factory_remove_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_factory_remove_default(GtkIconFactory *factory)
     * }
     */
    public static void gtk_icon_factory_remove_default(MemorySegment factory) {
        var mh$ = gtk_icon_factory_remove_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_factory_remove_default", factory);
            }
            mh$.invokeExact(factory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_factory_lookup_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_factory_lookup_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_factory_lookup_default(const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_icon_factory_lookup_default$descriptor() {
        return gtk_icon_factory_lookup_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_factory_lookup_default(const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_icon_factory_lookup_default$handle() {
        return gtk_icon_factory_lookup_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_factory_lookup_default(const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_icon_factory_lookup_default(MemorySegment stock_id) {
        var mh$ = gtk_icon_factory_lookup_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_factory_lookup_default", stock_id);
            }
            return (MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_size_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_size_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_size_lookup(GtkIconSize size, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_icon_size_lookup$descriptor() {
        return gtk_icon_size_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_size_lookup(GtkIconSize size, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_icon_size_lookup$handle() {
        return gtk_icon_size_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_size_lookup(GtkIconSize size, gint *width, gint *height)
     * }
     */
    public static int gtk_icon_size_lookup(int size, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_icon_size_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_size_lookup", size, width, height);
            }
            return (int)mh$.invokeExact(size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_size_lookup_for_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_size_lookup_for_settings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_size_lookup_for_settings(GtkSettings *settings, GtkIconSize size, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_icon_size_lookup_for_settings$descriptor() {
        return gtk_icon_size_lookup_for_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_size_lookup_for_settings(GtkSettings *settings, GtkIconSize size, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_icon_size_lookup_for_settings$handle() {
        return gtk_icon_size_lookup_for_settings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_size_lookup_for_settings(GtkSettings *settings, GtkIconSize size, gint *width, gint *height)
     * }
     */
    public static int gtk_icon_size_lookup_for_settings(MemorySegment settings, int size, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_icon_size_lookup_for_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_size_lookup_for_settings", settings, size, width, height);
            }
            return (int)mh$.invokeExact(settings, size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_size_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_size_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_size_register(const gchar *name, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_icon_size_register$descriptor() {
        return gtk_icon_size_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_size_register(const gchar *name, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_icon_size_register$handle() {
        return gtk_icon_size_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_size_register(const gchar *name, gint width, gint height)
     * }
     */
    public static int gtk_icon_size_register(MemorySegment name, int width, int height) {
        var mh$ = gtk_icon_size_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_size_register", name, width, height);
            }
            return (int)mh$.invokeExact(name, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_size_register_alias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_size_register_alias"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_size_register_alias(const gchar *alias, GtkIconSize target)
     * }
     */
    public static FunctionDescriptor gtk_icon_size_register_alias$descriptor() {
        return gtk_icon_size_register_alias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_size_register_alias(const gchar *alias, GtkIconSize target)
     * }
     */
    public static MethodHandle gtk_icon_size_register_alias$handle() {
        return gtk_icon_size_register_alias.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_size_register_alias(const gchar *alias, GtkIconSize target)
     * }
     */
    public static void gtk_icon_size_register_alias(MemorySegment alias, int target) {
        var mh$ = gtk_icon_size_register_alias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_size_register_alias", alias, target);
            }
            mh$.invokeExact(alias, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_size_from_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_size_from_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_size_from_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_icon_size_from_name$descriptor() {
        return gtk_icon_size_from_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_size_from_name(const gchar *name)
     * }
     */
    public static MethodHandle gtk_icon_size_from_name$handle() {
        return gtk_icon_size_from_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_size_from_name(const gchar *name)
     * }
     */
    public static int gtk_icon_size_from_name(MemorySegment name) {
        var mh$ = gtk_icon_size_from_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_size_from_name", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_size_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_size_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_size_get_name(GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_icon_size_get_name$descriptor() {
        return gtk_icon_size_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_size_get_name(GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_icon_size_get_name$handle() {
        return gtk_icon_size_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_size_get_name(GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_icon_size_get_name(int size) {
        var mh$ = gtk_icon_size_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_size_get_name", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_set_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_set_get_type$descriptor() {
        return gtk_icon_set_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_set_get_type()
     * }
     */
    public static MethodHandle gtk_icon_set_get_type$handle() {
        return gtk_icon_set_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_set_get_type()
     * }
     */
    public static long gtk_icon_set_get_type() {
        var mh$ = gtk_icon_set_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_new()
     * }
     */
    public static FunctionDescriptor gtk_icon_set_new$descriptor() {
        return gtk_icon_set_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_new()
     * }
     */
    public static MethodHandle gtk_icon_set_new$handle() {
        return gtk_icon_set_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_new()
     * }
     */
    public static MemorySegment gtk_icon_set_new() {
        var mh$ = gtk_icon_set_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_new_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_new_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_new_from_pixbuf$descriptor() {
        return gtk_icon_set_new_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_icon_set_new_from_pixbuf$handle() {
        return gtk_icon_set_new_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gtk_icon_set_new_from_pixbuf(MemorySegment pixbuf) {
        var mh$ = gtk_icon_set_new_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_new_from_pixbuf", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_ref(GtkIconSet *icon_set)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_ref$descriptor() {
        return gtk_icon_set_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_ref(GtkIconSet *icon_set)
     * }
     */
    public static MethodHandle gtk_icon_set_ref$handle() {
        return gtk_icon_set_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_ref(GtkIconSet *icon_set)
     * }
     */
    public static MemorySegment gtk_icon_set_ref(MemorySegment icon_set) {
        var mh$ = gtk_icon_set_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_ref", icon_set);
            }
            return (MemorySegment)mh$.invokeExact(icon_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_set_unref(GtkIconSet *icon_set)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_unref$descriptor() {
        return gtk_icon_set_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_set_unref(GtkIconSet *icon_set)
     * }
     */
    public static MethodHandle gtk_icon_set_unref$handle() {
        return gtk_icon_set_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_set_unref(GtkIconSet *icon_set)
     * }
     */
    public static void gtk_icon_set_unref(MemorySegment icon_set) {
        var mh$ = gtk_icon_set_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_unref", icon_set);
            }
            mh$.invokeExact(icon_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_copy(GtkIconSet *icon_set)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_copy$descriptor() {
        return gtk_icon_set_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_copy(GtkIconSet *icon_set)
     * }
     */
    public static MethodHandle gtk_icon_set_copy$handle() {
        return gtk_icon_set_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_icon_set_copy(GtkIconSet *icon_set)
     * }
     */
    public static MemorySegment gtk_icon_set_copy(MemorySegment icon_set) {
        var mh$ = gtk_icon_set_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_copy", icon_set);
            }
            return (MemorySegment)mh$.invokeExact(icon_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_render_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_render_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_set_render_icon(GtkIconSet *icon_set, GtkStyle *style, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const gchar *detail)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_render_icon$descriptor() {
        return gtk_icon_set_render_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_set_render_icon(GtkIconSet *icon_set, GtkStyle *style, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const gchar *detail)
     * }
     */
    public static MethodHandle gtk_icon_set_render_icon$handle() {
        return gtk_icon_set_render_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_set_render_icon(GtkIconSet *icon_set, GtkStyle *style, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const gchar *detail)
     * }
     */
    public static MemorySegment gtk_icon_set_render_icon(MemorySegment icon_set, MemorySegment style, int direction, int state, int size, MemorySegment widget, MemorySegment detail) {
        var mh$ = gtk_icon_set_render_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_render_icon", icon_set, style, direction, state, size, widget, detail);
            }
            return (MemorySegment)mh$.invokeExact(icon_set, style, direction, state, size, widget, detail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_add_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_add_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_set_add_source(GtkIconSet *icon_set, const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_add_source$descriptor() {
        return gtk_icon_set_add_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_set_add_source(GtkIconSet *icon_set, const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_set_add_source$handle() {
        return gtk_icon_set_add_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_set_add_source(GtkIconSet *icon_set, const GtkIconSource *source)
     * }
     */
    public static void gtk_icon_set_add_source(MemorySegment icon_set, MemorySegment source) {
        var mh$ = gtk_icon_set_add_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_add_source", icon_set, source);
            }
            mh$.invokeExact(icon_set, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_get_sizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_get_sizes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_set_get_sizes(GtkIconSet *icon_set, GtkIconSize **sizes, gint *n_sizes)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_get_sizes$descriptor() {
        return gtk_icon_set_get_sizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_set_get_sizes(GtkIconSet *icon_set, GtkIconSize **sizes, gint *n_sizes)
     * }
     */
    public static MethodHandle gtk_icon_set_get_sizes$handle() {
        return gtk_icon_set_get_sizes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_set_get_sizes(GtkIconSet *icon_set, GtkIconSize **sizes, gint *n_sizes)
     * }
     */
    public static void gtk_icon_set_get_sizes(MemorySegment icon_set, MemorySegment sizes, MemorySegment n_sizes) {
        var mh$ = gtk_icon_set_get_sizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_get_sizes", icon_set, sizes, n_sizes);
            }
            mh$.invokeExact(icon_set, sizes, n_sizes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_source_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_type$descriptor() {
        return gtk_icon_source_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_source_get_type()
     * }
     */
    public static MethodHandle gtk_icon_source_get_type$handle() {
        return gtk_icon_source_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_source_get_type()
     * }
     */
    public static long gtk_icon_source_get_type() {
        var mh$ = gtk_icon_source_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSource *gtk_icon_source_new()
     * }
     */
    public static FunctionDescriptor gtk_icon_source_new$descriptor() {
        return gtk_icon_source_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSource *gtk_icon_source_new()
     * }
     */
    public static MethodHandle gtk_icon_source_new$handle() {
        return gtk_icon_source_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSource *gtk_icon_source_new()
     * }
     */
    public static MemorySegment gtk_icon_source_new() {
        var mh$ = gtk_icon_source_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSource *gtk_icon_source_copy(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_copy$descriptor() {
        return gtk_icon_source_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSource *gtk_icon_source_copy(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_copy$handle() {
        return gtk_icon_source_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSource *gtk_icon_source_copy(const GtkIconSource *source)
     * }
     */
    public static MemorySegment gtk_icon_source_copy(MemorySegment source) {
        var mh$ = gtk_icon_source_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_copy", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_free(GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_free$descriptor() {
        return gtk_icon_source_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_free(GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_free$handle() {
        return gtk_icon_source_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_free(GtkIconSource *source)
     * }
     */
    public static void gtk_icon_source_free(MemorySegment source) {
        var mh$ = gtk_icon_source_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_free", source);
            }
            mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_filename(GtkIconSource *source, const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_filename$descriptor() {
        return gtk_icon_source_set_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_filename(GtkIconSource *source, const gchar *filename)
     * }
     */
    public static MethodHandle gtk_icon_source_set_filename$handle() {
        return gtk_icon_source_set_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_filename(GtkIconSource *source, const gchar *filename)
     * }
     */
    public static void gtk_icon_source_set_filename(MemorySegment source, MemorySegment filename) {
        var mh$ = gtk_icon_source_set_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_filename", source, filename);
            }
            mh$.invokeExact(source, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_icon_name(GtkIconSource *source, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_icon_name$descriptor() {
        return gtk_icon_source_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_icon_name(GtkIconSource *source, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_icon_source_set_icon_name$handle() {
        return gtk_icon_source_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_icon_name(GtkIconSource *source, const gchar *icon_name)
     * }
     */
    public static void gtk_icon_source_set_icon_name(MemorySegment source, MemorySegment icon_name) {
        var mh$ = gtk_icon_source_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_icon_name", source, icon_name);
            }
            mh$.invokeExact(source, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_pixbuf(GtkIconSource *source, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_pixbuf$descriptor() {
        return gtk_icon_source_set_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_pixbuf(GtkIconSource *source, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_icon_source_set_pixbuf$handle() {
        return gtk_icon_source_set_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_pixbuf(GtkIconSource *source, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_icon_source_set_pixbuf(MemorySegment source, MemorySegment pixbuf) {
        var mh$ = gtk_icon_source_set_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_pixbuf", source, pixbuf);
            }
            mh$.invokeExact(source, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_source_get_filename(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_filename$descriptor() {
        return gtk_icon_source_get_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_source_get_filename(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_filename$handle() {
        return gtk_icon_source_get_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_source_get_filename(const GtkIconSource *source)
     * }
     */
    public static MemorySegment gtk_icon_source_get_filename(MemorySegment source) {
        var mh$ = gtk_icon_source_get_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_filename", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_source_get_icon_name(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_icon_name$descriptor() {
        return gtk_icon_source_get_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_source_get_icon_name(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_icon_name$handle() {
        return gtk_icon_source_get_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_source_get_icon_name(const GtkIconSource *source)
     * }
     */
    public static MemorySegment gtk_icon_source_get_icon_name(MemorySegment source) {
        var mh$ = gtk_icon_source_get_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_icon_name", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_source_get_pixbuf(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_pixbuf$descriptor() {
        return gtk_icon_source_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_source_get_pixbuf(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_pixbuf$handle() {
        return gtk_icon_source_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_source_get_pixbuf(const GtkIconSource *source)
     * }
     */
    public static MemorySegment gtk_icon_source_get_pixbuf(MemorySegment source) {
        var mh$ = gtk_icon_source_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_pixbuf", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_direction_wildcarded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_direction_wildcarded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_direction_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_direction_wildcarded$descriptor() {
        return gtk_icon_source_set_direction_wildcarded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_direction_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static MethodHandle gtk_icon_source_set_direction_wildcarded$handle() {
        return gtk_icon_source_set_direction_wildcarded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_direction_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static void gtk_icon_source_set_direction_wildcarded(MemorySegment source, int setting) {
        var mh$ = gtk_icon_source_set_direction_wildcarded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_direction_wildcarded", source, setting);
            }
            mh$.invokeExact(source, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_state_wildcarded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_state_wildcarded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_state_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_state_wildcarded$descriptor() {
        return gtk_icon_source_set_state_wildcarded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_state_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static MethodHandle gtk_icon_source_set_state_wildcarded$handle() {
        return gtk_icon_source_set_state_wildcarded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_state_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static void gtk_icon_source_set_state_wildcarded(MemorySegment source, int setting) {
        var mh$ = gtk_icon_source_set_state_wildcarded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_state_wildcarded", source, setting);
            }
            mh$.invokeExact(source, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_size_wildcarded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_size_wildcarded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_size_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_size_wildcarded$descriptor() {
        return gtk_icon_source_set_size_wildcarded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_size_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static MethodHandle gtk_icon_source_set_size_wildcarded$handle() {
        return gtk_icon_source_set_size_wildcarded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_size_wildcarded(GtkIconSource *source, gboolean setting)
     * }
     */
    public static void gtk_icon_source_set_size_wildcarded(MemorySegment source, int setting) {
        var mh$ = gtk_icon_source_set_size_wildcarded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_size_wildcarded", source, setting);
            }
            mh$.invokeExact(source, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_size_wildcarded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_size_wildcarded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_size_wildcarded(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_size_wildcarded$descriptor() {
        return gtk_icon_source_get_size_wildcarded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_size_wildcarded(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_size_wildcarded$handle() {
        return gtk_icon_source_get_size_wildcarded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_size_wildcarded(const GtkIconSource *source)
     * }
     */
    public static int gtk_icon_source_get_size_wildcarded(MemorySegment source) {
        var mh$ = gtk_icon_source_get_size_wildcarded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_size_wildcarded", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_state_wildcarded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_state_wildcarded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_state_wildcarded(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_state_wildcarded$descriptor() {
        return gtk_icon_source_get_state_wildcarded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_state_wildcarded(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_state_wildcarded$handle() {
        return gtk_icon_source_get_state_wildcarded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_state_wildcarded(const GtkIconSource *source)
     * }
     */
    public static int gtk_icon_source_get_state_wildcarded(MemorySegment source) {
        var mh$ = gtk_icon_source_get_state_wildcarded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_state_wildcarded", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_direction_wildcarded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_direction_wildcarded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_direction_wildcarded(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_direction_wildcarded$descriptor() {
        return gtk_icon_source_get_direction_wildcarded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_direction_wildcarded(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_direction_wildcarded$handle() {
        return gtk_icon_source_get_direction_wildcarded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_source_get_direction_wildcarded(const GtkIconSource *source)
     * }
     */
    public static int gtk_icon_source_get_direction_wildcarded(MemorySegment source) {
        var mh$ = gtk_icon_source_get_direction_wildcarded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_direction_wildcarded", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_direction(GtkIconSource *source, GtkTextDirection direction)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_direction$descriptor() {
        return gtk_icon_source_set_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_direction(GtkIconSource *source, GtkTextDirection direction)
     * }
     */
    public static MethodHandle gtk_icon_source_set_direction$handle() {
        return gtk_icon_source_set_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_direction(GtkIconSource *source, GtkTextDirection direction)
     * }
     */
    public static void gtk_icon_source_set_direction(MemorySegment source, int direction) {
        var mh$ = gtk_icon_source_set_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_direction", source, direction);
            }
            mh$.invokeExact(source, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_state(GtkIconSource *source, GtkStateType state)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_state$descriptor() {
        return gtk_icon_source_set_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_state(GtkIconSource *source, GtkStateType state)
     * }
     */
    public static MethodHandle gtk_icon_source_set_state$handle() {
        return gtk_icon_source_set_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_state(GtkIconSource *source, GtkStateType state)
     * }
     */
    public static void gtk_icon_source_set_state(MemorySegment source, int state) {
        var mh$ = gtk_icon_source_set_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_state", source, state);
            }
            mh$.invokeExact(source, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_size(GtkIconSource *source, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_set_size$descriptor() {
        return gtk_icon_source_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_size(GtkIconSource *source, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_icon_source_set_size$handle() {
        return gtk_icon_source_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_source_set_size(GtkIconSource *source, GtkIconSize size)
     * }
     */
    public static void gtk_icon_source_set_size(MemorySegment source, int size) {
        var mh$ = gtk_icon_source_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_set_size", source, size);
            }
            mh$.invokeExact(source, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_icon_source_get_direction(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_direction$descriptor() {
        return gtk_icon_source_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_icon_source_get_direction(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_direction$handle() {
        return gtk_icon_source_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_icon_source_get_direction(const GtkIconSource *source)
     * }
     */
    public static int gtk_icon_source_get_direction(MemorySegment source) {
        var mh$ = gtk_icon_source_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_direction", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStateType gtk_icon_source_get_state(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_state$descriptor() {
        return gtk_icon_source_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStateType gtk_icon_source_get_state(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_state$handle() {
        return gtk_icon_source_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStateType gtk_icon_source_get_state(const GtkIconSource *source)
     * }
     */
    public static int gtk_icon_source_get_state(MemorySegment source) {
        var mh$ = gtk_icon_source_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_state", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_source_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_source_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_source_get_size(const GtkIconSource *source)
     * }
     */
    public static FunctionDescriptor gtk_icon_source_get_size$descriptor() {
        return gtk_icon_source_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_source_get_size(const GtkIconSource *source)
     * }
     */
    public static MethodHandle gtk_icon_source_get_size$handle() {
        return gtk_icon_source_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSize gtk_icon_source_get_size(const GtkIconSource *source)
     * }
     */
    public static int gtk_icon_source_get_size(MemorySegment source) {
        var mh$ = gtk_icon_source_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_source_get_size", source);
            }
            return (int)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_style_properties_get_type()
     * }
     */
    public static FunctionDescriptor gtk_style_properties_get_type$descriptor() {
        return gtk_style_properties_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_style_properties_get_type()
     * }
     */
    public static MethodHandle gtk_style_properties_get_type$handle() {
        return gtk_style_properties_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_style_properties_get_type()
     * }
     */
    public static long gtk_style_properties_get_type() {
        var mh$ = gtk_style_properties_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_register_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_register_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_register_property(GtkStylePropertyParser parse_func, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_register_property$descriptor() {
        return gtk_style_properties_register_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_register_property(GtkStylePropertyParser parse_func, GParamSpec *pspec)
     * }
     */
    public static MethodHandle gtk_style_properties_register_property$handle() {
        return gtk_style_properties_register_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_properties_register_property(GtkStylePropertyParser parse_func, GParamSpec *pspec)
     * }
     */
    public static void gtk_style_properties_register_property(MemorySegment parse_func, MemorySegment pspec) {
        var mh$ = gtk_style_properties_register_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_register_property", parse_func, pspec);
            }
            mh$.invokeExact(parse_func, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_lookup_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_lookup_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_properties_lookup_property(const gchar *property_name, GtkStylePropertyParser *parse_func, GParamSpec **pspec)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_lookup_property$descriptor() {
        return gtk_style_properties_lookup_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_properties_lookup_property(const gchar *property_name, GtkStylePropertyParser *parse_func, GParamSpec **pspec)
     * }
     */
    public static MethodHandle gtk_style_properties_lookup_property$handle() {
        return gtk_style_properties_lookup_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_properties_lookup_property(const gchar *property_name, GtkStylePropertyParser *parse_func, GParamSpec **pspec)
     * }
     */
    public static int gtk_style_properties_lookup_property(MemorySegment property_name, MemorySegment parse_func, MemorySegment pspec) {
        var mh$ = gtk_style_properties_lookup_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_lookup_property", property_name, parse_func, pspec);
            }
            return (int)mh$.invokeExact(property_name, parse_func, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyleProperties *gtk_style_properties_new()
     * }
     */
    public static FunctionDescriptor gtk_style_properties_new$descriptor() {
        return gtk_style_properties_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyleProperties *gtk_style_properties_new()
     * }
     */
    public static MethodHandle gtk_style_properties_new$handle() {
        return gtk_style_properties_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyleProperties *gtk_style_properties_new()
     * }
     */
    public static MemorySegment gtk_style_properties_new() {
        var mh$ = gtk_style_properties_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_map_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_map_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_map_color(GtkStyleProperties *props, const gchar *name, GtkSymbolicColor *color)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_map_color$descriptor() {
        return gtk_style_properties_map_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_map_color(GtkStyleProperties *props, const gchar *name, GtkSymbolicColor *color)
     * }
     */
    public static MethodHandle gtk_style_properties_map_color$handle() {
        return gtk_style_properties_map_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_properties_map_color(GtkStyleProperties *props, const gchar *name, GtkSymbolicColor *color)
     * }
     */
    public static void gtk_style_properties_map_color(MemorySegment props, MemorySegment name, MemorySegment color) {
        var mh$ = gtk_style_properties_map_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_map_color", props, name, color);
            }
            mh$.invokeExact(props, name, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_lookup_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_lookup_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_style_properties_lookup_color(GtkStyleProperties *props, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_lookup_color$descriptor() {
        return gtk_style_properties_lookup_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_style_properties_lookup_color(GtkStyleProperties *props, const gchar *name)
     * }
     */
    public static MethodHandle gtk_style_properties_lookup_color$handle() {
        return gtk_style_properties_lookup_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_style_properties_lookup_color(GtkStyleProperties *props, const gchar *name)
     * }
     */
    public static MemorySegment gtk_style_properties_lookup_color(MemorySegment props, MemorySegment name) {
        var mh$ = gtk_style_properties_lookup_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_lookup_color", props, name);
            }
            return (MemorySegment)mh$.invokeExact(props, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_set_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_set_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_set_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state, const GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_set_property$descriptor() {
        return gtk_style_properties_set_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_set_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state, const GValue *value)
     * }
     */
    public static MethodHandle gtk_style_properties_set_property$handle() {
        return gtk_style_properties_set_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_properties_set_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state, const GValue *value)
     * }
     */
    public static void gtk_style_properties_set_property(MemorySegment props, MemorySegment property, int state, MemorySegment value) {
        var mh$ = gtk_style_properties_set_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_set_property", props, property, state, value);
            }
            mh$.invokeExact(props, property, state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_set(GtkStyleProperties *props, GtkStateFlags state, ...)
     * }
     */
    public static class gtk_style_properties_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_style_properties_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_style_properties_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_style_properties_set(GtkStyleProperties *props, GtkStateFlags state, ...)
         * }
         */
        public static gtk_style_properties_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_style_properties_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment props, int state, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_style_properties_set", props, state, x2);
                }
                spreader.invokeExact(props, state, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_style_properties_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_get_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_properties_get_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_get_property$descriptor() {
        return gtk_style_properties_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_properties_get_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static MethodHandle gtk_style_properties_get_property$handle() {
        return gtk_style_properties_get_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_properties_get_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static int gtk_style_properties_get_property(MemorySegment props, MemorySegment property, int state, MemorySegment value) {
        var mh$ = gtk_style_properties_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_get_property", props, property, state, value);
            }
            return (int)mh$.invokeExact(props, property, state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_get(GtkStyleProperties *props, GtkStateFlags state, ...)
     * }
     */
    public static class gtk_style_properties_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_style_properties_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_style_properties_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_style_properties_get(GtkStyleProperties *props, GtkStateFlags state, ...)
         * }
         */
        public static gtk_style_properties_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_style_properties_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment props, int state, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_style_properties_get", props, state, x2);
                }
                spreader.invokeExact(props, state, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_style_properties_unset_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_unset_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_unset_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_unset_property$descriptor() {
        return gtk_style_properties_unset_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_unset_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state)
     * }
     */
    public static MethodHandle gtk_style_properties_unset_property$handle() {
        return gtk_style_properties_unset_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_properties_unset_property(GtkStyleProperties *props, const gchar *property, GtkStateFlags state)
     * }
     */
    public static void gtk_style_properties_unset_property(MemorySegment props, MemorySegment property, int state) {
        var mh$ = gtk_style_properties_unset_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_unset_property", props, property, state);
            }
            mh$.invokeExact(props, property, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_clear(GtkStyleProperties *props)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_clear$descriptor() {
        return gtk_style_properties_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_clear(GtkStyleProperties *props)
     * }
     */
    public static MethodHandle gtk_style_properties_clear$handle() {
        return gtk_style_properties_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_properties_clear(GtkStyleProperties *props)
     * }
     */
    public static void gtk_style_properties_clear(MemorySegment props) {
        var mh$ = gtk_style_properties_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_clear", props);
            }
            mh$.invokeExact(props);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_properties_merge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_properties_merge"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_merge(GtkStyleProperties *props, const GtkStyleProperties *props_to_merge, gboolean replace)
     * }
     */
    public static FunctionDescriptor gtk_style_properties_merge$descriptor() {
        return gtk_style_properties_merge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_properties_merge(GtkStyleProperties *props, const GtkStyleProperties *props_to_merge, gboolean replace)
     * }
     */
    public static MethodHandle gtk_style_properties_merge$handle() {
        return gtk_style_properties_merge.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_properties_merge(GtkStyleProperties *props, const GtkStyleProperties *props_to_merge, gboolean replace)
     * }
     */
    public static void gtk_style_properties_merge(MemorySegment props, MemorySegment props_to_merge, int replace) {
        var mh$ = gtk_style_properties_merge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_properties_merge", props, props_to_merge, replace);
            }
            mh$.invokeExact(props, props_to_merge, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_provider_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_provider_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_style_provider_get_type()
     * }
     */
    public static FunctionDescriptor gtk_style_provider_get_type$descriptor() {
        return gtk_style_provider_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_style_provider_get_type()
     * }
     */
    public static MethodHandle gtk_style_provider_get_type$handle() {
        return gtk_style_provider_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_style_provider_get_type()
     * }
     */
    public static long gtk_style_provider_get_type() {
        var mh$ = gtk_style_provider_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_provider_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_provider_get_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_provider_get_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyleProperties *gtk_style_provider_get_style(GtkStyleProvider *provider, GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_style_provider_get_style$descriptor() {
        return gtk_style_provider_get_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyleProperties *gtk_style_provider_get_style(GtkStyleProvider *provider, GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_style_provider_get_style$handle() {
        return gtk_style_provider_get_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyleProperties *gtk_style_provider_get_style(GtkStyleProvider *provider, GtkWidgetPath *path)
     * }
     */
    public static MemorySegment gtk_style_provider_get_style(MemorySegment provider, MemorySegment path) {
        var mh$ = gtk_style_provider_get_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_provider_get_style", provider, path);
            }
            return (MemorySegment)mh$.invokeExact(provider, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_provider_get_style_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_provider_get_style_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_provider_get_style_property(GtkStyleProvider *provider, GtkWidgetPath *path, GtkStateFlags state, GParamSpec *pspec, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_style_provider_get_style_property$descriptor() {
        return gtk_style_provider_get_style_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_provider_get_style_property(GtkStyleProvider *provider, GtkWidgetPath *path, GtkStateFlags state, GParamSpec *pspec, GValue *value)
     * }
     */
    public static MethodHandle gtk_style_provider_get_style_property$handle() {
        return gtk_style_provider_get_style_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_provider_get_style_property(GtkStyleProvider *provider, GtkWidgetPath *path, GtkStateFlags state, GParamSpec *pspec, GValue *value)
     * }
     */
    public static int gtk_style_provider_get_style_property(MemorySegment provider, MemorySegment path, int state, MemorySegment pspec, MemorySegment value) {
        var mh$ = gtk_style_provider_get_style_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_provider_get_style_property", provider, path, state, pspec, value);
            }
            return (int)mh$.invokeExact(provider, path, state, pspec, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_provider_get_icon_factory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_provider_get_icon_factory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconFactory *gtk_style_provider_get_icon_factory(GtkStyleProvider *provider, GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_style_provider_get_icon_factory$descriptor() {
        return gtk_style_provider_get_icon_factory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconFactory *gtk_style_provider_get_icon_factory(GtkStyleProvider *provider, GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_style_provider_get_icon_factory$handle() {
        return gtk_style_provider_get_icon_factory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconFactory *gtk_style_provider_get_icon_factory(GtkStyleProvider *provider, GtkWidgetPath *path)
     * }
     */
    public static MemorySegment gtk_style_provider_get_icon_factory(MemorySegment provider, MemorySegment path) {
        var mh$ = gtk_style_provider_get_icon_factory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_provider_get_icon_factory", provider, path);
            }
            return (MemorySegment)mh$.invokeExact(provider, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_style_context_get_type()
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_type$descriptor() {
        return gtk_style_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_style_context_get_type()
     * }
     */
    public static MethodHandle gtk_style_context_get_type$handle() {
        return gtk_style_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_style_context_get_type()
     * }
     */
    public static long gtk_style_context_get_type() {
        var mh$ = gtk_style_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_style_context_new()
     * }
     */
    public static FunctionDescriptor gtk_style_context_new$descriptor() {
        return gtk_style_context_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_style_context_new()
     * }
     */
    public static MethodHandle gtk_style_context_new$handle() {
        return gtk_style_context_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_style_context_new()
     * }
     */
    public static MemorySegment gtk_style_context_new() {
        var mh$ = gtk_style_context_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_add_provider_for_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_add_provider_for_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_provider_for_screen(GdkScreen *screen, GtkStyleProvider *provider, guint priority)
     * }
     */
    public static FunctionDescriptor gtk_style_context_add_provider_for_screen$descriptor() {
        return gtk_style_context_add_provider_for_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_provider_for_screen(GdkScreen *screen, GtkStyleProvider *provider, guint priority)
     * }
     */
    public static MethodHandle gtk_style_context_add_provider_for_screen$handle() {
        return gtk_style_context_add_provider_for_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_add_provider_for_screen(GdkScreen *screen, GtkStyleProvider *provider, guint priority)
     * }
     */
    public static void gtk_style_context_add_provider_for_screen(MemorySegment screen, MemorySegment provider, int priority) {
        var mh$ = gtk_style_context_add_provider_for_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_add_provider_for_screen", screen, provider, priority);
            }
            mh$.invokeExact(screen, provider, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_remove_provider_for_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_remove_provider_for_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_provider_for_screen(GdkScreen *screen, GtkStyleProvider *provider)
     * }
     */
    public static FunctionDescriptor gtk_style_context_remove_provider_for_screen$descriptor() {
        return gtk_style_context_remove_provider_for_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_provider_for_screen(GdkScreen *screen, GtkStyleProvider *provider)
     * }
     */
    public static MethodHandle gtk_style_context_remove_provider_for_screen$handle() {
        return gtk_style_context_remove_provider_for_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_provider_for_screen(GdkScreen *screen, GtkStyleProvider *provider)
     * }
     */
    public static void gtk_style_context_remove_provider_for_screen(MemorySegment screen, MemorySegment provider) {
        var mh$ = gtk_style_context_remove_provider_for_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_remove_provider_for_screen", screen, provider);
            }
            mh$.invokeExact(screen, provider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_add_provider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_add_provider"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_provider(GtkStyleContext *context, GtkStyleProvider *provider, guint priority)
     * }
     */
    public static FunctionDescriptor gtk_style_context_add_provider$descriptor() {
        return gtk_style_context_add_provider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_provider(GtkStyleContext *context, GtkStyleProvider *provider, guint priority)
     * }
     */
    public static MethodHandle gtk_style_context_add_provider$handle() {
        return gtk_style_context_add_provider.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_add_provider(GtkStyleContext *context, GtkStyleProvider *provider, guint priority)
     * }
     */
    public static void gtk_style_context_add_provider(MemorySegment context, MemorySegment provider, int priority) {
        var mh$ = gtk_style_context_add_provider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_add_provider", context, provider, priority);
            }
            mh$.invokeExact(context, provider, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_remove_provider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_remove_provider"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_provider(GtkStyleContext *context, GtkStyleProvider *provider)
     * }
     */
    public static FunctionDescriptor gtk_style_context_remove_provider$descriptor() {
        return gtk_style_context_remove_provider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_provider(GtkStyleContext *context, GtkStyleProvider *provider)
     * }
     */
    public static MethodHandle gtk_style_context_remove_provider$handle() {
        return gtk_style_context_remove_provider.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_provider(GtkStyleContext *context, GtkStyleProvider *provider)
     * }
     */
    public static void gtk_style_context_remove_provider(MemorySegment context, MemorySegment provider) {
        var mh$ = gtk_style_context_remove_provider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_remove_provider", context, provider);
            }
            mh$.invokeExact(context, provider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_save"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_save(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_save$descriptor() {
        return gtk_style_context_save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_save(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_save$handle() {
        return gtk_style_context_save.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_save(GtkStyleContext *context)
     * }
     */
    public static void gtk_style_context_save(MemorySegment context) {
        var mh$ = gtk_style_context_save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_save", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_restore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_restore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_restore(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_restore$descriptor() {
        return gtk_style_context_restore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_restore(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_restore$handle() {
        return gtk_style_context_restore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_restore(GtkStyleContext *context)
     * }
     */
    public static void gtk_style_context_restore(MemorySegment context) {
        var mh$ = gtk_style_context_restore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_restore", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_section {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_section"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_style_context_get_section(GtkStyleContext *context, const gchar *property)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_section$descriptor() {
        return gtk_style_context_get_section.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_style_context_get_section(GtkStyleContext *context, const gchar *property)
     * }
     */
    public static MethodHandle gtk_style_context_get_section$handle() {
        return gtk_style_context_get_section.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_style_context_get_section(GtkStyleContext *context, const gchar *property)
     * }
     */
    public static MemorySegment gtk_style_context_get_section(MemorySegment context, MemorySegment property) {
        var mh$ = gtk_style_context_get_section.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_section", context, property);
            }
            return (MemorySegment)mh$.invokeExact(context, property);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_property(GtkStyleContext *context, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_property$descriptor() {
        return gtk_style_context_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_property(GtkStyleContext *context, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static MethodHandle gtk_style_context_get_property$handle() {
        return gtk_style_context_get_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_property(GtkStyleContext *context, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static void gtk_style_context_get_property(MemorySegment context, MemorySegment property, int state, MemorySegment value) {
        var mh$ = gtk_style_context_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_property", context, property, state, value);
            }
            mh$.invokeExact(context, property, state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get(GtkStyleContext *context, GtkStateFlags state, ...)
     * }
     */
    public static class gtk_style_context_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_style_context_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_style_context_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_style_context_get(GtkStyleContext *context, GtkStateFlags state, ...)
         * }
         */
        public static gtk_style_context_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_style_context_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment context, int state, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_style_context_get", context, state, x2);
                }
                spreader.invokeExact(context, state, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_style_context_set_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_state(GtkStyleContext *context, GtkStateFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_state$descriptor() {
        return gtk_style_context_set_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_state(GtkStyleContext *context, GtkStateFlags flags)
     * }
     */
    public static MethodHandle gtk_style_context_set_state$handle() {
        return gtk_style_context_set_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_state(GtkStyleContext *context, GtkStateFlags flags)
     * }
     */
    public static void gtk_style_context_set_state(MemorySegment context, int flags) {
        var mh$ = gtk_style_context_set_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_state", context, flags);
            }
            mh$.invokeExact(context, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_style_context_get_state(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_state$descriptor() {
        return gtk_style_context_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_style_context_get_state(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_state$handle() {
        return gtk_style_context_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_style_context_get_state(GtkStyleContext *context)
     * }
     */
    public static int gtk_style_context_get_state(MemorySegment context) {
        var mh$ = gtk_style_context_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_state", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_scale(GtkStyleContext *context, gint scale)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_scale$descriptor() {
        return gtk_style_context_set_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_scale(GtkStyleContext *context, gint scale)
     * }
     */
    public static MethodHandle gtk_style_context_set_scale$handle() {
        return gtk_style_context_set_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_scale(GtkStyleContext *context, gint scale)
     * }
     */
    public static void gtk_style_context_set_scale(MemorySegment context, int scale) {
        var mh$ = gtk_style_context_set_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_scale", context, scale);
            }
            mh$.invokeExact(context, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_style_context_get_scale(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_scale$descriptor() {
        return gtk_style_context_get_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_style_context_get_scale(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_scale$handle() {
        return gtk_style_context_get_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_style_context_get_scale(GtkStyleContext *context)
     * }
     */
    public static int gtk_style_context_get_scale(MemorySegment context) {
        var mh$ = gtk_style_context_get_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_scale", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_state_is_running {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_state_is_running"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_state_is_running(GtkStyleContext *context, GtkStateType state, gdouble *progress)
     * }
     */
    public static FunctionDescriptor gtk_style_context_state_is_running$descriptor() {
        return gtk_style_context_state_is_running.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_state_is_running(GtkStyleContext *context, GtkStateType state, gdouble *progress)
     * }
     */
    public static MethodHandle gtk_style_context_state_is_running$handle() {
        return gtk_style_context_state_is_running.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_state_is_running(GtkStyleContext *context, GtkStateType state, gdouble *progress)
     * }
     */
    public static int gtk_style_context_state_is_running(MemorySegment context, int state, MemorySegment progress) {
        var mh$ = gtk_style_context_state_is_running.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_state_is_running", context, state, progress);
            }
            return (int)mh$.invokeExact(context, state, progress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_path(GtkStyleContext *context, GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_path$descriptor() {
        return gtk_style_context_set_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_path(GtkStyleContext *context, GtkWidgetPath *path)
     * }
     */
    public static MethodHandle gtk_style_context_set_path$handle() {
        return gtk_style_context_set_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_path(GtkStyleContext *context, GtkWidgetPath *path)
     * }
     */
    public static void gtk_style_context_set_path(MemorySegment context, MemorySegment path) {
        var mh$ = gtk_style_context_set_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_path", context, path);
            }
            mh$.invokeExact(context, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_style_context_get_path(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_path$descriptor() {
        return gtk_style_context_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_style_context_get_path(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_path$handle() {
        return gtk_style_context_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_style_context_get_path(GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_style_context_get_path(MemorySegment context) {
        var mh$ = gtk_style_context_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_path", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_parent(GtkStyleContext *context, GtkStyleContext *parent)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_parent$descriptor() {
        return gtk_style_context_set_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_parent(GtkStyleContext *context, GtkStyleContext *parent)
     * }
     */
    public static MethodHandle gtk_style_context_set_parent$handle() {
        return gtk_style_context_set_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_parent(GtkStyleContext *context, GtkStyleContext *parent)
     * }
     */
    public static void gtk_style_context_set_parent(MemorySegment context, MemorySegment parent) {
        var mh$ = gtk_style_context_set_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_parent", context, parent);
            }
            mh$.invokeExact(context, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_style_context_get_parent(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_parent$descriptor() {
        return gtk_style_context_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_style_context_get_parent(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_parent$handle() {
        return gtk_style_context_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_style_context_get_parent(GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_style_context_get_parent(MemorySegment context) {
        var mh$ = gtk_style_context_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_parent", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_list_classes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_list_classes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_style_context_list_classes(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_list_classes$descriptor() {
        return gtk_style_context_list_classes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_style_context_list_classes(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_list_classes$handle() {
        return gtk_style_context_list_classes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_style_context_list_classes(GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_style_context_list_classes(MemorySegment context) {
        var mh$ = gtk_style_context_list_classes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_list_classes", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_add_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_add_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static FunctionDescriptor gtk_style_context_add_class$descriptor() {
        return gtk_style_context_add_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static MethodHandle gtk_style_context_add_class$handle() {
        return gtk_style_context_add_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_add_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static void gtk_style_context_add_class(MemorySegment context, MemorySegment class_name) {
        var mh$ = gtk_style_context_add_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_add_class", context, class_name);
            }
            mh$.invokeExact(context, class_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_remove_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_remove_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static FunctionDescriptor gtk_style_context_remove_class$descriptor() {
        return gtk_style_context_remove_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static MethodHandle gtk_style_context_remove_class$handle() {
        return gtk_style_context_remove_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static void gtk_style_context_remove_class(MemorySegment context, MemorySegment class_name) {
        var mh$ = gtk_style_context_remove_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_remove_class", context, class_name);
            }
            mh$.invokeExact(context, class_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_has_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_has_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_has_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static FunctionDescriptor gtk_style_context_has_class$descriptor() {
        return gtk_style_context_has_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_has_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static MethodHandle gtk_style_context_has_class$handle() {
        return gtk_style_context_has_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_has_class(GtkStyleContext *context, const gchar *class_name)
     * }
     */
    public static int gtk_style_context_has_class(MemorySegment context, MemorySegment class_name) {
        var mh$ = gtk_style_context_has_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_has_class", context, class_name);
            }
            return (int)mh$.invokeExact(context, class_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_list_regions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_list_regions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_style_context_list_regions(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_list_regions$descriptor() {
        return gtk_style_context_list_regions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_style_context_list_regions(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_list_regions$handle() {
        return gtk_style_context_list_regions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_style_context_list_regions(GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_style_context_list_regions(MemorySegment context) {
        var mh$ = gtk_style_context_list_regions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_list_regions", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_add_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_add_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_region(GtkStyleContext *context, const gchar *region_name, GtkRegionFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_style_context_add_region$descriptor() {
        return gtk_style_context_add_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_add_region(GtkStyleContext *context, const gchar *region_name, GtkRegionFlags flags)
     * }
     */
    public static MethodHandle gtk_style_context_add_region$handle() {
        return gtk_style_context_add_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_add_region(GtkStyleContext *context, const gchar *region_name, GtkRegionFlags flags)
     * }
     */
    public static void gtk_style_context_add_region(MemorySegment context, MemorySegment region_name, int flags) {
        var mh$ = gtk_style_context_add_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_add_region", context, region_name, flags);
            }
            mh$.invokeExact(context, region_name, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_remove_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_remove_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_region(GtkStyleContext *context, const gchar *region_name)
     * }
     */
    public static FunctionDescriptor gtk_style_context_remove_region$descriptor() {
        return gtk_style_context_remove_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_region(GtkStyleContext *context, const gchar *region_name)
     * }
     */
    public static MethodHandle gtk_style_context_remove_region$handle() {
        return gtk_style_context_remove_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_remove_region(GtkStyleContext *context, const gchar *region_name)
     * }
     */
    public static void gtk_style_context_remove_region(MemorySegment context, MemorySegment region_name) {
        var mh$ = gtk_style_context_remove_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_remove_region", context, region_name);
            }
            mh$.invokeExact(context, region_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_has_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_has_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_has_region(GtkStyleContext *context, const gchar *region_name, GtkRegionFlags *flags_return)
     * }
     */
    public static FunctionDescriptor gtk_style_context_has_region$descriptor() {
        return gtk_style_context_has_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_has_region(GtkStyleContext *context, const gchar *region_name, GtkRegionFlags *flags_return)
     * }
     */
    public static MethodHandle gtk_style_context_has_region$handle() {
        return gtk_style_context_has_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_has_region(GtkStyleContext *context, const gchar *region_name, GtkRegionFlags *flags_return)
     * }
     */
    public static int gtk_style_context_has_region(MemorySegment context, MemorySegment region_name, MemorySegment flags_return) {
        var mh$ = gtk_style_context_has_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_has_region", context, region_name, flags_return);
            }
            return (int)mh$.invokeExact(context, region_name, flags_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_style_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_style_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_style_property(GtkStyleContext *context, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_style_property$descriptor() {
        return gtk_style_context_get_style_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_style_property(GtkStyleContext *context, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle gtk_style_context_get_style_property$handle() {
        return gtk_style_context_get_style_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_style_property(GtkStyleContext *context, const gchar *property_name, GValue *value)
     * }
     */
    public static void gtk_style_context_get_style_property(MemorySegment context, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_style_context_get_style_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_style_property", context, property_name, value);
            }
            mh$.invokeExact(context, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_style(GtkStyleContext *context, ...)
     * }
     */
    public static class gtk_style_context_get_style {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_style_context_get_style");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_style_context_get_style(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_style_context_get_style(GtkStyleContext *context, ...)
         * }
         */
        public static gtk_style_context_get_style makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_style_context_get_style(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment context, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_style_context_get_style", context, x1);
                }
                spreader.invokeExact(context, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_style_context_lookup_icon_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_lookup_icon_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_style_context_lookup_icon_set(GtkStyleContext *context, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_style_context_lookup_icon_set$descriptor() {
        return gtk_style_context_lookup_icon_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_style_context_lookup_icon_set(GtkStyleContext *context, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_style_context_lookup_icon_set$handle() {
        return gtk_style_context_lookup_icon_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_style_context_lookup_icon_set(GtkStyleContext *context, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_style_context_lookup_icon_set(MemorySegment context, MemorySegment stock_id) {
        var mh$ = gtk_style_context_lookup_icon_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_lookup_icon_set", context, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(context, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_render_icon_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_render_icon_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_set_render_icon_pixbuf(GtkIconSet *icon_set, GtkStyleContext *context, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_render_icon_pixbuf$descriptor() {
        return gtk_icon_set_render_icon_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_set_render_icon_pixbuf(GtkIconSet *icon_set, GtkStyleContext *context, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_icon_set_render_icon_pixbuf$handle() {
        return gtk_icon_set_render_icon_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_set_render_icon_pixbuf(GtkIconSet *icon_set, GtkStyleContext *context, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_icon_set_render_icon_pixbuf(MemorySegment icon_set, MemorySegment context, int size) {
        var mh$ = gtk_icon_set_render_icon_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_render_icon_pixbuf", icon_set, context, size);
            }
            return (MemorySegment)mh$.invokeExact(icon_set, context, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_set_render_icon_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_set_render_icon_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_set_render_icon_surface(GtkIconSet *icon_set, GtkStyleContext *context, GtkIconSize size, int scale, GdkWindow *for_window)
     * }
     */
    public static FunctionDescriptor gtk_icon_set_render_icon_surface$descriptor() {
        return gtk_icon_set_render_icon_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_set_render_icon_surface(GtkIconSet *icon_set, GtkStyleContext *context, GtkIconSize size, int scale, GdkWindow *for_window)
     * }
     */
    public static MethodHandle gtk_icon_set_render_icon_surface$handle() {
        return gtk_icon_set_render_icon_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_set_render_icon_surface(GtkIconSet *icon_set, GtkStyleContext *context, GtkIconSize size, int scale, GdkWindow *for_window)
     * }
     */
    public static MemorySegment gtk_icon_set_render_icon_surface(MemorySegment icon_set, MemorySegment context, int size, int scale, MemorySegment for_window) {
        var mh$ = gtk_icon_set_render_icon_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_set_render_icon_surface", icon_set, context, size, scale, for_window);
            }
            return (MemorySegment)mh$.invokeExact(icon_set, context, size, scale, for_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_screen(GtkStyleContext *context, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_screen$descriptor() {
        return gtk_style_context_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_screen(GtkStyleContext *context, GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_style_context_set_screen$handle() {
        return gtk_style_context_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_screen(GtkStyleContext *context, GdkScreen *screen)
     * }
     */
    public static void gtk_style_context_set_screen(MemorySegment context, MemorySegment screen) {
        var mh$ = gtk_style_context_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_screen", context, screen);
            }
            mh$.invokeExact(context, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_style_context_get_screen(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_screen$descriptor() {
        return gtk_style_context_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_style_context_get_screen(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_screen$handle() {
        return gtk_style_context_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gtk_style_context_get_screen(GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_style_context_get_screen(MemorySegment context) {
        var mh$ = gtk_style_context_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_screen", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_frame_clock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_frame_clock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_frame_clock(GtkStyleContext *context, GdkFrameClock *frame_clock)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_frame_clock$descriptor() {
        return gtk_style_context_set_frame_clock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_frame_clock(GtkStyleContext *context, GdkFrameClock *frame_clock)
     * }
     */
    public static MethodHandle gtk_style_context_set_frame_clock$handle() {
        return gtk_style_context_set_frame_clock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_frame_clock(GtkStyleContext *context, GdkFrameClock *frame_clock)
     * }
     */
    public static void gtk_style_context_set_frame_clock(MemorySegment context, MemorySegment frame_clock) {
        var mh$ = gtk_style_context_set_frame_clock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_frame_clock", context, frame_clock);
            }
            mh$.invokeExact(context, frame_clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_frame_clock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_frame_clock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkFrameClock *gtk_style_context_get_frame_clock(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_frame_clock$descriptor() {
        return gtk_style_context_get_frame_clock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkFrameClock *gtk_style_context_get_frame_clock(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_frame_clock$handle() {
        return gtk_style_context_get_frame_clock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkFrameClock *gtk_style_context_get_frame_clock(GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_style_context_get_frame_clock(MemorySegment context) {
        var mh$ = gtk_style_context_get_frame_clock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_frame_clock", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_direction(GtkStyleContext *context, GtkTextDirection direction)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_direction$descriptor() {
        return gtk_style_context_set_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_direction(GtkStyleContext *context, GtkTextDirection direction)
     * }
     */
    public static MethodHandle gtk_style_context_set_direction$handle() {
        return gtk_style_context_set_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_direction(GtkStyleContext *context, GtkTextDirection direction)
     * }
     */
    public static void gtk_style_context_set_direction(MemorySegment context, int direction) {
        var mh$ = gtk_style_context_set_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_direction", context, direction);
            }
            mh$.invokeExact(context, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_style_context_get_direction(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_direction$descriptor() {
        return gtk_style_context_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_style_context_get_direction(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_direction$handle() {
        return gtk_style_context_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_style_context_get_direction(GtkStyleContext *context)
     * }
     */
    public static int gtk_style_context_get_direction(MemorySegment context) {
        var mh$ = gtk_style_context_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_direction", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_junction_sides {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_junction_sides"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_junction_sides(GtkStyleContext *context, GtkJunctionSides sides)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_junction_sides$descriptor() {
        return gtk_style_context_set_junction_sides.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_junction_sides(GtkStyleContext *context, GtkJunctionSides sides)
     * }
     */
    public static MethodHandle gtk_style_context_set_junction_sides$handle() {
        return gtk_style_context_set_junction_sides.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_junction_sides(GtkStyleContext *context, GtkJunctionSides sides)
     * }
     */
    public static void gtk_style_context_set_junction_sides(MemorySegment context, int sides) {
        var mh$ = gtk_style_context_set_junction_sides.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_junction_sides", context, sides);
            }
            mh$.invokeExact(context, sides);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_junction_sides {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_junction_sides"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkJunctionSides gtk_style_context_get_junction_sides(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_junction_sides$descriptor() {
        return gtk_style_context_get_junction_sides.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkJunctionSides gtk_style_context_get_junction_sides(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_get_junction_sides$handle() {
        return gtk_style_context_get_junction_sides.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkJunctionSides gtk_style_context_get_junction_sides(GtkStyleContext *context)
     * }
     */
    public static int gtk_style_context_get_junction_sides(MemorySegment context) {
        var mh$ = gtk_style_context_get_junction_sides.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_junction_sides", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_lookup_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_lookup_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_lookup_color(GtkStyleContext *context, const gchar *color_name, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_style_context_lookup_color$descriptor() {
        return gtk_style_context_lookup_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_lookup_color(GtkStyleContext *context, const gchar *color_name, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_style_context_lookup_color$handle() {
        return gtk_style_context_lookup_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_context_lookup_color(GtkStyleContext *context, const gchar *color_name, GdkRGBA *color)
     * }
     */
    public static int gtk_style_context_lookup_color(MemorySegment context, MemorySegment color_name, MemorySegment color) {
        var mh$ = gtk_style_context_lookup_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_lookup_color", context, color_name, color);
            }
            return (int)mh$.invokeExact(context, color_name, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_notify_state_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_notify_state_change"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_notify_state_change(GtkStyleContext *context, GdkWindow *window, gpointer region_id, GtkStateType state, gboolean state_value)
     * }
     */
    public static FunctionDescriptor gtk_style_context_notify_state_change$descriptor() {
        return gtk_style_context_notify_state_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_notify_state_change(GtkStyleContext *context, GdkWindow *window, gpointer region_id, GtkStateType state, gboolean state_value)
     * }
     */
    public static MethodHandle gtk_style_context_notify_state_change$handle() {
        return gtk_style_context_notify_state_change.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_notify_state_change(GtkStyleContext *context, GdkWindow *window, gpointer region_id, GtkStateType state, gboolean state_value)
     * }
     */
    public static void gtk_style_context_notify_state_change(MemorySegment context, MemorySegment window, MemorySegment region_id, int state, int state_value) {
        var mh$ = gtk_style_context_notify_state_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_notify_state_change", context, window, region_id, state, state_value);
            }
            mh$.invokeExact(context, window, region_id, state, state_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_cancel_animations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_cancel_animations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_cancel_animations(GtkStyleContext *context, gpointer region_id)
     * }
     */
    public static FunctionDescriptor gtk_style_context_cancel_animations$descriptor() {
        return gtk_style_context_cancel_animations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_cancel_animations(GtkStyleContext *context, gpointer region_id)
     * }
     */
    public static MethodHandle gtk_style_context_cancel_animations$handle() {
        return gtk_style_context_cancel_animations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_cancel_animations(GtkStyleContext *context, gpointer region_id)
     * }
     */
    public static void gtk_style_context_cancel_animations(MemorySegment context, MemorySegment region_id) {
        var mh$ = gtk_style_context_cancel_animations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_cancel_animations", context, region_id);
            }
            mh$.invokeExact(context, region_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_scroll_animations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_scroll_animations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_scroll_animations(GtkStyleContext *context, GdkWindow *window, gint dx, gint dy)
     * }
     */
    public static FunctionDescriptor gtk_style_context_scroll_animations$descriptor() {
        return gtk_style_context_scroll_animations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_scroll_animations(GtkStyleContext *context, GdkWindow *window, gint dx, gint dy)
     * }
     */
    public static MethodHandle gtk_style_context_scroll_animations$handle() {
        return gtk_style_context_scroll_animations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_scroll_animations(GtkStyleContext *context, GdkWindow *window, gint dx, gint dy)
     * }
     */
    public static void gtk_style_context_scroll_animations(MemorySegment context, MemorySegment window, int dx, int dy) {
        var mh$ = gtk_style_context_scroll_animations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_scroll_animations", context, window, dx, dy);
            }
            mh$.invokeExact(context, window, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_push_animatable_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_push_animatable_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_push_animatable_region(GtkStyleContext *context, gpointer region_id)
     * }
     */
    public static FunctionDescriptor gtk_style_context_push_animatable_region$descriptor() {
        return gtk_style_context_push_animatable_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_push_animatable_region(GtkStyleContext *context, gpointer region_id)
     * }
     */
    public static MethodHandle gtk_style_context_push_animatable_region$handle() {
        return gtk_style_context_push_animatable_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_push_animatable_region(GtkStyleContext *context, gpointer region_id)
     * }
     */
    public static void gtk_style_context_push_animatable_region(MemorySegment context, MemorySegment region_id) {
        var mh$ = gtk_style_context_push_animatable_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_push_animatable_region", context, region_id);
            }
            mh$.invokeExact(context, region_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_pop_animatable_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_pop_animatable_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_pop_animatable_region(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_pop_animatable_region$descriptor() {
        return gtk_style_context_pop_animatable_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_pop_animatable_region(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_pop_animatable_region$handle() {
        return gtk_style_context_pop_animatable_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_pop_animatable_region(GtkStyleContext *context)
     * }
     */
    public static void gtk_style_context_pop_animatable_region(MemorySegment context) {
        var mh$ = gtk_style_context_pop_animatable_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_pop_animatable_region", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_color$descriptor() {
        return gtk_style_context_get_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_style_context_get_color$handle() {
        return gtk_style_context_get_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static void gtk_style_context_get_color(MemorySegment context, int state, MemorySegment color) {
        var mh$ = gtk_style_context_get_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_color", context, state, color);
            }
            mh$.invokeExact(context, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_background_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_background_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_background_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_background_color$descriptor() {
        return gtk_style_context_get_background_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_background_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_style_context_get_background_color$handle() {
        return gtk_style_context_get_background_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_background_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static void gtk_style_context_get_background_color(MemorySegment context, int state, MemorySegment color) {
        var mh$ = gtk_style_context_get_background_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_background_color", context, state, color);
            }
            mh$.invokeExact(context, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_border_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_border_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_border_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_border_color$descriptor() {
        return gtk_style_context_get_border_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_border_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_style_context_get_border_color$handle() {
        return gtk_style_context_get_border_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_border_color(GtkStyleContext *context, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static void gtk_style_context_get_border_color(MemorySegment context, int state, MemorySegment color) {
        var mh$ = gtk_style_context_get_border_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_border_color", context, state, color);
            }
            mh$.invokeExact(context, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const PangoFontDescription *gtk_style_context_get_font(GtkStyleContext *context, GtkStateFlags state)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_font$descriptor() {
        return gtk_style_context_get_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const PangoFontDescription *gtk_style_context_get_font(GtkStyleContext *context, GtkStateFlags state)
     * }
     */
    public static MethodHandle gtk_style_context_get_font$handle() {
        return gtk_style_context_get_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const PangoFontDescription *gtk_style_context_get_font(GtkStyleContext *context, GtkStateFlags state)
     * }
     */
    public static MemorySegment gtk_style_context_get_font(MemorySegment context, int state) {
        var mh$ = gtk_style_context_get_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_font", context, state);
            }
            return (MemorySegment)mh$.invokeExact(context, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_border(GtkStyleContext *context, GtkStateFlags state, GtkBorder *border)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_border$descriptor() {
        return gtk_style_context_get_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_border(GtkStyleContext *context, GtkStateFlags state, GtkBorder *border)
     * }
     */
    public static MethodHandle gtk_style_context_get_border$handle() {
        return gtk_style_context_get_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_border(GtkStyleContext *context, GtkStateFlags state, GtkBorder *border)
     * }
     */
    public static void gtk_style_context_get_border(MemorySegment context, int state, MemorySegment border) {
        var mh$ = gtk_style_context_get_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_border", context, state, border);
            }
            mh$.invokeExact(context, state, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_padding(GtkStyleContext *context, GtkStateFlags state, GtkBorder *padding)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_padding$descriptor() {
        return gtk_style_context_get_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_padding(GtkStyleContext *context, GtkStateFlags state, GtkBorder *padding)
     * }
     */
    public static MethodHandle gtk_style_context_get_padding$handle() {
        return gtk_style_context_get_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_padding(GtkStyleContext *context, GtkStateFlags state, GtkBorder *padding)
     * }
     */
    public static void gtk_style_context_get_padding(MemorySegment context, int state, MemorySegment padding) {
        var mh$ = gtk_style_context_get_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_padding", context, state, padding);
            }
            mh$.invokeExact(context, state, padding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_get_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_get_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_margin(GtkStyleContext *context, GtkStateFlags state, GtkBorder *margin)
     * }
     */
    public static FunctionDescriptor gtk_style_context_get_margin$descriptor() {
        return gtk_style_context_get_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_get_margin(GtkStyleContext *context, GtkStateFlags state, GtkBorder *margin)
     * }
     */
    public static MethodHandle gtk_style_context_get_margin$handle() {
        return gtk_style_context_get_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_get_margin(GtkStyleContext *context, GtkStateFlags state, GtkBorder *margin)
     * }
     */
    public static void gtk_style_context_get_margin(MemorySegment context, int state, MemorySegment margin) {
        var mh$ = gtk_style_context_get_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_get_margin", context, state, margin);
            }
            mh$.invokeExact(context, state, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_invalidate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_invalidate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_invalidate(GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_style_context_invalidate$descriptor() {
        return gtk_style_context_invalidate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_invalidate(GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_style_context_invalidate$handle() {
        return gtk_style_context_invalidate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_invalidate(GtkStyleContext *context)
     * }
     */
    public static void gtk_style_context_invalidate(MemorySegment context) {
        var mh$ = gtk_style_context_invalidate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_invalidate", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_reset_widgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_reset_widgets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_reset_widgets(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_style_context_reset_widgets$descriptor() {
        return gtk_style_context_reset_widgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_reset_widgets(GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_style_context_reset_widgets$handle() {
        return gtk_style_context_reset_widgets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_reset_widgets(GdkScreen *screen)
     * }
     */
    public static void gtk_style_context_reset_widgets(MemorySegment screen) {
        var mh$ = gtk_style_context_reset_widgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_reset_widgets", screen);
            }
            mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_context_set_background {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_set_background"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_background(GtkStyleContext *context, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_style_context_set_background$descriptor() {
        return gtk_style_context_set_background.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_context_set_background(GtkStyleContext *context, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_style_context_set_background$handle() {
        return gtk_style_context_set_background.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_context_set_background(GtkStyleContext *context, GdkWindow *window)
     * }
     */
    public static void gtk_style_context_set_background(MemorySegment context, MemorySegment window) {
        var mh$ = gtk_style_context_set_background.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_set_background", context, window);
            }
            mh$.invokeExact(context, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_render_insertion_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_render_insertion_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_render_insertion_cursor(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout, int index, PangoDirection direction)
     * }
     */
    public static FunctionDescriptor gtk_render_insertion_cursor$descriptor() {
        return gtk_render_insertion_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_render_insertion_cursor(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout, int index, PangoDirection direction)
     * }
     */
    public static MethodHandle gtk_render_insertion_cursor$handle() {
        return gtk_render_insertion_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_render_insertion_cursor(GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout, int index, PangoDirection direction)
     * }
     */
    public static void gtk_render_insertion_cursor(MemorySegment context, MemorySegment cr, double x, double y, MemorySegment layout, int index, int direction) {
        var mh$ = gtk_render_insertion_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_render_insertion_cursor", context, cr, x, y, layout, index, direction);
            }
            mh$.invokeExact(context, cr, x, y, layout, index, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_draw_insertion_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_draw_insertion_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_draw_insertion_cursor(GtkWidget *widget, cairo_t *cr, const GdkRectangle *location, gboolean is_primary, GtkTextDirection direction, gboolean draw_arrow)
     * }
     */
    public static FunctionDescriptor gtk_draw_insertion_cursor$descriptor() {
        return gtk_draw_insertion_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_draw_insertion_cursor(GtkWidget *widget, cairo_t *cr, const GdkRectangle *location, gboolean is_primary, GtkTextDirection direction, gboolean draw_arrow)
     * }
     */
    public static MethodHandle gtk_draw_insertion_cursor$handle() {
        return gtk_draw_insertion_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_draw_insertion_cursor(GtkWidget *widget, cairo_t *cr, const GdkRectangle *location, gboolean is_primary, GtkTextDirection direction, gboolean draw_arrow)
     * }
     */
    public static void gtk_draw_insertion_cursor(MemorySegment widget, MemorySegment cr, MemorySegment location, int is_primary, int direction, int draw_arrow) {
        var mh$ = gtk_draw_insertion_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_draw_insertion_cursor", widget, cr, location, is_primary, direction, draw_arrow);
            }
            mh$.invokeExact(widget, cr, location, is_primary, direction, draw_arrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_STYLE_CONTEXT_PRINT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STYLE_CONTEXT_PRINT_NONE = 0
     * }
     */
    public static int GTK_STYLE_CONTEXT_PRINT_NONE() {
        return GTK_STYLE_CONTEXT_PRINT_NONE;
    }
    private static final int GTK_STYLE_CONTEXT_PRINT_RECURSE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STYLE_CONTEXT_PRINT_RECURSE = 1
     * }
     */
    public static int GTK_STYLE_CONTEXT_PRINT_RECURSE() {
        return GTK_STYLE_CONTEXT_PRINT_RECURSE;
    }
    private static final int GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE = 2
     * }
     */
    public static int GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE() {
        return GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE;
    }

    private static class gtk_style_context_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_context_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_style_context_to_string(GtkStyleContext *context, GtkStyleContextPrintFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_style_context_to_string$descriptor() {
        return gtk_style_context_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_style_context_to_string(GtkStyleContext *context, GtkStyleContextPrintFlags flags)
     * }
     */
    public static MethodHandle gtk_style_context_to_string$handle() {
        return gtk_style_context_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_style_context_to_string(GtkStyleContext *context, GtkStyleContextPrintFlags flags)
     * }
     */
    public static MemorySegment gtk_style_context_to_string(MemorySegment context, int flags) {
        var mh$ = gtk_style_context_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_context_to_string", context, flags);
            }
            return (MemorySegment)mh$.invokeExact(context, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_ICON_LOOKUP_NO_SVG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_NO_SVG = 1
     * }
     */
    public static int GTK_ICON_LOOKUP_NO_SVG() {
        return GTK_ICON_LOOKUP_NO_SVG;
    }
    private static final int GTK_ICON_LOOKUP_FORCE_SVG = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_FORCE_SVG = 2
     * }
     */
    public static int GTK_ICON_LOOKUP_FORCE_SVG() {
        return GTK_ICON_LOOKUP_FORCE_SVG;
    }
    private static final int GTK_ICON_LOOKUP_USE_BUILTIN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_USE_BUILTIN = 4
     * }
     */
    public static int GTK_ICON_LOOKUP_USE_BUILTIN() {
        return GTK_ICON_LOOKUP_USE_BUILTIN;
    }
    private static final int GTK_ICON_LOOKUP_GENERIC_FALLBACK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_GENERIC_FALLBACK = 8
     * }
     */
    public static int GTK_ICON_LOOKUP_GENERIC_FALLBACK() {
        return GTK_ICON_LOOKUP_GENERIC_FALLBACK;
    }
    private static final int GTK_ICON_LOOKUP_FORCE_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_FORCE_SIZE = 16
     * }
     */
    public static int GTK_ICON_LOOKUP_FORCE_SIZE() {
        return GTK_ICON_LOOKUP_FORCE_SIZE;
    }
    private static final int GTK_ICON_LOOKUP_FORCE_REGULAR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_FORCE_REGULAR = 32
     * }
     */
    public static int GTK_ICON_LOOKUP_FORCE_REGULAR() {
        return GTK_ICON_LOOKUP_FORCE_REGULAR;
    }
    private static final int GTK_ICON_LOOKUP_FORCE_SYMBOLIC = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_FORCE_SYMBOLIC = 64
     * }
     */
    public static int GTK_ICON_LOOKUP_FORCE_SYMBOLIC() {
        return GTK_ICON_LOOKUP_FORCE_SYMBOLIC;
    }
    private static final int GTK_ICON_LOOKUP_DIR_LTR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_DIR_LTR = 128
     * }
     */
    public static int GTK_ICON_LOOKUP_DIR_LTR() {
        return GTK_ICON_LOOKUP_DIR_LTR;
    }
    private static final int GTK_ICON_LOOKUP_DIR_RTL = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_LOOKUP_DIR_RTL = 256
     * }
     */
    public static int GTK_ICON_LOOKUP_DIR_RTL() {
        return GTK_ICON_LOOKUP_DIR_RTL;
    }
    private static final int GTK_ICON_THEME_NOT_FOUND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_THEME_NOT_FOUND = 0
     * }
     */
    public static int GTK_ICON_THEME_NOT_FOUND() {
        return GTK_ICON_THEME_NOT_FOUND;
    }
    private static final int GTK_ICON_THEME_FAILED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_THEME_FAILED = 1
     * }
     */
    public static int GTK_ICON_THEME_FAILED() {
        return GTK_ICON_THEME_FAILED;
    }

    private static class gtk_icon_theme_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gtk_icon_theme_error_quark()
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_error_quark$descriptor() {
        return gtk_icon_theme_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gtk_icon_theme_error_quark()
     * }
     */
    public static MethodHandle gtk_icon_theme_error_quark$handle() {
        return gtk_icon_theme_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gtk_icon_theme_error_quark()
     * }
     */
    public static int gtk_icon_theme_error_quark() {
        var mh$ = gtk_icon_theme_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_theme_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_get_type$descriptor() {
        return gtk_icon_theme_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_theme_get_type()
     * }
     */
    public static MethodHandle gtk_icon_theme_get_type$handle() {
        return gtk_icon_theme_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_theme_get_type()
     * }
     */
    public static long gtk_icon_theme_get_type() {
        var mh$ = gtk_icon_theme_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_new()
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_new$descriptor() {
        return gtk_icon_theme_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_new()
     * }
     */
    public static MethodHandle gtk_icon_theme_new$handle() {
        return gtk_icon_theme_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_new()
     * }
     */
    public static MemorySegment gtk_icon_theme_new() {
        var mh$ = gtk_icon_theme_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_get_default()
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_get_default$descriptor() {
        return gtk_icon_theme_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_get_default()
     * }
     */
    public static MethodHandle gtk_icon_theme_get_default$handle() {
        return gtk_icon_theme_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_get_default()
     * }
     */
    public static MemorySegment gtk_icon_theme_get_default() {
        var mh$ = gtk_icon_theme_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_get_for_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_get_for_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_get_for_screen(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_get_for_screen$descriptor() {
        return gtk_icon_theme_get_for_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_get_for_screen(GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_icon_theme_get_for_screen$handle() {
        return gtk_icon_theme_get_for_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconTheme *gtk_icon_theme_get_for_screen(GdkScreen *screen)
     * }
     */
    public static MemorySegment gtk_icon_theme_get_for_screen(MemorySegment screen) {
        var mh$ = gtk_icon_theme_get_for_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_get_for_screen", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_screen(GtkIconTheme *icon_theme, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_set_screen$descriptor() {
        return gtk_icon_theme_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_screen(GtkIconTheme *icon_theme, GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_icon_theme_set_screen$handle() {
        return gtk_icon_theme_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_screen(GtkIconTheme *icon_theme, GdkScreen *screen)
     * }
     */
    public static void gtk_icon_theme_set_screen(MemorySegment icon_theme, MemorySegment screen) {
        var mh$ = gtk_icon_theme_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_set_screen", icon_theme, screen);
            }
            mh$.invokeExact(icon_theme, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_set_search_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_set_search_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_search_path(GtkIconTheme *icon_theme, const gchar *path[], gint n_elements)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_set_search_path$descriptor() {
        return gtk_icon_theme_set_search_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_search_path(GtkIconTheme *icon_theme, const gchar *path[], gint n_elements)
     * }
     */
    public static MethodHandle gtk_icon_theme_set_search_path$handle() {
        return gtk_icon_theme_set_search_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_search_path(GtkIconTheme *icon_theme, const gchar *path[], gint n_elements)
     * }
     */
    public static void gtk_icon_theme_set_search_path(MemorySegment icon_theme, MemorySegment path, int n_elements) {
        var mh$ = gtk_icon_theme_set_search_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_set_search_path", icon_theme, path, n_elements);
            }
            mh$.invokeExact(icon_theme, path, n_elements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_get_search_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_get_search_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_get_search_path(GtkIconTheme *icon_theme, gchar **path[], gint *n_elements)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_get_search_path$descriptor() {
        return gtk_icon_theme_get_search_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_get_search_path(GtkIconTheme *icon_theme, gchar **path[], gint *n_elements)
     * }
     */
    public static MethodHandle gtk_icon_theme_get_search_path$handle() {
        return gtk_icon_theme_get_search_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_get_search_path(GtkIconTheme *icon_theme, gchar **path[], gint *n_elements)
     * }
     */
    public static void gtk_icon_theme_get_search_path(MemorySegment icon_theme, MemorySegment path, MemorySegment n_elements) {
        var mh$ = gtk_icon_theme_get_search_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_get_search_path", icon_theme, path, n_elements);
            }
            mh$.invokeExact(icon_theme, path, n_elements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_append_search_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_append_search_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_append_search_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_append_search_path$descriptor() {
        return gtk_icon_theme_append_search_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_append_search_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static MethodHandle gtk_icon_theme_append_search_path$handle() {
        return gtk_icon_theme_append_search_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_append_search_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static void gtk_icon_theme_append_search_path(MemorySegment icon_theme, MemorySegment path) {
        var mh$ = gtk_icon_theme_append_search_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_append_search_path", icon_theme, path);
            }
            mh$.invokeExact(icon_theme, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_prepend_search_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_prepend_search_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_prepend_search_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_prepend_search_path$descriptor() {
        return gtk_icon_theme_prepend_search_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_prepend_search_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static MethodHandle gtk_icon_theme_prepend_search_path$handle() {
        return gtk_icon_theme_prepend_search_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_prepend_search_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static void gtk_icon_theme_prepend_search_path(MemorySegment icon_theme, MemorySegment path) {
        var mh$ = gtk_icon_theme_prepend_search_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_prepend_search_path", icon_theme, path);
            }
            mh$.invokeExact(icon_theme, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_add_resource_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_add_resource_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_add_resource_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_add_resource_path$descriptor() {
        return gtk_icon_theme_add_resource_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_add_resource_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static MethodHandle gtk_icon_theme_add_resource_path$handle() {
        return gtk_icon_theme_add_resource_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_add_resource_path(GtkIconTheme *icon_theme, const gchar *path)
     * }
     */
    public static void gtk_icon_theme_add_resource_path(MemorySegment icon_theme, MemorySegment path) {
        var mh$ = gtk_icon_theme_add_resource_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_add_resource_path", icon_theme, path);
            }
            mh$.invokeExact(icon_theme, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_set_custom_theme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_set_custom_theme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_custom_theme(GtkIconTheme *icon_theme, const gchar *theme_name)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_set_custom_theme$descriptor() {
        return gtk_icon_theme_set_custom_theme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_custom_theme(GtkIconTheme *icon_theme, const gchar *theme_name)
     * }
     */
    public static MethodHandle gtk_icon_theme_set_custom_theme$handle() {
        return gtk_icon_theme_set_custom_theme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_set_custom_theme(GtkIconTheme *icon_theme, const gchar *theme_name)
     * }
     */
    public static void gtk_icon_theme_set_custom_theme(MemorySegment icon_theme, MemorySegment theme_name) {
        var mh$ = gtk_icon_theme_set_custom_theme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_set_custom_theme", icon_theme, theme_name);
            }
            mh$.invokeExact(icon_theme, theme_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_has_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_has_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_theme_has_icon(GtkIconTheme *icon_theme, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_has_icon$descriptor() {
        return gtk_icon_theme_has_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_theme_has_icon(GtkIconTheme *icon_theme, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_icon_theme_has_icon$handle() {
        return gtk_icon_theme_has_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_theme_has_icon(GtkIconTheme *icon_theme, const gchar *icon_name)
     * }
     */
    public static int gtk_icon_theme_has_icon(MemorySegment icon_theme, MemorySegment icon_name) {
        var mh$ = gtk_icon_theme_has_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_has_icon", icon_theme, icon_name);
            }
            return (int)mh$.invokeExact(icon_theme, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_get_icon_sizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_get_icon_sizes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint *gtk_icon_theme_get_icon_sizes(GtkIconTheme *icon_theme, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_get_icon_sizes$descriptor() {
        return gtk_icon_theme_get_icon_sizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint *gtk_icon_theme_get_icon_sizes(GtkIconTheme *icon_theme, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_icon_theme_get_icon_sizes$handle() {
        return gtk_icon_theme_get_icon_sizes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint *gtk_icon_theme_get_icon_sizes(GtkIconTheme *icon_theme, const gchar *icon_name)
     * }
     */
    public static MemorySegment gtk_icon_theme_get_icon_sizes(MemorySegment icon_theme, MemorySegment icon_name) {
        var mh$ = gtk_icon_theme_get_icon_sizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_get_icon_sizes", icon_theme, icon_name);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_lookup_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_lookup_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_icon(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_lookup_icon$descriptor() {
        return gtk_icon_theme_lookup_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_icon(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags)
     * }
     */
    public static MethodHandle gtk_icon_theme_lookup_icon$handle() {
        return gtk_icon_theme_lookup_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_icon(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags)
     * }
     */
    public static MemorySegment gtk_icon_theme_lookup_icon(MemorySegment icon_theme, MemorySegment icon_name, int size, int flags) {
        var mh$ = gtk_icon_theme_lookup_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_lookup_icon", icon_theme, icon_name, size, flags);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_name, size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_lookup_icon_for_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_lookup_icon_for_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_lookup_icon_for_scale$descriptor() {
        return gtk_icon_theme_lookup_icon_for_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static MethodHandle gtk_icon_theme_lookup_icon_for_scale$handle() {
        return gtk_icon_theme_lookup_icon_for_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static MemorySegment gtk_icon_theme_lookup_icon_for_scale(MemorySegment icon_theme, MemorySegment icon_name, int size, int scale, int flags) {
        var mh$ = gtk_icon_theme_lookup_icon_for_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_lookup_icon_for_scale", icon_theme, icon_name, size, scale, flags);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_name, size, scale, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_choose_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_choose_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_choose_icon(GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, GtkIconLookupFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_choose_icon$descriptor() {
        return gtk_icon_theme_choose_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_choose_icon(GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, GtkIconLookupFlags flags)
     * }
     */
    public static MethodHandle gtk_icon_theme_choose_icon$handle() {
        return gtk_icon_theme_choose_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_choose_icon(GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, GtkIconLookupFlags flags)
     * }
     */
    public static MemorySegment gtk_icon_theme_choose_icon(MemorySegment icon_theme, MemorySegment icon_names, int size, int flags) {
        var mh$ = gtk_icon_theme_choose_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_choose_icon", icon_theme, icon_names, size, flags);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_names, size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_choose_icon_for_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_choose_icon_for_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_choose_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_choose_icon_for_scale$descriptor() {
        return gtk_icon_theme_choose_icon_for_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_choose_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static MethodHandle gtk_icon_theme_choose_icon_for_scale$handle() {
        return gtk_icon_theme_choose_icon_for_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_choose_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static MemorySegment gtk_icon_theme_choose_icon_for_scale(MemorySegment icon_theme, MemorySegment icon_names, int size, int scale, int flags) {
        var mh$ = gtk_icon_theme_choose_icon_for_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_choose_icon_for_scale", icon_theme, icon_names, size, scale, flags);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_names, size, scale, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_load_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_load_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_theme_load_icon(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_load_icon$descriptor() {
        return gtk_icon_theme_load_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_theme_load_icon(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_theme_load_icon$handle() {
        return gtk_icon_theme_load_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_theme_load_icon(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_theme_load_icon(MemorySegment icon_theme, MemorySegment icon_name, int size, int flags, MemorySegment error) {
        var mh$ = gtk_icon_theme_load_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_load_icon", icon_theme, icon_name, size, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_name, size, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_load_icon_for_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_load_icon_for_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_theme_load_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_load_icon_for_scale$descriptor() {
        return gtk_icon_theme_load_icon_for_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_theme_load_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_theme_load_icon_for_scale$handle() {
        return gtk_icon_theme_load_icon_for_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_theme_load_icon_for_scale(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_theme_load_icon_for_scale(MemorySegment icon_theme, MemorySegment icon_name, int size, int scale, int flags, MemorySegment error) {
        var mh$ = gtk_icon_theme_load_icon_for_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_load_icon_for_scale", icon_theme, icon_name, size, scale, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_name, size, scale, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_load_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_load_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_theme_load_surface(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GdkWindow *for_window, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_load_surface$descriptor() {
        return gtk_icon_theme_load_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_theme_load_surface(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GdkWindow *for_window, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_theme_load_surface$handle() {
        return gtk_icon_theme_load_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_theme_load_surface(GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GdkWindow *for_window, GtkIconLookupFlags flags, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_theme_load_surface(MemorySegment icon_theme, MemorySegment icon_name, int size, int scale, MemorySegment for_window, int flags, MemorySegment error) {
        var mh$ = gtk_icon_theme_load_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_load_surface", icon_theme, icon_name, size, scale, for_window, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon_name, size, scale, for_window, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_lookup_by_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_lookup_by_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_by_gicon(GtkIconTheme *icon_theme, GIcon *icon, gint size, GtkIconLookupFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_lookup_by_gicon$descriptor() {
        return gtk_icon_theme_lookup_by_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_by_gicon(GtkIconTheme *icon_theme, GIcon *icon, gint size, GtkIconLookupFlags flags)
     * }
     */
    public static MethodHandle gtk_icon_theme_lookup_by_gicon$handle() {
        return gtk_icon_theme_lookup_by_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_by_gicon(GtkIconTheme *icon_theme, GIcon *icon, gint size, GtkIconLookupFlags flags)
     * }
     */
    public static MemorySegment gtk_icon_theme_lookup_by_gicon(MemorySegment icon_theme, MemorySegment icon, int size, int flags) {
        var mh$ = gtk_icon_theme_lookup_by_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_lookup_by_gicon", icon_theme, icon, size, flags);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon, size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_lookup_by_gicon_for_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_lookup_by_gicon_for_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_by_gicon_for_scale(GtkIconTheme *icon_theme, GIcon *icon, gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_lookup_by_gicon_for_scale$descriptor() {
        return gtk_icon_theme_lookup_by_gicon_for_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_by_gicon_for_scale(GtkIconTheme *icon_theme, GIcon *icon, gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static MethodHandle gtk_icon_theme_lookup_by_gicon_for_scale$handle() {
        return gtk_icon_theme_lookup_by_gicon_for_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_theme_lookup_by_gicon_for_scale(GtkIconTheme *icon_theme, GIcon *icon, gint size, gint scale, GtkIconLookupFlags flags)
     * }
     */
    public static MemorySegment gtk_icon_theme_lookup_by_gicon_for_scale(MemorySegment icon_theme, MemorySegment icon, int size, int scale, int flags) {
        var mh$ = gtk_icon_theme_lookup_by_gicon_for_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_lookup_by_gicon_for_scale", icon_theme, icon, size, scale, flags);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, icon, size, scale, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_list_icons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_list_icons"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_icon_theme_list_icons(GtkIconTheme *icon_theme, const gchar *context)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_list_icons$descriptor() {
        return gtk_icon_theme_list_icons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_icon_theme_list_icons(GtkIconTheme *icon_theme, const gchar *context)
     * }
     */
    public static MethodHandle gtk_icon_theme_list_icons$handle() {
        return gtk_icon_theme_list_icons.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_icon_theme_list_icons(GtkIconTheme *icon_theme, const gchar *context)
     * }
     */
    public static MemorySegment gtk_icon_theme_list_icons(MemorySegment icon_theme, MemorySegment context) {
        var mh$ = gtk_icon_theme_list_icons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_list_icons", icon_theme, context);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_list_contexts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_list_contexts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_icon_theme_list_contexts(GtkIconTheme *icon_theme)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_list_contexts$descriptor() {
        return gtk_icon_theme_list_contexts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_icon_theme_list_contexts(GtkIconTheme *icon_theme)
     * }
     */
    public static MethodHandle gtk_icon_theme_list_contexts$handle() {
        return gtk_icon_theme_list_contexts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_icon_theme_list_contexts(GtkIconTheme *icon_theme)
     * }
     */
    public static MemorySegment gtk_icon_theme_list_contexts(MemorySegment icon_theme) {
        var mh$ = gtk_icon_theme_list_contexts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_list_contexts", icon_theme);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_get_example_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_get_example_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_icon_theme_get_example_icon_name(GtkIconTheme *icon_theme)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_get_example_icon_name$descriptor() {
        return gtk_icon_theme_get_example_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_icon_theme_get_example_icon_name(GtkIconTheme *icon_theme)
     * }
     */
    public static MethodHandle gtk_icon_theme_get_example_icon_name$handle() {
        return gtk_icon_theme_get_example_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_icon_theme_get_example_icon_name(GtkIconTheme *icon_theme)
     * }
     */
    public static MemorySegment gtk_icon_theme_get_example_icon_name(MemorySegment icon_theme) {
        var mh$ = gtk_icon_theme_get_example_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_get_example_icon_name", icon_theme);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_rescan_if_needed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_rescan_if_needed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_theme_rescan_if_needed(GtkIconTheme *icon_theme)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_rescan_if_needed$descriptor() {
        return gtk_icon_theme_rescan_if_needed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_theme_rescan_if_needed(GtkIconTheme *icon_theme)
     * }
     */
    public static MethodHandle gtk_icon_theme_rescan_if_needed$handle() {
        return gtk_icon_theme_rescan_if_needed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_theme_rescan_if_needed(GtkIconTheme *icon_theme)
     * }
     */
    public static int gtk_icon_theme_rescan_if_needed(MemorySegment icon_theme) {
        var mh$ = gtk_icon_theme_rescan_if_needed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_rescan_if_needed", icon_theme);
            }
            return (int)mh$.invokeExact(icon_theme);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_theme_add_builtin_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_theme_add_builtin_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_add_builtin_icon(const gchar *icon_name, gint size, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_icon_theme_add_builtin_icon$descriptor() {
        return gtk_icon_theme_add_builtin_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_theme_add_builtin_icon(const gchar *icon_name, gint size, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_icon_theme_add_builtin_icon$handle() {
        return gtk_icon_theme_add_builtin_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_theme_add_builtin_icon(const gchar *icon_name, gint size, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_icon_theme_add_builtin_icon(MemorySegment icon_name, int size, MemorySegment pixbuf) {
        var mh$ = gtk_icon_theme_add_builtin_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_theme_add_builtin_icon", icon_name, size, pixbuf);
            }
            mh$.invokeExact(icon_name, size, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_info_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_type$descriptor() {
        return gtk_icon_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_info_get_type()
     * }
     */
    public static MethodHandle gtk_icon_info_get_type$handle() {
        return gtk_icon_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_info_get_type()
     * }
     */
    public static long gtk_icon_info_get_type() {
        var mh$ = gtk_icon_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_info_copy(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_copy$descriptor() {
        return gtk_icon_info_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_info_copy(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_copy$handle() {
        return gtk_icon_info_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_info_copy(GtkIconInfo *icon_info)
     * }
     */
    public static MemorySegment gtk_icon_info_copy(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_copy", icon_info);
            }
            return (MemorySegment)mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_free(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_free$descriptor() {
        return gtk_icon_info_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_free(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_free$handle() {
        return gtk_icon_info_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_info_free(GtkIconInfo *icon_info)
     * }
     */
    public static void gtk_icon_info_free(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_free", icon_info);
            }
            mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_new_for_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_new_for_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_info_new_for_pixbuf(GtkIconTheme *icon_theme, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_new_for_pixbuf$descriptor() {
        return gtk_icon_info_new_for_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_info_new_for_pixbuf(GtkIconTheme *icon_theme, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_icon_info_new_for_pixbuf$handle() {
        return gtk_icon_info_new_for_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconInfo *gtk_icon_info_new_for_pixbuf(GtkIconTheme *icon_theme, GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gtk_icon_info_new_for_pixbuf(MemorySegment icon_theme, MemorySegment pixbuf) {
        var mh$ = gtk_icon_info_new_for_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_new_for_pixbuf", icon_theme, pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(icon_theme, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_base_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_base_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_info_get_base_size(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_base_size$descriptor() {
        return gtk_icon_info_get_base_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_info_get_base_size(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_get_base_size$handle() {
        return gtk_icon_info_get_base_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_info_get_base_size(GtkIconInfo *icon_info)
     * }
     */
    public static int gtk_icon_info_get_base_size(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_get_base_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_base_size", icon_info);
            }
            return (int)mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_base_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_base_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_info_get_base_scale(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_base_scale$descriptor() {
        return gtk_icon_info_get_base_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_info_get_base_scale(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_get_base_scale$handle() {
        return gtk_icon_info_get_base_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_info_get_base_scale(GtkIconInfo *icon_info)
     * }
     */
    public static int gtk_icon_info_get_base_scale(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_get_base_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_base_scale", icon_info);
            }
            return (int)mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_info_get_filename(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_filename$descriptor() {
        return gtk_icon_info_get_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_info_get_filename(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_get_filename$handle() {
        return gtk_icon_info_get_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_info_get_filename(GtkIconInfo *icon_info)
     * }
     */
    public static MemorySegment gtk_icon_info_get_filename(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_get_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_filename", icon_info);
            }
            return (MemorySegment)mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_builtin_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_builtin_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_get_builtin_pixbuf(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_builtin_pixbuf$descriptor() {
        return gtk_icon_info_get_builtin_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_get_builtin_pixbuf(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_get_builtin_pixbuf$handle() {
        return gtk_icon_info_get_builtin_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_get_builtin_pixbuf(GtkIconInfo *icon_info)
     * }
     */
    public static MemorySegment gtk_icon_info_get_builtin_pixbuf(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_get_builtin_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_builtin_pixbuf", icon_info);
            }
            return (MemorySegment)mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_is_symbolic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_is_symbolic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_is_symbolic(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_is_symbolic$descriptor() {
        return gtk_icon_info_is_symbolic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_is_symbolic(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_is_symbolic$handle() {
        return gtk_icon_info_is_symbolic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_is_symbolic(GtkIconInfo *icon_info)
     * }
     */
    public static int gtk_icon_info_is_symbolic(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_is_symbolic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_is_symbolic", icon_info);
            }
            return (int)mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_icon(GtkIconInfo *icon_info, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_icon$descriptor() {
        return gtk_icon_info_load_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_icon(GtkIconInfo *icon_info, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_icon$handle() {
        return gtk_icon_info_load_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_icon(GtkIconInfo *icon_info, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_icon(MemorySegment icon_info, MemorySegment error) {
        var mh$ = gtk_icon_info_load_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_icon", icon_info, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_info_load_surface(GtkIconInfo *icon_info, GdkWindow *for_window, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_surface$descriptor() {
        return gtk_icon_info_load_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_info_load_surface(GtkIconInfo *icon_info, GdkWindow *for_window, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_surface$handle() {
        return gtk_icon_info_load_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_info_load_surface(GtkIconInfo *icon_info, GdkWindow *for_window, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_surface(MemorySegment icon_info, MemorySegment for_window, MemorySegment error) {
        var mh$ = gtk_icon_info_load_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_surface", icon_info, for_window, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, for_window, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_icon_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_icon_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_icon_async(GtkIconInfo *icon_info, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_icon_async$descriptor() {
        return gtk_icon_info_load_icon_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_icon_async(GtkIconInfo *icon_info, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_icon_info_load_icon_async$handle() {
        return gtk_icon_info_load_icon_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_icon_async(GtkIconInfo *icon_info, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gtk_icon_info_load_icon_async(MemorySegment icon_info, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_icon_info_load_icon_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_icon_async", icon_info, cancellable, callback, user_data);
            }
            mh$.invokeExact(icon_info, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_icon_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_icon_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_icon_finish(GtkIconInfo *icon_info, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_icon_finish$descriptor() {
        return gtk_icon_info_load_icon_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_icon_finish(GtkIconInfo *icon_info, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_icon_finish$handle() {
        return gtk_icon_info_load_icon_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_icon_finish(GtkIconInfo *icon_info, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_icon_finish(MemorySegment icon_info, MemorySegment res, MemorySegment error) {
        var mh$ = gtk_icon_info_load_icon_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_icon_finish", icon_info, res, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_symbolic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_symbolic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic(GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, gboolean *was_symbolic, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_symbolic$descriptor() {
        return gtk_icon_info_load_symbolic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic(GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_symbolic$handle() {
        return gtk_icon_info_load_symbolic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic(GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_symbolic(MemorySegment icon_info, MemorySegment fg, MemorySegment success_color, MemorySegment warning_color, MemorySegment error_color, MemorySegment was_symbolic, MemorySegment error) {
        var mh$ = gtk_icon_info_load_symbolic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_symbolic", icon_info, fg, success_color, warning_color, error_color, was_symbolic, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, fg, success_color, warning_color, error_color, was_symbolic, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_symbolic_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_symbolic_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_symbolic_async(GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_symbolic_async$descriptor() {
        return gtk_icon_info_load_symbolic_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_symbolic_async(GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_icon_info_load_symbolic_async$handle() {
        return gtk_icon_info_load_symbolic_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_symbolic_async(GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gtk_icon_info_load_symbolic_async(MemorySegment icon_info, MemorySegment fg, MemorySegment success_color, MemorySegment warning_color, MemorySegment error_color, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_icon_info_load_symbolic_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_symbolic_async", icon_info, fg, success_color, warning_color, error_color, cancellable, callback, user_data);
            }
            mh$.invokeExact(icon_info, fg, success_color, warning_color, error_color, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_symbolic_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_symbolic_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_finish(GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_symbolic_finish$descriptor() {
        return gtk_icon_info_load_symbolic_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_finish(GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_symbolic_finish$handle() {
        return gtk_icon_info_load_symbolic_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_finish(GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_symbolic_finish(MemorySegment icon_info, MemorySegment res, MemorySegment was_symbolic, MemorySegment error) {
        var mh$ = gtk_icon_info_load_symbolic_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_symbolic_finish", icon_info, res, was_symbolic, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, res, was_symbolic, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_symbolic_for_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_symbolic_for_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_context(GtkIconInfo *icon_info, GtkStyleContext *context, gboolean *was_symbolic, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_symbolic_for_context$descriptor() {
        return gtk_icon_info_load_symbolic_for_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_context(GtkIconInfo *icon_info, GtkStyleContext *context, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_symbolic_for_context$handle() {
        return gtk_icon_info_load_symbolic_for_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_context(GtkIconInfo *icon_info, GtkStyleContext *context, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_symbolic_for_context(MemorySegment icon_info, MemorySegment context, MemorySegment was_symbolic, MemorySegment error) {
        var mh$ = gtk_icon_info_load_symbolic_for_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_symbolic_for_context", icon_info, context, was_symbolic, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, context, was_symbolic, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_symbolic_for_context_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_symbolic_for_context_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_symbolic_for_context_async(GtkIconInfo *icon_info, GtkStyleContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_symbolic_for_context_async$descriptor() {
        return gtk_icon_info_load_symbolic_for_context_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_symbolic_for_context_async(GtkIconInfo *icon_info, GtkStyleContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_icon_info_load_symbolic_for_context_async$handle() {
        return gtk_icon_info_load_symbolic_for_context_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_info_load_symbolic_for_context_async(GtkIconInfo *icon_info, GtkStyleContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gtk_icon_info_load_symbolic_for_context_async(MemorySegment icon_info, MemorySegment context, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_icon_info_load_symbolic_for_context_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_symbolic_for_context_async", icon_info, context, cancellable, callback, user_data);
            }
            mh$.invokeExact(icon_info, context, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_symbolic_for_context_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_symbolic_for_context_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_context_finish(GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_symbolic_for_context_finish$descriptor() {
        return gtk_icon_info_load_symbolic_for_context_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_context_finish(GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_symbolic_for_context_finish$handle() {
        return gtk_icon_info_load_symbolic_for_context_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_context_finish(GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_symbolic_for_context_finish(MemorySegment icon_info, MemorySegment res, MemorySegment was_symbolic, MemorySegment error) {
        var mh$ = gtk_icon_info_load_symbolic_for_context_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_symbolic_for_context_finish", icon_info, res, was_symbolic, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, res, was_symbolic, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_load_symbolic_for_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_load_symbolic_for_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_style(GtkIconInfo *icon_info, GtkStyle *style, GtkStateType state, gboolean *was_symbolic, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_load_symbolic_for_style$descriptor() {
        return gtk_icon_info_load_symbolic_for_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_style(GtkIconInfo *icon_info, GtkStyle *style, GtkStateType state, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MethodHandle gtk_icon_info_load_symbolic_for_style$handle() {
        return gtk_icon_info_load_symbolic_for_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_icon_info_load_symbolic_for_style(GtkIconInfo *icon_info, GtkStyle *style, GtkStateType state, gboolean *was_symbolic, GError **error)
     * }
     */
    public static MemorySegment gtk_icon_info_load_symbolic_for_style(MemorySegment icon_info, MemorySegment style, int state, MemorySegment was_symbolic, MemorySegment error) {
        var mh$ = gtk_icon_info_load_symbolic_for_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_load_symbolic_for_style", icon_info, style, state, was_symbolic, error);
            }
            return (MemorySegment)mh$.invokeExact(icon_info, style, state, was_symbolic, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_set_raw_coordinates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_set_raw_coordinates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_set_raw_coordinates(GtkIconInfo *icon_info, gboolean raw_coordinates)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_set_raw_coordinates$descriptor() {
        return gtk_icon_info_set_raw_coordinates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_info_set_raw_coordinates(GtkIconInfo *icon_info, gboolean raw_coordinates)
     * }
     */
    public static MethodHandle gtk_icon_info_set_raw_coordinates$handle() {
        return gtk_icon_info_set_raw_coordinates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_info_set_raw_coordinates(GtkIconInfo *icon_info, gboolean raw_coordinates)
     * }
     */
    public static void gtk_icon_info_set_raw_coordinates(MemorySegment icon_info, int raw_coordinates) {
        var mh$ = gtk_icon_info_set_raw_coordinates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_set_raw_coordinates", icon_info, raw_coordinates);
            }
            mh$.invokeExact(icon_info, raw_coordinates);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_embedded_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_embedded_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_get_embedded_rect(GtkIconInfo *icon_info, GdkRectangle *rectangle)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_embedded_rect$descriptor() {
        return gtk_icon_info_get_embedded_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_get_embedded_rect(GtkIconInfo *icon_info, GdkRectangle *rectangle)
     * }
     */
    public static MethodHandle gtk_icon_info_get_embedded_rect$handle() {
        return gtk_icon_info_get_embedded_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_get_embedded_rect(GtkIconInfo *icon_info, GdkRectangle *rectangle)
     * }
     */
    public static int gtk_icon_info_get_embedded_rect(MemorySegment icon_info, MemorySegment rectangle) {
        var mh$ = gtk_icon_info_get_embedded_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_embedded_rect", icon_info, rectangle);
            }
            return (int)mh$.invokeExact(icon_info, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_attach_points {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_attach_points"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_get_attach_points(GtkIconInfo *icon_info, GdkPoint **points, gint *n_points)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_attach_points$descriptor() {
        return gtk_icon_info_get_attach_points.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_get_attach_points(GtkIconInfo *icon_info, GdkPoint **points, gint *n_points)
     * }
     */
    public static MethodHandle gtk_icon_info_get_attach_points$handle() {
        return gtk_icon_info_get_attach_points.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_info_get_attach_points(GtkIconInfo *icon_info, GdkPoint **points, gint *n_points)
     * }
     */
    public static int gtk_icon_info_get_attach_points(MemorySegment icon_info, MemorySegment points, MemorySegment n_points) {
        var mh$ = gtk_icon_info_get_attach_points.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_attach_points", icon_info, points, n_points);
            }
            return (int)mh$.invokeExact(icon_info, points, n_points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_info_get_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_info_get_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_info_get_display_name(GtkIconInfo *icon_info)
     * }
     */
    public static FunctionDescriptor gtk_icon_info_get_display_name$descriptor() {
        return gtk_icon_info_get_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_info_get_display_name(GtkIconInfo *icon_info)
     * }
     */
    public static MethodHandle gtk_icon_info_get_display_name$handle() {
        return gtk_icon_info_get_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_icon_info_get_display_name(GtkIconInfo *icon_info)
     * }
     */
    public static MemorySegment gtk_icon_info_get_display_name(MemorySegment icon_info) {
        var mh$ = gtk_icon_info_get_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_info_get_display_name", icon_info);
            }
            return (MemorySegment)mh$.invokeExact(icon_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tooltip_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tooltip_get_type$descriptor() {
        return gtk_tooltip_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tooltip_get_type()
     * }
     */
    public static MethodHandle gtk_tooltip_get_type$handle() {
        return gtk_tooltip_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tooltip_get_type()
     * }
     */
    public static long gtk_tooltip_get_type() {
        var mh$ = gtk_tooltip_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_markup(GtkTooltip *tooltip, const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_markup$descriptor() {
        return gtk_tooltip_set_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_markup(GtkTooltip *tooltip, const gchar *markup)
     * }
     */
    public static MethodHandle gtk_tooltip_set_markup$handle() {
        return gtk_tooltip_set_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_markup(GtkTooltip *tooltip, const gchar *markup)
     * }
     */
    public static void gtk_tooltip_set_markup(MemorySegment tooltip, MemorySegment markup) {
        var mh$ = gtk_tooltip_set_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_markup", tooltip, markup);
            }
            mh$.invokeExact(tooltip, markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_text(GtkTooltip *tooltip, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_text$descriptor() {
        return gtk_tooltip_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_text(GtkTooltip *tooltip, const gchar *text)
     * }
     */
    public static MethodHandle gtk_tooltip_set_text$handle() {
        return gtk_tooltip_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_text(GtkTooltip *tooltip, const gchar *text)
     * }
     */
    public static void gtk_tooltip_set_text(MemorySegment tooltip, MemorySegment text) {
        var mh$ = gtk_tooltip_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_text", tooltip, text);
            }
            mh$.invokeExact(tooltip, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon(GtkTooltip *tooltip, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_icon$descriptor() {
        return gtk_tooltip_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon(GtkTooltip *tooltip, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_tooltip_set_icon$handle() {
        return gtk_tooltip_set_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon(GtkTooltip *tooltip, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_tooltip_set_icon(MemorySegment tooltip, MemorySegment pixbuf) {
        var mh$ = gtk_tooltip_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_icon", tooltip, pixbuf);
            }
            mh$.invokeExact(tooltip, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_icon_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_icon_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_stock(GtkTooltip *tooltip, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_icon_from_stock$descriptor() {
        return gtk_tooltip_set_icon_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_stock(GtkTooltip *tooltip, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_tooltip_set_icon_from_stock$handle() {
        return gtk_tooltip_set_icon_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_stock(GtkTooltip *tooltip, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static void gtk_tooltip_set_icon_from_stock(MemorySegment tooltip, MemorySegment stock_id, int size) {
        var mh$ = gtk_tooltip_set_icon_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_icon_from_stock", tooltip, stock_id, size);
            }
            mh$.invokeExact(tooltip, stock_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_icon_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_icon_from_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_icon_name(GtkTooltip *tooltip, const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_icon_from_icon_name$descriptor() {
        return gtk_tooltip_set_icon_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_icon_name(GtkTooltip *tooltip, const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_tooltip_set_icon_from_icon_name$handle() {
        return gtk_tooltip_set_icon_from_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_icon_name(GtkTooltip *tooltip, const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static void gtk_tooltip_set_icon_from_icon_name(MemorySegment tooltip, MemorySegment icon_name, int size) {
        var mh$ = gtk_tooltip_set_icon_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_icon_from_icon_name", tooltip, icon_name, size);
            }
            mh$.invokeExact(tooltip, icon_name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_icon_from_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_icon_from_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_gicon(GtkTooltip *tooltip, GIcon *gicon, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_icon_from_gicon$descriptor() {
        return gtk_tooltip_set_icon_from_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_gicon(GtkTooltip *tooltip, GIcon *gicon, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_tooltip_set_icon_from_gicon$handle() {
        return gtk_tooltip_set_icon_from_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_icon_from_gicon(GtkTooltip *tooltip, GIcon *gicon, GtkIconSize size)
     * }
     */
    public static void gtk_tooltip_set_icon_from_gicon(MemorySegment tooltip, MemorySegment gicon, int size) {
        var mh$ = gtk_tooltip_set_icon_from_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_icon_from_gicon", tooltip, gicon, size);
            }
            mh$.invokeExact(tooltip, gicon, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_custom(GtkTooltip *tooltip, GtkWidget *custom_widget)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_custom$descriptor() {
        return gtk_tooltip_set_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_custom(GtkTooltip *tooltip, GtkWidget *custom_widget)
     * }
     */
    public static MethodHandle gtk_tooltip_set_custom$handle() {
        return gtk_tooltip_set_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_custom(GtkTooltip *tooltip, GtkWidget *custom_widget)
     * }
     */
    public static void gtk_tooltip_set_custom(MemorySegment tooltip, MemorySegment custom_widget) {
        var mh$ = gtk_tooltip_set_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_custom", tooltip, custom_widget);
            }
            mh$.invokeExact(tooltip, custom_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_set_tip_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_set_tip_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_tip_area(GtkTooltip *tooltip, const GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_set_tip_area$descriptor() {
        return gtk_tooltip_set_tip_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_tip_area(GtkTooltip *tooltip, const GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_tooltip_set_tip_area$handle() {
        return gtk_tooltip_set_tip_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_set_tip_area(GtkTooltip *tooltip, const GdkRectangle *rect)
     * }
     */
    public static void gtk_tooltip_set_tip_area(MemorySegment tooltip, MemorySegment rect) {
        var mh$ = gtk_tooltip_set_tip_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_set_tip_area", tooltip, rect);
            }
            mh$.invokeExact(tooltip, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tooltip_trigger_tooltip_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tooltip_trigger_tooltip_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_trigger_tooltip_query(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gtk_tooltip_trigger_tooltip_query$descriptor() {
        return gtk_tooltip_trigger_tooltip_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tooltip_trigger_tooltip_query(GdkDisplay *display)
     * }
     */
    public static MethodHandle gtk_tooltip_trigger_tooltip_query$handle() {
        return gtk_tooltip_trigger_tooltip_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tooltip_trigger_tooltip_query(GdkDisplay *display)
     * }
     */
    public static void gtk_tooltip_trigger_tooltip_query(MemorySegment display) {
        var mh$ = gtk_tooltip_trigger_tooltip_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tooltip_trigger_tooltip_query", display);
            }
            mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_ICON_VIEW_NO_DROP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_VIEW_NO_DROP = 0
     * }
     */
    public static int GTK_ICON_VIEW_NO_DROP() {
        return GTK_ICON_VIEW_NO_DROP;
    }
    private static final int GTK_ICON_VIEW_DROP_INTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_VIEW_DROP_INTO = 1
     * }
     */
    public static int GTK_ICON_VIEW_DROP_INTO() {
        return GTK_ICON_VIEW_DROP_INTO;
    }
    private static final int GTK_ICON_VIEW_DROP_LEFT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_VIEW_DROP_LEFT = 2
     * }
     */
    public static int GTK_ICON_VIEW_DROP_LEFT() {
        return GTK_ICON_VIEW_DROP_LEFT;
    }
    private static final int GTK_ICON_VIEW_DROP_RIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_VIEW_DROP_RIGHT = 3
     * }
     */
    public static int GTK_ICON_VIEW_DROP_RIGHT() {
        return GTK_ICON_VIEW_DROP_RIGHT;
    }
    private static final int GTK_ICON_VIEW_DROP_ABOVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_VIEW_DROP_ABOVE = 4
     * }
     */
    public static int GTK_ICON_VIEW_DROP_ABOVE() {
        return GTK_ICON_VIEW_DROP_ABOVE;
    }
    private static final int GTK_ICON_VIEW_DROP_BELOW = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_VIEW_DROP_BELOW = 5
     * }
     */
    public static int GTK_ICON_VIEW_DROP_BELOW() {
        return GTK_ICON_VIEW_DROP_BELOW;
    }

    private static class gtk_icon_view_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_icon_view_get_type()
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_type$descriptor() {
        return gtk_icon_view_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_icon_view_get_type()
     * }
     */
    public static MethodHandle gtk_icon_view_get_type$handle() {
        return gtk_icon_view_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_icon_view_get_type()
     * }
     */
    public static long gtk_icon_view_get_type() {
        var mh$ = gtk_icon_view_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new()
     * }
     */
    public static FunctionDescriptor gtk_icon_view_new$descriptor() {
        return gtk_icon_view_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new()
     * }
     */
    public static MethodHandle gtk_icon_view_new$handle() {
        return gtk_icon_view_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new()
     * }
     */
    public static MemorySegment gtk_icon_view_new() {
        var mh$ = gtk_icon_view_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_new_with_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_new_with_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new_with_area(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_new_with_area$descriptor() {
        return gtk_icon_view_new_with_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new_with_area(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_icon_view_new_with_area$handle() {
        return gtk_icon_view_new_with_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new_with_area(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_icon_view_new_with_area(MemorySegment area) {
        var mh$ = gtk_icon_view_new_with_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_new_with_area", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_new_with_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_new_with_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new_with_model(GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_new_with_model$descriptor() {
        return gtk_icon_view_new_with_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new_with_model(GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_icon_view_new_with_model$handle() {
        return gtk_icon_view_new_with_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_icon_view_new_with_model(GtkTreeModel *model)
     * }
     */
    public static MemorySegment gtk_icon_view_new_with_model(MemorySegment model) {
        var mh$ = gtk_icon_view_new_with_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_new_with_model", model);
            }
            return (MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_model(GtkIconView *icon_view, GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_model$descriptor() {
        return gtk_icon_view_set_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_model(GtkIconView *icon_view, GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_icon_view_set_model$handle() {
        return gtk_icon_view_set_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_model(GtkIconView *icon_view, GtkTreeModel *model)
     * }
     */
    public static void gtk_icon_view_set_model(MemorySegment icon_view, MemorySegment model) {
        var mh$ = gtk_icon_view_set_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_model", icon_view, model);
            }
            mh$.invokeExact(icon_view, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_icon_view_get_model(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_model$descriptor() {
        return gtk_icon_view_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_icon_view_get_model(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_model$handle() {
        return gtk_icon_view_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_icon_view_get_model(GtkIconView *icon_view)
     * }
     */
    public static MemorySegment gtk_icon_view_get_model(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_model", icon_view);
            }
            return (MemorySegment)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_text_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_text_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_text_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_text_column$descriptor() {
        return gtk_icon_view_set_text_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_text_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static MethodHandle gtk_icon_view_set_text_column$handle() {
        return gtk_icon_view_set_text_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_text_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static void gtk_icon_view_set_text_column(MemorySegment icon_view, int column) {
        var mh$ = gtk_icon_view_set_text_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_text_column", icon_view, column);
            }
            mh$.invokeExact(icon_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_text_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_text_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_text_column(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_text_column$descriptor() {
        return gtk_icon_view_get_text_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_text_column(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_text_column$handle() {
        return gtk_icon_view_get_text_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_text_column(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_text_column(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_text_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_text_column", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_markup_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_markup_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_markup_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_markup_column$descriptor() {
        return gtk_icon_view_set_markup_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_markup_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static MethodHandle gtk_icon_view_set_markup_column$handle() {
        return gtk_icon_view_set_markup_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_markup_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static void gtk_icon_view_set_markup_column(MemorySegment icon_view, int column) {
        var mh$ = gtk_icon_view_set_markup_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_markup_column", icon_view, column);
            }
            mh$.invokeExact(icon_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_markup_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_markup_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_markup_column(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_markup_column$descriptor() {
        return gtk_icon_view_get_markup_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_markup_column(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_markup_column$handle() {
        return gtk_icon_view_get_markup_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_markup_column(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_markup_column(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_markup_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_markup_column", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_pixbuf_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_pixbuf_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_pixbuf_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_pixbuf_column$descriptor() {
        return gtk_icon_view_set_pixbuf_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_pixbuf_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static MethodHandle gtk_icon_view_set_pixbuf_column$handle() {
        return gtk_icon_view_set_pixbuf_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_pixbuf_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static void gtk_icon_view_set_pixbuf_column(MemorySegment icon_view, int column) {
        var mh$ = gtk_icon_view_set_pixbuf_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_pixbuf_column", icon_view, column);
            }
            mh$.invokeExact(icon_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_pixbuf_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_pixbuf_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_pixbuf_column(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_pixbuf_column$descriptor() {
        return gtk_icon_view_get_pixbuf_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_pixbuf_column(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_pixbuf_column$handle() {
        return gtk_icon_view_get_pixbuf_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_pixbuf_column(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_pixbuf_column(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_pixbuf_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_pixbuf_column", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_item_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_item_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_orientation(GtkIconView *icon_view, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_item_orientation$descriptor() {
        return gtk_icon_view_set_item_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_orientation(GtkIconView *icon_view, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_icon_view_set_item_orientation$handle() {
        return gtk_icon_view_set_item_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_orientation(GtkIconView *icon_view, GtkOrientation orientation)
     * }
     */
    public static void gtk_icon_view_set_item_orientation(MemorySegment icon_view, int orientation) {
        var mh$ = gtk_icon_view_set_item_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_item_orientation", icon_view, orientation);
            }
            mh$.invokeExact(icon_view, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_item_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_item_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_icon_view_get_item_orientation(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_item_orientation$descriptor() {
        return gtk_icon_view_get_item_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_icon_view_get_item_orientation(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_item_orientation$handle() {
        return gtk_icon_view_get_item_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkOrientation gtk_icon_view_get_item_orientation(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_item_orientation(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_item_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_item_orientation", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_columns"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_columns(GtkIconView *icon_view, gint columns)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_columns$descriptor() {
        return gtk_icon_view_set_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_columns(GtkIconView *icon_view, gint columns)
     * }
     */
    public static MethodHandle gtk_icon_view_set_columns$handle() {
        return gtk_icon_view_set_columns.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_columns(GtkIconView *icon_view, gint columns)
     * }
     */
    public static void gtk_icon_view_set_columns(MemorySegment icon_view, int columns) {
        var mh$ = gtk_icon_view_set_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_columns", icon_view, columns);
            }
            mh$.invokeExact(icon_view, columns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_columns"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_columns(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_columns$descriptor() {
        return gtk_icon_view_get_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_columns(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_columns$handle() {
        return gtk_icon_view_get_columns.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_columns(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_columns(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_columns", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_item_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_item_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_width(GtkIconView *icon_view, gint item_width)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_item_width$descriptor() {
        return gtk_icon_view_set_item_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_width(GtkIconView *icon_view, gint item_width)
     * }
     */
    public static MethodHandle gtk_icon_view_set_item_width$handle() {
        return gtk_icon_view_set_item_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_width(GtkIconView *icon_view, gint item_width)
     * }
     */
    public static void gtk_icon_view_set_item_width(MemorySegment icon_view, int item_width) {
        var mh$ = gtk_icon_view_set_item_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_item_width", icon_view, item_width);
            }
            mh$.invokeExact(icon_view, item_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_item_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_item_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_width(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_item_width$descriptor() {
        return gtk_icon_view_get_item_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_width(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_item_width$handle() {
        return gtk_icon_view_get_item_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_width(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_item_width(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_item_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_item_width", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_spacing(GtkIconView *icon_view, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_spacing$descriptor() {
        return gtk_icon_view_set_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_spacing(GtkIconView *icon_view, gint spacing)
     * }
     */
    public static MethodHandle gtk_icon_view_set_spacing$handle() {
        return gtk_icon_view_set_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_spacing(GtkIconView *icon_view, gint spacing)
     * }
     */
    public static void gtk_icon_view_set_spacing(MemorySegment icon_view, int spacing) {
        var mh$ = gtk_icon_view_set_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_spacing", icon_view, spacing);
            }
            mh$.invokeExact(icon_view, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_spacing(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_spacing$descriptor() {
        return gtk_icon_view_get_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_spacing(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_spacing$handle() {
        return gtk_icon_view_get_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_spacing(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_spacing(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_spacing", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_row_spacing(GtkIconView *icon_view, gint row_spacing)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_row_spacing$descriptor() {
        return gtk_icon_view_set_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_row_spacing(GtkIconView *icon_view, gint row_spacing)
     * }
     */
    public static MethodHandle gtk_icon_view_set_row_spacing$handle() {
        return gtk_icon_view_set_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_row_spacing(GtkIconView *icon_view, gint row_spacing)
     * }
     */
    public static void gtk_icon_view_set_row_spacing(MemorySegment icon_view, int row_spacing) {
        var mh$ = gtk_icon_view_set_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_row_spacing", icon_view, row_spacing);
            }
            mh$.invokeExact(icon_view, row_spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_row_spacing(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_row_spacing$descriptor() {
        return gtk_icon_view_get_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_row_spacing(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_row_spacing$handle() {
        return gtk_icon_view_get_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_row_spacing(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_row_spacing(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_row_spacing", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_column_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_column_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_column_spacing(GtkIconView *icon_view, gint column_spacing)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_column_spacing$descriptor() {
        return gtk_icon_view_set_column_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_column_spacing(GtkIconView *icon_view, gint column_spacing)
     * }
     */
    public static MethodHandle gtk_icon_view_set_column_spacing$handle() {
        return gtk_icon_view_set_column_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_column_spacing(GtkIconView *icon_view, gint column_spacing)
     * }
     */
    public static void gtk_icon_view_set_column_spacing(MemorySegment icon_view, int column_spacing) {
        var mh$ = gtk_icon_view_set_column_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_column_spacing", icon_view, column_spacing);
            }
            mh$.invokeExact(icon_view, column_spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_column_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_column_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_column_spacing(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_column_spacing$descriptor() {
        return gtk_icon_view_get_column_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_column_spacing(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_column_spacing$handle() {
        return gtk_icon_view_get_column_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_column_spacing(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_column_spacing(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_column_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_column_spacing", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_margin(GtkIconView *icon_view, gint margin)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_margin$descriptor() {
        return gtk_icon_view_set_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_margin(GtkIconView *icon_view, gint margin)
     * }
     */
    public static MethodHandle gtk_icon_view_set_margin$handle() {
        return gtk_icon_view_set_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_margin(GtkIconView *icon_view, gint margin)
     * }
     */
    public static void gtk_icon_view_set_margin(MemorySegment icon_view, int margin) {
        var mh$ = gtk_icon_view_set_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_margin", icon_view, margin);
            }
            mh$.invokeExact(icon_view, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_margin(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_margin$descriptor() {
        return gtk_icon_view_get_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_margin(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_margin$handle() {
        return gtk_icon_view_get_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_margin(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_margin(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_margin", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_item_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_item_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_padding(GtkIconView *icon_view, gint item_padding)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_item_padding$descriptor() {
        return gtk_icon_view_set_item_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_padding(GtkIconView *icon_view, gint item_padding)
     * }
     */
    public static MethodHandle gtk_icon_view_set_item_padding$handle() {
        return gtk_icon_view_set_item_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_item_padding(GtkIconView *icon_view, gint item_padding)
     * }
     */
    public static void gtk_icon_view_set_item_padding(MemorySegment icon_view, int item_padding) {
        var mh$ = gtk_icon_view_set_item_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_item_padding", icon_view, item_padding);
            }
            mh$.invokeExact(icon_view, item_padding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_item_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_item_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_padding(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_item_padding$descriptor() {
        return gtk_icon_view_get_item_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_padding(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_item_padding$handle() {
        return gtk_icon_view_get_item_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_padding(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_item_padding(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_item_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_item_padding", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_path_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_path_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_icon_view_get_path_at_pos(GtkIconView *icon_view, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_path_at_pos$descriptor() {
        return gtk_icon_view_get_path_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_icon_view_get_path_at_pos(GtkIconView *icon_view, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_icon_view_get_path_at_pos$handle() {
        return gtk_icon_view_get_path_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_icon_view_get_path_at_pos(GtkIconView *icon_view, gint x, gint y)
     * }
     */
    public static MemorySegment gtk_icon_view_get_path_at_pos(MemorySegment icon_view, int x, int y) {
        var mh$ = gtk_icon_view_get_path_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_path_at_pos", icon_view, x, y);
            }
            return (MemorySegment)mh$.invokeExact(icon_view, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_item_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_item_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_item_at_pos(GtkIconView *icon_view, gint x, gint y, GtkTreePath **path, GtkCellRenderer **cell)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_item_at_pos$descriptor() {
        return gtk_icon_view_get_item_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_item_at_pos(GtkIconView *icon_view, gint x, gint y, GtkTreePath **path, GtkCellRenderer **cell)
     * }
     */
    public static MethodHandle gtk_icon_view_get_item_at_pos$handle() {
        return gtk_icon_view_get_item_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_item_at_pos(GtkIconView *icon_view, gint x, gint y, GtkTreePath **path, GtkCellRenderer **cell)
     * }
     */
    public static int gtk_icon_view_get_item_at_pos(MemorySegment icon_view, int x, int y, MemorySegment path, MemorySegment cell) {
        var mh$ = gtk_icon_view_get_item_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_item_at_pos", icon_view, x, y, path, cell);
            }
            return (int)mh$.invokeExact(icon_view, x, y, path, cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_visible_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_visible_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_visible_range(GtkIconView *icon_view, GtkTreePath **start_path, GtkTreePath **end_path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_visible_range$descriptor() {
        return gtk_icon_view_get_visible_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_visible_range(GtkIconView *icon_view, GtkTreePath **start_path, GtkTreePath **end_path)
     * }
     */
    public static MethodHandle gtk_icon_view_get_visible_range$handle() {
        return gtk_icon_view_get_visible_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_visible_range(GtkIconView *icon_view, GtkTreePath **start_path, GtkTreePath **end_path)
     * }
     */
    public static int gtk_icon_view_get_visible_range(MemorySegment icon_view, MemorySegment start_path, MemorySegment end_path) {
        var mh$ = gtk_icon_view_get_visible_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_visible_range", icon_view, start_path, end_path);
            }
            return (int)mh$.invokeExact(icon_view, start_path, end_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_activate_on_single_click(GtkIconView *icon_view, gboolean single)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_activate_on_single_click$descriptor() {
        return gtk_icon_view_set_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_activate_on_single_click(GtkIconView *icon_view, gboolean single)
     * }
     */
    public static MethodHandle gtk_icon_view_set_activate_on_single_click$handle() {
        return gtk_icon_view_set_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_activate_on_single_click(GtkIconView *icon_view, gboolean single)
     * }
     */
    public static void gtk_icon_view_set_activate_on_single_click(MemorySegment icon_view, int single) {
        var mh$ = gtk_icon_view_set_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_activate_on_single_click", icon_view, single);
            }
            mh$.invokeExact(icon_view, single);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_activate_on_single_click(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_activate_on_single_click$descriptor() {
        return gtk_icon_view_get_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_activate_on_single_click(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_activate_on_single_click$handle() {
        return gtk_icon_view_get_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_activate_on_single_click(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_activate_on_single_click(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_activate_on_single_click", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_selected_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_selected_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_selected_foreach(GtkIconView *icon_view, GtkIconViewForeachFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_selected_foreach$descriptor() {
        return gtk_icon_view_selected_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_selected_foreach(GtkIconView *icon_view, GtkIconViewForeachFunc func, gpointer data)
     * }
     */
    public static MethodHandle gtk_icon_view_selected_foreach$handle() {
        return gtk_icon_view_selected_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_selected_foreach(GtkIconView *icon_view, GtkIconViewForeachFunc func, gpointer data)
     * }
     */
    public static void gtk_icon_view_selected_foreach(MemorySegment icon_view, MemorySegment func, MemorySegment data) {
        var mh$ = gtk_icon_view_selected_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_selected_foreach", icon_view, func, data);
            }
            mh$.invokeExact(icon_view, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_selection_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_selection_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_selection_mode(GtkIconView *icon_view, GtkSelectionMode mode)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_selection_mode$descriptor() {
        return gtk_icon_view_set_selection_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_selection_mode(GtkIconView *icon_view, GtkSelectionMode mode)
     * }
     */
    public static MethodHandle gtk_icon_view_set_selection_mode$handle() {
        return gtk_icon_view_set_selection_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_selection_mode(GtkIconView *icon_view, GtkSelectionMode mode)
     * }
     */
    public static void gtk_icon_view_set_selection_mode(MemorySegment icon_view, int mode) {
        var mh$ = gtk_icon_view_set_selection_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_selection_mode", icon_view, mode);
            }
            mh$.invokeExact(icon_view, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_selection_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_selection_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_icon_view_get_selection_mode(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_selection_mode$descriptor() {
        return gtk_icon_view_get_selection_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_icon_view_get_selection_mode(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_selection_mode$handle() {
        return gtk_icon_view_get_selection_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_icon_view_get_selection_mode(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_selection_mode(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_selection_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_selection_mode", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_select_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_select_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_select_path(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_select_path$descriptor() {
        return gtk_icon_view_select_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_select_path(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_select_path$handle() {
        return gtk_icon_view_select_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_select_path(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static void gtk_icon_view_select_path(MemorySegment icon_view, MemorySegment path) {
        var mh$ = gtk_icon_view_select_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_select_path", icon_view, path);
            }
            mh$.invokeExact(icon_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_unselect_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_unselect_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unselect_path(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_unselect_path$descriptor() {
        return gtk_icon_view_unselect_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unselect_path(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_unselect_path$handle() {
        return gtk_icon_view_unselect_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_unselect_path(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static void gtk_icon_view_unselect_path(MemorySegment icon_view, MemorySegment path) {
        var mh$ = gtk_icon_view_unselect_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_unselect_path", icon_view, path);
            }
            mh$.invokeExact(icon_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_path_is_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_path_is_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_path_is_selected(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_path_is_selected$descriptor() {
        return gtk_icon_view_path_is_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_path_is_selected(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_path_is_selected$handle() {
        return gtk_icon_view_path_is_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_path_is_selected(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static int gtk_icon_view_path_is_selected(MemorySegment icon_view, MemorySegment path) {
        var mh$ = gtk_icon_view_path_is_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_path_is_selected", icon_view, path);
            }
            return (int)mh$.invokeExact(icon_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_item_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_item_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_row(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_item_row$descriptor() {
        return gtk_icon_view_get_item_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_row(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_get_item_row$handle() {
        return gtk_icon_view_get_item_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_row(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static int gtk_icon_view_get_item_row(MemorySegment icon_view, MemorySegment path) {
        var mh$ = gtk_icon_view_get_item_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_item_row", icon_view, path);
            }
            return (int)mh$.invokeExact(icon_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_item_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_item_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_column(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_item_column$descriptor() {
        return gtk_icon_view_get_item_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_column(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_get_item_column$handle() {
        return gtk_icon_view_get_item_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_item_column(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static int gtk_icon_view_get_item_column(MemorySegment icon_view, MemorySegment path) {
        var mh$ = gtk_icon_view_get_item_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_item_column", icon_view, path);
            }
            return (int)mh$.invokeExact(icon_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_selected_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_selected_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_icon_view_get_selected_items(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_selected_items$descriptor() {
        return gtk_icon_view_get_selected_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_icon_view_get_selected_items(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_selected_items$handle() {
        return gtk_icon_view_get_selected_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_icon_view_get_selected_items(GtkIconView *icon_view)
     * }
     */
    public static MemorySegment gtk_icon_view_get_selected_items(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_selected_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_selected_items", icon_view);
            }
            return (MemorySegment)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_select_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_select_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_select_all(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_select_all$descriptor() {
        return gtk_icon_view_select_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_select_all(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_select_all$handle() {
        return gtk_icon_view_select_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_select_all(GtkIconView *icon_view)
     * }
     */
    public static void gtk_icon_view_select_all(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_select_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_select_all", icon_view);
            }
            mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_unselect_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_unselect_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unselect_all(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_unselect_all$descriptor() {
        return gtk_icon_view_unselect_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unselect_all(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_unselect_all$handle() {
        return gtk_icon_view_unselect_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_unselect_all(GtkIconView *icon_view)
     * }
     */
    public static void gtk_icon_view_unselect_all(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_unselect_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_unselect_all", icon_view);
            }
            mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_item_activated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_item_activated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_item_activated(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_item_activated$descriptor() {
        return gtk_icon_view_item_activated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_item_activated(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_item_activated$handle() {
        return gtk_icon_view_item_activated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_item_activated(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static void gtk_icon_view_item_activated(MemorySegment icon_view, MemorySegment path) {
        var mh$ = gtk_icon_view_item_activated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_item_activated", icon_view, path);
            }
            mh$.invokeExact(icon_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_cursor(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, gboolean start_editing)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_cursor$descriptor() {
        return gtk_icon_view_set_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_cursor(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, gboolean start_editing)
     * }
     */
    public static MethodHandle gtk_icon_view_set_cursor$handle() {
        return gtk_icon_view_set_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_cursor(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, gboolean start_editing)
     * }
     */
    public static void gtk_icon_view_set_cursor(MemorySegment icon_view, MemorySegment path, MemorySegment cell, int start_editing) {
        var mh$ = gtk_icon_view_set_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_cursor", icon_view, path, cell, start_editing);
            }
            mh$.invokeExact(icon_view, path, cell, start_editing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_cursor(GtkIconView *icon_view, GtkTreePath **path, GtkCellRenderer **cell)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_cursor$descriptor() {
        return gtk_icon_view_get_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_cursor(GtkIconView *icon_view, GtkTreePath **path, GtkCellRenderer **cell)
     * }
     */
    public static MethodHandle gtk_icon_view_get_cursor$handle() {
        return gtk_icon_view_get_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_cursor(GtkIconView *icon_view, GtkTreePath **path, GtkCellRenderer **cell)
     * }
     */
    public static int gtk_icon_view_get_cursor(MemorySegment icon_view, MemorySegment path, MemorySegment cell) {
        var mh$ = gtk_icon_view_get_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_cursor", icon_view, path, cell);
            }
            return (int)mh$.invokeExact(icon_view, path, cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_scroll_to_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_scroll_to_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_scroll_to_path(GtkIconView *icon_view, GtkTreePath *path, gboolean use_align, gfloat row_align, gfloat col_align)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_scroll_to_path$descriptor() {
        return gtk_icon_view_scroll_to_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_scroll_to_path(GtkIconView *icon_view, GtkTreePath *path, gboolean use_align, gfloat row_align, gfloat col_align)
     * }
     */
    public static MethodHandle gtk_icon_view_scroll_to_path$handle() {
        return gtk_icon_view_scroll_to_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_scroll_to_path(GtkIconView *icon_view, GtkTreePath *path, gboolean use_align, gfloat row_align, gfloat col_align)
     * }
     */
    public static void gtk_icon_view_scroll_to_path(MemorySegment icon_view, MemorySegment path, int use_align, float row_align, float col_align) {
        var mh$ = gtk_icon_view_scroll_to_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_scroll_to_path", icon_view, path, use_align, row_align, col_align);
            }
            mh$.invokeExact(icon_view, path, use_align, row_align, col_align);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_enable_model_drag_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_enable_model_drag_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_enable_model_drag_source(GtkIconView *icon_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_enable_model_drag_source$descriptor() {
        return gtk_icon_view_enable_model_drag_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_enable_model_drag_source(GtkIconView *icon_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_icon_view_enable_model_drag_source$handle() {
        return gtk_icon_view_enable_model_drag_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_enable_model_drag_source(GtkIconView *icon_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static void gtk_icon_view_enable_model_drag_source(MemorySegment icon_view, int start_button_mask, MemorySegment targets, int n_targets, int actions) {
        var mh$ = gtk_icon_view_enable_model_drag_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_enable_model_drag_source", icon_view, start_button_mask, targets, n_targets, actions);
            }
            mh$.invokeExact(icon_view, start_button_mask, targets, n_targets, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_enable_model_drag_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_enable_model_drag_dest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_enable_model_drag_dest(GtkIconView *icon_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_enable_model_drag_dest$descriptor() {
        return gtk_icon_view_enable_model_drag_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_enable_model_drag_dest(GtkIconView *icon_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_icon_view_enable_model_drag_dest$handle() {
        return gtk_icon_view_enable_model_drag_dest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_enable_model_drag_dest(GtkIconView *icon_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static void gtk_icon_view_enable_model_drag_dest(MemorySegment icon_view, MemorySegment targets, int n_targets, int actions) {
        var mh$ = gtk_icon_view_enable_model_drag_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_enable_model_drag_dest", icon_view, targets, n_targets, actions);
            }
            mh$.invokeExact(icon_view, targets, n_targets, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_unset_model_drag_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_unset_model_drag_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unset_model_drag_source(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_unset_model_drag_source$descriptor() {
        return gtk_icon_view_unset_model_drag_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unset_model_drag_source(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_unset_model_drag_source$handle() {
        return gtk_icon_view_unset_model_drag_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_unset_model_drag_source(GtkIconView *icon_view)
     * }
     */
    public static void gtk_icon_view_unset_model_drag_source(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_unset_model_drag_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_unset_model_drag_source", icon_view);
            }
            mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_unset_model_drag_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_unset_model_drag_dest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unset_model_drag_dest(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_unset_model_drag_dest$descriptor() {
        return gtk_icon_view_unset_model_drag_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_unset_model_drag_dest(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_unset_model_drag_dest$handle() {
        return gtk_icon_view_unset_model_drag_dest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_unset_model_drag_dest(GtkIconView *icon_view)
     * }
     */
    public static void gtk_icon_view_unset_model_drag_dest(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_unset_model_drag_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_unset_model_drag_dest", icon_view);
            }
            mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_reorderable(GtkIconView *icon_view, gboolean reorderable)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_reorderable$descriptor() {
        return gtk_icon_view_set_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_reorderable(GtkIconView *icon_view, gboolean reorderable)
     * }
     */
    public static MethodHandle gtk_icon_view_set_reorderable$handle() {
        return gtk_icon_view_set_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_reorderable(GtkIconView *icon_view, gboolean reorderable)
     * }
     */
    public static void gtk_icon_view_set_reorderable(MemorySegment icon_view, int reorderable) {
        var mh$ = gtk_icon_view_set_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_reorderable", icon_view, reorderable);
            }
            mh$.invokeExact(icon_view, reorderable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_reorderable(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_reorderable$descriptor() {
        return gtk_icon_view_get_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_reorderable(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_reorderable$handle() {
        return gtk_icon_view_get_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_reorderable(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_reorderable(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_reorderable", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_drag_dest_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_drag_dest_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_drag_dest_item(GtkIconView *icon_view, GtkTreePath *path, GtkIconViewDropPosition pos)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_drag_dest_item$descriptor() {
        return gtk_icon_view_set_drag_dest_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_drag_dest_item(GtkIconView *icon_view, GtkTreePath *path, GtkIconViewDropPosition pos)
     * }
     */
    public static MethodHandle gtk_icon_view_set_drag_dest_item$handle() {
        return gtk_icon_view_set_drag_dest_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_drag_dest_item(GtkIconView *icon_view, GtkTreePath *path, GtkIconViewDropPosition pos)
     * }
     */
    public static void gtk_icon_view_set_drag_dest_item(MemorySegment icon_view, MemorySegment path, int pos) {
        var mh$ = gtk_icon_view_set_drag_dest_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_drag_dest_item", icon_view, path, pos);
            }
            mh$.invokeExact(icon_view, path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_drag_dest_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_drag_dest_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_get_drag_dest_item(GtkIconView *icon_view, GtkTreePath **path, GtkIconViewDropPosition *pos)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_drag_dest_item$descriptor() {
        return gtk_icon_view_get_drag_dest_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_get_drag_dest_item(GtkIconView *icon_view, GtkTreePath **path, GtkIconViewDropPosition *pos)
     * }
     */
    public static MethodHandle gtk_icon_view_get_drag_dest_item$handle() {
        return gtk_icon_view_get_drag_dest_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_get_drag_dest_item(GtkIconView *icon_view, GtkTreePath **path, GtkIconViewDropPosition *pos)
     * }
     */
    public static void gtk_icon_view_get_drag_dest_item(MemorySegment icon_view, MemorySegment path, MemorySegment pos) {
        var mh$ = gtk_icon_view_get_drag_dest_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_drag_dest_item", icon_view, path, pos);
            }
            mh$.invokeExact(icon_view, path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_dest_item_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_dest_item_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_dest_item_at_pos(GtkIconView *icon_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkIconViewDropPosition *pos)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_dest_item_at_pos$descriptor() {
        return gtk_icon_view_get_dest_item_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_dest_item_at_pos(GtkIconView *icon_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkIconViewDropPosition *pos)
     * }
     */
    public static MethodHandle gtk_icon_view_get_dest_item_at_pos$handle() {
        return gtk_icon_view_get_dest_item_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_dest_item_at_pos(GtkIconView *icon_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkIconViewDropPosition *pos)
     * }
     */
    public static int gtk_icon_view_get_dest_item_at_pos(MemorySegment icon_view, int drag_x, int drag_y, MemorySegment path, MemorySegment pos) {
        var mh$ = gtk_icon_view_get_dest_item_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_dest_item_at_pos", icon_view, drag_x, drag_y, path, pos);
            }
            return (int)mh$.invokeExact(icon_view, drag_x, drag_y, path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_create_drag_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_create_drag_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_view_create_drag_icon(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_create_drag_icon$descriptor() {
        return gtk_icon_view_create_drag_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_view_create_drag_icon(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_create_drag_icon$handle() {
        return gtk_icon_view_create_drag_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_icon_view_create_drag_icon(GtkIconView *icon_view, GtkTreePath *path)
     * }
     */
    public static MemorySegment gtk_icon_view_create_drag_icon(MemorySegment icon_view, MemorySegment path) {
        var mh$ = gtk_icon_view_create_drag_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_create_drag_icon", icon_view, path);
            }
            return (MemorySegment)mh$.invokeExact(icon_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_convert_widget_to_bin_window_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_convert_widget_to_bin_window_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_convert_widget_to_bin_window_coords(GtkIconView *icon_view, gint wx, gint wy, gint *bx, gint *by)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_convert_widget_to_bin_window_coords$descriptor() {
        return gtk_icon_view_convert_widget_to_bin_window_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_convert_widget_to_bin_window_coords(GtkIconView *icon_view, gint wx, gint wy, gint *bx, gint *by)
     * }
     */
    public static MethodHandle gtk_icon_view_convert_widget_to_bin_window_coords$handle() {
        return gtk_icon_view_convert_widget_to_bin_window_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_convert_widget_to_bin_window_coords(GtkIconView *icon_view, gint wx, gint wy, gint *bx, gint *by)
     * }
     */
    public static void gtk_icon_view_convert_widget_to_bin_window_coords(MemorySegment icon_view, int wx, int wy, MemorySegment bx, MemorySegment by) {
        var mh$ = gtk_icon_view_convert_widget_to_bin_window_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_convert_widget_to_bin_window_coords", icon_view, wx, wy, bx, by);
            }
            mh$.invokeExact(icon_view, wx, wy, bx, by);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_cell_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_cell_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_cell_rect(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_cell_rect$descriptor() {
        return gtk_icon_view_get_cell_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_cell_rect(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_icon_view_get_cell_rect$handle() {
        return gtk_icon_view_get_cell_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_cell_rect(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, GdkRectangle *rect)
     * }
     */
    public static int gtk_icon_view_get_cell_rect(MemorySegment icon_view, MemorySegment path, MemorySegment cell, MemorySegment rect) {
        var mh$ = gtk_icon_view_get_cell_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_cell_rect", icon_view, path, cell, rect);
            }
            return (int)mh$.invokeExact(icon_view, path, cell, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_tooltip_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_tooltip_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_item(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_tooltip_item$descriptor() {
        return gtk_icon_view_set_tooltip_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_item(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_icon_view_set_tooltip_item$handle() {
        return gtk_icon_view_set_tooltip_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_item(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path)
     * }
     */
    public static void gtk_icon_view_set_tooltip_item(MemorySegment icon_view, MemorySegment tooltip, MemorySegment path) {
        var mh$ = gtk_icon_view_set_tooltip_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_tooltip_item", icon_view, tooltip, path);
            }
            mh$.invokeExact(icon_view, tooltip, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_tooltip_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_tooltip_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_cell(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path, GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_tooltip_cell$descriptor() {
        return gtk_icon_view_set_tooltip_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_cell(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path, GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_icon_view_set_tooltip_cell$handle() {
        return gtk_icon_view_set_tooltip_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_cell(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path, GtkCellRenderer *cell)
     * }
     */
    public static void gtk_icon_view_set_tooltip_cell(MemorySegment icon_view, MemorySegment tooltip, MemorySegment path, MemorySegment cell) {
        var mh$ = gtk_icon_view_set_tooltip_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_tooltip_cell", icon_view, tooltip, path, cell);
            }
            mh$.invokeExact(icon_view, tooltip, path, cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_tooltip_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_tooltip_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_tooltip_context(GtkIconView *icon_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_tooltip_context$descriptor() {
        return gtk_icon_view_get_tooltip_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_tooltip_context(GtkIconView *icon_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_icon_view_get_tooltip_context$handle() {
        return gtk_icon_view_get_tooltip_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_icon_view_get_tooltip_context(GtkIconView *icon_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter)
     * }
     */
    public static int gtk_icon_view_get_tooltip_context(MemorySegment icon_view, MemorySegment x, MemorySegment y, int keyboard_tip, MemorySegment model, MemorySegment path, MemorySegment iter) {
        var mh$ = gtk_icon_view_get_tooltip_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_tooltip_context", icon_view, x, y, keyboard_tip, model, path, iter);
            }
            return (int)mh$.invokeExact(icon_view, x, y, keyboard_tip, model, path, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_set_tooltip_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_set_tooltip_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_set_tooltip_column$descriptor() {
        return gtk_icon_view_set_tooltip_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static MethodHandle gtk_icon_view_set_tooltip_column$handle() {
        return gtk_icon_view_set_tooltip_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_icon_view_set_tooltip_column(GtkIconView *icon_view, gint column)
     * }
     */
    public static void gtk_icon_view_set_tooltip_column(MemorySegment icon_view, int column) {
        var mh$ = gtk_icon_view_set_tooltip_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_set_tooltip_column", icon_view, column);
            }
            mh$.invokeExact(icon_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_icon_view_get_tooltip_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_icon_view_get_tooltip_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_tooltip_column(GtkIconView *icon_view)
     * }
     */
    public static FunctionDescriptor gtk_icon_view_get_tooltip_column$descriptor() {
        return gtk_icon_view_get_tooltip_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_tooltip_column(GtkIconView *icon_view)
     * }
     */
    public static MethodHandle gtk_icon_view_get_tooltip_column$handle() {
        return gtk_icon_view_get_tooltip_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_icon_view_get_tooltip_column(GtkIconView *icon_view)
     * }
     */
    public static int gtk_icon_view_get_tooltip_column(MemorySegment icon_view) {
        var mh$ = gtk_icon_view_get_tooltip_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_icon_view_get_tooltip_column", icon_view);
            }
            return (int)mh$.invokeExact(icon_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_simple_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_simple_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_im_context_simple_get_type()
     * }
     */
    public static FunctionDescriptor gtk_im_context_simple_get_type$descriptor() {
        return gtk_im_context_simple_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_im_context_simple_get_type()
     * }
     */
    public static MethodHandle gtk_im_context_simple_get_type$handle() {
        return gtk_im_context_simple_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_im_context_simple_get_type()
     * }
     */
    public static long gtk_im_context_simple_get_type() {
        var mh$ = gtk_im_context_simple_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_simple_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_simple_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_simple_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_im_context_simple_new()
     * }
     */
    public static FunctionDescriptor gtk_im_context_simple_new$descriptor() {
        return gtk_im_context_simple_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_im_context_simple_new()
     * }
     */
    public static MethodHandle gtk_im_context_simple_new$handle() {
        return gtk_im_context_simple_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_im_context_simple_new()
     * }
     */
    public static MemorySegment gtk_im_context_simple_new() {
        var mh$ = gtk_im_context_simple_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_simple_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_simple_add_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_simple_add_table"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_simple_add_table(GtkIMContextSimple *context_simple, guint16 *data, gint max_seq_len, gint n_seqs)
     * }
     */
    public static FunctionDescriptor gtk_im_context_simple_add_table$descriptor() {
        return gtk_im_context_simple_add_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_simple_add_table(GtkIMContextSimple *context_simple, guint16 *data, gint max_seq_len, gint n_seqs)
     * }
     */
    public static MethodHandle gtk_im_context_simple_add_table$handle() {
        return gtk_im_context_simple_add_table.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_simple_add_table(GtkIMContextSimple *context_simple, guint16 *data, gint max_seq_len, gint n_seqs)
     * }
     */
    public static void gtk_im_context_simple_add_table(MemorySegment context_simple, MemorySegment data, int max_seq_len, int n_seqs) {
        var mh$ = gtk_im_context_simple_add_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_simple_add_table", context_simple, data, max_seq_len, n_seqs);
            }
            mh$.invokeExact(context_simple, data, max_seq_len, n_seqs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_simple_add_compose_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_simple_add_compose_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_simple_add_compose_file(GtkIMContextSimple *context_simple, const gchar *compose_file)
     * }
     */
    public static FunctionDescriptor gtk_im_context_simple_add_compose_file$descriptor() {
        return gtk_im_context_simple_add_compose_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_simple_add_compose_file(GtkIMContextSimple *context_simple, const gchar *compose_file)
     * }
     */
    public static MethodHandle gtk_im_context_simple_add_compose_file$handle() {
        return gtk_im_context_simple_add_compose_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_simple_add_compose_file(GtkIMContextSimple *context_simple, const gchar *compose_file)
     * }
     */
    public static void gtk_im_context_simple_add_compose_file(MemorySegment context_simple, MemorySegment compose_file) {
        var mh$ = gtk_im_context_simple_add_compose_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_simple_add_compose_file", context_simple, compose_file);
            }
            mh$.invokeExact(context_simple, compose_file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_multicontext_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_multicontext_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_im_multicontext_get_type()
     * }
     */
    public static FunctionDescriptor gtk_im_multicontext_get_type$descriptor() {
        return gtk_im_multicontext_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_im_multicontext_get_type()
     * }
     */
    public static MethodHandle gtk_im_multicontext_get_type$handle() {
        return gtk_im_multicontext_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_im_multicontext_get_type()
     * }
     */
    public static long gtk_im_multicontext_get_type() {
        var mh$ = gtk_im_multicontext_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_multicontext_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_multicontext_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_multicontext_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_im_multicontext_new()
     * }
     */
    public static FunctionDescriptor gtk_im_multicontext_new$descriptor() {
        return gtk_im_multicontext_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_im_multicontext_new()
     * }
     */
    public static MethodHandle gtk_im_multicontext_new$handle() {
        return gtk_im_multicontext_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_im_multicontext_new()
     * }
     */
    public static MemorySegment gtk_im_multicontext_new() {
        var mh$ = gtk_im_multicontext_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_multicontext_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_multicontext_append_menuitems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_multicontext_append_menuitems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_multicontext_append_menuitems(GtkIMMulticontext *context, GtkMenuShell *menushell)
     * }
     */
    public static FunctionDescriptor gtk_im_multicontext_append_menuitems$descriptor() {
        return gtk_im_multicontext_append_menuitems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_multicontext_append_menuitems(GtkIMMulticontext *context, GtkMenuShell *menushell)
     * }
     */
    public static MethodHandle gtk_im_multicontext_append_menuitems$handle() {
        return gtk_im_multicontext_append_menuitems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_multicontext_append_menuitems(GtkIMMulticontext *context, GtkMenuShell *menushell)
     * }
     */
    public static void gtk_im_multicontext_append_menuitems(MemorySegment context, MemorySegment menushell) {
        var mh$ = gtk_im_multicontext_append_menuitems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_multicontext_append_menuitems", context, menushell);
            }
            mh$.invokeExact(context, menushell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_multicontext_get_context_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_multicontext_get_context_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gtk_im_multicontext_get_context_id(GtkIMMulticontext *context)
     * }
     */
    public static FunctionDescriptor gtk_im_multicontext_get_context_id$descriptor() {
        return gtk_im_multicontext_get_context_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gtk_im_multicontext_get_context_id(GtkIMMulticontext *context)
     * }
     */
    public static MethodHandle gtk_im_multicontext_get_context_id$handle() {
        return gtk_im_multicontext_get_context_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gtk_im_multicontext_get_context_id(GtkIMMulticontext *context)
     * }
     */
    public static MemorySegment gtk_im_multicontext_get_context_id(MemorySegment context) {
        var mh$ = gtk_im_multicontext_get_context_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_multicontext_get_context_id", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_multicontext_set_context_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_multicontext_set_context_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_multicontext_set_context_id(GtkIMMulticontext *context, const char *context_id)
     * }
     */
    public static FunctionDescriptor gtk_im_multicontext_set_context_id$descriptor() {
        return gtk_im_multicontext_set_context_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_multicontext_set_context_id(GtkIMMulticontext *context, const char *context_id)
     * }
     */
    public static MethodHandle gtk_im_multicontext_set_context_id$handle() {
        return gtk_im_multicontext_set_context_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_multicontext_set_context_id(GtkIMMulticontext *context, const char *context_id)
     * }
     */
    public static void gtk_im_multicontext_set_context_id(MemorySegment context, MemorySegment context_id) {
        var mh$ = gtk_im_multicontext_set_context_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_multicontext_set_context_id", context, context_id);
            }
            mh$.invokeExact(context, context_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_info_bar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_info_bar_get_type$descriptor() {
        return gtk_info_bar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_info_bar_get_type()
     * }
     */
    public static MethodHandle gtk_info_bar_get_type$handle() {
        return gtk_info_bar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_info_bar_get_type()
     * }
     */
    public static long gtk_info_bar_get_type() {
        var mh$ = gtk_info_bar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_new()
     * }
     */
    public static FunctionDescriptor gtk_info_bar_new$descriptor() {
        return gtk_info_bar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_new()
     * }
     */
    public static MethodHandle gtk_info_bar_new$handle() {
        return gtk_info_bar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_new()
     * }
     */
    public static MemorySegment gtk_info_bar_new() {
        var mh$ = gtk_info_bar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_new_with_buttons(const gchar *first_button_text, ...)
     * }
     */
    public static class gtk_info_bar_new_with_buttons {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_info_bar_new_with_buttons");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_info_bar_new_with_buttons(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_info_bar_new_with_buttons(const gchar *first_button_text, ...)
         * }
         */
        public static gtk_info_bar_new_with_buttons makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_info_bar_new_with_buttons(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment first_button_text, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_info_bar_new_with_buttons", first_button_text, x1);
                }
                return (MemorySegment)spreader.invokeExact(first_button_text, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_info_bar_get_action_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_get_action_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_get_action_area(GtkInfoBar *info_bar)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_get_action_area$descriptor() {
        return gtk_info_bar_get_action_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_get_action_area(GtkInfoBar *info_bar)
     * }
     */
    public static MethodHandle gtk_info_bar_get_action_area$handle() {
        return gtk_info_bar_get_action_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_get_action_area(GtkInfoBar *info_bar)
     * }
     */
    public static MemorySegment gtk_info_bar_get_action_area(MemorySegment info_bar) {
        var mh$ = gtk_info_bar_get_action_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_get_action_area", info_bar);
            }
            return (MemorySegment)mh$.invokeExact(info_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_get_content_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_get_content_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_get_content_area(GtkInfoBar *info_bar)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_get_content_area$descriptor() {
        return gtk_info_bar_get_content_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_get_content_area(GtkInfoBar *info_bar)
     * }
     */
    public static MethodHandle gtk_info_bar_get_content_area$handle() {
        return gtk_info_bar_get_content_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_get_content_area(GtkInfoBar *info_bar)
     * }
     */
    public static MemorySegment gtk_info_bar_get_content_area(MemorySegment info_bar) {
        var mh$ = gtk_info_bar_get_content_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_get_content_area", info_bar);
            }
            return (MemorySegment)mh$.invokeExact(info_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_add_action_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_add_action_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_add_action_widget(GtkInfoBar *info_bar, GtkWidget *child, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_add_action_widget$descriptor() {
        return gtk_info_bar_add_action_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_add_action_widget(GtkInfoBar *info_bar, GtkWidget *child, gint response_id)
     * }
     */
    public static MethodHandle gtk_info_bar_add_action_widget$handle() {
        return gtk_info_bar_add_action_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_info_bar_add_action_widget(GtkInfoBar *info_bar, GtkWidget *child, gint response_id)
     * }
     */
    public static void gtk_info_bar_add_action_widget(MemorySegment info_bar, MemorySegment child, int response_id) {
        var mh$ = gtk_info_bar_add_action_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_add_action_widget", info_bar, child, response_id);
            }
            mh$.invokeExact(info_bar, child, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_add_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_add_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_add_button(GtkInfoBar *info_bar, const gchar *button_text, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_add_button$descriptor() {
        return gtk_info_bar_add_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_add_button(GtkInfoBar *info_bar, const gchar *button_text, gint response_id)
     * }
     */
    public static MethodHandle gtk_info_bar_add_button$handle() {
        return gtk_info_bar_add_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_info_bar_add_button(GtkInfoBar *info_bar, const gchar *button_text, gint response_id)
     * }
     */
    public static MemorySegment gtk_info_bar_add_button(MemorySegment info_bar, MemorySegment button_text, int response_id) {
        var mh$ = gtk_info_bar_add_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_add_button", info_bar, button_text, response_id);
            }
            return (MemorySegment)mh$.invokeExact(info_bar, button_text, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_add_buttons(GtkInfoBar *info_bar, const gchar *first_button_text, ...)
     * }
     */
    public static class gtk_info_bar_add_buttons {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_info_bar_add_buttons");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_info_bar_add_buttons(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_info_bar_add_buttons(GtkInfoBar *info_bar, const gchar *first_button_text, ...)
         * }
         */
        public static gtk_info_bar_add_buttons makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_info_bar_add_buttons(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment info_bar, MemorySegment first_button_text, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_info_bar_add_buttons", info_bar, first_button_text, x2);
                }
                spreader.invokeExact(info_bar, first_button_text, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_info_bar_set_response_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_set_response_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_response_sensitive(GtkInfoBar *info_bar, gint response_id, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_set_response_sensitive$descriptor() {
        return gtk_info_bar_set_response_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_response_sensitive(GtkInfoBar *info_bar, gint response_id, gboolean setting)
     * }
     */
    public static MethodHandle gtk_info_bar_set_response_sensitive$handle() {
        return gtk_info_bar_set_response_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_response_sensitive(GtkInfoBar *info_bar, gint response_id, gboolean setting)
     * }
     */
    public static void gtk_info_bar_set_response_sensitive(MemorySegment info_bar, int response_id, int setting) {
        var mh$ = gtk_info_bar_set_response_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_set_response_sensitive", info_bar, response_id, setting);
            }
            mh$.invokeExact(info_bar, response_id, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_set_default_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_set_default_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_default_response(GtkInfoBar *info_bar, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_set_default_response$descriptor() {
        return gtk_info_bar_set_default_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_default_response(GtkInfoBar *info_bar, gint response_id)
     * }
     */
    public static MethodHandle gtk_info_bar_set_default_response$handle() {
        return gtk_info_bar_set_default_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_default_response(GtkInfoBar *info_bar, gint response_id)
     * }
     */
    public static void gtk_info_bar_set_default_response(MemorySegment info_bar, int response_id) {
        var mh$ = gtk_info_bar_set_default_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_set_default_response", info_bar, response_id);
            }
            mh$.invokeExact(info_bar, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_response(GtkInfoBar *info_bar, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_response$descriptor() {
        return gtk_info_bar_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_response(GtkInfoBar *info_bar, gint response_id)
     * }
     */
    public static MethodHandle gtk_info_bar_response$handle() {
        return gtk_info_bar_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_info_bar_response(GtkInfoBar *info_bar, gint response_id)
     * }
     */
    public static void gtk_info_bar_response(MemorySegment info_bar, int response_id) {
        var mh$ = gtk_info_bar_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_response", info_bar, response_id);
            }
            mh$.invokeExact(info_bar, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_set_message_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_set_message_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_message_type(GtkInfoBar *info_bar, GtkMessageType message_type)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_set_message_type$descriptor() {
        return gtk_info_bar_set_message_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_message_type(GtkInfoBar *info_bar, GtkMessageType message_type)
     * }
     */
    public static MethodHandle gtk_info_bar_set_message_type$handle() {
        return gtk_info_bar_set_message_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_message_type(GtkInfoBar *info_bar, GtkMessageType message_type)
     * }
     */
    public static void gtk_info_bar_set_message_type(MemorySegment info_bar, int message_type) {
        var mh$ = gtk_info_bar_set_message_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_set_message_type", info_bar, message_type);
            }
            mh$.invokeExact(info_bar, message_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_get_message_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_get_message_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkMessageType gtk_info_bar_get_message_type(GtkInfoBar *info_bar)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_get_message_type$descriptor() {
        return gtk_info_bar_get_message_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkMessageType gtk_info_bar_get_message_type(GtkInfoBar *info_bar)
     * }
     */
    public static MethodHandle gtk_info_bar_get_message_type$handle() {
        return gtk_info_bar_get_message_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkMessageType gtk_info_bar_get_message_type(GtkInfoBar *info_bar)
     * }
     */
    public static int gtk_info_bar_get_message_type(MemorySegment info_bar) {
        var mh$ = gtk_info_bar_get_message_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_get_message_type", info_bar);
            }
            return (int)mh$.invokeExact(info_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_set_show_close_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_set_show_close_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_show_close_button(GtkInfoBar *info_bar, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_set_show_close_button$descriptor() {
        return gtk_info_bar_set_show_close_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_show_close_button(GtkInfoBar *info_bar, gboolean setting)
     * }
     */
    public static MethodHandle gtk_info_bar_set_show_close_button$handle() {
        return gtk_info_bar_set_show_close_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_show_close_button(GtkInfoBar *info_bar, gboolean setting)
     * }
     */
    public static void gtk_info_bar_set_show_close_button(MemorySegment info_bar, int setting) {
        var mh$ = gtk_info_bar_set_show_close_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_set_show_close_button", info_bar, setting);
            }
            mh$.invokeExact(info_bar, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_get_show_close_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_get_show_close_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_info_bar_get_show_close_button(GtkInfoBar *info_bar)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_get_show_close_button$descriptor() {
        return gtk_info_bar_get_show_close_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_info_bar_get_show_close_button(GtkInfoBar *info_bar)
     * }
     */
    public static MethodHandle gtk_info_bar_get_show_close_button$handle() {
        return gtk_info_bar_get_show_close_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_info_bar_get_show_close_button(GtkInfoBar *info_bar)
     * }
     */
    public static int gtk_info_bar_get_show_close_button(MemorySegment info_bar) {
        var mh$ = gtk_info_bar_get_show_close_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_get_show_close_button", info_bar);
            }
            return (int)mh$.invokeExact(info_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_set_revealed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_set_revealed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_revealed(GtkInfoBar *info_bar, gboolean revealed)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_set_revealed$descriptor() {
        return gtk_info_bar_set_revealed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_revealed(GtkInfoBar *info_bar, gboolean revealed)
     * }
     */
    public static MethodHandle gtk_info_bar_set_revealed$handle() {
        return gtk_info_bar_set_revealed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_info_bar_set_revealed(GtkInfoBar *info_bar, gboolean revealed)
     * }
     */
    public static void gtk_info_bar_set_revealed(MemorySegment info_bar, int revealed) {
        var mh$ = gtk_info_bar_set_revealed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_set_revealed", info_bar, revealed);
            }
            mh$.invokeExact(info_bar, revealed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_info_bar_get_revealed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_info_bar_get_revealed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_info_bar_get_revealed(GtkInfoBar *info_bar)
     * }
     */
    public static FunctionDescriptor gtk_info_bar_get_revealed$descriptor() {
        return gtk_info_bar_get_revealed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_info_bar_get_revealed(GtkInfoBar *info_bar)
     * }
     */
    public static MethodHandle gtk_info_bar_get_revealed$handle() {
        return gtk_info_bar_get_revealed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_info_bar_get_revealed(GtkInfoBar *info_bar)
     * }
     */
    public static int gtk_info_bar_get_revealed(MemorySegment info_bar) {
        var mh$ = gtk_info_bar_get_revealed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_info_bar_get_revealed", info_bar);
            }
            return (int)mh$.invokeExact(info_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_invisible_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_invisible_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_invisible_get_type()
     * }
     */
    public static FunctionDescriptor gtk_invisible_get_type$descriptor() {
        return gtk_invisible_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_invisible_get_type()
     * }
     */
    public static MethodHandle gtk_invisible_get_type$handle() {
        return gtk_invisible_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_invisible_get_type()
     * }
     */
    public static long gtk_invisible_get_type() {
        var mh$ = gtk_invisible_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_invisible_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_invisible_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_invisible_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_invisible_new()
     * }
     */
    public static FunctionDescriptor gtk_invisible_new$descriptor() {
        return gtk_invisible_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_invisible_new()
     * }
     */
    public static MethodHandle gtk_invisible_new$handle() {
        return gtk_invisible_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_invisible_new()
     * }
     */
    public static MemorySegment gtk_invisible_new() {
        var mh$ = gtk_invisible_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_invisible_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_invisible_new_for_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_invisible_new_for_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_invisible_new_for_screen(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_invisible_new_for_screen$descriptor() {
        return gtk_invisible_new_for_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_invisible_new_for_screen(GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_invisible_new_for_screen$handle() {
        return gtk_invisible_new_for_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_invisible_new_for_screen(GdkScreen *screen)
     * }
     */
    public static MemorySegment gtk_invisible_new_for_screen(MemorySegment screen) {
        var mh$ = gtk_invisible_new_for_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_invisible_new_for_screen", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_invisible_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_invisible_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_invisible_set_screen(GtkInvisible *invisible, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_invisible_set_screen$descriptor() {
        return gtk_invisible_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_invisible_set_screen(GtkInvisible *invisible, GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_invisible_set_screen$handle() {
        return gtk_invisible_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_invisible_set_screen(GtkInvisible *invisible, GdkScreen *screen)
     * }
     */
    public static void gtk_invisible_set_screen(MemorySegment invisible, MemorySegment screen) {
        var mh$ = gtk_invisible_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_invisible_set_screen", invisible, screen);
            }
            mh$.invokeExact(invisible, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_invisible_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_invisible_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_invisible_get_screen(GtkInvisible *invisible)
     * }
     */
    public static FunctionDescriptor gtk_invisible_get_screen$descriptor() {
        return gtk_invisible_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_invisible_get_screen(GtkInvisible *invisible)
     * }
     */
    public static MethodHandle gtk_invisible_get_screen$handle() {
        return gtk_invisible_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gtk_invisible_get_screen(GtkInvisible *invisible)
     * }
     */
    public static MemorySegment gtk_invisible_get_screen(MemorySegment invisible) {
        var mh$ = gtk_invisible_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_invisible_get_screen", invisible);
            }
            return (MemorySegment)mh$.invokeExact(invisible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_layout_get_type()
     * }
     */
    public static FunctionDescriptor gtk_layout_get_type$descriptor() {
        return gtk_layout_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_layout_get_type()
     * }
     */
    public static MethodHandle gtk_layout_get_type$handle() {
        return gtk_layout_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_layout_get_type()
     * }
     */
    public static long gtk_layout_get_type() {
        var mh$ = gtk_layout_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_layout_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static FunctionDescriptor gtk_layout_new$descriptor() {
        return gtk_layout_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_layout_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MethodHandle gtk_layout_new$handle() {
        return gtk_layout_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_layout_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
     * }
     */
    public static MemorySegment gtk_layout_new(MemorySegment hadjustment, MemorySegment vadjustment) {
        var mh$ = gtk_layout_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_new", hadjustment, vadjustment);
            }
            return (MemorySegment)mh$.invokeExact(hadjustment, vadjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_get_bin_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_get_bin_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_layout_get_bin_window(GtkLayout *layout)
     * }
     */
    public static FunctionDescriptor gtk_layout_get_bin_window$descriptor() {
        return gtk_layout_get_bin_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_layout_get_bin_window(GtkLayout *layout)
     * }
     */
    public static MethodHandle gtk_layout_get_bin_window$handle() {
        return gtk_layout_get_bin_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_layout_get_bin_window(GtkLayout *layout)
     * }
     */
    public static MemorySegment gtk_layout_get_bin_window(MemorySegment layout) {
        var mh$ = gtk_layout_get_bin_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_get_bin_window", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_put {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_put"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_layout_put(GtkLayout *layout, GtkWidget *child_widget, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_layout_put$descriptor() {
        return gtk_layout_put.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_layout_put(GtkLayout *layout, GtkWidget *child_widget, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_layout_put$handle() {
        return gtk_layout_put.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_layout_put(GtkLayout *layout, GtkWidget *child_widget, gint x, gint y)
     * }
     */
    public static void gtk_layout_put(MemorySegment layout, MemorySegment child_widget, int x, int y) {
        var mh$ = gtk_layout_put.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_put", layout, child_widget, x, y);
            }
            mh$.invokeExact(layout, child_widget, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_move"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_layout_move(GtkLayout *layout, GtkWidget *child_widget, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_layout_move$descriptor() {
        return gtk_layout_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_layout_move(GtkLayout *layout, GtkWidget *child_widget, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_layout_move$handle() {
        return gtk_layout_move.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_layout_move(GtkLayout *layout, GtkWidget *child_widget, gint x, gint y)
     * }
     */
    public static void gtk_layout_move(MemorySegment layout, MemorySegment child_widget, int x, int y) {
        var mh$ = gtk_layout_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_move", layout, child_widget, x, y);
            }
            mh$.invokeExact(layout, child_widget, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_layout_set_size(GtkLayout *layout, guint width, guint height)
     * }
     */
    public static FunctionDescriptor gtk_layout_set_size$descriptor() {
        return gtk_layout_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_layout_set_size(GtkLayout *layout, guint width, guint height)
     * }
     */
    public static MethodHandle gtk_layout_set_size$handle() {
        return gtk_layout_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_layout_set_size(GtkLayout *layout, guint width, guint height)
     * }
     */
    public static void gtk_layout_set_size(MemorySegment layout, int width, int height) {
        var mh$ = gtk_layout_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_set_size", layout, width, height);
            }
            mh$.invokeExact(layout, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_layout_get_size(GtkLayout *layout, guint *width, guint *height)
     * }
     */
    public static FunctionDescriptor gtk_layout_get_size$descriptor() {
        return gtk_layout_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_layout_get_size(GtkLayout *layout, guint *width, guint *height)
     * }
     */
    public static MethodHandle gtk_layout_get_size$handle() {
        return gtk_layout_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_layout_get_size(GtkLayout *layout, guint *width, guint *height)
     * }
     */
    public static void gtk_layout_get_size(MemorySegment layout, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_layout_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_get_size", layout, width, height);
            }
            mh$.invokeExact(layout, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_get_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_get_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_layout_get_hadjustment(GtkLayout *layout)
     * }
     */
    public static FunctionDescriptor gtk_layout_get_hadjustment$descriptor() {
        return gtk_layout_get_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_layout_get_hadjustment(GtkLayout *layout)
     * }
     */
    public static MethodHandle gtk_layout_get_hadjustment$handle() {
        return gtk_layout_get_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_layout_get_hadjustment(GtkLayout *layout)
     * }
     */
    public static MemorySegment gtk_layout_get_hadjustment(MemorySegment layout) {
        var mh$ = gtk_layout_get_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_get_hadjustment", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_get_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_get_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_layout_get_vadjustment(GtkLayout *layout)
     * }
     */
    public static FunctionDescriptor gtk_layout_get_vadjustment$descriptor() {
        return gtk_layout_get_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_layout_get_vadjustment(GtkLayout *layout)
     * }
     */
    public static MethodHandle gtk_layout_get_vadjustment$handle() {
        return gtk_layout_get_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_layout_get_vadjustment(GtkLayout *layout)
     * }
     */
    public static MemorySegment gtk_layout_get_vadjustment(MemorySegment layout) {
        var mh$ = gtk_layout_get_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_get_vadjustment", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_set_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_set_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_layout_set_hadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_layout_set_hadjustment$descriptor() {
        return gtk_layout_set_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_layout_set_hadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_layout_set_hadjustment$handle() {
        return gtk_layout_set_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_layout_set_hadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_layout_set_hadjustment(MemorySegment layout, MemorySegment adjustment) {
        var mh$ = gtk_layout_set_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_set_hadjustment", layout, adjustment);
            }
            mh$.invokeExact(layout, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_layout_set_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_layout_set_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_layout_set_vadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_layout_set_vadjustment$descriptor() {
        return gtk_layout_set_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_layout_set_vadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_layout_set_vadjustment$handle() {
        return gtk_layout_set_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_layout_set_vadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_layout_set_vadjustment(MemorySegment layout, MemorySegment adjustment) {
        var mh$ = gtk_layout_set_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_layout_set_vadjustment", layout, adjustment);
            }
            mh$.invokeExact(layout, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_level_bar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_level_bar_get_type$descriptor() {
        return gtk_level_bar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_level_bar_get_type()
     * }
     */
    public static MethodHandle gtk_level_bar_get_type$handle() {
        return gtk_level_bar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_level_bar_get_type()
     * }
     */
    public static long gtk_level_bar_get_type() {
        var mh$ = gtk_level_bar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_level_bar_new()
     * }
     */
    public static FunctionDescriptor gtk_level_bar_new$descriptor() {
        return gtk_level_bar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_level_bar_new()
     * }
     */
    public static MethodHandle gtk_level_bar_new$handle() {
        return gtk_level_bar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_level_bar_new()
     * }
     */
    public static MemorySegment gtk_level_bar_new() {
        var mh$ = gtk_level_bar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_new_for_interval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_new_for_interval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_level_bar_new_for_interval(gdouble min_value, gdouble max_value)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_new_for_interval$descriptor() {
        return gtk_level_bar_new_for_interval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_level_bar_new_for_interval(gdouble min_value, gdouble max_value)
     * }
     */
    public static MethodHandle gtk_level_bar_new_for_interval$handle() {
        return gtk_level_bar_new_for_interval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_level_bar_new_for_interval(gdouble min_value, gdouble max_value)
     * }
     */
    public static MemorySegment gtk_level_bar_new_for_interval(double min_value, double max_value) {
        var mh$ = gtk_level_bar_new_for_interval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_new_for_interval", min_value, max_value);
            }
            return (MemorySegment)mh$.invokeExact(min_value, max_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_set_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_set_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_mode(GtkLevelBar *self, GtkLevelBarMode mode)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_set_mode$descriptor() {
        return gtk_level_bar_set_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_mode(GtkLevelBar *self, GtkLevelBarMode mode)
     * }
     */
    public static MethodHandle gtk_level_bar_set_mode$handle() {
        return gtk_level_bar_set_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_mode(GtkLevelBar *self, GtkLevelBarMode mode)
     * }
     */
    public static void gtk_level_bar_set_mode(MemorySegment self, int mode) {
        var mh$ = gtk_level_bar_set_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_set_mode", self, mode);
            }
            mh$.invokeExact(self, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_get_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_get_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkLevelBarMode gtk_level_bar_get_mode(GtkLevelBar *self)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_get_mode$descriptor() {
        return gtk_level_bar_get_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkLevelBarMode gtk_level_bar_get_mode(GtkLevelBar *self)
     * }
     */
    public static MethodHandle gtk_level_bar_get_mode$handle() {
        return gtk_level_bar_get_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkLevelBarMode gtk_level_bar_get_mode(GtkLevelBar *self)
     * }
     */
    public static int gtk_level_bar_get_mode(MemorySegment self) {
        var mh$ = gtk_level_bar_get_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_get_mode", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_set_value$descriptor() {
        return gtk_level_bar_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static MethodHandle gtk_level_bar_set_value$handle() {
        return gtk_level_bar_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static void gtk_level_bar_set_value(MemorySegment self, double value) {
        var mh$ = gtk_level_bar_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_set_value", self, value);
            }
            mh$.invokeExact(self, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_value(GtkLevelBar *self)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_get_value$descriptor() {
        return gtk_level_bar_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_value(GtkLevelBar *self)
     * }
     */
    public static MethodHandle gtk_level_bar_get_value$handle() {
        return gtk_level_bar_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_value(GtkLevelBar *self)
     * }
     */
    public static double gtk_level_bar_get_value(MemorySegment self) {
        var mh$ = gtk_level_bar_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_get_value", self);
            }
            return (double)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_set_min_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_set_min_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_min_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_set_min_value$descriptor() {
        return gtk_level_bar_set_min_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_min_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static MethodHandle gtk_level_bar_set_min_value$handle() {
        return gtk_level_bar_set_min_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_min_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static void gtk_level_bar_set_min_value(MemorySegment self, double value) {
        var mh$ = gtk_level_bar_set_min_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_set_min_value", self, value);
            }
            mh$.invokeExact(self, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_get_min_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_get_min_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_min_value(GtkLevelBar *self)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_get_min_value$descriptor() {
        return gtk_level_bar_get_min_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_min_value(GtkLevelBar *self)
     * }
     */
    public static MethodHandle gtk_level_bar_get_min_value$handle() {
        return gtk_level_bar_get_min_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_min_value(GtkLevelBar *self)
     * }
     */
    public static double gtk_level_bar_get_min_value(MemorySegment self) {
        var mh$ = gtk_level_bar_get_min_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_get_min_value", self);
            }
            return (double)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_set_max_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_set_max_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_max_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_set_max_value$descriptor() {
        return gtk_level_bar_set_max_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_max_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static MethodHandle gtk_level_bar_set_max_value$handle() {
        return gtk_level_bar_set_max_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_max_value(GtkLevelBar *self, gdouble value)
     * }
     */
    public static void gtk_level_bar_set_max_value(MemorySegment self, double value) {
        var mh$ = gtk_level_bar_set_max_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_set_max_value", self, value);
            }
            mh$.invokeExact(self, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_get_max_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_get_max_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_max_value(GtkLevelBar *self)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_get_max_value$descriptor() {
        return gtk_level_bar_get_max_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_max_value(GtkLevelBar *self)
     * }
     */
    public static MethodHandle gtk_level_bar_get_max_value$handle() {
        return gtk_level_bar_get_max_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_level_bar_get_max_value(GtkLevelBar *self)
     * }
     */
    public static double gtk_level_bar_get_max_value(MemorySegment self) {
        var mh$ = gtk_level_bar_get_max_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_get_max_value", self);
            }
            return (double)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_set_inverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_set_inverted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_inverted(GtkLevelBar *self, gboolean inverted)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_set_inverted$descriptor() {
        return gtk_level_bar_set_inverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_inverted(GtkLevelBar *self, gboolean inverted)
     * }
     */
    public static MethodHandle gtk_level_bar_set_inverted$handle() {
        return gtk_level_bar_set_inverted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_level_bar_set_inverted(GtkLevelBar *self, gboolean inverted)
     * }
     */
    public static void gtk_level_bar_set_inverted(MemorySegment self, int inverted) {
        var mh$ = gtk_level_bar_set_inverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_set_inverted", self, inverted);
            }
            mh$.invokeExact(self, inverted);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_get_inverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_get_inverted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_level_bar_get_inverted(GtkLevelBar *self)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_get_inverted$descriptor() {
        return gtk_level_bar_get_inverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_level_bar_get_inverted(GtkLevelBar *self)
     * }
     */
    public static MethodHandle gtk_level_bar_get_inverted$handle() {
        return gtk_level_bar_get_inverted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_level_bar_get_inverted(GtkLevelBar *self)
     * }
     */
    public static int gtk_level_bar_get_inverted(MemorySegment self) {
        var mh$ = gtk_level_bar_get_inverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_get_inverted", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_add_offset_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_add_offset_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_add_offset_value(GtkLevelBar *self, const gchar *name, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_add_offset_value$descriptor() {
        return gtk_level_bar_add_offset_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_add_offset_value(GtkLevelBar *self, const gchar *name, gdouble value)
     * }
     */
    public static MethodHandle gtk_level_bar_add_offset_value$handle() {
        return gtk_level_bar_add_offset_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_level_bar_add_offset_value(GtkLevelBar *self, const gchar *name, gdouble value)
     * }
     */
    public static void gtk_level_bar_add_offset_value(MemorySegment self, MemorySegment name, double value) {
        var mh$ = gtk_level_bar_add_offset_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_add_offset_value", self, name, value);
            }
            mh$.invokeExact(self, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_remove_offset_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_remove_offset_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_remove_offset_value(GtkLevelBar *self, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_remove_offset_value$descriptor() {
        return gtk_level_bar_remove_offset_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_level_bar_remove_offset_value(GtkLevelBar *self, const gchar *name)
     * }
     */
    public static MethodHandle gtk_level_bar_remove_offset_value$handle() {
        return gtk_level_bar_remove_offset_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_level_bar_remove_offset_value(GtkLevelBar *self, const gchar *name)
     * }
     */
    public static void gtk_level_bar_remove_offset_value(MemorySegment self, MemorySegment name) {
        var mh$ = gtk_level_bar_remove_offset_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_remove_offset_value", self, name);
            }
            mh$.invokeExact(self, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_level_bar_get_offset_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_level_bar_get_offset_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_level_bar_get_offset_value(GtkLevelBar *self, const gchar *name, gdouble *value)
     * }
     */
    public static FunctionDescriptor gtk_level_bar_get_offset_value$descriptor() {
        return gtk_level_bar_get_offset_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_level_bar_get_offset_value(GtkLevelBar *self, const gchar *name, gdouble *value)
     * }
     */
    public static MethodHandle gtk_level_bar_get_offset_value$handle() {
        return gtk_level_bar_get_offset_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_level_bar_get_offset_value(GtkLevelBar *self, const gchar *name, gdouble *value)
     * }
     */
    public static int gtk_level_bar_get_offset_value(MemorySegment self, MemorySegment name, MemorySegment value) {
        var mh$ = gtk_level_bar_get_offset_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_level_bar_get_offset_value", self, name, value);
            }
            return (int)mh$.invokeExact(self, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_link_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_link_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_link_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_link_button_get_type$descriptor() {
        return gtk_link_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_link_button_get_type()
     * }
     */
    public static MethodHandle gtk_link_button_get_type$handle() {
        return gtk_link_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_link_button_get_type()
     * }
     */
    public static long gtk_link_button_get_type() {
        var mh$ = gtk_link_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_link_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_link_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_link_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_link_button_new(const gchar *uri)
     * }
     */
    public static FunctionDescriptor gtk_link_button_new$descriptor() {
        return gtk_link_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_link_button_new(const gchar *uri)
     * }
     */
    public static MethodHandle gtk_link_button_new$handle() {
        return gtk_link_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_link_button_new(const gchar *uri)
     * }
     */
    public static MemorySegment gtk_link_button_new(MemorySegment uri) {
        var mh$ = gtk_link_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_link_button_new", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_link_button_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_link_button_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_link_button_new_with_label(const gchar *uri, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_link_button_new_with_label$descriptor() {
        return gtk_link_button_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_link_button_new_with_label(const gchar *uri, const gchar *label)
     * }
     */
    public static MethodHandle gtk_link_button_new_with_label$handle() {
        return gtk_link_button_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_link_button_new_with_label(const gchar *uri, const gchar *label)
     * }
     */
    public static MemorySegment gtk_link_button_new_with_label(MemorySegment uri, MemorySegment label) {
        var mh$ = gtk_link_button_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_link_button_new_with_label", uri, label);
            }
            return (MemorySegment)mh$.invokeExact(uri, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_link_button_get_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_link_button_get_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_link_button_get_uri(GtkLinkButton *link_button)
     * }
     */
    public static FunctionDescriptor gtk_link_button_get_uri$descriptor() {
        return gtk_link_button_get_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_link_button_get_uri(GtkLinkButton *link_button)
     * }
     */
    public static MethodHandle gtk_link_button_get_uri$handle() {
        return gtk_link_button_get_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_link_button_get_uri(GtkLinkButton *link_button)
     * }
     */
    public static MemorySegment gtk_link_button_get_uri(MemorySegment link_button) {
        var mh$ = gtk_link_button_get_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_link_button_get_uri", link_button);
            }
            return (MemorySegment)mh$.invokeExact(link_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_link_button_set_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_link_button_set_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_link_button_set_uri(GtkLinkButton *link_button, const gchar *uri)
     * }
     */
    public static FunctionDescriptor gtk_link_button_set_uri$descriptor() {
        return gtk_link_button_set_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_link_button_set_uri(GtkLinkButton *link_button, const gchar *uri)
     * }
     */
    public static MethodHandle gtk_link_button_set_uri$handle() {
        return gtk_link_button_set_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_link_button_set_uri(GtkLinkButton *link_button, const gchar *uri)
     * }
     */
    public static void gtk_link_button_set_uri(MemorySegment link_button, MemorySegment uri) {
        var mh$ = gtk_link_button_set_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_link_button_set_uri", link_button, uri);
            }
            mh$.invokeExact(link_button, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_link_button_get_visited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_link_button_get_visited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_link_button_get_visited(GtkLinkButton *link_button)
     * }
     */
    public static FunctionDescriptor gtk_link_button_get_visited$descriptor() {
        return gtk_link_button_get_visited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_link_button_get_visited(GtkLinkButton *link_button)
     * }
     */
    public static MethodHandle gtk_link_button_get_visited$handle() {
        return gtk_link_button_get_visited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_link_button_get_visited(GtkLinkButton *link_button)
     * }
     */
    public static int gtk_link_button_get_visited(MemorySegment link_button) {
        var mh$ = gtk_link_button_get_visited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_link_button_get_visited", link_button);
            }
            return (int)mh$.invokeExact(link_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_link_button_set_visited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_link_button_set_visited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_link_button_set_visited(GtkLinkButton *link_button, gboolean visited)
     * }
     */
    public static FunctionDescriptor gtk_link_button_set_visited$descriptor() {
        return gtk_link_button_set_visited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_link_button_set_visited(GtkLinkButton *link_button, gboolean visited)
     * }
     */
    public static MethodHandle gtk_link_button_set_visited$handle() {
        return gtk_link_button_set_visited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_link_button_set_visited(GtkLinkButton *link_button, gboolean visited)
     * }
     */
    public static void gtk_link_button_set_visited(MemorySegment link_button, int visited) {
        var mh$ = gtk_link_button_set_visited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_link_button_set_visited", link_button, visited);
            }
            mh$.invokeExact(link_button, visited);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_list_box_row_get_type()
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_get_type$descriptor() {
        return gtk_list_box_row_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_list_box_row_get_type()
     * }
     */
    public static MethodHandle gtk_list_box_row_get_type$handle() {
        return gtk_list_box_row_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_list_box_row_get_type()
     * }
     */
    public static long gtk_list_box_row_get_type() {
        var mh$ = gtk_list_box_row_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_row_new()
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_new$descriptor() {
        return gtk_list_box_row_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_row_new()
     * }
     */
    public static MethodHandle gtk_list_box_row_new$handle() {
        return gtk_list_box_row_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_row_new()
     * }
     */
    public static MemorySegment gtk_list_box_row_new() {
        var mh$ = gtk_list_box_row_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_get_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_get_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_row_get_header(GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_get_header$descriptor() {
        return gtk_list_box_row_get_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_row_get_header(GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_row_get_header$handle() {
        return gtk_list_box_row_get_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_row_get_header(GtkListBoxRow *row)
     * }
     */
    public static MemorySegment gtk_list_box_row_get_header(MemorySegment row) {
        var mh$ = gtk_list_box_row_get_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_get_header", row);
            }
            return (MemorySegment)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_set_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_set_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_header(GtkListBoxRow *row, GtkWidget *header)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_set_header$descriptor() {
        return gtk_list_box_row_set_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_header(GtkListBoxRow *row, GtkWidget *header)
     * }
     */
    public static MethodHandle gtk_list_box_row_set_header$handle() {
        return gtk_list_box_row_set_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_header(GtkListBoxRow *row, GtkWidget *header)
     * }
     */
    public static void gtk_list_box_row_set_header(MemorySegment row, MemorySegment header) {
        var mh$ = gtk_list_box_row_set_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_set_header", row, header);
            }
            mh$.invokeExact(row, header);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_get_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_get_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_list_box_row_get_index(GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_get_index$descriptor() {
        return gtk_list_box_row_get_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_list_box_row_get_index(GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_row_get_index$handle() {
        return gtk_list_box_row_get_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_list_box_row_get_index(GtkListBoxRow *row)
     * }
     */
    public static int gtk_list_box_row_get_index(MemorySegment row) {
        var mh$ = gtk_list_box_row_get_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_get_index", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_changed(GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_changed$descriptor() {
        return gtk_list_box_row_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_changed(GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_row_changed$handle() {
        return gtk_list_box_row_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_row_changed(GtkListBoxRow *row)
     * }
     */
    public static void gtk_list_box_row_changed(MemorySegment row) {
        var mh$ = gtk_list_box_row_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_changed", row);
            }
            mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_is_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_is_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_is_selected(GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_is_selected$descriptor() {
        return gtk_list_box_row_is_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_is_selected(GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_row_is_selected$handle() {
        return gtk_list_box_row_is_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_is_selected(GtkListBoxRow *row)
     * }
     */
    public static int gtk_list_box_row_is_selected(MemorySegment row) {
        var mh$ = gtk_list_box_row_is_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_is_selected", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_set_selectable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_set_selectable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_selectable(GtkListBoxRow *row, gboolean selectable)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_set_selectable$descriptor() {
        return gtk_list_box_row_set_selectable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_selectable(GtkListBoxRow *row, gboolean selectable)
     * }
     */
    public static MethodHandle gtk_list_box_row_set_selectable$handle() {
        return gtk_list_box_row_set_selectable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_selectable(GtkListBoxRow *row, gboolean selectable)
     * }
     */
    public static void gtk_list_box_row_set_selectable(MemorySegment row, int selectable) {
        var mh$ = gtk_list_box_row_set_selectable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_set_selectable", row, selectable);
            }
            mh$.invokeExact(row, selectable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_get_selectable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_get_selectable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_get_selectable(GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_get_selectable$descriptor() {
        return gtk_list_box_row_get_selectable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_get_selectable(GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_row_get_selectable$handle() {
        return gtk_list_box_row_get_selectable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_get_selectable(GtkListBoxRow *row)
     * }
     */
    public static int gtk_list_box_row_get_selectable(MemorySegment row) {
        var mh$ = gtk_list_box_row_get_selectable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_get_selectable", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_set_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_set_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_activatable(GtkListBoxRow *row, gboolean activatable)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_set_activatable$descriptor() {
        return gtk_list_box_row_set_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_activatable(GtkListBoxRow *row, gboolean activatable)
     * }
     */
    public static MethodHandle gtk_list_box_row_set_activatable$handle() {
        return gtk_list_box_row_set_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_row_set_activatable(GtkListBoxRow *row, gboolean activatable)
     * }
     */
    public static void gtk_list_box_row_set_activatable(MemorySegment row, int activatable) {
        var mh$ = gtk_list_box_row_set_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_set_activatable", row, activatable);
            }
            mh$.invokeExact(row, activatable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_row_get_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_row_get_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_get_activatable(GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_row_get_activatable$descriptor() {
        return gtk_list_box_row_get_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_get_activatable(GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_row_get_activatable$handle() {
        return gtk_list_box_row_get_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_row_get_activatable(GtkListBoxRow *row)
     * }
     */
    public static int gtk_list_box_row_get_activatable(MemorySegment row) {
        var mh$ = gtk_list_box_row_get_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_row_get_activatable", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_list_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_type$descriptor() {
        return gtk_list_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_list_box_get_type()
     * }
     */
    public static MethodHandle gtk_list_box_get_type$handle() {
        return gtk_list_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_list_box_get_type()
     * }
     */
    public static long gtk_list_box_get_type() {
        var mh$ = gtk_list_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_prepend(GtkListBox *box, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_list_box_prepend$descriptor() {
        return gtk_list_box_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_prepend(GtkListBox *box, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_list_box_prepend$handle() {
        return gtk_list_box_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_prepend(GtkListBox *box, GtkWidget *child)
     * }
     */
    public static void gtk_list_box_prepend(MemorySegment box, MemorySegment child) {
        var mh$ = gtk_list_box_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_prepend", box, child);
            }
            mh$.invokeExact(box, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_insert(GtkListBox *box, GtkWidget *child, gint position)
     * }
     */
    public static FunctionDescriptor gtk_list_box_insert$descriptor() {
        return gtk_list_box_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_insert(GtkListBox *box, GtkWidget *child, gint position)
     * }
     */
    public static MethodHandle gtk_list_box_insert$handle() {
        return gtk_list_box_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_insert(GtkListBox *box, GtkWidget *child, gint position)
     * }
     */
    public static void gtk_list_box_insert(MemorySegment box, MemorySegment child, int position) {
        var mh$ = gtk_list_box_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_insert", box, child, position);
            }
            mh$.invokeExact(box, child, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_selected_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_selected_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_selected_row(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_selected_row$descriptor() {
        return gtk_list_box_get_selected_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_selected_row(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_get_selected_row$handle() {
        return gtk_list_box_get_selected_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_selected_row(GtkListBox *box)
     * }
     */
    public static MemorySegment gtk_list_box_get_selected_row(MemorySegment box) {
        var mh$ = gtk_list_box_get_selected_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_selected_row", box);
            }
            return (MemorySegment)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_row_at_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_row_at_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_row_at_index(GtkListBox *box, gint index_)
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_row_at_index$descriptor() {
        return gtk_list_box_get_row_at_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_row_at_index(GtkListBox *box, gint index_)
     * }
     */
    public static MethodHandle gtk_list_box_get_row_at_index$handle() {
        return gtk_list_box_get_row_at_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_row_at_index(GtkListBox *box, gint index_)
     * }
     */
    public static MemorySegment gtk_list_box_get_row_at_index(MemorySegment box, int index_) {
        var mh$ = gtk_list_box_get_row_at_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_row_at_index", box, index_);
            }
            return (MemorySegment)mh$.invokeExact(box, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_row_at_y {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_row_at_y"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_row_at_y(GtkListBox *box, gint y)
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_row_at_y$descriptor() {
        return gtk_list_box_get_row_at_y.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_row_at_y(GtkListBox *box, gint y)
     * }
     */
    public static MethodHandle gtk_list_box_get_row_at_y$handle() {
        return gtk_list_box_get_row_at_y.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkListBoxRow *gtk_list_box_get_row_at_y(GtkListBox *box, gint y)
     * }
     */
    public static MemorySegment gtk_list_box_get_row_at_y(MemorySegment box, int y) {
        var mh$ = gtk_list_box_get_row_at_y.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_row_at_y", box, y);
            }
            return (MemorySegment)mh$.invokeExact(box, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_select_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_select_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_select_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_select_row$descriptor() {
        return gtk_list_box_select_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_select_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_select_row$handle() {
        return gtk_list_box_select_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_select_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static void gtk_list_box_select_row(MemorySegment box, MemorySegment row) {
        var mh$ = gtk_list_box_select_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_select_row", box, row);
            }
            mh$.invokeExact(box, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_set_placeholder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_set_placeholder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_placeholder(GtkListBox *box, GtkWidget *placeholder)
     * }
     */
    public static FunctionDescriptor gtk_list_box_set_placeholder$descriptor() {
        return gtk_list_box_set_placeholder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_placeholder(GtkListBox *box, GtkWidget *placeholder)
     * }
     */
    public static MethodHandle gtk_list_box_set_placeholder$handle() {
        return gtk_list_box_set_placeholder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_set_placeholder(GtkListBox *box, GtkWidget *placeholder)
     * }
     */
    public static void gtk_list_box_set_placeholder(MemorySegment box, MemorySegment placeholder) {
        var mh$ = gtk_list_box_set_placeholder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_set_placeholder", box, placeholder);
            }
            mh$.invokeExact(box, placeholder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_set_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_set_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_adjustment(GtkListBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_list_box_set_adjustment$descriptor() {
        return gtk_list_box_set_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_adjustment(GtkListBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_list_box_set_adjustment$handle() {
        return gtk_list_box_set_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_set_adjustment(GtkListBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_list_box_set_adjustment(MemorySegment box, MemorySegment adjustment) {
        var mh$ = gtk_list_box_set_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_set_adjustment", box, adjustment);
            }
            mh$.invokeExact(box, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_adjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_adjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_list_box_get_adjustment(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_adjustment$descriptor() {
        return gtk_list_box_get_adjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_list_box_get_adjustment(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_get_adjustment$handle() {
        return gtk_list_box_get_adjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_list_box_get_adjustment(GtkListBox *box)
     * }
     */
    public static MemorySegment gtk_list_box_get_adjustment(MemorySegment box) {
        var mh$ = gtk_list_box_get_adjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_adjustment", box);
            }
            return (MemorySegment)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_selected_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_selected_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_selected_foreach(GtkListBox *box, GtkListBoxForeachFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_list_box_selected_foreach$descriptor() {
        return gtk_list_box_selected_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_selected_foreach(GtkListBox *box, GtkListBoxForeachFunc func, gpointer data)
     * }
     */
    public static MethodHandle gtk_list_box_selected_foreach$handle() {
        return gtk_list_box_selected_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_selected_foreach(GtkListBox *box, GtkListBoxForeachFunc func, gpointer data)
     * }
     */
    public static void gtk_list_box_selected_foreach(MemorySegment box, MemorySegment func, MemorySegment data) {
        var mh$ = gtk_list_box_selected_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_selected_foreach", box, func, data);
            }
            mh$.invokeExact(box, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_selected_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_selected_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_list_box_get_selected_rows(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_selected_rows$descriptor() {
        return gtk_list_box_get_selected_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_list_box_get_selected_rows(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_get_selected_rows$handle() {
        return gtk_list_box_get_selected_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_list_box_get_selected_rows(GtkListBox *box)
     * }
     */
    public static MemorySegment gtk_list_box_get_selected_rows(MemorySegment box) {
        var mh$ = gtk_list_box_get_selected_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_selected_rows", box);
            }
            return (MemorySegment)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_unselect_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_unselect_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_unselect_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_unselect_row$descriptor() {
        return gtk_list_box_unselect_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_unselect_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_unselect_row$handle() {
        return gtk_list_box_unselect_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_unselect_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static void gtk_list_box_unselect_row(MemorySegment box, MemorySegment row) {
        var mh$ = gtk_list_box_unselect_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_unselect_row", box, row);
            }
            mh$.invokeExact(box, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_select_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_select_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_select_all(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_select_all$descriptor() {
        return gtk_list_box_select_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_select_all(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_select_all$handle() {
        return gtk_list_box_select_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_select_all(GtkListBox *box)
     * }
     */
    public static void gtk_list_box_select_all(MemorySegment box) {
        var mh$ = gtk_list_box_select_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_select_all", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_unselect_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_unselect_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_unselect_all(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_unselect_all$descriptor() {
        return gtk_list_box_unselect_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_unselect_all(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_unselect_all$handle() {
        return gtk_list_box_unselect_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_unselect_all(GtkListBox *box)
     * }
     */
    public static void gtk_list_box_unselect_all(MemorySegment box) {
        var mh$ = gtk_list_box_unselect_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_unselect_all", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_set_selection_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_set_selection_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_selection_mode(GtkListBox *box, GtkSelectionMode mode)
     * }
     */
    public static FunctionDescriptor gtk_list_box_set_selection_mode$descriptor() {
        return gtk_list_box_set_selection_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_selection_mode(GtkListBox *box, GtkSelectionMode mode)
     * }
     */
    public static MethodHandle gtk_list_box_set_selection_mode$handle() {
        return gtk_list_box_set_selection_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_set_selection_mode(GtkListBox *box, GtkSelectionMode mode)
     * }
     */
    public static void gtk_list_box_set_selection_mode(MemorySegment box, int mode) {
        var mh$ = gtk_list_box_set_selection_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_set_selection_mode", box, mode);
            }
            mh$.invokeExact(box, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_selection_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_selection_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_list_box_get_selection_mode(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_selection_mode$descriptor() {
        return gtk_list_box_get_selection_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_list_box_get_selection_mode(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_get_selection_mode$handle() {
        return gtk_list_box_get_selection_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_list_box_get_selection_mode(GtkListBox *box)
     * }
     */
    public static int gtk_list_box_get_selection_mode(MemorySegment box) {
        var mh$ = gtk_list_box_get_selection_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_selection_mode", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_set_filter_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_set_filter_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_filter_func(GtkListBox *box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_list_box_set_filter_func$descriptor() {
        return gtk_list_box_set_filter_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_filter_func(GtkListBox *box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_list_box_set_filter_func$handle() {
        return gtk_list_box_set_filter_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_set_filter_func(GtkListBox *box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_list_box_set_filter_func(MemorySegment box, MemorySegment filter_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_list_box_set_filter_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_set_filter_func", box, filter_func, user_data, destroy);
            }
            mh$.invokeExact(box, filter_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_set_header_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_set_header_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_header_func(GtkListBox *box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_list_box_set_header_func$descriptor() {
        return gtk_list_box_set_header_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_header_func(GtkListBox *box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_list_box_set_header_func$handle() {
        return gtk_list_box_set_header_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_set_header_func(GtkListBox *box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_list_box_set_header_func(MemorySegment box, MemorySegment update_header, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_list_box_set_header_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_set_header_func", box, update_header, user_data, destroy);
            }
            mh$.invokeExact(box, update_header, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_invalidate_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_invalidate_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_filter(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_invalidate_filter$descriptor() {
        return gtk_list_box_invalidate_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_filter(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_invalidate_filter$handle() {
        return gtk_list_box_invalidate_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_filter(GtkListBox *box)
     * }
     */
    public static void gtk_list_box_invalidate_filter(MemorySegment box) {
        var mh$ = gtk_list_box_invalidate_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_invalidate_filter", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_invalidate_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_invalidate_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_sort(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_invalidate_sort$descriptor() {
        return gtk_list_box_invalidate_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_sort(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_invalidate_sort$handle() {
        return gtk_list_box_invalidate_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_sort(GtkListBox *box)
     * }
     */
    public static void gtk_list_box_invalidate_sort(MemorySegment box) {
        var mh$ = gtk_list_box_invalidate_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_invalidate_sort", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_invalidate_headers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_invalidate_headers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_headers(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_invalidate_headers$descriptor() {
        return gtk_list_box_invalidate_headers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_headers(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_invalidate_headers$handle() {
        return gtk_list_box_invalidate_headers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_invalidate_headers(GtkListBox *box)
     * }
     */
    public static void gtk_list_box_invalidate_headers(MemorySegment box) {
        var mh$ = gtk_list_box_invalidate_headers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_invalidate_headers", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_set_sort_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_set_sort_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_sort_func(GtkListBox *box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_list_box_set_sort_func$descriptor() {
        return gtk_list_box_set_sort_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_sort_func(GtkListBox *box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_list_box_set_sort_func$handle() {
        return gtk_list_box_set_sort_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_set_sort_func(GtkListBox *box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_list_box_set_sort_func(MemorySegment box, MemorySegment sort_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_list_box_set_sort_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_set_sort_func", box, sort_func, user_data, destroy);
            }
            mh$.invokeExact(box, sort_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_set_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_set_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_activate_on_single_click(GtkListBox *box, gboolean single)
     * }
     */
    public static FunctionDescriptor gtk_list_box_set_activate_on_single_click$descriptor() {
        return gtk_list_box_set_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_set_activate_on_single_click(GtkListBox *box, gboolean single)
     * }
     */
    public static MethodHandle gtk_list_box_set_activate_on_single_click$handle() {
        return gtk_list_box_set_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_set_activate_on_single_click(GtkListBox *box, gboolean single)
     * }
     */
    public static void gtk_list_box_set_activate_on_single_click(MemorySegment box, int single) {
        var mh$ = gtk_list_box_set_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_set_activate_on_single_click", box, single);
            }
            mh$.invokeExact(box, single);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_get_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_get_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_get_activate_on_single_click(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_get_activate_on_single_click$descriptor() {
        return gtk_list_box_get_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_get_activate_on_single_click(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_get_activate_on_single_click$handle() {
        return gtk_list_box_get_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_list_box_get_activate_on_single_click(GtkListBox *box)
     * }
     */
    public static int gtk_list_box_get_activate_on_single_click(MemorySegment box) {
        var mh$ = gtk_list_box_get_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_get_activate_on_single_click", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_drag_unhighlight_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_drag_unhighlight_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_drag_unhighlight_row(GtkListBox *box)
     * }
     */
    public static FunctionDescriptor gtk_list_box_drag_unhighlight_row$descriptor() {
        return gtk_list_box_drag_unhighlight_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_drag_unhighlight_row(GtkListBox *box)
     * }
     */
    public static MethodHandle gtk_list_box_drag_unhighlight_row$handle() {
        return gtk_list_box_drag_unhighlight_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_drag_unhighlight_row(GtkListBox *box)
     * }
     */
    public static void gtk_list_box_drag_unhighlight_row(MemorySegment box) {
        var mh$ = gtk_list_box_drag_unhighlight_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_drag_unhighlight_row", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_drag_highlight_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_drag_highlight_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_drag_highlight_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static FunctionDescriptor gtk_list_box_drag_highlight_row$descriptor() {
        return gtk_list_box_drag_highlight_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_drag_highlight_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static MethodHandle gtk_list_box_drag_highlight_row$handle() {
        return gtk_list_box_drag_highlight_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_drag_highlight_row(GtkListBox *box, GtkListBoxRow *row)
     * }
     */
    public static void gtk_list_box_drag_highlight_row(MemorySegment box, MemorySegment row) {
        var mh$ = gtk_list_box_drag_highlight_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_drag_highlight_row", box, row);
            }
            mh$.invokeExact(box, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_new()
     * }
     */
    public static FunctionDescriptor gtk_list_box_new$descriptor() {
        return gtk_list_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_new()
     * }
     */
    public static MethodHandle gtk_list_box_new$handle() {
        return gtk_list_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_list_box_new()
     * }
     */
    public static MemorySegment gtk_list_box_new() {
        var mh$ = gtk_list_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_box_bind_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_box_bind_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_box_bind_model(GtkListBox *box, GListModel *model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor gtk_list_box_bind_model$descriptor() {
        return gtk_list_box_bind_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_box_bind_model(GtkListBox *box, GListModel *model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle gtk_list_box_bind_model$handle() {
        return gtk_list_box_bind_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_box_bind_model(GtkListBox *box, GListModel *model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static void gtk_list_box_bind_model(MemorySegment box, MemorySegment model, MemorySegment create_widget_func, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = gtk_list_box_bind_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_box_bind_model", box, model, create_widget_func, user_data, user_data_free_func);
            }
            mh$.invokeExact(box, model, create_widget_func, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkListBox *GtkListBox_autoptr
     * }
     */
    public static final AddressLayout GtkListBox_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkListBox_listautoptr
     * }
     */
    public static final AddressLayout GtkListBox_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkListBox_slistautoptr
     * }
     */
    public static final AddressLayout GtkListBox_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkListBox_queueautoptr
     * }
     */
    public static final AddressLayout GtkListBox_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkListBoxRow *GtkListBoxRow_autoptr
     * }
     */
    public static final AddressLayout GtkListBoxRow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkListBoxRow_listautoptr
     * }
     */
    public static final AddressLayout GtkListBoxRow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkListBoxRow_slistautoptr
     * }
     */
    public static final AddressLayout GtkListBoxRow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkListBoxRow_queueautoptr
     * }
     */
    public static final AddressLayout GtkListBoxRow_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_lock_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_lock_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_lock_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_lock_button_get_type$descriptor() {
        return gtk_lock_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_lock_button_get_type()
     * }
     */
    public static MethodHandle gtk_lock_button_get_type$handle() {
        return gtk_lock_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_lock_button_get_type()
     * }
     */
    public static long gtk_lock_button_get_type() {
        var mh$ = gtk_lock_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_lock_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_lock_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_lock_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_lock_button_new(GPermission *permission)
     * }
     */
    public static FunctionDescriptor gtk_lock_button_new$descriptor() {
        return gtk_lock_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_lock_button_new(GPermission *permission)
     * }
     */
    public static MethodHandle gtk_lock_button_new$handle() {
        return gtk_lock_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_lock_button_new(GPermission *permission)
     * }
     */
    public static MemorySegment gtk_lock_button_new(MemorySegment permission) {
        var mh$ = gtk_lock_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_lock_button_new", permission);
            }
            return (MemorySegment)mh$.invokeExact(permission);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_lock_button_get_permission {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_lock_button_get_permission"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPermission *gtk_lock_button_get_permission(GtkLockButton *button)
     * }
     */
    public static FunctionDescriptor gtk_lock_button_get_permission$descriptor() {
        return gtk_lock_button_get_permission.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPermission *gtk_lock_button_get_permission(GtkLockButton *button)
     * }
     */
    public static MethodHandle gtk_lock_button_get_permission$handle() {
        return gtk_lock_button_get_permission.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPermission *gtk_lock_button_get_permission(GtkLockButton *button)
     * }
     */
    public static MemorySegment gtk_lock_button_get_permission(MemorySegment button) {
        var mh$ = gtk_lock_button_get_permission.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_lock_button_get_permission", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_lock_button_set_permission {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_lock_button_set_permission"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_lock_button_set_permission(GtkLockButton *button, GPermission *permission)
     * }
     */
    public static FunctionDescriptor gtk_lock_button_set_permission$descriptor() {
        return gtk_lock_button_set_permission.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_lock_button_set_permission(GtkLockButton *button, GPermission *permission)
     * }
     */
    public static MethodHandle gtk_lock_button_set_permission$handle() {
        return gtk_lock_button_set_permission.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_lock_button_set_permission(GtkLockButton *button, GPermission *permission)
     * }
     */
    public static void gtk_lock_button_set_permission(MemorySegment button, MemorySegment permission) {
        var mh$ = gtk_lock_button_set_permission.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_lock_button_set_permission", button, permission);
            }
            mh$.invokeExact(button, permission);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_major_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_major_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_get_major_version()
     * }
     */
    public static FunctionDescriptor gtk_get_major_version$descriptor() {
        return gtk_get_major_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_get_major_version()
     * }
     */
    public static MethodHandle gtk_get_major_version$handle() {
        return gtk_get_major_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_get_major_version()
     * }
     */
    public static int gtk_get_major_version() {
        var mh$ = gtk_get_major_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_major_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_minor_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_minor_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_get_minor_version()
     * }
     */
    public static FunctionDescriptor gtk_get_minor_version$descriptor() {
        return gtk_get_minor_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_get_minor_version()
     * }
     */
    public static MethodHandle gtk_get_minor_version$handle() {
        return gtk_get_minor_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_get_minor_version()
     * }
     */
    public static int gtk_get_minor_version() {
        var mh$ = gtk_get_minor_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_minor_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_micro_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_micro_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_get_micro_version()
     * }
     */
    public static FunctionDescriptor gtk_get_micro_version$descriptor() {
        return gtk_get_micro_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_get_micro_version()
     * }
     */
    public static MethodHandle gtk_get_micro_version$handle() {
        return gtk_get_micro_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_get_micro_version()
     * }
     */
    public static int gtk_get_micro_version() {
        var mh$ = gtk_get_micro_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_micro_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_binary_age {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_binary_age"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_get_binary_age()
     * }
     */
    public static FunctionDescriptor gtk_get_binary_age$descriptor() {
        return gtk_get_binary_age.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_get_binary_age()
     * }
     */
    public static MethodHandle gtk_get_binary_age$handle() {
        return gtk_get_binary_age.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_get_binary_age()
     * }
     */
    public static int gtk_get_binary_age() {
        var mh$ = gtk_get_binary_age.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_binary_age");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_interface_age {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_interface_age"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_get_interface_age()
     * }
     */
    public static FunctionDescriptor gtk_get_interface_age$descriptor() {
        return gtk_get_interface_age.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_get_interface_age()
     * }
     */
    public static MethodHandle gtk_get_interface_age$handle() {
        return gtk_get_interface_age.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_get_interface_age()
     * }
     */
    public static int gtk_get_interface_age() {
        var mh$ = gtk_get_interface_age.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_interface_age");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_check_version(guint required_major, guint required_minor, guint required_micro)
     * }
     */
    public static FunctionDescriptor gtk_check_version$descriptor() {
        return gtk_check_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_check_version(guint required_major, guint required_minor, guint required_micro)
     * }
     */
    public static MethodHandle gtk_check_version$handle() {
        return gtk_check_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_check_version(guint required_major, guint required_minor, guint required_micro)
     * }
     */
    public static MemorySegment gtk_check_version(int required_major, int required_minor, int required_micro) {
        var mh$ = gtk_check_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_version", required_major, required_minor, required_micro);
            }
            return (MemorySegment)mh$.invokeExact(required_major, required_minor, required_micro);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_parse_args {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_parse_args"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_parse_args(int *argc, char ***argv)
     * }
     */
    public static FunctionDescriptor gtk_parse_args$descriptor() {
        return gtk_parse_args.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_parse_args(int *argc, char ***argv)
     * }
     */
    public static MethodHandle gtk_parse_args$handle() {
        return gtk_parse_args.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_parse_args(int *argc, char ***argv)
     * }
     */
    public static int gtk_parse_args(MemorySegment argc, MemorySegment argv) {
        var mh$ = gtk_parse_args.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_parse_args", argc, argv);
            }
            return (int)mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_init(int *argc, char ***argv)
     * }
     */
    public static FunctionDescriptor gtk_init$descriptor() {
        return gtk_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_init(int *argc, char ***argv)
     * }
     */
    public static MethodHandle gtk_init$handle() {
        return gtk_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_init(int *argc, char ***argv)
     * }
     */
    public static void gtk_init(MemorySegment argc, MemorySegment argv) {
        var mh$ = gtk_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_init", argc, argv);
            }
            mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_init_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_init_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_init_check(int *argc, char ***argv)
     * }
     */
    public static FunctionDescriptor gtk_init_check$descriptor() {
        return gtk_init_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_init_check(int *argc, char ***argv)
     * }
     */
    public static MethodHandle gtk_init_check$handle() {
        return gtk_init_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_init_check(int *argc, char ***argv)
     * }
     */
    public static int gtk_init_check(MemorySegment argc, MemorySegment argv) {
        var mh$ = gtk_init_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_init_check", argc, argv);
            }
            return (int)mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_init_with_args {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_init_with_args"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_init_with_args(gint *argc, gchar ***argv, const gchar *parameter_string, const GOptionEntry *entries, const gchar *translation_domain, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_init_with_args$descriptor() {
        return gtk_init_with_args.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_init_with_args(gint *argc, gchar ***argv, const gchar *parameter_string, const GOptionEntry *entries, const gchar *translation_domain, GError **error)
     * }
     */
    public static MethodHandle gtk_init_with_args$handle() {
        return gtk_init_with_args.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_init_with_args(gint *argc, gchar ***argv, const gchar *parameter_string, const GOptionEntry *entries, const gchar *translation_domain, GError **error)
     * }
     */
    public static int gtk_init_with_args(MemorySegment argc, MemorySegment argv, MemorySegment parameter_string, MemorySegment entries, MemorySegment translation_domain, MemorySegment error) {
        var mh$ = gtk_init_with_args.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_init_with_args", argc, argv, parameter_string, entries, translation_domain, error);
            }
            return (int)mh$.invokeExact(argc, argv, parameter_string, entries, translation_domain, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_option_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_option_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOptionGroup *gtk_get_option_group(gboolean open_default_display)
     * }
     */
    public static FunctionDescriptor gtk_get_option_group$descriptor() {
        return gtk_get_option_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOptionGroup *gtk_get_option_group(gboolean open_default_display)
     * }
     */
    public static MethodHandle gtk_get_option_group$handle() {
        return gtk_get_option_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOptionGroup *gtk_get_option_group(gboolean open_default_display)
     * }
     */
    public static MemorySegment gtk_get_option_group(int open_default_display) {
        var mh$ = gtk_get_option_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_option_group", open_default_display);
            }
            return (MemorySegment)mh$.invokeExact(open_default_display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_disable_setlocale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_disable_setlocale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_disable_setlocale()
     * }
     */
    public static FunctionDescriptor gtk_disable_setlocale$descriptor() {
        return gtk_disable_setlocale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_disable_setlocale()
     * }
     */
    public static MethodHandle gtk_disable_setlocale$handle() {
        return gtk_disable_setlocale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_disable_setlocale()
     * }
     */
    public static void gtk_disable_setlocale() {
        var mh$ = gtk_disable_setlocale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_disable_setlocale");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_default_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_default_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage *gtk_get_default_language()
     * }
     */
    public static FunctionDescriptor gtk_get_default_language$descriptor() {
        return gtk_get_default_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage *gtk_get_default_language()
     * }
     */
    public static MethodHandle gtk_get_default_language$handle() {
        return gtk_get_default_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage *gtk_get_default_language()
     * }
     */
    public static MemorySegment gtk_get_default_language() {
        var mh$ = gtk_get_default_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_default_language");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_locale_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_locale_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_get_locale_direction()
     * }
     */
    public static FunctionDescriptor gtk_get_locale_direction$descriptor() {
        return gtk_get_locale_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_get_locale_direction()
     * }
     */
    public static MethodHandle gtk_get_locale_direction$handle() {
        return gtk_get_locale_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_get_locale_direction()
     * }
     */
    public static int gtk_get_locale_direction() {
        var mh$ = gtk_get_locale_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_locale_direction");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_events_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_events_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_events_pending()
     * }
     */
    public static FunctionDescriptor gtk_events_pending$descriptor() {
        return gtk_events_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_events_pending()
     * }
     */
    public static MethodHandle gtk_events_pending$handle() {
        return gtk_events_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_events_pending()
     * }
     */
    public static int gtk_events_pending() {
        var mh$ = gtk_events_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_events_pending");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_main_do_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_main_do_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_main_do_event(GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_main_do_event$descriptor() {
        return gtk_main_do_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_main_do_event(GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_main_do_event$handle() {
        return gtk_main_do_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_main_do_event(GdkEvent *event)
     * }
     */
    public static void gtk_main_do_event(MemorySegment event) {
        var mh$ = gtk_main_do_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_main_do_event", event);
            }
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_main {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_main"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_main()
     * }
     */
    public static FunctionDescriptor gtk_main$descriptor() {
        return gtk_main.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_main()
     * }
     */
    public static MethodHandle gtk_main$handle() {
        return gtk_main.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_main()
     * }
     */
    public static void gtk_main() {
        var mh$ = gtk_main.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_main");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_main_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_main_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_main_level()
     * }
     */
    public static FunctionDescriptor gtk_main_level$descriptor() {
        return gtk_main_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_main_level()
     * }
     */
    public static MethodHandle gtk_main_level$handle() {
        return gtk_main_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_main_level()
     * }
     */
    public static int gtk_main_level() {
        var mh$ = gtk_main_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_main_level");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_main_quit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_main_quit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_main_quit()
     * }
     */
    public static FunctionDescriptor gtk_main_quit$descriptor() {
        return gtk_main_quit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_main_quit()
     * }
     */
    public static MethodHandle gtk_main_quit$handle() {
        return gtk_main_quit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_main_quit()
     * }
     */
    public static void gtk_main_quit() {
        var mh$ = gtk_main_quit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_main_quit");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_main_iteration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_main_iteration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_main_iteration()
     * }
     */
    public static FunctionDescriptor gtk_main_iteration$descriptor() {
        return gtk_main_iteration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_main_iteration()
     * }
     */
    public static MethodHandle gtk_main_iteration$handle() {
        return gtk_main_iteration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_main_iteration()
     * }
     */
    public static int gtk_main_iteration() {
        var mh$ = gtk_main_iteration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_main_iteration");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_main_iteration_do {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_main_iteration_do"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_main_iteration_do(gboolean blocking)
     * }
     */
    public static FunctionDescriptor gtk_main_iteration_do$descriptor() {
        return gtk_main_iteration_do.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_main_iteration_do(gboolean blocking)
     * }
     */
    public static MethodHandle gtk_main_iteration_do$handle() {
        return gtk_main_iteration_do.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_main_iteration_do(gboolean blocking)
     * }
     */
    public static int gtk_main_iteration_do(int blocking) {
        var mh$ = gtk_main_iteration_do.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_main_iteration_do", blocking);
            }
            return (int)mh$.invokeExact(blocking);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_true {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_true"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_true()
     * }
     */
    public static FunctionDescriptor gtk_true$descriptor() {
        return gtk_true.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_true()
     * }
     */
    public static MethodHandle gtk_true$handle() {
        return gtk_true.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_true()
     * }
     */
    public static int gtk_true() {
        var mh$ = gtk_true.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_true");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_false {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_false"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_false()
     * }
     */
    public static FunctionDescriptor gtk_false$descriptor() {
        return gtk_false.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_false()
     * }
     */
    public static MethodHandle gtk_false$handle() {
        return gtk_false.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_false()
     * }
     */
    public static int gtk_false() {
        var mh$ = gtk_false.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_false");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grab_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grab_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grab_add(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_grab_add$descriptor() {
        return gtk_grab_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grab_add(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_grab_add$handle() {
        return gtk_grab_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grab_add(GtkWidget *widget)
     * }
     */
    public static void gtk_grab_add(MemorySegment widget) {
        var mh$ = gtk_grab_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grab_add", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grab_get_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grab_get_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grab_get_current()
     * }
     */
    public static FunctionDescriptor gtk_grab_get_current$descriptor() {
        return gtk_grab_get_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grab_get_current()
     * }
     */
    public static MethodHandle gtk_grab_get_current$handle() {
        return gtk_grab_get_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_grab_get_current()
     * }
     */
    public static MemorySegment gtk_grab_get_current() {
        var mh$ = gtk_grab_get_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grab_get_current");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_grab_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_grab_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_grab_remove(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_grab_remove$descriptor() {
        return gtk_grab_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_grab_remove(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_grab_remove$handle() {
        return gtk_grab_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_grab_remove(GtkWidget *widget)
     * }
     */
    public static void gtk_grab_remove(MemorySegment widget) {
        var mh$ = gtk_grab_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_grab_remove", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_device_grab_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_device_grab_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_device_grab_add(GtkWidget *widget, GdkDevice *device, gboolean block_others)
     * }
     */
    public static FunctionDescriptor gtk_device_grab_add$descriptor() {
        return gtk_device_grab_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_device_grab_add(GtkWidget *widget, GdkDevice *device, gboolean block_others)
     * }
     */
    public static MethodHandle gtk_device_grab_add$handle() {
        return gtk_device_grab_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_device_grab_add(GtkWidget *widget, GdkDevice *device, gboolean block_others)
     * }
     */
    public static void gtk_device_grab_add(MemorySegment widget, MemorySegment device, int block_others) {
        var mh$ = gtk_device_grab_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_device_grab_add", widget, device, block_others);
            }
            mh$.invokeExact(widget, device, block_others);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_device_grab_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_device_grab_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_device_grab_remove(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gtk_device_grab_remove$descriptor() {
        return gtk_device_grab_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_device_grab_remove(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static MethodHandle gtk_device_grab_remove$handle() {
        return gtk_device_grab_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_device_grab_remove(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static void gtk_device_grab_remove(MemorySegment widget, MemorySegment device) {
        var mh$ = gtk_device_grab_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_device_grab_remove", widget, device);
            }
            mh$.invokeExact(widget, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_key_snooper_install {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_key_snooper_install"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_key_snooper_install(GtkKeySnoopFunc snooper, gpointer func_data)
     * }
     */
    public static FunctionDescriptor gtk_key_snooper_install$descriptor() {
        return gtk_key_snooper_install.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_key_snooper_install(GtkKeySnoopFunc snooper, gpointer func_data)
     * }
     */
    public static MethodHandle gtk_key_snooper_install$handle() {
        return gtk_key_snooper_install.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_key_snooper_install(GtkKeySnoopFunc snooper, gpointer func_data)
     * }
     */
    public static int gtk_key_snooper_install(MemorySegment snooper, MemorySegment func_data) {
        var mh$ = gtk_key_snooper_install.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_key_snooper_install", snooper, func_data);
            }
            return (int)mh$.invokeExact(snooper, func_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_key_snooper_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_key_snooper_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_key_snooper_remove(guint snooper_handler_id)
     * }
     */
    public static FunctionDescriptor gtk_key_snooper_remove$descriptor() {
        return gtk_key_snooper_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_key_snooper_remove(guint snooper_handler_id)
     * }
     */
    public static MethodHandle gtk_key_snooper_remove$handle() {
        return gtk_key_snooper_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_key_snooper_remove(guint snooper_handler_id)
     * }
     */
    public static void gtk_key_snooper_remove(int snooper_handler_id) {
        var mh$ = gtk_key_snooper_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_key_snooper_remove", snooper_handler_id);
            }
            mh$.invokeExact(snooper_handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_current_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_current_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gtk_get_current_event()
     * }
     */
    public static FunctionDescriptor gtk_get_current_event$descriptor() {
        return gtk_get_current_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gtk_get_current_event()
     * }
     */
    public static MethodHandle gtk_get_current_event$handle() {
        return gtk_get_current_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEvent *gtk_get_current_event()
     * }
     */
    public static MemorySegment gtk_get_current_event() {
        var mh$ = gtk_get_current_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_current_event");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_current_event_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_current_event_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 gtk_get_current_event_time()
     * }
     */
    public static FunctionDescriptor gtk_get_current_event_time$descriptor() {
        return gtk_get_current_event_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 gtk_get_current_event_time()
     * }
     */
    public static MethodHandle gtk_get_current_event_time$handle() {
        return gtk_get_current_event_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 gtk_get_current_event_time()
     * }
     */
    public static int gtk_get_current_event_time() {
        var mh$ = gtk_get_current_event_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_current_event_time");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_current_event_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_current_event_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_get_current_event_state(GdkModifierType *state)
     * }
     */
    public static FunctionDescriptor gtk_get_current_event_state$descriptor() {
        return gtk_get_current_event_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_get_current_event_state(GdkModifierType *state)
     * }
     */
    public static MethodHandle gtk_get_current_event_state$handle() {
        return gtk_get_current_event_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_get_current_event_state(GdkModifierType *state)
     * }
     */
    public static int gtk_get_current_event_state(MemorySegment state) {
        var mh$ = gtk_get_current_event_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_current_event_state", state);
            }
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_current_event_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_current_event_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gtk_get_current_event_device()
     * }
     */
    public static FunctionDescriptor gtk_get_current_event_device$descriptor() {
        return gtk_get_current_event_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gtk_get_current_event_device()
     * }
     */
    public static MethodHandle gtk_get_current_event_device$handle() {
        return gtk_get_current_event_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gtk_get_current_event_device()
     * }
     */
    public static MemorySegment gtk_get_current_event_device() {
        var mh$ = gtk_get_current_event_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_current_event_device");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_get_event_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_event_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_get_event_widget(GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_get_event_widget$descriptor() {
        return gtk_get_event_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_get_event_widget(GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_get_event_widget$handle() {
        return gtk_get_event_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_get_event_widget(GdkEvent *event)
     * }
     */
    public static MemorySegment gtk_get_event_widget(MemorySegment event) {
        var mh$ = gtk_get_event_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_event_widget", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_propagate_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_propagate_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_propagate_event(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_propagate_event$descriptor() {
        return gtk_propagate_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_propagate_event(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_propagate_event$handle() {
        return gtk_propagate_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_propagate_event(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static void gtk_propagate_event(MemorySegment widget, MemorySegment event) {
        var mh$ = gtk_propagate_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_propagate_event", widget, event);
            }
            mh$.invokeExact(widget, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_bar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_bar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_menu_bar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_menu_bar_get_type$descriptor() {
        return gtk_menu_bar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_menu_bar_get_type()
     * }
     */
    public static MethodHandle gtk_menu_bar_get_type$handle() {
        return gtk_menu_bar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_menu_bar_get_type()
     * }
     */
    public static long gtk_menu_bar_get_type() {
        var mh$ = gtk_menu_bar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_bar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_bar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_bar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_bar_new()
     * }
     */
    public static FunctionDescriptor gtk_menu_bar_new$descriptor() {
        return gtk_menu_bar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_bar_new()
     * }
     */
    public static MethodHandle gtk_menu_bar_new$handle() {
        return gtk_menu_bar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_bar_new()
     * }
     */
    public static MemorySegment gtk_menu_bar_new() {
        var mh$ = gtk_menu_bar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_bar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_bar_new_from_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_bar_new_from_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_bar_new_from_model(GMenuModel *model)
     * }
     */
    public static FunctionDescriptor gtk_menu_bar_new_from_model$descriptor() {
        return gtk_menu_bar_new_from_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_bar_new_from_model(GMenuModel *model)
     * }
     */
    public static MethodHandle gtk_menu_bar_new_from_model$handle() {
        return gtk_menu_bar_new_from_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_bar_new_from_model(GMenuModel *model)
     * }
     */
    public static MemorySegment gtk_menu_bar_new_from_model(MemorySegment model) {
        var mh$ = gtk_menu_bar_new_from_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_bar_new_from_model", model);
            }
            return (MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_bar_get_pack_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_bar_get_pack_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPackDirection gtk_menu_bar_get_pack_direction(GtkMenuBar *menubar)
     * }
     */
    public static FunctionDescriptor gtk_menu_bar_get_pack_direction$descriptor() {
        return gtk_menu_bar_get_pack_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPackDirection gtk_menu_bar_get_pack_direction(GtkMenuBar *menubar)
     * }
     */
    public static MethodHandle gtk_menu_bar_get_pack_direction$handle() {
        return gtk_menu_bar_get_pack_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPackDirection gtk_menu_bar_get_pack_direction(GtkMenuBar *menubar)
     * }
     */
    public static int gtk_menu_bar_get_pack_direction(MemorySegment menubar) {
        var mh$ = gtk_menu_bar_get_pack_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_bar_get_pack_direction", menubar);
            }
            return (int)mh$.invokeExact(menubar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_bar_set_pack_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_bar_set_pack_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_bar_set_pack_direction(GtkMenuBar *menubar, GtkPackDirection pack_dir)
     * }
     */
    public static FunctionDescriptor gtk_menu_bar_set_pack_direction$descriptor() {
        return gtk_menu_bar_set_pack_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_bar_set_pack_direction(GtkMenuBar *menubar, GtkPackDirection pack_dir)
     * }
     */
    public static MethodHandle gtk_menu_bar_set_pack_direction$handle() {
        return gtk_menu_bar_set_pack_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_bar_set_pack_direction(GtkMenuBar *menubar, GtkPackDirection pack_dir)
     * }
     */
    public static void gtk_menu_bar_set_pack_direction(MemorySegment menubar, int pack_dir) {
        var mh$ = gtk_menu_bar_set_pack_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_bar_set_pack_direction", menubar, pack_dir);
            }
            mh$.invokeExact(menubar, pack_dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_bar_get_child_pack_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_bar_get_child_pack_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPackDirection gtk_menu_bar_get_child_pack_direction(GtkMenuBar *menubar)
     * }
     */
    public static FunctionDescriptor gtk_menu_bar_get_child_pack_direction$descriptor() {
        return gtk_menu_bar_get_child_pack_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPackDirection gtk_menu_bar_get_child_pack_direction(GtkMenuBar *menubar)
     * }
     */
    public static MethodHandle gtk_menu_bar_get_child_pack_direction$handle() {
        return gtk_menu_bar_get_child_pack_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPackDirection gtk_menu_bar_get_child_pack_direction(GtkMenuBar *menubar)
     * }
     */
    public static int gtk_menu_bar_get_child_pack_direction(MemorySegment menubar) {
        var mh$ = gtk_menu_bar_get_child_pack_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_bar_get_child_pack_direction", menubar);
            }
            return (int)mh$.invokeExact(menubar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_bar_set_child_pack_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_bar_set_child_pack_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_bar_set_child_pack_direction(GtkMenuBar *menubar, GtkPackDirection child_pack_dir)
     * }
     */
    public static FunctionDescriptor gtk_menu_bar_set_child_pack_direction$descriptor() {
        return gtk_menu_bar_set_child_pack_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_bar_set_child_pack_direction(GtkMenuBar *menubar, GtkPackDirection child_pack_dir)
     * }
     */
    public static MethodHandle gtk_menu_bar_set_child_pack_direction$handle() {
        return gtk_menu_bar_set_child_pack_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_bar_set_child_pack_direction(GtkMenuBar *menubar, GtkPackDirection child_pack_dir)
     * }
     */
    public static void gtk_menu_bar_set_child_pack_direction(MemorySegment menubar, int child_pack_dir) {
        var mh$ = gtk_menu_bar_set_child_pack_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_bar_set_child_pack_direction", menubar, child_pack_dir);
            }
            mh$.invokeExact(menubar, child_pack_dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_menu_bar_cycle_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_menu_bar_cycle_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_menu_bar_cycle_focus(GtkMenuBar *menubar, GtkDirectionType dir)
     * }
     */
    public static FunctionDescriptor _gtk_menu_bar_cycle_focus$descriptor() {
        return _gtk_menu_bar_cycle_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_menu_bar_cycle_focus(GtkMenuBar *menubar, GtkDirectionType dir)
     * }
     */
    public static MethodHandle _gtk_menu_bar_cycle_focus$handle() {
        return _gtk_menu_bar_cycle_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_menu_bar_cycle_focus(GtkMenuBar *menubar, GtkDirectionType dir)
     * }
     */
    public static void _gtk_menu_bar_cycle_focus(MemorySegment menubar, int dir) {
        var mh$ = _gtk_menu_bar_cycle_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_menu_bar_cycle_focus", menubar, dir);
            }
            mh$.invokeExact(menubar, dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_menu_bar_get_viewable_menu_bars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_menu_bar_get_viewable_menu_bars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GList *_gtk_menu_bar_get_viewable_menu_bars(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor _gtk_menu_bar_get_viewable_menu_bars$descriptor() {
        return _gtk_menu_bar_get_viewable_menu_bars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GList *_gtk_menu_bar_get_viewable_menu_bars(GtkWindow *window)
     * }
     */
    public static MethodHandle _gtk_menu_bar_get_viewable_menu_bars$handle() {
        return _gtk_menu_bar_get_viewable_menu_bars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * GList *_gtk_menu_bar_get_viewable_menu_bars(GtkWindow *window)
     * }
     */
    public static MemorySegment _gtk_menu_bar_get_viewable_menu_bars(MemorySegment window) {
        var mh$ = _gtk_menu_bar_get_viewable_menu_bars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_menu_bar_get_viewable_menu_bars", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_popover_get_type()
     * }
     */
    public static FunctionDescriptor gtk_popover_get_type$descriptor() {
        return gtk_popover_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_popover_get_type()
     * }
     */
    public static MethodHandle gtk_popover_get_type$handle() {
        return gtk_popover_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_popover_get_type()
     * }
     */
    public static long gtk_popover_get_type() {
        var mh$ = gtk_popover_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_new(GtkWidget *relative_to)
     * }
     */
    public static FunctionDescriptor gtk_popover_new$descriptor() {
        return gtk_popover_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_new(GtkWidget *relative_to)
     * }
     */
    public static MethodHandle gtk_popover_new$handle() {
        return gtk_popover_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_new(GtkWidget *relative_to)
     * }
     */
    public static MemorySegment gtk_popover_new(MemorySegment relative_to) {
        var mh$ = gtk_popover_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_new", relative_to);
            }
            return (MemorySegment)mh$.invokeExact(relative_to);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_new_from_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_new_from_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_new_from_model(GtkWidget *relative_to, GMenuModel *model)
     * }
     */
    public static FunctionDescriptor gtk_popover_new_from_model$descriptor() {
        return gtk_popover_new_from_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_new_from_model(GtkWidget *relative_to, GMenuModel *model)
     * }
     */
    public static MethodHandle gtk_popover_new_from_model$handle() {
        return gtk_popover_new_from_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_new_from_model(GtkWidget *relative_to, GMenuModel *model)
     * }
     */
    public static MemorySegment gtk_popover_new_from_model(MemorySegment relative_to, MemorySegment model) {
        var mh$ = gtk_popover_new_from_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_new_from_model", relative_to, model);
            }
            return (MemorySegment)mh$.invokeExact(relative_to, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_set_relative_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_set_relative_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_relative_to(GtkPopover *popover, GtkWidget *relative_to)
     * }
     */
    public static FunctionDescriptor gtk_popover_set_relative_to$descriptor() {
        return gtk_popover_set_relative_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_relative_to(GtkPopover *popover, GtkWidget *relative_to)
     * }
     */
    public static MethodHandle gtk_popover_set_relative_to$handle() {
        return gtk_popover_set_relative_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_set_relative_to(GtkPopover *popover, GtkWidget *relative_to)
     * }
     */
    public static void gtk_popover_set_relative_to(MemorySegment popover, MemorySegment relative_to) {
        var mh$ = gtk_popover_set_relative_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_set_relative_to", popover, relative_to);
            }
            mh$.invokeExact(popover, relative_to);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_relative_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_relative_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_get_relative_to(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_get_relative_to$descriptor() {
        return gtk_popover_get_relative_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_get_relative_to(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_get_relative_to$handle() {
        return gtk_popover_get_relative_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_get_relative_to(GtkPopover *popover)
     * }
     */
    public static MemorySegment gtk_popover_get_relative_to(MemorySegment popover) {
        var mh$ = gtk_popover_get_relative_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_relative_to", popover);
            }
            return (MemorySegment)mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_set_pointing_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_set_pointing_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_pointing_to(GtkPopover *popover, const GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_popover_set_pointing_to$descriptor() {
        return gtk_popover_set_pointing_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_pointing_to(GtkPopover *popover, const GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_popover_set_pointing_to$handle() {
        return gtk_popover_set_pointing_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_set_pointing_to(GtkPopover *popover, const GdkRectangle *rect)
     * }
     */
    public static void gtk_popover_set_pointing_to(MemorySegment popover, MemorySegment rect) {
        var mh$ = gtk_popover_set_pointing_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_set_pointing_to", popover, rect);
            }
            mh$.invokeExact(popover, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_pointing_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_pointing_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_pointing_to(GtkPopover *popover, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_popover_get_pointing_to$descriptor() {
        return gtk_popover_get_pointing_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_pointing_to(GtkPopover *popover, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_popover_get_pointing_to$handle() {
        return gtk_popover_get_pointing_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_pointing_to(GtkPopover *popover, GdkRectangle *rect)
     * }
     */
    public static int gtk_popover_get_pointing_to(MemorySegment popover, MemorySegment rect) {
        var mh$ = gtk_popover_get_pointing_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_pointing_to", popover, rect);
            }
            return (int)mh$.invokeExact(popover, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_set_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_set_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_position(GtkPopover *popover, GtkPositionType position)
     * }
     */
    public static FunctionDescriptor gtk_popover_set_position$descriptor() {
        return gtk_popover_set_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_position(GtkPopover *popover, GtkPositionType position)
     * }
     */
    public static MethodHandle gtk_popover_set_position$handle() {
        return gtk_popover_set_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_set_position(GtkPopover *popover, GtkPositionType position)
     * }
     */
    public static void gtk_popover_set_position(MemorySegment popover, int position) {
        var mh$ = gtk_popover_set_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_set_position", popover, position);
            }
            mh$.invokeExact(popover, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_popover_get_position(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_get_position$descriptor() {
        return gtk_popover_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_popover_get_position(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_get_position$handle() {
        return gtk_popover_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPositionType gtk_popover_get_position(GtkPopover *popover)
     * }
     */
    public static int gtk_popover_get_position(MemorySegment popover) {
        var mh$ = gtk_popover_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_position", popover);
            }
            return (int)mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_set_modal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_set_modal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_modal(GtkPopover *popover, gboolean modal)
     * }
     */
    public static FunctionDescriptor gtk_popover_set_modal$descriptor() {
        return gtk_popover_set_modal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_modal(GtkPopover *popover, gboolean modal)
     * }
     */
    public static MethodHandle gtk_popover_set_modal$handle() {
        return gtk_popover_set_modal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_set_modal(GtkPopover *popover, gboolean modal)
     * }
     */
    public static void gtk_popover_set_modal(MemorySegment popover, int modal) {
        var mh$ = gtk_popover_set_modal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_set_modal", popover, modal);
            }
            mh$.invokeExact(popover, modal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_modal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_modal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_modal(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_get_modal$descriptor() {
        return gtk_popover_get_modal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_modal(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_get_modal$handle() {
        return gtk_popover_get_modal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_modal(GtkPopover *popover)
     * }
     */
    public static int gtk_popover_get_modal(MemorySegment popover) {
        var mh$ = gtk_popover_get_modal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_modal", popover);
            }
            return (int)mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_bind_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_bind_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_bind_model(GtkPopover *popover, GMenuModel *model, const gchar *action_namespace)
     * }
     */
    public static FunctionDescriptor gtk_popover_bind_model$descriptor() {
        return gtk_popover_bind_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_bind_model(GtkPopover *popover, GMenuModel *model, const gchar *action_namespace)
     * }
     */
    public static MethodHandle gtk_popover_bind_model$handle() {
        return gtk_popover_bind_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_bind_model(GtkPopover *popover, GMenuModel *model, const gchar *action_namespace)
     * }
     */
    public static void gtk_popover_bind_model(MemorySegment popover, MemorySegment model, MemorySegment action_namespace) {
        var mh$ = gtk_popover_bind_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_bind_model", popover, model, action_namespace);
            }
            mh$.invokeExact(popover, model, action_namespace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_set_transitions_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_set_transitions_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_transitions_enabled(GtkPopover *popover, gboolean transitions_enabled)
     * }
     */
    public static FunctionDescriptor gtk_popover_set_transitions_enabled$descriptor() {
        return gtk_popover_set_transitions_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_transitions_enabled(GtkPopover *popover, gboolean transitions_enabled)
     * }
     */
    public static MethodHandle gtk_popover_set_transitions_enabled$handle() {
        return gtk_popover_set_transitions_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_set_transitions_enabled(GtkPopover *popover, gboolean transitions_enabled)
     * }
     */
    public static void gtk_popover_set_transitions_enabled(MemorySegment popover, int transitions_enabled) {
        var mh$ = gtk_popover_set_transitions_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_set_transitions_enabled", popover, transitions_enabled);
            }
            mh$.invokeExact(popover, transitions_enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_transitions_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_transitions_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_transitions_enabled(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_get_transitions_enabled$descriptor() {
        return gtk_popover_get_transitions_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_transitions_enabled(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_get_transitions_enabled$handle() {
        return gtk_popover_get_transitions_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_popover_get_transitions_enabled(GtkPopover *popover)
     * }
     */
    public static int gtk_popover_get_transitions_enabled(MemorySegment popover) {
        var mh$ = gtk_popover_get_transitions_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_transitions_enabled", popover);
            }
            return (int)mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_set_default_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_set_default_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_default_widget(GtkPopover *popover, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_popover_set_default_widget$descriptor() {
        return gtk_popover_set_default_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_default_widget(GtkPopover *popover, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_popover_set_default_widget$handle() {
        return gtk_popover_set_default_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_set_default_widget(GtkPopover *popover, GtkWidget *widget)
     * }
     */
    public static void gtk_popover_set_default_widget(MemorySegment popover, MemorySegment widget) {
        var mh$ = gtk_popover_set_default_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_set_default_widget", popover, widget);
            }
            mh$.invokeExact(popover, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_default_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_default_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_get_default_widget(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_get_default_widget$descriptor() {
        return gtk_popover_get_default_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_get_default_widget(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_get_default_widget$handle() {
        return gtk_popover_get_default_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_get_default_widget(GtkPopover *popover)
     * }
     */
    public static MemorySegment gtk_popover_get_default_widget(MemorySegment popover) {
        var mh$ = gtk_popover_get_default_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_default_widget", popover);
            }
            return (MemorySegment)mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_set_constrain_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_set_constrain_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_constrain_to(GtkPopover *popover, GtkPopoverConstraint constraint)
     * }
     */
    public static FunctionDescriptor gtk_popover_set_constrain_to$descriptor() {
        return gtk_popover_set_constrain_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_set_constrain_to(GtkPopover *popover, GtkPopoverConstraint constraint)
     * }
     */
    public static MethodHandle gtk_popover_set_constrain_to$handle() {
        return gtk_popover_set_constrain_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_set_constrain_to(GtkPopover *popover, GtkPopoverConstraint constraint)
     * }
     */
    public static void gtk_popover_set_constrain_to(MemorySegment popover, int constraint) {
        var mh$ = gtk_popover_set_constrain_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_set_constrain_to", popover, constraint);
            }
            mh$.invokeExact(popover, constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_get_constrain_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_get_constrain_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPopoverConstraint gtk_popover_get_constrain_to(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_get_constrain_to$descriptor() {
        return gtk_popover_get_constrain_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPopoverConstraint gtk_popover_get_constrain_to(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_get_constrain_to$handle() {
        return gtk_popover_get_constrain_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPopoverConstraint gtk_popover_get_constrain_to(GtkPopover *popover)
     * }
     */
    public static int gtk_popover_get_constrain_to(MemorySegment popover) {
        var mh$ = gtk_popover_get_constrain_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_get_constrain_to", popover);
            }
            return (int)mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_popup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_popup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_popup(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_popup$descriptor() {
        return gtk_popover_popup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_popup(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_popup$handle() {
        return gtk_popover_popup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_popup(GtkPopover *popover)
     * }
     */
    public static void gtk_popover_popup(MemorySegment popover) {
        var mh$ = gtk_popover_popup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_popup", popover);
            }
            mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_popdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_popdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_popdown(GtkPopover *popover)
     * }
     */
    public static FunctionDescriptor gtk_popover_popdown$descriptor() {
        return gtk_popover_popdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_popdown(GtkPopover *popover)
     * }
     */
    public static MethodHandle gtk_popover_popdown$handle() {
        return gtk_popover_popdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_popdown(GtkPopover *popover)
     * }
     */
    public static void gtk_popover_popdown(MemorySegment popover) {
        var mh$ = gtk_popover_popdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_popdown", popover);
            }
            mh$.invokeExact(popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_menu_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_menu_button_get_type$descriptor() {
        return gtk_menu_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_menu_button_get_type()
     * }
     */
    public static MethodHandle gtk_menu_button_get_type$handle() {
        return gtk_menu_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_menu_button_get_type()
     * }
     */
    public static long gtk_menu_button_get_type() {
        var mh$ = gtk_menu_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_button_new()
     * }
     */
    public static FunctionDescriptor gtk_menu_button_new$descriptor() {
        return gtk_menu_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_button_new()
     * }
     */
    public static MethodHandle gtk_menu_button_new$handle() {
        return gtk_menu_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_button_new()
     * }
     */
    public static MemorySegment gtk_menu_button_new() {
        var mh$ = gtk_menu_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_set_popup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_set_popup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_popup(GtkMenuButton *menu_button, GtkWidget *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_set_popup$descriptor() {
        return gtk_menu_button_set_popup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_popup(GtkMenuButton *menu_button, GtkWidget *menu)
     * }
     */
    public static MethodHandle gtk_menu_button_set_popup$handle() {
        return gtk_menu_button_set_popup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_popup(GtkMenuButton *menu_button, GtkWidget *menu)
     * }
     */
    public static void gtk_menu_button_set_popup(MemorySegment menu_button, MemorySegment menu) {
        var mh$ = gtk_menu_button_set_popup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_set_popup", menu_button, menu);
            }
            mh$.invokeExact(menu_button, menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_get_popup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_get_popup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkMenu *gtk_menu_button_get_popup(GtkMenuButton *menu_button)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_get_popup$descriptor() {
        return gtk_menu_button_get_popup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkMenu *gtk_menu_button_get_popup(GtkMenuButton *menu_button)
     * }
     */
    public static MethodHandle gtk_menu_button_get_popup$handle() {
        return gtk_menu_button_get_popup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkMenu *gtk_menu_button_get_popup(GtkMenuButton *menu_button)
     * }
     */
    public static MemorySegment gtk_menu_button_get_popup(MemorySegment menu_button) {
        var mh$ = gtk_menu_button_get_popup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_get_popup", menu_button);
            }
            return (MemorySegment)mh$.invokeExact(menu_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_set_popover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_set_popover"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_popover(GtkMenuButton *menu_button, GtkWidget *popover)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_set_popover$descriptor() {
        return gtk_menu_button_set_popover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_popover(GtkMenuButton *menu_button, GtkWidget *popover)
     * }
     */
    public static MethodHandle gtk_menu_button_set_popover$handle() {
        return gtk_menu_button_set_popover.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_popover(GtkMenuButton *menu_button, GtkWidget *popover)
     * }
     */
    public static void gtk_menu_button_set_popover(MemorySegment menu_button, MemorySegment popover) {
        var mh$ = gtk_menu_button_set_popover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_set_popover", menu_button, popover);
            }
            mh$.invokeExact(menu_button, popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_get_popover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_get_popover"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPopover *gtk_menu_button_get_popover(GtkMenuButton *menu_button)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_get_popover$descriptor() {
        return gtk_menu_button_get_popover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPopover *gtk_menu_button_get_popover(GtkMenuButton *menu_button)
     * }
     */
    public static MethodHandle gtk_menu_button_get_popover$handle() {
        return gtk_menu_button_get_popover.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPopover *gtk_menu_button_get_popover(GtkMenuButton *menu_button)
     * }
     */
    public static MemorySegment gtk_menu_button_get_popover(MemorySegment menu_button) {
        var mh$ = gtk_menu_button_get_popover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_get_popover", menu_button);
            }
            return (MemorySegment)mh$.invokeExact(menu_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_set_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_set_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_direction(GtkMenuButton *menu_button, GtkArrowType direction)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_set_direction$descriptor() {
        return gtk_menu_button_set_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_direction(GtkMenuButton *menu_button, GtkArrowType direction)
     * }
     */
    public static MethodHandle gtk_menu_button_set_direction$handle() {
        return gtk_menu_button_set_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_direction(GtkMenuButton *menu_button, GtkArrowType direction)
     * }
     */
    public static void gtk_menu_button_set_direction(MemorySegment menu_button, int direction) {
        var mh$ = gtk_menu_button_set_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_set_direction", menu_button, direction);
            }
            mh$.invokeExact(menu_button, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkArrowType gtk_menu_button_get_direction(GtkMenuButton *menu_button)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_get_direction$descriptor() {
        return gtk_menu_button_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkArrowType gtk_menu_button_get_direction(GtkMenuButton *menu_button)
     * }
     */
    public static MethodHandle gtk_menu_button_get_direction$handle() {
        return gtk_menu_button_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkArrowType gtk_menu_button_get_direction(GtkMenuButton *menu_button)
     * }
     */
    public static int gtk_menu_button_get_direction(MemorySegment menu_button) {
        var mh$ = gtk_menu_button_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_get_direction", menu_button);
            }
            return (int)mh$.invokeExact(menu_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_set_menu_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_set_menu_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_menu_model(GtkMenuButton *menu_button, GMenuModel *menu_model)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_set_menu_model$descriptor() {
        return gtk_menu_button_set_menu_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_menu_model(GtkMenuButton *menu_button, GMenuModel *menu_model)
     * }
     */
    public static MethodHandle gtk_menu_button_set_menu_model$handle() {
        return gtk_menu_button_set_menu_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_menu_model(GtkMenuButton *menu_button, GMenuModel *menu_model)
     * }
     */
    public static void gtk_menu_button_set_menu_model(MemorySegment menu_button, MemorySegment menu_model) {
        var mh$ = gtk_menu_button_set_menu_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_set_menu_model", menu_button, menu_model);
            }
            mh$.invokeExact(menu_button, menu_model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_get_menu_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_get_menu_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuModel *gtk_menu_button_get_menu_model(GtkMenuButton *menu_button)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_get_menu_model$descriptor() {
        return gtk_menu_button_get_menu_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuModel *gtk_menu_button_get_menu_model(GtkMenuButton *menu_button)
     * }
     */
    public static MethodHandle gtk_menu_button_get_menu_model$handle() {
        return gtk_menu_button_get_menu_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuModel *gtk_menu_button_get_menu_model(GtkMenuButton *menu_button)
     * }
     */
    public static MemorySegment gtk_menu_button_get_menu_model(MemorySegment menu_button) {
        var mh$ = gtk_menu_button_get_menu_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_get_menu_model", menu_button);
            }
            return (MemorySegment)mh$.invokeExact(menu_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_set_align_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_set_align_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_align_widget(GtkMenuButton *menu_button, GtkWidget *align_widget)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_set_align_widget$descriptor() {
        return gtk_menu_button_set_align_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_align_widget(GtkMenuButton *menu_button, GtkWidget *align_widget)
     * }
     */
    public static MethodHandle gtk_menu_button_set_align_widget$handle() {
        return gtk_menu_button_set_align_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_align_widget(GtkMenuButton *menu_button, GtkWidget *align_widget)
     * }
     */
    public static void gtk_menu_button_set_align_widget(MemorySegment menu_button, MemorySegment align_widget) {
        var mh$ = gtk_menu_button_set_align_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_set_align_widget", menu_button, align_widget);
            }
            mh$.invokeExact(menu_button, align_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_get_align_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_get_align_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_button_get_align_widget(GtkMenuButton *menu_button)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_get_align_widget$descriptor() {
        return gtk_menu_button_get_align_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_button_get_align_widget(GtkMenuButton *menu_button)
     * }
     */
    public static MethodHandle gtk_menu_button_get_align_widget$handle() {
        return gtk_menu_button_get_align_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_button_get_align_widget(GtkMenuButton *menu_button)
     * }
     */
    public static MemorySegment gtk_menu_button_get_align_widget(MemorySegment menu_button) {
        var mh$ = gtk_menu_button_get_align_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_get_align_widget", menu_button);
            }
            return (MemorySegment)mh$.invokeExact(menu_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_set_use_popover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_set_use_popover"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_use_popover(GtkMenuButton *menu_button, gboolean use_popover)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_set_use_popover$descriptor() {
        return gtk_menu_button_set_use_popover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_use_popover(GtkMenuButton *menu_button, gboolean use_popover)
     * }
     */
    public static MethodHandle gtk_menu_button_set_use_popover$handle() {
        return gtk_menu_button_set_use_popover.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_button_set_use_popover(GtkMenuButton *menu_button, gboolean use_popover)
     * }
     */
    public static void gtk_menu_button_set_use_popover(MemorySegment menu_button, int use_popover) {
        var mh$ = gtk_menu_button_set_use_popover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_set_use_popover", menu_button, use_popover);
            }
            mh$.invokeExact(menu_button, use_popover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_button_get_use_popover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_button_get_use_popover"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_button_get_use_popover(GtkMenuButton *menu_button)
     * }
     */
    public static FunctionDescriptor gtk_menu_button_get_use_popover$descriptor() {
        return gtk_menu_button_get_use_popover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_button_get_use_popover(GtkMenuButton *menu_button)
     * }
     */
    public static MethodHandle gtk_menu_button_get_use_popover$handle() {
        return gtk_menu_button_get_use_popover.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_menu_button_get_use_popover(GtkMenuButton *menu_button)
     * }
     */
    public static int gtk_menu_button_get_use_popover(MemorySegment menu_button) {
        var mh$ = gtk_menu_button_get_use_popover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_button_get_use_popover", menu_button);
            }
            return (int)mh$.invokeExact(menu_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_size_group_get_type()
     * }
     */
    public static FunctionDescriptor gtk_size_group_get_type$descriptor() {
        return gtk_size_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_size_group_get_type()
     * }
     */
    public static MethodHandle gtk_size_group_get_type$handle() {
        return gtk_size_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_size_group_get_type()
     * }
     */
    public static long gtk_size_group_get_type() {
        var mh$ = gtk_size_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_size_group_new(GtkSizeGroupMode mode)
     * }
     */
    public static FunctionDescriptor gtk_size_group_new$descriptor() {
        return gtk_size_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_size_group_new(GtkSizeGroupMode mode)
     * }
     */
    public static MethodHandle gtk_size_group_new$handle() {
        return gtk_size_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_size_group_new(GtkSizeGroupMode mode)
     * }
     */
    public static MemorySegment gtk_size_group_new(int mode) {
        var mh$ = gtk_size_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_new", mode);
            }
            return (MemorySegment)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_set_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_set_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_size_group_set_mode(GtkSizeGroup *size_group, GtkSizeGroupMode mode)
     * }
     */
    public static FunctionDescriptor gtk_size_group_set_mode$descriptor() {
        return gtk_size_group_set_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_size_group_set_mode(GtkSizeGroup *size_group, GtkSizeGroupMode mode)
     * }
     */
    public static MethodHandle gtk_size_group_set_mode$handle() {
        return gtk_size_group_set_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_size_group_set_mode(GtkSizeGroup *size_group, GtkSizeGroupMode mode)
     * }
     */
    public static void gtk_size_group_set_mode(MemorySegment size_group, int mode) {
        var mh$ = gtk_size_group_set_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_set_mode", size_group, mode);
            }
            mh$.invokeExact(size_group, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_get_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_get_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSizeGroupMode gtk_size_group_get_mode(GtkSizeGroup *size_group)
     * }
     */
    public static FunctionDescriptor gtk_size_group_get_mode$descriptor() {
        return gtk_size_group_get_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSizeGroupMode gtk_size_group_get_mode(GtkSizeGroup *size_group)
     * }
     */
    public static MethodHandle gtk_size_group_get_mode$handle() {
        return gtk_size_group_get_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSizeGroupMode gtk_size_group_get_mode(GtkSizeGroup *size_group)
     * }
     */
    public static int gtk_size_group_get_mode(MemorySegment size_group) {
        var mh$ = gtk_size_group_get_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_get_mode", size_group);
            }
            return (int)mh$.invokeExact(size_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_set_ignore_hidden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_set_ignore_hidden"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_size_group_set_ignore_hidden(GtkSizeGroup *size_group, gboolean ignore_hidden)
     * }
     */
    public static FunctionDescriptor gtk_size_group_set_ignore_hidden$descriptor() {
        return gtk_size_group_set_ignore_hidden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_size_group_set_ignore_hidden(GtkSizeGroup *size_group, gboolean ignore_hidden)
     * }
     */
    public static MethodHandle gtk_size_group_set_ignore_hidden$handle() {
        return gtk_size_group_set_ignore_hidden.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_size_group_set_ignore_hidden(GtkSizeGroup *size_group, gboolean ignore_hidden)
     * }
     */
    public static void gtk_size_group_set_ignore_hidden(MemorySegment size_group, int ignore_hidden) {
        var mh$ = gtk_size_group_set_ignore_hidden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_set_ignore_hidden", size_group, ignore_hidden);
            }
            mh$.invokeExact(size_group, ignore_hidden);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_get_ignore_hidden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_get_ignore_hidden"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_size_group_get_ignore_hidden(GtkSizeGroup *size_group)
     * }
     */
    public static FunctionDescriptor gtk_size_group_get_ignore_hidden$descriptor() {
        return gtk_size_group_get_ignore_hidden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_size_group_get_ignore_hidden(GtkSizeGroup *size_group)
     * }
     */
    public static MethodHandle gtk_size_group_get_ignore_hidden$handle() {
        return gtk_size_group_get_ignore_hidden.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_size_group_get_ignore_hidden(GtkSizeGroup *size_group)
     * }
     */
    public static int gtk_size_group_get_ignore_hidden(MemorySegment size_group) {
        var mh$ = gtk_size_group_get_ignore_hidden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_get_ignore_hidden", size_group);
            }
            return (int)mh$.invokeExact(size_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_add_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_add_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_size_group_add_widget(GtkSizeGroup *size_group, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_size_group_add_widget$descriptor() {
        return gtk_size_group_add_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_size_group_add_widget(GtkSizeGroup *size_group, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_size_group_add_widget$handle() {
        return gtk_size_group_add_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_size_group_add_widget(GtkSizeGroup *size_group, GtkWidget *widget)
     * }
     */
    public static void gtk_size_group_add_widget(MemorySegment size_group, MemorySegment widget) {
        var mh$ = gtk_size_group_add_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_add_widget", size_group, widget);
            }
            mh$.invokeExact(size_group, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_remove_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_remove_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_size_group_remove_widget(GtkSizeGroup *size_group, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_size_group_remove_widget$descriptor() {
        return gtk_size_group_remove_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_size_group_remove_widget(GtkSizeGroup *size_group, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_size_group_remove_widget$handle() {
        return gtk_size_group_remove_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_size_group_remove_widget(GtkSizeGroup *size_group, GtkWidget *widget)
     * }
     */
    public static void gtk_size_group_remove_widget(MemorySegment size_group, MemorySegment widget) {
        var mh$ = gtk_size_group_remove_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_remove_widget", size_group, widget);
            }
            mh$.invokeExact(size_group, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_size_group_get_widgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_size_group_get_widgets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_size_group_get_widgets(GtkSizeGroup *size_group)
     * }
     */
    public static FunctionDescriptor gtk_size_group_get_widgets$descriptor() {
        return gtk_size_group_get_widgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_size_group_get_widgets(GtkSizeGroup *size_group)
     * }
     */
    public static MethodHandle gtk_size_group_get_widgets$handle() {
        return gtk_size_group_get_widgets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_size_group_get_widgets(GtkSizeGroup *size_group)
     * }
     */
    public static MemorySegment gtk_size_group_get_widgets(MemorySegment size_group) {
        var mh$ = gtk_size_group_get_widgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_size_group_get_widgets", size_group);
            }
            return (MemorySegment)mh$.invokeExact(size_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tool_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_type$descriptor() {
        return gtk_tool_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tool_item_get_type()
     * }
     */
    public static MethodHandle gtk_tool_item_get_type$handle() {
        return gtk_tool_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tool_item_get_type()
     * }
     */
    public static long gtk_tool_item_get_type() {
        var mh$ = gtk_tool_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_new()
     * }
     */
    public static FunctionDescriptor gtk_tool_item_new$descriptor() {
        return gtk_tool_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_new()
     * }
     */
    public static MethodHandle gtk_tool_item_new$handle() {
        return gtk_tool_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_item_new()
     * }
     */
    public static MemorySegment gtk_tool_item_new() {
        var mh$ = gtk_tool_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_homogeneous(GtkToolItem *tool_item, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_homogeneous$descriptor() {
        return gtk_tool_item_set_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_homogeneous(GtkToolItem *tool_item, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_tool_item_set_homogeneous$handle() {
        return gtk_tool_item_set_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_homogeneous(GtkToolItem *tool_item, gboolean homogeneous)
     * }
     */
    public static void gtk_tool_item_set_homogeneous(MemorySegment tool_item, int homogeneous) {
        var mh$ = gtk_tool_item_set_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_homogeneous", tool_item, homogeneous);
            }
            mh$.invokeExact(tool_item, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_homogeneous(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_homogeneous$descriptor() {
        return gtk_tool_item_get_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_homogeneous(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_homogeneous$handle() {
        return gtk_tool_item_get_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_homogeneous(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_homogeneous(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_homogeneous", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_expand(GtkToolItem *tool_item, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_expand$descriptor() {
        return gtk_tool_item_set_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_expand(GtkToolItem *tool_item, gboolean expand)
     * }
     */
    public static MethodHandle gtk_tool_item_set_expand$handle() {
        return gtk_tool_item_set_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_expand(GtkToolItem *tool_item, gboolean expand)
     * }
     */
    public static void gtk_tool_item_set_expand(MemorySegment tool_item, int expand) {
        var mh$ = gtk_tool_item_set_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_expand", tool_item, expand);
            }
            mh$.invokeExact(tool_item, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_expand(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_expand$descriptor() {
        return gtk_tool_item_get_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_expand(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_expand$handle() {
        return gtk_tool_item_get_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_expand(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_expand(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_expand", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_tooltip_text(GtkToolItem *tool_item, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_tooltip_text$descriptor() {
        return gtk_tool_item_set_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_tooltip_text(GtkToolItem *tool_item, const gchar *text)
     * }
     */
    public static MethodHandle gtk_tool_item_set_tooltip_text$handle() {
        return gtk_tool_item_set_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_tooltip_text(GtkToolItem *tool_item, const gchar *text)
     * }
     */
    public static void gtk_tool_item_set_tooltip_text(MemorySegment tool_item, MemorySegment text) {
        var mh$ = gtk_tool_item_set_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_tooltip_text", tool_item, text);
            }
            mh$.invokeExact(tool_item, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_tooltip_markup(GtkToolItem *tool_item, const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_tooltip_markup$descriptor() {
        return gtk_tool_item_set_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_tooltip_markup(GtkToolItem *tool_item, const gchar *markup)
     * }
     */
    public static MethodHandle gtk_tool_item_set_tooltip_markup$handle() {
        return gtk_tool_item_set_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_tooltip_markup(GtkToolItem *tool_item, const gchar *markup)
     * }
     */
    public static void gtk_tool_item_set_tooltip_markup(MemorySegment tool_item, MemorySegment markup) {
        var mh$ = gtk_tool_item_set_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_tooltip_markup", tool_item, markup);
            }
            mh$.invokeExact(tool_item, markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_use_drag_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_use_drag_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_use_drag_window(GtkToolItem *tool_item, gboolean use_drag_window)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_use_drag_window$descriptor() {
        return gtk_tool_item_set_use_drag_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_use_drag_window(GtkToolItem *tool_item, gboolean use_drag_window)
     * }
     */
    public static MethodHandle gtk_tool_item_set_use_drag_window$handle() {
        return gtk_tool_item_set_use_drag_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_use_drag_window(GtkToolItem *tool_item, gboolean use_drag_window)
     * }
     */
    public static void gtk_tool_item_set_use_drag_window(MemorySegment tool_item, int use_drag_window) {
        var mh$ = gtk_tool_item_set_use_drag_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_use_drag_window", tool_item, use_drag_window);
            }
            mh$.invokeExact(tool_item, use_drag_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_use_drag_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_use_drag_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_use_drag_window(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_use_drag_window$descriptor() {
        return gtk_tool_item_get_use_drag_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_use_drag_window(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_use_drag_window$handle() {
        return gtk_tool_item_get_use_drag_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_use_drag_window(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_use_drag_window(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_use_drag_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_use_drag_window", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_visible_horizontal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_visible_horizontal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_visible_horizontal(GtkToolItem *tool_item, gboolean visible_horizontal)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_visible_horizontal$descriptor() {
        return gtk_tool_item_set_visible_horizontal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_visible_horizontal(GtkToolItem *tool_item, gboolean visible_horizontal)
     * }
     */
    public static MethodHandle gtk_tool_item_set_visible_horizontal$handle() {
        return gtk_tool_item_set_visible_horizontal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_visible_horizontal(GtkToolItem *tool_item, gboolean visible_horizontal)
     * }
     */
    public static void gtk_tool_item_set_visible_horizontal(MemorySegment tool_item, int visible_horizontal) {
        var mh$ = gtk_tool_item_set_visible_horizontal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_visible_horizontal", tool_item, visible_horizontal);
            }
            mh$.invokeExact(tool_item, visible_horizontal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_visible_horizontal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_visible_horizontal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_visible_horizontal(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_visible_horizontal$descriptor() {
        return gtk_tool_item_get_visible_horizontal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_visible_horizontal(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_visible_horizontal$handle() {
        return gtk_tool_item_get_visible_horizontal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_visible_horizontal(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_visible_horizontal(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_visible_horizontal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_visible_horizontal", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_visible_vertical {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_visible_vertical"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_visible_vertical(GtkToolItem *tool_item, gboolean visible_vertical)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_visible_vertical$descriptor() {
        return gtk_tool_item_set_visible_vertical.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_visible_vertical(GtkToolItem *tool_item, gboolean visible_vertical)
     * }
     */
    public static MethodHandle gtk_tool_item_set_visible_vertical$handle() {
        return gtk_tool_item_set_visible_vertical.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_visible_vertical(GtkToolItem *tool_item, gboolean visible_vertical)
     * }
     */
    public static void gtk_tool_item_set_visible_vertical(MemorySegment tool_item, int visible_vertical) {
        var mh$ = gtk_tool_item_set_visible_vertical.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_visible_vertical", tool_item, visible_vertical);
            }
            mh$.invokeExact(tool_item, visible_vertical);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_visible_vertical {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_visible_vertical"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_visible_vertical(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_visible_vertical$descriptor() {
        return gtk_tool_item_get_visible_vertical.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_visible_vertical(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_visible_vertical$handle() {
        return gtk_tool_item_get_visible_vertical.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_visible_vertical(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_visible_vertical(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_visible_vertical.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_visible_vertical", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_is_important {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_is_important"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_is_important(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_is_important$descriptor() {
        return gtk_tool_item_get_is_important.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_is_important(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_is_important$handle() {
        return gtk_tool_item_get_is_important.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_item_get_is_important(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_is_important(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_is_important.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_is_important", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_is_important {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_is_important"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_is_important(GtkToolItem *tool_item, gboolean is_important)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_is_important$descriptor() {
        return gtk_tool_item_set_is_important.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_is_important(GtkToolItem *tool_item, gboolean is_important)
     * }
     */
    public static MethodHandle gtk_tool_item_set_is_important$handle() {
        return gtk_tool_item_set_is_important.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_is_important(GtkToolItem *tool_item, gboolean is_important)
     * }
     */
    public static void gtk_tool_item_set_is_important(MemorySegment tool_item, int is_important) {
        var mh$ = gtk_tool_item_set_is_important.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_is_important", tool_item, is_important);
            }
            mh$.invokeExact(tool_item, is_important);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_ellipsize_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_ellipsize_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_ellipsize_mode$descriptor() {
        return gtk_tool_item_get_ellipsize_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_ellipsize_mode$handle() {
        return gtk_tool_item_get_ellipsize_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_ellipsize_mode(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_ellipsize_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_ellipsize_mode", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_icon_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_icon_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_item_get_icon_size(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_icon_size$descriptor() {
        return gtk_tool_item_get_icon_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_item_get_icon_size(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_icon_size$handle() {
        return gtk_tool_item_get_icon_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSize gtk_tool_item_get_icon_size(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_icon_size(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_icon_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_icon_size", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_item_get_orientation(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_orientation$descriptor() {
        return gtk_tool_item_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_item_get_orientation(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_orientation$handle() {
        return gtk_tool_item_get_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_item_get_orientation(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_orientation(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_orientation", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_toolbar_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_toolbar_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_item_get_toolbar_style(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_toolbar_style$descriptor() {
        return gtk_tool_item_get_toolbar_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_item_get_toolbar_style(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_toolbar_style$handle() {
        return gtk_tool_item_get_toolbar_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolbarStyle gtk_tool_item_get_toolbar_style(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_toolbar_style(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_toolbar_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_toolbar_style", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_relief_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_relief_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_item_get_relief_style(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_relief_style$descriptor() {
        return gtk_tool_item_get_relief_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_item_get_relief_style(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_relief_style$handle() {
        return gtk_tool_item_get_relief_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_tool_item_get_relief_style(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_relief_style(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_relief_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_relief_style", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_text_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_text_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat gtk_tool_item_get_text_alignment(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_text_alignment$descriptor() {
        return gtk_tool_item_get_text_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat gtk_tool_item_get_text_alignment(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_text_alignment$handle() {
        return gtk_tool_item_get_text_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gfloat gtk_tool_item_get_text_alignment(GtkToolItem *tool_item)
     * }
     */
    public static float gtk_tool_item_get_text_alignment(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_text_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_text_alignment", tool_item);
            }
            return (float)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_text_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_text_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_item_get_text_orientation(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_text_orientation$descriptor() {
        return gtk_tool_item_get_text_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_item_get_text_orientation(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_text_orientation$handle() {
        return gtk_tool_item_get_text_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkOrientation gtk_tool_item_get_text_orientation(GtkToolItem *tool_item)
     * }
     */
    public static int gtk_tool_item_get_text_orientation(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_text_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_text_orientation", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_text_size_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_text_size_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_tool_item_get_text_size_group(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_text_size_group$descriptor() {
        return gtk_tool_item_get_text_size_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_tool_item_get_text_size_group(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_get_text_size_group$handle() {
        return gtk_tool_item_get_text_size_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSizeGroup *gtk_tool_item_get_text_size_group(GtkToolItem *tool_item)
     * }
     */
    public static MemorySegment gtk_tool_item_get_text_size_group(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_get_text_size_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_text_size_group", tool_item);
            }
            return (MemorySegment)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_retrieve_proxy_menu_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_retrieve_proxy_menu_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_retrieve_proxy_menu_item$descriptor() {
        return gtk_tool_item_retrieve_proxy_menu_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_retrieve_proxy_menu_item$handle() {
        return gtk_tool_item_retrieve_proxy_menu_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem *tool_item)
     * }
     */
    public static MemorySegment gtk_tool_item_retrieve_proxy_menu_item(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_retrieve_proxy_menu_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_retrieve_proxy_menu_item", tool_item);
            }
            return (MemorySegment)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_get_proxy_menu_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_get_proxy_menu_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_get_proxy_menu_item(GtkToolItem *tool_item, const gchar *menu_item_id)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_get_proxy_menu_item$descriptor() {
        return gtk_tool_item_get_proxy_menu_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_get_proxy_menu_item(GtkToolItem *tool_item, const gchar *menu_item_id)
     * }
     */
    public static MethodHandle gtk_tool_item_get_proxy_menu_item$handle() {
        return gtk_tool_item_get_proxy_menu_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_item_get_proxy_menu_item(GtkToolItem *tool_item, const gchar *menu_item_id)
     * }
     */
    public static MemorySegment gtk_tool_item_get_proxy_menu_item(MemorySegment tool_item, MemorySegment menu_item_id) {
        var mh$ = gtk_tool_item_get_proxy_menu_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_get_proxy_menu_item", tool_item, menu_item_id);
            }
            return (MemorySegment)mh$.invokeExact(tool_item, menu_item_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_set_proxy_menu_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_set_proxy_menu_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_proxy_menu_item(GtkToolItem *tool_item, const gchar *menu_item_id, GtkWidget *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_set_proxy_menu_item$descriptor() {
        return gtk_tool_item_set_proxy_menu_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_proxy_menu_item(GtkToolItem *tool_item, const gchar *menu_item_id, GtkWidget *menu_item)
     * }
     */
    public static MethodHandle gtk_tool_item_set_proxy_menu_item$handle() {
        return gtk_tool_item_set_proxy_menu_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_set_proxy_menu_item(GtkToolItem *tool_item, const gchar *menu_item_id, GtkWidget *menu_item)
     * }
     */
    public static void gtk_tool_item_set_proxy_menu_item(MemorySegment tool_item, MemorySegment menu_item_id, MemorySegment menu_item) {
        var mh$ = gtk_tool_item_set_proxy_menu_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_set_proxy_menu_item", tool_item, menu_item_id, menu_item);
            }
            mh$.invokeExact(tool_item, menu_item_id, menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_rebuild_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_rebuild_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_rebuild_menu(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_rebuild_menu$descriptor() {
        return gtk_tool_item_rebuild_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_rebuild_menu(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_rebuild_menu$handle() {
        return gtk_tool_item_rebuild_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_rebuild_menu(GtkToolItem *tool_item)
     * }
     */
    public static void gtk_tool_item_rebuild_menu(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_rebuild_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_rebuild_menu", tool_item);
            }
            mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_item_toolbar_reconfigured {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_item_toolbar_reconfigured"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_toolbar_reconfigured(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor gtk_tool_item_toolbar_reconfigured$descriptor() {
        return gtk_tool_item_toolbar_reconfigured.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_item_toolbar_reconfigured(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle gtk_tool_item_toolbar_reconfigured$handle() {
        return gtk_tool_item_toolbar_reconfigured.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_item_toolbar_reconfigured(GtkToolItem *tool_item)
     * }
     */
    public static void gtk_tool_item_toolbar_reconfigured(MemorySegment tool_item) {
        var mh$ = gtk_tool_item_toolbar_reconfigured.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_item_toolbar_reconfigured", tool_item);
            }
            mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_tool_item_create_menu_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_tool_item_create_menu_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gboolean _gtk_tool_item_create_menu_proxy(GtkToolItem *tool_item)
     * }
     */
    public static FunctionDescriptor _gtk_tool_item_create_menu_proxy$descriptor() {
        return _gtk_tool_item_create_menu_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gboolean _gtk_tool_item_create_menu_proxy(GtkToolItem *tool_item)
     * }
     */
    public static MethodHandle _gtk_tool_item_create_menu_proxy$handle() {
        return _gtk_tool_item_create_menu_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gboolean _gtk_tool_item_create_menu_proxy(GtkToolItem *tool_item)
     * }
     */
    public static int _gtk_tool_item_create_menu_proxy(MemorySegment tool_item) {
        var mh$ = _gtk_tool_item_create_menu_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_tool_item_create_menu_proxy", tool_item);
            }
            return (int)mh$.invokeExact(tool_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tool_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tool_button_get_type$descriptor() {
        return gtk_tool_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tool_button_get_type()
     * }
     */
    public static MethodHandle gtk_tool_button_get_type$handle() {
        return gtk_tool_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tool_button_get_type()
     * }
     */
    public static long gtk_tool_button_get_type() {
        var mh$ = gtk_tool_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_button_new(GtkWidget *icon_widget, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_new$descriptor() {
        return gtk_tool_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_button_new(GtkWidget *icon_widget, const gchar *label)
     * }
     */
    public static MethodHandle gtk_tool_button_new$handle() {
        return gtk_tool_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_button_new(GtkWidget *icon_widget, const gchar *label)
     * }
     */
    public static MemorySegment gtk_tool_button_new(MemorySegment icon_widget, MemorySegment label) {
        var mh$ = gtk_tool_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_new", icon_widget, label);
            }
            return (MemorySegment)mh$.invokeExact(icon_widget, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_new_from_stock$descriptor() {
        return gtk_tool_button_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_tool_button_new_from_stock$handle() {
        return gtk_tool_button_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_tool_button_new_from_stock(MemorySegment stock_id) {
        var mh$ = gtk_tool_button_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_new_from_stock", stock_id);
            }
            return (MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_label(GtkToolButton *button, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_set_label$descriptor() {
        return gtk_tool_button_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_label(GtkToolButton *button, const gchar *label)
     * }
     */
    public static MethodHandle gtk_tool_button_set_label$handle() {
        return gtk_tool_button_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_label(GtkToolButton *button, const gchar *label)
     * }
     */
    public static void gtk_tool_button_set_label(MemorySegment button, MemorySegment label) {
        var mh$ = gtk_tool_button_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_set_label", button, label);
            }
            mh$.invokeExact(button, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_label(GtkToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_get_label$descriptor() {
        return gtk_tool_button_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_label(GtkToolButton *button)
     * }
     */
    public static MethodHandle gtk_tool_button_get_label$handle() {
        return gtk_tool_button_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_label(GtkToolButton *button)
     * }
     */
    public static MemorySegment gtk_tool_button_get_label(MemorySegment button) {
        var mh$ = gtk_tool_button_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_get_label", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_set_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_set_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_use_underline(GtkToolButton *button, gboolean use_underline)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_set_use_underline$descriptor() {
        return gtk_tool_button_set_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_use_underline(GtkToolButton *button, gboolean use_underline)
     * }
     */
    public static MethodHandle gtk_tool_button_set_use_underline$handle() {
        return gtk_tool_button_set_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_use_underline(GtkToolButton *button, gboolean use_underline)
     * }
     */
    public static void gtk_tool_button_set_use_underline(MemorySegment button, int use_underline) {
        var mh$ = gtk_tool_button_set_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_set_use_underline", button, use_underline);
            }
            mh$.invokeExact(button, use_underline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_get_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_get_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_button_get_use_underline(GtkToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_get_use_underline$descriptor() {
        return gtk_tool_button_get_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tool_button_get_use_underline(GtkToolButton *button)
     * }
     */
    public static MethodHandle gtk_tool_button_get_use_underline$handle() {
        return gtk_tool_button_get_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tool_button_get_use_underline(GtkToolButton *button)
     * }
     */
    public static int gtk_tool_button_get_use_underline(MemorySegment button) {
        var mh$ = gtk_tool_button_get_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_get_use_underline", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_set_stock_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_set_stock_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_stock_id(GtkToolButton *button, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_set_stock_id$descriptor() {
        return gtk_tool_button_set_stock_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_stock_id(GtkToolButton *button, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_tool_button_set_stock_id$handle() {
        return gtk_tool_button_set_stock_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_stock_id(GtkToolButton *button, const gchar *stock_id)
     * }
     */
    public static void gtk_tool_button_set_stock_id(MemorySegment button, MemorySegment stock_id) {
        var mh$ = gtk_tool_button_set_stock_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_set_stock_id", button, stock_id);
            }
            mh$.invokeExact(button, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_get_stock_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_get_stock_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_stock_id(GtkToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_get_stock_id$descriptor() {
        return gtk_tool_button_get_stock_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_stock_id(GtkToolButton *button)
     * }
     */
    public static MethodHandle gtk_tool_button_get_stock_id$handle() {
        return gtk_tool_button_get_stock_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_stock_id(GtkToolButton *button)
     * }
     */
    public static MemorySegment gtk_tool_button_get_stock_id(MemorySegment button) {
        var mh$ = gtk_tool_button_get_stock_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_get_stock_id", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_icon_name(GtkToolButton *button, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_set_icon_name$descriptor() {
        return gtk_tool_button_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_icon_name(GtkToolButton *button, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_tool_button_set_icon_name$handle() {
        return gtk_tool_button_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_icon_name(GtkToolButton *button, const gchar *icon_name)
     * }
     */
    public static void gtk_tool_button_set_icon_name(MemorySegment button, MemorySegment icon_name) {
        var mh$ = gtk_tool_button_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_set_icon_name", button, icon_name);
            }
            mh$.invokeExact(button, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_get_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_get_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_icon_name(GtkToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_get_icon_name$descriptor() {
        return gtk_tool_button_get_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_icon_name(GtkToolButton *button)
     * }
     */
    public static MethodHandle gtk_tool_button_get_icon_name$handle() {
        return gtk_tool_button_get_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_tool_button_get_icon_name(GtkToolButton *button)
     * }
     */
    public static MemorySegment gtk_tool_button_get_icon_name(MemorySegment button) {
        var mh$ = gtk_tool_button_get_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_get_icon_name", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_set_icon_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_set_icon_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_icon_widget(GtkToolButton *button, GtkWidget *icon_widget)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_set_icon_widget$descriptor() {
        return gtk_tool_button_set_icon_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_icon_widget(GtkToolButton *button, GtkWidget *icon_widget)
     * }
     */
    public static MethodHandle gtk_tool_button_set_icon_widget$handle() {
        return gtk_tool_button_set_icon_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_icon_widget(GtkToolButton *button, GtkWidget *icon_widget)
     * }
     */
    public static void gtk_tool_button_set_icon_widget(MemorySegment button, MemorySegment icon_widget) {
        var mh$ = gtk_tool_button_set_icon_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_set_icon_widget", button, icon_widget);
            }
            mh$.invokeExact(button, icon_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_get_icon_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_get_icon_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_button_get_icon_widget(GtkToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_get_icon_widget$descriptor() {
        return gtk_tool_button_get_icon_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_button_get_icon_widget(GtkToolButton *button)
     * }
     */
    public static MethodHandle gtk_tool_button_get_icon_widget$handle() {
        return gtk_tool_button_get_icon_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_button_get_icon_widget(GtkToolButton *button)
     * }
     */
    public static MemorySegment gtk_tool_button_get_icon_widget(MemorySegment button) {
        var mh$ = gtk_tool_button_get_icon_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_get_icon_widget", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_set_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_set_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_label_widget(GtkToolButton *button, GtkWidget *label_widget)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_set_label_widget$descriptor() {
        return gtk_tool_button_set_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_label_widget(GtkToolButton *button, GtkWidget *label_widget)
     * }
     */
    public static MethodHandle gtk_tool_button_set_label_widget$handle() {
        return gtk_tool_button_set_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tool_button_set_label_widget(GtkToolButton *button, GtkWidget *label_widget)
     * }
     */
    public static void gtk_tool_button_set_label_widget(MemorySegment button, MemorySegment label_widget) {
        var mh$ = gtk_tool_button_set_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_set_label_widget", button, label_widget);
            }
            mh$.invokeExact(button, label_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tool_button_get_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tool_button_get_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_button_get_label_widget(GtkToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_tool_button_get_label_widget$descriptor() {
        return gtk_tool_button_get_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_button_get_label_widget(GtkToolButton *button)
     * }
     */
    public static MethodHandle gtk_tool_button_get_label_widget$handle() {
        return gtk_tool_button_get_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tool_button_get_label_widget(GtkToolButton *button)
     * }
     */
    public static MemorySegment gtk_tool_button_get_label_widget(MemorySegment button) {
        var mh$ = gtk_tool_button_get_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tool_button_get_label_widget", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_tool_button_get_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_tool_button_get_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GtkWidget *_gtk_tool_button_get_button(GtkToolButton *button)
     * }
     */
    public static FunctionDescriptor _gtk_tool_button_get_button$descriptor() {
        return _gtk_tool_button_get_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GtkWidget *_gtk_tool_button_get_button(GtkToolButton *button)
     * }
     */
    public static MethodHandle _gtk_tool_button_get_button$handle() {
        return _gtk_tool_button_get_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * GtkWidget *_gtk_tool_button_get_button(GtkToolButton *button)
     * }
     */
    public static MemorySegment _gtk_tool_button_get_button(MemorySegment button) {
        var mh$ = _gtk_tool_button_get_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_tool_button_get_button", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_tool_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_tool_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_menu_tool_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_menu_tool_button_get_type$descriptor() {
        return gtk_menu_tool_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_menu_tool_button_get_type()
     * }
     */
    public static MethodHandle gtk_menu_tool_button_get_type$handle() {
        return gtk_menu_tool_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_menu_tool_button_get_type()
     * }
     */
    public static long gtk_menu_tool_button_get_type() {
        var mh$ = gtk_menu_tool_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_tool_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_tool_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_tool_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_menu_tool_button_new(GtkWidget *icon_widget, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_menu_tool_button_new$descriptor() {
        return gtk_menu_tool_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_menu_tool_button_new(GtkWidget *icon_widget, const gchar *label)
     * }
     */
    public static MethodHandle gtk_menu_tool_button_new$handle() {
        return gtk_menu_tool_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_menu_tool_button_new(GtkWidget *icon_widget, const gchar *label)
     * }
     */
    public static MemorySegment gtk_menu_tool_button_new(MemorySegment icon_widget, MemorySegment label) {
        var mh$ = gtk_menu_tool_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_tool_button_new", icon_widget, label);
            }
            return (MemorySegment)mh$.invokeExact(icon_widget, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_tool_button_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_tool_button_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_menu_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_menu_tool_button_new_from_stock$descriptor() {
        return gtk_menu_tool_button_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_menu_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_menu_tool_button_new_from_stock$handle() {
        return gtk_menu_tool_button_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToolItem *gtk_menu_tool_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_menu_tool_button_new_from_stock(MemorySegment stock_id) {
        var mh$ = gtk_menu_tool_button_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_tool_button_new_from_stock", stock_id);
            }
            return (MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_tool_button_set_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_tool_button_set_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_menu(GtkMenuToolButton *button, GtkWidget *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_tool_button_set_menu$descriptor() {
        return gtk_menu_tool_button_set_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_menu(GtkMenuToolButton *button, GtkWidget *menu)
     * }
     */
    public static MethodHandle gtk_menu_tool_button_set_menu$handle() {
        return gtk_menu_tool_button_set_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_menu(GtkMenuToolButton *button, GtkWidget *menu)
     * }
     */
    public static void gtk_menu_tool_button_set_menu(MemorySegment button, MemorySegment menu) {
        var mh$ = gtk_menu_tool_button_set_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_tool_button_set_menu", button, menu);
            }
            mh$.invokeExact(button, menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_tool_button_get_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_tool_button_get_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_tool_button_get_menu(GtkMenuToolButton *button)
     * }
     */
    public static FunctionDescriptor gtk_menu_tool_button_get_menu$descriptor() {
        return gtk_menu_tool_button_get_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_tool_button_get_menu(GtkMenuToolButton *button)
     * }
     */
    public static MethodHandle gtk_menu_tool_button_get_menu$handle() {
        return gtk_menu_tool_button_get_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_tool_button_get_menu(GtkMenuToolButton *button)
     * }
     */
    public static MemorySegment gtk_menu_tool_button_get_menu(MemorySegment button) {
        var mh$ = gtk_menu_tool_button_get_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_tool_button_get_menu", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_tool_button_set_arrow_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_tool_button_set_arrow_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton *button, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_menu_tool_button_set_arrow_tooltip_text$descriptor() {
        return gtk_menu_tool_button_set_arrow_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton *button, const gchar *text)
     * }
     */
    public static MethodHandle gtk_menu_tool_button_set_arrow_tooltip_text$handle() {
        return gtk_menu_tool_button_set_arrow_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton *button, const gchar *text)
     * }
     */
    public static void gtk_menu_tool_button_set_arrow_tooltip_text(MemorySegment button, MemorySegment text) {
        var mh$ = gtk_menu_tool_button_set_arrow_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_tool_button_set_arrow_tooltip_text", button, text);
            }
            mh$.invokeExact(button, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_tool_button_set_arrow_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_tool_button_set_arrow_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton *button, const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_menu_tool_button_set_arrow_tooltip_markup$descriptor() {
        return gtk_menu_tool_button_set_arrow_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton *button, const gchar *markup)
     * }
     */
    public static MethodHandle gtk_menu_tool_button_set_arrow_tooltip_markup$handle() {
        return gtk_menu_tool_button_set_arrow_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton *button, const gchar *markup)
     * }
     */
    public static void gtk_menu_tool_button_set_arrow_tooltip_markup(MemorySegment button, MemorySegment markup) {
        var mh$ = gtk_menu_tool_button_set_arrow_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_tool_button_set_arrow_tooltip_markup", button, markup);
            }
            mh$.invokeExact(button, markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_BUTTONS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONS_NONE = 0
     * }
     */
    public static int GTK_BUTTONS_NONE() {
        return GTK_BUTTONS_NONE;
    }
    private static final int GTK_BUTTONS_OK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONS_OK = 1
     * }
     */
    public static int GTK_BUTTONS_OK() {
        return GTK_BUTTONS_OK;
    }
    private static final int GTK_BUTTONS_CLOSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONS_CLOSE = 2
     * }
     */
    public static int GTK_BUTTONS_CLOSE() {
        return GTK_BUTTONS_CLOSE;
    }
    private static final int GTK_BUTTONS_CANCEL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONS_CANCEL = 3
     * }
     */
    public static int GTK_BUTTONS_CANCEL() {
        return GTK_BUTTONS_CANCEL;
    }
    private static final int GTK_BUTTONS_YES_NO = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONS_YES_NO = 4
     * }
     */
    public static int GTK_BUTTONS_YES_NO() {
        return GTK_BUTTONS_YES_NO;
    }
    private static final int GTK_BUTTONS_OK_CANCEL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONS_OK_CANCEL = 5
     * }
     */
    public static int GTK_BUTTONS_OK_CANCEL() {
        return GTK_BUTTONS_OK_CANCEL;
    }

    private static class gtk_message_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_message_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_message_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_message_dialog_get_type$descriptor() {
        return gtk_message_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_message_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_message_dialog_get_type$handle() {
        return gtk_message_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_message_dialog_get_type()
     * }
     */
    public static long gtk_message_dialog_get_type() {
        var mh$ = gtk_message_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_message_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_new(GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...)
     * }
     */
    public static class gtk_message_dialog_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_message_dialog_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_message_dialog_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_message_dialog_new(GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...)
         * }
         */
        public static gtk_message_dialog_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_message_dialog_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment parent, int flags, int type, int buttons, MemorySegment message_format, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_message_dialog_new", parent, flags, type, buttons, message_format, x5);
                }
                return (MemorySegment)spreader.invokeExact(parent, flags, type, buttons, message_format, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_new_with_markup(GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...)
     * }
     */
    public static class gtk_message_dialog_new_with_markup {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_message_dialog_new_with_markup");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_message_dialog_new_with_markup(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_message_dialog_new_with_markup(GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...)
         * }
         */
        public static gtk_message_dialog_new_with_markup makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_message_dialog_new_with_markup(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment parent, int flags, int type, int buttons, MemorySegment message_format, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_message_dialog_new_with_markup", parent, flags, type, buttons, message_format, x5);
                }
                return (MemorySegment)spreader.invokeExact(parent, flags, type, buttons, message_format, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_message_dialog_set_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_message_dialog_set_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_message_dialog_set_image(GtkMessageDialog *dialog, GtkWidget *image)
     * }
     */
    public static FunctionDescriptor gtk_message_dialog_set_image$descriptor() {
        return gtk_message_dialog_set_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_message_dialog_set_image(GtkMessageDialog *dialog, GtkWidget *image)
     * }
     */
    public static MethodHandle gtk_message_dialog_set_image$handle() {
        return gtk_message_dialog_set_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_message_dialog_set_image(GtkMessageDialog *dialog, GtkWidget *image)
     * }
     */
    public static void gtk_message_dialog_set_image(MemorySegment dialog, MemorySegment image) {
        var mh$ = gtk_message_dialog_set_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_message_dialog_set_image", dialog, image);
            }
            mh$.invokeExact(dialog, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_message_dialog_get_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_message_dialog_get_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_get_image(GtkMessageDialog *dialog)
     * }
     */
    public static FunctionDescriptor gtk_message_dialog_get_image$descriptor() {
        return gtk_message_dialog_get_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_get_image(GtkMessageDialog *dialog)
     * }
     */
    public static MethodHandle gtk_message_dialog_get_image$handle() {
        return gtk_message_dialog_get_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_get_image(GtkMessageDialog *dialog)
     * }
     */
    public static MemorySegment gtk_message_dialog_get_image(MemorySegment dialog) {
        var mh$ = gtk_message_dialog_get_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_message_dialog_get_image", dialog);
            }
            return (MemorySegment)mh$.invokeExact(dialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_message_dialog_set_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_message_dialog_set_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_message_dialog_set_markup(GtkMessageDialog *message_dialog, const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_message_dialog_set_markup$descriptor() {
        return gtk_message_dialog_set_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_message_dialog_set_markup(GtkMessageDialog *message_dialog, const gchar *str)
     * }
     */
    public static MethodHandle gtk_message_dialog_set_markup$handle() {
        return gtk_message_dialog_set_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_message_dialog_set_markup(GtkMessageDialog *message_dialog, const gchar *str)
     * }
     */
    public static void gtk_message_dialog_set_markup(MemorySegment message_dialog, MemorySegment str) {
        var mh$ = gtk_message_dialog_set_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_message_dialog_set_markup", message_dialog, str);
            }
            mh$.invokeExact(message_dialog, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_message_dialog_format_secondary_text(GtkMessageDialog *message_dialog, const gchar *message_format, ...)
     * }
     */
    public static class gtk_message_dialog_format_secondary_text {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_message_dialog_format_secondary_text");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_message_dialog_format_secondary_text(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_message_dialog_format_secondary_text(GtkMessageDialog *message_dialog, const gchar *message_format, ...)
         * }
         */
        public static gtk_message_dialog_format_secondary_text makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_message_dialog_format_secondary_text(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment message_dialog, MemorySegment message_format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_message_dialog_format_secondary_text", message_dialog, message_format, x2);
                }
                spreader.invokeExact(message_dialog, message_format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_message_dialog_format_secondary_markup(GtkMessageDialog *message_dialog, const gchar *message_format, ...)
     * }
     */
    public static class gtk_message_dialog_format_secondary_markup {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_message_dialog_format_secondary_markup");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_message_dialog_format_secondary_markup(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_message_dialog_format_secondary_markup(GtkMessageDialog *message_dialog, const gchar *message_format, ...)
         * }
         */
        public static gtk_message_dialog_format_secondary_markup makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_message_dialog_format_secondary_markup(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment message_dialog, MemorySegment message_format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_message_dialog_format_secondary_markup", message_dialog, message_format, x2);
                }
                spreader.invokeExact(message_dialog, message_format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_message_dialog_get_message_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_message_dialog_get_message_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_get_message_area(GtkMessageDialog *message_dialog)
     * }
     */
    public static FunctionDescriptor gtk_message_dialog_get_message_area$descriptor() {
        return gtk_message_dialog_get_message_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_get_message_area(GtkMessageDialog *message_dialog)
     * }
     */
    public static MethodHandle gtk_message_dialog_get_message_area$handle() {
        return gtk_message_dialog_get_message_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_message_dialog_get_message_area(GtkMessageDialog *message_dialog)
     * }
     */
    public static MemorySegment gtk_message_dialog_get_message_area(MemorySegment message_dialog) {
        var mh$ = gtk_message_dialog_get_message_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_message_dialog_get_message_area", message_dialog);
            }
            return (MemorySegment)mh$.invokeExact(message_dialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_BUTTON_ROLE_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTON_ROLE_NORMAL = 0
     * }
     */
    public static int GTK_BUTTON_ROLE_NORMAL() {
        return GTK_BUTTON_ROLE_NORMAL;
    }
    private static final int GTK_BUTTON_ROLE_CHECK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTON_ROLE_CHECK = 1
     * }
     */
    public static int GTK_BUTTON_ROLE_CHECK() {
        return GTK_BUTTON_ROLE_CHECK;
    }
    private static final int GTK_BUTTON_ROLE_RADIO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTON_ROLE_RADIO = 2
     * }
     */
    public static int GTK_BUTTON_ROLE_RADIO() {
        return GTK_BUTTON_ROLE_RADIO;
    }

    private static class gtk_model_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_model_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_model_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_model_button_get_type$descriptor() {
        return gtk_model_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_model_button_get_type()
     * }
     */
    public static MethodHandle gtk_model_button_get_type$handle() {
        return gtk_model_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_model_button_get_type()
     * }
     */
    public static long gtk_model_button_get_type() {
        var mh$ = gtk_model_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_model_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_model_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_model_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_model_button_new()
     * }
     */
    public static FunctionDescriptor gtk_model_button_new$descriptor() {
        return gtk_model_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_model_button_new()
     * }
     */
    public static MethodHandle gtk_model_button_new$handle() {
        return gtk_model_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_model_button_new()
     * }
     */
    public static MemorySegment gtk_model_button_new() {
        var mh$ = gtk_model_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_model_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_mount_operation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_mount_operation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_mount_operation_get_type()
     * }
     */
    public static FunctionDescriptor gtk_mount_operation_get_type$descriptor() {
        return gtk_mount_operation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_mount_operation_get_type()
     * }
     */
    public static MethodHandle gtk_mount_operation_get_type$handle() {
        return gtk_mount_operation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_mount_operation_get_type()
     * }
     */
    public static long gtk_mount_operation_get_type() {
        var mh$ = gtk_mount_operation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_mount_operation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_mount_operation_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_mount_operation_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMountOperation *gtk_mount_operation_new(GtkWindow *parent)
     * }
     */
    public static FunctionDescriptor gtk_mount_operation_new$descriptor() {
        return gtk_mount_operation_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMountOperation *gtk_mount_operation_new(GtkWindow *parent)
     * }
     */
    public static MethodHandle gtk_mount_operation_new$handle() {
        return gtk_mount_operation_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMountOperation *gtk_mount_operation_new(GtkWindow *parent)
     * }
     */
    public static MemorySegment gtk_mount_operation_new(MemorySegment parent) {
        var mh$ = gtk_mount_operation_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_mount_operation_new", parent);
            }
            return (MemorySegment)mh$.invokeExact(parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_mount_operation_is_showing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_mount_operation_is_showing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_mount_operation_is_showing(GtkMountOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_mount_operation_is_showing$descriptor() {
        return gtk_mount_operation_is_showing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_mount_operation_is_showing(GtkMountOperation *op)
     * }
     */
    public static MethodHandle gtk_mount_operation_is_showing$handle() {
        return gtk_mount_operation_is_showing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_mount_operation_is_showing(GtkMountOperation *op)
     * }
     */
    public static int gtk_mount_operation_is_showing(MemorySegment op) {
        var mh$ = gtk_mount_operation_is_showing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_mount_operation_is_showing", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_mount_operation_set_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_mount_operation_set_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_mount_operation_set_parent(GtkMountOperation *op, GtkWindow *parent)
     * }
     */
    public static FunctionDescriptor gtk_mount_operation_set_parent$descriptor() {
        return gtk_mount_operation_set_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_mount_operation_set_parent(GtkMountOperation *op, GtkWindow *parent)
     * }
     */
    public static MethodHandle gtk_mount_operation_set_parent$handle() {
        return gtk_mount_operation_set_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_mount_operation_set_parent(GtkMountOperation *op, GtkWindow *parent)
     * }
     */
    public static void gtk_mount_operation_set_parent(MemorySegment op, MemorySegment parent) {
        var mh$ = gtk_mount_operation_set_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_mount_operation_set_parent", op, parent);
            }
            mh$.invokeExact(op, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_mount_operation_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_mount_operation_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_mount_operation_get_parent(GtkMountOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_mount_operation_get_parent$descriptor() {
        return gtk_mount_operation_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_mount_operation_get_parent(GtkMountOperation *op)
     * }
     */
    public static MethodHandle gtk_mount_operation_get_parent$handle() {
        return gtk_mount_operation_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindow *gtk_mount_operation_get_parent(GtkMountOperation *op)
     * }
     */
    public static MemorySegment gtk_mount_operation_get_parent(MemorySegment op) {
        var mh$ = gtk_mount_operation_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_mount_operation_get_parent", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_mount_operation_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_mount_operation_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_mount_operation_set_screen(GtkMountOperation *op, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_mount_operation_set_screen$descriptor() {
        return gtk_mount_operation_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_mount_operation_set_screen(GtkMountOperation *op, GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_mount_operation_set_screen$handle() {
        return gtk_mount_operation_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_mount_operation_set_screen(GtkMountOperation *op, GdkScreen *screen)
     * }
     */
    public static void gtk_mount_operation_set_screen(MemorySegment op, MemorySegment screen) {
        var mh$ = gtk_mount_operation_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_mount_operation_set_screen", op, screen);
            }
            mh$.invokeExact(op, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_mount_operation_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_mount_operation_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_mount_operation_get_screen(GtkMountOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_mount_operation_get_screen$descriptor() {
        return gtk_mount_operation_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_mount_operation_get_screen(GtkMountOperation *op)
     * }
     */
    public static MethodHandle gtk_mount_operation_get_screen$handle() {
        return gtk_mount_operation_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gtk_mount_operation_get_screen(GtkMountOperation *op)
     * }
     */
    public static MemorySegment gtk_mount_operation_get_screen(MemorySegment op) {
        var mh$ = gtk_mount_operation_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_mount_operation_get_screen", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_NOTEBOOK_TAB_FIRST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NOTEBOOK_TAB_FIRST = 0
     * }
     */
    public static int GTK_NOTEBOOK_TAB_FIRST() {
        return GTK_NOTEBOOK_TAB_FIRST;
    }
    private static final int GTK_NOTEBOOK_TAB_LAST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NOTEBOOK_TAB_LAST = 1
     * }
     */
    public static int GTK_NOTEBOOK_TAB_LAST() {
        return GTK_NOTEBOOK_TAB_LAST;
    }

    private static class gtk_notebook_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_notebook_get_type()
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_type$descriptor() {
        return gtk_notebook_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_notebook_get_type()
     * }
     */
    public static MethodHandle gtk_notebook_get_type$handle() {
        return gtk_notebook_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_notebook_get_type()
     * }
     */
    public static long gtk_notebook_get_type() {
        var mh$ = gtk_notebook_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_new()
     * }
     */
    public static FunctionDescriptor gtk_notebook_new$descriptor() {
        return gtk_notebook_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_new()
     * }
     */
    public static MethodHandle gtk_notebook_new$handle() {
        return gtk_notebook_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_new()
     * }
     */
    public static MemorySegment gtk_notebook_new() {
        var mh$ = gtk_notebook_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_append_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_append_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_append_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static FunctionDescriptor gtk_notebook_append_page$descriptor() {
        return gtk_notebook_append_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_append_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static MethodHandle gtk_notebook_append_page$handle() {
        return gtk_notebook_append_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_append_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static int gtk_notebook_append_page(MemorySegment notebook, MemorySegment child, MemorySegment tab_label) {
        var mh$ = gtk_notebook_append_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_append_page", notebook, child, tab_label);
            }
            return (int)mh$.invokeExact(notebook, child, tab_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_append_page_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_append_page_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_append_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
     * }
     */
    public static FunctionDescriptor gtk_notebook_append_page_menu$descriptor() {
        return gtk_notebook_append_page_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_append_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
     * }
     */
    public static MethodHandle gtk_notebook_append_page_menu$handle() {
        return gtk_notebook_append_page_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_append_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
     * }
     */
    public static int gtk_notebook_append_page_menu(MemorySegment notebook, MemorySegment child, MemorySegment tab_label, MemorySegment menu_label) {
        var mh$ = gtk_notebook_append_page_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_append_page_menu", notebook, child, tab_label, menu_label);
            }
            return (int)mh$.invokeExact(notebook, child, tab_label, menu_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_prepend_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_prepend_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_prepend_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static FunctionDescriptor gtk_notebook_prepend_page$descriptor() {
        return gtk_notebook_prepend_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_prepend_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static MethodHandle gtk_notebook_prepend_page$handle() {
        return gtk_notebook_prepend_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_prepend_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static int gtk_notebook_prepend_page(MemorySegment notebook, MemorySegment child, MemorySegment tab_label) {
        var mh$ = gtk_notebook_prepend_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_prepend_page", notebook, child, tab_label);
            }
            return (int)mh$.invokeExact(notebook, child, tab_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_prepend_page_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_prepend_page_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_prepend_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
     * }
     */
    public static FunctionDescriptor gtk_notebook_prepend_page_menu$descriptor() {
        return gtk_notebook_prepend_page_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_prepend_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
     * }
     */
    public static MethodHandle gtk_notebook_prepend_page_menu$handle() {
        return gtk_notebook_prepend_page_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_prepend_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
     * }
     */
    public static int gtk_notebook_prepend_page_menu(MemorySegment notebook, MemorySegment child, MemorySegment tab_label, MemorySegment menu_label) {
        var mh$ = gtk_notebook_prepend_page_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_prepend_page_menu", notebook, child, tab_label, menu_label);
            }
            return (int)mh$.invokeExact(notebook, child, tab_label, menu_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_insert_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_insert_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_insert_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, gint position)
     * }
     */
    public static FunctionDescriptor gtk_notebook_insert_page$descriptor() {
        return gtk_notebook_insert_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_insert_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, gint position)
     * }
     */
    public static MethodHandle gtk_notebook_insert_page$handle() {
        return gtk_notebook_insert_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_insert_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, gint position)
     * }
     */
    public static int gtk_notebook_insert_page(MemorySegment notebook, MemorySegment child, MemorySegment tab_label, int position) {
        var mh$ = gtk_notebook_insert_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_insert_page", notebook, child, tab_label, position);
            }
            return (int)mh$.invokeExact(notebook, child, tab_label, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_insert_page_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_insert_page_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_insert_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, gint position)
     * }
     */
    public static FunctionDescriptor gtk_notebook_insert_page_menu$descriptor() {
        return gtk_notebook_insert_page_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_insert_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, gint position)
     * }
     */
    public static MethodHandle gtk_notebook_insert_page_menu$handle() {
        return gtk_notebook_insert_page_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_insert_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, gint position)
     * }
     */
    public static int gtk_notebook_insert_page_menu(MemorySegment notebook, MemorySegment child, MemorySegment tab_label, MemorySegment menu_label, int position) {
        var mh$ = gtk_notebook_insert_page_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_insert_page_menu", notebook, child, tab_label, menu_label, position);
            }
            return (int)mh$.invokeExact(notebook, child, tab_label, menu_label, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_remove_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_remove_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_remove_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static FunctionDescriptor gtk_notebook_remove_page$descriptor() {
        return gtk_notebook_remove_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_remove_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static MethodHandle gtk_notebook_remove_page$handle() {
        return gtk_notebook_remove_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_remove_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static void gtk_notebook_remove_page(MemorySegment notebook, int page_num) {
        var mh$ = gtk_notebook_remove_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_remove_page", notebook, page_num);
            }
            mh$.invokeExact(notebook, page_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_group_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_group_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_group_name(GtkNotebook *notebook, const gchar *group_name)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_group_name$descriptor() {
        return gtk_notebook_set_group_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_group_name(GtkNotebook *notebook, const gchar *group_name)
     * }
     */
    public static MethodHandle gtk_notebook_set_group_name$handle() {
        return gtk_notebook_set_group_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_group_name(GtkNotebook *notebook, const gchar *group_name)
     * }
     */
    public static void gtk_notebook_set_group_name(MemorySegment notebook, MemorySegment group_name) {
        var mh$ = gtk_notebook_set_group_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_group_name", notebook, group_name);
            }
            mh$.invokeExact(notebook, group_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_group_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_group_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_group_name(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_group_name$descriptor() {
        return gtk_notebook_get_group_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_group_name(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_group_name$handle() {
        return gtk_notebook_get_group_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_group_name(GtkNotebook *notebook)
     * }
     */
    public static MemorySegment gtk_notebook_get_group_name(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_group_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_group_name", notebook);
            }
            return (MemorySegment)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_current_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_current_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_get_current_page(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_current_page$descriptor() {
        return gtk_notebook_get_current_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_get_current_page(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_current_page$handle() {
        return gtk_notebook_get_current_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_get_current_page(GtkNotebook *notebook)
     * }
     */
    public static int gtk_notebook_get_current_page(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_current_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_current_page", notebook);
            }
            return (int)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_nth_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_nth_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_nth_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_nth_page$descriptor() {
        return gtk_notebook_get_nth_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_nth_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static MethodHandle gtk_notebook_get_nth_page$handle() {
        return gtk_notebook_get_nth_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_nth_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static MemorySegment gtk_notebook_get_nth_page(MemorySegment notebook, int page_num) {
        var mh$ = gtk_notebook_get_nth_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_nth_page", notebook, page_num);
            }
            return (MemorySegment)mh$.invokeExact(notebook, page_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_n_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_n_pages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_get_n_pages(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_n_pages$descriptor() {
        return gtk_notebook_get_n_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_get_n_pages(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_n_pages$handle() {
        return gtk_notebook_get_n_pages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_get_n_pages(GtkNotebook *notebook)
     * }
     */
    public static int gtk_notebook_get_n_pages(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_n_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_n_pages", notebook);
            }
            return (int)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_page_num {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_page_num"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_page_num(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_page_num$descriptor() {
        return gtk_notebook_page_num.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_notebook_page_num(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_page_num$handle() {
        return gtk_notebook_page_num.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_notebook_page_num(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static int gtk_notebook_page_num(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_page_num.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_page_num", notebook, child);
            }
            return (int)mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_current_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_current_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_current_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_current_page$descriptor() {
        return gtk_notebook_set_current_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_current_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static MethodHandle gtk_notebook_set_current_page$handle() {
        return gtk_notebook_set_current_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_current_page(GtkNotebook *notebook, gint page_num)
     * }
     */
    public static void gtk_notebook_set_current_page(MemorySegment notebook, int page_num) {
        var mh$ = gtk_notebook_set_current_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_current_page", notebook, page_num);
            }
            mh$.invokeExact(notebook, page_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_next_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_next_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_next_page(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_next_page$descriptor() {
        return gtk_notebook_next_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_next_page(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_next_page$handle() {
        return gtk_notebook_next_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_next_page(GtkNotebook *notebook)
     * }
     */
    public static void gtk_notebook_next_page(MemorySegment notebook) {
        var mh$ = gtk_notebook_next_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_next_page", notebook);
            }
            mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_prev_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_prev_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_prev_page(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_prev_page$descriptor() {
        return gtk_notebook_prev_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_prev_page(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_prev_page$handle() {
        return gtk_notebook_prev_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_prev_page(GtkNotebook *notebook)
     * }
     */
    public static void gtk_notebook_prev_page(MemorySegment notebook) {
        var mh$ = gtk_notebook_prev_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_prev_page", notebook);
            }
            mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_show_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_show_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_show_border(GtkNotebook *notebook, gboolean show_border)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_show_border$descriptor() {
        return gtk_notebook_set_show_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_show_border(GtkNotebook *notebook, gboolean show_border)
     * }
     */
    public static MethodHandle gtk_notebook_set_show_border$handle() {
        return gtk_notebook_set_show_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_show_border(GtkNotebook *notebook, gboolean show_border)
     * }
     */
    public static void gtk_notebook_set_show_border(MemorySegment notebook, int show_border) {
        var mh$ = gtk_notebook_set_show_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_show_border", notebook, show_border);
            }
            mh$.invokeExact(notebook, show_border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_show_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_show_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_show_border(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_show_border$descriptor() {
        return gtk_notebook_get_show_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_show_border(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_show_border$handle() {
        return gtk_notebook_get_show_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_show_border(GtkNotebook *notebook)
     * }
     */
    public static int gtk_notebook_get_show_border(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_show_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_show_border", notebook);
            }
            return (int)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_show_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_show_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_show_tabs(GtkNotebook *notebook, gboolean show_tabs)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_show_tabs$descriptor() {
        return gtk_notebook_set_show_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_show_tabs(GtkNotebook *notebook, gboolean show_tabs)
     * }
     */
    public static MethodHandle gtk_notebook_set_show_tabs$handle() {
        return gtk_notebook_set_show_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_show_tabs(GtkNotebook *notebook, gboolean show_tabs)
     * }
     */
    public static void gtk_notebook_set_show_tabs(MemorySegment notebook, int show_tabs) {
        var mh$ = gtk_notebook_set_show_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_show_tabs", notebook, show_tabs);
            }
            mh$.invokeExact(notebook, show_tabs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_show_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_show_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_show_tabs(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_show_tabs$descriptor() {
        return gtk_notebook_get_show_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_show_tabs(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_show_tabs$handle() {
        return gtk_notebook_get_show_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_show_tabs(GtkNotebook *notebook)
     * }
     */
    public static int gtk_notebook_get_show_tabs(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_show_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_show_tabs", notebook);
            }
            return (int)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_tab_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_tab_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_pos(GtkNotebook *notebook, GtkPositionType pos)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_tab_pos$descriptor() {
        return gtk_notebook_set_tab_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_pos(GtkNotebook *notebook, GtkPositionType pos)
     * }
     */
    public static MethodHandle gtk_notebook_set_tab_pos$handle() {
        return gtk_notebook_set_tab_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_pos(GtkNotebook *notebook, GtkPositionType pos)
     * }
     */
    public static void gtk_notebook_set_tab_pos(MemorySegment notebook, int pos) {
        var mh$ = gtk_notebook_set_tab_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_tab_pos", notebook, pos);
            }
            mh$.invokeExact(notebook, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_tab_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_tab_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_notebook_get_tab_pos(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_tab_pos$descriptor() {
        return gtk_notebook_get_tab_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_notebook_get_tab_pos(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_tab_pos$handle() {
        return gtk_notebook_get_tab_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPositionType gtk_notebook_get_tab_pos(GtkNotebook *notebook)
     * }
     */
    public static int gtk_notebook_get_tab_pos(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_tab_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_tab_pos", notebook);
            }
            return (int)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_scrollable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_scrollable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_scrollable(GtkNotebook *notebook, gboolean scrollable)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_scrollable$descriptor() {
        return gtk_notebook_set_scrollable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_scrollable(GtkNotebook *notebook, gboolean scrollable)
     * }
     */
    public static MethodHandle gtk_notebook_set_scrollable$handle() {
        return gtk_notebook_set_scrollable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_scrollable(GtkNotebook *notebook, gboolean scrollable)
     * }
     */
    public static void gtk_notebook_set_scrollable(MemorySegment notebook, int scrollable) {
        var mh$ = gtk_notebook_set_scrollable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_scrollable", notebook, scrollable);
            }
            mh$.invokeExact(notebook, scrollable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_scrollable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_scrollable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_scrollable(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_scrollable$descriptor() {
        return gtk_notebook_get_scrollable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_scrollable(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_scrollable$handle() {
        return gtk_notebook_get_scrollable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_scrollable(GtkNotebook *notebook)
     * }
     */
    public static int gtk_notebook_get_scrollable(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_scrollable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_scrollable", notebook);
            }
            return (int)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_tab_hborder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_tab_hborder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 gtk_notebook_get_tab_hborder(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_tab_hborder$descriptor() {
        return gtk_notebook_get_tab_hborder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 gtk_notebook_get_tab_hborder(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_tab_hborder$handle() {
        return gtk_notebook_get_tab_hborder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 gtk_notebook_get_tab_hborder(GtkNotebook *notebook)
     * }
     */
    public static short gtk_notebook_get_tab_hborder(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_tab_hborder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_tab_hborder", notebook);
            }
            return (short)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_tab_vborder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_tab_vborder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 gtk_notebook_get_tab_vborder(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_tab_vborder$descriptor() {
        return gtk_notebook_get_tab_vborder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 gtk_notebook_get_tab_vborder(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_get_tab_vborder$handle() {
        return gtk_notebook_get_tab_vborder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 gtk_notebook_get_tab_vborder(GtkNotebook *notebook)
     * }
     */
    public static short gtk_notebook_get_tab_vborder(MemorySegment notebook) {
        var mh$ = gtk_notebook_get_tab_vborder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_tab_vborder", notebook);
            }
            return (short)mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_popup_enable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_popup_enable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_popup_enable(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_popup_enable$descriptor() {
        return gtk_notebook_popup_enable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_popup_enable(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_popup_enable$handle() {
        return gtk_notebook_popup_enable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_popup_enable(GtkNotebook *notebook)
     * }
     */
    public static void gtk_notebook_popup_enable(MemorySegment notebook) {
        var mh$ = gtk_notebook_popup_enable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_popup_enable", notebook);
            }
            mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_popup_disable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_popup_disable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_popup_disable(GtkNotebook *notebook)
     * }
     */
    public static FunctionDescriptor gtk_notebook_popup_disable$descriptor() {
        return gtk_notebook_popup_disable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_popup_disable(GtkNotebook *notebook)
     * }
     */
    public static MethodHandle gtk_notebook_popup_disable$handle() {
        return gtk_notebook_popup_disable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_popup_disable(GtkNotebook *notebook)
     * }
     */
    public static void gtk_notebook_popup_disable(MemorySegment notebook) {
        var mh$ = gtk_notebook_popup_disable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_popup_disable", notebook);
            }
            mh$.invokeExact(notebook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_tab_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_tab_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_tab_label(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_tab_label$descriptor() {
        return gtk_notebook_get_tab_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_tab_label(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_get_tab_label$handle() {
        return gtk_notebook_get_tab_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_tab_label(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MemorySegment gtk_notebook_get_tab_label(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_get_tab_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_tab_label", notebook, child);
            }
            return (MemorySegment)mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_tab_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_tab_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_tab_label$descriptor() {
        return gtk_notebook_set_tab_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static MethodHandle gtk_notebook_set_tab_label$handle() {
        return gtk_notebook_set_tab_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
     * }
     */
    public static void gtk_notebook_set_tab_label(MemorySegment notebook, MemorySegment child, MemorySegment tab_label) {
        var mh$ = gtk_notebook_set_tab_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_tab_label", notebook, child, tab_label);
            }
            mh$.invokeExact(notebook, child, tab_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_tab_label_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_tab_label_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *tab_text)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_tab_label_text$descriptor() {
        return gtk_notebook_set_tab_label_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *tab_text)
     * }
     */
    public static MethodHandle gtk_notebook_set_tab_label_text$handle() {
        return gtk_notebook_set_tab_label_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *tab_text)
     * }
     */
    public static void gtk_notebook_set_tab_label_text(MemorySegment notebook, MemorySegment child, MemorySegment tab_text) {
        var mh$ = gtk_notebook_set_tab_label_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_tab_label_text", notebook, child, tab_text);
            }
            mh$.invokeExact(notebook, child, tab_text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_tab_label_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_tab_label_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_tab_label_text(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_tab_label_text$descriptor() {
        return gtk_notebook_get_tab_label_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_tab_label_text(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_get_tab_label_text$handle() {
        return gtk_notebook_get_tab_label_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_tab_label_text(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MemorySegment gtk_notebook_get_tab_label_text(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_get_tab_label_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_tab_label_text", notebook, child);
            }
            return (MemorySegment)mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_menu_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_menu_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_menu_label(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_menu_label$descriptor() {
        return gtk_notebook_get_menu_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_menu_label(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_get_menu_label$handle() {
        return gtk_notebook_get_menu_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_menu_label(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MemorySegment gtk_notebook_get_menu_label(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_get_menu_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_menu_label", notebook, child);
            }
            return (MemorySegment)mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_menu_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_menu_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_menu_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_menu_label$descriptor() {
        return gtk_notebook_set_menu_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_menu_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label)
     * }
     */
    public static MethodHandle gtk_notebook_set_menu_label$handle() {
        return gtk_notebook_set_menu_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_menu_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label)
     * }
     */
    public static void gtk_notebook_set_menu_label(MemorySegment notebook, MemorySegment child, MemorySegment menu_label) {
        var mh$ = gtk_notebook_set_menu_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_menu_label", notebook, child, menu_label);
            }
            mh$.invokeExact(notebook, child, menu_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_menu_label_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_menu_label_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_menu_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *menu_text)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_menu_label_text$descriptor() {
        return gtk_notebook_set_menu_label_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_menu_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *menu_text)
     * }
     */
    public static MethodHandle gtk_notebook_set_menu_label_text$handle() {
        return gtk_notebook_set_menu_label_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_menu_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *menu_text)
     * }
     */
    public static void gtk_notebook_set_menu_label_text(MemorySegment notebook, MemorySegment child, MemorySegment menu_text) {
        var mh$ = gtk_notebook_set_menu_label_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_menu_label_text", notebook, child, menu_text);
            }
            mh$.invokeExact(notebook, child, menu_text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_menu_label_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_menu_label_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_menu_label_text(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_menu_label_text$descriptor() {
        return gtk_notebook_get_menu_label_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_menu_label_text(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_get_menu_label_text$handle() {
        return gtk_notebook_get_menu_label_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_notebook_get_menu_label_text(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MemorySegment gtk_notebook_get_menu_label_text(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_get_menu_label_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_menu_label_text", notebook, child);
            }
            return (MemorySegment)mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_reorder_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_reorder_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_reorder_child(GtkNotebook *notebook, GtkWidget *child, gint position)
     * }
     */
    public static FunctionDescriptor gtk_notebook_reorder_child$descriptor() {
        return gtk_notebook_reorder_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_reorder_child(GtkNotebook *notebook, GtkWidget *child, gint position)
     * }
     */
    public static MethodHandle gtk_notebook_reorder_child$handle() {
        return gtk_notebook_reorder_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_reorder_child(GtkNotebook *notebook, GtkWidget *child, gint position)
     * }
     */
    public static void gtk_notebook_reorder_child(MemorySegment notebook, MemorySegment child, int position) {
        var mh$ = gtk_notebook_reorder_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_reorder_child", notebook, child, position);
            }
            mh$.invokeExact(notebook, child, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_tab_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_tab_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_tab_reorderable(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_tab_reorderable$descriptor() {
        return gtk_notebook_get_tab_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_tab_reorderable(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_get_tab_reorderable$handle() {
        return gtk_notebook_get_tab_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_tab_reorderable(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static int gtk_notebook_get_tab_reorderable(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_get_tab_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_tab_reorderable", notebook, child);
            }
            return (int)mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_tab_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_tab_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_reorderable(GtkNotebook *notebook, GtkWidget *child, gboolean reorderable)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_tab_reorderable$descriptor() {
        return gtk_notebook_set_tab_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_reorderable(GtkNotebook *notebook, GtkWidget *child, gboolean reorderable)
     * }
     */
    public static MethodHandle gtk_notebook_set_tab_reorderable$handle() {
        return gtk_notebook_set_tab_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_reorderable(GtkNotebook *notebook, GtkWidget *child, gboolean reorderable)
     * }
     */
    public static void gtk_notebook_set_tab_reorderable(MemorySegment notebook, MemorySegment child, int reorderable) {
        var mh$ = gtk_notebook_set_tab_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_tab_reorderable", notebook, child, reorderable);
            }
            mh$.invokeExact(notebook, child, reorderable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_tab_detachable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_tab_detachable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_tab_detachable(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_tab_detachable$descriptor() {
        return gtk_notebook_get_tab_detachable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_tab_detachable(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_get_tab_detachable$handle() {
        return gtk_notebook_get_tab_detachable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_notebook_get_tab_detachable(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static int gtk_notebook_get_tab_detachable(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_get_tab_detachable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_tab_detachable", notebook, child);
            }
            return (int)mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_tab_detachable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_tab_detachable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_detachable(GtkNotebook *notebook, GtkWidget *child, gboolean detachable)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_tab_detachable$descriptor() {
        return gtk_notebook_set_tab_detachable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_detachable(GtkNotebook *notebook, GtkWidget *child, gboolean detachable)
     * }
     */
    public static MethodHandle gtk_notebook_set_tab_detachable$handle() {
        return gtk_notebook_set_tab_detachable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_tab_detachable(GtkNotebook *notebook, GtkWidget *child, gboolean detachable)
     * }
     */
    public static void gtk_notebook_set_tab_detachable(MemorySegment notebook, MemorySegment child, int detachable) {
        var mh$ = gtk_notebook_set_tab_detachable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_tab_detachable", notebook, child, detachable);
            }
            mh$.invokeExact(notebook, child, detachable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_detach_tab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_detach_tab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_detach_tab(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_notebook_detach_tab$descriptor() {
        return gtk_notebook_detach_tab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_detach_tab(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_notebook_detach_tab$handle() {
        return gtk_notebook_detach_tab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_detach_tab(GtkNotebook *notebook, GtkWidget *child)
     * }
     */
    public static void gtk_notebook_detach_tab(MemorySegment notebook, MemorySegment child) {
        var mh$ = gtk_notebook_detach_tab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_detach_tab", notebook, child);
            }
            mh$.invokeExact(notebook, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_get_action_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_get_action_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_action_widget(GtkNotebook *notebook, GtkPackType pack_type)
     * }
     */
    public static FunctionDescriptor gtk_notebook_get_action_widget$descriptor() {
        return gtk_notebook_get_action_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_action_widget(GtkNotebook *notebook, GtkPackType pack_type)
     * }
     */
    public static MethodHandle gtk_notebook_get_action_widget$handle() {
        return gtk_notebook_get_action_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_notebook_get_action_widget(GtkNotebook *notebook, GtkPackType pack_type)
     * }
     */
    public static MemorySegment gtk_notebook_get_action_widget(MemorySegment notebook, int pack_type) {
        var mh$ = gtk_notebook_get_action_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_get_action_widget", notebook, pack_type);
            }
            return (MemorySegment)mh$.invokeExact(notebook, pack_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_notebook_set_action_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_notebook_set_action_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_action_widget(GtkNotebook *notebook, GtkWidget *widget, GtkPackType pack_type)
     * }
     */
    public static FunctionDescriptor gtk_notebook_set_action_widget$descriptor() {
        return gtk_notebook_set_action_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_notebook_set_action_widget(GtkNotebook *notebook, GtkWidget *widget, GtkPackType pack_type)
     * }
     */
    public static MethodHandle gtk_notebook_set_action_widget$handle() {
        return gtk_notebook_set_action_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_notebook_set_action_widget(GtkNotebook *notebook, GtkWidget *widget, GtkPackType pack_type)
     * }
     */
    public static void gtk_notebook_set_action_widget(MemorySegment notebook, MemorySegment widget, int pack_type) {
        var mh$ = gtk_notebook_set_action_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_notebook_set_action_widget", notebook, widget, pack_type);
            }
            mh$.invokeExact(notebook, widget, pack_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_offscreen_window_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_offscreen_window_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_offscreen_window_get_type()
     * }
     */
    public static FunctionDescriptor gtk_offscreen_window_get_type$descriptor() {
        return gtk_offscreen_window_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_offscreen_window_get_type()
     * }
     */
    public static MethodHandle gtk_offscreen_window_get_type$handle() {
        return gtk_offscreen_window_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_offscreen_window_get_type()
     * }
     */
    public static long gtk_offscreen_window_get_type() {
        var mh$ = gtk_offscreen_window_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_offscreen_window_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_offscreen_window_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_offscreen_window_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_offscreen_window_new()
     * }
     */
    public static FunctionDescriptor gtk_offscreen_window_new$descriptor() {
        return gtk_offscreen_window_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_offscreen_window_new()
     * }
     */
    public static MethodHandle gtk_offscreen_window_new$handle() {
        return gtk_offscreen_window_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_offscreen_window_new()
     * }
     */
    public static MemorySegment gtk_offscreen_window_new() {
        var mh$ = gtk_offscreen_window_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_offscreen_window_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_offscreen_window_get_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_offscreen_window_get_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_offscreen_window_get_surface(GtkOffscreenWindow *offscreen)
     * }
     */
    public static FunctionDescriptor gtk_offscreen_window_get_surface$descriptor() {
        return gtk_offscreen_window_get_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_offscreen_window_get_surface(GtkOffscreenWindow *offscreen)
     * }
     */
    public static MethodHandle gtk_offscreen_window_get_surface$handle() {
        return gtk_offscreen_window_get_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_offscreen_window_get_surface(GtkOffscreenWindow *offscreen)
     * }
     */
    public static MemorySegment gtk_offscreen_window_get_surface(MemorySegment offscreen) {
        var mh$ = gtk_offscreen_window_get_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_offscreen_window_get_surface", offscreen);
            }
            return (MemorySegment)mh$.invokeExact(offscreen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_offscreen_window_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_offscreen_window_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_offscreen_window_get_pixbuf(GtkOffscreenWindow *offscreen)
     * }
     */
    public static FunctionDescriptor gtk_offscreen_window_get_pixbuf$descriptor() {
        return gtk_offscreen_window_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_offscreen_window_get_pixbuf(GtkOffscreenWindow *offscreen)
     * }
     */
    public static MethodHandle gtk_offscreen_window_get_pixbuf$handle() {
        return gtk_offscreen_window_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_offscreen_window_get_pixbuf(GtkOffscreenWindow *offscreen)
     * }
     */
    public static MemorySegment gtk_offscreen_window_get_pixbuf(MemorySegment offscreen) {
        var mh$ = gtk_offscreen_window_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_offscreen_window_get_pixbuf", offscreen);
            }
            return (MemorySegment)mh$.invokeExact(offscreen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_orientable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_orientable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_orientable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_orientable_get_type$descriptor() {
        return gtk_orientable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_orientable_get_type()
     * }
     */
    public static MethodHandle gtk_orientable_get_type$handle() {
        return gtk_orientable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_orientable_get_type()
     * }
     */
    public static long gtk_orientable_get_type() {
        var mh$ = gtk_orientable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_orientable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_orientable_set_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_orientable_set_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_orientable_set_orientation(GtkOrientable *orientable, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_orientable_set_orientation$descriptor() {
        return gtk_orientable_set_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_orientable_set_orientation(GtkOrientable *orientable, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_orientable_set_orientation$handle() {
        return gtk_orientable_set_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_orientable_set_orientation(GtkOrientable *orientable, GtkOrientation orientation)
     * }
     */
    public static void gtk_orientable_set_orientation(MemorySegment orientable, int orientation) {
        var mh$ = gtk_orientable_set_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_orientable_set_orientation", orientable, orientation);
            }
            mh$.invokeExact(orientable, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_orientable_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_orientable_get_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_orientable_get_orientation(GtkOrientable *orientable)
     * }
     */
    public static FunctionDescriptor gtk_orientable_get_orientation$descriptor() {
        return gtk_orientable_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkOrientation gtk_orientable_get_orientation(GtkOrientable *orientable)
     * }
     */
    public static MethodHandle gtk_orientable_get_orientation$handle() {
        return gtk_orientable_get_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkOrientation gtk_orientable_get_orientation(GtkOrientable *orientable)
     * }
     */
    public static int gtk_orientable_get_orientation(MemorySegment orientable) {
        var mh$ = gtk_orientable_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_orientable_get_orientation", orientable);
            }
            return (int)mh$.invokeExact(orientable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_overlay_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_overlay_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_overlay_get_type()
     * }
     */
    public static FunctionDescriptor gtk_overlay_get_type$descriptor() {
        return gtk_overlay_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_overlay_get_type()
     * }
     */
    public static MethodHandle gtk_overlay_get_type$handle() {
        return gtk_overlay_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_overlay_get_type()
     * }
     */
    public static long gtk_overlay_get_type() {
        var mh$ = gtk_overlay_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_overlay_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_overlay_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_overlay_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_overlay_new()
     * }
     */
    public static FunctionDescriptor gtk_overlay_new$descriptor() {
        return gtk_overlay_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_overlay_new()
     * }
     */
    public static MethodHandle gtk_overlay_new$handle() {
        return gtk_overlay_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_overlay_new()
     * }
     */
    public static MemorySegment gtk_overlay_new() {
        var mh$ = gtk_overlay_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_overlay_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_overlay_add_overlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_overlay_add_overlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_overlay_add_overlay(GtkOverlay *overlay, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_overlay_add_overlay$descriptor() {
        return gtk_overlay_add_overlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_overlay_add_overlay(GtkOverlay *overlay, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_overlay_add_overlay$handle() {
        return gtk_overlay_add_overlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_overlay_add_overlay(GtkOverlay *overlay, GtkWidget *widget)
     * }
     */
    public static void gtk_overlay_add_overlay(MemorySegment overlay, MemorySegment widget) {
        var mh$ = gtk_overlay_add_overlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_overlay_add_overlay", overlay, widget);
            }
            mh$.invokeExact(overlay, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_overlay_reorder_overlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_overlay_reorder_overlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_overlay_reorder_overlay(GtkOverlay *overlay, GtkWidget *child, int index_)
     * }
     */
    public static FunctionDescriptor gtk_overlay_reorder_overlay$descriptor() {
        return gtk_overlay_reorder_overlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_overlay_reorder_overlay(GtkOverlay *overlay, GtkWidget *child, int index_)
     * }
     */
    public static MethodHandle gtk_overlay_reorder_overlay$handle() {
        return gtk_overlay_reorder_overlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_overlay_reorder_overlay(GtkOverlay *overlay, GtkWidget *child, int index_)
     * }
     */
    public static void gtk_overlay_reorder_overlay(MemorySegment overlay, MemorySegment child, int index_) {
        var mh$ = gtk_overlay_reorder_overlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_overlay_reorder_overlay", overlay, child, index_);
            }
            mh$.invokeExact(overlay, child, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_overlay_get_overlay_pass_through {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_overlay_get_overlay_pass_through"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_overlay_get_overlay_pass_through(GtkOverlay *overlay, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_overlay_get_overlay_pass_through$descriptor() {
        return gtk_overlay_get_overlay_pass_through.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_overlay_get_overlay_pass_through(GtkOverlay *overlay, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_overlay_get_overlay_pass_through$handle() {
        return gtk_overlay_get_overlay_pass_through.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_overlay_get_overlay_pass_through(GtkOverlay *overlay, GtkWidget *widget)
     * }
     */
    public static int gtk_overlay_get_overlay_pass_through(MemorySegment overlay, MemorySegment widget) {
        var mh$ = gtk_overlay_get_overlay_pass_through.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_overlay_get_overlay_pass_through", overlay, widget);
            }
            return (int)mh$.invokeExact(overlay, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_overlay_set_overlay_pass_through {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_overlay_set_overlay_pass_through"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_overlay_set_overlay_pass_through(GtkOverlay *overlay, GtkWidget *widget, gboolean pass_through)
     * }
     */
    public static FunctionDescriptor gtk_overlay_set_overlay_pass_through$descriptor() {
        return gtk_overlay_set_overlay_pass_through.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_overlay_set_overlay_pass_through(GtkOverlay *overlay, GtkWidget *widget, gboolean pass_through)
     * }
     */
    public static MethodHandle gtk_overlay_set_overlay_pass_through$handle() {
        return gtk_overlay_set_overlay_pass_through.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_overlay_set_overlay_pass_through(GtkOverlay *overlay, GtkWidget *widget, gboolean pass_through)
     * }
     */
    public static void gtk_overlay_set_overlay_pass_through(MemorySegment overlay, MemorySegment widget, int pass_through) {
        var mh$ = gtk_overlay_set_overlay_pass_through.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_overlay_set_overlay_pass_through", overlay, widget, pass_through);
            }
            mh$.invokeExact(overlay, widget, pass_through);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_PAD_ACTION_BUTTON = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAD_ACTION_BUTTON = 0
     * }
     */
    public static int GTK_PAD_ACTION_BUTTON() {
        return GTK_PAD_ACTION_BUTTON;
    }
    private static final int GTK_PAD_ACTION_RING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAD_ACTION_RING = 1
     * }
     */
    public static int GTK_PAD_ACTION_RING() {
        return GTK_PAD_ACTION_RING;
    }
    private static final int GTK_PAD_ACTION_STRIP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAD_ACTION_STRIP = 2
     * }
     */
    public static int GTK_PAD_ACTION_STRIP() {
        return GTK_PAD_ACTION_STRIP;
    }

    private static class gtk_pad_controller_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pad_controller_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_pad_controller_get_type()
     * }
     */
    public static FunctionDescriptor gtk_pad_controller_get_type$descriptor() {
        return gtk_pad_controller_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_pad_controller_get_type()
     * }
     */
    public static MethodHandle gtk_pad_controller_get_type$handle() {
        return gtk_pad_controller_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_pad_controller_get_type()
     * }
     */
    public static long gtk_pad_controller_get_type() {
        var mh$ = gtk_pad_controller_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pad_controller_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_pad_controller_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pad_controller_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPadController *gtk_pad_controller_new(GtkWindow *window, GActionGroup *group, GdkDevice *pad)
     * }
     */
    public static FunctionDescriptor gtk_pad_controller_new$descriptor() {
        return gtk_pad_controller_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPadController *gtk_pad_controller_new(GtkWindow *window, GActionGroup *group, GdkDevice *pad)
     * }
     */
    public static MethodHandle gtk_pad_controller_new$handle() {
        return gtk_pad_controller_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPadController *gtk_pad_controller_new(GtkWindow *window, GActionGroup *group, GdkDevice *pad)
     * }
     */
    public static MemorySegment gtk_pad_controller_new(MemorySegment window, MemorySegment group, MemorySegment pad) {
        var mh$ = gtk_pad_controller_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pad_controller_new", window, group, pad);
            }
            return (MemorySegment)mh$.invokeExact(window, group, pad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_pad_controller_set_action_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pad_controller_set_action_entries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_pad_controller_set_action_entries(GtkPadController *controller, const GtkPadActionEntry *entries, gint n_entries)
     * }
     */
    public static FunctionDescriptor gtk_pad_controller_set_action_entries$descriptor() {
        return gtk_pad_controller_set_action_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_pad_controller_set_action_entries(GtkPadController *controller, const GtkPadActionEntry *entries, gint n_entries)
     * }
     */
    public static MethodHandle gtk_pad_controller_set_action_entries$handle() {
        return gtk_pad_controller_set_action_entries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_pad_controller_set_action_entries(GtkPadController *controller, const GtkPadActionEntry *entries, gint n_entries)
     * }
     */
    public static void gtk_pad_controller_set_action_entries(MemorySegment controller, MemorySegment entries, int n_entries) {
        var mh$ = gtk_pad_controller_set_action_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pad_controller_set_action_entries", controller, entries, n_entries);
            }
            mh$.invokeExact(controller, entries, n_entries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_pad_controller_set_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_pad_controller_set_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_pad_controller_set_action(GtkPadController *controller, GtkPadActionType type, gint index, gint mode, const gchar *label, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor gtk_pad_controller_set_action$descriptor() {
        return gtk_pad_controller_set_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_pad_controller_set_action(GtkPadController *controller, GtkPadActionType type, gint index, gint mode, const gchar *label, const gchar *action_name)
     * }
     */
    public static MethodHandle gtk_pad_controller_set_action$handle() {
        return gtk_pad_controller_set_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_pad_controller_set_action(GtkPadController *controller, GtkPadActionType type, gint index, gint mode, const gchar *label, const gchar *action_name)
     * }
     */
    public static void gtk_pad_controller_set_action(MemorySegment controller, int type, int index, int mode, MemorySegment label, MemorySegment action_name) {
        var mh$ = gtk_pad_controller_set_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_pad_controller_set_action", controller, type, index, mode, label, action_name);
            }
            mh$.invokeExact(controller, type, index, mode, label, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_paper_size_get_type()
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_type$descriptor() {
        return gtk_paper_size_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_paper_size_get_type()
     * }
     */
    public static MethodHandle gtk_paper_size_get_type$handle() {
        return gtk_paper_size_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_paper_size_get_type()
     * }
     */
    public static long gtk_paper_size_get_type() {
        var mh$ = gtk_paper_size_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_new$descriptor() {
        return gtk_paper_size_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new(const gchar *name)
     * }
     */
    public static MethodHandle gtk_paper_size_new$handle() {
        return gtk_paper_size_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new(const gchar *name)
     * }
     */
    public static MemorySegment gtk_paper_size_new(MemorySegment name) {
        var mh$ = gtk_paper_size_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_new", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_new_from_ppd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_new_from_ppd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_ppd(const gchar *ppd_name, const gchar *ppd_display_name, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_new_from_ppd$descriptor() {
        return gtk_paper_size_new_from_ppd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_ppd(const gchar *ppd_name, const gchar *ppd_display_name, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_paper_size_new_from_ppd$handle() {
        return gtk_paper_size_new_from_ppd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_ppd(const gchar *ppd_name, const gchar *ppd_display_name, gdouble width, gdouble height)
     * }
     */
    public static MemorySegment gtk_paper_size_new_from_ppd(MemorySegment ppd_name, MemorySegment ppd_display_name, double width, double height) {
        var mh$ = gtk_paper_size_new_from_ppd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_new_from_ppd", ppd_name, ppd_display_name, width, height);
            }
            return (MemorySegment)mh$.invokeExact(ppd_name, ppd_display_name, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_new_from_ipp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_new_from_ipp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_ipp(const gchar *ipp_name, gdouble width, gdouble height)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_new_from_ipp$descriptor() {
        return gtk_paper_size_new_from_ipp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_ipp(const gchar *ipp_name, gdouble width, gdouble height)
     * }
     */
    public static MethodHandle gtk_paper_size_new_from_ipp$handle() {
        return gtk_paper_size_new_from_ipp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_ipp(const gchar *ipp_name, gdouble width, gdouble height)
     * }
     */
    public static MemorySegment gtk_paper_size_new_from_ipp(MemorySegment ipp_name, double width, double height) {
        var mh$ = gtk_paper_size_new_from_ipp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_new_from_ipp", ipp_name, width, height);
            }
            return (MemorySegment)mh$.invokeExact(ipp_name, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_new_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_new_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_custom(const gchar *name, const gchar *display_name, gdouble width, gdouble height, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_new_custom$descriptor() {
        return gtk_paper_size_new_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_custom(const gchar *name, const gchar *display_name, gdouble width, gdouble height, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_new_custom$handle() {
        return gtk_paper_size_new_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_custom(const gchar *name, const gchar *display_name, gdouble width, gdouble height, GtkUnit unit)
     * }
     */
    public static MemorySegment gtk_paper_size_new_custom(MemorySegment name, MemorySegment display_name, double width, double height, int unit) {
        var mh$ = gtk_paper_size_new_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_new_custom", name, display_name, width, height, unit);
            }
            return (MemorySegment)mh$.invokeExact(name, display_name, width, height, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_copy(GtkPaperSize *other)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_copy$descriptor() {
        return gtk_paper_size_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_copy(GtkPaperSize *other)
     * }
     */
    public static MethodHandle gtk_paper_size_copy$handle() {
        return gtk_paper_size_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_copy(GtkPaperSize *other)
     * }
     */
    public static MemorySegment gtk_paper_size_copy(MemorySegment other) {
        var mh$ = gtk_paper_size_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_copy", other);
            }
            return (MemorySegment)mh$.invokeExact(other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paper_size_free(GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_free$descriptor() {
        return gtk_paper_size_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paper_size_free(GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_paper_size_free$handle() {
        return gtk_paper_size_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paper_size_free(GtkPaperSize *size)
     * }
     */
    public static void gtk_paper_size_free(MemorySegment size) {
        var mh$ = gtk_paper_size_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_free", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_is_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_is_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_equal(GtkPaperSize *size1, GtkPaperSize *size2)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_is_equal$descriptor() {
        return gtk_paper_size_is_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_equal(GtkPaperSize *size1, GtkPaperSize *size2)
     * }
     */
    public static MethodHandle gtk_paper_size_is_equal$handle() {
        return gtk_paper_size_is_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_equal(GtkPaperSize *size1, GtkPaperSize *size2)
     * }
     */
    public static int gtk_paper_size_is_equal(MemorySegment size1, MemorySegment size2) {
        var mh$ = gtk_paper_size_is_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_is_equal", size1, size2);
            }
            return (int)mh$.invokeExact(size1, size2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_paper_sizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_paper_sizes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_paper_size_get_paper_sizes(gboolean include_custom)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_paper_sizes$descriptor() {
        return gtk_paper_size_get_paper_sizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_paper_size_get_paper_sizes(gboolean include_custom)
     * }
     */
    public static MethodHandle gtk_paper_size_get_paper_sizes$handle() {
        return gtk_paper_size_get_paper_sizes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_paper_size_get_paper_sizes(gboolean include_custom)
     * }
     */
    public static MemorySegment gtk_paper_size_get_paper_sizes(int include_custom) {
        var mh$ = gtk_paper_size_get_paper_sizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_paper_sizes", include_custom);
            }
            return (MemorySegment)mh$.invokeExact(include_custom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_name(GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_name$descriptor() {
        return gtk_paper_size_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_name(GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_paper_size_get_name$handle() {
        return gtk_paper_size_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_name(GtkPaperSize *size)
     * }
     */
    public static MemorySegment gtk_paper_size_get_name(MemorySegment size) {
        var mh$ = gtk_paper_size_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_name", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_display_name(GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_display_name$descriptor() {
        return gtk_paper_size_get_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_display_name(GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_paper_size_get_display_name$handle() {
        return gtk_paper_size_get_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_display_name(GtkPaperSize *size)
     * }
     */
    public static MemorySegment gtk_paper_size_get_display_name(MemorySegment size) {
        var mh$ = gtk_paper_size_get_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_display_name", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_ppd_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_ppd_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_ppd_name(GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_ppd_name$descriptor() {
        return gtk_paper_size_get_ppd_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_ppd_name(GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_paper_size_get_ppd_name$handle() {
        return gtk_paper_size_get_ppd_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_ppd_name(GtkPaperSize *size)
     * }
     */
    public static MemorySegment gtk_paper_size_get_ppd_name(MemorySegment size) {
        var mh$ = gtk_paper_size_get_ppd_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_ppd_name", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_width(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_width$descriptor() {
        return gtk_paper_size_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_width(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_get_width$handle() {
        return gtk_paper_size_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_width(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static double gtk_paper_size_get_width(MemorySegment size, int unit) {
        var mh$ = gtk_paper_size_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_width", size, unit);
            }
            return (double)mh$.invokeExact(size, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_height(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_height$descriptor() {
        return gtk_paper_size_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_height(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_get_height$handle() {
        return gtk_paper_size_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_height(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static double gtk_paper_size_get_height(MemorySegment size, int unit) {
        var mh$ = gtk_paper_size_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_height", size, unit);
            }
            return (double)mh$.invokeExact(size, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_is_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_is_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_custom(GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_is_custom$descriptor() {
        return gtk_paper_size_is_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_custom(GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_paper_size_is_custom$handle() {
        return gtk_paper_size_is_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_custom(GtkPaperSize *size)
     * }
     */
    public static int gtk_paper_size_is_custom(MemorySegment size) {
        var mh$ = gtk_paper_size_is_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_is_custom", size);
            }
            return (int)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_is_ipp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_is_ipp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_ipp(GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_is_ipp$descriptor() {
        return gtk_paper_size_is_ipp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_ipp(GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_paper_size_is_ipp$handle() {
        return gtk_paper_size_is_ipp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_paper_size_is_ipp(GtkPaperSize *size)
     * }
     */
    public static int gtk_paper_size_is_ipp(MemorySegment size) {
        var mh$ = gtk_paper_size_is_ipp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_is_ipp", size);
            }
            return (int)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paper_size_set_size(GtkPaperSize *size, gdouble width, gdouble height, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_set_size$descriptor() {
        return gtk_paper_size_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paper_size_set_size(GtkPaperSize *size, gdouble width, gdouble height, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_set_size$handle() {
        return gtk_paper_size_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paper_size_set_size(GtkPaperSize *size, gdouble width, gdouble height, GtkUnit unit)
     * }
     */
    public static void gtk_paper_size_set_size(MemorySegment size, double width, double height, int unit) {
        var mh$ = gtk_paper_size_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_set_size", size, width, height, unit);
            }
            mh$.invokeExact(size, width, height, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_default_top_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_default_top_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_top_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_default_top_margin$descriptor() {
        return gtk_paper_size_get_default_top_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_top_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_get_default_top_margin$handle() {
        return gtk_paper_size_get_default_top_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_top_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static double gtk_paper_size_get_default_top_margin(MemorySegment size, int unit) {
        var mh$ = gtk_paper_size_get_default_top_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_default_top_margin", size, unit);
            }
            return (double)mh$.invokeExact(size, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_default_bottom_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_default_bottom_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_bottom_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_default_bottom_margin$descriptor() {
        return gtk_paper_size_get_default_bottom_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_bottom_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_get_default_bottom_margin$handle() {
        return gtk_paper_size_get_default_bottom_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_bottom_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static double gtk_paper_size_get_default_bottom_margin(MemorySegment size, int unit) {
        var mh$ = gtk_paper_size_get_default_bottom_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_default_bottom_margin", size, unit);
            }
            return (double)mh$.invokeExact(size, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_default_left_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_default_left_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_left_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_default_left_margin$descriptor() {
        return gtk_paper_size_get_default_left_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_left_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_get_default_left_margin$handle() {
        return gtk_paper_size_get_default_left_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_left_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static double gtk_paper_size_get_default_left_margin(MemorySegment size, int unit) {
        var mh$ = gtk_paper_size_get_default_left_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_default_left_margin", size, unit);
            }
            return (double)mh$.invokeExact(size, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_default_right_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_default_right_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_right_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_default_right_margin$descriptor() {
        return gtk_paper_size_get_default_right_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_right_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_paper_size_get_default_right_margin$handle() {
        return gtk_paper_size_get_default_right_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_paper_size_get_default_right_margin(GtkPaperSize *size, GtkUnit unit)
     * }
     */
    public static double gtk_paper_size_get_default_right_margin(MemorySegment size, int unit) {
        var mh$ = gtk_paper_size_get_default_right_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_default_right_margin", size, unit);
            }
            return (double)mh$.invokeExact(size, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_default()
     * }
     */
    public static FunctionDescriptor gtk_paper_size_get_default$descriptor() {
        return gtk_paper_size_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_default()
     * }
     */
    public static MethodHandle gtk_paper_size_get_default$handle() {
        return gtk_paper_size_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_paper_size_get_default()
     * }
     */
    public static MemorySegment gtk_paper_size_get_default() {
        var mh$ = gtk_paper_size_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_new_from_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_new_from_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_new_from_key_file$descriptor() {
        return gtk_paper_size_new_from_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MethodHandle gtk_paper_size_new_from_key_file$handle() {
        return gtk_paper_size_new_from_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MemorySegment gtk_paper_size_new_from_key_file(MemorySegment key_file, MemorySegment group_name, MemorySegment error) {
        var mh$ = gtk_paper_size_new_from_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_new_from_key_file", key_file, group_name, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_to_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_to_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paper_size_to_key_file(GtkPaperSize *size, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_to_key_file$descriptor() {
        return gtk_paper_size_to_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paper_size_to_key_file(GtkPaperSize *size, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static MethodHandle gtk_paper_size_to_key_file$handle() {
        return gtk_paper_size_to_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paper_size_to_key_file(GtkPaperSize *size, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static void gtk_paper_size_to_key_file(MemorySegment size, MemorySegment key_file, MemorySegment group_name) {
        var mh$ = gtk_paper_size_to_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_to_key_file", size, key_file, group_name);
            }
            mh$.invokeExact(size, key_file, group_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_new_from_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_new_from_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_gvariant(GVariant *variant)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_new_from_gvariant$descriptor() {
        return gtk_paper_size_new_from_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MethodHandle gtk_paper_size_new_from_gvariant$handle() {
        return gtk_paper_size_new_from_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_paper_size_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MemorySegment gtk_paper_size_new_from_gvariant(MemorySegment variant) {
        var mh$ = gtk_paper_size_new_from_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_new_from_gvariant", variant);
            }
            return (MemorySegment)mh$.invokeExact(variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paper_size_to_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paper_size_to_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *gtk_paper_size_to_gvariant(GtkPaperSize *paper_size)
     * }
     */
    public static FunctionDescriptor gtk_paper_size_to_gvariant$descriptor() {
        return gtk_paper_size_to_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *gtk_paper_size_to_gvariant(GtkPaperSize *paper_size)
     * }
     */
    public static MethodHandle gtk_paper_size_to_gvariant$handle() {
        return gtk_paper_size_to_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *gtk_paper_size_to_gvariant(GtkPaperSize *paper_size)
     * }
     */
    public static MemorySegment gtk_paper_size_to_gvariant(MemorySegment paper_size) {
        var mh$ = gtk_paper_size_to_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paper_size_to_gvariant", paper_size);
            }
            return (MemorySegment)mh$.invokeExact(paper_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_page_setup_get_type()
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_type$descriptor() {
        return gtk_page_setup_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_page_setup_get_type()
     * }
     */
    public static MethodHandle gtk_page_setup_get_type$handle() {
        return gtk_page_setup_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_page_setup_get_type()
     * }
     */
    public static long gtk_page_setup_get_type() {
        var mh$ = gtk_page_setup_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new()
     * }
     */
    public static FunctionDescriptor gtk_page_setup_new$descriptor() {
        return gtk_page_setup_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new()
     * }
     */
    public static MethodHandle gtk_page_setup_new$handle() {
        return gtk_page_setup_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new()
     * }
     */
    public static MemorySegment gtk_page_setup_new() {
        var mh$ = gtk_page_setup_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_copy(GtkPageSetup *other)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_copy$descriptor() {
        return gtk_page_setup_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_copy(GtkPageSetup *other)
     * }
     */
    public static MethodHandle gtk_page_setup_copy$handle() {
        return gtk_page_setup_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_copy(GtkPageSetup *other)
     * }
     */
    public static MemorySegment gtk_page_setup_copy(MemorySegment other) {
        var mh$ = gtk_page_setup_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_copy", other);
            }
            return (MemorySegment)mh$.invokeExact(other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageOrientation gtk_page_setup_get_orientation(GtkPageSetup *setup)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_orientation$descriptor() {
        return gtk_page_setup_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageOrientation gtk_page_setup_get_orientation(GtkPageSetup *setup)
     * }
     */
    public static MethodHandle gtk_page_setup_get_orientation$handle() {
        return gtk_page_setup_get_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageOrientation gtk_page_setup_get_orientation(GtkPageSetup *setup)
     * }
     */
    public static int gtk_page_setup_get_orientation(MemorySegment setup) {
        var mh$ = gtk_page_setup_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_orientation", setup);
            }
            return (int)mh$.invokeExact(setup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_set_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_set_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_orientation(GtkPageSetup *setup, GtkPageOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_set_orientation$descriptor() {
        return gtk_page_setup_set_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_orientation(GtkPageSetup *setup, GtkPageOrientation orientation)
     * }
     */
    public static MethodHandle gtk_page_setup_set_orientation$handle() {
        return gtk_page_setup_set_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_orientation(GtkPageSetup *setup, GtkPageOrientation orientation)
     * }
     */
    public static void gtk_page_setup_set_orientation(MemorySegment setup, int orientation) {
        var mh$ = gtk_page_setup_set_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_set_orientation", setup, orientation);
            }
            mh$.invokeExact(setup, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_paper_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_paper_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_page_setup_get_paper_size(GtkPageSetup *setup)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_paper_size$descriptor() {
        return gtk_page_setup_get_paper_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_page_setup_get_paper_size(GtkPageSetup *setup)
     * }
     */
    public static MethodHandle gtk_page_setup_get_paper_size$handle() {
        return gtk_page_setup_get_paper_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_page_setup_get_paper_size(GtkPageSetup *setup)
     * }
     */
    public static MemorySegment gtk_page_setup_get_paper_size(MemorySegment setup) {
        var mh$ = gtk_page_setup_get_paper_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_paper_size", setup);
            }
            return (MemorySegment)mh$.invokeExact(setup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_set_paper_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_set_paper_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_paper_size(GtkPageSetup *setup, GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_set_paper_size$descriptor() {
        return gtk_page_setup_set_paper_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_paper_size(GtkPageSetup *setup, GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_page_setup_set_paper_size$handle() {
        return gtk_page_setup_set_paper_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_paper_size(GtkPageSetup *setup, GtkPaperSize *size)
     * }
     */
    public static void gtk_page_setup_set_paper_size(MemorySegment setup, MemorySegment size) {
        var mh$ = gtk_page_setup_set_paper_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_set_paper_size", setup, size);
            }
            mh$.invokeExact(setup, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_top_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_top_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_top_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_top_margin$descriptor() {
        return gtk_page_setup_get_top_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_top_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_top_margin$handle() {
        return gtk_page_setup_get_top_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_top_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_top_margin(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_top_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_top_margin", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_set_top_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_set_top_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_top_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_set_top_margin$descriptor() {
        return gtk_page_setup_set_top_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_top_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_set_top_margin$handle() {
        return gtk_page_setup_set_top_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_top_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static void gtk_page_setup_set_top_margin(MemorySegment setup, double margin, int unit) {
        var mh$ = gtk_page_setup_set_top_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_set_top_margin", setup, margin, unit);
            }
            mh$.invokeExact(setup, margin, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_bottom_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_bottom_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_bottom_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_bottom_margin$descriptor() {
        return gtk_page_setup_get_bottom_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_bottom_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_bottom_margin$handle() {
        return gtk_page_setup_get_bottom_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_bottom_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_bottom_margin(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_bottom_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_bottom_margin", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_set_bottom_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_set_bottom_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_bottom_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_set_bottom_margin$descriptor() {
        return gtk_page_setup_set_bottom_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_bottom_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_set_bottom_margin$handle() {
        return gtk_page_setup_set_bottom_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_bottom_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static void gtk_page_setup_set_bottom_margin(MemorySegment setup, double margin, int unit) {
        var mh$ = gtk_page_setup_set_bottom_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_set_bottom_margin", setup, margin, unit);
            }
            mh$.invokeExact(setup, margin, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_left_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_left_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_left_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_left_margin$descriptor() {
        return gtk_page_setup_get_left_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_left_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_left_margin$handle() {
        return gtk_page_setup_get_left_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_left_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_left_margin(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_left_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_left_margin", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_set_left_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_set_left_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_left_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_set_left_margin$descriptor() {
        return gtk_page_setup_set_left_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_left_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_set_left_margin$handle() {
        return gtk_page_setup_set_left_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_left_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static void gtk_page_setup_set_left_margin(MemorySegment setup, double margin, int unit) {
        var mh$ = gtk_page_setup_set_left_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_set_left_margin", setup, margin, unit);
            }
            mh$.invokeExact(setup, margin, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_right_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_right_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_right_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_right_margin$descriptor() {
        return gtk_page_setup_get_right_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_right_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_right_margin$handle() {
        return gtk_page_setup_get_right_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_right_margin(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_right_margin(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_right_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_right_margin", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_set_right_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_set_right_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_right_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_set_right_margin$descriptor() {
        return gtk_page_setup_set_right_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_right_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_set_right_margin$handle() {
        return gtk_page_setup_set_right_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_right_margin(GtkPageSetup *setup, gdouble margin, GtkUnit unit)
     * }
     */
    public static void gtk_page_setup_set_right_margin(MemorySegment setup, double margin, int unit) {
        var mh$ = gtk_page_setup_set_right_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_set_right_margin", setup, margin, unit);
            }
            mh$.invokeExact(setup, margin, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_set_paper_size_and_default_margins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_set_paper_size_and_default_margins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_paper_size_and_default_margins(GtkPageSetup *setup, GtkPaperSize *size)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_set_paper_size_and_default_margins$descriptor() {
        return gtk_page_setup_set_paper_size_and_default_margins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_paper_size_and_default_margins(GtkPageSetup *setup, GtkPaperSize *size)
     * }
     */
    public static MethodHandle gtk_page_setup_set_paper_size_and_default_margins$handle() {
        return gtk_page_setup_set_paper_size_and_default_margins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_set_paper_size_and_default_margins(GtkPageSetup *setup, GtkPaperSize *size)
     * }
     */
    public static void gtk_page_setup_set_paper_size_and_default_margins(MemorySegment setup, MemorySegment size) {
        var mh$ = gtk_page_setup_set_paper_size_and_default_margins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_set_paper_size_and_default_margins", setup, size);
            }
            mh$.invokeExact(setup, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_paper_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_paper_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_paper_width(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_paper_width$descriptor() {
        return gtk_page_setup_get_paper_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_paper_width(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_paper_width$handle() {
        return gtk_page_setup_get_paper_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_paper_width(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_paper_width(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_paper_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_paper_width", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_paper_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_paper_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_paper_height(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_paper_height$descriptor() {
        return gtk_page_setup_get_paper_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_paper_height(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_paper_height$handle() {
        return gtk_page_setup_get_paper_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_paper_height(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_paper_height(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_paper_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_paper_height", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_page_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_page_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_page_width(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_page_width$descriptor() {
        return gtk_page_setup_get_page_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_page_width(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_page_width$handle() {
        return gtk_page_setup_get_page_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_page_width(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_page_width(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_page_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_page_width", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_get_page_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_get_page_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_page_height(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_get_page_height$descriptor() {
        return gtk_page_setup_get_page_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_page_height(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_page_setup_get_page_height$handle() {
        return gtk_page_setup_get_page_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_page_setup_get_page_height(GtkPageSetup *setup, GtkUnit unit)
     * }
     */
    public static double gtk_page_setup_get_page_height(MemorySegment setup, int unit) {
        var mh$ = gtk_page_setup_get_page_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_get_page_height", setup, unit);
            }
            return (double)mh$.invokeExact(setup, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_file(const gchar *file_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_new_from_file$descriptor() {
        return gtk_page_setup_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_file(const gchar *file_name, GError **error)
     * }
     */
    public static MethodHandle gtk_page_setup_new_from_file$handle() {
        return gtk_page_setup_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_file(const gchar *file_name, GError **error)
     * }
     */
    public static MemorySegment gtk_page_setup_new_from_file(MemorySegment file_name, MemorySegment error) {
        var mh$ = gtk_page_setup_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_new_from_file", file_name, error);
            }
            return (MemorySegment)mh$.invokeExact(file_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_load_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_load_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_load_file(GtkPageSetup *setup, const char *file_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_load_file$descriptor() {
        return gtk_page_setup_load_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_load_file(GtkPageSetup *setup, const char *file_name, GError **error)
     * }
     */
    public static MethodHandle gtk_page_setup_load_file$handle() {
        return gtk_page_setup_load_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_load_file(GtkPageSetup *setup, const char *file_name, GError **error)
     * }
     */
    public static int gtk_page_setup_load_file(MemorySegment setup, MemorySegment file_name, MemorySegment error) {
        var mh$ = gtk_page_setup_load_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_load_file", setup, file_name, error);
            }
            return (int)mh$.invokeExact(setup, file_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_to_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_to_file(GtkPageSetup *setup, const char *file_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_to_file$descriptor() {
        return gtk_page_setup_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_to_file(GtkPageSetup *setup, const char *file_name, GError **error)
     * }
     */
    public static MethodHandle gtk_page_setup_to_file$handle() {
        return gtk_page_setup_to_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_to_file(GtkPageSetup *setup, const char *file_name, GError **error)
     * }
     */
    public static int gtk_page_setup_to_file(MemorySegment setup, MemorySegment file_name, MemorySegment error) {
        var mh$ = gtk_page_setup_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_to_file", setup, file_name, error);
            }
            return (int)mh$.invokeExact(setup, file_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_new_from_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_new_from_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_new_from_key_file$descriptor() {
        return gtk_page_setup_new_from_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MethodHandle gtk_page_setup_new_from_key_file$handle() {
        return gtk_page_setup_new_from_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MemorySegment gtk_page_setup_new_from_key_file(MemorySegment key_file, MemorySegment group_name, MemorySegment error) {
        var mh$ = gtk_page_setup_new_from_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_new_from_key_file", key_file, group_name, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_load_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_load_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_load_key_file(GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_load_key_file$descriptor() {
        return gtk_page_setup_load_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_load_key_file(GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MethodHandle gtk_page_setup_load_key_file$handle() {
        return gtk_page_setup_load_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_page_setup_load_key_file(GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static int gtk_page_setup_load_key_file(MemorySegment setup, MemorySegment key_file, MemorySegment group_name, MemorySegment error) {
        var mh$ = gtk_page_setup_load_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_load_key_file", setup, key_file, group_name, error);
            }
            return (int)mh$.invokeExact(setup, key_file, group_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_to_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_to_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_to_key_file(GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_to_key_file$descriptor() {
        return gtk_page_setup_to_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_page_setup_to_key_file(GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static MethodHandle gtk_page_setup_to_key_file$handle() {
        return gtk_page_setup_to_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_page_setup_to_key_file(GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static void gtk_page_setup_to_key_file(MemorySegment setup, MemorySegment key_file, MemorySegment group_name) {
        var mh$ = gtk_page_setup_to_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_to_key_file", setup, key_file, group_name);
            }
            mh$.invokeExact(setup, key_file, group_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_to_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_to_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *gtk_page_setup_to_gvariant(GtkPageSetup *setup)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_to_gvariant$descriptor() {
        return gtk_page_setup_to_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *gtk_page_setup_to_gvariant(GtkPageSetup *setup)
     * }
     */
    public static MethodHandle gtk_page_setup_to_gvariant$handle() {
        return gtk_page_setup_to_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *gtk_page_setup_to_gvariant(GtkPageSetup *setup)
     * }
     */
    public static MemorySegment gtk_page_setup_to_gvariant(MemorySegment setup) {
        var mh$ = gtk_page_setup_to_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_to_gvariant", setup);
            }
            return (MemorySegment)mh$.invokeExact(setup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_page_setup_new_from_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_page_setup_new_from_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_gvariant(GVariant *variant)
     * }
     */
    public static FunctionDescriptor gtk_page_setup_new_from_gvariant$descriptor() {
        return gtk_page_setup_new_from_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MethodHandle gtk_page_setup_new_from_gvariant$handle() {
        return gtk_page_setup_new_from_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_page_setup_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MemorySegment gtk_page_setup_new_from_gvariant(MemorySegment variant) {
        var mh$ = gtk_page_setup_new_from_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_page_setup_new_from_gvariant", variant);
            }
            return (MemorySegment)mh$.invokeExact(variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_paned_get_type()
     * }
     */
    public static FunctionDescriptor gtk_paned_get_type$descriptor() {
        return gtk_paned_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_paned_get_type()
     * }
     */
    public static MethodHandle gtk_paned_get_type$handle() {
        return gtk_paned_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_paned_get_type()
     * }
     */
    public static long gtk_paned_get_type() {
        var mh$ = gtk_paned_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_new(GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_paned_new$descriptor() {
        return gtk_paned_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_new(GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_paned_new$handle() {
        return gtk_paned_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_new(GtkOrientation orientation)
     * }
     */
    public static MemorySegment gtk_paned_new(int orientation) {
        var mh$ = gtk_paned_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_new", orientation);
            }
            return (MemorySegment)mh$.invokeExact(orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_add1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_add1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paned_add1(GtkPaned *paned, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_paned_add1$descriptor() {
        return gtk_paned_add1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paned_add1(GtkPaned *paned, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_paned_add1$handle() {
        return gtk_paned_add1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paned_add1(GtkPaned *paned, GtkWidget *child)
     * }
     */
    public static void gtk_paned_add1(MemorySegment paned, MemorySegment child) {
        var mh$ = gtk_paned_add1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_add1", paned, child);
            }
            mh$.invokeExact(paned, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_add2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_add2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paned_add2(GtkPaned *paned, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_paned_add2$descriptor() {
        return gtk_paned_add2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paned_add2(GtkPaned *paned, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_paned_add2$handle() {
        return gtk_paned_add2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paned_add2(GtkPaned *paned, GtkWidget *child)
     * }
     */
    public static void gtk_paned_add2(MemorySegment paned, MemorySegment child) {
        var mh$ = gtk_paned_add2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_add2", paned, child);
            }
            mh$.invokeExact(paned, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_pack1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_pack1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paned_pack1(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
     * }
     */
    public static FunctionDescriptor gtk_paned_pack1$descriptor() {
        return gtk_paned_pack1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paned_pack1(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
     * }
     */
    public static MethodHandle gtk_paned_pack1$handle() {
        return gtk_paned_pack1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paned_pack1(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
     * }
     */
    public static void gtk_paned_pack1(MemorySegment paned, MemorySegment child, int resize, int shrink) {
        var mh$ = gtk_paned_pack1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_pack1", paned, child, resize, shrink);
            }
            mh$.invokeExact(paned, child, resize, shrink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_pack2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_pack2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paned_pack2(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
     * }
     */
    public static FunctionDescriptor gtk_paned_pack2$descriptor() {
        return gtk_paned_pack2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paned_pack2(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
     * }
     */
    public static MethodHandle gtk_paned_pack2$handle() {
        return gtk_paned_pack2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paned_pack2(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
     * }
     */
    public static void gtk_paned_pack2(MemorySegment paned, MemorySegment child, int resize, int shrink) {
        var mh$ = gtk_paned_pack2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_pack2", paned, child, resize, shrink);
            }
            mh$.invokeExact(paned, child, resize, shrink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_paned_get_position(GtkPaned *paned)
     * }
     */
    public static FunctionDescriptor gtk_paned_get_position$descriptor() {
        return gtk_paned_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_paned_get_position(GtkPaned *paned)
     * }
     */
    public static MethodHandle gtk_paned_get_position$handle() {
        return gtk_paned_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_paned_get_position(GtkPaned *paned)
     * }
     */
    public static int gtk_paned_get_position(MemorySegment paned) {
        var mh$ = gtk_paned_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_get_position", paned);
            }
            return (int)mh$.invokeExact(paned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_set_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_set_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paned_set_position(GtkPaned *paned, gint position)
     * }
     */
    public static FunctionDescriptor gtk_paned_set_position$descriptor() {
        return gtk_paned_set_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paned_set_position(GtkPaned *paned, gint position)
     * }
     */
    public static MethodHandle gtk_paned_set_position$handle() {
        return gtk_paned_set_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paned_set_position(GtkPaned *paned, gint position)
     * }
     */
    public static void gtk_paned_set_position(MemorySegment paned, int position) {
        var mh$ = gtk_paned_set_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_set_position", paned, position);
            }
            mh$.invokeExact(paned, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_get_child1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_get_child1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_get_child1(GtkPaned *paned)
     * }
     */
    public static FunctionDescriptor gtk_paned_get_child1$descriptor() {
        return gtk_paned_get_child1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_get_child1(GtkPaned *paned)
     * }
     */
    public static MethodHandle gtk_paned_get_child1$handle() {
        return gtk_paned_get_child1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_get_child1(GtkPaned *paned)
     * }
     */
    public static MemorySegment gtk_paned_get_child1(MemorySegment paned) {
        var mh$ = gtk_paned_get_child1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_get_child1", paned);
            }
            return (MemorySegment)mh$.invokeExact(paned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_get_child2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_get_child2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_get_child2(GtkPaned *paned)
     * }
     */
    public static FunctionDescriptor gtk_paned_get_child2$descriptor() {
        return gtk_paned_get_child2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_get_child2(GtkPaned *paned)
     * }
     */
    public static MethodHandle gtk_paned_get_child2$handle() {
        return gtk_paned_get_child2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_paned_get_child2(GtkPaned *paned)
     * }
     */
    public static MemorySegment gtk_paned_get_child2(MemorySegment paned) {
        var mh$ = gtk_paned_get_child2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_get_child2", paned);
            }
            return (MemorySegment)mh$.invokeExact(paned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_get_handle_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_get_handle_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_paned_get_handle_window(GtkPaned *paned)
     * }
     */
    public static FunctionDescriptor gtk_paned_get_handle_window$descriptor() {
        return gtk_paned_get_handle_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_paned_get_handle_window(GtkPaned *paned)
     * }
     */
    public static MethodHandle gtk_paned_get_handle_window$handle() {
        return gtk_paned_get_handle_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_paned_get_handle_window(GtkPaned *paned)
     * }
     */
    public static MemorySegment gtk_paned_get_handle_window(MemorySegment paned) {
        var mh$ = gtk_paned_get_handle_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_get_handle_window", paned);
            }
            return (MemorySegment)mh$.invokeExact(paned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_set_wide_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_set_wide_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paned_set_wide_handle(GtkPaned *paned, gboolean wide)
     * }
     */
    public static FunctionDescriptor gtk_paned_set_wide_handle$descriptor() {
        return gtk_paned_set_wide_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paned_set_wide_handle(GtkPaned *paned, gboolean wide)
     * }
     */
    public static MethodHandle gtk_paned_set_wide_handle$handle() {
        return gtk_paned_set_wide_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paned_set_wide_handle(GtkPaned *paned, gboolean wide)
     * }
     */
    public static void gtk_paned_set_wide_handle(MemorySegment paned, int wide) {
        var mh$ = gtk_paned_set_wide_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_set_wide_handle", paned, wide);
            }
            mh$.invokeExact(paned, wide);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paned_get_wide_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paned_get_wide_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_paned_get_wide_handle(GtkPaned *paned)
     * }
     */
    public static FunctionDescriptor gtk_paned_get_wide_handle$descriptor() {
        return gtk_paned_get_wide_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_paned_get_wide_handle(GtkPaned *paned)
     * }
     */
    public static MethodHandle gtk_paned_get_wide_handle$handle() {
        return gtk_paned_get_wide_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_paned_get_wide_handle(GtkPaned *paned)
     * }
     */
    public static int gtk_paned_get_wide_handle(MemorySegment paned) {
        var mh$ = gtk_paned_get_wide_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paned_get_wide_handle", paned);
            }
            return (int)mh$.invokeExact(paned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_PLACES_OPEN_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PLACES_OPEN_NORMAL = 1
     * }
     */
    public static int GTK_PLACES_OPEN_NORMAL() {
        return GTK_PLACES_OPEN_NORMAL;
    }
    private static final int GTK_PLACES_OPEN_NEW_TAB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PLACES_OPEN_NEW_TAB = 2
     * }
     */
    public static int GTK_PLACES_OPEN_NEW_TAB() {
        return GTK_PLACES_OPEN_NEW_TAB;
    }
    private static final int GTK_PLACES_OPEN_NEW_WINDOW = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PLACES_OPEN_NEW_WINDOW = 4
     * }
     */
    public static int GTK_PLACES_OPEN_NEW_WINDOW() {
        return GTK_PLACES_OPEN_NEW_WINDOW;
    }

    private static class gtk_places_sidebar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_places_sidebar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_type$descriptor() {
        return gtk_places_sidebar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_places_sidebar_get_type()
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_type$handle() {
        return gtk_places_sidebar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_places_sidebar_get_type()
     * }
     */
    public static long gtk_places_sidebar_get_type() {
        var mh$ = gtk_places_sidebar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_places_sidebar_new()
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_new$descriptor() {
        return gtk_places_sidebar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_places_sidebar_new()
     * }
     */
    public static MethodHandle gtk_places_sidebar_new$handle() {
        return gtk_places_sidebar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_places_sidebar_new()
     * }
     */
    public static MemorySegment gtk_places_sidebar_new() {
        var mh$ = gtk_places_sidebar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_open_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_open_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPlacesOpenFlags gtk_places_sidebar_get_open_flags(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_open_flags$descriptor() {
        return gtk_places_sidebar_get_open_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPlacesOpenFlags gtk_places_sidebar_get_open_flags(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_open_flags$handle() {
        return gtk_places_sidebar_get_open_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPlacesOpenFlags gtk_places_sidebar_get_open_flags(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_open_flags(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_open_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_open_flags", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_open_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_open_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_open_flags(GtkPlacesSidebar *sidebar, GtkPlacesOpenFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_open_flags$descriptor() {
        return gtk_places_sidebar_set_open_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_open_flags(GtkPlacesSidebar *sidebar, GtkPlacesOpenFlags flags)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_open_flags$handle() {
        return gtk_places_sidebar_set_open_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_open_flags(GtkPlacesSidebar *sidebar, GtkPlacesOpenFlags flags)
     * }
     */
    public static void gtk_places_sidebar_set_open_flags(MemorySegment sidebar, int flags) {
        var mh$ = gtk_places_sidebar_set_open_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_open_flags", sidebar, flags);
            }
            mh$.invokeExact(sidebar, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *gtk_places_sidebar_get_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_location$descriptor() {
        return gtk_places_sidebar_get_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *gtk_places_sidebar_get_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_location$handle() {
        return gtk_places_sidebar_get_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *gtk_places_sidebar_get_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MemorySegment gtk_places_sidebar_get_location(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_location", sidebar);
            }
            return (MemorySegment)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_location(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_location$descriptor() {
        return gtk_places_sidebar_set_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_location(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_location$handle() {
        return gtk_places_sidebar_set_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_location(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static void gtk_places_sidebar_set_location(MemorySegment sidebar, MemorySegment location) {
        var mh$ = gtk_places_sidebar_set_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_location", sidebar, location);
            }
            mh$.invokeExact(sidebar, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_show_recent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_show_recent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_recent(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_show_recent$descriptor() {
        return gtk_places_sidebar_get_show_recent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_recent(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_show_recent$handle() {
        return gtk_places_sidebar_get_show_recent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_recent(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_show_recent(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_show_recent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_show_recent", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_show_recent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_show_recent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_recent(GtkPlacesSidebar *sidebar, gboolean show_recent)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_show_recent$descriptor() {
        return gtk_places_sidebar_set_show_recent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_recent(GtkPlacesSidebar *sidebar, gboolean show_recent)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_show_recent$handle() {
        return gtk_places_sidebar_set_show_recent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_recent(GtkPlacesSidebar *sidebar, gboolean show_recent)
     * }
     */
    public static void gtk_places_sidebar_set_show_recent(MemorySegment sidebar, int show_recent) {
        var mh$ = gtk_places_sidebar_set_show_recent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_show_recent", sidebar, show_recent);
            }
            mh$.invokeExact(sidebar, show_recent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_show_desktop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_show_desktop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_desktop(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_show_desktop$descriptor() {
        return gtk_places_sidebar_get_show_desktop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_desktop(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_show_desktop$handle() {
        return gtk_places_sidebar_get_show_desktop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_desktop(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_show_desktop(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_show_desktop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_show_desktop", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_show_desktop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_show_desktop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_desktop(GtkPlacesSidebar *sidebar, gboolean show_desktop)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_show_desktop$descriptor() {
        return gtk_places_sidebar_set_show_desktop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_desktop(GtkPlacesSidebar *sidebar, gboolean show_desktop)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_show_desktop$handle() {
        return gtk_places_sidebar_set_show_desktop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_desktop(GtkPlacesSidebar *sidebar, gboolean show_desktop)
     * }
     */
    public static void gtk_places_sidebar_set_show_desktop(MemorySegment sidebar, int show_desktop) {
        var mh$ = gtk_places_sidebar_set_show_desktop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_show_desktop", sidebar, show_desktop);
            }
            mh$.invokeExact(sidebar, show_desktop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_show_connect_to_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_show_connect_to_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_connect_to_server(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_show_connect_to_server$descriptor() {
        return gtk_places_sidebar_get_show_connect_to_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_connect_to_server(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_show_connect_to_server$handle() {
        return gtk_places_sidebar_get_show_connect_to_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_connect_to_server(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_show_connect_to_server(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_show_connect_to_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_show_connect_to_server", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_show_connect_to_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_show_connect_to_server"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_connect_to_server(GtkPlacesSidebar *sidebar, gboolean show_connect_to_server)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_show_connect_to_server$descriptor() {
        return gtk_places_sidebar_set_show_connect_to_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_connect_to_server(GtkPlacesSidebar *sidebar, gboolean show_connect_to_server)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_show_connect_to_server$handle() {
        return gtk_places_sidebar_set_show_connect_to_server.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_connect_to_server(GtkPlacesSidebar *sidebar, gboolean show_connect_to_server)
     * }
     */
    public static void gtk_places_sidebar_set_show_connect_to_server(MemorySegment sidebar, int show_connect_to_server) {
        var mh$ = gtk_places_sidebar_set_show_connect_to_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_show_connect_to_server", sidebar, show_connect_to_server);
            }
            mh$.invokeExact(sidebar, show_connect_to_server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_show_enter_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_show_enter_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_enter_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_show_enter_location$descriptor() {
        return gtk_places_sidebar_get_show_enter_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_enter_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_show_enter_location$handle() {
        return gtk_places_sidebar_get_show_enter_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_enter_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_show_enter_location(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_show_enter_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_show_enter_location", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_show_enter_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_show_enter_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_enter_location(GtkPlacesSidebar *sidebar, gboolean show_enter_location)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_show_enter_location$descriptor() {
        return gtk_places_sidebar_set_show_enter_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_enter_location(GtkPlacesSidebar *sidebar, gboolean show_enter_location)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_show_enter_location$handle() {
        return gtk_places_sidebar_set_show_enter_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_enter_location(GtkPlacesSidebar *sidebar, gboolean show_enter_location)
     * }
     */
    public static void gtk_places_sidebar_set_show_enter_location(MemorySegment sidebar, int show_enter_location) {
        var mh$ = gtk_places_sidebar_set_show_enter_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_show_enter_location", sidebar, show_enter_location);
            }
            mh$.invokeExact(sidebar, show_enter_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_local_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_local_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_local_only(GtkPlacesSidebar *sidebar, gboolean local_only)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_local_only$descriptor() {
        return gtk_places_sidebar_set_local_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_local_only(GtkPlacesSidebar *sidebar, gboolean local_only)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_local_only$handle() {
        return gtk_places_sidebar_set_local_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_local_only(GtkPlacesSidebar *sidebar, gboolean local_only)
     * }
     */
    public static void gtk_places_sidebar_set_local_only(MemorySegment sidebar, int local_only) {
        var mh$ = gtk_places_sidebar_set_local_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_local_only", sidebar, local_only);
            }
            mh$.invokeExact(sidebar, local_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_local_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_local_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_local_only(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_local_only$descriptor() {
        return gtk_places_sidebar_get_local_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_local_only(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_local_only$handle() {
        return gtk_places_sidebar_get_local_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_local_only(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_local_only(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_local_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_local_only", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_add_shortcut {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_add_shortcut"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_add_shortcut(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_add_shortcut$descriptor() {
        return gtk_places_sidebar_add_shortcut.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_add_shortcut(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static MethodHandle gtk_places_sidebar_add_shortcut$handle() {
        return gtk_places_sidebar_add_shortcut.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_add_shortcut(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static void gtk_places_sidebar_add_shortcut(MemorySegment sidebar, MemorySegment location) {
        var mh$ = gtk_places_sidebar_add_shortcut.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_add_shortcut", sidebar, location);
            }
            mh$.invokeExact(sidebar, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_remove_shortcut {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_remove_shortcut"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_remove_shortcut(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_remove_shortcut$descriptor() {
        return gtk_places_sidebar_remove_shortcut.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_remove_shortcut(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static MethodHandle gtk_places_sidebar_remove_shortcut$handle() {
        return gtk_places_sidebar_remove_shortcut.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_remove_shortcut(GtkPlacesSidebar *sidebar, GFile *location)
     * }
     */
    public static void gtk_places_sidebar_remove_shortcut(MemorySegment sidebar, MemorySegment location) {
        var mh$ = gtk_places_sidebar_remove_shortcut.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_remove_shortcut", sidebar, location);
            }
            mh$.invokeExact(sidebar, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_list_shortcuts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_list_shortcuts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_places_sidebar_list_shortcuts(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_list_shortcuts$descriptor() {
        return gtk_places_sidebar_list_shortcuts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_places_sidebar_list_shortcuts(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_list_shortcuts$handle() {
        return gtk_places_sidebar_list_shortcuts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_places_sidebar_list_shortcuts(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MemorySegment gtk_places_sidebar_list_shortcuts(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_list_shortcuts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_list_shortcuts", sidebar);
            }
            return (MemorySegment)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_nth_bookmark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_nth_bookmark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *gtk_places_sidebar_get_nth_bookmark(GtkPlacesSidebar *sidebar, gint n)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_nth_bookmark$descriptor() {
        return gtk_places_sidebar_get_nth_bookmark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *gtk_places_sidebar_get_nth_bookmark(GtkPlacesSidebar *sidebar, gint n)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_nth_bookmark$handle() {
        return gtk_places_sidebar_get_nth_bookmark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *gtk_places_sidebar_get_nth_bookmark(GtkPlacesSidebar *sidebar, gint n)
     * }
     */
    public static MemorySegment gtk_places_sidebar_get_nth_bookmark(MemorySegment sidebar, int n) {
        var mh$ = gtk_places_sidebar_get_nth_bookmark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_nth_bookmark", sidebar, n);
            }
            return (MemorySegment)mh$.invokeExact(sidebar, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_drop_targets_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_drop_targets_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_drop_targets_visible(GtkPlacesSidebar *sidebar, gboolean visible, GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_drop_targets_visible$descriptor() {
        return gtk_places_sidebar_set_drop_targets_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_drop_targets_visible(GtkPlacesSidebar *sidebar, gboolean visible, GdkDragContext *context)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_drop_targets_visible$handle() {
        return gtk_places_sidebar_set_drop_targets_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_drop_targets_visible(GtkPlacesSidebar *sidebar, gboolean visible, GdkDragContext *context)
     * }
     */
    public static void gtk_places_sidebar_set_drop_targets_visible(MemorySegment sidebar, int visible, MemorySegment context) {
        var mh$ = gtk_places_sidebar_set_drop_targets_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_drop_targets_visible", sidebar, visible, context);
            }
            mh$.invokeExact(sidebar, visible, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_show_trash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_show_trash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_trash(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_show_trash$descriptor() {
        return gtk_places_sidebar_get_show_trash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_trash(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_show_trash$handle() {
        return gtk_places_sidebar_get_show_trash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_trash(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_show_trash(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_show_trash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_show_trash", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_show_trash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_show_trash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_trash(GtkPlacesSidebar *sidebar, gboolean show_trash)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_show_trash$descriptor() {
        return gtk_places_sidebar_set_show_trash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_trash(GtkPlacesSidebar *sidebar, gboolean show_trash)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_show_trash$handle() {
        return gtk_places_sidebar_set_show_trash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_trash(GtkPlacesSidebar *sidebar, gboolean show_trash)
     * }
     */
    public static void gtk_places_sidebar_set_show_trash(MemorySegment sidebar, int show_trash) {
        var mh$ = gtk_places_sidebar_set_show_trash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_show_trash", sidebar, show_trash);
            }
            mh$.invokeExact(sidebar, show_trash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_show_other_locations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_show_other_locations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_other_locations(GtkPlacesSidebar *sidebar, gboolean show_other_locations)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_show_other_locations$descriptor() {
        return gtk_places_sidebar_set_show_other_locations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_other_locations(GtkPlacesSidebar *sidebar, gboolean show_other_locations)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_show_other_locations$handle() {
        return gtk_places_sidebar_set_show_other_locations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_other_locations(GtkPlacesSidebar *sidebar, gboolean show_other_locations)
     * }
     */
    public static void gtk_places_sidebar_set_show_other_locations(MemorySegment sidebar, int show_other_locations) {
        var mh$ = gtk_places_sidebar_set_show_other_locations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_show_other_locations", sidebar, show_other_locations);
            }
            mh$.invokeExact(sidebar, show_other_locations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_show_other_locations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_show_other_locations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_other_locations(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_show_other_locations$descriptor() {
        return gtk_places_sidebar_get_show_other_locations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_other_locations(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_show_other_locations$handle() {
        return gtk_places_sidebar_get_show_other_locations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_other_locations(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_show_other_locations(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_show_other_locations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_show_other_locations", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_set_show_starred_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_set_show_starred_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_starred_location(GtkPlacesSidebar *sidebar, gboolean show_starred_location)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_set_show_starred_location$descriptor() {
        return gtk_places_sidebar_set_show_starred_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_starred_location(GtkPlacesSidebar *sidebar, gboolean show_starred_location)
     * }
     */
    public static MethodHandle gtk_places_sidebar_set_show_starred_location$handle() {
        return gtk_places_sidebar_set_show_starred_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_places_sidebar_set_show_starred_location(GtkPlacesSidebar *sidebar, gboolean show_starred_location)
     * }
     */
    public static void gtk_places_sidebar_set_show_starred_location(MemorySegment sidebar, int show_starred_location) {
        var mh$ = gtk_places_sidebar_set_show_starred_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_set_show_starred_location", sidebar, show_starred_location);
            }
            mh$.invokeExact(sidebar, show_starred_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_places_sidebar_get_show_starred_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_places_sidebar_get_show_starred_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_starred_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static FunctionDescriptor gtk_places_sidebar_get_show_starred_location$descriptor() {
        return gtk_places_sidebar_get_show_starred_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_starred_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static MethodHandle gtk_places_sidebar_get_show_starred_location$handle() {
        return gtk_places_sidebar_get_show_starred_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_places_sidebar_get_show_starred_location(GtkPlacesSidebar *sidebar)
     * }
     */
    public static int gtk_places_sidebar_get_show_starred_location(MemorySegment sidebar) {
        var mh$ = gtk_places_sidebar_get_show_starred_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_places_sidebar_get_show_starred_location", sidebar);
            }
            return (int)mh$.invokeExact(sidebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_menu_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_menu_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_popover_menu_get_type()
     * }
     */
    public static FunctionDescriptor gtk_popover_menu_get_type$descriptor() {
        return gtk_popover_menu_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_popover_menu_get_type()
     * }
     */
    public static MethodHandle gtk_popover_menu_get_type$handle() {
        return gtk_popover_menu_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_popover_menu_get_type()
     * }
     */
    public static long gtk_popover_menu_get_type() {
        var mh$ = gtk_popover_menu_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_menu_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_menu_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_menu_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_menu_new()
     * }
     */
    public static FunctionDescriptor gtk_popover_menu_new$descriptor() {
        return gtk_popover_menu_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_menu_new()
     * }
     */
    public static MethodHandle gtk_popover_menu_new$handle() {
        return gtk_popover_menu_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_popover_menu_new()
     * }
     */
    public static MemorySegment gtk_popover_menu_new() {
        var mh$ = gtk_popover_menu_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_menu_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_popover_menu_open_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_popover_menu_open_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_popover_menu_open_submenu(GtkPopoverMenu *popover, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_popover_menu_open_submenu$descriptor() {
        return gtk_popover_menu_open_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_popover_menu_open_submenu(GtkPopoverMenu *popover, const gchar *name)
     * }
     */
    public static MethodHandle gtk_popover_menu_open_submenu$handle() {
        return gtk_popover_menu_open_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_popover_menu_open_submenu(GtkPopoverMenu *popover, const gchar *name)
     * }
     */
    public static void gtk_popover_menu_open_submenu(MemorySegment popover, MemorySegment name) {
        var mh$ = gtk_popover_menu_open_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_popover_menu_open_submenu", popover, name);
            }
            mh$.invokeExact(popover, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_context_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_type$descriptor() {
        return gtk_print_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_context_get_type()
     * }
     */
    public static MethodHandle gtk_print_context_get_type$handle() {
        return gtk_print_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_context_get_type()
     * }
     */
    public static long gtk_print_context_get_type() {
        var mh$ = gtk_print_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_cairo_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_cairo_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_t *gtk_print_context_get_cairo_context(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_cairo_context$descriptor() {
        return gtk_print_context_get_cairo_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_t *gtk_print_context_get_cairo_context(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_get_cairo_context$handle() {
        return gtk_print_context_get_cairo_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_t *gtk_print_context_get_cairo_context(GtkPrintContext *context)
     * }
     */
    public static MemorySegment gtk_print_context_get_cairo_context(MemorySegment context) {
        var mh$ = gtk_print_context_get_cairo_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_cairo_context", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_page_setup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_page_setup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_context_get_page_setup(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_page_setup$descriptor() {
        return gtk_print_context_get_page_setup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_context_get_page_setup(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_get_page_setup$handle() {
        return gtk_print_context_get_page_setup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_context_get_page_setup(GtkPrintContext *context)
     * }
     */
    public static MemorySegment gtk_print_context_get_page_setup(MemorySegment context) {
        var mh$ = gtk_print_context_get_page_setup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_page_setup", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_width(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_width$descriptor() {
        return gtk_print_context_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_width(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_get_width$handle() {
        return gtk_print_context_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_width(GtkPrintContext *context)
     * }
     */
    public static double gtk_print_context_get_width(MemorySegment context) {
        var mh$ = gtk_print_context_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_width", context);
            }
            return (double)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_height(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_height$descriptor() {
        return gtk_print_context_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_height(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_get_height$handle() {
        return gtk_print_context_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_height(GtkPrintContext *context)
     * }
     */
    public static double gtk_print_context_get_height(MemorySegment context) {
        var mh$ = gtk_print_context_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_height", context);
            }
            return (double)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_dpi_x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_dpi_x"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_dpi_x(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_dpi_x$descriptor() {
        return gtk_print_context_get_dpi_x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_dpi_x(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_get_dpi_x$handle() {
        return gtk_print_context_get_dpi_x.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_dpi_x(GtkPrintContext *context)
     * }
     */
    public static double gtk_print_context_get_dpi_x(MemorySegment context) {
        var mh$ = gtk_print_context_get_dpi_x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_dpi_x", context);
            }
            return (double)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_dpi_y {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_dpi_y"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_dpi_y(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_dpi_y$descriptor() {
        return gtk_print_context_get_dpi_y.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_dpi_y(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_get_dpi_y$handle() {
        return gtk_print_context_get_dpi_y.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_context_get_dpi_y(GtkPrintContext *context)
     * }
     */
    public static double gtk_print_context_get_dpi_y(MemorySegment context) {
        var mh$ = gtk_print_context_get_dpi_y.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_dpi_y", context);
            }
            return (double)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_hard_margins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_hard_margins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_context_get_hard_margins(GtkPrintContext *context, gdouble *top, gdouble *bottom, gdouble *left, gdouble *right)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_hard_margins$descriptor() {
        return gtk_print_context_get_hard_margins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_context_get_hard_margins(GtkPrintContext *context, gdouble *top, gdouble *bottom, gdouble *left, gdouble *right)
     * }
     */
    public static MethodHandle gtk_print_context_get_hard_margins$handle() {
        return gtk_print_context_get_hard_margins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_context_get_hard_margins(GtkPrintContext *context, gdouble *top, gdouble *bottom, gdouble *left, gdouble *right)
     * }
     */
    public static int gtk_print_context_get_hard_margins(MemorySegment context, MemorySegment top, MemorySegment bottom, MemorySegment left, MemorySegment right) {
        var mh$ = gtk_print_context_get_hard_margins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_hard_margins", context, top, bottom, left, right);
            }
            return (int)mh$.invokeExact(context, top, bottom, left, right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_get_pango_fontmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_get_pango_fontmap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_print_context_get_pango_fontmap(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_get_pango_fontmap$descriptor() {
        return gtk_print_context_get_pango_fontmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_print_context_get_pango_fontmap(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_get_pango_fontmap$handle() {
        return gtk_print_context_get_pango_fontmap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_print_context_get_pango_fontmap(GtkPrintContext *context)
     * }
     */
    public static MemorySegment gtk_print_context_get_pango_fontmap(MemorySegment context) {
        var mh$ = gtk_print_context_get_pango_fontmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_get_pango_fontmap", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_create_pango_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_create_pango_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *gtk_print_context_create_pango_context(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_create_pango_context$descriptor() {
        return gtk_print_context_create_pango_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *gtk_print_context_create_pango_context(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_create_pango_context$handle() {
        return gtk_print_context_create_pango_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *gtk_print_context_create_pango_context(GtkPrintContext *context)
     * }
     */
    public static MemorySegment gtk_print_context_create_pango_context(MemorySegment context) {
        var mh$ = gtk_print_context_create_pango_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_create_pango_context", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_create_pango_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_create_pango_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_print_context_create_pango_layout(GtkPrintContext *context)
     * }
     */
    public static FunctionDescriptor gtk_print_context_create_pango_layout$descriptor() {
        return gtk_print_context_create_pango_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_print_context_create_pango_layout(GtkPrintContext *context)
     * }
     */
    public static MethodHandle gtk_print_context_create_pango_layout$handle() {
        return gtk_print_context_create_pango_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *gtk_print_context_create_pango_layout(GtkPrintContext *context)
     * }
     */
    public static MemorySegment gtk_print_context_create_pango_layout(MemorySegment context) {
        var mh$ = gtk_print_context_create_pango_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_create_pango_layout", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_context_set_cairo_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_context_set_cairo_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_context_set_cairo_context(GtkPrintContext *context, cairo_t *cr, double dpi_x, double dpi_y)
     * }
     */
    public static FunctionDescriptor gtk_print_context_set_cairo_context$descriptor() {
        return gtk_print_context_set_cairo_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_context_set_cairo_context(GtkPrintContext *context, cairo_t *cr, double dpi_x, double dpi_y)
     * }
     */
    public static MethodHandle gtk_print_context_set_cairo_context$handle() {
        return gtk_print_context_set_cairo_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_context_set_cairo_context(GtkPrintContext *context, cairo_t *cr, double dpi_x, double dpi_y)
     * }
     */
    public static void gtk_print_context_set_cairo_context(MemorySegment context, MemorySegment cr, double dpi_x, double dpi_y) {
        var mh$ = gtk_print_context_set_cairo_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_context_set_cairo_context", context, cr, dpi_x, dpi_y);
            }
            mh$.invokeExact(context, cr, dpi_x, dpi_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_settings_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_type$descriptor() {
        return gtk_print_settings_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_settings_get_type()
     * }
     */
    public static MethodHandle gtk_print_settings_get_type$handle() {
        return gtk_print_settings_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_settings_get_type()
     * }
     */
    public static long gtk_print_settings_get_type() {
        var mh$ = gtk_print_settings_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new()
     * }
     */
    public static FunctionDescriptor gtk_print_settings_new$descriptor() {
        return gtk_print_settings_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new()
     * }
     */
    public static MethodHandle gtk_print_settings_new$handle() {
        return gtk_print_settings_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new()
     * }
     */
    public static MemorySegment gtk_print_settings_new() {
        var mh$ = gtk_print_settings_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_copy(GtkPrintSettings *other)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_copy$descriptor() {
        return gtk_print_settings_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_copy(GtkPrintSettings *other)
     * }
     */
    public static MethodHandle gtk_print_settings_copy$handle() {
        return gtk_print_settings_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_copy(GtkPrintSettings *other)
     * }
     */
    public static MemorySegment gtk_print_settings_copy(MemorySegment other) {
        var mh$ = gtk_print_settings_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_copy", other);
            }
            return (MemorySegment)mh$.invokeExact(other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_file(const gchar *file_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_new_from_file$descriptor() {
        return gtk_print_settings_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_file(const gchar *file_name, GError **error)
     * }
     */
    public static MethodHandle gtk_print_settings_new_from_file$handle() {
        return gtk_print_settings_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_file(const gchar *file_name, GError **error)
     * }
     */
    public static MemorySegment gtk_print_settings_new_from_file(MemorySegment file_name, MemorySegment error) {
        var mh$ = gtk_print_settings_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_new_from_file", file_name, error);
            }
            return (MemorySegment)mh$.invokeExact(file_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_load_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_load_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_load_file(GtkPrintSettings *settings, const gchar *file_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_load_file$descriptor() {
        return gtk_print_settings_load_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_load_file(GtkPrintSettings *settings, const gchar *file_name, GError **error)
     * }
     */
    public static MethodHandle gtk_print_settings_load_file$handle() {
        return gtk_print_settings_load_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_load_file(GtkPrintSettings *settings, const gchar *file_name, GError **error)
     * }
     */
    public static int gtk_print_settings_load_file(MemorySegment settings, MemorySegment file_name, MemorySegment error) {
        var mh$ = gtk_print_settings_load_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_load_file", settings, file_name, error);
            }
            return (int)mh$.invokeExact(settings, file_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_to_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_to_file(GtkPrintSettings *settings, const gchar *file_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_to_file$descriptor() {
        return gtk_print_settings_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_to_file(GtkPrintSettings *settings, const gchar *file_name, GError **error)
     * }
     */
    public static MethodHandle gtk_print_settings_to_file$handle() {
        return gtk_print_settings_to_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_to_file(GtkPrintSettings *settings, const gchar *file_name, GError **error)
     * }
     */
    public static int gtk_print_settings_to_file(MemorySegment settings, MemorySegment file_name, MemorySegment error) {
        var mh$ = gtk_print_settings_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_to_file", settings, file_name, error);
            }
            return (int)mh$.invokeExact(settings, file_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_new_from_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_new_from_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_new_from_key_file$descriptor() {
        return gtk_print_settings_new_from_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MethodHandle gtk_print_settings_new_from_key_file$handle() {
        return gtk_print_settings_new_from_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_key_file(GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MemorySegment gtk_print_settings_new_from_key_file(MemorySegment key_file, MemorySegment group_name, MemorySegment error) {
        var mh$ = gtk_print_settings_new_from_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_new_from_key_file", key_file, group_name, error);
            }
            return (MemorySegment)mh$.invokeExact(key_file, group_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_load_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_load_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_load_key_file(GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_load_key_file$descriptor() {
        return gtk_print_settings_load_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_load_key_file(GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static MethodHandle gtk_print_settings_load_key_file$handle() {
        return gtk_print_settings_load_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_load_key_file(GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name, GError **error)
     * }
     */
    public static int gtk_print_settings_load_key_file(MemorySegment settings, MemorySegment key_file, MemorySegment group_name, MemorySegment error) {
        var mh$ = gtk_print_settings_load_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_load_key_file", settings, key_file, group_name, error);
            }
            return (int)mh$.invokeExact(settings, key_file, group_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_to_key_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_to_key_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_to_key_file(GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_to_key_file$descriptor() {
        return gtk_print_settings_to_key_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_to_key_file(GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static MethodHandle gtk_print_settings_to_key_file$handle() {
        return gtk_print_settings_to_key_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_to_key_file(GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name)
     * }
     */
    public static void gtk_print_settings_to_key_file(MemorySegment settings, MemorySegment key_file, MemorySegment group_name) {
        var mh$ = gtk_print_settings_to_key_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_to_key_file", settings, key_file, group_name);
            }
            mh$.invokeExact(settings, key_file, group_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_has_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_has_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_has_key(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_has_key$descriptor() {
        return gtk_print_settings_has_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_has_key(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle gtk_print_settings_has_key$handle() {
        return gtk_print_settings_has_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_has_key(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static int gtk_print_settings_has_key(MemorySegment settings, MemorySegment key) {
        var mh$ = gtk_print_settings_has_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_has_key", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get$descriptor() {
        return gtk_print_settings_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle gtk_print_settings_get$handle() {
        return gtk_print_settings_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment gtk_print_settings_get(MemorySegment settings, MemorySegment key) {
        var mh$ = gtk_print_settings_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set(GtkPrintSettings *settings, const gchar *key, const gchar *value)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set$descriptor() {
        return gtk_print_settings_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set(GtkPrintSettings *settings, const gchar *key, const gchar *value)
     * }
     */
    public static MethodHandle gtk_print_settings_set$handle() {
        return gtk_print_settings_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set(GtkPrintSettings *settings, const gchar *key, const gchar *value)
     * }
     */
    public static void gtk_print_settings_set(MemorySegment settings, MemorySegment key, MemorySegment value) {
        var mh$ = gtk_print_settings_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set", settings, key, value);
            }
            mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_unset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_unset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_unset(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_unset$descriptor() {
        return gtk_print_settings_unset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_unset(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle gtk_print_settings_unset$handle() {
        return gtk_print_settings_unset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_unset(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static void gtk_print_settings_unset(MemorySegment settings, MemorySegment key) {
        var mh$ = gtk_print_settings_unset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_unset", settings, key);
            }
            mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_foreach(GtkPrintSettings *settings, GtkPrintSettingsFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_foreach$descriptor() {
        return gtk_print_settings_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_foreach(GtkPrintSettings *settings, GtkPrintSettingsFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_print_settings_foreach$handle() {
        return gtk_print_settings_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_foreach(GtkPrintSettings *settings, GtkPrintSettingsFunc func, gpointer user_data)
     * }
     */
    public static void gtk_print_settings_foreach(MemorySegment settings, MemorySegment func, MemorySegment user_data) {
        var mh$ = gtk_print_settings_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_foreach", settings, func, user_data);
            }
            mh$.invokeExact(settings, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_bool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_bool(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_bool$descriptor() {
        return gtk_print_settings_get_bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_bool(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle gtk_print_settings_get_bool$handle() {
        return gtk_print_settings_get_bool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_bool(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static int gtk_print_settings_get_bool(MemorySegment settings, MemorySegment key) {
        var mh$ = gtk_print_settings_get_bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_bool", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_bool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_bool(GtkPrintSettings *settings, const gchar *key, gboolean value)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_bool$descriptor() {
        return gtk_print_settings_set_bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_bool(GtkPrintSettings *settings, const gchar *key, gboolean value)
     * }
     */
    public static MethodHandle gtk_print_settings_set_bool$handle() {
        return gtk_print_settings_set_bool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_bool(GtkPrintSettings *settings, const gchar *key, gboolean value)
     * }
     */
    public static void gtk_print_settings_set_bool(MemorySegment settings, MemorySegment key, int value) {
        var mh$ = gtk_print_settings_set_bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_bool", settings, key, value);
            }
            mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_double(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_double$descriptor() {
        return gtk_print_settings_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_double(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle gtk_print_settings_get_double$handle() {
        return gtk_print_settings_get_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_double(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static double gtk_print_settings_get_double(MemorySegment settings, MemorySegment key) {
        var mh$ = gtk_print_settings_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_double", settings, key);
            }
            return (double)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_double_with_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_double_with_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_double_with_default(GtkPrintSettings *settings, const gchar *key, gdouble def)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_double_with_default$descriptor() {
        return gtk_print_settings_get_double_with_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_double_with_default(GtkPrintSettings *settings, const gchar *key, gdouble def)
     * }
     */
    public static MethodHandle gtk_print_settings_get_double_with_default$handle() {
        return gtk_print_settings_get_double_with_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_double_with_default(GtkPrintSettings *settings, const gchar *key, gdouble def)
     * }
     */
    public static double gtk_print_settings_get_double_with_default(MemorySegment settings, MemorySegment key, double def) {
        var mh$ = gtk_print_settings_get_double_with_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_double_with_default", settings, key, def);
            }
            return (double)mh$.invokeExact(settings, key, def);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_double(GtkPrintSettings *settings, const gchar *key, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_double$descriptor() {
        return gtk_print_settings_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_double(GtkPrintSettings *settings, const gchar *key, gdouble value)
     * }
     */
    public static MethodHandle gtk_print_settings_set_double$handle() {
        return gtk_print_settings_set_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_double(GtkPrintSettings *settings, const gchar *key, gdouble value)
     * }
     */
    public static void gtk_print_settings_set_double(MemorySegment settings, MemorySegment key, double value) {
        var mh$ = gtk_print_settings_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_double", settings, key, value);
            }
            mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_length(GtkPrintSettings *settings, const gchar *key, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_length$descriptor() {
        return gtk_print_settings_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_length(GtkPrintSettings *settings, const gchar *key, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_print_settings_get_length$handle() {
        return gtk_print_settings_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_length(GtkPrintSettings *settings, const gchar *key, GtkUnit unit)
     * }
     */
    public static double gtk_print_settings_get_length(MemorySegment settings, MemorySegment key, int unit) {
        var mh$ = gtk_print_settings_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_length", settings, key, unit);
            }
            return (double)mh$.invokeExact(settings, key, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_length(GtkPrintSettings *settings, const gchar *key, gdouble value, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_length$descriptor() {
        return gtk_print_settings_set_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_length(GtkPrintSettings *settings, const gchar *key, gdouble value, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_print_settings_set_length$handle() {
        return gtk_print_settings_set_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_length(GtkPrintSettings *settings, const gchar *key, gdouble value, GtkUnit unit)
     * }
     */
    public static void gtk_print_settings_set_length(MemorySegment settings, MemorySegment key, double value, int unit) {
        var mh$ = gtk_print_settings_set_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_length", settings, key, value, unit);
            }
            mh$.invokeExact(settings, key, value, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_int(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_int$descriptor() {
        return gtk_print_settings_get_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_int(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle gtk_print_settings_get_int$handle() {
        return gtk_print_settings_get_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_int(GtkPrintSettings *settings, const gchar *key)
     * }
     */
    public static int gtk_print_settings_get_int(MemorySegment settings, MemorySegment key) {
        var mh$ = gtk_print_settings_get_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_int", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_int_with_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_int_with_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_int_with_default(GtkPrintSettings *settings, const gchar *key, gint def)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_int_with_default$descriptor() {
        return gtk_print_settings_get_int_with_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_int_with_default(GtkPrintSettings *settings, const gchar *key, gint def)
     * }
     */
    public static MethodHandle gtk_print_settings_get_int_with_default$handle() {
        return gtk_print_settings_get_int_with_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_int_with_default(GtkPrintSettings *settings, const gchar *key, gint def)
     * }
     */
    public static int gtk_print_settings_get_int_with_default(MemorySegment settings, MemorySegment key, int def) {
        var mh$ = gtk_print_settings_get_int_with_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_int_with_default", settings, key, def);
            }
            return (int)mh$.invokeExact(settings, key, def);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_int(GtkPrintSettings *settings, const gchar *key, gint value)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_int$descriptor() {
        return gtk_print_settings_set_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_int(GtkPrintSettings *settings, const gchar *key, gint value)
     * }
     */
    public static MethodHandle gtk_print_settings_set_int$handle() {
        return gtk_print_settings_set_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_int(GtkPrintSettings *settings, const gchar *key, gint value)
     * }
     */
    public static void gtk_print_settings_set_int(MemorySegment settings, MemorySegment key, int value) {
        var mh$ = gtk_print_settings_set_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_int", settings, key, value);
            }
            mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_printer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_printer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_printer(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_printer$descriptor() {
        return gtk_print_settings_get_printer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_printer(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_printer$handle() {
        return gtk_print_settings_get_printer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_printer(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_get_printer(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_printer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_printer", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_printer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_printer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_printer(GtkPrintSettings *settings, const gchar *printer)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_printer$descriptor() {
        return gtk_print_settings_set_printer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_printer(GtkPrintSettings *settings, const gchar *printer)
     * }
     */
    public static MethodHandle gtk_print_settings_set_printer$handle() {
        return gtk_print_settings_set_printer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_printer(GtkPrintSettings *settings, const gchar *printer)
     * }
     */
    public static void gtk_print_settings_set_printer(MemorySegment settings, MemorySegment printer) {
        var mh$ = gtk_print_settings_set_printer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_printer", settings, printer);
            }
            mh$.invokeExact(settings, printer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageOrientation gtk_print_settings_get_orientation(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_orientation$descriptor() {
        return gtk_print_settings_get_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageOrientation gtk_print_settings_get_orientation(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_orientation$handle() {
        return gtk_print_settings_get_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageOrientation gtk_print_settings_get_orientation(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_orientation(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_orientation", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_orientation(GtkPrintSettings *settings, GtkPageOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_orientation$descriptor() {
        return gtk_print_settings_set_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_orientation(GtkPrintSettings *settings, GtkPageOrientation orientation)
     * }
     */
    public static MethodHandle gtk_print_settings_set_orientation$handle() {
        return gtk_print_settings_set_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_orientation(GtkPrintSettings *settings, GtkPageOrientation orientation)
     * }
     */
    public static void gtk_print_settings_set_orientation(MemorySegment settings, int orientation) {
        var mh$ = gtk_print_settings_set_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_orientation", settings, orientation);
            }
            mh$.invokeExact(settings, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_paper_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_paper_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_print_settings_get_paper_size(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_paper_size$descriptor() {
        return gtk_print_settings_get_paper_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_print_settings_get_paper_size(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_paper_size$handle() {
        return gtk_print_settings_get_paper_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPaperSize *gtk_print_settings_get_paper_size(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_get_paper_size(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_paper_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_paper_size", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_paper_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_paper_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_size(GtkPrintSettings *settings, GtkPaperSize *paper_size)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_paper_size$descriptor() {
        return gtk_print_settings_set_paper_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_size(GtkPrintSettings *settings, GtkPaperSize *paper_size)
     * }
     */
    public static MethodHandle gtk_print_settings_set_paper_size$handle() {
        return gtk_print_settings_set_paper_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_size(GtkPrintSettings *settings, GtkPaperSize *paper_size)
     * }
     */
    public static void gtk_print_settings_set_paper_size(MemorySegment settings, MemorySegment paper_size) {
        var mh$ = gtk_print_settings_set_paper_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_paper_size", settings, paper_size);
            }
            mh$.invokeExact(settings, paper_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_paper_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_paper_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_paper_width(GtkPrintSettings *settings, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_paper_width$descriptor() {
        return gtk_print_settings_get_paper_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_paper_width(GtkPrintSettings *settings, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_print_settings_get_paper_width$handle() {
        return gtk_print_settings_get_paper_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_paper_width(GtkPrintSettings *settings, GtkUnit unit)
     * }
     */
    public static double gtk_print_settings_get_paper_width(MemorySegment settings, int unit) {
        var mh$ = gtk_print_settings_get_paper_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_paper_width", settings, unit);
            }
            return (double)mh$.invokeExact(settings, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_paper_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_paper_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_width(GtkPrintSettings *settings, gdouble width, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_paper_width$descriptor() {
        return gtk_print_settings_set_paper_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_width(GtkPrintSettings *settings, gdouble width, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_print_settings_set_paper_width$handle() {
        return gtk_print_settings_set_paper_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_width(GtkPrintSettings *settings, gdouble width, GtkUnit unit)
     * }
     */
    public static void gtk_print_settings_set_paper_width(MemorySegment settings, double width, int unit) {
        var mh$ = gtk_print_settings_set_paper_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_paper_width", settings, width, unit);
            }
            mh$.invokeExact(settings, width, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_paper_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_paper_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_paper_height(GtkPrintSettings *settings, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_paper_height$descriptor() {
        return gtk_print_settings_get_paper_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_paper_height(GtkPrintSettings *settings, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_print_settings_get_paper_height$handle() {
        return gtk_print_settings_get_paper_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_paper_height(GtkPrintSettings *settings, GtkUnit unit)
     * }
     */
    public static double gtk_print_settings_get_paper_height(MemorySegment settings, int unit) {
        var mh$ = gtk_print_settings_get_paper_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_paper_height", settings, unit);
            }
            return (double)mh$.invokeExact(settings, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_paper_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_paper_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_height(GtkPrintSettings *settings, gdouble height, GtkUnit unit)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_paper_height$descriptor() {
        return gtk_print_settings_set_paper_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_height(GtkPrintSettings *settings, gdouble height, GtkUnit unit)
     * }
     */
    public static MethodHandle gtk_print_settings_set_paper_height$handle() {
        return gtk_print_settings_set_paper_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_paper_height(GtkPrintSettings *settings, gdouble height, GtkUnit unit)
     * }
     */
    public static void gtk_print_settings_set_paper_height(MemorySegment settings, double height, int unit) {
        var mh$ = gtk_print_settings_set_paper_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_paper_height", settings, height, unit);
            }
            mh$.invokeExact(settings, height, unit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_use_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_use_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_use_color(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_use_color$descriptor() {
        return gtk_print_settings_get_use_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_use_color(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_use_color$handle() {
        return gtk_print_settings_get_use_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_use_color(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_use_color(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_use_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_use_color", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_use_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_use_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_use_color(GtkPrintSettings *settings, gboolean use_color)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_use_color$descriptor() {
        return gtk_print_settings_set_use_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_use_color(GtkPrintSettings *settings, gboolean use_color)
     * }
     */
    public static MethodHandle gtk_print_settings_set_use_color$handle() {
        return gtk_print_settings_set_use_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_use_color(GtkPrintSettings *settings, gboolean use_color)
     * }
     */
    public static void gtk_print_settings_set_use_color(MemorySegment settings, int use_color) {
        var mh$ = gtk_print_settings_set_use_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_use_color", settings, use_color);
            }
            mh$.invokeExact(settings, use_color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_collate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_collate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_collate(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_collate$descriptor() {
        return gtk_print_settings_get_collate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_collate(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_collate$handle() {
        return gtk_print_settings_get_collate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_collate(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_collate(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_collate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_collate", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_collate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_collate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_collate(GtkPrintSettings *settings, gboolean collate)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_collate$descriptor() {
        return gtk_print_settings_set_collate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_collate(GtkPrintSettings *settings, gboolean collate)
     * }
     */
    public static MethodHandle gtk_print_settings_set_collate$handle() {
        return gtk_print_settings_set_collate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_collate(GtkPrintSettings *settings, gboolean collate)
     * }
     */
    public static void gtk_print_settings_set_collate(MemorySegment settings, int collate) {
        var mh$ = gtk_print_settings_set_collate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_collate", settings, collate);
            }
            mh$.invokeExact(settings, collate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_reverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_reverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_reverse(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_reverse$descriptor() {
        return gtk_print_settings_get_reverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_reverse(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_reverse$handle() {
        return gtk_print_settings_get_reverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_settings_get_reverse(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_reverse(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_reverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_reverse", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_reverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_reverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_reverse(GtkPrintSettings *settings, gboolean reverse)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_reverse$descriptor() {
        return gtk_print_settings_set_reverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_reverse(GtkPrintSettings *settings, gboolean reverse)
     * }
     */
    public static MethodHandle gtk_print_settings_set_reverse$handle() {
        return gtk_print_settings_set_reverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_reverse(GtkPrintSettings *settings, gboolean reverse)
     * }
     */
    public static void gtk_print_settings_set_reverse(MemorySegment settings, int reverse) {
        var mh$ = gtk_print_settings_set_reverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_reverse", settings, reverse);
            }
            mh$.invokeExact(settings, reverse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_duplex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_duplex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintDuplex gtk_print_settings_get_duplex(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_duplex$descriptor() {
        return gtk_print_settings_get_duplex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintDuplex gtk_print_settings_get_duplex(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_duplex$handle() {
        return gtk_print_settings_get_duplex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintDuplex gtk_print_settings_get_duplex(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_duplex(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_duplex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_duplex", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_duplex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_duplex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_duplex(GtkPrintSettings *settings, GtkPrintDuplex duplex)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_duplex$descriptor() {
        return gtk_print_settings_set_duplex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_duplex(GtkPrintSettings *settings, GtkPrintDuplex duplex)
     * }
     */
    public static MethodHandle gtk_print_settings_set_duplex$handle() {
        return gtk_print_settings_set_duplex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_duplex(GtkPrintSettings *settings, GtkPrintDuplex duplex)
     * }
     */
    public static void gtk_print_settings_set_duplex(MemorySegment settings, int duplex) {
        var mh$ = gtk_print_settings_set_duplex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_duplex", settings, duplex);
            }
            mh$.invokeExact(settings, duplex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_quality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_quality"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintQuality gtk_print_settings_get_quality(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_quality$descriptor() {
        return gtk_print_settings_get_quality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintQuality gtk_print_settings_get_quality(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_quality$handle() {
        return gtk_print_settings_get_quality.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintQuality gtk_print_settings_get_quality(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_quality(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_quality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_quality", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_quality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_quality"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_quality(GtkPrintSettings *settings, GtkPrintQuality quality)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_quality$descriptor() {
        return gtk_print_settings_set_quality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_quality(GtkPrintSettings *settings, GtkPrintQuality quality)
     * }
     */
    public static MethodHandle gtk_print_settings_set_quality$handle() {
        return gtk_print_settings_set_quality.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_quality(GtkPrintSettings *settings, GtkPrintQuality quality)
     * }
     */
    public static void gtk_print_settings_set_quality(MemorySegment settings, int quality) {
        var mh$ = gtk_print_settings_set_quality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_quality", settings, quality);
            }
            mh$.invokeExact(settings, quality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_n_copies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_n_copies"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_n_copies(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_n_copies$descriptor() {
        return gtk_print_settings_get_n_copies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_n_copies(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_n_copies$handle() {
        return gtk_print_settings_get_n_copies.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_n_copies(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_n_copies(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_n_copies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_n_copies", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_n_copies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_n_copies"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_n_copies(GtkPrintSettings *settings, gint num_copies)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_n_copies$descriptor() {
        return gtk_print_settings_set_n_copies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_n_copies(GtkPrintSettings *settings, gint num_copies)
     * }
     */
    public static MethodHandle gtk_print_settings_set_n_copies$handle() {
        return gtk_print_settings_set_n_copies.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_n_copies(GtkPrintSettings *settings, gint num_copies)
     * }
     */
    public static void gtk_print_settings_set_n_copies(MemorySegment settings, int num_copies) {
        var mh$ = gtk_print_settings_set_n_copies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_n_copies", settings, num_copies);
            }
            mh$.invokeExact(settings, num_copies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_number_up {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_number_up"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_number_up(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_number_up$descriptor() {
        return gtk_print_settings_get_number_up.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_number_up(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_number_up$handle() {
        return gtk_print_settings_get_number_up.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_number_up(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_number_up(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_number_up.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_number_up", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_number_up {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_number_up"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_number_up(GtkPrintSettings *settings, gint number_up)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_number_up$descriptor() {
        return gtk_print_settings_set_number_up.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_number_up(GtkPrintSettings *settings, gint number_up)
     * }
     */
    public static MethodHandle gtk_print_settings_set_number_up$handle() {
        return gtk_print_settings_set_number_up.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_number_up(GtkPrintSettings *settings, gint number_up)
     * }
     */
    public static void gtk_print_settings_set_number_up(MemorySegment settings, int number_up) {
        var mh$ = gtk_print_settings_set_number_up.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_number_up", settings, number_up);
            }
            mh$.invokeExact(settings, number_up);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_number_up_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_number_up_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkNumberUpLayout gtk_print_settings_get_number_up_layout(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_number_up_layout$descriptor() {
        return gtk_print_settings_get_number_up_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkNumberUpLayout gtk_print_settings_get_number_up_layout(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_number_up_layout$handle() {
        return gtk_print_settings_get_number_up_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkNumberUpLayout gtk_print_settings_get_number_up_layout(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_number_up_layout(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_number_up_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_number_up_layout", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_number_up_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_number_up_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_number_up_layout(GtkPrintSettings *settings, GtkNumberUpLayout number_up_layout)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_number_up_layout$descriptor() {
        return gtk_print_settings_set_number_up_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_number_up_layout(GtkPrintSettings *settings, GtkNumberUpLayout number_up_layout)
     * }
     */
    public static MethodHandle gtk_print_settings_set_number_up_layout$handle() {
        return gtk_print_settings_set_number_up_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_number_up_layout(GtkPrintSettings *settings, GtkNumberUpLayout number_up_layout)
     * }
     */
    public static void gtk_print_settings_set_number_up_layout(MemorySegment settings, int number_up_layout) {
        var mh$ = gtk_print_settings_set_number_up_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_number_up_layout", settings, number_up_layout);
            }
            mh$.invokeExact(settings, number_up_layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_resolution$descriptor() {
        return gtk_print_settings_get_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_resolution$handle() {
        return gtk_print_settings_get_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_resolution(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_resolution", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_resolution(GtkPrintSettings *settings, gint resolution)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_resolution$descriptor() {
        return gtk_print_settings_set_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_resolution(GtkPrintSettings *settings, gint resolution)
     * }
     */
    public static MethodHandle gtk_print_settings_set_resolution$handle() {
        return gtk_print_settings_set_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_resolution(GtkPrintSettings *settings, gint resolution)
     * }
     */
    public static void gtk_print_settings_set_resolution(MemorySegment settings, int resolution) {
        var mh$ = gtk_print_settings_set_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_resolution", settings, resolution);
            }
            mh$.invokeExact(settings, resolution);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_resolution_x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_resolution_x"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution_x(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_resolution_x$descriptor() {
        return gtk_print_settings_get_resolution_x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution_x(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_resolution_x$handle() {
        return gtk_print_settings_get_resolution_x.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution_x(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_resolution_x(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_resolution_x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_resolution_x", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_resolution_y {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_resolution_y"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution_y(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_resolution_y$descriptor() {
        return gtk_print_settings_get_resolution_y.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution_y(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_resolution_y$handle() {
        return gtk_print_settings_get_resolution_y.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_print_settings_get_resolution_y(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_resolution_y(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_resolution_y.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_resolution_y", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_resolution_xy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_resolution_xy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_resolution_xy(GtkPrintSettings *settings, gint resolution_x, gint resolution_y)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_resolution_xy$descriptor() {
        return gtk_print_settings_set_resolution_xy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_resolution_xy(GtkPrintSettings *settings, gint resolution_x, gint resolution_y)
     * }
     */
    public static MethodHandle gtk_print_settings_set_resolution_xy$handle() {
        return gtk_print_settings_set_resolution_xy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_resolution_xy(GtkPrintSettings *settings, gint resolution_x, gint resolution_y)
     * }
     */
    public static void gtk_print_settings_set_resolution_xy(MemorySegment settings, int resolution_x, int resolution_y) {
        var mh$ = gtk_print_settings_set_resolution_xy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_resolution_xy", settings, resolution_x, resolution_y);
            }
            mh$.invokeExact(settings, resolution_x, resolution_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_printer_lpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_printer_lpi"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_printer_lpi(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_printer_lpi$descriptor() {
        return gtk_print_settings_get_printer_lpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_printer_lpi(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_printer_lpi$handle() {
        return gtk_print_settings_get_printer_lpi.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_printer_lpi(GtkPrintSettings *settings)
     * }
     */
    public static double gtk_print_settings_get_printer_lpi(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_printer_lpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_printer_lpi", settings);
            }
            return (double)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_printer_lpi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_printer_lpi"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_printer_lpi(GtkPrintSettings *settings, gdouble lpi)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_printer_lpi$descriptor() {
        return gtk_print_settings_set_printer_lpi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_printer_lpi(GtkPrintSettings *settings, gdouble lpi)
     * }
     */
    public static MethodHandle gtk_print_settings_set_printer_lpi$handle() {
        return gtk_print_settings_set_printer_lpi.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_printer_lpi(GtkPrintSettings *settings, gdouble lpi)
     * }
     */
    public static void gtk_print_settings_set_printer_lpi(MemorySegment settings, double lpi) {
        var mh$ = gtk_print_settings_set_printer_lpi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_printer_lpi", settings, lpi);
            }
            mh$.invokeExact(settings, lpi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_scale(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_scale$descriptor() {
        return gtk_print_settings_get_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_scale(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_scale$handle() {
        return gtk_print_settings_get_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_print_settings_get_scale(GtkPrintSettings *settings)
     * }
     */
    public static double gtk_print_settings_get_scale(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_scale", settings);
            }
            return (double)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_scale(GtkPrintSettings *settings, gdouble scale)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_scale$descriptor() {
        return gtk_print_settings_set_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_scale(GtkPrintSettings *settings, gdouble scale)
     * }
     */
    public static MethodHandle gtk_print_settings_set_scale$handle() {
        return gtk_print_settings_set_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_scale(GtkPrintSettings *settings, gdouble scale)
     * }
     */
    public static void gtk_print_settings_set_scale(MemorySegment settings, double scale) {
        var mh$ = gtk_print_settings_set_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_scale", settings, scale);
            }
            mh$.invokeExact(settings, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_print_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_print_pages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintPages gtk_print_settings_get_print_pages(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_print_pages$descriptor() {
        return gtk_print_settings_get_print_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintPages gtk_print_settings_get_print_pages(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_print_pages$handle() {
        return gtk_print_settings_get_print_pages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintPages gtk_print_settings_get_print_pages(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_print_pages(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_print_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_print_pages", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_print_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_print_pages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_print_pages(GtkPrintSettings *settings, GtkPrintPages pages)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_print_pages$descriptor() {
        return gtk_print_settings_set_print_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_print_pages(GtkPrintSettings *settings, GtkPrintPages pages)
     * }
     */
    public static MethodHandle gtk_print_settings_set_print_pages$handle() {
        return gtk_print_settings_set_print_pages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_print_pages(GtkPrintSettings *settings, GtkPrintPages pages)
     * }
     */
    public static void gtk_print_settings_set_print_pages(MemorySegment settings, int pages) {
        var mh$ = gtk_print_settings_set_print_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_print_pages", settings, pages);
            }
            mh$.invokeExact(settings, pages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_page_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_page_ranges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageRange *gtk_print_settings_get_page_ranges(GtkPrintSettings *settings, gint *num_ranges)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_page_ranges$descriptor() {
        return gtk_print_settings_get_page_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageRange *gtk_print_settings_get_page_ranges(GtkPrintSettings *settings, gint *num_ranges)
     * }
     */
    public static MethodHandle gtk_print_settings_get_page_ranges$handle() {
        return gtk_print_settings_get_page_ranges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageRange *gtk_print_settings_get_page_ranges(GtkPrintSettings *settings, gint *num_ranges)
     * }
     */
    public static MemorySegment gtk_print_settings_get_page_ranges(MemorySegment settings, MemorySegment num_ranges) {
        var mh$ = gtk_print_settings_get_page_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_page_ranges", settings, num_ranges);
            }
            return (MemorySegment)mh$.invokeExact(settings, num_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_page_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_page_ranges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_page_ranges(GtkPrintSettings *settings, GtkPageRange *page_ranges, gint num_ranges)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_page_ranges$descriptor() {
        return gtk_print_settings_set_page_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_page_ranges(GtkPrintSettings *settings, GtkPageRange *page_ranges, gint num_ranges)
     * }
     */
    public static MethodHandle gtk_print_settings_set_page_ranges$handle() {
        return gtk_print_settings_set_page_ranges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_page_ranges(GtkPrintSettings *settings, GtkPageRange *page_ranges, gint num_ranges)
     * }
     */
    public static void gtk_print_settings_set_page_ranges(MemorySegment settings, MemorySegment page_ranges, int num_ranges) {
        var mh$ = gtk_print_settings_set_page_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_page_ranges", settings, page_ranges, num_ranges);
            }
            mh$.invokeExact(settings, page_ranges, num_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_page_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_page_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSet gtk_print_settings_get_page_set(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_page_set$descriptor() {
        return gtk_print_settings_get_page_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSet gtk_print_settings_get_page_set(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_page_set$handle() {
        return gtk_print_settings_get_page_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSet gtk_print_settings_get_page_set(GtkPrintSettings *settings)
     * }
     */
    public static int gtk_print_settings_get_page_set(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_page_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_page_set", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_page_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_page_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_page_set(GtkPrintSettings *settings, GtkPageSet page_set)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_page_set$descriptor() {
        return gtk_print_settings_set_page_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_page_set(GtkPrintSettings *settings, GtkPageSet page_set)
     * }
     */
    public static MethodHandle gtk_print_settings_set_page_set$handle() {
        return gtk_print_settings_set_page_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_page_set(GtkPrintSettings *settings, GtkPageSet page_set)
     * }
     */
    public static void gtk_print_settings_set_page_set(MemorySegment settings, int page_set) {
        var mh$ = gtk_print_settings_set_page_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_page_set", settings, page_set);
            }
            mh$.invokeExact(settings, page_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_default_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_default_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_default_source(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_default_source$descriptor() {
        return gtk_print_settings_get_default_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_default_source(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_default_source$handle() {
        return gtk_print_settings_get_default_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_default_source(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_get_default_source(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_default_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_default_source", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_default_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_default_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_default_source(GtkPrintSettings *settings, const gchar *default_source)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_default_source$descriptor() {
        return gtk_print_settings_set_default_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_default_source(GtkPrintSettings *settings, const gchar *default_source)
     * }
     */
    public static MethodHandle gtk_print_settings_set_default_source$handle() {
        return gtk_print_settings_set_default_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_default_source(GtkPrintSettings *settings, const gchar *default_source)
     * }
     */
    public static void gtk_print_settings_set_default_source(MemorySegment settings, MemorySegment default_source) {
        var mh$ = gtk_print_settings_set_default_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_default_source", settings, default_source);
            }
            mh$.invokeExact(settings, default_source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_media_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_media_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_media_type(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_media_type$descriptor() {
        return gtk_print_settings_get_media_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_media_type(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_media_type$handle() {
        return gtk_print_settings_get_media_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_media_type(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_get_media_type(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_media_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_media_type", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_media_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_media_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_media_type(GtkPrintSettings *settings, const gchar *media_type)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_media_type$descriptor() {
        return gtk_print_settings_set_media_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_media_type(GtkPrintSettings *settings, const gchar *media_type)
     * }
     */
    public static MethodHandle gtk_print_settings_set_media_type$handle() {
        return gtk_print_settings_set_media_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_media_type(GtkPrintSettings *settings, const gchar *media_type)
     * }
     */
    public static void gtk_print_settings_set_media_type(MemorySegment settings, MemorySegment media_type) {
        var mh$ = gtk_print_settings_set_media_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_media_type", settings, media_type);
            }
            mh$.invokeExact(settings, media_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_dither {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_dither"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_dither(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_dither$descriptor() {
        return gtk_print_settings_get_dither.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_dither(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_dither$handle() {
        return gtk_print_settings_get_dither.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_dither(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_get_dither(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_dither.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_dither", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_dither {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_dither"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_dither(GtkPrintSettings *settings, const gchar *dither)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_dither$descriptor() {
        return gtk_print_settings_set_dither.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_dither(GtkPrintSettings *settings, const gchar *dither)
     * }
     */
    public static MethodHandle gtk_print_settings_set_dither$handle() {
        return gtk_print_settings_set_dither.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_dither(GtkPrintSettings *settings, const gchar *dither)
     * }
     */
    public static void gtk_print_settings_set_dither(MemorySegment settings, MemorySegment dither) {
        var mh$ = gtk_print_settings_set_dither.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_dither", settings, dither);
            }
            mh$.invokeExact(settings, dither);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_finishings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_finishings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_finishings(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_finishings$descriptor() {
        return gtk_print_settings_get_finishings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_finishings(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_finishings$handle() {
        return gtk_print_settings_get_finishings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_finishings(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_get_finishings(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_finishings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_finishings", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_finishings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_finishings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_finishings(GtkPrintSettings *settings, const gchar *finishings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_finishings$descriptor() {
        return gtk_print_settings_set_finishings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_finishings(GtkPrintSettings *settings, const gchar *finishings)
     * }
     */
    public static MethodHandle gtk_print_settings_set_finishings$handle() {
        return gtk_print_settings_set_finishings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_finishings(GtkPrintSettings *settings, const gchar *finishings)
     * }
     */
    public static void gtk_print_settings_set_finishings(MemorySegment settings, MemorySegment finishings) {
        var mh$ = gtk_print_settings_set_finishings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_finishings", settings, finishings);
            }
            mh$.invokeExact(settings, finishings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_get_output_bin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_get_output_bin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_output_bin(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_get_output_bin$descriptor() {
        return gtk_print_settings_get_output_bin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_output_bin(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_get_output_bin$handle() {
        return gtk_print_settings_get_output_bin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_print_settings_get_output_bin(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_get_output_bin(MemorySegment settings) {
        var mh$ = gtk_print_settings_get_output_bin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_get_output_bin", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_set_output_bin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_set_output_bin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_output_bin(GtkPrintSettings *settings, const gchar *output_bin)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_set_output_bin$descriptor() {
        return gtk_print_settings_set_output_bin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_output_bin(GtkPrintSettings *settings, const gchar *output_bin)
     * }
     */
    public static MethodHandle gtk_print_settings_set_output_bin$handle() {
        return gtk_print_settings_set_output_bin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_settings_set_output_bin(GtkPrintSettings *settings, const gchar *output_bin)
     * }
     */
    public static void gtk_print_settings_set_output_bin(MemorySegment settings, MemorySegment output_bin) {
        var mh$ = gtk_print_settings_set_output_bin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_set_output_bin", settings, output_bin);
            }
            mh$.invokeExact(settings, output_bin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_to_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_to_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *gtk_print_settings_to_gvariant(GtkPrintSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_to_gvariant$descriptor() {
        return gtk_print_settings_to_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *gtk_print_settings_to_gvariant(GtkPrintSettings *settings)
     * }
     */
    public static MethodHandle gtk_print_settings_to_gvariant$handle() {
        return gtk_print_settings_to_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *gtk_print_settings_to_gvariant(GtkPrintSettings *settings)
     * }
     */
    public static MemorySegment gtk_print_settings_to_gvariant(MemorySegment settings) {
        var mh$ = gtk_print_settings_to_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_to_gvariant", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_settings_new_from_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_settings_new_from_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_gvariant(GVariant *variant)
     * }
     */
    public static FunctionDescriptor gtk_print_settings_new_from_gvariant$descriptor() {
        return gtk_print_settings_new_from_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MethodHandle gtk_print_settings_new_from_gvariant$handle() {
        return gtk_print_settings_new_from_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintSettings *gtk_print_settings_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MemorySegment gtk_print_settings_new_from_gvariant(MemorySegment variant) {
        var mh$ = gtk_print_settings_new_from_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_settings_new_from_gvariant", variant);
            }
            return (MemorySegment)mh$.invokeExact(variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_preview_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_preview_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_preview_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_operation_preview_get_type$descriptor() {
        return gtk_print_operation_preview_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_preview_get_type()
     * }
     */
    public static MethodHandle gtk_print_operation_preview_get_type$handle() {
        return gtk_print_operation_preview_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_operation_preview_get_type()
     * }
     */
    public static long gtk_print_operation_preview_get_type() {
        var mh$ = gtk_print_operation_preview_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_preview_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_preview_render_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_preview_render_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_preview_render_page(GtkPrintOperationPreview *preview, gint page_nr)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_preview_render_page$descriptor() {
        return gtk_print_operation_preview_render_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_preview_render_page(GtkPrintOperationPreview *preview, gint page_nr)
     * }
     */
    public static MethodHandle gtk_print_operation_preview_render_page$handle() {
        return gtk_print_operation_preview_render_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_preview_render_page(GtkPrintOperationPreview *preview, gint page_nr)
     * }
     */
    public static void gtk_print_operation_preview_render_page(MemorySegment preview, int page_nr) {
        var mh$ = gtk_print_operation_preview_render_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_preview_render_page", preview, page_nr);
            }
            mh$.invokeExact(preview, page_nr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_preview_end_preview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_preview_end_preview"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_preview_end_preview(GtkPrintOperationPreview *preview)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_preview_end_preview$descriptor() {
        return gtk_print_operation_preview_end_preview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_preview_end_preview(GtkPrintOperationPreview *preview)
     * }
     */
    public static MethodHandle gtk_print_operation_preview_end_preview$handle() {
        return gtk_print_operation_preview_end_preview.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_preview_end_preview(GtkPrintOperationPreview *preview)
     * }
     */
    public static void gtk_print_operation_preview_end_preview(MemorySegment preview) {
        var mh$ = gtk_print_operation_preview_end_preview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_preview_end_preview", preview);
            }
            mh$.invokeExact(preview);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_preview_is_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_preview_is_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_preview_is_selected(GtkPrintOperationPreview *preview, gint page_nr)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_preview_is_selected$descriptor() {
        return gtk_print_operation_preview_is_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_preview_is_selected(GtkPrintOperationPreview *preview, gint page_nr)
     * }
     */
    public static MethodHandle gtk_print_operation_preview_is_selected$handle() {
        return gtk_print_operation_preview_is_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_print_operation_preview_is_selected(GtkPrintOperationPreview *preview, gint page_nr)
     * }
     */
    public static int gtk_print_operation_preview_is_selected(MemorySegment preview, int page_nr) {
        var mh$ = gtk_print_operation_preview_is_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_preview_is_selected", preview, page_nr);
            }
            return (int)mh$.invokeExact(preview, page_nr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_PRINT_STATUS_INITIAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_INITIAL = 0
     * }
     */
    public static int GTK_PRINT_STATUS_INITIAL() {
        return GTK_PRINT_STATUS_INITIAL;
    }
    private static final int GTK_PRINT_STATUS_PREPARING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_PREPARING = 1
     * }
     */
    public static int GTK_PRINT_STATUS_PREPARING() {
        return GTK_PRINT_STATUS_PREPARING;
    }
    private static final int GTK_PRINT_STATUS_GENERATING_DATA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_GENERATING_DATA = 2
     * }
     */
    public static int GTK_PRINT_STATUS_GENERATING_DATA() {
        return GTK_PRINT_STATUS_GENERATING_DATA;
    }
    private static final int GTK_PRINT_STATUS_SENDING_DATA = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_SENDING_DATA = 3
     * }
     */
    public static int GTK_PRINT_STATUS_SENDING_DATA() {
        return GTK_PRINT_STATUS_SENDING_DATA;
    }
    private static final int GTK_PRINT_STATUS_PENDING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_PENDING = 4
     * }
     */
    public static int GTK_PRINT_STATUS_PENDING() {
        return GTK_PRINT_STATUS_PENDING;
    }
    private static final int GTK_PRINT_STATUS_PENDING_ISSUE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_PENDING_ISSUE = 5
     * }
     */
    public static int GTK_PRINT_STATUS_PENDING_ISSUE() {
        return GTK_PRINT_STATUS_PENDING_ISSUE;
    }
    private static final int GTK_PRINT_STATUS_PRINTING = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_PRINTING = 6
     * }
     */
    public static int GTK_PRINT_STATUS_PRINTING() {
        return GTK_PRINT_STATUS_PRINTING;
    }
    private static final int GTK_PRINT_STATUS_FINISHED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_FINISHED = 7
     * }
     */
    public static int GTK_PRINT_STATUS_FINISHED() {
        return GTK_PRINT_STATUS_FINISHED;
    }
    private static final int GTK_PRINT_STATUS_FINISHED_ABORTED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_STATUS_FINISHED_ABORTED = 8
     * }
     */
    public static int GTK_PRINT_STATUS_FINISHED_ABORTED() {
        return GTK_PRINT_STATUS_FINISHED_ABORTED;
    }
    private static final int GTK_PRINT_OPERATION_RESULT_ERROR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_RESULT_ERROR = 0
     * }
     */
    public static int GTK_PRINT_OPERATION_RESULT_ERROR() {
        return GTK_PRINT_OPERATION_RESULT_ERROR;
    }
    private static final int GTK_PRINT_OPERATION_RESULT_APPLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_RESULT_APPLY = 1
     * }
     */
    public static int GTK_PRINT_OPERATION_RESULT_APPLY() {
        return GTK_PRINT_OPERATION_RESULT_APPLY;
    }
    private static final int GTK_PRINT_OPERATION_RESULT_CANCEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_RESULT_CANCEL = 2
     * }
     */
    public static int GTK_PRINT_OPERATION_RESULT_CANCEL() {
        return GTK_PRINT_OPERATION_RESULT_CANCEL;
    }
    private static final int GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = 3
     * }
     */
    public static int GTK_PRINT_OPERATION_RESULT_IN_PROGRESS() {
        return GTK_PRINT_OPERATION_RESULT_IN_PROGRESS;
    }
    private static final int GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = 0
     * }
     */
    public static int GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG() {
        return GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG;
    }
    private static final int GTK_PRINT_OPERATION_ACTION_PRINT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_ACTION_PRINT = 1
     * }
     */
    public static int GTK_PRINT_OPERATION_ACTION_PRINT() {
        return GTK_PRINT_OPERATION_ACTION_PRINT;
    }
    private static final int GTK_PRINT_OPERATION_ACTION_PREVIEW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_ACTION_PREVIEW = 2
     * }
     */
    public static int GTK_PRINT_OPERATION_ACTION_PREVIEW() {
        return GTK_PRINT_OPERATION_ACTION_PREVIEW;
    }
    private static final int GTK_PRINT_OPERATION_ACTION_EXPORT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_OPERATION_ACTION_EXPORT = 3
     * }
     */
    public static int GTK_PRINT_OPERATION_ACTION_EXPORT() {
        return GTK_PRINT_OPERATION_ACTION_EXPORT;
    }
    private static final int GTK_PRINT_ERROR_GENERAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_ERROR_GENERAL = 0
     * }
     */
    public static int GTK_PRINT_ERROR_GENERAL() {
        return GTK_PRINT_ERROR_GENERAL;
    }
    private static final int GTK_PRINT_ERROR_INTERNAL_ERROR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_ERROR_INTERNAL_ERROR = 1
     * }
     */
    public static int GTK_PRINT_ERROR_INTERNAL_ERROR() {
        return GTK_PRINT_ERROR_INTERNAL_ERROR;
    }
    private static final int GTK_PRINT_ERROR_NOMEM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_ERROR_NOMEM = 2
     * }
     */
    public static int GTK_PRINT_ERROR_NOMEM() {
        return GTK_PRINT_ERROR_NOMEM;
    }
    private static final int GTK_PRINT_ERROR_INVALID_FILE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_ERROR_INVALID_FILE = 3
     * }
     */
    public static int GTK_PRINT_ERROR_INVALID_FILE() {
        return GTK_PRINT_ERROR_INVALID_FILE;
    }

    private static class gtk_print_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gtk_print_error_quark()
     * }
     */
    public static FunctionDescriptor gtk_print_error_quark$descriptor() {
        return gtk_print_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gtk_print_error_quark()
     * }
     */
    public static MethodHandle gtk_print_error_quark$handle() {
        return gtk_print_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gtk_print_error_quark()
     * }
     */
    public static int gtk_print_error_quark() {
        var mh$ = gtk_print_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_get_type()
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_type$descriptor() {
        return gtk_print_operation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_print_operation_get_type()
     * }
     */
    public static MethodHandle gtk_print_operation_get_type$handle() {
        return gtk_print_operation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_print_operation_get_type()
     * }
     */
    public static long gtk_print_operation_get_type() {
        var mh$ = gtk_print_operation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPrintOperation *gtk_print_operation_new()
     * }
     */
    public static FunctionDescriptor gtk_print_operation_new$descriptor() {
        return gtk_print_operation_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPrintOperation *gtk_print_operation_new()
     * }
     */
    public static MethodHandle gtk_print_operation_new$handle() {
        return gtk_print_operation_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPrintOperation *gtk_print_operation_new()
     * }
     */
    public static MemorySegment gtk_print_operation_new() {
        var mh$ = gtk_print_operation_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_set_default_page_setup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_set_default_page_setup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_default_page_setup(GtkPrintOperation *op, GtkPageSetup *default_page_setup)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_set_default_page_setup$descriptor() {
        return gtk_print_operation_set_default_page_setup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_default_page_setup(GtkPrintOperation *op, GtkPageSetup *default_page_setup)
     * }
     */
    public static MethodHandle gtk_print_operation_set_default_page_setup$handle() {
        return gtk_print_operation_set_default_page_setup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_print_operation_set_default_page_setup(GtkPrintOperation *op, GtkPageSetup *default_page_setup)
     * }
     */
    public static void gtk_print_operation_set_default_page_setup(MemorySegment op, MemorySegment default_page_setup) {
        var mh$ = gtk_print_operation_set_default_page_setup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_set_default_page_setup", op, default_page_setup);
            }
            mh$.invokeExact(op, default_page_setup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_print_operation_get_default_page_setup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_print_operation_get_default_page_setup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_operation_get_default_page_setup(GtkPrintOperation *op)
     * }
     */
    public static FunctionDescriptor gtk_print_operation_get_default_page_setup$descriptor() {
        return gtk_print_operation_get_default_page_setup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_operation_get_default_page_setup(GtkPrintOperation *op)
     * }
     */
    public static MethodHandle gtk_print_operation_get_default_page_setup$handle() {
        return gtk_print_operation_get_default_page_setup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPageSetup *gtk_print_operation_get_default_page_setup(GtkPrintOperation *op)
     * }
     */
    public static MemorySegment gtk_print_operation_get_default_page_setup(MemorySegment op) {
        var mh$ = gtk_print_operation_get_default_page_setup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_print_operation_get_default_page_setup", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

