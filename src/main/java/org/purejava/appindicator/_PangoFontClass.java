// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _PangoFontClass {
 *     struct _GObjectClass parent_class;
 *     struct _PangoFontDescription* (*describe)(struct _PangoFont*);
 *     struct _PangoCoverage* (*get_coverage)(struct _PangoFont*,struct _PangoLanguage*);
 *     void (*get_glyph_extents)(struct _PangoFont*,unsigned int,struct _PangoRectangle*,struct _PangoRectangle*);
 *     struct _PangoFontMetrics* (*get_metrics)(struct _PangoFont*,struct _PangoLanguage*);
 *     struct _PangoFontMap* (*get_font_map)(struct _PangoFont*);
 *     struct _PangoFontDescription* (*describe_absolute)(struct _PangoFont*);
 *     void (*get_features)(struct _PangoFont*,struct hb_feature_t*,unsigned int,unsigned int*);
 *     struct hb_font_t* (*create_hb_font)(struct _PangoFont*);
 * };
 * }
 */
public class _PangoFontClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1559.const$1;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * struct _PangoFontDescription* (*describe)(struct _PangoFont*);
     * }
     */
    public interface describe {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(describe fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1559.const$2, fi, constants$5.const$2, scope);
        }
        static describe ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle describe$VH() {
        return constants$1559.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontDescription* (*describe)(struct _PangoFont*);
     * }
     */
    public static MemorySegment describe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1559.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontDescription* (*describe)(struct _PangoFont*);
     * }
     */
    public static void describe$set(MemorySegment seg, MemorySegment x) {
        constants$1559.const$3.set(seg, x);
    }
    public static MemorySegment describe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1559.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void describe$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1559.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static describe describe(MemorySegment segment, Arena scope) {
        return describe.ofAddress(describe$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoCoverage* (*get_coverage)(struct _PangoFont*,struct _PangoLanguage*);
     * }
     */
    public interface get_coverage {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_coverage fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1559.const$4, fi, constants$5.const$5, scope);
        }
        static get_coverage ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_coverage$VH() {
        return constants$1559.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoCoverage* (*get_coverage)(struct _PangoFont*,struct _PangoLanguage*);
     * }
     */
    public static MemorySegment get_coverage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1559.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoCoverage* (*get_coverage)(struct _PangoFont*,struct _PangoLanguage*);
     * }
     */
    public static void get_coverage$set(MemorySegment seg, MemorySegment x) {
        constants$1559.const$5.set(seg, x);
    }
    public static MemorySegment get_coverage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1559.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_coverage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1559.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_coverage get_coverage(MemorySegment segment, Arena scope) {
        return get_coverage.ofAddress(get_coverage$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_glyph_extents)(struct _PangoFont*,unsigned int,struct _PangoRectangle*,struct _PangoRectangle*);
     * }
     */
    public interface get_glyph_extents {

        void apply(java.lang.foreign.MemorySegment object, int property_id, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment pspec);
        static MemorySegment allocate(get_glyph_extents fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1560.const$0, fi, constants$179.const$1, scope);
        }
        static get_glyph_extents ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _object, int _property_id, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _pspec) -> {
                try {
                    constants$373.const$3.invokeExact(symbol, _object, _property_id, _value, _pspec);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_glyph_extents$VH() {
        return constants$1560.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_glyph_extents)(struct _PangoFont*,unsigned int,struct _PangoRectangle*,struct _PangoRectangle*);
     * }
     */
    public static MemorySegment get_glyph_extents$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1560.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_glyph_extents)(struct _PangoFont*,unsigned int,struct _PangoRectangle*,struct _PangoRectangle*);
     * }
     */
    public static void get_glyph_extents$set(MemorySegment seg, MemorySegment x) {
        constants$1560.const$1.set(seg, x);
    }
    public static MemorySegment get_glyph_extents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1560.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_glyph_extents$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1560.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_glyph_extents get_glyph_extents(MemorySegment segment, Arena scope) {
        return get_glyph_extents.ofAddress(get_glyph_extents$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontMetrics* (*get_metrics)(struct _PangoFont*,struct _PangoLanguage*);
     * }
     */
    public interface get_metrics {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_metrics fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1560.const$2, fi, constants$5.const$5, scope);
        }
        static get_metrics ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_metrics$VH() {
        return constants$1560.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontMetrics* (*get_metrics)(struct _PangoFont*,struct _PangoLanguage*);
     * }
     */
    public static MemorySegment get_metrics$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1560.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontMetrics* (*get_metrics)(struct _PangoFont*,struct _PangoLanguage*);
     * }
     */
    public static void get_metrics$set(MemorySegment seg, MemorySegment x) {
        constants$1560.const$3.set(seg, x);
    }
    public static MemorySegment get_metrics$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1560.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_metrics$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1560.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_metrics get_metrics(MemorySegment segment, Arena scope) {
        return get_metrics.ofAddress(get_metrics$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontMap* (*get_font_map)(struct _PangoFont*);
     * }
     */
    public interface get_font_map {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_font_map fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1560.const$4, fi, constants$5.const$2, scope);
        }
        static get_font_map ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_font_map$VH() {
        return constants$1560.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontMap* (*get_font_map)(struct _PangoFont*);
     * }
     */
    public static MemorySegment get_font_map$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1560.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontMap* (*get_font_map)(struct _PangoFont*);
     * }
     */
    public static void get_font_map$set(MemorySegment seg, MemorySegment x) {
        constants$1560.const$5.set(seg, x);
    }
    public static MemorySegment get_font_map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1560.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_map$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1560.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_map get_font_map(MemorySegment segment, Arena scope) {
        return get_font_map.ofAddress(get_font_map$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontDescription* (*describe_absolute)(struct _PangoFont*);
     * }
     */
    public interface describe_absolute {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(describe_absolute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1561.const$0, fi, constants$5.const$2, scope);
        }
        static describe_absolute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle describe_absolute$VH() {
        return constants$1561.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontDescription* (*describe_absolute)(struct _PangoFont*);
     * }
     */
    public static MemorySegment describe_absolute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1561.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontDescription* (*describe_absolute)(struct _PangoFont*);
     * }
     */
    public static void describe_absolute$set(MemorySegment seg, MemorySegment x) {
        constants$1561.const$1.set(seg, x);
    }
    public static MemorySegment describe_absolute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1561.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void describe_absolute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1561.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static describe_absolute describe_absolute(MemorySegment segment, Arena scope) {
        return describe_absolute.ofAddress(describe_absolute$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_features)(struct _PangoFont*,struct hb_feature_t*,unsigned int,unsigned int*);
     * }
     */
    public interface get_features {

        void apply(java.lang.foreign.MemorySegment clipboard, java.lang.foreign.MemorySegment selection_data, int info, java.lang.foreign.MemorySegment user_data_or_owner);
        static MemorySegment allocate(get_features fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1561.const$2, fi, constants$466.const$3, scope);
        }
        static get_features ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _clipboard, java.lang.foreign.MemorySegment _selection_data, int _info, java.lang.foreign.MemorySegment _user_data_or_owner) -> {
                try {
                    constants$740.const$3.invokeExact(symbol, _clipboard, _selection_data, _info, _user_data_or_owner);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_features$VH() {
        return constants$1561.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_features)(struct _PangoFont*,struct hb_feature_t*,unsigned int,unsigned int*);
     * }
     */
    public static MemorySegment get_features$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1561.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_features)(struct _PangoFont*,struct hb_feature_t*,unsigned int,unsigned int*);
     * }
     */
    public static void get_features$set(MemorySegment seg, MemorySegment x) {
        constants$1561.const$3.set(seg, x);
    }
    public static MemorySegment get_features$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1561.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_features$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1561.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_features get_features(MemorySegment segment, Arena scope) {
        return get_features.ofAddress(get_features$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct hb_font_t* (*create_hb_font)(struct _PangoFont*);
     * }
     */
    public interface create_hb_font {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_hb_font fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1561.const$4, fi, constants$5.const$2, scope);
        }
        static create_hb_font ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_hb_font$VH() {
        return constants$1561.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct hb_font_t* (*create_hb_font)(struct _PangoFont*);
     * }
     */
    public static MemorySegment create_hb_font$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1561.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct hb_font_t* (*create_hb_font)(struct _PangoFont*);
     * }
     */
    public static void create_hb_font$set(MemorySegment seg, MemorySegment x) {
        constants$1561.const$5.set(seg, x);
    }
    public static MemorySegment create_hb_font$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1561.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void create_hb_font$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1561.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_hb_font create_hb_font(MemorySegment segment, Arena scope) {
        return create_hb_font.ofAddress(create_hb_font$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


