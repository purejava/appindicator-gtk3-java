// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct _GObject {
 *     GTypeInstance g_type_instance;
 *     guint ref_count;
 *     GData *qdata;
 * }
 * }
 */
public class _GObject {

    _GObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInstance.layout().withName("g_type_instance"),
        app_indicator_h.C_INT.withName("ref_count"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("qdata")
    ).withName("_GObject");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout g_type_instance$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("g_type_instance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInstance g_type_instance
     * }
     */
    public static final GroupLayout g_type_instance$layout() {
        return g_type_instance$LAYOUT;
    }

    private static final long g_type_instance$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInstance g_type_instance
     * }
     */
    public static final long g_type_instance$offset() {
        return g_type_instance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInstance g_type_instance
     * }
     */
    public static MemorySegment g_type_instance(MemorySegment struct) {
        return struct.asSlice(g_type_instance$OFFSET, g_type_instance$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInstance g_type_instance
     * }
     */
    public static void g_type_instance(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, g_type_instance$OFFSET, g_type_instance$LAYOUT.byteSize());
    }

    private static final OfInt ref_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ref_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint ref_count
     * }
     */
    public static final OfInt ref_count$layout() {
        return ref_count$LAYOUT;
    }

    private static final long ref_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint ref_count
     * }
     */
    public static final long ref_count$offset() {
        return ref_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint ref_count
     * }
     */
    public static int ref_count(MemorySegment struct) {
        return struct.get(ref_count$LAYOUT, ref_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint ref_count
     * }
     */
    public static void ref_count(MemorySegment struct, int fieldValue) {
        struct.set(ref_count$LAYOUT, ref_count$OFFSET, fieldValue);
    }

    private static final AddressLayout qdata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("qdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GData *qdata
     * }
     */
    public static final AddressLayout qdata$layout() {
        return qdata$LAYOUT;
    }

    private static final long qdata$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GData *qdata
     * }
     */
    public static final long qdata$offset() {
        return qdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GData *qdata
     * }
     */
    public static MemorySegment qdata(MemorySegment struct) {
        return struct.get(qdata$LAYOUT, qdata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GData *qdata
     * }
     */
    public static void qdata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(qdata$LAYOUT, qdata$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

