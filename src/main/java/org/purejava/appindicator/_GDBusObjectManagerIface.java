// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GDBusObjectManagerIface {
 *     struct _GTypeInterface parent_iface;
 *     char* (*get_object_path)(struct _GDBusObjectManager*);
 *     struct _GList* (*get_objects)(struct _GDBusObjectManager*);
 *     struct _GDBusObject* (*get_object)(struct _GDBusObjectManager*,char*);
 *     struct _GDBusInterface* (*get_interface)(struct _GDBusObjectManager*,char*,char*);
 *     void (*object_added)(struct _GDBusObjectManager*,struct _GDBusObject*);
 *     void (*object_removed)(struct _GDBusObjectManager*,struct _GDBusObject*);
 *     void (*interface_added)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
 *     void (*interface_removed)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
 * };
 * }
 */
public class _GDBusObjectManagerIface {

    public static MemoryLayout $LAYOUT() {
        return constants$911.const$5;
    }
    public static MemorySegment parent_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * char* (*get_object_path)(struct _GDBusObjectManager*);
     * }
     */
    public interface get_object_path {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_object_path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$912.const$0, fi, constants$5.const$2, scope);
        }
        static get_object_path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_object_path$VH() {
        return constants$912.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_object_path)(struct _GDBusObjectManager*);
     * }
     */
    public static MemorySegment get_object_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$912.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_object_path)(struct _GDBusObjectManager*);
     * }
     */
    public static void get_object_path$set(MemorySegment seg, MemorySegment x) {
        constants$912.const$1.set(seg, x);
    }
    public static MemorySegment get_object_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$912.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object_path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$912.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object_path get_object_path(MemorySegment segment, Arena scope) {
        return get_object_path.ofAddress(get_object_path$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*get_objects)(struct _GDBusObjectManager*);
     * }
     */
    public interface get_objects {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_objects fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$912.const$2, fi, constants$5.const$2, scope);
        }
        static get_objects ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_objects$VH() {
        return constants$912.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*get_objects)(struct _GDBusObjectManager*);
     * }
     */
    public static MemorySegment get_objects$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$912.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*get_objects)(struct _GDBusObjectManager*);
     * }
     */
    public static void get_objects$set(MemorySegment seg, MemorySegment x) {
        constants$912.const$3.set(seg, x);
    }
    public static MemorySegment get_objects$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$912.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_objects$set(MemorySegment seg, long index, MemorySegment x) {
        constants$912.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_objects get_objects(MemorySegment segment, Arena scope) {
        return get_objects.ofAddress(get_objects$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GDBusObject* (*get_object)(struct _GDBusObjectManager*,char*);
     * }
     */
    public interface get_object {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_object fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$912.const$4, fi, constants$5.const$5, scope);
        }
        static get_object ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_object$VH() {
        return constants$912.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GDBusObject* (*get_object)(struct _GDBusObjectManager*,char*);
     * }
     */
    public static MemorySegment get_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$912.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GDBusObject* (*get_object)(struct _GDBusObjectManager*,char*);
     * }
     */
    public static void get_object$set(MemorySegment seg, MemorySegment x) {
        constants$912.const$5.set(seg, x);
    }
    public static MemorySegment get_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$912.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object$set(MemorySegment seg, long index, MemorySegment x) {
        constants$912.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object get_object(MemorySegment segment, Arena scope) {
        return get_object.ofAddress(get_object$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GDBusInterface* (*get_interface)(struct _GDBusObjectManager*,char*,char*);
     * }
     */
    public interface get_interface {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_interface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$913.const$0, fi, constants$23.const$0, scope);
        }
        static get_interface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$732.const$0.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_interface$VH() {
        return constants$913.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GDBusInterface* (*get_interface)(struct _GDBusObjectManager*,char*,char*);
     * }
     */
    public static MemorySegment get_interface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$913.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GDBusInterface* (*get_interface)(struct _GDBusObjectManager*,char*,char*);
     * }
     */
    public static void get_interface$set(MemorySegment seg, MemorySegment x) {
        constants$913.const$1.set(seg, x);
    }
    public static MemorySegment get_interface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$913.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_interface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$913.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_interface get_interface(MemorySegment segment, Arena scope) {
        return get_interface.ofAddress(get_interface$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*object_added)(struct _GDBusObjectManager*,struct _GDBusObject*);
     * }
     */
    public interface object_added {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(object_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$913.const$2, fi, constants$13.const$4, scope);
        }
        static object_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle object_added$VH() {
        return constants$913.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*object_added)(struct _GDBusObjectManager*,struct _GDBusObject*);
     * }
     */
    public static MemorySegment object_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$913.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*object_added)(struct _GDBusObjectManager*,struct _GDBusObject*);
     * }
     */
    public static void object_added$set(MemorySegment seg, MemorySegment x) {
        constants$913.const$3.set(seg, x);
    }
    public static MemorySegment object_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$913.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void object_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$913.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static object_added object_added(MemorySegment segment, Arena scope) {
        return object_added.ofAddress(object_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*object_removed)(struct _GDBusObjectManager*,struct _GDBusObject*);
     * }
     */
    public interface object_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(object_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$913.const$4, fi, constants$13.const$4, scope);
        }
        static object_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle object_removed$VH() {
        return constants$913.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*object_removed)(struct _GDBusObjectManager*,struct _GDBusObject*);
     * }
     */
    public static MemorySegment object_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$913.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*object_removed)(struct _GDBusObjectManager*,struct _GDBusObject*);
     * }
     */
    public static void object_removed$set(MemorySegment seg, MemorySegment x) {
        constants$913.const$5.set(seg, x);
    }
    public static MemorySegment object_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$913.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void object_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$913.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static object_removed object_removed(MemorySegment segment, Arena scope) {
        return object_removed.ofAddress(object_removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*interface_added)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
     * }
     */
    public interface interface_added {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(interface_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$914.const$0, fi, constants$14.const$3, scope);
        }
        static interface_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle interface_added$VH() {
        return constants$914.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*interface_added)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
     * }
     */
    public static MemorySegment interface_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$914.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*interface_added)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
     * }
     */
    public static void interface_added$set(MemorySegment seg, MemorySegment x) {
        constants$914.const$1.set(seg, x);
    }
    public static MemorySegment interface_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$914.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$914.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static interface_added interface_added(MemorySegment segment, Arena scope) {
        return interface_added.ofAddress(interface_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*interface_removed)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
     * }
     */
    public interface interface_removed {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(interface_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$914.const$2, fi, constants$14.const$3, scope);
        }
        static interface_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle interface_removed$VH() {
        return constants$914.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*interface_removed)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
     * }
     */
    public static MemorySegment interface_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$914.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*interface_removed)(struct _GDBusObjectManager*,struct _GDBusObject*,struct _GDBusInterface*);
     * }
     */
    public static void interface_removed$set(MemorySegment seg, MemorySegment x) {
        constants$914.const$3.set(seg, x);
    }
    public static MemorySegment interface_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$914.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$914.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static interface_removed interface_removed(MemorySegment segment, Arena scope) {
        return interface_removed.ofAddress(interface_removed$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


