// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GVariantDict {
 *     union  u;
 * };
 * }
 */
public class _GVariantDict {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("asv"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("partial_magic"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_LONG_LONG$LAYOUT).withName("y")
            ).withName("s"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_LONG_LONG$LAYOUT).withName("x")
        ).withName("u")
    ).withName("_GVariantDict");
    public static MemoryLayout $LAYOUT() {
        return _GVariantDict.$struct$LAYOUT;
    }
    /**
     * {@snippet :
     * union {
     *     struct  s;
     *     gsize x[16];
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        static final UnionLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("asv"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("partial_magic"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_LONG_LONG$LAYOUT).withName("y")
            ).withName("s"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_LONG_LONG$LAYOUT).withName("x")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        /**
         * {@snippet :
         * struct {
         *     GVariant* asv;
         *     gsize partial_magic;
         *     gsize y[14];
         * };
         * }
         */
        public static final class s {

            // Suppresses default constructor, ensuring non-instantiability.
            private s() {}
            static final StructLayout u$s$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("asv"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("partial_magic"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_LONG_LONG$LAYOUT).withName("y")
            );
            public static MemoryLayout $LAYOUT() {
                return s.u$s$struct$LAYOUT;
            }
            static final VarHandle asv$VH = u$s$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("asv"));
            public static VarHandle asv$VH() {
                return s.asv$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * GVariant* asv;
             * }
             */
            public static MemorySegment asv$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)s.asv$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * GVariant* asv;
             * }
             */
            public static void asv$set(MemorySegment seg, MemorySegment x) {
                s.asv$VH.set(seg, x);
            }
            public static MemorySegment asv$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)s.asv$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void asv$set(MemorySegment seg, long index, MemorySegment x) {
                s.asv$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle partial_magic$VH = u$s$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("partial_magic"));
            public static VarHandle partial_magic$VH() {
                return s.partial_magic$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * gsize partial_magic;
             * }
             */
            public static long partial_magic$get(MemorySegment seg) {
                return (long)s.partial_magic$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * gsize partial_magic;
             * }
             */
            public static void partial_magic$set(MemorySegment seg, long x) {
                s.partial_magic$VH.set(seg, x);
            }
            public static long partial_magic$get(MemorySegment seg, long index) {
                return (long)s.partial_magic$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void partial_magic$set(MemorySegment seg, long index, long x) {
                s.partial_magic$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment y$slice(MemorySegment seg) {
                return seg.asSlice(16, 112);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment s$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        public static MemorySegment x$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


