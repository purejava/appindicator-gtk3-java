// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GNativeVolumeMonitorClass {
 *     struct _GVolumeMonitorClass parent_class;
 *     struct _GMount* (*get_mount_for_mount_path)(char*,struct _GCancellable*);
 * };
 * }
 */
public class _GNativeVolumeMonitorClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1198.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 336);
    }
    /**
     * {@snippet :
 * struct _GMount* (*get_mount_for_mount_path)(char*,struct _GCancellable*);
     * }
     */
    public interface get_mount_for_mount_path {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_mount_for_mount_path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1198.const$3, fi, constants$5.const$5, scope);
        }
        static get_mount_for_mount_path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_mount_for_mount_path$VH() {
        return constants$1198.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GMount* (*get_mount_for_mount_path)(char*,struct _GCancellable*);
     * }
     */
    public static MemorySegment get_mount_for_mount_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1198.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GMount* (*get_mount_for_mount_path)(char*,struct _GCancellable*);
     * }
     */
    public static void get_mount_for_mount_path$set(MemorySegment seg, MemorySegment x) {
        constants$1198.const$4.set(seg, x);
    }
    public static MemorySegment get_mount_for_mount_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1198.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mount_for_mount_path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1198.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mount_for_mount_path get_mount_for_mount_path(MemorySegment segment, Arena scope) {
        return get_mount_for_mount_path.ofAddress(get_mount_for_mount_path$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


