// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GThreadPool {
 *     GFunc func;
 *     gpointer user_data;
 *     gboolean exclusive;
 * }
 * }
 */
public class _GThreadPool {

    _GThreadPool() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("func"),
        app_indicator_h.C_POINTER.withName("user_data"),
        app_indicator_h.C_INT.withName("exclusive"),
        MemoryLayout.paddingLayout(4)
    ).withName("_GThreadPool");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout func$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GFunc func
     * }
     */
    public static final AddressLayout func$layout() {
        return func$LAYOUT;
    }

    private static final long func$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GFunc func
     * }
     */
    public static final long func$offset() {
        return func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GFunc func
     * }
     */
    public static MemorySegment func(MemorySegment struct) {
        return struct.get(func$LAYOUT, func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GFunc func
     * }
     */
    public static void func(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func$LAYOUT, func$OFFSET, fieldValue);
    }

    private static final AddressLayout user_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("user_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer user_data
     * }
     */
    public static final AddressLayout user_data$layout() {
        return user_data$LAYOUT;
    }

    private static final long user_data$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer user_data
     * }
     */
    public static final long user_data$offset() {
        return user_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer user_data
     * }
     */
    public static MemorySegment user_data(MemorySegment struct) {
        return struct.get(user_data$LAYOUT, user_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer user_data
     * }
     */
    public static void user_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(user_data$LAYOUT, user_data$OFFSET, fieldValue);
    }

    private static final OfInt exclusive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exclusive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean exclusive
     * }
     */
    public static final OfInt exclusive$layout() {
        return exclusive$LAYOUT;
    }

    private static final long exclusive$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean exclusive
     * }
     */
    public static final long exclusive$offset() {
        return exclusive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean exclusive
     * }
     */
    public static int exclusive(MemorySegment struct) {
        return struct.get(exclusive$LAYOUT, exclusive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean exclusive
     * }
     */
    public static void exclusive(MemorySegment struct, int fieldValue) {
        struct.set(exclusive$LAYOUT, exclusive$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

