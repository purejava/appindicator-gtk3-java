// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PangoGlyphItemIter {
 *     PangoGlyphItem *glyph_item;
 *     const gchar *text;
 *     int start_glyph;
 *     int start_index;
 *     int start_char;
 *     int end_glyph;
 *     int end_index;
 *     int end_char;
 * }
 * }
 */
public class _PangoGlyphItemIter {

    _PangoGlyphItemIter() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("glyph_item"),
        app_indicator_h.C_POINTER.withName("text"),
        app_indicator_h.C_INT.withName("start_glyph"),
        app_indicator_h.C_INT.withName("start_index"),
        app_indicator_h.C_INT.withName("start_char"),
        app_indicator_h.C_INT.withName("end_glyph"),
        app_indicator_h.C_INT.withName("end_index"),
        app_indicator_h.C_INT.withName("end_char")
    ).withName("_PangoGlyphItemIter");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout glyph_item$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("glyph_item"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoGlyphItem *glyph_item
     * }
     */
    public static final AddressLayout glyph_item$layout() {
        return glyph_item$LAYOUT;
    }

    private static final long glyph_item$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoGlyphItem *glyph_item
     * }
     */
    public static final long glyph_item$offset() {
        return glyph_item$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoGlyphItem *glyph_item
     * }
     */
    public static MemorySegment glyph_item(MemorySegment struct) {
        return struct.get(glyph_item$LAYOUT, glyph_item$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoGlyphItem *glyph_item
     * }
     */
    public static void glyph_item(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(glyph_item$LAYOUT, glyph_item$OFFSET, fieldValue);
    }

    private static final AddressLayout text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *text
     * }
     */
    public static final AddressLayout text$layout() {
        return text$LAYOUT;
    }

    private static final long text$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *text
     * }
     */
    public static final long text$offset() {
        return text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *text
     * }
     */
    public static MemorySegment text(MemorySegment struct) {
        return struct.get(text$LAYOUT, text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *text
     * }
     */
    public static void text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(text$LAYOUT, text$OFFSET, fieldValue);
    }

    private static final OfInt start_glyph$LAYOUT = (OfInt)$LAYOUT.select(groupElement("start_glyph"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int start_glyph
     * }
     */
    public static final OfInt start_glyph$layout() {
        return start_glyph$LAYOUT;
    }

    private static final long start_glyph$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int start_glyph
     * }
     */
    public static final long start_glyph$offset() {
        return start_glyph$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int start_glyph
     * }
     */
    public static int start_glyph(MemorySegment struct) {
        return struct.get(start_glyph$LAYOUT, start_glyph$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int start_glyph
     * }
     */
    public static void start_glyph(MemorySegment struct, int fieldValue) {
        struct.set(start_glyph$LAYOUT, start_glyph$OFFSET, fieldValue);
    }

    private static final OfInt start_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("start_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int start_index
     * }
     */
    public static final OfInt start_index$layout() {
        return start_index$LAYOUT;
    }

    private static final long start_index$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int start_index
     * }
     */
    public static final long start_index$offset() {
        return start_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int start_index
     * }
     */
    public static int start_index(MemorySegment struct) {
        return struct.get(start_index$LAYOUT, start_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int start_index
     * }
     */
    public static void start_index(MemorySegment struct, int fieldValue) {
        struct.set(start_index$LAYOUT, start_index$OFFSET, fieldValue);
    }

    private static final OfInt start_char$LAYOUT = (OfInt)$LAYOUT.select(groupElement("start_char"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int start_char
     * }
     */
    public static final OfInt start_char$layout() {
        return start_char$LAYOUT;
    }

    private static final long start_char$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int start_char
     * }
     */
    public static final long start_char$offset() {
        return start_char$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int start_char
     * }
     */
    public static int start_char(MemorySegment struct) {
        return struct.get(start_char$LAYOUT, start_char$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int start_char
     * }
     */
    public static void start_char(MemorySegment struct, int fieldValue) {
        struct.set(start_char$LAYOUT, start_char$OFFSET, fieldValue);
    }

    private static final OfInt end_glyph$LAYOUT = (OfInt)$LAYOUT.select(groupElement("end_glyph"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int end_glyph
     * }
     */
    public static final OfInt end_glyph$layout() {
        return end_glyph$LAYOUT;
    }

    private static final long end_glyph$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int end_glyph
     * }
     */
    public static final long end_glyph$offset() {
        return end_glyph$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int end_glyph
     * }
     */
    public static int end_glyph(MemorySegment struct) {
        return struct.get(end_glyph$LAYOUT, end_glyph$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int end_glyph
     * }
     */
    public static void end_glyph(MemorySegment struct, int fieldValue) {
        struct.set(end_glyph$LAYOUT, end_glyph$OFFSET, fieldValue);
    }

    private static final OfInt end_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("end_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int end_index
     * }
     */
    public static final OfInt end_index$layout() {
        return end_index$LAYOUT;
    }

    private static final long end_index$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int end_index
     * }
     */
    public static final long end_index$offset() {
        return end_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int end_index
     * }
     */
    public static int end_index(MemorySegment struct) {
        return struct.get(end_index$LAYOUT, end_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int end_index
     * }
     */
    public static void end_index(MemorySegment struct, int fieldValue) {
        struct.set(end_index$LAYOUT, end_index$OFFSET, fieldValue);
    }

    private static final OfInt end_char$LAYOUT = (OfInt)$LAYOUT.select(groupElement("end_char"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int end_char
     * }
     */
    public static final OfInt end_char$layout() {
        return end_char$LAYOUT;
    }

    private static final long end_char$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int end_char
     * }
     */
    public static final long end_char$offset() {
        return end_char$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int end_char
     * }
     */
    public static int end_char(MemorySegment struct) {
        return struct.get(end_char$LAYOUT, end_char$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int end_char
     * }
     */
    public static void end_char(MemorySegment struct, int fieldValue) {
        struct.set(end_char$LAYOUT, end_char$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

