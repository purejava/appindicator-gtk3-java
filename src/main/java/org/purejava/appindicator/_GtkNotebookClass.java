// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GtkNotebookClass {
 *     GtkContainerClass parent_class;
 *     void (*switch_page)(GtkNotebook*,GtkWidget*,guint);
 *     gboolean (*select_page)(GtkNotebook*,gboolean);
 *     gboolean (*focus_tab)(GtkNotebook*,GtkNotebookTab);
 *     gboolean (*change_current_page)(GtkNotebook*,gint);
 *     void (*move_focus_out)(GtkNotebook*,GtkDirectionType);
 *     gboolean (*reorder_tab)(GtkNotebook*,GtkDirectionType,gboolean);
 *     gint (*insert_page)(GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*,gint);
 *     GtkNotebook* (*create_window)(GtkNotebook*,GtkWidget*,gint,gint);
 *     void (*page_reordered)(GtkNotebook*,GtkWidget*,guint);
 *     void (*page_removed)(GtkNotebook*,GtkWidget*,guint);
 *     void (*page_added)(GtkNotebook*,GtkWidget*,guint);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkNotebookClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                    ).withName("g_type_class"),
                    Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                    Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                    Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("notify"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
                    Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
                    MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
                ).withName("parent_class"),
                Constants$root.C_INT$LAYOUT.withName("activate_signal"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_child_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("destroy"),
                Constants$root.C_POINTER$LAYOUT.withName("show"),
                Constants$root.C_POINTER$LAYOUT.withName("show_all"),
                Constants$root.C_POINTER$LAYOUT.withName("hide"),
                Constants$root.C_POINTER$LAYOUT.withName("map"),
                Constants$root.C_POINTER$LAYOUT.withName("unmap"),
                Constants$root.C_POINTER$LAYOUT.withName("realize"),
                Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
                Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
                Constants$root.C_POINTER$LAYOUT.withName("state_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("parent_set"),
                Constants$root.C_POINTER$LAYOUT.withName("hierarchy_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("style_set"),
                Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("grab_notify"),
                Constants$root.C_POINTER$LAYOUT.withName("child_notify"),
                Constants$root.C_POINTER$LAYOUT.withName("draw"),
                Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
                Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
                Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
                Constants$root.C_POINTER$LAYOUT.withName("focus"),
                Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
                Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
                Constants$root.C_POINTER$LAYOUT.withName("event"),
                Constants$root.C_POINTER$LAYOUT.withName("button_press_event"),
                Constants$root.C_POINTER$LAYOUT.withName("button_release_event"),
                Constants$root.C_POINTER$LAYOUT.withName("scroll_event"),
                Constants$root.C_POINTER$LAYOUT.withName("motion_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("delete_event"),
                Constants$root.C_POINTER$LAYOUT.withName("destroy_event"),
                Constants$root.C_POINTER$LAYOUT.withName("key_press_event"),
                Constants$root.C_POINTER$LAYOUT.withName("key_release_event"),
                Constants$root.C_POINTER$LAYOUT.withName("enter_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("leave_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("configure_event"),
                Constants$root.C_POINTER$LAYOUT.withName("focus_in_event"),
                Constants$root.C_POINTER$LAYOUT.withName("focus_out_event"),
                Constants$root.C_POINTER$LAYOUT.withName("map_event"),
                Constants$root.C_POINTER$LAYOUT.withName("unmap_event"),
                Constants$root.C_POINTER$LAYOUT.withName("property_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_clear_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_request_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("proximity_in_event"),
                Constants$root.C_POINTER$LAYOUT.withName("proximity_out_event"),
                Constants$root.C_POINTER$LAYOUT.withName("visibility_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("window_state_event"),
                Constants$root.C_POINTER$LAYOUT.withName("damage_event"),
                Constants$root.C_POINTER$LAYOUT.withName("grab_broken_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_get"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_received"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_begin"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_end"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_data_get"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_data_delete"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_leave"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_motion"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_drop"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_data_received"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_failed"),
                Constants$root.C_POINTER$LAYOUT.withName("popup_menu"),
                Constants$root.C_POINTER$LAYOUT.withName("show_help"),
                Constants$root.C_POINTER$LAYOUT.withName("get_accessible"),
                Constants$root.C_POINTER$LAYOUT.withName("screen_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("can_activate_accel"),
                Constants$root.C_POINTER$LAYOUT.withName("composited_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
                Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_size_request"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_size_allocation"),
                Constants$root.C_POINTER$LAYOUT.withName("style_updated"),
                Constants$root.C_POINTER$LAYOUT.withName("touch_event"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_and_baseline_for_width"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_request"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_allocation"),
                Constants$root.C_POINTER$LAYOUT.withName("queue_draw_region"),
                Constants$root.C_POINTER$LAYOUT.withName("priv"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("add"),
            Constants$root.C_POINTER$LAYOUT.withName("remove"),
            Constants$root.C_POINTER$LAYOUT.withName("check_resize"),
            Constants$root.C_POINTER$LAYOUT.withName("forall"),
            Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
            Constants$root.C_POINTER$LAYOUT.withName("child_type"),
            Constants$root.C_POINTER$LAYOUT.withName("composite_name"),
            Constants$root.C_POINTER$LAYOUT.withName("set_child_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_child_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_path_for_child"),
            MemoryLayout.paddingLayout(64),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("switch_page"),
        Constants$root.C_POINTER$LAYOUT.withName("select_page"),
        Constants$root.C_POINTER$LAYOUT.withName("focus_tab"),
        Constants$root.C_POINTER$LAYOUT.withName("change_current_page"),
        Constants$root.C_POINTER$LAYOUT.withName("move_focus_out"),
        Constants$root.C_POINTER$LAYOUT.withName("reorder_tab"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_page"),
        Constants$root.C_POINTER$LAYOUT.withName("create_window"),
        Constants$root.C_POINTER$LAYOUT.withName("page_reordered"),
        Constants$root.C_POINTER$LAYOUT.withName("page_removed"),
        Constants$root.C_POINTER$LAYOUT.withName("page_added"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
    ).withName("_GtkNotebookClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkNotebookClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    static final FunctionDescriptor switch_page$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor switch_page_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle switch_page_UP$MH = RuntimeHelper.upcallHandle(switch_page.class, "apply", _GtkNotebookClass.switch_page_UP$FUNC);
    static final FunctionDescriptor switch_page_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle switch_page_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.switch_page_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*switch_page)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public interface switch_page {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(switch_page fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.switch_page_UP$MH, fi, _GtkNotebookClass.switch_page$FUNC, scope);
        }
        static switch_page ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    _GtkNotebookClass.switch_page_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle switch_page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("switch_page"));
    public static VarHandle switch_page$VH() {
        return _GtkNotebookClass.switch_page$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*switch_page)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static MemorySegment switch_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.switch_page$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*switch_page)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static void switch_page$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.switch_page$VH.set(seg, x);
    }
    public static MemorySegment switch_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.switch_page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void switch_page$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.switch_page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static switch_page switch_page(MemorySegment segment, SegmentScope scope) {
        return switch_page.ofAddress(switch_page$get(segment), scope);
    }
    static final FunctionDescriptor select_page$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor select_page_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_page_UP$MH = RuntimeHelper.upcallHandle(select_page.class, "apply", _GtkNotebookClass.select_page_UP$FUNC);
    static final FunctionDescriptor select_page_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle select_page_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.select_page_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*select_page)(GtkNotebook*,gboolean);
     * }
     */
    public interface select_page {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(select_page fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.select_page_UP$MH, fi, _GtkNotebookClass.select_page$FUNC, scope);
        }
        static select_page ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkNotebookClass.select_page_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_page"));
    public static VarHandle select_page$VH() {
        return _GtkNotebookClass.select_page$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*select_page)(GtkNotebook*,gboolean);
     * }
     */
    public static MemorySegment select_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.select_page$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*select_page)(GtkNotebook*,gboolean);
     * }
     */
    public static void select_page$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.select_page$VH.set(seg, x);
    }
    public static MemorySegment select_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.select_page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_page$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.select_page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_page select_page(MemorySegment segment, SegmentScope scope) {
        return select_page.ofAddress(select_page$get(segment), scope);
    }
    static final FunctionDescriptor focus_tab$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor focus_tab_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_tab_UP$MH = RuntimeHelper.upcallHandle(focus_tab.class, "apply", _GtkNotebookClass.focus_tab_UP$FUNC);
    static final FunctionDescriptor focus_tab_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_tab_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.focus_tab_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*focus_tab)(GtkNotebook*,GtkNotebookTab);
     * }
     */
    public interface focus_tab {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(focus_tab fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.focus_tab_UP$MH, fi, _GtkNotebookClass.focus_tab$FUNC, scope);
        }
        static focus_tab ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkNotebookClass.focus_tab_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus_tab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus_tab"));
    public static VarHandle focus_tab$VH() {
        return _GtkNotebookClass.focus_tab$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*focus_tab)(GtkNotebook*,GtkNotebookTab);
     * }
     */
    public static MemorySegment focus_tab$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.focus_tab$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*focus_tab)(GtkNotebook*,GtkNotebookTab);
     * }
     */
    public static void focus_tab$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.focus_tab$VH.set(seg, x);
    }
    public static MemorySegment focus_tab$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.focus_tab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_tab$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.focus_tab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_tab focus_tab(MemorySegment segment, SegmentScope scope) {
        return focus_tab.ofAddress(focus_tab$get(segment), scope);
    }
    static final FunctionDescriptor change_current_page$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor change_current_page_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle change_current_page_UP$MH = RuntimeHelper.upcallHandle(change_current_page.class, "apply", _GtkNotebookClass.change_current_page_UP$FUNC);
    static final FunctionDescriptor change_current_page_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle change_current_page_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.change_current_page_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*change_current_page)(GtkNotebook*,gint);
     * }
     */
    public interface change_current_page {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(change_current_page fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.change_current_page_UP$MH, fi, _GtkNotebookClass.change_current_page$FUNC, scope);
        }
        static change_current_page ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkNotebookClass.change_current_page_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle change_current_page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("change_current_page"));
    public static VarHandle change_current_page$VH() {
        return _GtkNotebookClass.change_current_page$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*change_current_page)(GtkNotebook*,gint);
     * }
     */
    public static MemorySegment change_current_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.change_current_page$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*change_current_page)(GtkNotebook*,gint);
     * }
     */
    public static void change_current_page$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.change_current_page$VH.set(seg, x);
    }
    public static MemorySegment change_current_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.change_current_page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void change_current_page$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.change_current_page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_current_page change_current_page(MemorySegment segment, SegmentScope scope) {
        return change_current_page.ofAddress(change_current_page$get(segment), scope);
    }
    static final FunctionDescriptor move_focus_out$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor move_focus_out_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_focus_out_UP$MH = RuntimeHelper.upcallHandle(move_focus_out.class, "apply", _GtkNotebookClass.move_focus_out_UP$FUNC);
    static final FunctionDescriptor move_focus_out_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle move_focus_out_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.move_focus_out_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*move_focus_out)(GtkNotebook*,GtkDirectionType);
     * }
     */
    public interface move_focus_out {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(move_focus_out fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.move_focus_out_UP$MH, fi, _GtkNotebookClass.move_focus_out$FUNC, scope);
        }
        static move_focus_out ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _GtkNotebookClass.move_focus_out_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle move_focus_out$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("move_focus_out"));
    public static VarHandle move_focus_out$VH() {
        return _GtkNotebookClass.move_focus_out$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_focus_out)(GtkNotebook*,GtkDirectionType);
     * }
     */
    public static MemorySegment move_focus_out$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.move_focus_out$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_focus_out)(GtkNotebook*,GtkDirectionType);
     * }
     */
    public static void move_focus_out$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.move_focus_out$VH.set(seg, x);
    }
    public static MemorySegment move_focus_out$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.move_focus_out$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void move_focus_out$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.move_focus_out$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_focus_out move_focus_out(MemorySegment segment, SegmentScope scope) {
        return move_focus_out.ofAddress(move_focus_out$get(segment), scope);
    }
    static final FunctionDescriptor reorder_tab$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor reorder_tab_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle reorder_tab_UP$MH = RuntimeHelper.upcallHandle(reorder_tab.class, "apply", _GtkNotebookClass.reorder_tab_UP$FUNC);
    static final FunctionDescriptor reorder_tab_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle reorder_tab_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.reorder_tab_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*reorder_tab)(GtkNotebook*,GtkDirectionType,gboolean);
     * }
     */
    public interface reorder_tab {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(reorder_tab fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.reorder_tab_UP$MH, fi, _GtkNotebookClass.reorder_tab$FUNC, scope);
        }
        static reorder_tab ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)_GtkNotebookClass.reorder_tab_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reorder_tab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reorder_tab"));
    public static VarHandle reorder_tab$VH() {
        return _GtkNotebookClass.reorder_tab$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*reorder_tab)(GtkNotebook*,GtkDirectionType,gboolean);
     * }
     */
    public static MemorySegment reorder_tab$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.reorder_tab$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*reorder_tab)(GtkNotebook*,GtkDirectionType,gboolean);
     * }
     */
    public static void reorder_tab$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.reorder_tab$VH.set(seg, x);
    }
    public static MemorySegment reorder_tab$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.reorder_tab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reorder_tab$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.reorder_tab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reorder_tab reorder_tab(MemorySegment segment, SegmentScope scope) {
        return reorder_tab.ofAddress(reorder_tab$get(segment), scope);
    }
    static final FunctionDescriptor insert_page$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor insert_page_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle insert_page_UP$MH = RuntimeHelper.upcallHandle(insert_page.class, "apply", _GtkNotebookClass.insert_page_UP$FUNC);
    static final FunctionDescriptor insert_page_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle insert_page_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.insert_page_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*insert_page)(GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*,gint);
     * }
     */
    public interface insert_page {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(insert_page fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.insert_page_UP$MH, fi, _GtkNotebookClass.insert_page$FUNC, scope);
        }
        static insert_page ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)_GtkNotebookClass.insert_page_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_page"));
    public static VarHandle insert_page$VH() {
        return _GtkNotebookClass.insert_page$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*insert_page)(GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*,gint);
     * }
     */
    public static MemorySegment insert_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.insert_page$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*insert_page)(GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*,gint);
     * }
     */
    public static void insert_page$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.insert_page$VH.set(seg, x);
    }
    public static MemorySegment insert_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.insert_page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_page$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.insert_page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_page insert_page(MemorySegment segment, SegmentScope scope) {
        return insert_page.ofAddress(insert_page$get(segment), scope);
    }
    static final FunctionDescriptor create_window$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor create_window_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle create_window_UP$MH = RuntimeHelper.upcallHandle(create_window.class, "apply", _GtkNotebookClass.create_window_UP$FUNC);
    static final FunctionDescriptor create_window_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle create_window_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.create_window_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkNotebook* (*create_window)(GtkNotebook*,GtkWidget*,gint,gint);
     * }
     */
    public interface create_window {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(create_window fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.create_window_UP$MH, fi, _GtkNotebookClass.create_window$FUNC, scope);
        }
        static create_window ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkNotebookClass.create_window_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_window"));
    public static VarHandle create_window$VH() {
        return _GtkNotebookClass.create_window$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkNotebook* (*create_window)(GtkNotebook*,GtkWidget*,gint,gint);
     * }
     */
    public static MemorySegment create_window$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.create_window$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkNotebook* (*create_window)(GtkNotebook*,GtkWidget*,gint,gint);
     * }
     */
    public static void create_window$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.create_window$VH.set(seg, x);
    }
    public static MemorySegment create_window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.create_window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_window$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.create_window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_window create_window(MemorySegment segment, SegmentScope scope) {
        return create_window.ofAddress(create_window$get(segment), scope);
    }
    static final FunctionDescriptor page_reordered$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor page_reordered_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle page_reordered_UP$MH = RuntimeHelper.upcallHandle(page_reordered.class, "apply", _GtkNotebookClass.page_reordered_UP$FUNC);
    static final FunctionDescriptor page_reordered_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle page_reordered_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.page_reordered_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*page_reordered)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public interface page_reordered {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(page_reordered fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.page_reordered_UP$MH, fi, _GtkNotebookClass.page_reordered$FUNC, scope);
        }
        static page_reordered ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    _GtkNotebookClass.page_reordered_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle page_reordered$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("page_reordered"));
    public static VarHandle page_reordered$VH() {
        return _GtkNotebookClass.page_reordered$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*page_reordered)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static MemorySegment page_reordered$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.page_reordered$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*page_reordered)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static void page_reordered$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.page_reordered$VH.set(seg, x);
    }
    public static MemorySegment page_reordered$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.page_reordered$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void page_reordered$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.page_reordered$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static page_reordered page_reordered(MemorySegment segment, SegmentScope scope) {
        return page_reordered.ofAddress(page_reordered$get(segment), scope);
    }
    static final FunctionDescriptor page_removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor page_removed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle page_removed_UP$MH = RuntimeHelper.upcallHandle(page_removed.class, "apply", _GtkNotebookClass.page_removed_UP$FUNC);
    static final FunctionDescriptor page_removed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle page_removed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.page_removed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*page_removed)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public interface page_removed {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(page_removed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.page_removed_UP$MH, fi, _GtkNotebookClass.page_removed$FUNC, scope);
        }
        static page_removed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    _GtkNotebookClass.page_removed_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle page_removed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("page_removed"));
    public static VarHandle page_removed$VH() {
        return _GtkNotebookClass.page_removed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*page_removed)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static MemorySegment page_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.page_removed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*page_removed)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static void page_removed$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.page_removed$VH.set(seg, x);
    }
    public static MemorySegment page_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.page_removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void page_removed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.page_removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static page_removed page_removed(MemorySegment segment, SegmentScope scope) {
        return page_removed.ofAddress(page_removed$get(segment), scope);
    }
    static final FunctionDescriptor page_added$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor page_added_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle page_added_UP$MH = RuntimeHelper.upcallHandle(page_added.class, "apply", _GtkNotebookClass.page_added_UP$FUNC);
    static final FunctionDescriptor page_added_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle page_added_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass.page_added_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*page_added)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public interface page_added {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(page_added fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass.page_added_UP$MH, fi, _GtkNotebookClass.page_added$FUNC, scope);
        }
        static page_added ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    _GtkNotebookClass.page_added_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle page_added$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("page_added"));
    public static VarHandle page_added$VH() {
        return _GtkNotebookClass.page_added$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*page_added)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static MemorySegment page_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.page_added$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*page_added)(GtkNotebook*,GtkWidget*,guint);
     * }
     */
    public static void page_added$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass.page_added$VH.set(seg, x);
    }
    public static MemorySegment page_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass.page_added$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void page_added$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass.page_added$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static page_added page_added(MemorySegment segment, SegmentScope scope) {
        return page_added.ofAddress(page_added$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved1.class, "apply", _GtkNotebookClass._gtk_reserved1_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved1_UP$MH, fi, _GtkNotebookClass._gtk_reserved1$FUNC, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkNotebookClass._gtk_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved2.class, "apply", _GtkNotebookClass._gtk_reserved2_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved2_UP$MH, fi, _GtkNotebookClass._gtk_reserved2$FUNC, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkNotebookClass._gtk_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved3.class, "apply", _GtkNotebookClass._gtk_reserved3_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved3_UP$MH, fi, _GtkNotebookClass._gtk_reserved3$FUNC, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkNotebookClass._gtk_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved4.class, "apply", _GtkNotebookClass._gtk_reserved4_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved4_UP$MH, fi, _GtkNotebookClass._gtk_reserved4$FUNC, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkNotebookClass._gtk_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved5_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved5.class, "apply", _GtkNotebookClass._gtk_reserved5_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved5_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved5_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved5_UP$MH, fi, _GtkNotebookClass._gtk_reserved5$FUNC, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved5_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkNotebookClass._gtk_reserved5$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved5$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved5$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved6_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved6.class, "apply", _GtkNotebookClass._gtk_reserved6_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved6_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved6_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved6_UP$MH, fi, _GtkNotebookClass._gtk_reserved6$FUNC, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved6_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkNotebookClass._gtk_reserved6$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved6$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved6$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved7_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved7.class, "apply", _GtkNotebookClass._gtk_reserved7_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved7_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved7_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved7_UP$MH, fi, _GtkNotebookClass._gtk_reserved7$FUNC, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved7_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved7"));
    public static VarHandle _gtk_reserved7$VH() {
        return _GtkNotebookClass._gtk_reserved7$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved7$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved7$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved8_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved8.class, "apply", _GtkNotebookClass._gtk_reserved8_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved8_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkNotebookClass._gtk_reserved8_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkNotebookClass._gtk_reserved8_UP$MH, fi, _GtkNotebookClass._gtk_reserved8$FUNC, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkNotebookClass._gtk_reserved8_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved8"));
    public static VarHandle _gtk_reserved8$VH() {
        return _GtkNotebookClass._gtk_reserved8$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved8$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved8$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkNotebookClass._gtk_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkNotebookClass._gtk_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


