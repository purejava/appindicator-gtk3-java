// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkNotebookClass {
 *     struct _GtkContainerClass parent_class;
 *     void (*switch_page)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
 *     int (*select_page)(struct _GtkNotebook*,int);
 *     int (*focus_tab)(struct _GtkNotebook*,enum GtkNotebookTab);
 *     int (*change_current_page)(struct _GtkNotebook*,int);
 *     void (*move_focus_out)(struct _GtkNotebook*,enum GtkDirectionType);
 *     int (*reorder_tab)(struct _GtkNotebook*,enum GtkDirectionType,int);
 *     int (*insert_page)(struct _GtkNotebook*,struct _GtkWidget*,struct _GtkWidget*,struct _GtkWidget*,int);
 *     struct _GtkNotebook* (*create_window)(struct _GtkNotebook*,struct _GtkWidget*,int,int);
 *     void (*page_reordered)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
 *     void (*page_removed)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
 *     void (*page_added)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkNotebookClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2903.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * void (*switch_page)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public interface switch_page {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(switch_page fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2904.const$0, fi, constants$164.const$5, scope);
        }
        static switch_page ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle switch_page$VH() {
        return constants$2904.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*switch_page)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static MemorySegment switch_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2904.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*switch_page)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static void switch_page$set(MemorySegment seg, MemorySegment x) {
        constants$2904.const$1.set(seg, x);
    }
    public static MemorySegment switch_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2904.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void switch_page$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2904.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static switch_page switch_page(MemorySegment segment, Arena scope) {
        return switch_page.ofAddress(switch_page$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*select_page)(struct _GtkNotebook*,int);
     * }
     */
    public interface select_page {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(select_page fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2904.const$2, fi, constants$11.const$4, scope);
        }
        static select_page ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_page$VH() {
        return constants$2904.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*select_page)(struct _GtkNotebook*,int);
     * }
     */
    public static MemorySegment select_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2904.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*select_page)(struct _GtkNotebook*,int);
     * }
     */
    public static void select_page$set(MemorySegment seg, MemorySegment x) {
        constants$2904.const$3.set(seg, x);
    }
    public static MemorySegment select_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2904.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void select_page$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2904.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_page select_page(MemorySegment segment, Arena scope) {
        return select_page.ofAddress(select_page$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*focus_tab)(struct _GtkNotebook*,enum GtkNotebookTab);
     * }
     */
    public interface focus_tab {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(focus_tab fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2904.const$4, fi, constants$11.const$4, scope);
        }
        static focus_tab ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle focus_tab$VH() {
        return constants$2904.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*focus_tab)(struct _GtkNotebook*,enum GtkNotebookTab);
     * }
     */
    public static MemorySegment focus_tab$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2904.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*focus_tab)(struct _GtkNotebook*,enum GtkNotebookTab);
     * }
     */
    public static void focus_tab$set(MemorySegment seg, MemorySegment x) {
        constants$2904.const$5.set(seg, x);
    }
    public static MemorySegment focus_tab$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2904.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_tab$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2904.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_tab focus_tab(MemorySegment segment, Arena scope) {
        return focus_tab.ofAddress(focus_tab$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*change_current_page)(struct _GtkNotebook*,int);
     * }
     */
    public interface change_current_page {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(change_current_page fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2905.const$0, fi, constants$11.const$4, scope);
        }
        static change_current_page ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle change_current_page$VH() {
        return constants$2905.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*change_current_page)(struct _GtkNotebook*,int);
     * }
     */
    public static MemorySegment change_current_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2905.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*change_current_page)(struct _GtkNotebook*,int);
     * }
     */
    public static void change_current_page$set(MemorySegment seg, MemorySegment x) {
        constants$2905.const$1.set(seg, x);
    }
    public static MemorySegment change_current_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2905.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void change_current_page$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2905.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_current_page change_current_page(MemorySegment segment, Arena scope) {
        return change_current_page.ofAddress(change_current_page$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*move_focus_out)(struct _GtkNotebook*,enum GtkDirectionType);
     * }
     */
    public interface move_focus_out {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(move_focus_out fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2905.const$2, fi, constants$40.const$2, scope);
        }
        static move_focus_out ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_focus_out$VH() {
        return constants$2905.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_focus_out)(struct _GtkNotebook*,enum GtkDirectionType);
     * }
     */
    public static MemorySegment move_focus_out$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2905.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_focus_out)(struct _GtkNotebook*,enum GtkDirectionType);
     * }
     */
    public static void move_focus_out$set(MemorySegment seg, MemorySegment x) {
        constants$2905.const$3.set(seg, x);
    }
    public static MemorySegment move_focus_out$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2905.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void move_focus_out$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2905.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_focus_out move_focus_out(MemorySegment segment, Arena scope) {
        return move_focus_out.ofAddress(move_focus_out$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*reorder_tab)(struct _GtkNotebook*,enum GtkDirectionType,int);
     * }
     */
    public interface reorder_tab {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(reorder_tab fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2905.const$4, fi, constants$49.const$0, scope);
        }
        static reorder_tab ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle reorder_tab$VH() {
        return constants$2905.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*reorder_tab)(struct _GtkNotebook*,enum GtkDirectionType,int);
     * }
     */
    public static MemorySegment reorder_tab$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2905.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*reorder_tab)(struct _GtkNotebook*,enum GtkDirectionType,int);
     * }
     */
    public static void reorder_tab$set(MemorySegment seg, MemorySegment x) {
        constants$2905.const$5.set(seg, x);
    }
    public static MemorySegment reorder_tab$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2905.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reorder_tab$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2905.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static reorder_tab reorder_tab(MemorySegment segment, Arena scope) {
        return reorder_tab.ofAddress(reorder_tab$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*insert_page)(struct _GtkNotebook*,struct _GtkWidget*,struct _GtkWidget*,struct _GtkWidget*,int);
     * }
     */
    public interface insert_page {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(insert_page fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2906.const$0, fi, constants$1423.const$1, scope);
        }
        static insert_page ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)constants$2906.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_page$VH() {
        return constants$2906.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*insert_page)(struct _GtkNotebook*,struct _GtkWidget*,struct _GtkWidget*,struct _GtkWidget*,int);
     * }
     */
    public static MemorySegment insert_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2906.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*insert_page)(struct _GtkNotebook*,struct _GtkWidget*,struct _GtkWidget*,struct _GtkWidget*,int);
     * }
     */
    public static void insert_page$set(MemorySegment seg, MemorySegment x) {
        constants$2906.const$2.set(seg, x);
    }
    public static MemorySegment insert_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2906.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_page$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2906.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_page insert_page(MemorySegment segment, Arena scope) {
        return insert_page.ofAddress(insert_page$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkNotebook* (*create_window)(struct _GtkNotebook*,struct _GtkWidget*,int,int);
     * }
     */
    public interface create_window {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(create_window fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2906.const$3, fi, constants$415.const$5, scope);
        }
        static create_window ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$2906.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_window$VH() {
        return constants$2906.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkNotebook* (*create_window)(struct _GtkNotebook*,struct _GtkWidget*,int,int);
     * }
     */
    public static MemorySegment create_window$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2906.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkNotebook* (*create_window)(struct _GtkNotebook*,struct _GtkWidget*,int,int);
     * }
     */
    public static void create_window$set(MemorySegment seg, MemorySegment x) {
        constants$2906.const$5.set(seg, x);
    }
    public static MemorySegment create_window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2906.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void create_window$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2906.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_window create_window(MemorySegment segment, Arena scope) {
        return create_window.ofAddress(create_window$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*page_reordered)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public interface page_reordered {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(page_reordered fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2907.const$0, fi, constants$164.const$5, scope);
        }
        static page_reordered ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle page_reordered$VH() {
        return constants$2907.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*page_reordered)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static MemorySegment page_reordered$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2907.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*page_reordered)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static void page_reordered$set(MemorySegment seg, MemorySegment x) {
        constants$2907.const$1.set(seg, x);
    }
    public static MemorySegment page_reordered$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2907.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void page_reordered$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2907.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static page_reordered page_reordered(MemorySegment segment, Arena scope) {
        return page_reordered.ofAddress(page_reordered$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*page_removed)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public interface page_removed {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(page_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2907.const$2, fi, constants$164.const$5, scope);
        }
        static page_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle page_removed$VH() {
        return constants$2907.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*page_removed)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static MemorySegment page_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2907.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*page_removed)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static void page_removed$set(MemorySegment seg, MemorySegment x) {
        constants$2907.const$3.set(seg, x);
    }
    public static MemorySegment page_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2907.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void page_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2907.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static page_removed page_removed(MemorySegment segment, Arena scope) {
        return page_removed.ofAddress(page_removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*page_added)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public interface page_added {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(page_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2907.const$4, fi, constants$164.const$5, scope);
        }
        static page_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle page_added$VH() {
        return constants$2907.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*page_added)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static MemorySegment page_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2907.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*page_added)(struct _GtkNotebook*,struct _GtkWidget*,unsigned int);
     * }
     */
    public static void page_added$set(MemorySegment seg, MemorySegment x) {
        constants$2907.const$5.set(seg, x);
    }
    public static MemorySegment page_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2907.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void page_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2907.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static page_added page_added(MemorySegment segment, Arena scope) {
        return page_added.ofAddress(page_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2908.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2908.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2908.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2908.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2908.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2908.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2908.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2908.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2908.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2908.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2908.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2908.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2908.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2908.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2908.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2908.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2908.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2908.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2909.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2909.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2909.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2909.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2909.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2909.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2909.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2909.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2909.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2909.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2909.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2909.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2909.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2909.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2909.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2909.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2909.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2909.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2910.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2910.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2910.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2910.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2910.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2910.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2910.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$2910.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2910.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$2910.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2910.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2910.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


