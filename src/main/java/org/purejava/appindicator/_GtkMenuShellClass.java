// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkMenuShellClass {
 *     GtkContainerClass parent_class;
 *     guint submenu_placement : 1;
 *     void (*deactivate)(GtkMenuShell *);
 *     void (*selection_done)(GtkMenuShell *);
 *     void (*move_current)(GtkMenuShell *, GtkMenuDirectionType);
 *     void (*activate_current)(GtkMenuShell *, gboolean);
 *     void (*cancel)(GtkMenuShell *);
 *     void (*select_item)(GtkMenuShell *, GtkWidget *);
 *     void (*insert)(GtkMenuShell *, GtkWidget *, gint);
 *     gint (*get_popup_delay)(GtkMenuShell *);
 *     gboolean (*move_selected)(GtkMenuShell *, gint);
 *     void (*_gtk_reserved1)(void);
 *     void (*_gtk_reserved2)(void);
 *     void (*_gtk_reserved3)(void);
 *     void (*_gtk_reserved4)(void);
 * }
 * }
 */
public class _GtkMenuShellClass {

    _GtkMenuShellClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GtkContainerClass.layout().withName("parent_class"),
        MemoryLayout.paddingLayout(8),
        app_indicator_h.C_POINTER.withName("deactivate"),
        app_indicator_h.C_POINTER.withName("selection_done"),
        app_indicator_h.C_POINTER.withName("move_current"),
        app_indicator_h.C_POINTER.withName("activate_current"),
        app_indicator_h.C_POINTER.withName("cancel"),
        app_indicator_h.C_POINTER.withName("select_item"),
        app_indicator_h.C_POINTER.withName("insert"),
        app_indicator_h.C_POINTER.withName("get_popup_delay"),
        app_indicator_h.C_POINTER.withName("move_selected"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved1"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved2"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved3"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved4")
    ).withName("_GtkMenuShellClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*deactivate)(GtkMenuShell *)
     * }
     */
    public class deactivate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(deactivate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(deactivate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout deactivate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("deactivate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*deactivate)(GtkMenuShell *)
     * }
     */
    public static final AddressLayout deactivate$layout() {
        return deactivate$LAYOUT;
    }

    private static final long deactivate$OFFSET = 984;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*deactivate)(GtkMenuShell *)
     * }
     */
    public static final long deactivate$offset() {
        return deactivate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*deactivate)(GtkMenuShell *)
     * }
     */
    public static MemorySegment deactivate(MemorySegment struct) {
        return struct.get(deactivate$LAYOUT, deactivate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*deactivate)(GtkMenuShell *)
     * }
     */
    public static void deactivate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(deactivate$LAYOUT, deactivate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*selection_done)(GtkMenuShell *)
     * }
     */
    public class selection_done {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(selection_done.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(selection_done.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout selection_done$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("selection_done"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*selection_done)(GtkMenuShell *)
     * }
     */
    public static final AddressLayout selection_done$layout() {
        return selection_done$LAYOUT;
    }

    private static final long selection_done$OFFSET = 992;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*selection_done)(GtkMenuShell *)
     * }
     */
    public static final long selection_done$offset() {
        return selection_done$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*selection_done)(GtkMenuShell *)
     * }
     */
    public static MemorySegment selection_done(MemorySegment struct) {
        return struct.get(selection_done$LAYOUT, selection_done$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*selection_done)(GtkMenuShell *)
     * }
     */
    public static void selection_done(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(selection_done$LAYOUT, selection_done$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*move_current)(GtkMenuShell *, GtkMenuDirectionType)
     * }
     */
    public class move_current {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(move_current.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(move_current.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout move_current$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("move_current"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*move_current)(GtkMenuShell *, GtkMenuDirectionType)
     * }
     */
    public static final AddressLayout move_current$layout() {
        return move_current$LAYOUT;
    }

    private static final long move_current$OFFSET = 1000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*move_current)(GtkMenuShell *, GtkMenuDirectionType)
     * }
     */
    public static final long move_current$offset() {
        return move_current$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*move_current)(GtkMenuShell *, GtkMenuDirectionType)
     * }
     */
    public static MemorySegment move_current(MemorySegment struct) {
        return struct.get(move_current$LAYOUT, move_current$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*move_current)(GtkMenuShell *, GtkMenuDirectionType)
     * }
     */
    public static void move_current(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(move_current$LAYOUT, move_current$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*activate_current)(GtkMenuShell *, gboolean)
     * }
     */
    public class activate_current {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(activate_current.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(activate_current.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout activate_current$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("activate_current"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*activate_current)(GtkMenuShell *, gboolean)
     * }
     */
    public static final AddressLayout activate_current$layout() {
        return activate_current$LAYOUT;
    }

    private static final long activate_current$OFFSET = 1008;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*activate_current)(GtkMenuShell *, gboolean)
     * }
     */
    public static final long activate_current$offset() {
        return activate_current$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*activate_current)(GtkMenuShell *, gboolean)
     * }
     */
    public static MemorySegment activate_current(MemorySegment struct) {
        return struct.get(activate_current$LAYOUT, activate_current$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*activate_current)(GtkMenuShell *, gboolean)
     * }
     */
    public static void activate_current(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(activate_current$LAYOUT, activate_current$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*cancel)(GtkMenuShell *)
     * }
     */
    public class cancel {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(cancel.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cancel.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cancel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cancel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*cancel)(GtkMenuShell *)
     * }
     */
    public static final AddressLayout cancel$layout() {
        return cancel$LAYOUT;
    }

    private static final long cancel$OFFSET = 1016;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*cancel)(GtkMenuShell *)
     * }
     */
    public static final long cancel$offset() {
        return cancel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*cancel)(GtkMenuShell *)
     * }
     */
    public static MemorySegment cancel(MemorySegment struct) {
        return struct.get(cancel$LAYOUT, cancel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*cancel)(GtkMenuShell *)
     * }
     */
    public static void cancel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cancel$LAYOUT, cancel$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*select_item)(GtkMenuShell *, GtkWidget *)
     * }
     */
    public class select_item {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(select_item.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(select_item.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout select_item$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("select_item"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*select_item)(GtkMenuShell *, GtkWidget *)
     * }
     */
    public static final AddressLayout select_item$layout() {
        return select_item$LAYOUT;
    }

    private static final long select_item$OFFSET = 1024;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*select_item)(GtkMenuShell *, GtkWidget *)
     * }
     */
    public static final long select_item$offset() {
        return select_item$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*select_item)(GtkMenuShell *, GtkWidget *)
     * }
     */
    public static MemorySegment select_item(MemorySegment struct) {
        return struct.get(select_item$LAYOUT, select_item$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*select_item)(GtkMenuShell *, GtkWidget *)
     * }
     */
    public static void select_item(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(select_item$LAYOUT, select_item$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*insert)(GtkMenuShell *, GtkWidget *, gint)
     * }
     */
    public class insert {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(insert.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(insert.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout insert$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("insert"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*insert)(GtkMenuShell *, GtkWidget *, gint)
     * }
     */
    public static final AddressLayout insert$layout() {
        return insert$LAYOUT;
    }

    private static final long insert$OFFSET = 1032;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*insert)(GtkMenuShell *, GtkWidget *, gint)
     * }
     */
    public static final long insert$offset() {
        return insert$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*insert)(GtkMenuShell *, GtkWidget *, gint)
     * }
     */
    public static MemorySegment insert(MemorySegment struct) {
        return struct.get(insert$LAYOUT, insert$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*insert)(GtkMenuShell *, GtkWidget *, gint)
     * }
     */
    public static void insert(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(insert$LAYOUT, insert$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gint (*get_popup_delay)(GtkMenuShell *)
     * }
     */
    public class get_popup_delay {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_popup_delay.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_popup_delay.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_popup_delay$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_popup_delay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint (*get_popup_delay)(GtkMenuShell *)
     * }
     */
    public static final AddressLayout get_popup_delay$layout() {
        return get_popup_delay$LAYOUT;
    }

    private static final long get_popup_delay$OFFSET = 1040;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint (*get_popup_delay)(GtkMenuShell *)
     * }
     */
    public static final long get_popup_delay$offset() {
        return get_popup_delay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint (*get_popup_delay)(GtkMenuShell *)
     * }
     */
    public static MemorySegment get_popup_delay(MemorySegment struct) {
        return struct.get(get_popup_delay$LAYOUT, get_popup_delay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint (*get_popup_delay)(GtkMenuShell *)
     * }
     */
    public static void get_popup_delay(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_popup_delay$LAYOUT, get_popup_delay$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*move_selected)(GtkMenuShell *, gint)
     * }
     */
    public class move_selected {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(move_selected.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(move_selected.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout move_selected$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("move_selected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*move_selected)(GtkMenuShell *, gint)
     * }
     */
    public static final AddressLayout move_selected$layout() {
        return move_selected$LAYOUT;
    }

    private static final long move_selected$OFFSET = 1048;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*move_selected)(GtkMenuShell *, gint)
     * }
     */
    public static final long move_selected$offset() {
        return move_selected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*move_selected)(GtkMenuShell *, gint)
     * }
     */
    public static MemorySegment move_selected(MemorySegment struct) {
        return struct.get(move_selected$LAYOUT, move_selected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*move_selected)(GtkMenuShell *, gint)
     * }
     */
    public static void move_selected(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(move_selected$LAYOUT, move_selected$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public class _gtk_reserved1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved1$layout() {
        return _gtk_reserved1$LAYOUT;
    }

    private static final long _gtk_reserved1$OFFSET = 1056;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final long _gtk_reserved1$offset() {
        return _gtk_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static MemorySegment _gtk_reserved1(MemorySegment struct) {
        return struct.get(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static void _gtk_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public class _gtk_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved2$layout() {
        return _gtk_reserved2$LAYOUT;
    }

    private static final long _gtk_reserved2$OFFSET = 1064;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final long _gtk_reserved2$offset() {
        return _gtk_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static MemorySegment _gtk_reserved2(MemorySegment struct) {
        return struct.get(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static void _gtk_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public class _gtk_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved3$layout() {
        return _gtk_reserved3$LAYOUT;
    }

    private static final long _gtk_reserved3$OFFSET = 1072;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final long _gtk_reserved3$offset() {
        return _gtk_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static MemorySegment _gtk_reserved3(MemorySegment struct) {
        return struct.get(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static void _gtk_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public class _gtk_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved4$layout() {
        return _gtk_reserved4$LAYOUT;
    }

    private static final long _gtk_reserved4$OFFSET = 1080;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final long _gtk_reserved4$offset() {
        return _gtk_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static MemorySegment _gtk_reserved4(MemorySegment struct) {
        return struct.get(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static void _gtk_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

