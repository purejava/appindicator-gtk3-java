// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_13 extends app_indicator_h_14 {

    app_indicator_h_13() {
        // Should not be called directly
    }

    private static class g_dbus_connection_flush_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_flush_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_flush_sync(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_flush_sync$descriptor() {
        return g_dbus_connection_flush_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_flush_sync(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_flush_sync$handle() {
        return g_dbus_connection_flush_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_flush_sync(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_dbus_connection_flush_sync(MemorySegment connection, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_connection_flush_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_flush_sync", connection, cancellable, error);
            }
            return (int)mh$.invokeExact(connection, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_send_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_send_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_send_message(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, volatile guint32 *out_serial, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_send_message$descriptor() {
        return g_dbus_connection_send_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_send_message(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, volatile guint32 *out_serial, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_send_message$handle() {
        return g_dbus_connection_send_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_send_message(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, volatile guint32 *out_serial, GError **error)
     * }
     */
    public static int g_dbus_connection_send_message(MemorySegment connection, MemorySegment message, int flags, MemorySegment out_serial, MemorySegment error) {
        var mh$ = g_dbus_connection_send_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_send_message", connection, message, flags, out_serial, error);
            }
            return (int)mh$.invokeExact(connection, message, flags, out_serial, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_send_message_with_reply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_send_message_with_reply"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_send_message_with_reply(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_send_message_with_reply$descriptor() {
        return g_dbus_connection_send_message_with_reply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_send_message_with_reply(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_connection_send_message_with_reply$handle() {
        return g_dbus_connection_send_message_with_reply.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_send_message_with_reply(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_connection_send_message_with_reply(MemorySegment connection, MemorySegment message, int flags, int timeout_msec, MemorySegment out_serial, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_connection_send_message_with_reply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_send_message_with_reply", connection, message, flags, timeout_msec, out_serial, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, message, flags, timeout_msec, out_serial, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_send_message_with_reply_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_send_message_with_reply_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_connection_send_message_with_reply_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_send_message_with_reply_finish$descriptor() {
        return g_dbus_connection_send_message_with_reply_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_connection_send_message_with_reply_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_send_message_with_reply_finish$handle() {
        return g_dbus_connection_send_message_with_reply_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_connection_send_message_with_reply_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_send_message_with_reply_finish(MemorySegment connection, MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_connection_send_message_with_reply_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_send_message_with_reply_finish", connection, res, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_send_message_with_reply_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_send_message_with_reply_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_connection_send_message_with_reply_sync(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_send_message_with_reply_sync$descriptor() {
        return g_dbus_connection_send_message_with_reply_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_connection_send_message_with_reply_sync(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_send_message_with_reply_sync$handle() {
        return g_dbus_connection_send_message_with_reply_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_connection_send_message_with_reply_sync(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_send_message_with_reply_sync(MemorySegment connection, MemorySegment message, int flags, int timeout_msec, MemorySegment out_serial, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_connection_send_message_with_reply_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_send_message_with_reply_sync", connection, message, flags, timeout_msec, out_serial, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, message, flags, timeout_msec, out_serial, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_emit_signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_emit_signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_emit_signal(GDBusConnection *connection, const gchar *destination_bus_name, const gchar *object_path, const gchar *interface_name, const gchar *signal_name, GVariant *parameters, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_emit_signal$descriptor() {
        return g_dbus_connection_emit_signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_emit_signal(GDBusConnection *connection, const gchar *destination_bus_name, const gchar *object_path, const gchar *interface_name, const gchar *signal_name, GVariant *parameters, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_emit_signal$handle() {
        return g_dbus_connection_emit_signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_emit_signal(GDBusConnection *connection, const gchar *destination_bus_name, const gchar *object_path, const gchar *interface_name, const gchar *signal_name, GVariant *parameters, GError **error)
     * }
     */
    public static int g_dbus_connection_emit_signal(MemorySegment connection, MemorySegment destination_bus_name, MemorySegment object_path, MemorySegment interface_name, MemorySegment signal_name, MemorySegment parameters, MemorySegment error) {
        var mh$ = g_dbus_connection_emit_signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_emit_signal", connection, destination_bus_name, object_path, interface_name, signal_name, parameters, error);
            }
            return (int)mh$.invokeExact(connection, destination_bus_name, object_path, interface_name, signal_name, parameters, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_call {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_call"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_call(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_call$descriptor() {
        return g_dbus_connection_call.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_call(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_connection_call$handle() {
        return g_dbus_connection_call.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_call(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_connection_call(MemorySegment connection, MemorySegment bus_name, MemorySegment object_path, MemorySegment interface_name, MemorySegment method_name, MemorySegment parameters, MemorySegment reply_type, int flags, int timeout_msec, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_connection_call.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_call", connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_call_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_call_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_call_finish$descriptor() {
        return g_dbus_connection_call_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_call_finish$handle() {
        return g_dbus_connection_call_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_call_finish(MemorySegment connection, MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_connection_call_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_call_finish", connection, res, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_call_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_call_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_sync(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_call_sync$descriptor() {
        return g_dbus_connection_call_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_sync(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_call_sync$handle() {
        return g_dbus_connection_call_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_sync(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_call_sync(MemorySegment connection, MemorySegment bus_name, MemorySegment object_path, MemorySegment interface_name, MemorySegment method_name, MemorySegment parameters, MemorySegment reply_type, int flags, int timeout_msec, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_connection_call_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_call_sync", connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_call_with_unix_fd_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_call_with_unix_fd_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_call_with_unix_fd_list(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_call_with_unix_fd_list$descriptor() {
        return g_dbus_connection_call_with_unix_fd_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_call_with_unix_fd_list(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_connection_call_with_unix_fd_list$handle() {
        return g_dbus_connection_call_with_unix_fd_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_call_with_unix_fd_list(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_connection_call_with_unix_fd_list(MemorySegment connection, MemorySegment bus_name, MemorySegment object_path, MemorySegment interface_name, MemorySegment method_name, MemorySegment parameters, MemorySegment reply_type, int flags, int timeout_msec, MemorySegment fd_list, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_connection_call_with_unix_fd_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_call_with_unix_fd_list", connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_call_with_unix_fd_list_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_call_with_unix_fd_list_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_with_unix_fd_list_finish(GDBusConnection *connection, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_call_with_unix_fd_list_finish$descriptor() {
        return g_dbus_connection_call_with_unix_fd_list_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_with_unix_fd_list_finish(GDBusConnection *connection, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_call_with_unix_fd_list_finish$handle() {
        return g_dbus_connection_call_with_unix_fd_list_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_with_unix_fd_list_finish(GDBusConnection *connection, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_call_with_unix_fd_list_finish(MemorySegment connection, MemorySegment out_fd_list, MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_connection_call_with_unix_fd_list_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_call_with_unix_fd_list_finish", connection, out_fd_list, res, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, out_fd_list, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_call_with_unix_fd_list_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_call_with_unix_fd_list_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_with_unix_fd_list_sync(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_call_with_unix_fd_list_sync$descriptor() {
        return g_dbus_connection_call_with_unix_fd_list_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_with_unix_fd_list_sync(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_call_with_unix_fd_list_sync$handle() {
        return g_dbus_connection_call_with_unix_fd_list_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_connection_call_with_unix_fd_list_sync(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_call_with_unix_fd_list_sync(MemorySegment connection, MemorySegment bus_name, MemorySegment object_path, MemorySegment interface_name, MemorySegment method_name, MemorySegment parameters, MemorySegment reply_type, int flags, int timeout_msec, MemorySegment fd_list, MemorySegment out_fd_list, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_connection_call_with_unix_fd_list_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_call_with_unix_fd_list_sync", connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, out_fd_list, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, bus_name, object_path, interface_name, method_name, parameters, reply_type, flags, timeout_msec, fd_list, out_fd_list, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_register_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_register_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_object(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, const GDBusInterfaceVTable *vtable, gpointer user_data, GDestroyNotify user_data_free_func, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_register_object$descriptor() {
        return g_dbus_connection_register_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_object(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, const GDBusInterfaceVTable *vtable, gpointer user_data, GDestroyNotify user_data_free_func, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_register_object$handle() {
        return g_dbus_connection_register_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_object(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, const GDBusInterfaceVTable *vtable, gpointer user_data, GDestroyNotify user_data_free_func, GError **error)
     * }
     */
    public static int g_dbus_connection_register_object(MemorySegment connection, MemorySegment object_path, MemorySegment interface_info, MemorySegment vtable, MemorySegment user_data, MemorySegment user_data_free_func, MemorySegment error) {
        var mh$ = g_dbus_connection_register_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_register_object", connection, object_path, interface_info, vtable, user_data, user_data_free_func, error);
            }
            return (int)mh$.invokeExact(connection, object_path, interface_info, vtable, user_data, user_data_free_func, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_register_object_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_register_object_with_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_object_with_closures(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, GClosure *method_call_closure, GClosure *get_property_closure, GClosure *set_property_closure, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_register_object_with_closures$descriptor() {
        return g_dbus_connection_register_object_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_object_with_closures(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, GClosure *method_call_closure, GClosure *get_property_closure, GClosure *set_property_closure, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_register_object_with_closures$handle() {
        return g_dbus_connection_register_object_with_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_object_with_closures(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, GClosure *method_call_closure, GClosure *get_property_closure, GClosure *set_property_closure, GError **error)
     * }
     */
    public static int g_dbus_connection_register_object_with_closures(MemorySegment connection, MemorySegment object_path, MemorySegment interface_info, MemorySegment method_call_closure, MemorySegment get_property_closure, MemorySegment set_property_closure, MemorySegment error) {
        var mh$ = g_dbus_connection_register_object_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_register_object_with_closures", connection, object_path, interface_info, method_call_closure, get_property_closure, set_property_closure, error);
            }
            return (int)mh$.invokeExact(connection, object_path, interface_info, method_call_closure, get_property_closure, set_property_closure, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_unregister_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_unregister_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_unregister_object(GDBusConnection *connection, guint registration_id)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_unregister_object$descriptor() {
        return g_dbus_connection_unregister_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_unregister_object(GDBusConnection *connection, guint registration_id)
     * }
     */
    public static MethodHandle g_dbus_connection_unregister_object$handle() {
        return g_dbus_connection_unregister_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_unregister_object(GDBusConnection *connection, guint registration_id)
     * }
     */
    public static int g_dbus_connection_unregister_object(MemorySegment connection, int registration_id) {
        var mh$ = g_dbus_connection_unregister_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_unregister_object", connection, registration_id);
            }
            return (int)mh$.invokeExact(connection, registration_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_register_subtree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_register_subtree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_subtree(GDBusConnection *connection, const gchar *object_path, const GDBusSubtreeVTable *vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_register_subtree$descriptor() {
        return g_dbus_connection_register_subtree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_subtree(GDBusConnection *connection, const gchar *object_path, const GDBusSubtreeVTable *vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_register_subtree$handle() {
        return g_dbus_connection_register_subtree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_dbus_connection_register_subtree(GDBusConnection *connection, const gchar *object_path, const GDBusSubtreeVTable *vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, GError **error)
     * }
     */
    public static int g_dbus_connection_register_subtree(MemorySegment connection, MemorySegment object_path, MemorySegment vtable, int flags, MemorySegment user_data, MemorySegment user_data_free_func, MemorySegment error) {
        var mh$ = g_dbus_connection_register_subtree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_register_subtree", connection, object_path, vtable, flags, user_data, user_data_free_func, error);
            }
            return (int)mh$.invokeExact(connection, object_path, vtable, flags, user_data, user_data_free_func, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_unregister_subtree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_unregister_subtree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_unregister_subtree(GDBusConnection *connection, guint registration_id)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_unregister_subtree$descriptor() {
        return g_dbus_connection_unregister_subtree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_unregister_subtree(GDBusConnection *connection, guint registration_id)
     * }
     */
    public static MethodHandle g_dbus_connection_unregister_subtree$handle() {
        return g_dbus_connection_unregister_subtree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_unregister_subtree(GDBusConnection *connection, guint registration_id)
     * }
     */
    public static int g_dbus_connection_unregister_subtree(MemorySegment connection, int registration_id) {
        var mh$ = g_dbus_connection_unregister_subtree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_unregister_subtree", connection, registration_id);
            }
            return (int)mh$.invokeExact(connection, registration_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_signal_subscribe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_signal_subscribe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_signal_subscribe(GDBusConnection *connection, const gchar *sender, const gchar *interface_name, const gchar *member, const gchar *object_path, const gchar *arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_signal_subscribe$descriptor() {
        return g_dbus_connection_signal_subscribe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_signal_subscribe(GDBusConnection *connection, const gchar *sender, const gchar *interface_name, const gchar *member, const gchar *object_path, const gchar *arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle g_dbus_connection_signal_subscribe$handle() {
        return g_dbus_connection_signal_subscribe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_dbus_connection_signal_subscribe(GDBusConnection *connection, const gchar *sender, const gchar *interface_name, const gchar *member, const gchar *object_path, const gchar *arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static int g_dbus_connection_signal_subscribe(MemorySegment connection, MemorySegment sender, MemorySegment interface_name, MemorySegment member, MemorySegment object_path, MemorySegment arg0, int flags, MemorySegment callback, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = g_dbus_connection_signal_subscribe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_signal_subscribe", connection, sender, interface_name, member, object_path, arg0, flags, callback, user_data, user_data_free_func);
            }
            return (int)mh$.invokeExact(connection, sender, interface_name, member, object_path, arg0, flags, callback, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_signal_unsubscribe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_signal_unsubscribe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_signal_unsubscribe(GDBusConnection *connection, guint subscription_id)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_signal_unsubscribe$descriptor() {
        return g_dbus_connection_signal_unsubscribe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_signal_unsubscribe(GDBusConnection *connection, guint subscription_id)
     * }
     */
    public static MethodHandle g_dbus_connection_signal_unsubscribe$handle() {
        return g_dbus_connection_signal_unsubscribe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_signal_unsubscribe(GDBusConnection *connection, guint subscription_id)
     * }
     */
    public static void g_dbus_connection_signal_unsubscribe(MemorySegment connection, int subscription_id) {
        var mh$ = g_dbus_connection_signal_unsubscribe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_signal_unsubscribe", connection, subscription_id);
            }
            mh$.invokeExact(connection, subscription_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_add_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_add_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_add_filter(GDBusConnection *connection, GDBusMessageFilterFunction filter_function, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_add_filter$descriptor() {
        return g_dbus_connection_add_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_add_filter(GDBusConnection *connection, GDBusMessageFilterFunction filter_function, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle g_dbus_connection_add_filter$handle() {
        return g_dbus_connection_add_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_dbus_connection_add_filter(GDBusConnection *connection, GDBusMessageFilterFunction filter_function, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static int g_dbus_connection_add_filter(MemorySegment connection, MemorySegment filter_function, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = g_dbus_connection_add_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_add_filter", connection, filter_function, user_data, user_data_free_func);
            }
            return (int)mh$.invokeExact(connection, filter_function, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_remove_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_remove_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_remove_filter(GDBusConnection *connection, guint filter_id)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_remove_filter$descriptor() {
        return g_dbus_connection_remove_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_remove_filter(GDBusConnection *connection, guint filter_id)
     * }
     */
    public static MethodHandle g_dbus_connection_remove_filter$handle() {
        return g_dbus_connection_remove_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_remove_filter(GDBusConnection *connection, guint filter_id)
     * }
     */
    public static void g_dbus_connection_remove_filter(MemorySegment connection, int filter_id) {
        var mh$ = g_dbus_connection_remove_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_remove_filter", connection, filter_id);
            }
            mh$.invokeExact(connection, filter_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_dbus_error_quark()
     * }
     */
    public static FunctionDescriptor g_dbus_error_quark$descriptor() {
        return g_dbus_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_dbus_error_quark()
     * }
     */
    public static MethodHandle g_dbus_error_quark$handle() {
        return g_dbus_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_dbus_error_quark()
     * }
     */
    public static int g_dbus_error_quark() {
        var mh$ = g_dbus_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_is_remote_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_is_remote_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_is_remote_error(const GError *error)
     * }
     */
    public static FunctionDescriptor g_dbus_error_is_remote_error$descriptor() {
        return g_dbus_error_is_remote_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_is_remote_error(const GError *error)
     * }
     */
    public static MethodHandle g_dbus_error_is_remote_error$handle() {
        return g_dbus_error_is_remote_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_is_remote_error(const GError *error)
     * }
     */
    public static int g_dbus_error_is_remote_error(MemorySegment error) {
        var mh$ = g_dbus_error_is_remote_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_is_remote_error", error);
            }
            return (int)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_get_remote_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_get_remote_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_error_get_remote_error(const GError *error)
     * }
     */
    public static FunctionDescriptor g_dbus_error_get_remote_error$descriptor() {
        return g_dbus_error_get_remote_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_error_get_remote_error(const GError *error)
     * }
     */
    public static MethodHandle g_dbus_error_get_remote_error$handle() {
        return g_dbus_error_get_remote_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_error_get_remote_error(const GError *error)
     * }
     */
    public static MemorySegment g_dbus_error_get_remote_error(MemorySegment error) {
        var mh$ = g_dbus_error_get_remote_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_get_remote_error", error);
            }
            return (MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_strip_remote_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_strip_remote_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_strip_remote_error(GError *error)
     * }
     */
    public static FunctionDescriptor g_dbus_error_strip_remote_error$descriptor() {
        return g_dbus_error_strip_remote_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_strip_remote_error(GError *error)
     * }
     */
    public static MethodHandle g_dbus_error_strip_remote_error$handle() {
        return g_dbus_error_strip_remote_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_strip_remote_error(GError *error)
     * }
     */
    public static int g_dbus_error_strip_remote_error(MemorySegment error) {
        var mh$ = g_dbus_error_strip_remote_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_strip_remote_error", error);
            }
            return (int)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_register_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_register_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_register_error(GQuark error_domain, gint error_code, const gchar *dbus_error_name)
     * }
     */
    public static FunctionDescriptor g_dbus_error_register_error$descriptor() {
        return g_dbus_error_register_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_register_error(GQuark error_domain, gint error_code, const gchar *dbus_error_name)
     * }
     */
    public static MethodHandle g_dbus_error_register_error$handle() {
        return g_dbus_error_register_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_register_error(GQuark error_domain, gint error_code, const gchar *dbus_error_name)
     * }
     */
    public static int g_dbus_error_register_error(int error_domain, int error_code, MemorySegment dbus_error_name) {
        var mh$ = g_dbus_error_register_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_register_error", error_domain, error_code, dbus_error_name);
            }
            return (int)mh$.invokeExact(error_domain, error_code, dbus_error_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_unregister_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_unregister_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_unregister_error(GQuark error_domain, gint error_code, const gchar *dbus_error_name)
     * }
     */
    public static FunctionDescriptor g_dbus_error_unregister_error$descriptor() {
        return g_dbus_error_unregister_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_unregister_error(GQuark error_domain, gint error_code, const gchar *dbus_error_name)
     * }
     */
    public static MethodHandle g_dbus_error_unregister_error$handle() {
        return g_dbus_error_unregister_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_error_unregister_error(GQuark error_domain, gint error_code, const gchar *dbus_error_name)
     * }
     */
    public static int g_dbus_error_unregister_error(int error_domain, int error_code, MemorySegment dbus_error_name) {
        var mh$ = g_dbus_error_unregister_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_unregister_error", error_domain, error_code, dbus_error_name);
            }
            return (int)mh$.invokeExact(error_domain, error_code, dbus_error_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_register_error_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_register_error_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_error_register_error_domain(const gchar *error_domain_quark_name, volatile gsize *quark_volatile, const GDBusErrorEntry *entries, guint num_entries)
     * }
     */
    public static FunctionDescriptor g_dbus_error_register_error_domain$descriptor() {
        return g_dbus_error_register_error_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_error_register_error_domain(const gchar *error_domain_quark_name, volatile gsize *quark_volatile, const GDBusErrorEntry *entries, guint num_entries)
     * }
     */
    public static MethodHandle g_dbus_error_register_error_domain$handle() {
        return g_dbus_error_register_error_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_error_register_error_domain(const gchar *error_domain_quark_name, volatile gsize *quark_volatile, const GDBusErrorEntry *entries, guint num_entries)
     * }
     */
    public static void g_dbus_error_register_error_domain(MemorySegment error_domain_quark_name, MemorySegment quark_volatile, MemorySegment entries, int num_entries) {
        var mh$ = g_dbus_error_register_error_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_register_error_domain", error_domain_quark_name, quark_volatile, entries, num_entries);
            }
            mh$.invokeExact(error_domain_quark_name, quark_volatile, entries, num_entries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_new_for_dbus_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_new_for_dbus_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GError *g_dbus_error_new_for_dbus_error(const gchar *dbus_error_name, const gchar *dbus_error_message)
     * }
     */
    public static FunctionDescriptor g_dbus_error_new_for_dbus_error$descriptor() {
        return g_dbus_error_new_for_dbus_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GError *g_dbus_error_new_for_dbus_error(const gchar *dbus_error_name, const gchar *dbus_error_message)
     * }
     */
    public static MethodHandle g_dbus_error_new_for_dbus_error$handle() {
        return g_dbus_error_new_for_dbus_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GError *g_dbus_error_new_for_dbus_error(const gchar *dbus_error_name, const gchar *dbus_error_message)
     * }
     */
    public static MemorySegment g_dbus_error_new_for_dbus_error(MemorySegment dbus_error_name, MemorySegment dbus_error_message) {
        var mh$ = g_dbus_error_new_for_dbus_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_new_for_dbus_error", dbus_error_name, dbus_error_message);
            }
            return (MemorySegment)mh$.invokeExact(dbus_error_name, dbus_error_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_dbus_error_set_dbus_error(GError **error, const gchar *dbus_error_name, const gchar *dbus_error_message, const gchar *format, ...)
     * }
     */
    public static class g_dbus_error_set_dbus_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_dbus_error_set_dbus_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_dbus_error_set_dbus_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_dbus_error_set_dbus_error(GError **error, const gchar *dbus_error_name, const gchar *dbus_error_message, const gchar *format, ...)
         * }
         */
        public static g_dbus_error_set_dbus_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_dbus_error_set_dbus_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment error, MemorySegment dbus_error_name, MemorySegment dbus_error_message, MemorySegment format, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_dbus_error_set_dbus_error", error, dbus_error_name, dbus_error_message, format, x4);
                }
                spreader.invokeExact(error, dbus_error_name, dbus_error_message, format, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_dbus_error_encode_gerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_encode_gerror"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_error_encode_gerror(const GError *error)
     * }
     */
    public static FunctionDescriptor g_dbus_error_encode_gerror$descriptor() {
        return g_dbus_error_encode_gerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_error_encode_gerror(const GError *error)
     * }
     */
    public static MethodHandle g_dbus_error_encode_gerror$handle() {
        return g_dbus_error_encode_gerror.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_error_encode_gerror(const GError *error)
     * }
     */
    public static MemorySegment g_dbus_error_encode_gerror(MemorySegment error) {
        var mh$ = g_dbus_error_encode_gerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_encode_gerror", error);
            }
            return (MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_interface_get_type$descriptor() {
        return g_dbus_interface_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_get_type()
     * }
     */
    public static MethodHandle g_dbus_interface_get_type$handle() {
        return g_dbus_interface_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_interface_get_type()
     * }
     */
    public static long g_dbus_interface_get_type() {
        var mh$ = g_dbus_interface_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_get_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_get_info(GDBusInterface *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_get_info$descriptor() {
        return g_dbus_interface_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_get_info(GDBusInterface *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_get_info$handle() {
        return g_dbus_interface_get_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_get_info(GDBusInterface *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_get_info(MemorySegment interface_) {
        var mh$ = g_dbus_interface_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_get_info", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_get_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_interface_get_object(GDBusInterface *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_get_object$descriptor() {
        return g_dbus_interface_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_interface_get_object(GDBusInterface *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_get_object$handle() {
        return g_dbus_interface_get_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_interface_get_object(GDBusInterface *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_get_object(MemorySegment interface_) {
        var mh$ = g_dbus_interface_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_get_object", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_set_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_set_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_set_object(GDBusInterface *interface_, GDBusObject *object)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_set_object$descriptor() {
        return g_dbus_interface_set_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_set_object(GDBusInterface *interface_, GDBusObject *object)
     * }
     */
    public static MethodHandle g_dbus_interface_set_object$handle() {
        return g_dbus_interface_set_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_set_object(GDBusInterface *interface_, GDBusObject *object)
     * }
     */
    public static void g_dbus_interface_set_object(MemorySegment interface_, MemorySegment object) {
        var mh$ = g_dbus_interface_set_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_set_object", interface_, object);
            }
            mh$.invokeExact(interface_, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_dup_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_dup_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_interface_dup_object(GDBusInterface *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_dup_object$descriptor() {
        return g_dbus_interface_dup_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_interface_dup_object(GDBusInterface *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_dup_object$handle() {
        return g_dbus_interface_dup_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_interface_dup_object(GDBusInterface *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_dup_object(MemorySegment interface_) {
        var mh$ = g_dbus_interface_dup_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_dup_object", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_skeleton_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_type$descriptor() {
        return g_dbus_interface_skeleton_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_skeleton_get_type()
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_type$handle() {
        return g_dbus_interface_skeleton_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_interface_skeleton_get_type()
     * }
     */
    public static long g_dbus_interface_skeleton_get_type() {
        var mh$ = g_dbus_interface_skeleton_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_flags$descriptor() {
        return g_dbus_interface_skeleton_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_flags$handle() {
        return g_dbus_interface_skeleton_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static int g_dbus_interface_skeleton_get_flags(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_flags", interface_);
            }
            return (int)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_set_flags(GDBusInterfaceSkeleton *interface_, GDBusInterfaceSkeletonFlags flags)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_set_flags$descriptor() {
        return g_dbus_interface_skeleton_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_set_flags(GDBusInterfaceSkeleton *interface_, GDBusInterfaceSkeletonFlags flags)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_set_flags$handle() {
        return g_dbus_interface_skeleton_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_set_flags(GDBusInterfaceSkeleton *interface_, GDBusInterfaceSkeletonFlags flags)
     * }
     */
    public static void g_dbus_interface_skeleton_set_flags(MemorySegment interface_, int flags) {
        var mh$ = g_dbus_interface_skeleton_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_set_flags", interface_, flags);
            }
            mh$.invokeExact(interface_, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_info$descriptor() {
        return g_dbus_interface_skeleton_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_info$handle() {
        return g_dbus_interface_skeleton_get_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_skeleton_get_info(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_info", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_vtable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_vtable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_vtable$descriptor() {
        return g_dbus_interface_skeleton_get_vtable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_vtable$handle() {
        return g_dbus_interface_skeleton_get_vtable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_skeleton_get_vtable(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_get_vtable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_vtable", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_interface_skeleton_get_properties(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_properties$descriptor() {
        return g_dbus_interface_skeleton_get_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_interface_skeleton_get_properties(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_properties$handle() {
        return g_dbus_interface_skeleton_get_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_interface_skeleton_get_properties(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_skeleton_get_properties(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_get_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_properties", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_flush(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_flush$descriptor() {
        return g_dbus_interface_skeleton_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_flush(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_flush$handle() {
        return g_dbus_interface_skeleton_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_flush(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static void g_dbus_interface_skeleton_flush(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_flush", interface_);
            }
            mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_export {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_export"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection, const gchar *object_path, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_export$descriptor() {
        return g_dbus_interface_skeleton_export.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection, const gchar *object_path, GError **error)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_export$handle() {
        return g_dbus_interface_skeleton_export.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection, const gchar *object_path, GError **error)
     * }
     */
    public static int g_dbus_interface_skeleton_export(MemorySegment interface_, MemorySegment connection, MemorySegment object_path, MemorySegment error) {
        var mh$ = g_dbus_interface_skeleton_export.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_export", interface_, connection, object_path, error);
            }
            return (int)mh$.invokeExact(interface_, connection, object_path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_unexport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_unexport"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_unexport(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_unexport$descriptor() {
        return g_dbus_interface_skeleton_unexport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_unexport(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_unexport$handle() {
        return g_dbus_interface_skeleton_unexport.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_unexport(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static void g_dbus_interface_skeleton_unexport(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_unexport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_unexport", interface_);
            }
            mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_unexport_from_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_unexport_from_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_unexport_from_connection(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_unexport_from_connection$descriptor() {
        return g_dbus_interface_skeleton_unexport_from_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_unexport_from_connection(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_unexport_from_connection$handle() {
        return g_dbus_interface_skeleton_unexport_from_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_skeleton_unexport_from_connection(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection)
     * }
     */
    public static void g_dbus_interface_skeleton_unexport_from_connection(MemorySegment interface_, MemorySegment connection) {
        var mh$ = g_dbus_interface_skeleton_unexport_from_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_unexport_from_connection", interface_, connection);
            }
            mh$.invokeExact(interface_, connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_interface_skeleton_get_connection(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_connection$descriptor() {
        return g_dbus_interface_skeleton_get_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_interface_skeleton_get_connection(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_connection$handle() {
        return g_dbus_interface_skeleton_get_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_interface_skeleton_get_connection(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_skeleton_get_connection(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_get_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_connection", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_connections {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_connections"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_dbus_interface_skeleton_get_connections(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_connections$descriptor() {
        return g_dbus_interface_skeleton_get_connections.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_dbus_interface_skeleton_get_connections(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_connections$handle() {
        return g_dbus_interface_skeleton_get_connections.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_dbus_interface_skeleton_get_connections(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_skeleton_get_connections(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_get_connections.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_connections", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_has_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_has_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_interface_skeleton_has_connection(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_has_connection$descriptor() {
        return g_dbus_interface_skeleton_has_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_interface_skeleton_has_connection(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_has_connection$handle() {
        return g_dbus_interface_skeleton_has_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_interface_skeleton_has_connection(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection)
     * }
     */
    public static int g_dbus_interface_skeleton_has_connection(MemorySegment interface_, MemorySegment connection) {
        var mh$ = g_dbus_interface_skeleton_has_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_has_connection", interface_, connection);
            }
            return (int)mh$.invokeExact(interface_, connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_get_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_get_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_interface_skeleton_get_object_path(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_get_object_path$descriptor() {
        return g_dbus_interface_skeleton_get_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_interface_skeleton_get_object_path(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_get_object_path$handle() {
        return g_dbus_interface_skeleton_get_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_interface_skeleton_get_object_path(GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MemorySegment g_dbus_interface_skeleton_get_object_path(MemorySegment interface_) {
        var mh$ = g_dbus_interface_skeleton_get_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_get_object_path", interface_);
            }
            return (MemorySegment)mh$.invokeExact(interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_annotation_info_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_annotation_info_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_annotation_info_lookup(GDBusAnnotationInfo **annotations, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_dbus_annotation_info_lookup$descriptor() {
        return g_dbus_annotation_info_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_annotation_info_lookup(GDBusAnnotationInfo **annotations, const gchar *name)
     * }
     */
    public static MethodHandle g_dbus_annotation_info_lookup$handle() {
        return g_dbus_annotation_info_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_annotation_info_lookup(GDBusAnnotationInfo **annotations, const gchar *name)
     * }
     */
    public static MemorySegment g_dbus_annotation_info_lookup(MemorySegment annotations, MemorySegment name) {
        var mh$ = g_dbus_annotation_info_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_annotation_info_lookup", annotations, name);
            }
            return (MemorySegment)mh$.invokeExact(annotations, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_lookup_method {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_lookup_method"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMethodInfo *g_dbus_interface_info_lookup_method(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_lookup_method$descriptor() {
        return g_dbus_interface_info_lookup_method.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMethodInfo *g_dbus_interface_info_lookup_method(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static MethodHandle g_dbus_interface_info_lookup_method$handle() {
        return g_dbus_interface_info_lookup_method.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMethodInfo *g_dbus_interface_info_lookup_method(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static MemorySegment g_dbus_interface_info_lookup_method(MemorySegment info, MemorySegment name) {
        var mh$ = g_dbus_interface_info_lookup_method.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_lookup_method", info, name);
            }
            return (MemorySegment)mh$.invokeExact(info, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_lookup_signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_lookup_signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusSignalInfo *g_dbus_interface_info_lookup_signal(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_lookup_signal$descriptor() {
        return g_dbus_interface_info_lookup_signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusSignalInfo *g_dbus_interface_info_lookup_signal(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static MethodHandle g_dbus_interface_info_lookup_signal$handle() {
        return g_dbus_interface_info_lookup_signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusSignalInfo *g_dbus_interface_info_lookup_signal(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static MemorySegment g_dbus_interface_info_lookup_signal(MemorySegment info, MemorySegment name) {
        var mh$ = g_dbus_interface_info_lookup_signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_lookup_signal", info, name);
            }
            return (MemorySegment)mh$.invokeExact(info, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_lookup_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_lookup_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusPropertyInfo *g_dbus_interface_info_lookup_property(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_lookup_property$descriptor() {
        return g_dbus_interface_info_lookup_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusPropertyInfo *g_dbus_interface_info_lookup_property(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static MethodHandle g_dbus_interface_info_lookup_property$handle() {
        return g_dbus_interface_info_lookup_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusPropertyInfo *g_dbus_interface_info_lookup_property(GDBusInterfaceInfo *info, const gchar *name)
     * }
     */
    public static MemorySegment g_dbus_interface_info_lookup_property(MemorySegment info, MemorySegment name) {
        var mh$ = g_dbus_interface_info_lookup_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_lookup_property", info, name);
            }
            return (MemorySegment)mh$.invokeExact(info, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_cache_build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_cache_build"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_cache_build(GDBusInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_cache_build$descriptor() {
        return g_dbus_interface_info_cache_build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_cache_build(GDBusInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_dbus_interface_info_cache_build$handle() {
        return g_dbus_interface_info_cache_build.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_cache_build(GDBusInterfaceInfo *info)
     * }
     */
    public static void g_dbus_interface_info_cache_build(MemorySegment info) {
        var mh$ = g_dbus_interface_info_cache_build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_cache_build", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_cache_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_cache_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_cache_release(GDBusInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_cache_release$descriptor() {
        return g_dbus_interface_info_cache_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_cache_release(GDBusInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_dbus_interface_info_cache_release$handle() {
        return g_dbus_interface_info_cache_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_cache_release(GDBusInterfaceInfo *info)
     * }
     */
    public static void g_dbus_interface_info_cache_release(MemorySegment info) {
        var mh$ = g_dbus_interface_info_cache_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_cache_release", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_generate_xml {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_generate_xml"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_generate_xml(GDBusInterfaceInfo *info, guint indent, GString *string_builder)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_generate_xml$descriptor() {
        return g_dbus_interface_info_generate_xml.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_generate_xml(GDBusInterfaceInfo *info, guint indent, GString *string_builder)
     * }
     */
    public static MethodHandle g_dbus_interface_info_generate_xml$handle() {
        return g_dbus_interface_info_generate_xml.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_generate_xml(GDBusInterfaceInfo *info, guint indent, GString *string_builder)
     * }
     */
    public static void g_dbus_interface_info_generate_xml(MemorySegment info, int indent, MemorySegment string_builder) {
        var mh$ = g_dbus_interface_info_generate_xml.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_generate_xml", info, indent, string_builder);
            }
            mh$.invokeExact(info, indent, string_builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_node_info_new_for_xml {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_node_info_new_for_xml"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusNodeInfo *g_dbus_node_info_new_for_xml(const gchar *xml_data, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_node_info_new_for_xml$descriptor() {
        return g_dbus_node_info_new_for_xml.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusNodeInfo *g_dbus_node_info_new_for_xml(const gchar *xml_data, GError **error)
     * }
     */
    public static MethodHandle g_dbus_node_info_new_for_xml$handle() {
        return g_dbus_node_info_new_for_xml.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusNodeInfo *g_dbus_node_info_new_for_xml(const gchar *xml_data, GError **error)
     * }
     */
    public static MemorySegment g_dbus_node_info_new_for_xml(MemorySegment xml_data, MemorySegment error) {
        var mh$ = g_dbus_node_info_new_for_xml.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_node_info_new_for_xml", xml_data, error);
            }
            return (MemorySegment)mh$.invokeExact(xml_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_node_info_lookup_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_node_info_lookup_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_node_info_lookup_interface(GDBusNodeInfo *info, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_dbus_node_info_lookup_interface$descriptor() {
        return g_dbus_node_info_lookup_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_node_info_lookup_interface(GDBusNodeInfo *info, const gchar *name)
     * }
     */
    public static MethodHandle g_dbus_node_info_lookup_interface$handle() {
        return g_dbus_node_info_lookup_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_node_info_lookup_interface(GDBusNodeInfo *info, const gchar *name)
     * }
     */
    public static MemorySegment g_dbus_node_info_lookup_interface(MemorySegment info, MemorySegment name) {
        var mh$ = g_dbus_node_info_lookup_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_node_info_lookup_interface", info, name);
            }
            return (MemorySegment)mh$.invokeExact(info, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_node_info_generate_xml {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_node_info_generate_xml"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_node_info_generate_xml(GDBusNodeInfo *info, guint indent, GString *string_builder)
     * }
     */
    public static FunctionDescriptor g_dbus_node_info_generate_xml$descriptor() {
        return g_dbus_node_info_generate_xml.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_node_info_generate_xml(GDBusNodeInfo *info, guint indent, GString *string_builder)
     * }
     */
    public static MethodHandle g_dbus_node_info_generate_xml$handle() {
        return g_dbus_node_info_generate_xml.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_node_info_generate_xml(GDBusNodeInfo *info, guint indent, GString *string_builder)
     * }
     */
    public static void g_dbus_node_info_generate_xml(MemorySegment info, int indent, MemorySegment string_builder) {
        var mh$ = g_dbus_node_info_generate_xml.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_node_info_generate_xml", info, indent, string_builder);
            }
            mh$.invokeExact(info, indent, string_builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_node_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_node_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusNodeInfo *g_dbus_node_info_ref(GDBusNodeInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_node_info_ref$descriptor() {
        return g_dbus_node_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusNodeInfo *g_dbus_node_info_ref(GDBusNodeInfo *info)
     * }
     */
    public static MethodHandle g_dbus_node_info_ref$handle() {
        return g_dbus_node_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusNodeInfo *g_dbus_node_info_ref(GDBusNodeInfo *info)
     * }
     */
    public static MemorySegment g_dbus_node_info_ref(MemorySegment info) {
        var mh$ = g_dbus_node_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_node_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_info_ref(GDBusInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_ref$descriptor() {
        return g_dbus_interface_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_info_ref(GDBusInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_dbus_interface_info_ref$handle() {
        return g_dbus_interface_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_interface_info_ref(GDBusInterfaceInfo *info)
     * }
     */
    public static MemorySegment g_dbus_interface_info_ref(MemorySegment info) {
        var mh$ = g_dbus_interface_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMethodInfo *g_dbus_method_info_ref(GDBusMethodInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_method_info_ref$descriptor() {
        return g_dbus_method_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMethodInfo *g_dbus_method_info_ref(GDBusMethodInfo *info)
     * }
     */
    public static MethodHandle g_dbus_method_info_ref$handle() {
        return g_dbus_method_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMethodInfo *g_dbus_method_info_ref(GDBusMethodInfo *info)
     * }
     */
    public static MemorySegment g_dbus_method_info_ref(MemorySegment info) {
        var mh$ = g_dbus_method_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_signal_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_signal_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusSignalInfo *g_dbus_signal_info_ref(GDBusSignalInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_signal_info_ref$descriptor() {
        return g_dbus_signal_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusSignalInfo *g_dbus_signal_info_ref(GDBusSignalInfo *info)
     * }
     */
    public static MethodHandle g_dbus_signal_info_ref$handle() {
        return g_dbus_signal_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusSignalInfo *g_dbus_signal_info_ref(GDBusSignalInfo *info)
     * }
     */
    public static MemorySegment g_dbus_signal_info_ref(MemorySegment info) {
        var mh$ = g_dbus_signal_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_signal_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_property_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_property_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusPropertyInfo *g_dbus_property_info_ref(GDBusPropertyInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_property_info_ref$descriptor() {
        return g_dbus_property_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusPropertyInfo *g_dbus_property_info_ref(GDBusPropertyInfo *info)
     * }
     */
    public static MethodHandle g_dbus_property_info_ref$handle() {
        return g_dbus_property_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusPropertyInfo *g_dbus_property_info_ref(GDBusPropertyInfo *info)
     * }
     */
    public static MemorySegment g_dbus_property_info_ref(MemorySegment info) {
        var mh$ = g_dbus_property_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_property_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_arg_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_arg_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusArgInfo *g_dbus_arg_info_ref(GDBusArgInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_arg_info_ref$descriptor() {
        return g_dbus_arg_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusArgInfo *g_dbus_arg_info_ref(GDBusArgInfo *info)
     * }
     */
    public static MethodHandle g_dbus_arg_info_ref$handle() {
        return g_dbus_arg_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusArgInfo *g_dbus_arg_info_ref(GDBusArgInfo *info)
     * }
     */
    public static MemorySegment g_dbus_arg_info_ref(MemorySegment info) {
        var mh$ = g_dbus_arg_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_arg_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_annotation_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_annotation_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusAnnotationInfo *g_dbus_annotation_info_ref(GDBusAnnotationInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_annotation_info_ref$descriptor() {
        return g_dbus_annotation_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusAnnotationInfo *g_dbus_annotation_info_ref(GDBusAnnotationInfo *info)
     * }
     */
    public static MethodHandle g_dbus_annotation_info_ref$handle() {
        return g_dbus_annotation_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusAnnotationInfo *g_dbus_annotation_info_ref(GDBusAnnotationInfo *info)
     * }
     */
    public static MemorySegment g_dbus_annotation_info_ref(MemorySegment info) {
        var mh$ = g_dbus_annotation_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_annotation_info_ref", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_node_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_node_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_node_info_unref(GDBusNodeInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_node_info_unref$descriptor() {
        return g_dbus_node_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_node_info_unref(GDBusNodeInfo *info)
     * }
     */
    public static MethodHandle g_dbus_node_info_unref$handle() {
        return g_dbus_node_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_node_info_unref(GDBusNodeInfo *info)
     * }
     */
    public static void g_dbus_node_info_unref(MemorySegment info) {
        var mh$ = g_dbus_node_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_node_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_unref(GDBusInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_unref$descriptor() {
        return g_dbus_interface_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_unref(GDBusInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_dbus_interface_info_unref$handle() {
        return g_dbus_interface_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_interface_info_unref(GDBusInterfaceInfo *info)
     * }
     */
    public static void g_dbus_interface_info_unref(MemorySegment info) {
        var mh$ = g_dbus_interface_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_method_info_unref(GDBusMethodInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_method_info_unref$descriptor() {
        return g_dbus_method_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_method_info_unref(GDBusMethodInfo *info)
     * }
     */
    public static MethodHandle g_dbus_method_info_unref$handle() {
        return g_dbus_method_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_method_info_unref(GDBusMethodInfo *info)
     * }
     */
    public static void g_dbus_method_info_unref(MemorySegment info) {
        var mh$ = g_dbus_method_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_signal_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_signal_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_signal_info_unref(GDBusSignalInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_signal_info_unref$descriptor() {
        return g_dbus_signal_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_signal_info_unref(GDBusSignalInfo *info)
     * }
     */
    public static MethodHandle g_dbus_signal_info_unref$handle() {
        return g_dbus_signal_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_signal_info_unref(GDBusSignalInfo *info)
     * }
     */
    public static void g_dbus_signal_info_unref(MemorySegment info) {
        var mh$ = g_dbus_signal_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_signal_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_property_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_property_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_property_info_unref(GDBusPropertyInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_property_info_unref$descriptor() {
        return g_dbus_property_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_property_info_unref(GDBusPropertyInfo *info)
     * }
     */
    public static MethodHandle g_dbus_property_info_unref$handle() {
        return g_dbus_property_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_property_info_unref(GDBusPropertyInfo *info)
     * }
     */
    public static void g_dbus_property_info_unref(MemorySegment info) {
        var mh$ = g_dbus_property_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_property_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_arg_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_arg_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_arg_info_unref(GDBusArgInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_arg_info_unref$descriptor() {
        return g_dbus_arg_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_arg_info_unref(GDBusArgInfo *info)
     * }
     */
    public static MethodHandle g_dbus_arg_info_unref$handle() {
        return g_dbus_arg_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_arg_info_unref(GDBusArgInfo *info)
     * }
     */
    public static void g_dbus_arg_info_unref(MemorySegment info) {
        var mh$ = g_dbus_arg_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_arg_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_annotation_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_annotation_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_annotation_info_unref(GDBusAnnotationInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_annotation_info_unref$descriptor() {
        return g_dbus_annotation_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_annotation_info_unref(GDBusAnnotationInfo *info)
     * }
     */
    public static MethodHandle g_dbus_annotation_info_unref$handle() {
        return g_dbus_annotation_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_annotation_info_unref(GDBusAnnotationInfo *info)
     * }
     */
    public static void g_dbus_annotation_info_unref(MemorySegment info) {
        var mh$ = g_dbus_annotation_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_annotation_info_unref", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_node_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_node_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_node_info_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_node_info_get_type$descriptor() {
        return g_dbus_node_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_node_info_get_type()
     * }
     */
    public static MethodHandle g_dbus_node_info_get_type$handle() {
        return g_dbus_node_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_node_info_get_type()
     * }
     */
    public static long g_dbus_node_info_get_type() {
        var mh$ = g_dbus_node_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_node_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_info_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_interface_info_get_type$descriptor() {
        return g_dbus_interface_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_info_get_type()
     * }
     */
    public static MethodHandle g_dbus_interface_info_get_type$handle() {
        return g_dbus_interface_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_interface_info_get_type()
     * }
     */
    public static long g_dbus_interface_info_get_type() {
        var mh$ = g_dbus_interface_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_method_info_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_method_info_get_type$descriptor() {
        return g_dbus_method_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_method_info_get_type()
     * }
     */
    public static MethodHandle g_dbus_method_info_get_type$handle() {
        return g_dbus_method_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_method_info_get_type()
     * }
     */
    public static long g_dbus_method_info_get_type() {
        var mh$ = g_dbus_method_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_signal_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_signal_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_signal_info_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_signal_info_get_type$descriptor() {
        return g_dbus_signal_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_signal_info_get_type()
     * }
     */
    public static MethodHandle g_dbus_signal_info_get_type$handle() {
        return g_dbus_signal_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_signal_info_get_type()
     * }
     */
    public static long g_dbus_signal_info_get_type() {
        var mh$ = g_dbus_signal_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_signal_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_property_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_property_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_property_info_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_property_info_get_type$descriptor() {
        return g_dbus_property_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_property_info_get_type()
     * }
     */
    public static MethodHandle g_dbus_property_info_get_type$handle() {
        return g_dbus_property_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_property_info_get_type()
     * }
     */
    public static long g_dbus_property_info_get_type() {
        var mh$ = g_dbus_property_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_property_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_arg_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_arg_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_arg_info_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_arg_info_get_type$descriptor() {
        return g_dbus_arg_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_arg_info_get_type()
     * }
     */
    public static MethodHandle g_dbus_arg_info_get_type$handle() {
        return g_dbus_arg_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_arg_info_get_type()
     * }
     */
    public static long g_dbus_arg_info_get_type() {
        var mh$ = g_dbus_arg_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_arg_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_annotation_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_annotation_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_annotation_info_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_annotation_info_get_type$descriptor() {
        return g_dbus_annotation_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_annotation_info_get_type()
     * }
     */
    public static MethodHandle g_dbus_annotation_info_get_type$handle() {
        return g_dbus_annotation_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_annotation_info_get_type()
     * }
     */
    public static long g_dbus_annotation_info_get_type() {
        var mh$ = g_dbus_annotation_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_annotation_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_menu_model_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_menu_model_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_menu_model_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_menu_model_get_type$descriptor() {
        return g_dbus_menu_model_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_menu_model_get_type()
     * }
     */
    public static MethodHandle g_dbus_menu_model_get_type$handle() {
        return g_dbus_menu_model_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_menu_model_get_type()
     * }
     */
    public static long g_dbus_menu_model_get_type() {
        var mh$ = g_dbus_menu_model_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_menu_model_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_menu_model_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_menu_model_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMenuModel *g_dbus_menu_model_get(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_menu_model_get$descriptor() {
        return g_dbus_menu_model_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMenuModel *g_dbus_menu_model_get(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_menu_model_get$handle() {
        return g_dbus_menu_model_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMenuModel *g_dbus_menu_model_get(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path)
     * }
     */
    public static MemorySegment g_dbus_menu_model_get(MemorySegment connection, MemorySegment bus_name, MemorySegment object_path) {
        var mh$ = g_dbus_menu_model_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_menu_model_get", connection, bus_name, object_path);
            }
            return (MemorySegment)mh$.invokeExact(connection, bus_name, object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_type$descriptor() {
        return g_dbus_message_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_get_type()
     * }
     */
    public static MethodHandle g_dbus_message_get_type$handle() {
        return g_dbus_message_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_message_get_type()
     * }
     */
    public static long g_dbus_message_get_type() {
        var mh$ = g_dbus_message_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new()
     * }
     */
    public static FunctionDescriptor g_dbus_message_new$descriptor() {
        return g_dbus_message_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new()
     * }
     */
    public static MethodHandle g_dbus_message_new$handle() {
        return g_dbus_message_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new()
     * }
     */
    public static MemorySegment g_dbus_message_new() {
        var mh$ = g_dbus_message_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_new_signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_new_signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_signal(const gchar *path, const gchar *interface_, const gchar *signal)
     * }
     */
    public static FunctionDescriptor g_dbus_message_new_signal$descriptor() {
        return g_dbus_message_new_signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_signal(const gchar *path, const gchar *interface_, const gchar *signal)
     * }
     */
    public static MethodHandle g_dbus_message_new_signal$handle() {
        return g_dbus_message_new_signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_signal(const gchar *path, const gchar *interface_, const gchar *signal)
     * }
     */
    public static MemorySegment g_dbus_message_new_signal(MemorySegment path, MemorySegment interface_, MemorySegment signal) {
        var mh$ = g_dbus_message_new_signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_new_signal", path, interface_, signal);
            }
            return (MemorySegment)mh$.invokeExact(path, interface_, signal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_new_method_call {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_new_method_call"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_call(const gchar *name, const gchar *path, const gchar *interface_, const gchar *method)
     * }
     */
    public static FunctionDescriptor g_dbus_message_new_method_call$descriptor() {
        return g_dbus_message_new_method_call.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_call(const gchar *name, const gchar *path, const gchar *interface_, const gchar *method)
     * }
     */
    public static MethodHandle g_dbus_message_new_method_call$handle() {
        return g_dbus_message_new_method_call.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_call(const gchar *name, const gchar *path, const gchar *interface_, const gchar *method)
     * }
     */
    public static MemorySegment g_dbus_message_new_method_call(MemorySegment name, MemorySegment path, MemorySegment interface_, MemorySegment method) {
        var mh$ = g_dbus_message_new_method_call.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_new_method_call", name, path, interface_, method);
            }
            return (MemorySegment)mh$.invokeExact(name, path, interface_, method);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_new_method_reply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_new_method_reply"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_reply(GDBusMessage *method_call_message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_new_method_reply$descriptor() {
        return g_dbus_message_new_method_reply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_reply(GDBusMessage *method_call_message)
     * }
     */
    public static MethodHandle g_dbus_message_new_method_reply$handle() {
        return g_dbus_message_new_method_reply.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_reply(GDBusMessage *method_call_message)
     * }
     */
    public static MemorySegment g_dbus_message_new_method_reply(MemorySegment method_call_message) {
        var mh$ = g_dbus_message_new_method_reply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_new_method_reply", method_call_message);
            }
            return (MemorySegment)mh$.invokeExact(method_call_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_error(GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message_format, ...)
     * }
     */
    public static class g_dbus_message_new_method_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_dbus_message_new_method_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_dbus_message_new_method_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GDBusMessage *g_dbus_message_new_method_error(GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message_format, ...)
         * }
         */
        public static g_dbus_message_new_method_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_dbus_message_new_method_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment method_call_message, MemorySegment error_name, MemorySegment error_message_format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_dbus_message_new_method_error", method_call_message, error_name, error_message_format, x3);
                }
                return (MemorySegment)spreader.invokeExact(method_call_message, error_name, error_message_format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_dbus_message_new_method_error_literal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_new_method_error_literal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_error_literal(GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_new_method_error_literal$descriptor() {
        return g_dbus_message_new_method_error_literal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_error_literal(GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message)
     * }
     */
    public static MethodHandle g_dbus_message_new_method_error_literal$handle() {
        return g_dbus_message_new_method_error_literal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_method_error_literal(GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message)
     * }
     */
    public static MemorySegment g_dbus_message_new_method_error_literal(MemorySegment method_call_message, MemorySegment error_name, MemorySegment error_message) {
        var mh$ = g_dbus_message_new_method_error_literal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_new_method_error_literal", method_call_message, error_name, error_message);
            }
            return (MemorySegment)mh$.invokeExact(method_call_message, error_name, error_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_message_print(GDBusMessage *message, guint indent)
     * }
     */
    public static FunctionDescriptor g_dbus_message_print$descriptor() {
        return g_dbus_message_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_message_print(GDBusMessage *message, guint indent)
     * }
     */
    public static MethodHandle g_dbus_message_print$handle() {
        return g_dbus_message_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_message_print(GDBusMessage *message, guint indent)
     * }
     */
    public static MemorySegment g_dbus_message_print(MemorySegment message, int indent) {
        var mh$ = g_dbus_message_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_print", message, indent);
            }
            return (MemorySegment)mh$.invokeExact(message, indent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_locked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_locked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_message_get_locked(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_locked$descriptor() {
        return g_dbus_message_get_locked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_message_get_locked(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_locked$handle() {
        return g_dbus_message_get_locked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_message_get_locked(GDBusMessage *message)
     * }
     */
    public static int g_dbus_message_get_locked(MemorySegment message) {
        var mh$ = g_dbus_message_get_locked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_locked", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_lock(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_lock$descriptor() {
        return g_dbus_message_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_lock(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_lock$handle() {
        return g_dbus_message_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_lock(GDBusMessage *message)
     * }
     */
    public static void g_dbus_message_lock(MemorySegment message) {
        var mh$ = g_dbus_message_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_lock", message);
            }
            mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_copy(GDBusMessage *message, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_message_copy$descriptor() {
        return g_dbus_message_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_copy(GDBusMessage *message, GError **error)
     * }
     */
    public static MethodHandle g_dbus_message_copy$handle() {
        return g_dbus_message_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_copy(GDBusMessage *message, GError **error)
     * }
     */
    public static MemorySegment g_dbus_message_copy(MemorySegment message, MemorySegment error) {
        var mh$ = g_dbus_message_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_copy", message, error);
            }
            return (MemorySegment)mh$.invokeExact(message, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_byte_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_byte_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessageByteOrder g_dbus_message_get_byte_order(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_byte_order$descriptor() {
        return g_dbus_message_get_byte_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessageByteOrder g_dbus_message_get_byte_order(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_byte_order$handle() {
        return g_dbus_message_get_byte_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessageByteOrder g_dbus_message_get_byte_order(GDBusMessage *message)
     * }
     */
    public static int g_dbus_message_get_byte_order(MemorySegment message) {
        var mh$ = g_dbus_message_get_byte_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_byte_order", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_byte_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_byte_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_byte_order(GDBusMessage *message, GDBusMessageByteOrder byte_order)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_byte_order$descriptor() {
        return g_dbus_message_set_byte_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_byte_order(GDBusMessage *message, GDBusMessageByteOrder byte_order)
     * }
     */
    public static MethodHandle g_dbus_message_set_byte_order$handle() {
        return g_dbus_message_set_byte_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_byte_order(GDBusMessage *message, GDBusMessageByteOrder byte_order)
     * }
     */
    public static void g_dbus_message_set_byte_order(MemorySegment message, int byte_order) {
        var mh$ = g_dbus_message_set_byte_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_byte_order", message, byte_order);
            }
            mh$.invokeExact(message, byte_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_message_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_message_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessageType g_dbus_message_get_message_type(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_message_type$descriptor() {
        return g_dbus_message_get_message_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessageType g_dbus_message_get_message_type(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_message_type$handle() {
        return g_dbus_message_get_message_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessageType g_dbus_message_get_message_type(GDBusMessage *message)
     * }
     */
    public static int g_dbus_message_get_message_type(MemorySegment message) {
        var mh$ = g_dbus_message_get_message_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_message_type", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_message_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_message_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_message_type(GDBusMessage *message, GDBusMessageType type)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_message_type$descriptor() {
        return g_dbus_message_set_message_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_message_type(GDBusMessage *message, GDBusMessageType type)
     * }
     */
    public static MethodHandle g_dbus_message_set_message_type$handle() {
        return g_dbus_message_set_message_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_message_type(GDBusMessage *message, GDBusMessageType type)
     * }
     */
    public static void g_dbus_message_set_message_type(MemorySegment message, int type) {
        var mh$ = g_dbus_message_set_message_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_message_type", message, type);
            }
            mh$.invokeExact(message, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessageFlags g_dbus_message_get_flags(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_flags$descriptor() {
        return g_dbus_message_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessageFlags g_dbus_message_get_flags(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_flags$handle() {
        return g_dbus_message_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessageFlags g_dbus_message_get_flags(GDBusMessage *message)
     * }
     */
    public static int g_dbus_message_get_flags(MemorySegment message) {
        var mh$ = g_dbus_message_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_flags", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_flags(GDBusMessage *message, GDBusMessageFlags flags)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_flags$descriptor() {
        return g_dbus_message_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_flags(GDBusMessage *message, GDBusMessageFlags flags)
     * }
     */
    public static MethodHandle g_dbus_message_set_flags$handle() {
        return g_dbus_message_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_flags(GDBusMessage *message, GDBusMessageFlags flags)
     * }
     */
    public static void g_dbus_message_set_flags(MemorySegment message, int flags) {
        var mh$ = g_dbus_message_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_flags", message, flags);
            }
            mh$.invokeExact(message, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_serial(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_serial$descriptor() {
        return g_dbus_message_get_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_serial(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_serial$handle() {
        return g_dbus_message_get_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_serial(GDBusMessage *message)
     * }
     */
    public static int g_dbus_message_get_serial(MemorySegment message) {
        var mh$ = g_dbus_message_get_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_serial", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_serial(GDBusMessage *message, guint32 serial)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_serial$descriptor() {
        return g_dbus_message_set_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_serial(GDBusMessage *message, guint32 serial)
     * }
     */
    public static MethodHandle g_dbus_message_set_serial$handle() {
        return g_dbus_message_set_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_serial(GDBusMessage *message, guint32 serial)
     * }
     */
    public static void g_dbus_message_set_serial(MemorySegment message, int serial) {
        var mh$ = g_dbus_message_set_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_serial", message, serial);
            }
            mh$.invokeExact(message, serial);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_message_get_header(GDBusMessage *message, GDBusMessageHeaderField header_field)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_header$descriptor() {
        return g_dbus_message_get_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_message_get_header(GDBusMessage *message, GDBusMessageHeaderField header_field)
     * }
     */
    public static MethodHandle g_dbus_message_get_header$handle() {
        return g_dbus_message_get_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_message_get_header(GDBusMessage *message, GDBusMessageHeaderField header_field)
     * }
     */
    public static MemorySegment g_dbus_message_get_header(MemorySegment message, int header_field) {
        var mh$ = g_dbus_message_get_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_header", message, header_field);
            }
            return (MemorySegment)mh$.invokeExact(message, header_field);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_header(GDBusMessage *message, GDBusMessageHeaderField header_field, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_header$descriptor() {
        return g_dbus_message_set_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_header(GDBusMessage *message, GDBusMessageHeaderField header_field, GVariant *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_header$handle() {
        return g_dbus_message_set_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_header(GDBusMessage *message, GDBusMessageHeaderField header_field, GVariant *value)
     * }
     */
    public static void g_dbus_message_set_header(MemorySegment message, int header_field, MemorySegment value) {
        var mh$ = g_dbus_message_set_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_header", message, header_field, value);
            }
            mh$.invokeExact(message, header_field, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_header_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_header_fields"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar *g_dbus_message_get_header_fields(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_header_fields$descriptor() {
        return g_dbus_message_get_header_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar *g_dbus_message_get_header_fields(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_header_fields$handle() {
        return g_dbus_message_get_header_fields.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar *g_dbus_message_get_header_fields(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_header_fields(MemorySegment message) {
        var mh$ = g_dbus_message_get_header_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_header_fields", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_body {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_body"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_message_get_body(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_body$descriptor() {
        return g_dbus_message_get_body.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_message_get_body(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_body$handle() {
        return g_dbus_message_get_body.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_message_get_body(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_body(MemorySegment message) {
        var mh$ = g_dbus_message_get_body.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_body", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_body {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_body"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_body(GDBusMessage *message, GVariant *body)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_body$descriptor() {
        return g_dbus_message_set_body.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_body(GDBusMessage *message, GVariant *body)
     * }
     */
    public static MethodHandle g_dbus_message_set_body$handle() {
        return g_dbus_message_set_body.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_body(GDBusMessage *message, GVariant *body)
     * }
     */
    public static void g_dbus_message_set_body(MemorySegment message, MemorySegment body) {
        var mh$ = g_dbus_message_set_body.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_body", message, body);
            }
            mh$.invokeExact(message, body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_unix_fd_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_unix_fd_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnixFDList *g_dbus_message_get_unix_fd_list(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_unix_fd_list$descriptor() {
        return g_dbus_message_get_unix_fd_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnixFDList *g_dbus_message_get_unix_fd_list(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_unix_fd_list$handle() {
        return g_dbus_message_get_unix_fd_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnixFDList *g_dbus_message_get_unix_fd_list(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_unix_fd_list(MemorySegment message) {
        var mh$ = g_dbus_message_get_unix_fd_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_unix_fd_list", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_unix_fd_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_unix_fd_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_unix_fd_list(GDBusMessage *message, GUnixFDList *fd_list)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_unix_fd_list$descriptor() {
        return g_dbus_message_set_unix_fd_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_unix_fd_list(GDBusMessage *message, GUnixFDList *fd_list)
     * }
     */
    public static MethodHandle g_dbus_message_set_unix_fd_list$handle() {
        return g_dbus_message_set_unix_fd_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_unix_fd_list(GDBusMessage *message, GUnixFDList *fd_list)
     * }
     */
    public static void g_dbus_message_set_unix_fd_list(MemorySegment message, MemorySegment fd_list) {
        var mh$ = g_dbus_message_set_unix_fd_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_unix_fd_list", message, fd_list);
            }
            mh$.invokeExact(message, fd_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_reply_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_reply_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_reply_serial(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_reply_serial$descriptor() {
        return g_dbus_message_get_reply_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_reply_serial(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_reply_serial$handle() {
        return g_dbus_message_get_reply_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_reply_serial(GDBusMessage *message)
     * }
     */
    public static int g_dbus_message_get_reply_serial(MemorySegment message) {
        var mh$ = g_dbus_message_get_reply_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_reply_serial", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_reply_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_reply_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_reply_serial(GDBusMessage *message, guint32 value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_reply_serial$descriptor() {
        return g_dbus_message_set_reply_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_reply_serial(GDBusMessage *message, guint32 value)
     * }
     */
    public static MethodHandle g_dbus_message_set_reply_serial$handle() {
        return g_dbus_message_set_reply_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_reply_serial(GDBusMessage *message, guint32 value)
     * }
     */
    public static void g_dbus_message_set_reply_serial(MemorySegment message, int value) {
        var mh$ = g_dbus_message_set_reply_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_reply_serial", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_interface(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_interface$descriptor() {
        return g_dbus_message_get_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_interface(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_interface$handle() {
        return g_dbus_message_get_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_interface(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_interface(MemorySegment message) {
        var mh$ = g_dbus_message_get_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_interface", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_interface(GDBusMessage *message, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_interface$descriptor() {
        return g_dbus_message_set_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_interface(GDBusMessage *message, const gchar *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_interface$handle() {
        return g_dbus_message_set_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_interface(GDBusMessage *message, const gchar *value)
     * }
     */
    public static void g_dbus_message_set_interface(MemorySegment message, MemorySegment value) {
        var mh$ = g_dbus_message_set_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_interface", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_member {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_member"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_member(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_member$descriptor() {
        return g_dbus_message_get_member.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_member(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_member$handle() {
        return g_dbus_message_get_member.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_member(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_member(MemorySegment message) {
        var mh$ = g_dbus_message_get_member.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_member", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_member {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_member"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_member(GDBusMessage *message, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_member$descriptor() {
        return g_dbus_message_set_member.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_member(GDBusMessage *message, const gchar *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_member$handle() {
        return g_dbus_message_set_member.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_member(GDBusMessage *message, const gchar *value)
     * }
     */
    public static void g_dbus_message_set_member(MemorySegment message, MemorySegment value) {
        var mh$ = g_dbus_message_set_member.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_member", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_path(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_path$descriptor() {
        return g_dbus_message_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_path(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_path$handle() {
        return g_dbus_message_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_path(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_path(MemorySegment message) {
        var mh$ = g_dbus_message_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_path", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_path(GDBusMessage *message, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_path$descriptor() {
        return g_dbus_message_set_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_path(GDBusMessage *message, const gchar *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_path$handle() {
        return g_dbus_message_set_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_path(GDBusMessage *message, const gchar *value)
     * }
     */
    public static void g_dbus_message_set_path(MemorySegment message, MemorySegment value) {
        var mh$ = g_dbus_message_set_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_path", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_sender {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_sender"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_sender(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_sender$descriptor() {
        return g_dbus_message_get_sender.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_sender(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_sender$handle() {
        return g_dbus_message_get_sender.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_sender(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_sender(MemorySegment message) {
        var mh$ = g_dbus_message_get_sender.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_sender", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_sender {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_sender"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_sender(GDBusMessage *message, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_sender$descriptor() {
        return g_dbus_message_set_sender.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_sender(GDBusMessage *message, const gchar *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_sender$handle() {
        return g_dbus_message_set_sender.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_sender(GDBusMessage *message, const gchar *value)
     * }
     */
    public static void g_dbus_message_set_sender(MemorySegment message, MemorySegment value) {
        var mh$ = g_dbus_message_set_sender.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_sender", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_destination {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_destination"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_destination(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_destination$descriptor() {
        return g_dbus_message_get_destination.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_destination(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_destination$handle() {
        return g_dbus_message_get_destination.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_destination(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_destination(MemorySegment message) {
        var mh$ = g_dbus_message_get_destination.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_destination", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_destination {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_destination"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_destination(GDBusMessage *message, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_destination$descriptor() {
        return g_dbus_message_set_destination.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_destination(GDBusMessage *message, const gchar *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_destination$handle() {
        return g_dbus_message_set_destination.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_destination(GDBusMessage *message, const gchar *value)
     * }
     */
    public static void g_dbus_message_set_destination(MemorySegment message, MemorySegment value) {
        var mh$ = g_dbus_message_set_destination.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_destination", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_error_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_error_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_error_name(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_error_name$descriptor() {
        return g_dbus_message_get_error_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_error_name(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_error_name$handle() {
        return g_dbus_message_get_error_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_error_name(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_error_name(MemorySegment message) {
        var mh$ = g_dbus_message_get_error_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_error_name", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_error_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_error_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_error_name(GDBusMessage *message, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_error_name$descriptor() {
        return g_dbus_message_set_error_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_error_name(GDBusMessage *message, const gchar *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_error_name$handle() {
        return g_dbus_message_set_error_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_error_name(GDBusMessage *message, const gchar *value)
     * }
     */
    public static void g_dbus_message_set_error_name(MemorySegment message, MemorySegment value) {
        var mh$ = g_dbus_message_set_error_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_error_name", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_signature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_signature"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_signature(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_signature$descriptor() {
        return g_dbus_message_get_signature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_signature(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_signature$handle() {
        return g_dbus_message_get_signature.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_signature(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_signature(MemorySegment message) {
        var mh$ = g_dbus_message_get_signature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_signature", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_signature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_signature"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_signature(GDBusMessage *message, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_signature$descriptor() {
        return g_dbus_message_set_signature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_signature(GDBusMessage *message, const gchar *value)
     * }
     */
    public static MethodHandle g_dbus_message_set_signature$handle() {
        return g_dbus_message_set_signature.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_signature(GDBusMessage *message, const gchar *value)
     * }
     */
    public static void g_dbus_message_set_signature(MemorySegment message, MemorySegment value) {
        var mh$ = g_dbus_message_set_signature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_signature", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_num_unix_fds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_num_unix_fds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_num_unix_fds(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_num_unix_fds$descriptor() {
        return g_dbus_message_get_num_unix_fds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_num_unix_fds(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_num_unix_fds$handle() {
        return g_dbus_message_get_num_unix_fds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_dbus_message_get_num_unix_fds(GDBusMessage *message)
     * }
     */
    public static int g_dbus_message_get_num_unix_fds(MemorySegment message) {
        var mh$ = g_dbus_message_get_num_unix_fds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_num_unix_fds", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_set_num_unix_fds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_set_num_unix_fds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_num_unix_fds(GDBusMessage *message, guint32 value)
     * }
     */
    public static FunctionDescriptor g_dbus_message_set_num_unix_fds$descriptor() {
        return g_dbus_message_set_num_unix_fds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_message_set_num_unix_fds(GDBusMessage *message, guint32 value)
     * }
     */
    public static MethodHandle g_dbus_message_set_num_unix_fds$handle() {
        return g_dbus_message_set_num_unix_fds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_message_set_num_unix_fds(GDBusMessage *message, guint32 value)
     * }
     */
    public static void g_dbus_message_set_num_unix_fds(MemorySegment message, int value) {
        var mh$ = g_dbus_message_set_num_unix_fds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_set_num_unix_fds", message, value);
            }
            mh$.invokeExact(message, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_get_arg0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_get_arg0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_arg0(GDBusMessage *message)
     * }
     */
    public static FunctionDescriptor g_dbus_message_get_arg0$descriptor() {
        return g_dbus_message_get_arg0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_arg0(GDBusMessage *message)
     * }
     */
    public static MethodHandle g_dbus_message_get_arg0$handle() {
        return g_dbus_message_get_arg0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_message_get_arg0(GDBusMessage *message)
     * }
     */
    public static MemorySegment g_dbus_message_get_arg0(MemorySegment message) {
        var mh$ = g_dbus_message_get_arg0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_get_arg0", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_new_from_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_new_from_blob"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_from_blob(guchar *blob, gsize blob_len, GDBusCapabilityFlags capabilities, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_message_new_from_blob$descriptor() {
        return g_dbus_message_new_from_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_from_blob(guchar *blob, gsize blob_len, GDBusCapabilityFlags capabilities, GError **error)
     * }
     */
    public static MethodHandle g_dbus_message_new_from_blob$handle() {
        return g_dbus_message_new_from_blob.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_message_new_from_blob(guchar *blob, gsize blob_len, GDBusCapabilityFlags capabilities, GError **error)
     * }
     */
    public static MemorySegment g_dbus_message_new_from_blob(MemorySegment blob, long blob_len, int capabilities, MemorySegment error) {
        var mh$ = g_dbus_message_new_from_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_new_from_blob", blob, blob_len, capabilities, error);
            }
            return (MemorySegment)mh$.invokeExact(blob, blob_len, capabilities, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_bytes_needed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_bytes_needed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_dbus_message_bytes_needed(guchar *blob, gsize blob_len, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_message_bytes_needed$descriptor() {
        return g_dbus_message_bytes_needed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_dbus_message_bytes_needed(guchar *blob, gsize blob_len, GError **error)
     * }
     */
    public static MethodHandle g_dbus_message_bytes_needed$handle() {
        return g_dbus_message_bytes_needed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_dbus_message_bytes_needed(guchar *blob, gsize blob_len, GError **error)
     * }
     */
    public static long g_dbus_message_bytes_needed(MemorySegment blob, long blob_len, MemorySegment error) {
        var mh$ = g_dbus_message_bytes_needed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_bytes_needed", blob, blob_len, error);
            }
            return (long)mh$.invokeExact(blob, blob_len, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_to_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_to_blob"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar *g_dbus_message_to_blob(GDBusMessage *message, gsize *out_size, GDBusCapabilityFlags capabilities, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_message_to_blob$descriptor() {
        return g_dbus_message_to_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar *g_dbus_message_to_blob(GDBusMessage *message, gsize *out_size, GDBusCapabilityFlags capabilities, GError **error)
     * }
     */
    public static MethodHandle g_dbus_message_to_blob$handle() {
        return g_dbus_message_to_blob.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar *g_dbus_message_to_blob(GDBusMessage *message, gsize *out_size, GDBusCapabilityFlags capabilities, GError **error)
     * }
     */
    public static MemorySegment g_dbus_message_to_blob(MemorySegment message, MemorySegment out_size, int capabilities, MemorySegment error) {
        var mh$ = g_dbus_message_to_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_to_blob", message, out_size, capabilities, error);
            }
            return (MemorySegment)mh$.invokeExact(message, out_size, capabilities, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_to_gerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_to_gerror"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_message_to_gerror(GDBusMessage *message, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_message_to_gerror$descriptor() {
        return g_dbus_message_to_gerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_message_to_gerror(GDBusMessage *message, GError **error)
     * }
     */
    public static MethodHandle g_dbus_message_to_gerror$handle() {
        return g_dbus_message_to_gerror.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_message_to_gerror(GDBusMessage *message, GError **error)
     * }
     */
    public static int g_dbus_message_to_gerror(MemorySegment message, MemorySegment error) {
        var mh$ = g_dbus_message_to_gerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_to_gerror", message, error);
            }
            return (int)mh$.invokeExact(message, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_method_invocation_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_type$descriptor() {
        return g_dbus_method_invocation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_method_invocation_get_type()
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_type$handle() {
        return g_dbus_method_invocation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_method_invocation_get_type()
     * }
     */
    public static long g_dbus_method_invocation_get_type() {
        var mh$ = g_dbus_method_invocation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_sender {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_sender"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_sender(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_sender$descriptor() {
        return g_dbus_method_invocation_get_sender.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_sender(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_sender$handle() {
        return g_dbus_method_invocation_get_sender.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_sender(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_sender(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_sender.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_sender", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_object_path(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_object_path$descriptor() {
        return g_dbus_method_invocation_get_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_object_path(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_object_path$handle() {
        return g_dbus_method_invocation_get_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_object_path(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_object_path(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_object_path", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_interface_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_interface_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_interface_name(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_interface_name$descriptor() {
        return g_dbus_method_invocation_get_interface_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_interface_name(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_interface_name$handle() {
        return g_dbus_method_invocation_get_interface_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_interface_name(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_interface_name(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_interface_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_interface_name", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_method_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_method_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_method_name(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_method_name$descriptor() {
        return g_dbus_method_invocation_get_method_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_method_name(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_method_name$handle() {
        return g_dbus_method_invocation_get_method_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_method_invocation_get_method_name(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_method_name(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_method_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_method_name", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_method_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_method_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GDBusMethodInfo *g_dbus_method_invocation_get_method_info(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_method_info$descriptor() {
        return g_dbus_method_invocation_get_method_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GDBusMethodInfo *g_dbus_method_invocation_get_method_info(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_method_info$handle() {
        return g_dbus_method_invocation_get_method_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GDBusMethodInfo *g_dbus_method_invocation_get_method_info(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_method_info(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_method_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_method_info", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_property_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_property_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_property_info$descriptor() {
        return g_dbus_method_invocation_get_property_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_property_info$handle() {
        return g_dbus_method_invocation_get_property_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_property_info(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_property_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_property_info", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_method_invocation_get_connection(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_connection$descriptor() {
        return g_dbus_method_invocation_get_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_method_invocation_get_connection(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_connection$handle() {
        return g_dbus_method_invocation_get_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_method_invocation_get_connection(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_connection(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_connection", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_method_invocation_get_message(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_message$descriptor() {
        return g_dbus_method_invocation_get_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_method_invocation_get_message(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_message$handle() {
        return g_dbus_method_invocation_get_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusMessage *g_dbus_method_invocation_get_message(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_message(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_message", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_parameters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_parameters"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_method_invocation_get_parameters(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_parameters$descriptor() {
        return g_dbus_method_invocation_get_parameters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_method_invocation_get_parameters(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_parameters$handle() {
        return g_dbus_method_invocation_get_parameters.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_method_invocation_get_parameters(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_parameters(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_parameters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_parameters", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_dbus_method_invocation_get_user_data(GDBusMethodInvocation *invocation)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_get_user_data$descriptor() {
        return g_dbus_method_invocation_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_dbus_method_invocation_get_user_data(GDBusMethodInvocation *invocation)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_get_user_data$handle() {
        return g_dbus_method_invocation_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_dbus_method_invocation_get_user_data(GDBusMethodInvocation *invocation)
     * }
     */
    public static MemorySegment g_dbus_method_invocation_get_user_data(MemorySegment invocation) {
        var mh$ = g_dbus_method_invocation_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_get_user_data", invocation);
            }
            return (MemorySegment)mh$.invokeExact(invocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_return_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_return_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_value(GDBusMethodInvocation *invocation, GVariant *parameters)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_return_value$descriptor() {
        return g_dbus_method_invocation_return_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_value(GDBusMethodInvocation *invocation, GVariant *parameters)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_return_value$handle() {
        return g_dbus_method_invocation_return_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_value(GDBusMethodInvocation *invocation, GVariant *parameters)
     * }
     */
    public static void g_dbus_method_invocation_return_value(MemorySegment invocation, MemorySegment parameters) {
        var mh$ = g_dbus_method_invocation_return_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_return_value", invocation, parameters);
            }
            mh$.invokeExact(invocation, parameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_return_value_with_unix_fd_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_return_value_with_unix_fd_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_value_with_unix_fd_list(GDBusMethodInvocation *invocation, GVariant *parameters, GUnixFDList *fd_list)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_return_value_with_unix_fd_list$descriptor() {
        return g_dbus_method_invocation_return_value_with_unix_fd_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_value_with_unix_fd_list(GDBusMethodInvocation *invocation, GVariant *parameters, GUnixFDList *fd_list)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_return_value_with_unix_fd_list$handle() {
        return g_dbus_method_invocation_return_value_with_unix_fd_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_value_with_unix_fd_list(GDBusMethodInvocation *invocation, GVariant *parameters, GUnixFDList *fd_list)
     * }
     */
    public static void g_dbus_method_invocation_return_value_with_unix_fd_list(MemorySegment invocation, MemorySegment parameters, MemorySegment fd_list) {
        var mh$ = g_dbus_method_invocation_return_value_with_unix_fd_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_return_value_with_unix_fd_list", invocation, parameters, fd_list);
            }
            mh$.invokeExact(invocation, parameters, fd_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_error(GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *format, ...)
     * }
     */
    public static class g_dbus_method_invocation_return_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_dbus_method_invocation_return_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_dbus_method_invocation_return_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_dbus_method_invocation_return_error(GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *format, ...)
         * }
         */
        public static g_dbus_method_invocation_return_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_dbus_method_invocation_return_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment invocation, int domain, int code, MemorySegment format, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_dbus_method_invocation_return_error", invocation, domain, code, format, x4);
                }
                spreader.invokeExact(invocation, domain, code, format, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_dbus_method_invocation_return_error_literal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_return_error_literal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_error_literal(GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *message)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_return_error_literal$descriptor() {
        return g_dbus_method_invocation_return_error_literal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_error_literal(GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *message)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_return_error_literal$handle() {
        return g_dbus_method_invocation_return_error_literal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_error_literal(GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *message)
     * }
     */
    public static void g_dbus_method_invocation_return_error_literal(MemorySegment invocation, int domain, int code, MemorySegment message) {
        var mh$ = g_dbus_method_invocation_return_error_literal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_return_error_literal", invocation, domain, code, message);
            }
            mh$.invokeExact(invocation, domain, code, message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_return_gerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_return_gerror"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_gerror(GDBusMethodInvocation *invocation, const GError *error)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_return_gerror$descriptor() {
        return g_dbus_method_invocation_return_gerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_gerror(GDBusMethodInvocation *invocation, const GError *error)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_return_gerror$handle() {
        return g_dbus_method_invocation_return_gerror.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_gerror(GDBusMethodInvocation *invocation, const GError *error)
     * }
     */
    public static void g_dbus_method_invocation_return_gerror(MemorySegment invocation, MemorySegment error) {
        var mh$ = g_dbus_method_invocation_return_gerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_return_gerror", invocation, error);
            }
            mh$.invokeExact(invocation, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_take_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_take_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_take_error(GDBusMethodInvocation *invocation, GError *error)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_take_error$descriptor() {
        return g_dbus_method_invocation_take_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_take_error(GDBusMethodInvocation *invocation, GError *error)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_take_error$handle() {
        return g_dbus_method_invocation_take_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_take_error(GDBusMethodInvocation *invocation, GError *error)
     * }
     */
    public static void g_dbus_method_invocation_take_error(MemorySegment invocation, MemorySegment error) {
        var mh$ = g_dbus_method_invocation_take_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_take_error", invocation, error);
            }
            mh$.invokeExact(invocation, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_method_invocation_return_dbus_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_method_invocation_return_dbus_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation *invocation, const gchar *error_name, const gchar *error_message)
     * }
     */
    public static FunctionDescriptor g_dbus_method_invocation_return_dbus_error$descriptor() {
        return g_dbus_method_invocation_return_dbus_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation *invocation, const gchar *error_name, const gchar *error_message)
     * }
     */
    public static MethodHandle g_dbus_method_invocation_return_dbus_error$handle() {
        return g_dbus_method_invocation_return_dbus_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation *invocation, const gchar *error_name, const gchar *error_message)
     * }
     */
    public static void g_dbus_method_invocation_return_dbus_error(MemorySegment invocation, MemorySegment error_name, MemorySegment error_message) {
        var mh$ = g_dbus_method_invocation_return_dbus_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_method_invocation_return_dbus_error", invocation, error_name, error_message);
            }
            mh$.invokeExact(invocation, error_name, error_message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_own_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_own_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor g_bus_own_name$descriptor() {
        return g_bus_own_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle g_bus_own_name$handle() {
        return g_bus_own_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_own_name(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static int g_bus_own_name(int bus_type, MemorySegment name, int flags, MemorySegment bus_acquired_handler, MemorySegment name_acquired_handler, MemorySegment name_lost_handler, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = g_bus_own_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_own_name", bus_type, name, flags, bus_acquired_handler, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
            }
            return (int)mh$.invokeExact(bus_type, name, flags, bus_acquired_handler, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_own_name_on_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_own_name_on_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name_on_connection(GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor g_bus_own_name_on_connection$descriptor() {
        return g_bus_own_name_on_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name_on_connection(GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle g_bus_own_name_on_connection$handle() {
        return g_bus_own_name_on_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_own_name_on_connection(GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static int g_bus_own_name_on_connection(MemorySegment connection, MemorySegment name, int flags, MemorySegment name_acquired_handler, MemorySegment name_lost_handler, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = g_bus_own_name_on_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_own_name_on_connection", connection, name, flags, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
            }
            return (int)mh$.invokeExact(connection, name, flags, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_own_name_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_own_name_with_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name_with_closures(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GClosure *bus_acquired_closure, GClosure *name_acquired_closure, GClosure *name_lost_closure)
     * }
     */
    public static FunctionDescriptor g_bus_own_name_with_closures$descriptor() {
        return g_bus_own_name_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name_with_closures(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GClosure *bus_acquired_closure, GClosure *name_acquired_closure, GClosure *name_lost_closure)
     * }
     */
    public static MethodHandle g_bus_own_name_with_closures$handle() {
        return g_bus_own_name_with_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_own_name_with_closures(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GClosure *bus_acquired_closure, GClosure *name_acquired_closure, GClosure *name_lost_closure)
     * }
     */
    public static int g_bus_own_name_with_closures(int bus_type, MemorySegment name, int flags, MemorySegment bus_acquired_closure, MemorySegment name_acquired_closure, MemorySegment name_lost_closure) {
        var mh$ = g_bus_own_name_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_own_name_with_closures", bus_type, name, flags, bus_acquired_closure, name_acquired_closure, name_lost_closure);
            }
            return (int)mh$.invokeExact(bus_type, name, flags, bus_acquired_closure, name_acquired_closure, name_lost_closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_own_name_on_connection_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_own_name_on_connection_with_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name_on_connection_with_closures(GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GClosure *name_acquired_closure, GClosure *name_lost_closure)
     * }
     */
    public static FunctionDescriptor g_bus_own_name_on_connection_with_closures$descriptor() {
        return g_bus_own_name_on_connection_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_own_name_on_connection_with_closures(GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GClosure *name_acquired_closure, GClosure *name_lost_closure)
     * }
     */
    public static MethodHandle g_bus_own_name_on_connection_with_closures$handle() {
        return g_bus_own_name_on_connection_with_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_own_name_on_connection_with_closures(GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GClosure *name_acquired_closure, GClosure *name_lost_closure)
     * }
     */
    public static int g_bus_own_name_on_connection_with_closures(MemorySegment connection, MemorySegment name, int flags, MemorySegment name_acquired_closure, MemorySegment name_lost_closure) {
        var mh$ = g_bus_own_name_on_connection_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_own_name_on_connection_with_closures", connection, name, flags, name_acquired_closure, name_lost_closure);
            }
            return (int)mh$.invokeExact(connection, name, flags, name_acquired_closure, name_lost_closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_unown_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_unown_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bus_unown_name(guint owner_id)
     * }
     */
    public static FunctionDescriptor g_bus_unown_name$descriptor() {
        return g_bus_unown_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bus_unown_name(guint owner_id)
     * }
     */
    public static MethodHandle g_bus_unown_name$handle() {
        return g_bus_unown_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bus_unown_name(guint owner_id)
     * }
     */
    public static void g_bus_unown_name(int owner_id) {
        var mh$ = g_bus_unown_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_unown_name", owner_id);
            }
            mh$.invokeExact(owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_watch_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_watch_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor g_bus_watch_name$descriptor() {
        return g_bus_watch_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle g_bus_watch_name$handle() {
        return g_bus_watch_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_watch_name(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static int g_bus_watch_name(int bus_type, MemorySegment name, int flags, MemorySegment name_appeared_handler, MemorySegment name_vanished_handler, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = g_bus_watch_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_watch_name", bus_type, name, flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
            }
            return (int)mh$.invokeExact(bus_type, name, flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_watch_name_on_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_watch_name_on_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_on_connection(GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor g_bus_watch_name_on_connection$descriptor() {
        return g_bus_watch_name_on_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_on_connection(GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle g_bus_watch_name_on_connection$handle() {
        return g_bus_watch_name_on_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_on_connection(GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static int g_bus_watch_name_on_connection(MemorySegment connection, MemorySegment name, int flags, MemorySegment name_appeared_handler, MemorySegment name_vanished_handler, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = g_bus_watch_name_on_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_watch_name_on_connection", connection, name, flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
            }
            return (int)mh$.invokeExact(connection, name, flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_watch_name_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_watch_name_with_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_with_closures(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure)
     * }
     */
    public static FunctionDescriptor g_bus_watch_name_with_closures$descriptor() {
        return g_bus_watch_name_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_with_closures(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure)
     * }
     */
    public static MethodHandle g_bus_watch_name_with_closures$handle() {
        return g_bus_watch_name_with_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_with_closures(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure)
     * }
     */
    public static int g_bus_watch_name_with_closures(int bus_type, MemorySegment name, int flags, MemorySegment name_appeared_closure, MemorySegment name_vanished_closure) {
        var mh$ = g_bus_watch_name_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_watch_name_with_closures", bus_type, name, flags, name_appeared_closure, name_vanished_closure);
            }
            return (int)mh$.invokeExact(bus_type, name, flags, name_appeared_closure, name_vanished_closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_watch_name_on_connection_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_watch_name_on_connection_with_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_on_connection_with_closures(GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure)
     * }
     */
    public static FunctionDescriptor g_bus_watch_name_on_connection_with_closures$descriptor() {
        return g_bus_watch_name_on_connection_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_on_connection_with_closures(GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure)
     * }
     */
    public static MethodHandle g_bus_watch_name_on_connection_with_closures$handle() {
        return g_bus_watch_name_on_connection_with_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bus_watch_name_on_connection_with_closures(GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure)
     * }
     */
    public static int g_bus_watch_name_on_connection_with_closures(MemorySegment connection, MemorySegment name, int flags, MemorySegment name_appeared_closure, MemorySegment name_vanished_closure) {
        var mh$ = g_bus_watch_name_on_connection_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_watch_name_on_connection_with_closures", connection, name, flags, name_appeared_closure, name_vanished_closure);
            }
            return (int)mh$.invokeExact(connection, name, flags, name_appeared_closure, name_vanished_closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_unwatch_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_unwatch_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bus_unwatch_name(guint watcher_id)
     * }
     */
    public static FunctionDescriptor g_bus_unwatch_name$descriptor() {
        return g_bus_unwatch_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bus_unwatch_name(guint watcher_id)
     * }
     */
    public static MethodHandle g_bus_unwatch_name$handle() {
        return g_bus_unwatch_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bus_unwatch_name(guint watcher_id)
     * }
     */
    public static void g_bus_unwatch_name(int watcher_id) {
        var mh$ = g_bus_unwatch_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_unwatch_name", watcher_id);
            }
            mh$.invokeExact(watcher_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_object_get_type$descriptor() {
        return g_dbus_object_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_get_type()
     * }
     */
    public static MethodHandle g_dbus_object_get_type$handle() {
        return g_dbus_object_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_object_get_type()
     * }
     */
    public static long g_dbus_object_get_type() {
        var mh$ = g_dbus_object_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_get_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_get_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_get_object_path(GDBusObject *object)
     * }
     */
    public static FunctionDescriptor g_dbus_object_get_object_path$descriptor() {
        return g_dbus_object_get_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_get_object_path(GDBusObject *object)
     * }
     */
    public static MethodHandle g_dbus_object_get_object_path$handle() {
        return g_dbus_object_get_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_get_object_path(GDBusObject *object)
     * }
     */
    public static MemorySegment g_dbus_object_get_object_path(MemorySegment object) {
        var mh$ = g_dbus_object_get_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_get_object_path", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_get_interfaces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_get_interfaces"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_dbus_object_get_interfaces(GDBusObject *object)
     * }
     */
    public static FunctionDescriptor g_dbus_object_get_interfaces$descriptor() {
        return g_dbus_object_get_interfaces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_dbus_object_get_interfaces(GDBusObject *object)
     * }
     */
    public static MethodHandle g_dbus_object_get_interfaces$handle() {
        return g_dbus_object_get_interfaces.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_dbus_object_get_interfaces(GDBusObject *object)
     * }
     */
    public static MemorySegment g_dbus_object_get_interfaces(MemorySegment object) {
        var mh$ = g_dbus_object_get_interfaces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_get_interfaces", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_get_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_get_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterface *g_dbus_object_get_interface(GDBusObject *object, const gchar *interface_name)
     * }
     */
    public static FunctionDescriptor g_dbus_object_get_interface$descriptor() {
        return g_dbus_object_get_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterface *g_dbus_object_get_interface(GDBusObject *object, const gchar *interface_name)
     * }
     */
    public static MethodHandle g_dbus_object_get_interface$handle() {
        return g_dbus_object_get_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterface *g_dbus_object_get_interface(GDBusObject *object, const gchar *interface_name)
     * }
     */
    public static MemorySegment g_dbus_object_get_interface(MemorySegment object, MemorySegment interface_name) {
        var mh$ = g_dbus_object_get_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_get_interface", object, interface_name);
            }
            return (MemorySegment)mh$.invokeExact(object, interface_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_get_type$descriptor() {
        return g_dbus_object_manager_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_get_type()
     * }
     */
    public static MethodHandle g_dbus_object_manager_get_type$handle() {
        return g_dbus_object_manager_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_get_type()
     * }
     */
    public static long g_dbus_object_manager_get_type() {
        var mh$ = g_dbus_object_manager_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_get_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_get_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_manager_get_object_path(GDBusObjectManager *manager)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_get_object_path$descriptor() {
        return g_dbus_object_manager_get_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_manager_get_object_path(GDBusObjectManager *manager)
     * }
     */
    public static MethodHandle g_dbus_object_manager_get_object_path$handle() {
        return g_dbus_object_manager_get_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_manager_get_object_path(GDBusObjectManager *manager)
     * }
     */
    public static MemorySegment g_dbus_object_manager_get_object_path(MemorySegment manager) {
        var mh$ = g_dbus_object_manager_get_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_get_object_path", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_get_objects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_get_objects"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_dbus_object_manager_get_objects(GDBusObjectManager *manager)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_get_objects$descriptor() {
        return g_dbus_object_manager_get_objects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_dbus_object_manager_get_objects(GDBusObjectManager *manager)
     * }
     */
    public static MethodHandle g_dbus_object_manager_get_objects$handle() {
        return g_dbus_object_manager_get_objects.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_dbus_object_manager_get_objects(GDBusObjectManager *manager)
     * }
     */
    public static MemorySegment g_dbus_object_manager_get_objects(MemorySegment manager) {
        var mh$ = g_dbus_object_manager_get_objects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_get_objects", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_get_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_object_manager_get_object(GDBusObjectManager *manager, const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_get_object$descriptor() {
        return g_dbus_object_manager_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_object_manager_get_object(GDBusObjectManager *manager, const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_object_manager_get_object$handle() {
        return g_dbus_object_manager_get_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObject *g_dbus_object_manager_get_object(GDBusObjectManager *manager, const gchar *object_path)
     * }
     */
    public static MemorySegment g_dbus_object_manager_get_object(MemorySegment manager, MemorySegment object_path) {
        var mh$ = g_dbus_object_manager_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_get_object", manager, object_path);
            }
            return (MemorySegment)mh$.invokeExact(manager, object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_get_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_get_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterface *g_dbus_object_manager_get_interface(GDBusObjectManager *manager, const gchar *object_path, const gchar *interface_name)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_get_interface$descriptor() {
        return g_dbus_object_manager_get_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterface *g_dbus_object_manager_get_interface(GDBusObjectManager *manager, const gchar *object_path, const gchar *interface_name)
     * }
     */
    public static MethodHandle g_dbus_object_manager_get_interface$handle() {
        return g_dbus_object_manager_get_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterface *g_dbus_object_manager_get_interface(GDBusObjectManager *manager, const gchar *object_path, const gchar *interface_name)
     * }
     */
    public static MemorySegment g_dbus_object_manager_get_interface(MemorySegment manager, MemorySegment object_path, MemorySegment interface_name) {
        var mh$ = g_dbus_object_manager_get_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_get_interface", manager, object_path, interface_name);
            }
            return (MemorySegment)mh$.invokeExact(manager, object_path, interface_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_client_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_get_type$descriptor() {
        return g_dbus_object_manager_client_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_client_get_type()
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_get_type$handle() {
        return g_dbus_object_manager_client_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_client_get_type()
     * }
     */
    public static long g_dbus_object_manager_client_get_type() {
        var mh$ = g_dbus_object_manager_client_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_client_new(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_new$descriptor() {
        return g_dbus_object_manager_client_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_client_new(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_new$handle() {
        return g_dbus_object_manager_client_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_client_new(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_object_manager_client_new(MemorySegment connection, int flags, MemorySegment name, MemorySegment object_path, MemorySegment get_proxy_type_func, MemorySegment get_proxy_type_user_data, MemorySegment get_proxy_type_destroy_notify, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_object_manager_client_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_new", connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_new_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_new_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_new_finish$descriptor() {
        return g_dbus_object_manager_client_new_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_new_finish$handle() {
        return g_dbus_object_manager_client_new_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_object_manager_client_new_finish(MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_object_manager_client_new_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_new_finish", res, error);
            }
            return (MemorySegment)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_new_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_new_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_sync(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_new_sync$descriptor() {
        return g_dbus_object_manager_client_new_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_sync(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_new_sync$handle() {
        return g_dbus_object_manager_client_new_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_sync(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_object_manager_client_new_sync(MemorySegment connection, int flags, MemorySegment name, MemorySegment object_path, MemorySegment get_proxy_type_func, MemorySegment get_proxy_type_user_data, MemorySegment get_proxy_type_destroy_notify, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_object_manager_client_new_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_new_sync", connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_new_for_bus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_new_for_bus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_client_new_for_bus(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_new_for_bus$descriptor() {
        return g_dbus_object_manager_client_new_for_bus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_client_new_for_bus(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_new_for_bus$handle() {
        return g_dbus_object_manager_client_new_for_bus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_client_new_for_bus(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_object_manager_client_new_for_bus(int bus_type, int flags, MemorySegment name, MemorySegment object_path, MemorySegment get_proxy_type_func, MemorySegment get_proxy_type_user_data, MemorySegment get_proxy_type_destroy_notify, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_object_manager_client_new_for_bus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_new_for_bus", bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
            }
            mh$.invokeExact(bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_new_for_bus_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_new_for_bus_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_new_for_bus_finish$descriptor() {
        return g_dbus_object_manager_client_new_for_bus_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_new_for_bus_finish$handle() {
        return g_dbus_object_manager_client_new_for_bus_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_object_manager_client_new_for_bus_finish(MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_object_manager_client_new_for_bus_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_new_for_bus_finish", res, error);
            }
            return (MemorySegment)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_new_for_bus_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_new_for_bus_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_new_for_bus_sync$descriptor() {
        return g_dbus_object_manager_client_new_for_bus_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_new_for_bus_sync$handle() {
        return g_dbus_object_manager_client_new_for_bus_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_object_manager_client_new_for_bus_sync(int bus_type, int flags, MemorySegment name, MemorySegment object_path, MemorySegment get_proxy_type_func, MemorySegment get_proxy_type_user_data, MemorySegment get_proxy_type_destroy_notify, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_object_manager_client_new_for_bus_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_new_for_bus_sync", bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(bus_type, flags, name, object_path, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_get_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_get_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_manager_client_get_connection(GDBusObjectManagerClient *manager)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_get_connection$descriptor() {
        return g_dbus_object_manager_client_get_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_manager_client_get_connection(GDBusObjectManagerClient *manager)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_get_connection$handle() {
        return g_dbus_object_manager_client_get_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_manager_client_get_connection(GDBusObjectManagerClient *manager)
     * }
     */
    public static MemorySegment g_dbus_object_manager_client_get_connection(MemorySegment manager) {
        var mh$ = g_dbus_object_manager_client_get_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_get_connection", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(GDBusObjectManagerClient *manager)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_get_flags$descriptor() {
        return g_dbus_object_manager_client_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(GDBusObjectManagerClient *manager)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_get_flags$handle() {
        return g_dbus_object_manager_client_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(GDBusObjectManagerClient *manager)
     * }
     */
    public static int g_dbus_object_manager_client_get_flags(MemorySegment manager) {
        var mh$ = g_dbus_object_manager_client_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_get_flags", manager);
            }
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_manager_client_get_name(GDBusObjectManagerClient *manager)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_get_name$descriptor() {
        return g_dbus_object_manager_client_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_manager_client_get_name(GDBusObjectManagerClient *manager)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_get_name$handle() {
        return g_dbus_object_manager_client_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_object_manager_client_get_name(GDBusObjectManagerClient *manager)
     * }
     */
    public static MemorySegment g_dbus_object_manager_client_get_name(MemorySegment manager) {
        var mh$ = g_dbus_object_manager_client_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_get_name", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_get_name_owner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_get_name_owner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_object_manager_client_get_name_owner(GDBusObjectManagerClient *manager)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_get_name_owner$descriptor() {
        return g_dbus_object_manager_client_get_name_owner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_object_manager_client_get_name_owner(GDBusObjectManagerClient *manager)
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_get_name_owner$handle() {
        return g_dbus_object_manager_client_get_name_owner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_object_manager_client_get_name_owner(GDBusObjectManagerClient *manager)
     * }
     */
    public static MemorySegment g_dbus_object_manager_client_get_name_owner(MemorySegment manager) {
        var mh$ = g_dbus_object_manager_client_get_name_owner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_get_name_owner", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_server_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_get_type$descriptor() {
        return g_dbus_object_manager_server_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_server_get_type()
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_get_type$handle() {
        return g_dbus_object_manager_server_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_server_get_type()
     * }
     */
    public static long g_dbus_object_manager_server_get_type() {
        var mh$ = g_dbus_object_manager_server_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectManagerServer *g_dbus_object_manager_server_new(const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_new$descriptor() {
        return g_dbus_object_manager_server_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectManagerServer *g_dbus_object_manager_server_new(const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_new$handle() {
        return g_dbus_object_manager_server_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectManagerServer *g_dbus_object_manager_server_new(const gchar *object_path)
     * }
     */
    public static MemorySegment g_dbus_object_manager_server_new(MemorySegment object_path) {
        var mh$ = g_dbus_object_manager_server_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_new", object_path);
            }
            return (MemorySegment)mh$.invokeExact(object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_get_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_get_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_manager_server_get_connection(GDBusObjectManagerServer *manager)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_get_connection$descriptor() {
        return g_dbus_object_manager_server_get_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_manager_server_get_connection(GDBusObjectManagerServer *manager)
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_get_connection$handle() {
        return g_dbus_object_manager_server_get_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_manager_server_get_connection(GDBusObjectManagerServer *manager)
     * }
     */
    public static MemorySegment g_dbus_object_manager_server_get_connection(MemorySegment manager) {
        var mh$ = g_dbus_object_manager_server_get_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_get_connection", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_set_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_set_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_set_connection(GDBusObjectManagerServer *manager, GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_set_connection$descriptor() {
        return g_dbus_object_manager_server_set_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_set_connection(GDBusObjectManagerServer *manager, GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_set_connection$handle() {
        return g_dbus_object_manager_server_set_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_set_connection(GDBusObjectManagerServer *manager, GDBusConnection *connection)
     * }
     */
    public static void g_dbus_object_manager_server_set_connection(MemorySegment manager, MemorySegment connection) {
        var mh$ = g_dbus_object_manager_server_set_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_set_connection", manager, connection);
            }
            mh$.invokeExact(manager, connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_export {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_export"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_export(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_export$descriptor() {
        return g_dbus_object_manager_server_export.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_export(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_export$handle() {
        return g_dbus_object_manager_server_export.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_export(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static void g_dbus_object_manager_server_export(MemorySegment manager, MemorySegment object) {
        var mh$ = g_dbus_object_manager_server_export.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_export", manager, object);
            }
            mh$.invokeExact(manager, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_export_uniquely {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_export_uniquely"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_export_uniquely(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_export_uniquely$descriptor() {
        return g_dbus_object_manager_server_export_uniquely.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_export_uniquely(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_export_uniquely$handle() {
        return g_dbus_object_manager_server_export_uniquely.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_manager_server_export_uniquely(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static void g_dbus_object_manager_server_export_uniquely(MemorySegment manager, MemorySegment object) {
        var mh$ = g_dbus_object_manager_server_export_uniquely.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_export_uniquely", manager, object);
            }
            mh$.invokeExact(manager, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_is_exported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_is_exported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_object_manager_server_is_exported(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_is_exported$descriptor() {
        return g_dbus_object_manager_server_is_exported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_object_manager_server_is_exported(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_is_exported$handle() {
        return g_dbus_object_manager_server_is_exported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_object_manager_server_is_exported(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object)
     * }
     */
    public static int g_dbus_object_manager_server_is_exported(MemorySegment manager, MemorySegment object) {
        var mh$ = g_dbus_object_manager_server_is_exported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_is_exported", manager, object);
            }
            return (int)mh$.invokeExact(manager, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_server_unexport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_server_unexport"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_object_manager_server_unexport(GDBusObjectManagerServer *manager, const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_server_unexport$descriptor() {
        return g_dbus_object_manager_server_unexport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_object_manager_server_unexport(GDBusObjectManagerServer *manager, const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_object_manager_server_unexport$handle() {
        return g_dbus_object_manager_server_unexport.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_object_manager_server_unexport(GDBusObjectManagerServer *manager, const gchar *object_path)
     * }
     */
    public static int g_dbus_object_manager_server_unexport(MemorySegment manager, MemorySegment object_path) {
        var mh$ = g_dbus_object_manager_server_unexport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_server_unexport", manager, object_path);
            }
            return (int)mh$.invokeExact(manager, object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_proxy_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_proxy_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_proxy_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_object_proxy_get_type$descriptor() {
        return g_dbus_object_proxy_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_proxy_get_type()
     * }
     */
    public static MethodHandle g_dbus_object_proxy_get_type$handle() {
        return g_dbus_object_proxy_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_object_proxy_get_type()
     * }
     */
    public static long g_dbus_object_proxy_get_type() {
        var mh$ = g_dbus_object_proxy_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_proxy_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_proxy_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_proxy_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectProxy *g_dbus_object_proxy_new(GDBusConnection *connection, const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_object_proxy_new$descriptor() {
        return g_dbus_object_proxy_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectProxy *g_dbus_object_proxy_new(GDBusConnection *connection, const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_object_proxy_new$handle() {
        return g_dbus_object_proxy_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectProxy *g_dbus_object_proxy_new(GDBusConnection *connection, const gchar *object_path)
     * }
     */
    public static MemorySegment g_dbus_object_proxy_new(MemorySegment connection, MemorySegment object_path) {
        var mh$ = g_dbus_object_proxy_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_proxy_new", connection, object_path);
            }
            return (MemorySegment)mh$.invokeExact(connection, object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_proxy_get_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_proxy_get_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_proxy_get_connection(GDBusObjectProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_object_proxy_get_connection$descriptor() {
        return g_dbus_object_proxy_get_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_proxy_get_connection(GDBusObjectProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_object_proxy_get_connection$handle() {
        return g_dbus_object_proxy_get_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_object_proxy_get_connection(GDBusObjectProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_object_proxy_get_connection(MemorySegment proxy) {
        var mh$ = g_dbus_object_proxy_get_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_proxy_get_connection", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_skeleton_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_skeleton_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_skeleton_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_object_skeleton_get_type$descriptor() {
        return g_dbus_object_skeleton_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_skeleton_get_type()
     * }
     */
    public static MethodHandle g_dbus_object_skeleton_get_type$handle() {
        return g_dbus_object_skeleton_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_object_skeleton_get_type()
     * }
     */
    public static long g_dbus_object_skeleton_get_type() {
        var mh$ = g_dbus_object_skeleton_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_skeleton_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_skeleton_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_skeleton_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusObjectSkeleton *g_dbus_object_skeleton_new(const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_object_skeleton_new$descriptor() {
        return g_dbus_object_skeleton_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusObjectSkeleton *g_dbus_object_skeleton_new(const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_object_skeleton_new$handle() {
        return g_dbus_object_skeleton_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusObjectSkeleton *g_dbus_object_skeleton_new(const gchar *object_path)
     * }
     */
    public static MemorySegment g_dbus_object_skeleton_new(MemorySegment object_path) {
        var mh$ = g_dbus_object_skeleton_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_skeleton_new", object_path);
            }
            return (MemorySegment)mh$.invokeExact(object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_skeleton_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_skeleton_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_flush(GDBusObjectSkeleton *object)
     * }
     */
    public static FunctionDescriptor g_dbus_object_skeleton_flush$descriptor() {
        return g_dbus_object_skeleton_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_flush(GDBusObjectSkeleton *object)
     * }
     */
    public static MethodHandle g_dbus_object_skeleton_flush$handle() {
        return g_dbus_object_skeleton_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_flush(GDBusObjectSkeleton *object)
     * }
     */
    public static void g_dbus_object_skeleton_flush(MemorySegment object) {
        var mh$ = g_dbus_object_skeleton_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_skeleton_flush", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_skeleton_add_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_skeleton_add_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_add_interface(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_object_skeleton_add_interface$descriptor() {
        return g_dbus_object_skeleton_add_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_add_interface(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_object_skeleton_add_interface$handle() {
        return g_dbus_object_skeleton_add_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_add_interface(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static void g_dbus_object_skeleton_add_interface(MemorySegment object, MemorySegment interface_) {
        var mh$ = g_dbus_object_skeleton_add_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_skeleton_add_interface", object, interface_);
            }
            mh$.invokeExact(object, interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_skeleton_remove_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_skeleton_remove_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_remove_interface(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static FunctionDescriptor g_dbus_object_skeleton_remove_interface$descriptor() {
        return g_dbus_object_skeleton_remove_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_remove_interface(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static MethodHandle g_dbus_object_skeleton_remove_interface$handle() {
        return g_dbus_object_skeleton_remove_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_remove_interface(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_)
     * }
     */
    public static void g_dbus_object_skeleton_remove_interface(MemorySegment object, MemorySegment interface_) {
        var mh$ = g_dbus_object_skeleton_remove_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_skeleton_remove_interface", object, interface_);
            }
            mh$.invokeExact(object, interface_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_skeleton_remove_interface_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_skeleton_remove_interface_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_remove_interface_by_name(GDBusObjectSkeleton *object, const gchar *interface_name)
     * }
     */
    public static FunctionDescriptor g_dbus_object_skeleton_remove_interface_by_name$descriptor() {
        return g_dbus_object_skeleton_remove_interface_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_remove_interface_by_name(GDBusObjectSkeleton *object, const gchar *interface_name)
     * }
     */
    public static MethodHandle g_dbus_object_skeleton_remove_interface_by_name$handle() {
        return g_dbus_object_skeleton_remove_interface_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_remove_interface_by_name(GDBusObjectSkeleton *object, const gchar *interface_name)
     * }
     */
    public static void g_dbus_object_skeleton_remove_interface_by_name(MemorySegment object, MemorySegment interface_name) {
        var mh$ = g_dbus_object_skeleton_remove_interface_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_skeleton_remove_interface_by_name", object, interface_name);
            }
            mh$.invokeExact(object, interface_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_skeleton_set_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_skeleton_set_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton *object, const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_object_skeleton_set_object_path$descriptor() {
        return g_dbus_object_skeleton_set_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton *object, const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_object_skeleton_set_object_path$handle() {
        return g_dbus_object_skeleton_set_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton *object, const gchar *object_path)
     * }
     */
    public static void g_dbus_object_skeleton_set_object_path(MemorySegment object, MemorySegment object_path) {
        var mh$ = g_dbus_object_skeleton_set_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_skeleton_set_object_path", object, object_path);
            }
            mh$.invokeExact(object, object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_proxy_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_type$descriptor() {
        return g_dbus_proxy_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_proxy_get_type()
     * }
     */
    public static MethodHandle g_dbus_proxy_get_type$handle() {
        return g_dbus_proxy_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_proxy_get_type()
     * }
     */
    public static long g_dbus_proxy_get_type() {
        var mh$ = g_dbus_proxy_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_new$descriptor() {
        return g_dbus_proxy_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_proxy_new$handle() {
        return g_dbus_proxy_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_proxy_new(MemorySegment connection, int flags, MemorySegment info, MemorySegment name, MemorySegment object_path, MemorySegment interface_name, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_proxy_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_new", connection, flags, info, name, object_path, interface_name, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, flags, info, name, object_path, interface_name, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_new_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_new_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_new_finish$descriptor() {
        return g_dbus_proxy_new_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_new_finish$handle() {
        return g_dbus_proxy_new_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_new_finish(MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_proxy_new_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_new_finish", res, error);
            }
            return (MemorySegment)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_new_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_new_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_new_sync$descriptor() {
        return g_dbus_proxy_new_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_new_sync$handle() {
        return g_dbus_proxy_new_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_new_sync(MemorySegment connection, int flags, MemorySegment info, MemorySegment name, MemorySegment object_path, MemorySegment interface_name, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_proxy_new_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_new_sync", connection, flags, info, name, object_path, interface_name, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, flags, info, name, object_path, interface_name, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_new_for_bus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_new_for_bus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_new_for_bus$descriptor() {
        return g_dbus_proxy_new_for_bus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_proxy_new_for_bus$handle() {
        return g_dbus_proxy_new_for_bus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_proxy_new_for_bus(int bus_type, int flags, MemorySegment info, MemorySegment name, MemorySegment object_path, MemorySegment interface_name, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_proxy_new_for_bus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_new_for_bus", bus_type, flags, info, name, object_path, interface_name, cancellable, callback, user_data);
            }
            mh$.invokeExact(bus_type, flags, info, name, object_path, interface_name, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_new_for_bus_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_new_for_bus_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_for_bus_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_new_for_bus_finish$descriptor() {
        return g_dbus_proxy_new_for_bus_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_for_bus_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_new_for_bus_finish$handle() {
        return g_dbus_proxy_new_for_bus_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_for_bus_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_new_for_bus_finish(MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_proxy_new_for_bus_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_new_for_bus_finish", res, error);
            }
            return (MemorySegment)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_new_for_bus_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_new_for_bus_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_new_for_bus_sync$descriptor() {
        return g_dbus_proxy_new_for_bus_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_new_for_bus_sync$handle() {
        return g_dbus_proxy_new_for_bus_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusProxy *g_dbus_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_new_for_bus_sync(int bus_type, int flags, MemorySegment info, MemorySegment name, MemorySegment object_path, MemorySegment interface_name, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_proxy_new_for_bus_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_new_for_bus_sync", bus_type, flags, info, name, object_path, interface_name, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(bus_type, flags, info, name, object_path, interface_name, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_proxy_get_connection(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_connection$descriptor() {
        return g_dbus_proxy_get_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_proxy_get_connection(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_connection$handle() {
        return g_dbus_proxy_get_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_proxy_get_connection(GDBusProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_connection(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_connection", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusProxyFlags g_dbus_proxy_get_flags(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_flags$descriptor() {
        return g_dbus_proxy_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusProxyFlags g_dbus_proxy_get_flags(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_flags$handle() {
        return g_dbus_proxy_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusProxyFlags g_dbus_proxy_get_flags(GDBusProxy *proxy)
     * }
     */
    public static int g_dbus_proxy_get_flags(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_flags", proxy);
            }
            return (int)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_name(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_name$descriptor() {
        return g_dbus_proxy_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_name(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_name$handle() {
        return g_dbus_proxy_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_name(GDBusProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_name(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_name", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_name_owner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_name_owner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_proxy_get_name_owner(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_name_owner$descriptor() {
        return g_dbus_proxy_get_name_owner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_proxy_get_name_owner(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_name_owner$handle() {
        return g_dbus_proxy_get_name_owner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_proxy_get_name_owner(GDBusProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_name_owner(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_name_owner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_name_owner", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_object_path(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_object_path$descriptor() {
        return g_dbus_proxy_get_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_object_path(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_object_path$handle() {
        return g_dbus_proxy_get_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_object_path(GDBusProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_object_path(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_object_path", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_interface_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_interface_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_interface_name(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_interface_name$descriptor() {
        return g_dbus_proxy_get_interface_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_interface_name(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_interface_name$handle() {
        return g_dbus_proxy_get_interface_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_proxy_get_interface_name(GDBusProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_interface_name(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_interface_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_interface_name", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_default_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_default_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_dbus_proxy_get_default_timeout(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_default_timeout$descriptor() {
        return g_dbus_proxy_get_default_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_dbus_proxy_get_default_timeout(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_default_timeout$handle() {
        return g_dbus_proxy_get_default_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_dbus_proxy_get_default_timeout(GDBusProxy *proxy)
     * }
     */
    public static int g_dbus_proxy_get_default_timeout(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_default_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_default_timeout", proxy);
            }
            return (int)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_set_default_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_set_default_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_default_timeout(GDBusProxy *proxy, gint timeout_msec)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_set_default_timeout$descriptor() {
        return g_dbus_proxy_set_default_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_default_timeout(GDBusProxy *proxy, gint timeout_msec)
     * }
     */
    public static MethodHandle g_dbus_proxy_set_default_timeout$handle() {
        return g_dbus_proxy_set_default_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_default_timeout(GDBusProxy *proxy, gint timeout_msec)
     * }
     */
    public static void g_dbus_proxy_set_default_timeout(MemorySegment proxy, int timeout_msec) {
        var mh$ = g_dbus_proxy_set_default_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_set_default_timeout", proxy, timeout_msec);
            }
            mh$.invokeExact(proxy, timeout_msec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_interface_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_interface_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_proxy_get_interface_info(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_interface_info$descriptor() {
        return g_dbus_proxy_get_interface_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_proxy_get_interface_info(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_interface_info$handle() {
        return g_dbus_proxy_get_interface_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusInterfaceInfo *g_dbus_proxy_get_interface_info(GDBusProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_interface_info(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_interface_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_interface_info", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_set_interface_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_set_interface_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_interface_info(GDBusProxy *proxy, GDBusInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_set_interface_info$descriptor() {
        return g_dbus_proxy_set_interface_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_interface_info(GDBusProxy *proxy, GDBusInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_dbus_proxy_set_interface_info$handle() {
        return g_dbus_proxy_set_interface_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_interface_info(GDBusProxy *proxy, GDBusInterfaceInfo *info)
     * }
     */
    public static void g_dbus_proxy_set_interface_info(MemorySegment proxy, MemorySegment info) {
        var mh$ = g_dbus_proxy_set_interface_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_set_interface_info", proxy, info);
            }
            mh$.invokeExact(proxy, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_cached_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_cached_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_get_cached_property(GDBusProxy *proxy, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_cached_property$descriptor() {
        return g_dbus_proxy_get_cached_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_get_cached_property(GDBusProxy *proxy, const gchar *property_name)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_cached_property$handle() {
        return g_dbus_proxy_get_cached_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_get_cached_property(GDBusProxy *proxy, const gchar *property_name)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_cached_property(MemorySegment proxy, MemorySegment property_name) {
        var mh$ = g_dbus_proxy_get_cached_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_cached_property", proxy, property_name);
            }
            return (MemorySegment)mh$.invokeExact(proxy, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_set_cached_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_set_cached_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_cached_property(GDBusProxy *proxy, const gchar *property_name, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_set_cached_property$descriptor() {
        return g_dbus_proxy_set_cached_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_cached_property(GDBusProxy *proxy, const gchar *property_name, GVariant *value)
     * }
     */
    public static MethodHandle g_dbus_proxy_set_cached_property$handle() {
        return g_dbus_proxy_set_cached_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_proxy_set_cached_property(GDBusProxy *proxy, const gchar *property_name, GVariant *value)
     * }
     */
    public static void g_dbus_proxy_set_cached_property(MemorySegment proxy, MemorySegment property_name, MemorySegment value) {
        var mh$ = g_dbus_proxy_set_cached_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_set_cached_property", proxy, property_name, value);
            }
            mh$.invokeExact(proxy, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_get_cached_property_names {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_get_cached_property_names"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_dbus_proxy_get_cached_property_names(GDBusProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_get_cached_property_names$descriptor() {
        return g_dbus_proxy_get_cached_property_names.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_dbus_proxy_get_cached_property_names(GDBusProxy *proxy)
     * }
     */
    public static MethodHandle g_dbus_proxy_get_cached_property_names$handle() {
        return g_dbus_proxy_get_cached_property_names.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_dbus_proxy_get_cached_property_names(GDBusProxy *proxy)
     * }
     */
    public static MemorySegment g_dbus_proxy_get_cached_property_names(MemorySegment proxy) {
        var mh$ = g_dbus_proxy_get_cached_property_names.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_get_cached_property_names", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_call {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_call"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_call(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_call$descriptor() {
        return g_dbus_proxy_call.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_call(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_proxy_call$handle() {
        return g_dbus_proxy_call.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_proxy_call(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_proxy_call(MemorySegment proxy, MemorySegment method_name, MemorySegment parameters, int flags, int timeout_msec, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_proxy_call.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_call", proxy, method_name, parameters, flags, timeout_msec, cancellable, callback, user_data);
            }
            mh$.invokeExact(proxy, method_name, parameters, flags, timeout_msec, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_call_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_call_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_finish(GDBusProxy *proxy, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_call_finish$descriptor() {
        return g_dbus_proxy_call_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_finish(GDBusProxy *proxy, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_call_finish$handle() {
        return g_dbus_proxy_call_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_finish(GDBusProxy *proxy, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_call_finish(MemorySegment proxy, MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_proxy_call_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_call_finish", proxy, res, error);
            }
            return (MemorySegment)mh$.invokeExact(proxy, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_call_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_call_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_sync(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_call_sync$descriptor() {
        return g_dbus_proxy_call_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_sync(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_call_sync$handle() {
        return g_dbus_proxy_call_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_sync(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_call_sync(MemorySegment proxy, MemorySegment method_name, MemorySegment parameters, int flags, int timeout_msec, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_proxy_call_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_call_sync", proxy, method_name, parameters, flags, timeout_msec, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(proxy, method_name, parameters, flags, timeout_msec, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_call_with_unix_fd_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_call_with_unix_fd_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_call_with_unix_fd_list(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_call_with_unix_fd_list$descriptor() {
        return g_dbus_proxy_call_with_unix_fd_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_proxy_call_with_unix_fd_list(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_proxy_call_with_unix_fd_list$handle() {
        return g_dbus_proxy_call_with_unix_fd_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_proxy_call_with_unix_fd_list(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_proxy_call_with_unix_fd_list(MemorySegment proxy, MemorySegment method_name, MemorySegment parameters, int flags, int timeout_msec, MemorySegment fd_list, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_proxy_call_with_unix_fd_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_call_with_unix_fd_list", proxy, method_name, parameters, flags, timeout_msec, fd_list, cancellable, callback, user_data);
            }
            mh$.invokeExact(proxy, method_name, parameters, flags, timeout_msec, fd_list, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_call_with_unix_fd_list_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_call_with_unix_fd_list_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy *proxy, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_call_with_unix_fd_list_finish$descriptor() {
        return g_dbus_proxy_call_with_unix_fd_list_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy *proxy, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_call_with_unix_fd_list_finish$handle() {
        return g_dbus_proxy_call_with_unix_fd_list_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy *proxy, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_call_with_unix_fd_list_finish(MemorySegment proxy, MemorySegment out_fd_list, MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_proxy_call_with_unix_fd_list_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_call_with_unix_fd_list_finish", proxy, out_fd_list, res, error);
            }
            return (MemorySegment)mh$.invokeExact(proxy, out_fd_list, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_call_with_unix_fd_list_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_call_with_unix_fd_list_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_call_with_unix_fd_list_sync$descriptor() {
        return g_dbus_proxy_call_with_unix_fd_list_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_proxy_call_with_unix_fd_list_sync$handle() {
        return g_dbus_proxy_call_with_unix_fd_list_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_proxy_call_with_unix_fd_list_sync(MemorySegment proxy, MemorySegment method_name, MemorySegment parameters, int flags, int timeout_msec, MemorySegment fd_list, MemorySegment out_fd_list, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_proxy_call_with_unix_fd_list_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_call_with_unix_fd_list_sync", proxy, method_name, parameters, flags, timeout_msec, fd_list, out_fd_list, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(proxy, method_name, parameters, flags, timeout_msec, fd_list, out_fd_list, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_server_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_server_get_type$descriptor() {
        return g_dbus_server_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_server_get_type()
     * }
     */
    public static MethodHandle g_dbus_server_get_type$handle() {
        return g_dbus_server_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_server_get_type()
     * }
     */
    public static long g_dbus_server_get_type() {
        var mh$ = g_dbus_server_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_new_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_new_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusServer *g_dbus_server_new_sync(const gchar *address, GDBusServerFlags flags, const gchar *guid, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_server_new_sync$descriptor() {
        return g_dbus_server_new_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusServer *g_dbus_server_new_sync(const gchar *address, GDBusServerFlags flags, const gchar *guid, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_server_new_sync$handle() {
        return g_dbus_server_new_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusServer *g_dbus_server_new_sync(const gchar *address, GDBusServerFlags flags, const gchar *guid, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_server_new_sync(MemorySegment address, int flags, MemorySegment guid, MemorySegment observer, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_server_new_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_new_sync", address, flags, guid, observer, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(address, flags, guid, observer, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_get_client_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_get_client_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_server_get_client_address(GDBusServer *server)
     * }
     */
    public static FunctionDescriptor g_dbus_server_get_client_address$descriptor() {
        return g_dbus_server_get_client_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_server_get_client_address(GDBusServer *server)
     * }
     */
    public static MethodHandle g_dbus_server_get_client_address$handle() {
        return g_dbus_server_get_client_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_server_get_client_address(GDBusServer *server)
     * }
     */
    public static MemorySegment g_dbus_server_get_client_address(MemorySegment server) {
        var mh$ = g_dbus_server_get_client_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_get_client_address", server);
            }
            return (MemorySegment)mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_get_guid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_get_guid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_server_get_guid(GDBusServer *server)
     * }
     */
    public static FunctionDescriptor g_dbus_server_get_guid$descriptor() {
        return g_dbus_server_get_guid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_server_get_guid(GDBusServer *server)
     * }
     */
    public static MethodHandle g_dbus_server_get_guid$handle() {
        return g_dbus_server_get_guid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_server_get_guid(GDBusServer *server)
     * }
     */
    public static MemorySegment g_dbus_server_get_guid(MemorySegment server) {
        var mh$ = g_dbus_server_get_guid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_get_guid", server);
            }
            return (MemorySegment)mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusServerFlags g_dbus_server_get_flags(GDBusServer *server)
     * }
     */
    public static FunctionDescriptor g_dbus_server_get_flags$descriptor() {
        return g_dbus_server_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusServerFlags g_dbus_server_get_flags(GDBusServer *server)
     * }
     */
    public static MethodHandle g_dbus_server_get_flags$handle() {
        return g_dbus_server_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusServerFlags g_dbus_server_get_flags(GDBusServer *server)
     * }
     */
    public static int g_dbus_server_get_flags(MemorySegment server) {
        var mh$ = g_dbus_server_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_get_flags", server);
            }
            return (int)mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_server_start(GDBusServer *server)
     * }
     */
    public static FunctionDescriptor g_dbus_server_start$descriptor() {
        return g_dbus_server_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_server_start(GDBusServer *server)
     * }
     */
    public static MethodHandle g_dbus_server_start$handle() {
        return g_dbus_server_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_server_start(GDBusServer *server)
     * }
     */
    public static void g_dbus_server_start(MemorySegment server) {
        var mh$ = g_dbus_server_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_start", server);
            }
            mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_server_stop(GDBusServer *server)
     * }
     */
    public static FunctionDescriptor g_dbus_server_stop$descriptor() {
        return g_dbus_server_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_server_stop(GDBusServer *server)
     * }
     */
    public static MethodHandle g_dbus_server_stop$handle() {
        return g_dbus_server_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_server_stop(GDBusServer *server)
     * }
     */
    public static void g_dbus_server_stop(MemorySegment server) {
        var mh$ = g_dbus_server_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_stop", server);
            }
            mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_is_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_server_is_active(GDBusServer *server)
     * }
     */
    public static FunctionDescriptor g_dbus_server_is_active$descriptor() {
        return g_dbus_server_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_server_is_active(GDBusServer *server)
     * }
     */
    public static MethodHandle g_dbus_server_is_active$handle() {
        return g_dbus_server_is_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_server_is_active(GDBusServer *server)
     * }
     */
    public static int g_dbus_server_is_active(MemorySegment server) {
        var mh$ = g_dbus_server_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_is_active", server);
            }
            return (int)mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_guid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_guid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_guid(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_is_guid$descriptor() {
        return g_dbus_is_guid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_guid(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_is_guid$handle() {
        return g_dbus_is_guid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_guid(const gchar *string)
     * }
     */
    public static int g_dbus_is_guid(MemorySegment string) {
        var mh$ = g_dbus_is_guid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_guid", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_generate_guid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_generate_guid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_generate_guid()
     * }
     */
    public static FunctionDescriptor g_dbus_generate_guid$descriptor() {
        return g_dbus_generate_guid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_generate_guid()
     * }
     */
    public static MethodHandle g_dbus_generate_guid$handle() {
        return g_dbus_generate_guid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_generate_guid()
     * }
     */
    public static MemorySegment g_dbus_generate_guid() {
        var mh$ = g_dbus_generate_guid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_generate_guid");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_name(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_is_name$descriptor() {
        return g_dbus_is_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_name(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_is_name$handle() {
        return g_dbus_is_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_name(const gchar *string)
     * }
     */
    public static int g_dbus_is_name(MemorySegment string) {
        var mh$ = g_dbus_is_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_name", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_unique_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_unique_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_unique_name(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_is_unique_name$descriptor() {
        return g_dbus_is_unique_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_unique_name(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_is_unique_name$handle() {
        return g_dbus_is_unique_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_unique_name(const gchar *string)
     * }
     */
    public static int g_dbus_is_unique_name(MemorySegment string) {
        var mh$ = g_dbus_is_unique_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_unique_name", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_member_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_member_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_member_name(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_is_member_name$descriptor() {
        return g_dbus_is_member_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_member_name(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_is_member_name$handle() {
        return g_dbus_is_member_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_member_name(const gchar *string)
     * }
     */
    public static int g_dbus_is_member_name(MemorySegment string) {
        var mh$ = g_dbus_is_member_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_member_name", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_interface_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_interface_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_interface_name(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_is_interface_name$descriptor() {
        return g_dbus_is_interface_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_interface_name(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_is_interface_name$handle() {
        return g_dbus_is_interface_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_interface_name(const gchar *string)
     * }
     */
    public static int g_dbus_is_interface_name(MemorySegment string) {
        var mh$ = g_dbus_is_interface_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_interface_name", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_error_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_error_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_error_name(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_is_error_name$descriptor() {
        return g_dbus_is_error_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_error_name(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_is_error_name$handle() {
        return g_dbus_is_error_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_error_name(const gchar *string)
     * }
     */
    public static int g_dbus_is_error_name(MemorySegment string) {
        var mh$ = g_dbus_is_error_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_error_name", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_gvariant_to_gvalue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_gvariant_to_gvalue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_gvariant_to_gvalue(GVariant *value, GValue *out_gvalue)
     * }
     */
    public static FunctionDescriptor g_dbus_gvariant_to_gvalue$descriptor() {
        return g_dbus_gvariant_to_gvalue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_gvariant_to_gvalue(GVariant *value, GValue *out_gvalue)
     * }
     */
    public static MethodHandle g_dbus_gvariant_to_gvalue$handle() {
        return g_dbus_gvariant_to_gvalue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_gvariant_to_gvalue(GVariant *value, GValue *out_gvalue)
     * }
     */
    public static void g_dbus_gvariant_to_gvalue(MemorySegment value, MemorySegment out_gvalue) {
        var mh$ = g_dbus_gvariant_to_gvalue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_gvariant_to_gvalue", value, out_gvalue);
            }
            mh$.invokeExact(value, out_gvalue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_gvalue_to_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_gvalue_to_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_gvalue_to_gvariant(const GValue *gvalue, const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_dbus_gvalue_to_gvariant$descriptor() {
        return g_dbus_gvalue_to_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_dbus_gvalue_to_gvariant(const GValue *gvalue, const GVariantType *type)
     * }
     */
    public static MethodHandle g_dbus_gvalue_to_gvariant$handle() {
        return g_dbus_gvalue_to_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_dbus_gvalue_to_gvariant(const GValue *gvalue, const GVariantType *type)
     * }
     */
    public static MemorySegment g_dbus_gvalue_to_gvariant(MemorySegment gvalue, MemorySegment type) {
        var mh$ = g_dbus_gvalue_to_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_gvalue_to_gvariant", gvalue, type);
            }
            return (MemorySegment)mh$.invokeExact(gvalue, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_escape_object_path_bytestring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_escape_object_path_bytestring"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_escape_object_path_bytestring(const guint8 *bytes)
     * }
     */
    public static FunctionDescriptor g_dbus_escape_object_path_bytestring$descriptor() {
        return g_dbus_escape_object_path_bytestring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_escape_object_path_bytestring(const guint8 *bytes)
     * }
     */
    public static MethodHandle g_dbus_escape_object_path_bytestring$handle() {
        return g_dbus_escape_object_path_bytestring.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_escape_object_path_bytestring(const guint8 *bytes)
     * }
     */
    public static MemorySegment g_dbus_escape_object_path_bytestring(MemorySegment bytes) {
        var mh$ = g_dbus_escape_object_path_bytestring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_escape_object_path_bytestring", bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_escape_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_escape_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_escape_object_path(const gchar *s)
     * }
     */
    public static FunctionDescriptor g_dbus_escape_object_path$descriptor() {
        return g_dbus_escape_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_escape_object_path(const gchar *s)
     * }
     */
    public static MethodHandle g_dbus_escape_object_path$handle() {
        return g_dbus_escape_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_escape_object_path(const gchar *s)
     * }
     */
    public static MemorySegment g_dbus_escape_object_path(MemorySegment s) {
        var mh$ = g_dbus_escape_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_escape_object_path", s);
            }
            return (MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_unescape_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_unescape_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 *g_dbus_unescape_object_path(const gchar *s)
     * }
     */
    public static FunctionDescriptor g_dbus_unescape_object_path$descriptor() {
        return g_dbus_unescape_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 *g_dbus_unescape_object_path(const gchar *s)
     * }
     */
    public static MethodHandle g_dbus_unescape_object_path$handle() {
        return g_dbus_unescape_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 *g_dbus_unescape_object_path(const gchar *s)
     * }
     */
    public static MemorySegment g_dbus_unescape_object_path(MemorySegment s) {
        var mh$ = g_dbus_unescape_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_unescape_object_path", s);
            }
            return (MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_debug_controller_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_debug_controller_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_debug_controller_get_type()
     * }
     */
    public static FunctionDescriptor g_debug_controller_get_type$descriptor() {
        return g_debug_controller_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_debug_controller_get_type()
     * }
     */
    public static MethodHandle g_debug_controller_get_type$handle() {
        return g_debug_controller_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_debug_controller_get_type()
     * }
     */
    public static long g_debug_controller_get_type() {
        var mh$ = g_debug_controller_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_debug_controller_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GDebugController *GDebugController_autoptr
     * }
     */
    public static final AddressLayout GDebugController_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDebugController_listautoptr
     * }
     */
    public static final AddressLayout GDebugController_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDebugController_slistautoptr
     * }
     */
    public static final AddressLayout GDebugController_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDebugController_queueautoptr
     * }
     */
    public static final AddressLayout GDebugController_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_debug_controller_get_debug_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_debug_controller_get_debug_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_debug_controller_get_debug_enabled(GDebugController *self)
     * }
     */
    public static FunctionDescriptor g_debug_controller_get_debug_enabled$descriptor() {
        return g_debug_controller_get_debug_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_debug_controller_get_debug_enabled(GDebugController *self)
     * }
     */
    public static MethodHandle g_debug_controller_get_debug_enabled$handle() {
        return g_debug_controller_get_debug_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_debug_controller_get_debug_enabled(GDebugController *self)
     * }
     */
    public static int g_debug_controller_get_debug_enabled(MemorySegment self) {
        var mh$ = g_debug_controller_get_debug_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_debug_controller_get_debug_enabled", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_debug_controller_set_debug_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_debug_controller_set_debug_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_debug_controller_set_debug_enabled(GDebugController *self, gboolean debug_enabled)
     * }
     */
    public static FunctionDescriptor g_debug_controller_set_debug_enabled$descriptor() {
        return g_debug_controller_set_debug_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_debug_controller_set_debug_enabled(GDebugController *self, gboolean debug_enabled)
     * }
     */
    public static MethodHandle g_debug_controller_set_debug_enabled$handle() {
        return g_debug_controller_set_debug_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_debug_controller_set_debug_enabled(GDebugController *self, gboolean debug_enabled)
     * }
     */
    public static void g_debug_controller_set_debug_enabled(MemorySegment self, int debug_enabled) {
        var mh$ = g_debug_controller_set_debug_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_debug_controller_set_debug_enabled", self, debug_enabled);
            }
            mh$.invokeExact(self, debug_enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_debug_controller_dbus_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_debug_controller_dbus_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_debug_controller_dbus_get_type()
     * }
     */
    public static FunctionDescriptor g_debug_controller_dbus_get_type$descriptor() {
        return g_debug_controller_dbus_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_debug_controller_dbus_get_type()
     * }
     */
    public static MethodHandle g_debug_controller_dbus_get_type$handle() {
        return g_debug_controller_dbus_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_debug_controller_dbus_get_type()
     * }
     */
    public static long g_debug_controller_dbus_get_type() {
        var mh$ = g_debug_controller_dbus_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_debug_controller_dbus_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GDebugControllerDBus *GDebugControllerDBus_autoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBus_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDebugControllerDBus_listautoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBus_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDebugControllerDBus_slistautoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBus_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDebugControllerDBus_queueautoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBus_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDebugControllerDBusClass *GDebugControllerDBusClass_autoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBusClass_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDebugControllerDBusClass_listautoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBusClass_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDebugControllerDBusClass_slistautoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBusClass_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDebugControllerDBusClass_queueautoptr
     * }
     */
    public static final AddressLayout GDebugControllerDBusClass_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_debug_controller_dbus_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_debug_controller_dbus_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDebugControllerDBus *g_debug_controller_dbus_new(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_debug_controller_dbus_new$descriptor() {
        return g_debug_controller_dbus_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDebugControllerDBus *g_debug_controller_dbus_new(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_debug_controller_dbus_new$handle() {
        return g_debug_controller_dbus_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDebugControllerDBus *g_debug_controller_dbus_new(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_debug_controller_dbus_new(MemorySegment connection, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_debug_controller_dbus_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_debug_controller_dbus_new", connection, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_debug_controller_dbus_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_debug_controller_dbus_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_debug_controller_dbus_stop(GDebugControllerDBus *self)
     * }
     */
    public static FunctionDescriptor g_debug_controller_dbus_stop$descriptor() {
        return g_debug_controller_dbus_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_debug_controller_dbus_stop(GDebugControllerDBus *self)
     * }
     */
    public static MethodHandle g_debug_controller_dbus_stop$handle() {
        return g_debug_controller_dbus_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_debug_controller_dbus_stop(GDebugControllerDBus *self)
     * }
     */
    public static void g_debug_controller_dbus_stop(MemorySegment self) {
        var mh$ = g_debug_controller_dbus_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_debug_controller_dbus_stop", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_drive_get_type()
     * }
     */
    public static FunctionDescriptor g_drive_get_type$descriptor() {
        return g_drive_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_drive_get_type()
     * }
     */
    public static MethodHandle g_drive_get_type$handle() {
        return g_drive_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_drive_get_type()
     * }
     */
    public static long g_drive_get_type() {
        var mh$ = g_drive_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_drive_get_name(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_get_name$descriptor() {
        return g_drive_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_drive_get_name(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_get_name$handle() {
        return g_drive_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_drive_get_name(GDrive *drive)
     * }
     */
    public static MemorySegment g_drive_get_name(MemorySegment drive) {
        var mh$ = g_drive_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_name", drive);
            }
            return (MemorySegment)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_drive_get_icon(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_get_icon$descriptor() {
        return g_drive_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_drive_get_icon(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_get_icon$handle() {
        return g_drive_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_drive_get_icon(GDrive *drive)
     * }
     */
    public static MemorySegment g_drive_get_icon(MemorySegment drive) {
        var mh$ = g_drive_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_icon", drive);
            }
            return (MemorySegment)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_symbolic_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_symbolic_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_drive_get_symbolic_icon(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_get_symbolic_icon$descriptor() {
        return g_drive_get_symbolic_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_drive_get_symbolic_icon(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_get_symbolic_icon$handle() {
        return g_drive_get_symbolic_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_drive_get_symbolic_icon(GDrive *drive)
     * }
     */
    public static MemorySegment g_drive_get_symbolic_icon(MemorySegment drive) {
        var mh$ = g_drive_get_symbolic_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_symbolic_icon", drive);
            }
            return (MemorySegment)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_has_volumes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_has_volumes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_has_volumes(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_has_volumes$descriptor() {
        return g_drive_has_volumes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_has_volumes(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_has_volumes$handle() {
        return g_drive_has_volumes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_has_volumes(GDrive *drive)
     * }
     */
    public static int g_drive_has_volumes(MemorySegment drive) {
        var mh$ = g_drive_has_volumes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_has_volumes", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_volumes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_volumes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_drive_get_volumes(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_get_volumes$descriptor() {
        return g_drive_get_volumes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_drive_get_volumes(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_get_volumes$handle() {
        return g_drive_get_volumes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_drive_get_volumes(GDrive *drive)
     * }
     */
    public static MemorySegment g_drive_get_volumes(MemorySegment drive) {
        var mh$ = g_drive_get_volumes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_volumes", drive);
            }
            return (MemorySegment)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_is_removable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_is_removable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_is_removable(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_is_removable$descriptor() {
        return g_drive_is_removable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_is_removable(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_is_removable$handle() {
        return g_drive_is_removable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_is_removable(GDrive *drive)
     * }
     */
    public static int g_drive_is_removable(MemorySegment drive) {
        var mh$ = g_drive_is_removable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_is_removable", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_is_media_removable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_is_media_removable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_is_media_removable(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_is_media_removable$descriptor() {
        return g_drive_is_media_removable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_is_media_removable(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_is_media_removable$handle() {
        return g_drive_is_media_removable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_is_media_removable(GDrive *drive)
     * }
     */
    public static int g_drive_is_media_removable(MemorySegment drive) {
        var mh$ = g_drive_is_media_removable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_is_media_removable", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_has_media {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_has_media"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_has_media(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_has_media$descriptor() {
        return g_drive_has_media.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_has_media(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_has_media$handle() {
        return g_drive_has_media.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_has_media(GDrive *drive)
     * }
     */
    public static int g_drive_has_media(MemorySegment drive) {
        var mh$ = g_drive_has_media.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_has_media", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_is_media_check_automatic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_is_media_check_automatic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_is_media_check_automatic(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_is_media_check_automatic$descriptor() {
        return g_drive_is_media_check_automatic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_is_media_check_automatic(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_is_media_check_automatic$handle() {
        return g_drive_is_media_check_automatic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_is_media_check_automatic(GDrive *drive)
     * }
     */
    public static int g_drive_is_media_check_automatic(MemorySegment drive) {
        var mh$ = g_drive_is_media_check_automatic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_is_media_check_automatic", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_can_poll_for_media {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_can_poll_for_media"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_poll_for_media(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_can_poll_for_media$descriptor() {
        return g_drive_can_poll_for_media.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_poll_for_media(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_can_poll_for_media$handle() {
        return g_drive_can_poll_for_media.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_can_poll_for_media(GDrive *drive)
     * }
     */
    public static int g_drive_can_poll_for_media(MemorySegment drive) {
        var mh$ = g_drive_can_poll_for_media.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_can_poll_for_media", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_can_eject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_can_eject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_eject(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_can_eject$descriptor() {
        return g_drive_can_eject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_eject(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_can_eject$handle() {
        return g_drive_can_eject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_can_eject(GDrive *drive)
     * }
     */
    public static int g_drive_can_eject(MemorySegment drive) {
        var mh$ = g_drive_can_eject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_can_eject", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_eject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_eject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_drive_eject(GDrive *drive, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_drive_eject$descriptor() {
        return g_drive_eject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_drive_eject(GDrive *drive, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_drive_eject$handle() {
        return g_drive_eject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_drive_eject(GDrive *drive, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_drive_eject(MemorySegment drive, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_drive_eject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_eject", drive, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(drive, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_eject_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_eject_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_eject_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_drive_eject_finish$descriptor() {
        return g_drive_eject_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_eject_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_drive_eject_finish$handle() {
        return g_drive_eject_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_eject_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_drive_eject_finish(MemorySegment drive, MemorySegment result, MemorySegment error) {
        var mh$ = g_drive_eject_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_eject_finish", drive, result, error);
            }
            return (int)mh$.invokeExact(drive, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_poll_for_media {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_poll_for_media"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_drive_poll_for_media(GDrive *drive, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_drive_poll_for_media$descriptor() {
        return g_drive_poll_for_media.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_drive_poll_for_media(GDrive *drive, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_drive_poll_for_media$handle() {
        return g_drive_poll_for_media.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_drive_poll_for_media(GDrive *drive, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_drive_poll_for_media(MemorySegment drive, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_drive_poll_for_media.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_poll_for_media", drive, cancellable, callback, user_data);
            }
            mh$.invokeExact(drive, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_poll_for_media_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_poll_for_media_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_poll_for_media_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_drive_poll_for_media_finish$descriptor() {
        return g_drive_poll_for_media_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_poll_for_media_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_drive_poll_for_media_finish$handle() {
        return g_drive_poll_for_media_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_poll_for_media_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_drive_poll_for_media_finish(MemorySegment drive, MemorySegment result, MemorySegment error) {
        var mh$ = g_drive_poll_for_media_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_poll_for_media_finish", drive, result, error);
            }
            return (int)mh$.invokeExact(drive, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_identifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_identifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_drive_get_identifier(GDrive *drive, const char *kind)
     * }
     */
    public static FunctionDescriptor g_drive_get_identifier$descriptor() {
        return g_drive_get_identifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_drive_get_identifier(GDrive *drive, const char *kind)
     * }
     */
    public static MethodHandle g_drive_get_identifier$handle() {
        return g_drive_get_identifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_drive_get_identifier(GDrive *drive, const char *kind)
     * }
     */
    public static MemorySegment g_drive_get_identifier(MemorySegment drive, MemorySegment kind) {
        var mh$ = g_drive_get_identifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_identifier", drive, kind);
            }
            return (MemorySegment)mh$.invokeExact(drive, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_enumerate_identifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_enumerate_identifiers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_drive_enumerate_identifiers(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_enumerate_identifiers$descriptor() {
        return g_drive_enumerate_identifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_drive_enumerate_identifiers(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_enumerate_identifiers$handle() {
        return g_drive_enumerate_identifiers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_drive_enumerate_identifiers(GDrive *drive)
     * }
     */
    public static MemorySegment g_drive_enumerate_identifiers(MemorySegment drive) {
        var mh$ = g_drive_enumerate_identifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_enumerate_identifiers", drive);
            }
            return (MemorySegment)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_start_stop_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_start_stop_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDriveStartStopType g_drive_get_start_stop_type(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_get_start_stop_type$descriptor() {
        return g_drive_get_start_stop_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDriveStartStopType g_drive_get_start_stop_type(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_get_start_stop_type$handle() {
        return g_drive_get_start_stop_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDriveStartStopType g_drive_get_start_stop_type(GDrive *drive)
     * }
     */
    public static int g_drive_get_start_stop_type(MemorySegment drive) {
        var mh$ = g_drive_get_start_stop_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_start_stop_type", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_can_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_can_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_start(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_can_start$descriptor() {
        return g_drive_can_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_start(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_can_start$handle() {
        return g_drive_can_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_can_start(GDrive *drive)
     * }
     */
    public static int g_drive_can_start(MemorySegment drive) {
        var mh$ = g_drive_can_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_can_start", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_can_start_degraded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_can_start_degraded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_start_degraded(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_can_start_degraded$descriptor() {
        return g_drive_can_start_degraded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_start_degraded(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_can_start_degraded$handle() {
        return g_drive_can_start_degraded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_can_start_degraded(GDrive *drive)
     * }
     */
    public static int g_drive_can_start_degraded(MemorySegment drive) {
        var mh$ = g_drive_can_start_degraded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_can_start_degraded", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_drive_start(GDrive *drive, GDriveStartFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_drive_start$descriptor() {
        return g_drive_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_drive_start(GDrive *drive, GDriveStartFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_drive_start$handle() {
        return g_drive_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_drive_start(GDrive *drive, GDriveStartFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_drive_start(MemorySegment drive, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_drive_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_start", drive, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(drive, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_start_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_start_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_start_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_drive_start_finish$descriptor() {
        return g_drive_start_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_start_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_drive_start_finish$handle() {
        return g_drive_start_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_start_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_drive_start_finish(MemorySegment drive, MemorySegment result, MemorySegment error) {
        var mh$ = g_drive_start_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_start_finish", drive, result, error);
            }
            return (int)mh$.invokeExact(drive, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_can_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_can_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_stop(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_can_stop$descriptor() {
        return g_drive_can_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_can_stop(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_can_stop$handle() {
        return g_drive_can_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_can_stop(GDrive *drive)
     * }
     */
    public static int g_drive_can_stop(MemorySegment drive) {
        var mh$ = g_drive_can_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_can_stop", drive);
            }
            return (int)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_drive_stop(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_drive_stop$descriptor() {
        return g_drive_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_drive_stop(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_drive_stop$handle() {
        return g_drive_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_drive_stop(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_drive_stop(MemorySegment drive, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_drive_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_stop", drive, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(drive, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_stop_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_stop_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_stop_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_drive_stop_finish$descriptor() {
        return g_drive_stop_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_stop_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_drive_stop_finish$handle() {
        return g_drive_stop_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_stop_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_drive_stop_finish(MemorySegment drive, MemorySegment result, MemorySegment error) {
        var mh$ = g_drive_stop_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_stop_finish", drive, result, error);
            }
            return (int)mh$.invokeExact(drive, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_eject_with_operation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_eject_with_operation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_drive_eject_with_operation(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_drive_eject_with_operation$descriptor() {
        return g_drive_eject_with_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_drive_eject_with_operation(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_drive_eject_with_operation$handle() {
        return g_drive_eject_with_operation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_drive_eject_with_operation(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_drive_eject_with_operation(MemorySegment drive, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_drive_eject_with_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_eject_with_operation", drive, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(drive, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_eject_with_operation_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_eject_with_operation_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_drive_eject_with_operation_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_drive_eject_with_operation_finish$descriptor() {
        return g_drive_eject_with_operation_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_drive_eject_with_operation_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_drive_eject_with_operation_finish$handle() {
        return g_drive_eject_with_operation_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_drive_eject_with_operation_finish(GDrive *drive, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_drive_eject_with_operation_finish(MemorySegment drive, MemorySegment result, MemorySegment error) {
        var mh$ = g_drive_eject_with_operation_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_eject_with_operation_finish", drive, result, error);
            }
            return (int)mh$.invokeExact(drive, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_get_sort_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_get_sort_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_drive_get_sort_key(GDrive *drive)
     * }
     */
    public static FunctionDescriptor g_drive_get_sort_key$descriptor() {
        return g_drive_get_sort_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_drive_get_sort_key(GDrive *drive)
     * }
     */
    public static MethodHandle g_drive_get_sort_key$handle() {
        return g_drive_get_sort_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_drive_get_sort_key(GDrive *drive)
     * }
     */
    public static MemorySegment g_drive_get_sort_key(MemorySegment drive) {
        var mh$ = g_drive_get_sort_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_get_sort_key", drive);
            }
            return (MemorySegment)mh$.invokeExact(drive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dtls_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_type$descriptor() {
        return g_dtls_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dtls_connection_get_type()
     * }
     */
    public static MethodHandle g_dtls_connection_get_type$handle() {
        return g_dtls_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dtls_connection_get_type()
     * }
     */
    public static long g_dtls_connection_get_type() {
        var mh$ = g_dtls_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_set_database {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_set_database"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_database(GDtlsConnection *conn, GTlsDatabase *database)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_set_database$descriptor() {
        return g_dtls_connection_set_database.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_database(GDtlsConnection *conn, GTlsDatabase *database)
     * }
     */
    public static MethodHandle g_dtls_connection_set_database$handle() {
        return g_dtls_connection_set_database.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_database(GDtlsConnection *conn, GTlsDatabase *database)
     * }
     */
    public static void g_dtls_connection_set_database(MemorySegment conn, MemorySegment database) {
        var mh$ = g_dtls_connection_set_database.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_set_database", conn, database);
            }
            mh$.invokeExact(conn, database);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_database {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_database"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_dtls_connection_get_database(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_database$descriptor() {
        return g_dtls_connection_get_database.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_dtls_connection_get_database(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_database$handle() {
        return g_dtls_connection_get_database.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsDatabase *g_dtls_connection_get_database(GDtlsConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_connection_get_database(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_database.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_database", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_set_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_set_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_certificate(GDtlsConnection *conn, GTlsCertificate *certificate)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_set_certificate$descriptor() {
        return g_dtls_connection_set_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_certificate(GDtlsConnection *conn, GTlsCertificate *certificate)
     * }
     */
    public static MethodHandle g_dtls_connection_set_certificate$handle() {
        return g_dtls_connection_set_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_certificate(GDtlsConnection *conn, GTlsCertificate *certificate)
     * }
     */
    public static void g_dtls_connection_set_certificate(MemorySegment conn, MemorySegment certificate) {
        var mh$ = g_dtls_connection_set_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_set_certificate", conn, certificate);
            }
            mh$.invokeExact(conn, certificate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_dtls_connection_get_certificate(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_certificate$descriptor() {
        return g_dtls_connection_get_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_dtls_connection_get_certificate(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_certificate$handle() {
        return g_dtls_connection_get_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_dtls_connection_get_certificate(GDtlsConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_connection_get_certificate(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_certificate", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_set_interaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_set_interaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_interaction(GDtlsConnection *conn, GTlsInteraction *interaction)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_set_interaction$descriptor() {
        return g_dtls_connection_set_interaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_interaction(GDtlsConnection *conn, GTlsInteraction *interaction)
     * }
     */
    public static MethodHandle g_dtls_connection_set_interaction$handle() {
        return g_dtls_connection_set_interaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_interaction(GDtlsConnection *conn, GTlsInteraction *interaction)
     * }
     */
    public static void g_dtls_connection_set_interaction(MemorySegment conn, MemorySegment interaction) {
        var mh$ = g_dtls_connection_set_interaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_set_interaction", conn, interaction);
            }
            mh$.invokeExact(conn, interaction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_interaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_interaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteraction *g_dtls_connection_get_interaction(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_interaction$descriptor() {
        return g_dtls_connection_get_interaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteraction *g_dtls_connection_get_interaction(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_interaction$handle() {
        return g_dtls_connection_get_interaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteraction *g_dtls_connection_get_interaction(GDtlsConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_connection_get_interaction(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_interaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_interaction", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_peer_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_peer_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_dtls_connection_get_peer_certificate(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_peer_certificate$descriptor() {
        return g_dtls_connection_get_peer_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_dtls_connection_get_peer_certificate(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_peer_certificate$handle() {
        return g_dtls_connection_get_peer_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_dtls_connection_get_peer_certificate(GDtlsConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_connection_get_peer_certificate(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_peer_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_peer_certificate", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_peer_certificate_errors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_peer_certificate_errors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_peer_certificate_errors$descriptor() {
        return g_dtls_connection_get_peer_certificate_errors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_peer_certificate_errors$handle() {
        return g_dtls_connection_get_peer_certificate_errors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors(GDtlsConnection *conn)
     * }
     */
    public static int g_dtls_connection_get_peer_certificate_errors(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_peer_certificate_errors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_peer_certificate_errors", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_set_require_close_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_set_require_close_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_require_close_notify(GDtlsConnection *conn, gboolean require_close_notify)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_set_require_close_notify$descriptor() {
        return g_dtls_connection_set_require_close_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_require_close_notify(GDtlsConnection *conn, gboolean require_close_notify)
     * }
     */
    public static MethodHandle g_dtls_connection_set_require_close_notify$handle() {
        return g_dtls_connection_set_require_close_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_require_close_notify(GDtlsConnection *conn, gboolean require_close_notify)
     * }
     */
    public static void g_dtls_connection_set_require_close_notify(MemorySegment conn, int require_close_notify) {
        var mh$ = g_dtls_connection_set_require_close_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_set_require_close_notify", conn, require_close_notify);
            }
            mh$.invokeExact(conn, require_close_notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_require_close_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_require_close_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_get_require_close_notify(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_require_close_notify$descriptor() {
        return g_dtls_connection_get_require_close_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_get_require_close_notify(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_require_close_notify$handle() {
        return g_dtls_connection_get_require_close_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_get_require_close_notify(GDtlsConnection *conn)
     * }
     */
    public static int g_dtls_connection_get_require_close_notify(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_require_close_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_require_close_notify", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_set_rehandshake_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_set_rehandshake_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_rehandshake_mode(GDtlsConnection *conn, GTlsRehandshakeMode mode)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_set_rehandshake_mode$descriptor() {
        return g_dtls_connection_set_rehandshake_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_rehandshake_mode(GDtlsConnection *conn, GTlsRehandshakeMode mode)
     * }
     */
    public static MethodHandle g_dtls_connection_set_rehandshake_mode$handle() {
        return g_dtls_connection_set_rehandshake_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_rehandshake_mode(GDtlsConnection *conn, GTlsRehandshakeMode mode)
     * }
     */
    public static void g_dtls_connection_set_rehandshake_mode(MemorySegment conn, int mode) {
        var mh$ = g_dtls_connection_set_rehandshake_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_set_rehandshake_mode", conn, mode);
            }
            mh$.invokeExact(conn, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_rehandshake_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_rehandshake_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_rehandshake_mode$descriptor() {
        return g_dtls_connection_get_rehandshake_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_rehandshake_mode$handle() {
        return g_dtls_connection_get_rehandshake_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode(GDtlsConnection *conn)
     * }
     */
    public static int g_dtls_connection_get_rehandshake_mode(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_rehandshake_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_rehandshake_mode", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_handshake {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_handshake"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_handshake(GDtlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_handshake$descriptor() {
        return g_dtls_connection_handshake.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_handshake(GDtlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dtls_connection_handshake$handle() {
        return g_dtls_connection_handshake.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_handshake(GDtlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_dtls_connection_handshake(MemorySegment conn, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dtls_connection_handshake.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_handshake", conn, cancellable, error);
            }
            return (int)mh$.invokeExact(conn, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_handshake_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_handshake_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_handshake_async(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_handshake_async$descriptor() {
        return g_dtls_connection_handshake_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_handshake_async(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dtls_connection_handshake_async$handle() {
        return g_dtls_connection_handshake_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_handshake_async(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dtls_connection_handshake_async(MemorySegment conn, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dtls_connection_handshake_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_handshake_async", conn, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(conn, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_handshake_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_handshake_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_handshake_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_handshake_finish$descriptor() {
        return g_dtls_connection_handshake_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_handshake_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_dtls_connection_handshake_finish$handle() {
        return g_dtls_connection_handshake_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_handshake_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_dtls_connection_handshake_finish(MemorySegment conn, MemorySegment result, MemorySegment error) {
        var mh$ = g_dtls_connection_handshake_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_handshake_finish", conn, result, error);
            }
            return (int)mh$.invokeExact(conn, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_shutdown(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_shutdown$descriptor() {
        return g_dtls_connection_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_shutdown(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dtls_connection_shutdown$handle() {
        return g_dtls_connection_shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_shutdown(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_dtls_connection_shutdown(MemorySegment conn, int shutdown_read, int shutdown_write, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dtls_connection_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_shutdown", conn, shutdown_read, shutdown_write, cancellable, error);
            }
            return (int)mh$.invokeExact(conn, shutdown_read, shutdown_write, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_shutdown_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_shutdown_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_shutdown_async(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_shutdown_async$descriptor() {
        return g_dtls_connection_shutdown_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_shutdown_async(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dtls_connection_shutdown_async$handle() {
        return g_dtls_connection_shutdown_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_shutdown_async(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dtls_connection_shutdown_async(MemorySegment conn, int shutdown_read, int shutdown_write, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dtls_connection_shutdown_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_shutdown_async", conn, shutdown_read, shutdown_write, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(conn, shutdown_read, shutdown_write, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_shutdown_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_shutdown_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_shutdown_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_shutdown_finish$descriptor() {
        return g_dtls_connection_shutdown_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_shutdown_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_dtls_connection_shutdown_finish$handle() {
        return g_dtls_connection_shutdown_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_shutdown_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_dtls_connection_shutdown_finish(MemorySegment conn, MemorySegment result, MemorySegment error) {
        var mh$ = g_dtls_connection_shutdown_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_shutdown_finish", conn, result, error);
            }
            return (int)mh$.invokeExact(conn, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_close(GDtlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_close$descriptor() {
        return g_dtls_connection_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_close(GDtlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dtls_connection_close$handle() {
        return g_dtls_connection_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_close(GDtlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_dtls_connection_close(MemorySegment conn, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dtls_connection_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_close", conn, cancellable, error);
            }
            return (int)mh$.invokeExact(conn, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_close_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_close_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_close_async(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_close_async$descriptor() {
        return g_dtls_connection_close_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_close_async(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dtls_connection_close_async$handle() {
        return g_dtls_connection_close_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_close_async(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dtls_connection_close_async(MemorySegment conn, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dtls_connection_close_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_close_async", conn, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(conn, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_close_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_close_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_close_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_close_finish$descriptor() {
        return g_dtls_connection_close_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_close_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_dtls_connection_close_finish$handle() {
        return g_dtls_connection_close_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_close_finish(GDtlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_dtls_connection_close_finish(MemorySegment conn, MemorySegment result, MemorySegment error) {
        var mh$ = g_dtls_connection_close_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_close_finish", conn, result, error);
            }
            return (int)mh$.invokeExact(conn, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_emit_accept_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_emit_accept_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_emit_accept_certificate(GDtlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_emit_accept_certificate$descriptor() {
        return g_dtls_connection_emit_accept_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_emit_accept_certificate(GDtlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors)
     * }
     */
    public static MethodHandle g_dtls_connection_emit_accept_certificate$handle() {
        return g_dtls_connection_emit_accept_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_emit_accept_certificate(GDtlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors)
     * }
     */
    public static int g_dtls_connection_emit_accept_certificate(MemorySegment conn, MemorySegment peer_cert, int errors) {
        var mh$ = g_dtls_connection_emit_accept_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_emit_accept_certificate", conn, peer_cert, errors);
            }
            return (int)mh$.invokeExact(conn, peer_cert, errors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_set_advertised_protocols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_set_advertised_protocols"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_advertised_protocols(GDtlsConnection *conn, const gchar *const *protocols)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_set_advertised_protocols$descriptor() {
        return g_dtls_connection_set_advertised_protocols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_advertised_protocols(GDtlsConnection *conn, const gchar *const *protocols)
     * }
     */
    public static MethodHandle g_dtls_connection_set_advertised_protocols$handle() {
        return g_dtls_connection_set_advertised_protocols.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_connection_set_advertised_protocols(GDtlsConnection *conn, const gchar *const *protocols)
     * }
     */
    public static void g_dtls_connection_set_advertised_protocols(MemorySegment conn, MemorySegment protocols) {
        var mh$ = g_dtls_connection_set_advertised_protocols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_set_advertised_protocols", conn, protocols);
            }
            mh$.invokeExact(conn, protocols);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_negotiated_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_negotiated_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dtls_connection_get_negotiated_protocol(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_negotiated_protocol$descriptor() {
        return g_dtls_connection_get_negotiated_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dtls_connection_get_negotiated_protocol(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_negotiated_protocol$handle() {
        return g_dtls_connection_get_negotiated_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dtls_connection_get_negotiated_protocol(GDtlsConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_connection_get_negotiated_protocol(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_negotiated_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_negotiated_protocol", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_channel_binding_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_channel_binding_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_get_channel_binding_data(GDtlsConnection *conn, GTlsChannelBindingType type, GByteArray *data, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_channel_binding_data$descriptor() {
        return g_dtls_connection_get_channel_binding_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_get_channel_binding_data(GDtlsConnection *conn, GTlsChannelBindingType type, GByteArray *data, GError **error)
     * }
     */
    public static MethodHandle g_dtls_connection_get_channel_binding_data$handle() {
        return g_dtls_connection_get_channel_binding_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dtls_connection_get_channel_binding_data(GDtlsConnection *conn, GTlsChannelBindingType type, GByteArray *data, GError **error)
     * }
     */
    public static int g_dtls_connection_get_channel_binding_data(MemorySegment conn, int type, MemorySegment data, MemorySegment error) {
        var mh$ = g_dtls_connection_get_channel_binding_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_channel_binding_data", conn, type, data, error);
            }
            return (int)mh$.invokeExact(conn, type, data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_protocol_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_protocol_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsProtocolVersion g_dtls_connection_get_protocol_version(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_protocol_version$descriptor() {
        return g_dtls_connection_get_protocol_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsProtocolVersion g_dtls_connection_get_protocol_version(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_protocol_version$handle() {
        return g_dtls_connection_get_protocol_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsProtocolVersion g_dtls_connection_get_protocol_version(GDtlsConnection *conn)
     * }
     */
    public static int g_dtls_connection_get_protocol_version(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_protocol_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_protocol_version", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_connection_get_ciphersuite_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_connection_get_ciphersuite_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dtls_connection_get_ciphersuite_name(GDtlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_connection_get_ciphersuite_name$descriptor() {
        return g_dtls_connection_get_ciphersuite_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dtls_connection_get_ciphersuite_name(GDtlsConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_connection_get_ciphersuite_name$handle() {
        return g_dtls_connection_get_ciphersuite_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dtls_connection_get_ciphersuite_name(GDtlsConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_connection_get_ciphersuite_name(MemorySegment conn) {
        var mh$ = g_dtls_connection_get_ciphersuite_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_connection_get_ciphersuite_name", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_client_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_client_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dtls_client_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_dtls_client_connection_get_type$descriptor() {
        return g_dtls_client_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dtls_client_connection_get_type()
     * }
     */
    public static MethodHandle g_dtls_client_connection_get_type$handle() {
        return g_dtls_client_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dtls_client_connection_get_type()
     * }
     */
    public static long g_dtls_client_connection_get_type() {
        var mh$ = g_dtls_client_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_client_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_client_connection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_client_connection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDatagramBased *g_dtls_client_connection_new(GDatagramBased *base_socket, GSocketConnectable *server_identity, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_client_connection_new$descriptor() {
        return g_dtls_client_connection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDatagramBased *g_dtls_client_connection_new(GDatagramBased *base_socket, GSocketConnectable *server_identity, GError **error)
     * }
     */
    public static MethodHandle g_dtls_client_connection_new$handle() {
        return g_dtls_client_connection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDatagramBased *g_dtls_client_connection_new(GDatagramBased *base_socket, GSocketConnectable *server_identity, GError **error)
     * }
     */
    public static MemorySegment g_dtls_client_connection_new(MemorySegment base_socket, MemorySegment server_identity, MemorySegment error) {
        var mh$ = g_dtls_client_connection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_client_connection_new", base_socket, server_identity, error);
            }
            return (MemorySegment)mh$.invokeExact(base_socket, server_identity, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_client_connection_get_validation_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_client_connection_get_validation_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_dtls_client_connection_get_validation_flags(GDtlsClientConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_client_connection_get_validation_flags$descriptor() {
        return g_dtls_client_connection_get_validation_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_dtls_client_connection_get_validation_flags(GDtlsClientConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_client_connection_get_validation_flags$handle() {
        return g_dtls_client_connection_get_validation_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_dtls_client_connection_get_validation_flags(GDtlsClientConnection *conn)
     * }
     */
    public static int g_dtls_client_connection_get_validation_flags(MemorySegment conn) {
        var mh$ = g_dtls_client_connection_get_validation_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_client_connection_get_validation_flags", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_client_connection_set_validation_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_client_connection_set_validation_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_client_connection_set_validation_flags(GDtlsClientConnection *conn, GTlsCertificateFlags flags)
     * }
     */
    public static FunctionDescriptor g_dtls_client_connection_set_validation_flags$descriptor() {
        return g_dtls_client_connection_set_validation_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_client_connection_set_validation_flags(GDtlsClientConnection *conn, GTlsCertificateFlags flags)
     * }
     */
    public static MethodHandle g_dtls_client_connection_set_validation_flags$handle() {
        return g_dtls_client_connection_set_validation_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_client_connection_set_validation_flags(GDtlsClientConnection *conn, GTlsCertificateFlags flags)
     * }
     */
    public static void g_dtls_client_connection_set_validation_flags(MemorySegment conn, int flags) {
        var mh$ = g_dtls_client_connection_set_validation_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_client_connection_set_validation_flags", conn, flags);
            }
            mh$.invokeExact(conn, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_client_connection_get_server_identity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_client_connection_get_server_identity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_dtls_client_connection_get_server_identity(GDtlsClientConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_client_connection_get_server_identity$descriptor() {
        return g_dtls_client_connection_get_server_identity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_dtls_client_connection_get_server_identity(GDtlsClientConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_client_connection_get_server_identity$handle() {
        return g_dtls_client_connection_get_server_identity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnectable *g_dtls_client_connection_get_server_identity(GDtlsClientConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_client_connection_get_server_identity(MemorySegment conn) {
        var mh$ = g_dtls_client_connection_get_server_identity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_client_connection_get_server_identity", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_client_connection_set_server_identity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_client_connection_set_server_identity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dtls_client_connection_set_server_identity(GDtlsClientConnection *conn, GSocketConnectable *identity)
     * }
     */
    public static FunctionDescriptor g_dtls_client_connection_set_server_identity$descriptor() {
        return g_dtls_client_connection_set_server_identity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dtls_client_connection_set_server_identity(GDtlsClientConnection *conn, GSocketConnectable *identity)
     * }
     */
    public static MethodHandle g_dtls_client_connection_set_server_identity$handle() {
        return g_dtls_client_connection_set_server_identity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dtls_client_connection_set_server_identity(GDtlsClientConnection *conn, GSocketConnectable *identity)
     * }
     */
    public static void g_dtls_client_connection_set_server_identity(MemorySegment conn, MemorySegment identity) {
        var mh$ = g_dtls_client_connection_set_server_identity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_client_connection_set_server_identity", conn, identity);
            }
            mh$.invokeExact(conn, identity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_client_connection_get_accepted_cas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_client_connection_get_accepted_cas"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_dtls_client_connection_get_accepted_cas(GDtlsClientConnection *conn)
     * }
     */
    public static FunctionDescriptor g_dtls_client_connection_get_accepted_cas$descriptor() {
        return g_dtls_client_connection_get_accepted_cas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_dtls_client_connection_get_accepted_cas(GDtlsClientConnection *conn)
     * }
     */
    public static MethodHandle g_dtls_client_connection_get_accepted_cas$handle() {
        return g_dtls_client_connection_get_accepted_cas.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_dtls_client_connection_get_accepted_cas(GDtlsClientConnection *conn)
     * }
     */
    public static MemorySegment g_dtls_client_connection_get_accepted_cas(MemorySegment conn) {
        var mh$ = g_dtls_client_connection_get_accepted_cas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_client_connection_get_accepted_cas", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_server_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_server_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dtls_server_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_dtls_server_connection_get_type$descriptor() {
        return g_dtls_server_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dtls_server_connection_get_type()
     * }
     */
    public static MethodHandle g_dtls_server_connection_get_type$handle() {
        return g_dtls_server_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dtls_server_connection_get_type()
     * }
     */
    public static long g_dtls_server_connection_get_type() {
        var mh$ = g_dtls_server_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_server_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dtls_server_connection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dtls_server_connection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDatagramBased *g_dtls_server_connection_new(GDatagramBased *base_socket, GTlsCertificate *certificate, GError **error)
     * }
     */
    public static FunctionDescriptor g_dtls_server_connection_new$descriptor() {
        return g_dtls_server_connection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDatagramBased *g_dtls_server_connection_new(GDatagramBased *base_socket, GTlsCertificate *certificate, GError **error)
     * }
     */
    public static MethodHandle g_dtls_server_connection_new$handle() {
        return g_dtls_server_connection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDatagramBased *g_dtls_server_connection_new(GDatagramBased *base_socket, GTlsCertificate *certificate, GError **error)
     * }
     */
    public static MemorySegment g_dtls_server_connection_new(MemorySegment base_socket, MemorySegment certificate, MemorySegment error) {
        var mh$ = g_dtls_server_connection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dtls_server_connection_new", base_socket, certificate, error);
            }
            return (MemorySegment)mh$.invokeExact(base_socket, certificate, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_icon_get_type()
     * }
     */
    public static FunctionDescriptor g_icon_get_type$descriptor() {
        return g_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_icon_get_type()
     * }
     */
    public static MethodHandle g_icon_get_type$handle() {
        return g_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_icon_get_type()
     * }
     */
    public static long g_icon_get_type() {
        var mh$ = g_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_icon_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_icon_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_icon_hash(gconstpointer icon)
     * }
     */
    public static FunctionDescriptor g_icon_hash$descriptor() {
        return g_icon_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_icon_hash(gconstpointer icon)
     * }
     */
    public static MethodHandle g_icon_hash$handle() {
        return g_icon_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_icon_hash(gconstpointer icon)
     * }
     */
    public static int g_icon_hash(MemorySegment icon) {
        var mh$ = g_icon_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_icon_hash", icon);
            }
            return (int)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_icon_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_icon_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_icon_equal(GIcon *icon1, GIcon *icon2)
     * }
     */
    public static FunctionDescriptor g_icon_equal$descriptor() {
        return g_icon_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_icon_equal(GIcon *icon1, GIcon *icon2)
     * }
     */
    public static MethodHandle g_icon_equal$handle() {
        return g_icon_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_icon_equal(GIcon *icon1, GIcon *icon2)
     * }
     */
    public static int g_icon_equal(MemorySegment icon1, MemorySegment icon2) {
        var mh$ = g_icon_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_icon_equal", icon1, icon2);
            }
            return (int)mh$.invokeExact(icon1, icon2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_icon_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_icon_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_icon_to_string(GIcon *icon)
     * }
     */
    public static FunctionDescriptor g_icon_to_string$descriptor() {
        return g_icon_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_icon_to_string(GIcon *icon)
     * }
     */
    public static MethodHandle g_icon_to_string$handle() {
        return g_icon_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_icon_to_string(GIcon *icon)
     * }
     */
    public static MemorySegment g_icon_to_string(MemorySegment icon) {
        var mh$ = g_icon_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_icon_to_string", icon);
            }
            return (MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_icon_new_for_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_icon_new_for_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_icon_new_for_string(const gchar *str, GError **error)
     * }
     */
    public static FunctionDescriptor g_icon_new_for_string$descriptor() {
        return g_icon_new_for_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_icon_new_for_string(const gchar *str, GError **error)
     * }
     */
    public static MethodHandle g_icon_new_for_string$handle() {
        return g_icon_new_for_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_icon_new_for_string(const gchar *str, GError **error)
     * }
     */
    public static MemorySegment g_icon_new_for_string(MemorySegment str, MemorySegment error) {
        var mh$ = g_icon_new_for_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_icon_new_for_string", str, error);
            }
            return (MemorySegment)mh$.invokeExact(str, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_icon_serialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_icon_serialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_icon_serialize(GIcon *icon)
     * }
     */
    public static FunctionDescriptor g_icon_serialize$descriptor() {
        return g_icon_serialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_icon_serialize(GIcon *icon)
     * }
     */
    public static MethodHandle g_icon_serialize$handle() {
        return g_icon_serialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_icon_serialize(GIcon *icon)
     * }
     */
    public static MemorySegment g_icon_serialize(MemorySegment icon) {
        var mh$ = g_icon_serialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_icon_serialize", icon);
            }
            return (MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_icon_deserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_icon_deserialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_icon_deserialize(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_icon_deserialize$descriptor() {
        return g_icon_deserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_icon_deserialize(GVariant *value)
     * }
     */
    public static MethodHandle g_icon_deserialize$handle() {
        return g_icon_deserialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_icon_deserialize(GVariant *value)
     * }
     */
    public static MemorySegment g_icon_deserialize(MemorySegment value) {
        var mh$ = g_icon_deserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_icon_deserialize", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblem_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblem_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_emblem_get_type()
     * }
     */
    public static FunctionDescriptor g_emblem_get_type$descriptor() {
        return g_emblem_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_emblem_get_type()
     * }
     */
    public static MethodHandle g_emblem_get_type$handle() {
        return g_emblem_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_emblem_get_type()
     * }
     */
    public static long g_emblem_get_type() {
        var mh$ = g_emblem_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblem_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblem_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblem_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GEmblem *g_emblem_new(GIcon *icon)
     * }
     */
    public static FunctionDescriptor g_emblem_new$descriptor() {
        return g_emblem_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GEmblem *g_emblem_new(GIcon *icon)
     * }
     */
    public static MethodHandle g_emblem_new$handle() {
        return g_emblem_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GEmblem *g_emblem_new(GIcon *icon)
     * }
     */
    public static MemorySegment g_emblem_new(MemorySegment icon) {
        var mh$ = g_emblem_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblem_new", icon);
            }
            return (MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblem_new_with_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblem_new_with_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GEmblem *g_emblem_new_with_origin(GIcon *icon, GEmblemOrigin origin)
     * }
     */
    public static FunctionDescriptor g_emblem_new_with_origin$descriptor() {
        return g_emblem_new_with_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GEmblem *g_emblem_new_with_origin(GIcon *icon, GEmblemOrigin origin)
     * }
     */
    public static MethodHandle g_emblem_new_with_origin$handle() {
        return g_emblem_new_with_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GEmblem *g_emblem_new_with_origin(GIcon *icon, GEmblemOrigin origin)
     * }
     */
    public static MemorySegment g_emblem_new_with_origin(MemorySegment icon, int origin) {
        var mh$ = g_emblem_new_with_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblem_new_with_origin", icon, origin);
            }
            return (MemorySegment)mh$.invokeExact(icon, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblem_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblem_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_emblem_get_icon(GEmblem *emblem)
     * }
     */
    public static FunctionDescriptor g_emblem_get_icon$descriptor() {
        return g_emblem_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_emblem_get_icon(GEmblem *emblem)
     * }
     */
    public static MethodHandle g_emblem_get_icon$handle() {
        return g_emblem_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_emblem_get_icon(GEmblem *emblem)
     * }
     */
    public static MemorySegment g_emblem_get_icon(MemorySegment emblem) {
        var mh$ = g_emblem_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblem_get_icon", emblem);
            }
            return (MemorySegment)mh$.invokeExact(emblem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblem_get_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblem_get_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GEmblemOrigin g_emblem_get_origin(GEmblem *emblem)
     * }
     */
    public static FunctionDescriptor g_emblem_get_origin$descriptor() {
        return g_emblem_get_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GEmblemOrigin g_emblem_get_origin(GEmblem *emblem)
     * }
     */
    public static MethodHandle g_emblem_get_origin$handle() {
        return g_emblem_get_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GEmblemOrigin g_emblem_get_origin(GEmblem *emblem)
     * }
     */
    public static int g_emblem_get_origin(MemorySegment emblem) {
        var mh$ = g_emblem_get_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblem_get_origin", emblem);
            }
            return (int)mh$.invokeExact(emblem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblemed_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblemed_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_emblemed_icon_get_type()
     * }
     */
    public static FunctionDescriptor g_emblemed_icon_get_type$descriptor() {
        return g_emblemed_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_emblemed_icon_get_type()
     * }
     */
    public static MethodHandle g_emblemed_icon_get_type$handle() {
        return g_emblemed_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_emblemed_icon_get_type()
     * }
     */
    public static long g_emblemed_icon_get_type() {
        var mh$ = g_emblemed_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblemed_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblemed_icon_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblemed_icon_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_emblemed_icon_new(GIcon *icon, GEmblem *emblem)
     * }
     */
    public static FunctionDescriptor g_emblemed_icon_new$descriptor() {
        return g_emblemed_icon_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_emblemed_icon_new(GIcon *icon, GEmblem *emblem)
     * }
     */
    public static MethodHandle g_emblemed_icon_new$handle() {
        return g_emblemed_icon_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_emblemed_icon_new(GIcon *icon, GEmblem *emblem)
     * }
     */
    public static MemorySegment g_emblemed_icon_new(MemorySegment icon, MemorySegment emblem) {
        var mh$ = g_emblemed_icon_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblemed_icon_new", icon, emblem);
            }
            return (MemorySegment)mh$.invokeExact(icon, emblem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblemed_icon_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblemed_icon_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_emblemed_icon_get_icon(GEmblemedIcon *emblemed)
     * }
     */
    public static FunctionDescriptor g_emblemed_icon_get_icon$descriptor() {
        return g_emblemed_icon_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_emblemed_icon_get_icon(GEmblemedIcon *emblemed)
     * }
     */
    public static MethodHandle g_emblemed_icon_get_icon$handle() {
        return g_emblemed_icon_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_emblemed_icon_get_icon(GEmblemedIcon *emblemed)
     * }
     */
    public static MemorySegment g_emblemed_icon_get_icon(MemorySegment emblemed) {
        var mh$ = g_emblemed_icon_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblemed_icon_get_icon", emblemed);
            }
            return (MemorySegment)mh$.invokeExact(emblemed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblemed_icon_get_emblems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblemed_icon_get_emblems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_emblemed_icon_get_emblems(GEmblemedIcon *emblemed)
     * }
     */
    public static FunctionDescriptor g_emblemed_icon_get_emblems$descriptor() {
        return g_emblemed_icon_get_emblems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_emblemed_icon_get_emblems(GEmblemedIcon *emblemed)
     * }
     */
    public static MethodHandle g_emblemed_icon_get_emblems$handle() {
        return g_emblemed_icon_get_emblems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_emblemed_icon_get_emblems(GEmblemedIcon *emblemed)
     * }
     */
    public static MemorySegment g_emblemed_icon_get_emblems(MemorySegment emblemed) {
        var mh$ = g_emblemed_icon_get_emblems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblemed_icon_get_emblems", emblemed);
            }
            return (MemorySegment)mh$.invokeExact(emblemed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblemed_icon_add_emblem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblemed_icon_add_emblem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_emblemed_icon_add_emblem(GEmblemedIcon *emblemed, GEmblem *emblem)
     * }
     */
    public static FunctionDescriptor g_emblemed_icon_add_emblem$descriptor() {
        return g_emblemed_icon_add_emblem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_emblemed_icon_add_emblem(GEmblemedIcon *emblemed, GEmblem *emblem)
     * }
     */
    public static MethodHandle g_emblemed_icon_add_emblem$handle() {
        return g_emblemed_icon_add_emblem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_emblemed_icon_add_emblem(GEmblemedIcon *emblemed, GEmblem *emblem)
     * }
     */
    public static void g_emblemed_icon_add_emblem(MemorySegment emblemed, MemorySegment emblem) {
        var mh$ = g_emblemed_icon_add_emblem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblemed_icon_add_emblem", emblemed, emblem);
            }
            mh$.invokeExact(emblemed, emblem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblemed_icon_clear_emblems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblemed_icon_clear_emblems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_emblemed_icon_clear_emblems(GEmblemedIcon *emblemed)
     * }
     */
    public static FunctionDescriptor g_emblemed_icon_clear_emblems$descriptor() {
        return g_emblemed_icon_clear_emblems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_emblemed_icon_clear_emblems(GEmblemedIcon *emblemed)
     * }
     */
    public static MethodHandle g_emblemed_icon_clear_emblems$handle() {
        return g_emblemed_icon_clear_emblems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_emblemed_icon_clear_emblems(GEmblemedIcon *emblemed)
     * }
     */
    public static void g_emblemed_icon_clear_emblems(MemorySegment emblemed) {
        var mh$ = g_emblemed_icon_clear_emblems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblemed_icon_clear_emblems", emblemed);
            }
            mh$.invokeExact(emblemed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_get_type()
     * }
     */
    public static FunctionDescriptor g_file_get_type$descriptor() {
        return g_file_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_get_type()
     * }
     */
    public static MethodHandle g_file_get_type$handle() {
        return g_file_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_get_type()
     * }
     */
    public static long g_file_get_type() {
        var mh$ = g_file_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_for_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_for_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_path(const char *path)
     * }
     */
    public static FunctionDescriptor g_file_new_for_path$descriptor() {
        return g_file_new_for_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_path(const char *path)
     * }
     */
    public static MethodHandle g_file_new_for_path$handle() {
        return g_file_new_for_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_path(const char *path)
     * }
     */
    public static MemorySegment g_file_new_for_path(MemorySegment path) {
        var mh$ = g_file_new_for_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_for_path", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_for_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_for_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_uri(const char *uri)
     * }
     */
    public static FunctionDescriptor g_file_new_for_uri$descriptor() {
        return g_file_new_for_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_uri(const char *uri)
     * }
     */
    public static MethodHandle g_file_new_for_uri$handle() {
        return g_file_new_for_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_uri(const char *uri)
     * }
     */
    public static MemorySegment g_file_new_for_uri(MemorySegment uri) {
        var mh$ = g_file_new_for_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_for_uri", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_for_commandline_arg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_for_commandline_arg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_commandline_arg(const char *arg)
     * }
     */
    public static FunctionDescriptor g_file_new_for_commandline_arg$descriptor() {
        return g_file_new_for_commandline_arg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_commandline_arg(const char *arg)
     * }
     */
    public static MethodHandle g_file_new_for_commandline_arg$handle() {
        return g_file_new_for_commandline_arg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_commandline_arg(const char *arg)
     * }
     */
    public static MemorySegment g_file_new_for_commandline_arg(MemorySegment arg) {
        var mh$ = g_file_new_for_commandline_arg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_for_commandline_arg", arg);
            }
            return (MemorySegment)mh$.invokeExact(arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_for_commandline_arg_and_cwd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_for_commandline_arg_and_cwd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_commandline_arg_and_cwd(const gchar *arg, const gchar *cwd)
     * }
     */
    public static FunctionDescriptor g_file_new_for_commandline_arg_and_cwd$descriptor() {
        return g_file_new_for_commandline_arg_and_cwd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_commandline_arg_and_cwd(const gchar *arg, const gchar *cwd)
     * }
     */
    public static MethodHandle g_file_new_for_commandline_arg_and_cwd$handle() {
        return g_file_new_for_commandline_arg_and_cwd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_for_commandline_arg_and_cwd(const gchar *arg, const gchar *cwd)
     * }
     */
    public static MemorySegment g_file_new_for_commandline_arg_and_cwd(MemorySegment arg, MemorySegment cwd) {
        var mh$ = g_file_new_for_commandline_arg_and_cwd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_for_commandline_arg_and_cwd", arg, cwd);
            }
            return (MemorySegment)mh$.invokeExact(arg, cwd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_tmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_tmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp(const char *tmpl, GFileIOStream **iostream, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_new_tmp$descriptor() {
        return g_file_new_tmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp(const char *tmpl, GFileIOStream **iostream, GError **error)
     * }
     */
    public static MethodHandle g_file_new_tmp$handle() {
        return g_file_new_tmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp(const char *tmpl, GFileIOStream **iostream, GError **error)
     * }
     */
    public static MemorySegment g_file_new_tmp(MemorySegment tmpl, MemorySegment iostream, MemorySegment error) {
        var mh$ = g_file_new_tmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_tmp", tmpl, iostream, error);
            }
            return (MemorySegment)mh$.invokeExact(tmpl, iostream, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_tmp_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_tmp_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_new_tmp_async(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_new_tmp_async$descriptor() {
        return g_file_new_tmp_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_new_tmp_async(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_new_tmp_async$handle() {
        return g_file_new_tmp_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_new_tmp_async(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_new_tmp_async(MemorySegment tmpl, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_new_tmp_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_tmp_async", tmpl, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(tmpl, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_tmp_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_tmp_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp_finish(GAsyncResult *result, GFileIOStream **iostream, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_new_tmp_finish$descriptor() {
        return g_file_new_tmp_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp_finish(GAsyncResult *result, GFileIOStream **iostream, GError **error)
     * }
     */
    public static MethodHandle g_file_new_tmp_finish$handle() {
        return g_file_new_tmp_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp_finish(GAsyncResult *result, GFileIOStream **iostream, GError **error)
     * }
     */
    public static MemorySegment g_file_new_tmp_finish(MemorySegment result, MemorySegment iostream, MemorySegment error) {
        var mh$ = g_file_new_tmp_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_tmp_finish", result, iostream, error);
            }
            return (MemorySegment)mh$.invokeExact(result, iostream, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_tmp_dir_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_tmp_dir_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_new_tmp_dir_async(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_new_tmp_dir_async$descriptor() {
        return g_file_new_tmp_dir_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_new_tmp_dir_async(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_new_tmp_dir_async$handle() {
        return g_file_new_tmp_dir_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_new_tmp_dir_async(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_new_tmp_dir_async(MemorySegment tmpl, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_new_tmp_dir_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_tmp_dir_async", tmpl, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(tmpl, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_new_tmp_dir_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_tmp_dir_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp_dir_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_new_tmp_dir_finish$descriptor() {
        return g_file_new_tmp_dir_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp_dir_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_new_tmp_dir_finish$handle() {
        return g_file_new_tmp_dir_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_tmp_dir_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_file_new_tmp_dir_finish(MemorySegment result, MemorySegment error) {
        var mh$ = g_file_new_tmp_dir_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_tmp_dir_finish", result, error);
            }
            return (MemorySegment)mh$.invokeExact(result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_parse_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_parse_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_parse_name(const char *parse_name)
     * }
     */
    public static FunctionDescriptor g_file_parse_name$descriptor() {
        return g_file_parse_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_parse_name(const char *parse_name)
     * }
     */
    public static MethodHandle g_file_parse_name$handle() {
        return g_file_parse_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_parse_name(const char *parse_name)
     * }
     */
    public static MemorySegment g_file_parse_name(MemorySegment parse_name) {
        var mh$ = g_file_parse_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_parse_name", parse_name);
            }
            return (MemorySegment)mh$.invokeExact(parse_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_build_filename(const gchar *first_element, ...)
     * }
     */
    public static class g_file_new_build_filename {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_file_new_build_filename");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_file_new_build_filename(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GFile *g_file_new_build_filename(const gchar *first_element, ...)
         * }
         */
        public static g_file_new_build_filename makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_file_new_build_filename(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment first_element, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_file_new_build_filename", first_element, x1);
                }
                return (MemorySegment)spreader.invokeExact(first_element, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_file_new_build_filenamev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_new_build_filenamev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_build_filenamev(const gchar *const *args)
     * }
     */
    public static FunctionDescriptor g_file_new_build_filenamev$descriptor() {
        return g_file_new_build_filenamev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_new_build_filenamev(const gchar *const *args)
     * }
     */
    public static MethodHandle g_file_new_build_filenamev$handle() {
        return g_file_new_build_filenamev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_new_build_filenamev(const gchar *const *args)
     * }
     */
    public static MemorySegment g_file_new_build_filenamev(MemorySegment args) {
        var mh$ = g_file_new_build_filenamev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_new_build_filenamev", args);
            }
            return (MemorySegment)mh$.invokeExact(args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_dup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_dup(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_dup$descriptor() {
        return g_file_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_dup(GFile *file)
     * }
     */
    public static MethodHandle g_file_dup$handle() {
        return g_file_dup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_dup(GFile *file)
     * }
     */
    public static MemorySegment g_file_dup(MemorySegment file) {
        var mh$ = g_file_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_dup", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_file_hash(gconstpointer file)
     * }
     */
    public static FunctionDescriptor g_file_hash$descriptor() {
        return g_file_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_file_hash(gconstpointer file)
     * }
     */
    public static MethodHandle g_file_hash$handle() {
        return g_file_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_file_hash(gconstpointer file)
     * }
     */
    public static int g_file_hash(MemorySegment file) {
        var mh$ = g_file_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_hash", file);
            }
            return (int)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_equal(GFile *file1, GFile *file2)
     * }
     */
    public static FunctionDescriptor g_file_equal$descriptor() {
        return g_file_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_equal(GFile *file1, GFile *file2)
     * }
     */
    public static MethodHandle g_file_equal$handle() {
        return g_file_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_equal(GFile *file1, GFile *file2)
     * }
     */
    public static int g_file_equal(MemorySegment file1, MemorySegment file2) {
        var mh$ = g_file_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_equal", file1, file2);
            }
            return (int)mh$.invokeExact(file1, file2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_basename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_basename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_get_basename(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_get_basename$descriptor() {
        return g_file_get_basename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_get_basename(GFile *file)
     * }
     */
    public static MethodHandle g_file_get_basename$handle() {
        return g_file_get_basename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_get_basename(GFile *file)
     * }
     */
    public static MemorySegment g_file_get_basename(MemorySegment file) {
        var mh$ = g_file_get_basename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_basename", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_get_path(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_get_path$descriptor() {
        return g_file_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_get_path(GFile *file)
     * }
     */
    public static MethodHandle g_file_get_path$handle() {
        return g_file_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_get_path(GFile *file)
     * }
     */
    public static MemorySegment g_file_get_path(MemorySegment file) {
        var mh$ = g_file_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_path", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_peek_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_peek_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_peek_path(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_peek_path$descriptor() {
        return g_file_peek_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_peek_path(GFile *file)
     * }
     */
    public static MethodHandle g_file_peek_path$handle() {
        return g_file_peek_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_peek_path(GFile *file)
     * }
     */
    public static MemorySegment g_file_peek_path(MemorySegment file) {
        var mh$ = g_file_peek_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_peek_path", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_get_uri(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_get_uri$descriptor() {
        return g_file_get_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_get_uri(GFile *file)
     * }
     */
    public static MethodHandle g_file_get_uri$handle() {
        return g_file_get_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_get_uri(GFile *file)
     * }
     */
    public static MemorySegment g_file_get_uri(MemorySegment file) {
        var mh$ = g_file_get_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_uri", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_parse_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_parse_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_get_parse_name(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_get_parse_name$descriptor() {
        return g_file_get_parse_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_get_parse_name(GFile *file)
     * }
     */
    public static MethodHandle g_file_get_parse_name$handle() {
        return g_file_get_parse_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_get_parse_name(GFile *file)
     * }
     */
    public static MemorySegment g_file_get_parse_name(MemorySegment file) {
        var mh$ = g_file_get_parse_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_parse_name", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_get_parent(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_get_parent$descriptor() {
        return g_file_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_get_parent(GFile *file)
     * }
     */
    public static MethodHandle g_file_get_parent$handle() {
        return g_file_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_get_parent(GFile *file)
     * }
     */
    public static MemorySegment g_file_get_parent(MemorySegment file) {
        var mh$ = g_file_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_parent", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_has_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_has_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_has_parent(GFile *file, GFile *parent)
     * }
     */
    public static FunctionDescriptor g_file_has_parent$descriptor() {
        return g_file_has_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_has_parent(GFile *file, GFile *parent)
     * }
     */
    public static MethodHandle g_file_has_parent$handle() {
        return g_file_has_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_has_parent(GFile *file, GFile *parent)
     * }
     */
    public static int g_file_has_parent(MemorySegment file, MemorySegment parent) {
        var mh$ = g_file_has_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_has_parent", file, parent);
            }
            return (int)mh$.invokeExact(file, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_get_child(GFile *file, const char *name)
     * }
     */
    public static FunctionDescriptor g_file_get_child$descriptor() {
        return g_file_get_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_get_child(GFile *file, const char *name)
     * }
     */
    public static MethodHandle g_file_get_child$handle() {
        return g_file_get_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_get_child(GFile *file, const char *name)
     * }
     */
    public static MemorySegment g_file_get_child(MemorySegment file, MemorySegment name) {
        var mh$ = g_file_get_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_child", file, name);
            }
            return (MemorySegment)mh$.invokeExact(file, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_child_for_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_child_for_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_get_child_for_display_name(GFile *file, const char *display_name, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_get_child_for_display_name$descriptor() {
        return g_file_get_child_for_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_get_child_for_display_name(GFile *file, const char *display_name, GError **error)
     * }
     */
    public static MethodHandle g_file_get_child_for_display_name$handle() {
        return g_file_get_child_for_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_get_child_for_display_name(GFile *file, const char *display_name, GError **error)
     * }
     */
    public static MemorySegment g_file_get_child_for_display_name(MemorySegment file, MemorySegment display_name, MemorySegment error) {
        var mh$ = g_file_get_child_for_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_child_for_display_name", file, display_name, error);
            }
            return (MemorySegment)mh$.invokeExact(file, display_name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_has_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_has_prefix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_has_prefix(GFile *file, GFile *prefix)
     * }
     */
    public static FunctionDescriptor g_file_has_prefix$descriptor() {
        return g_file_has_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_has_prefix(GFile *file, GFile *prefix)
     * }
     */
    public static MethodHandle g_file_has_prefix$handle() {
        return g_file_has_prefix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_has_prefix(GFile *file, GFile *prefix)
     * }
     */
    public static int g_file_has_prefix(MemorySegment file, MemorySegment prefix) {
        var mh$ = g_file_has_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_has_prefix", file, prefix);
            }
            return (int)mh$.invokeExact(file, prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_relative_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_relative_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_get_relative_path(GFile *parent, GFile *descendant)
     * }
     */
    public static FunctionDescriptor g_file_get_relative_path$descriptor() {
        return g_file_get_relative_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_get_relative_path(GFile *parent, GFile *descendant)
     * }
     */
    public static MethodHandle g_file_get_relative_path$handle() {
        return g_file_get_relative_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_get_relative_path(GFile *parent, GFile *descendant)
     * }
     */
    public static MemorySegment g_file_get_relative_path(MemorySegment parent, MemorySegment descendant) {
        var mh$ = g_file_get_relative_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_relative_path", parent, descendant);
            }
            return (MemorySegment)mh$.invokeExact(parent, descendant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_resolve_relative_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_resolve_relative_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_resolve_relative_path(GFile *file, const char *relative_path)
     * }
     */
    public static FunctionDescriptor g_file_resolve_relative_path$descriptor() {
        return g_file_resolve_relative_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_resolve_relative_path(GFile *file, const char *relative_path)
     * }
     */
    public static MethodHandle g_file_resolve_relative_path$handle() {
        return g_file_resolve_relative_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_resolve_relative_path(GFile *file, const char *relative_path)
     * }
     */
    public static MemorySegment g_file_resolve_relative_path(MemorySegment file, MemorySegment relative_path) {
        var mh$ = g_file_resolve_relative_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_resolve_relative_path", file, relative_path);
            }
            return (MemorySegment)mh$.invokeExact(file, relative_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_is_native {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_is_native"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_is_native(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_is_native$descriptor() {
        return g_file_is_native.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_is_native(GFile *file)
     * }
     */
    public static MethodHandle g_file_is_native$handle() {
        return g_file_is_native.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_is_native(GFile *file)
     * }
     */
    public static int g_file_is_native(MemorySegment file) {
        var mh$ = g_file_is_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_is_native", file);
            }
            return (int)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_has_uri_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_has_uri_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_has_uri_scheme(GFile *file, const char *uri_scheme)
     * }
     */
    public static FunctionDescriptor g_file_has_uri_scheme$descriptor() {
        return g_file_has_uri_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_has_uri_scheme(GFile *file, const char *uri_scheme)
     * }
     */
    public static MethodHandle g_file_has_uri_scheme$handle() {
        return g_file_has_uri_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_has_uri_scheme(GFile *file, const char *uri_scheme)
     * }
     */
    public static int g_file_has_uri_scheme(MemorySegment file, MemorySegment uri_scheme) {
        var mh$ = g_file_has_uri_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_has_uri_scheme", file, uri_scheme);
            }
            return (int)mh$.invokeExact(file, uri_scheme);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_uri_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_uri_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_get_uri_scheme(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_get_uri_scheme$descriptor() {
        return g_file_get_uri_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_get_uri_scheme(GFile *file)
     * }
     */
    public static MethodHandle g_file_get_uri_scheme$handle() {
        return g_file_get_uri_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_get_uri_scheme(GFile *file)
     * }
     */
    public static MemorySegment g_file_get_uri_scheme(MemorySegment file) {
        var mh$ = g_file_get_uri_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_uri_scheme", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_read"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInputStream *g_file_read(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_read$descriptor() {
        return g_file_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInputStream *g_file_read(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_read$handle() {
        return g_file_read.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInputStream *g_file_read(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_read(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_read", file, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_read_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_read_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_read_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_read_async$descriptor() {
        return g_file_read_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_read_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_read_async$handle() {
        return g_file_read_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_read_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_read_async(MemorySegment file, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_read_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_read_async", file, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_read_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_read_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInputStream *g_file_read_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_read_finish$descriptor() {
        return g_file_read_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInputStream *g_file_read_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_read_finish$handle() {
        return g_file_read_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInputStream *g_file_read_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_read_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_read_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_read_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_append_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_append_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_append_to(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_append_to$descriptor() {
        return g_file_append_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_append_to(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_append_to$handle() {
        return g_file_append_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_append_to(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_append_to(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_append_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_append_to", file, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_create(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_create$descriptor() {
        return g_file_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_create(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_create$handle() {
        return g_file_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_create(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_create(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_create", file, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_replace(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_replace$descriptor() {
        return g_file_replace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_replace(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_replace$handle() {
        return g_file_replace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_replace(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_replace(MemorySegment file, MemorySegment etag, int make_backup, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_replace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace", file, etag, make_backup, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, etag, make_backup, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_append_to_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_append_to_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_append_to_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_append_to_async$descriptor() {
        return g_file_append_to_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_append_to_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_append_to_async$handle() {
        return g_file_append_to_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_append_to_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_append_to_async(MemorySegment file, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_append_to_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_append_to_async", file, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_append_to_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_append_to_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_append_to_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_append_to_finish$descriptor() {
        return g_file_append_to_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_append_to_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_append_to_finish$handle() {
        return g_file_append_to_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_append_to_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_append_to_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_append_to_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_append_to_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_create_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_create_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_create_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_create_async$descriptor() {
        return g_file_create_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_create_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_create_async$handle() {
        return g_file_create_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_create_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_create_async(MemorySegment file, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_create_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_create_async", file, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_create_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_create_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_create_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_create_finish$descriptor() {
        return g_file_create_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_create_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_create_finish$handle() {
        return g_file_create_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_create_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_create_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_create_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_create_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_replace_async(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_replace_async$descriptor() {
        return g_file_replace_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_replace_async(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_replace_async$handle() {
        return g_file_replace_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_replace_async(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_replace_async(MemorySegment file, MemorySegment etag, int make_backup, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_replace_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_async", file, etag, make_backup, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, etag, make_backup, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_replace_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_replace_finish$descriptor() {
        return g_file_replace_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_replace_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_replace_finish$handle() {
        return g_file_replace_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileOutputStream *g_file_replace_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_replace_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_replace_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_open_readwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_open_readwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_open_readwrite(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_open_readwrite$descriptor() {
        return g_file_open_readwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_open_readwrite(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_open_readwrite$handle() {
        return g_file_open_readwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_open_readwrite(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_open_readwrite(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_open_readwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_open_readwrite", file, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_open_readwrite_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_open_readwrite_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_open_readwrite_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_open_readwrite_async$descriptor() {
        return g_file_open_readwrite_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_open_readwrite_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_open_readwrite_async$handle() {
        return g_file_open_readwrite_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_open_readwrite_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_open_readwrite_async(MemorySegment file, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_open_readwrite_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_open_readwrite_async", file, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_open_readwrite_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_open_readwrite_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_open_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_open_readwrite_finish$descriptor() {
        return g_file_open_readwrite_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_open_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_open_readwrite_finish$handle() {
        return g_file_open_readwrite_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_open_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_open_readwrite_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_open_readwrite_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_open_readwrite_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_create_readwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_create_readwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_create_readwrite(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_create_readwrite$descriptor() {
        return g_file_create_readwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_create_readwrite(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_create_readwrite$handle() {
        return g_file_create_readwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_create_readwrite(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_create_readwrite(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_create_readwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_create_readwrite", file, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_create_readwrite_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_create_readwrite_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_create_readwrite_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_create_readwrite_async$descriptor() {
        return g_file_create_readwrite_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_create_readwrite_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_create_readwrite_async$handle() {
        return g_file_create_readwrite_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_create_readwrite_async(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_create_readwrite_async(MemorySegment file, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_create_readwrite_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_create_readwrite_async", file, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_create_readwrite_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_create_readwrite_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_create_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_create_readwrite_finish$descriptor() {
        return g_file_create_readwrite_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_create_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_create_readwrite_finish$handle() {
        return g_file_create_readwrite_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_create_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_create_readwrite_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_create_readwrite_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_create_readwrite_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_readwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_readwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_replace_readwrite(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_replace_readwrite$descriptor() {
        return g_file_replace_readwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_replace_readwrite(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_replace_readwrite$handle() {
        return g_file_replace_readwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_replace_readwrite(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_replace_readwrite(MemorySegment file, MemorySegment etag, int make_backup, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_replace_readwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_readwrite", file, etag, make_backup, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, etag, make_backup, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_readwrite_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_readwrite_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_replace_readwrite_async(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_replace_readwrite_async$descriptor() {
        return g_file_replace_readwrite_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_replace_readwrite_async(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_replace_readwrite_async$handle() {
        return g_file_replace_readwrite_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_replace_readwrite_async(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_replace_readwrite_async(MemorySegment file, MemorySegment etag, int make_backup, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_replace_readwrite_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_readwrite_async", file, etag, make_backup, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, etag, make_backup, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_readwrite_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_readwrite_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_replace_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_replace_readwrite_finish$descriptor() {
        return g_file_replace_readwrite_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_replace_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_replace_readwrite_finish$handle() {
        return g_file_replace_readwrite_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileIOStream *g_file_replace_readwrite_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_replace_readwrite_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_replace_readwrite_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_readwrite_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_exists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_exists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_query_exists(GFile *file, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_file_query_exists$descriptor() {
        return g_file_query_exists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_query_exists(GFile *file, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_file_query_exists$handle() {
        return g_file_query_exists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_query_exists(GFile *file, GCancellable *cancellable)
     * }
     */
    public static int g_file_query_exists(MemorySegment file, MemorySegment cancellable) {
        var mh$ = g_file_query_exists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_exists", file, cancellable);
            }
            return (int)mh$.invokeExact(file, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_file_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_file_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileType g_file_query_file_type(GFile *file, GFileQueryInfoFlags flags, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_file_query_file_type$descriptor() {
        return g_file_query_file_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileType g_file_query_file_type(GFile *file, GFileQueryInfoFlags flags, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_file_query_file_type$handle() {
        return g_file_query_file_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileType g_file_query_file_type(GFile *file, GFileQueryInfoFlags flags, GCancellable *cancellable)
     * }
     */
    public static int g_file_query_file_type(MemorySegment file, int flags, MemorySegment cancellable) {
        var mh$ = g_file_query_file_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_file_type", file, flags, cancellable);
            }
            return (int)mh$.invokeExact(file, flags, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_info(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_info$descriptor() {
        return g_file_query_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_info(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_query_info$handle() {
        return g_file_query_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_info(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_query_info(MemorySegment file, MemorySegment attributes, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_query_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_info", file, attributes, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, attributes, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_info_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_info_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_query_info_async(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_query_info_async$descriptor() {
        return g_file_query_info_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_query_info_async(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_query_info_async$handle() {
        return g_file_query_info_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_query_info_async(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_query_info_async(MemorySegment file, MemorySegment attributes, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_query_info_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_info_async", file, attributes, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, attributes, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_info_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_info_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_info_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_info_finish$descriptor() {
        return g_file_query_info_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_info_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_query_info_finish$handle() {
        return g_file_query_info_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_info_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_query_info_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_query_info_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_info_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_filesystem_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_filesystem_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_filesystem_info(GFile *file, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_filesystem_info$descriptor() {
        return g_file_query_filesystem_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_filesystem_info(GFile *file, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_query_filesystem_info$handle() {
        return g_file_query_filesystem_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_filesystem_info(GFile *file, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_query_filesystem_info(MemorySegment file, MemorySegment attributes, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_query_filesystem_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_filesystem_info", file, attributes, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, attributes, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_filesystem_info_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_filesystem_info_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_query_filesystem_info_async(GFile *file, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_query_filesystem_info_async$descriptor() {
        return g_file_query_filesystem_info_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_query_filesystem_info_async(GFile *file, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_query_filesystem_info_async$handle() {
        return g_file_query_filesystem_info_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_query_filesystem_info_async(GFile *file, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_query_filesystem_info_async(MemorySegment file, MemorySegment attributes, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_query_filesystem_info_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_filesystem_info_async", file, attributes, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, attributes, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_filesystem_info_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_filesystem_info_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_filesystem_info_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_filesystem_info_finish$descriptor() {
        return g_file_query_filesystem_info_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_filesystem_info_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_query_filesystem_info_finish$handle() {
        return g_file_query_filesystem_info_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_query_filesystem_info_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_query_filesystem_info_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_query_filesystem_info_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_filesystem_info_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_find_enclosing_mount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_find_enclosing_mount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMount *g_file_find_enclosing_mount(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_find_enclosing_mount$descriptor() {
        return g_file_find_enclosing_mount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMount *g_file_find_enclosing_mount(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_find_enclosing_mount$handle() {
        return g_file_find_enclosing_mount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMount *g_file_find_enclosing_mount(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_find_enclosing_mount(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_find_enclosing_mount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_find_enclosing_mount", file, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_find_enclosing_mount_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_find_enclosing_mount_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_find_enclosing_mount_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_find_enclosing_mount_async$descriptor() {
        return g_file_find_enclosing_mount_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_find_enclosing_mount_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_find_enclosing_mount_async$handle() {
        return g_file_find_enclosing_mount_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_find_enclosing_mount_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_find_enclosing_mount_async(MemorySegment file, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_find_enclosing_mount_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_find_enclosing_mount_async", file, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_find_enclosing_mount_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_find_enclosing_mount_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMount *g_file_find_enclosing_mount_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_find_enclosing_mount_finish$descriptor() {
        return g_file_find_enclosing_mount_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMount *g_file_find_enclosing_mount_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_find_enclosing_mount_finish$handle() {
        return g_file_find_enclosing_mount_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMount *g_file_find_enclosing_mount_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_find_enclosing_mount_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_find_enclosing_mount_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_find_enclosing_mount_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerate_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerate_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileEnumerator *g_file_enumerate_children(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_enumerate_children$descriptor() {
        return g_file_enumerate_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileEnumerator *g_file_enumerate_children(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_enumerate_children$handle() {
        return g_file_enumerate_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileEnumerator *g_file_enumerate_children(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_enumerate_children(MemorySegment file, MemorySegment attributes, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_enumerate_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerate_children", file, attributes, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, attributes, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerate_children_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerate_children_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_enumerate_children_async(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_enumerate_children_async$descriptor() {
        return g_file_enumerate_children_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_enumerate_children_async(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_enumerate_children_async$handle() {
        return g_file_enumerate_children_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_enumerate_children_async(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_enumerate_children_async(MemorySegment file, MemorySegment attributes, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_enumerate_children_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerate_children_async", file, attributes, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, attributes, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerate_children_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerate_children_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileEnumerator *g_file_enumerate_children_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_enumerate_children_finish$descriptor() {
        return g_file_enumerate_children_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileEnumerator *g_file_enumerate_children_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_enumerate_children_finish$handle() {
        return g_file_enumerate_children_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileEnumerator *g_file_enumerate_children_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_enumerate_children_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_enumerate_children_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerate_children_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_set_display_name(GFile *file, const char *display_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_display_name$descriptor() {
        return g_file_set_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_set_display_name(GFile *file, const char *display_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_display_name$handle() {
        return g_file_set_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_set_display_name(GFile *file, const char *display_name, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_set_display_name(MemorySegment file, MemorySegment display_name, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_display_name", file, display_name, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, display_name, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_display_name_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_display_name_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_set_display_name_async(GFile *file, const char *display_name, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_set_display_name_async$descriptor() {
        return g_file_set_display_name_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_set_display_name_async(GFile *file, const char *display_name, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_set_display_name_async$handle() {
        return g_file_set_display_name_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_set_display_name_async(GFile *file, const char *display_name, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_set_display_name_async(MemorySegment file, MemorySegment display_name, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_set_display_name_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_display_name_async", file, display_name, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, display_name, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_display_name_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_display_name_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_set_display_name_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_display_name_finish$descriptor() {
        return g_file_set_display_name_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_set_display_name_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_set_display_name_finish$handle() {
        return g_file_set_display_name_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_set_display_name_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_file_set_display_name_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_set_display_name_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_display_name_finish", file, res, error);
            }
            return (MemorySegment)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_delete(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_delete$descriptor() {
        return g_file_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_delete(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_delete$handle() {
        return g_file_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_delete(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_delete(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_delete", file, cancellable, error);
            }
            return (int)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_delete_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_delete_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_delete_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_delete_async$descriptor() {
        return g_file_delete_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_delete_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_delete_async$handle() {
        return g_file_delete_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_delete_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_delete_async(MemorySegment file, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_delete_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_delete_async", file, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_delete_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_delete_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_delete_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_delete_finish$descriptor() {
        return g_file_delete_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_delete_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_delete_finish$handle() {
        return g_file_delete_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_delete_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_delete_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_delete_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_delete_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_trash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_trash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_trash(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_trash$descriptor() {
        return g_file_trash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_trash(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_trash$handle() {
        return g_file_trash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_trash(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_trash(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_trash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_trash", file, cancellable, error);
            }
            return (int)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_trash_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_trash_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_trash_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_trash_async$descriptor() {
        return g_file_trash_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_trash_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_trash_async$handle() {
        return g_file_trash_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_trash_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_trash_async(MemorySegment file, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_trash_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_trash_async", file, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_trash_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_trash_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_trash_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_trash_finish$descriptor() {
        return g_file_trash_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_trash_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_trash_finish$handle() {
        return g_file_trash_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_trash_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_trash_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_trash_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_trash_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_copy(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_copy$descriptor() {
        return g_file_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_copy(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error)
     * }
     */
    public static MethodHandle g_file_copy$handle() {
        return g_file_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_copy(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error)
     * }
     */
    public static int g_file_copy(MemorySegment source, MemorySegment destination, int flags, MemorySegment cancellable, MemorySegment progress_callback, MemorySegment progress_callback_data, MemorySegment error) {
        var mh$ = g_file_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_copy", source, destination, flags, cancellable, progress_callback, progress_callback_data, error);
            }
            return (int)mh$.invokeExact(source, destination, flags, cancellable, progress_callback, progress_callback_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_copy_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_copy_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_copy_async(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_copy_async$descriptor() {
        return g_file_copy_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_copy_async(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_copy_async$handle() {
        return g_file_copy_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_copy_async(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_copy_async(MemorySegment source, MemorySegment destination, int flags, int io_priority, MemorySegment cancellable, MemorySegment progress_callback, MemorySegment progress_callback_data, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_copy_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_copy_async", source, destination, flags, io_priority, cancellable, progress_callback, progress_callback_data, callback, user_data);
            }
            mh$.invokeExact(source, destination, flags, io_priority, cancellable, progress_callback, progress_callback_data, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_copy_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_copy_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_copy_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_copy_finish$descriptor() {
        return g_file_copy_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_copy_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_file_copy_finish$handle() {
        return g_file_copy_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_copy_finish(GFile *file, GAsyncResult *res, GError **error)
     * }
     */
    public static int g_file_copy_finish(MemorySegment file, MemorySegment res, MemorySegment error) {
        var mh$ = g_file_copy_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_copy_finish", file, res, error);
            }
            return (int)mh$.invokeExact(file, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_move"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_move(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_move$descriptor() {
        return g_file_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_move(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error)
     * }
     */
    public static MethodHandle g_file_move$handle() {
        return g_file_move.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_move(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error)
     * }
     */
    public static int g_file_move(MemorySegment source, MemorySegment destination, int flags, MemorySegment cancellable, MemorySegment progress_callback, MemorySegment progress_callback_data, MemorySegment error) {
        var mh$ = g_file_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_move", source, destination, flags, cancellable, progress_callback, progress_callback_data, error);
            }
            return (int)mh$.invokeExact(source, destination, flags, cancellable, progress_callback, progress_callback_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_move_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_move_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_move_async(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_move_async$descriptor() {
        return g_file_move_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_move_async(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_move_async$handle() {
        return g_file_move_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_move_async(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_move_async(MemorySegment source, MemorySegment destination, int flags, int io_priority, MemorySegment cancellable, MemorySegment progress_callback, MemorySegment progress_callback_data, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_move_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_move_async", source, destination, flags, io_priority, cancellable, progress_callback, progress_callback_data, callback, user_data);
            }
            mh$.invokeExact(source, destination, flags, io_priority, cancellable, progress_callback, progress_callback_data, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_move_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_move_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_move_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_move_finish$descriptor() {
        return g_file_move_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_move_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_move_finish$handle() {
        return g_file_move_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_move_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_move_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_move_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_move_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_make_directory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_make_directory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_make_directory$descriptor() {
        return g_file_make_directory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_make_directory$handle() {
        return g_file_make_directory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_make_directory(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_make_directory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_make_directory", file, cancellable, error);
            }
            return (int)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_make_directory_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_make_directory_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_make_directory_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_make_directory_async$descriptor() {
        return g_file_make_directory_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_make_directory_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_make_directory_async$handle() {
        return g_file_make_directory_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_make_directory_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_make_directory_async(MemorySegment file, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_make_directory_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_make_directory_async", file, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_make_directory_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_make_directory_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_make_directory_finish$descriptor() {
        return g_file_make_directory_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_make_directory_finish$handle() {
        return g_file_make_directory_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_make_directory_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_make_directory_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_make_directory_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_make_directory_with_parents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_make_directory_with_parents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory_with_parents(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_make_directory_with_parents$descriptor() {
        return g_file_make_directory_with_parents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory_with_parents(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_make_directory_with_parents$handle() {
        return g_file_make_directory_with_parents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_make_directory_with_parents(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_make_directory_with_parents(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_make_directory_with_parents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_make_directory_with_parents", file, cancellable, error);
            }
            return (int)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_make_symbolic_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_make_symbolic_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_symbolic_link(GFile *file, const char *symlink_value, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_make_symbolic_link$descriptor() {
        return g_file_make_symbolic_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_symbolic_link(GFile *file, const char *symlink_value, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_make_symbolic_link$handle() {
        return g_file_make_symbolic_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_make_symbolic_link(GFile *file, const char *symlink_value, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_make_symbolic_link(MemorySegment file, MemorySegment symlink_value, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_make_symbolic_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_make_symbolic_link", file, symlink_value, cancellable, error);
            }
            return (int)mh$.invokeExact(file, symlink_value, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_make_symbolic_link_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_make_symbolic_link_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_make_symbolic_link_async(GFile *file, const char *symlink_value, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_make_symbolic_link_async$descriptor() {
        return g_file_make_symbolic_link_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_make_symbolic_link_async(GFile *file, const char *symlink_value, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_make_symbolic_link_async$handle() {
        return g_file_make_symbolic_link_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_make_symbolic_link_async(GFile *file, const char *symlink_value, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_make_symbolic_link_async(MemorySegment file, MemorySegment symlink_value, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_make_symbolic_link_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_make_symbolic_link_async", file, symlink_value, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, symlink_value, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_make_symbolic_link_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_make_symbolic_link_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_symbolic_link_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_make_symbolic_link_finish$descriptor() {
        return g_file_make_symbolic_link_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_make_symbolic_link_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_make_symbolic_link_finish$handle() {
        return g_file_make_symbolic_link_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_make_symbolic_link_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_make_symbolic_link_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_make_symbolic_link_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_make_symbolic_link_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_settable_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_settable_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_query_settable_attributes(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_settable_attributes$descriptor() {
        return g_file_query_settable_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_query_settable_attributes(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_query_settable_attributes$handle() {
        return g_file_query_settable_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_query_settable_attributes(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_query_settable_attributes(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_query_settable_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_settable_attributes", file, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_writable_namespaces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_writable_namespaces"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_query_writable_namespaces(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_writable_namespaces$descriptor() {
        return g_file_query_writable_namespaces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_query_writable_namespaces(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_query_writable_namespaces$handle() {
        return g_file_query_writable_namespaces.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_query_writable_namespaces(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_query_writable_namespaces(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_query_writable_namespaces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_writable_namespaces", file, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute(GFile *file, const char *attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attribute$descriptor() {
        return g_file_set_attribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute(GFile *file, const char *attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attribute$handle() {
        return g_file_set_attribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute(GFile *file, const char *attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attribute(MemorySegment file, MemorySegment attribute, int type, MemorySegment value_p, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attribute", file, attribute, type, value_p, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, attribute, type, value_p, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attributes_from_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attributes_from_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attributes_from_info(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attributes_from_info$descriptor() {
        return g_file_set_attributes_from_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attributes_from_info(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attributes_from_info$handle() {
        return g_file_set_attributes_from_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attributes_from_info(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attributes_from_info(MemorySegment file, MemorySegment info, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attributes_from_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attributes_from_info", file, info, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, info, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attributes_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attributes_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_set_attributes_async(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_set_attributes_async$descriptor() {
        return g_file_set_attributes_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_set_attributes_async(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_set_attributes_async$handle() {
        return g_file_set_attributes_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_set_attributes_async(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_set_attributes_async(MemorySegment file, MemorySegment info, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_set_attributes_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attributes_async", file, info, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, info, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attributes_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attributes_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attributes_finish(GFile *file, GAsyncResult *result, GFileInfo **info, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attributes_finish$descriptor() {
        return g_file_set_attributes_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attributes_finish(GFile *file, GAsyncResult *result, GFileInfo **info, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attributes_finish$handle() {
        return g_file_set_attributes_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attributes_finish(GFile *file, GAsyncResult *result, GFileInfo **info, GError **error)
     * }
     */
    public static int g_file_set_attributes_finish(MemorySegment file, MemorySegment result, MemorySegment info, MemorySegment error) {
        var mh$ = g_file_set_attributes_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attributes_finish", file, result, info, error);
            }
            return (int)mh$.invokeExact(file, result, info, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attribute_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attribute_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_string(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attribute_string$descriptor() {
        return g_file_set_attribute_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_string(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attribute_string$handle() {
        return g_file_set_attribute_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_string(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attribute_string(MemorySegment file, MemorySegment attribute, MemorySegment value, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attribute_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attribute_string", file, attribute, value, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, attribute, value, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attribute_byte_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attribute_byte_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_byte_string(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attribute_byte_string$descriptor() {
        return g_file_set_attribute_byte_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_byte_string(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attribute_byte_string$handle() {
        return g_file_set_attribute_byte_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_byte_string(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attribute_byte_string(MemorySegment file, MemorySegment attribute, MemorySegment value, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attribute_byte_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attribute_byte_string", file, attribute, value, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, attribute, value, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attribute_uint32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attribute_uint32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_uint32(GFile *file, const char *attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attribute_uint32$descriptor() {
        return g_file_set_attribute_uint32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_uint32(GFile *file, const char *attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attribute_uint32$handle() {
        return g_file_set_attribute_uint32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_uint32(GFile *file, const char *attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attribute_uint32(MemorySegment file, MemorySegment attribute, int value, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attribute_uint32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attribute_uint32", file, attribute, value, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, attribute, value, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attribute_int32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attribute_int32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_int32(GFile *file, const char *attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attribute_int32$descriptor() {
        return g_file_set_attribute_int32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_int32(GFile *file, const char *attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attribute_int32$handle() {
        return g_file_set_attribute_int32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_int32(GFile *file, const char *attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attribute_int32(MemorySegment file, MemorySegment attribute, int value, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attribute_int32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attribute_int32", file, attribute, value, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, attribute, value, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attribute_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attribute_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_uint64(GFile *file, const char *attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attribute_uint64$descriptor() {
        return g_file_set_attribute_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_uint64(GFile *file, const char *attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attribute_uint64$handle() {
        return g_file_set_attribute_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_uint64(GFile *file, const char *attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attribute_uint64(MemorySegment file, MemorySegment attribute, long value, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attribute_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attribute_uint64", file, attribute, value, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, attribute, value, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_attribute_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_attribute_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_int64(GFile *file, const char *attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_attribute_int64$descriptor() {
        return g_file_set_attribute_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_int64(GFile *file, const char *attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_set_attribute_int64$handle() {
        return g_file_set_attribute_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_attribute_int64(GFile *file, const char *attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_set_attribute_int64(MemorySegment file, MemorySegment attribute, long value, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_set_attribute_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_attribute_int64", file, attribute, value, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(file, attribute, value, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_mount_enclosing_volume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_mount_enclosing_volume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_mount_enclosing_volume(GFile *location, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_mount_enclosing_volume$descriptor() {
        return g_file_mount_enclosing_volume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_mount_enclosing_volume(GFile *location, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_mount_enclosing_volume$handle() {
        return g_file_mount_enclosing_volume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_mount_enclosing_volume(GFile *location, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_mount_enclosing_volume(MemorySegment location, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_mount_enclosing_volume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_mount_enclosing_volume", location, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(location, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_mount_enclosing_volume_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_mount_enclosing_volume_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_mount_enclosing_volume_finish(GFile *location, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_mount_enclosing_volume_finish$descriptor() {
        return g_file_mount_enclosing_volume_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_mount_enclosing_volume_finish(GFile *location, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_mount_enclosing_volume_finish$handle() {
        return g_file_mount_enclosing_volume_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_mount_enclosing_volume_finish(GFile *location, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_mount_enclosing_volume_finish(MemorySegment location, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_mount_enclosing_volume_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_mount_enclosing_volume_finish", location, result, error);
            }
            return (int)mh$.invokeExact(location, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_mount_mountable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_mount_mountable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_mount_mountable(GFile *file, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_mount_mountable$descriptor() {
        return g_file_mount_mountable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_mount_mountable(GFile *file, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_mount_mountable$handle() {
        return g_file_mount_mountable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_mount_mountable(GFile *file, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_mount_mountable(MemorySegment file, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_mount_mountable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_mount_mountable", file, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_mount_mountable_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_mount_mountable_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_mount_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_mount_mountable_finish$descriptor() {
        return g_file_mount_mountable_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_mount_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_mount_mountable_finish$handle() {
        return g_file_mount_mountable_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_mount_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_file_mount_mountable_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_mount_mountable_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_mount_mountable_finish", file, result, error);
            }
            return (MemorySegment)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_unmount_mountable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_unmount_mountable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_unmount_mountable(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_unmount_mountable$descriptor() {
        return g_file_unmount_mountable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_unmount_mountable(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_unmount_mountable$handle() {
        return g_file_unmount_mountable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_unmount_mountable(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_unmount_mountable(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_unmount_mountable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_unmount_mountable", file, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_unmount_mountable_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_unmount_mountable_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_unmount_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_unmount_mountable_finish$descriptor() {
        return g_file_unmount_mountable_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_unmount_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_unmount_mountable_finish$handle() {
        return g_file_unmount_mountable_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_unmount_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_unmount_mountable_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_unmount_mountable_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_unmount_mountable_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_unmount_mountable_with_operation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_unmount_mountable_with_operation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_unmount_mountable_with_operation(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_unmount_mountable_with_operation$descriptor() {
        return g_file_unmount_mountable_with_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_unmount_mountable_with_operation(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_unmount_mountable_with_operation$handle() {
        return g_file_unmount_mountable_with_operation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_unmount_mountable_with_operation(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_unmount_mountable_with_operation(MemorySegment file, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_unmount_mountable_with_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_unmount_mountable_with_operation", file, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_unmount_mountable_with_operation_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_unmount_mountable_with_operation_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_unmount_mountable_with_operation_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_unmount_mountable_with_operation_finish$descriptor() {
        return g_file_unmount_mountable_with_operation_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_unmount_mountable_with_operation_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_unmount_mountable_with_operation_finish$handle() {
        return g_file_unmount_mountable_with_operation_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_unmount_mountable_with_operation_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_unmount_mountable_with_operation_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_unmount_mountable_with_operation_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_unmount_mountable_with_operation_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_eject_mountable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_eject_mountable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_eject_mountable(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_eject_mountable$descriptor() {
        return g_file_eject_mountable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_eject_mountable(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_eject_mountable$handle() {
        return g_file_eject_mountable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_eject_mountable(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_eject_mountable(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_eject_mountable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_eject_mountable", file, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_eject_mountable_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_eject_mountable_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_eject_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_eject_mountable_finish$descriptor() {
        return g_file_eject_mountable_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_eject_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_eject_mountable_finish$handle() {
        return g_file_eject_mountable_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_eject_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_eject_mountable_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_eject_mountable_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_eject_mountable_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_eject_mountable_with_operation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_eject_mountable_with_operation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_eject_mountable_with_operation(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_eject_mountable_with_operation$descriptor() {
        return g_file_eject_mountable_with_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_eject_mountable_with_operation(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_eject_mountable_with_operation$handle() {
        return g_file_eject_mountable_with_operation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_eject_mountable_with_operation(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_eject_mountable_with_operation(MemorySegment file, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_eject_mountable_with_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_eject_mountable_with_operation", file, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_eject_mountable_with_operation_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_eject_mountable_with_operation_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_eject_mountable_with_operation_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_eject_mountable_with_operation_finish$descriptor() {
        return g_file_eject_mountable_with_operation_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_eject_mountable_with_operation_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_eject_mountable_with_operation_finish$handle() {
        return g_file_eject_mountable_with_operation_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_eject_mountable_with_operation_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_eject_mountable_with_operation_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_eject_mountable_with_operation_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_eject_mountable_with_operation_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_build_attribute_list_for_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_build_attribute_list_for_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_build_attribute_list_for_copy(GFile *file, GFileCopyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_build_attribute_list_for_copy$descriptor() {
        return g_file_build_attribute_list_for_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_build_attribute_list_for_copy(GFile *file, GFileCopyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_build_attribute_list_for_copy$handle() {
        return g_file_build_attribute_list_for_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_build_attribute_list_for_copy(GFile *file, GFileCopyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_build_attribute_list_for_copy(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_build_attribute_list_for_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_build_attribute_list_for_copy", file, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_copy_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_copy_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_copy_attributes(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_copy_attributes$descriptor() {
        return g_file_copy_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_copy_attributes(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_copy_attributes$handle() {
        return g_file_copy_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_copy_attributes(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_copy_attributes(MemorySegment source, MemorySegment destination, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_copy_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_copy_attributes", source, destination, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(source, destination, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_directory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_directory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor_directory(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_monitor_directory$descriptor() {
        return g_file_monitor_directory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor_directory(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_monitor_directory$handle() {
        return g_file_monitor_directory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor_directory(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_monitor_directory(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_monitor_directory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_directory", file, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor_file(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_monitor_file$descriptor() {
        return g_file_monitor_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor_file(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_monitor_file$handle() {
        return g_file_monitor_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor_file(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_monitor_file(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_monitor_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_file", file, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_monitor$descriptor() {
        return g_file_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_monitor$handle() {
        return g_file_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileMonitor *g_file_monitor(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_monitor(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor", file, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_measure_disk_usage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_measure_disk_usage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_measure_disk_usage(GFile *file, GFileMeasureFlags flags, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_measure_disk_usage$descriptor() {
        return g_file_measure_disk_usage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_measure_disk_usage(GFile *file, GFileMeasureFlags flags, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error)
     * }
     */
    public static MethodHandle g_file_measure_disk_usage$handle() {
        return g_file_measure_disk_usage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_measure_disk_usage(GFile *file, GFileMeasureFlags flags, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error)
     * }
     */
    public static int g_file_measure_disk_usage(MemorySegment file, int flags, MemorySegment cancellable, MemorySegment progress_callback, MemorySegment progress_data, MemorySegment disk_usage, MemorySegment num_dirs, MemorySegment num_files, MemorySegment error) {
        var mh$ = g_file_measure_disk_usage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_measure_disk_usage", file, flags, cancellable, progress_callback, progress_data, disk_usage, num_dirs, num_files, error);
            }
            return (int)mh$.invokeExact(file, flags, cancellable, progress_callback, progress_data, disk_usage, num_dirs, num_files, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_measure_disk_usage_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_measure_disk_usage_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_measure_disk_usage_async(GFile *file, GFileMeasureFlags flags, gint io_priority, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_measure_disk_usage_async$descriptor() {
        return g_file_measure_disk_usage_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_measure_disk_usage_async(GFile *file, GFileMeasureFlags flags, gint io_priority, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_measure_disk_usage_async$handle() {
        return g_file_measure_disk_usage_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_measure_disk_usage_async(GFile *file, GFileMeasureFlags flags, gint io_priority, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_measure_disk_usage_async(MemorySegment file, int flags, int io_priority, MemorySegment cancellable, MemorySegment progress_callback, MemorySegment progress_data, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_measure_disk_usage_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_measure_disk_usage_async", file, flags, io_priority, cancellable, progress_callback, progress_data, callback, user_data);
            }
            mh$.invokeExact(file, flags, io_priority, cancellable, progress_callback, progress_data, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_measure_disk_usage_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_measure_disk_usage_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_measure_disk_usage_finish(GFile *file, GAsyncResult *result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_measure_disk_usage_finish$descriptor() {
        return g_file_measure_disk_usage_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_measure_disk_usage_finish(GFile *file, GAsyncResult *result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error)
     * }
     */
    public static MethodHandle g_file_measure_disk_usage_finish$handle() {
        return g_file_measure_disk_usage_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_measure_disk_usage_finish(GFile *file, GAsyncResult *result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error)
     * }
     */
    public static int g_file_measure_disk_usage_finish(MemorySegment file, MemorySegment result, MemorySegment disk_usage, MemorySegment num_dirs, MemorySegment num_files, MemorySegment error) {
        var mh$ = g_file_measure_disk_usage_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_measure_disk_usage_finish", file, result, disk_usage, num_dirs, num_files, error);
            }
            return (int)mh$.invokeExact(file, result, disk_usage, num_dirs, num_files, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_start_mountable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_start_mountable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_start_mountable(GFile *file, GDriveStartFlags flags, GMountOperation *start_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_start_mountable$descriptor() {
        return g_file_start_mountable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_start_mountable(GFile *file, GDriveStartFlags flags, GMountOperation *start_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_start_mountable$handle() {
        return g_file_start_mountable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_start_mountable(GFile *file, GDriveStartFlags flags, GMountOperation *start_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_start_mountable(MemorySegment file, int flags, MemorySegment start_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_start_mountable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_start_mountable", file, flags, start_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, start_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_start_mountable_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_start_mountable_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_start_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_start_mountable_finish$descriptor() {
        return g_file_start_mountable_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_start_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_start_mountable_finish$handle() {
        return g_file_start_mountable_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_start_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_start_mountable_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_start_mountable_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_start_mountable_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_stop_mountable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_stop_mountable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_stop_mountable(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_stop_mountable$descriptor() {
        return g_file_stop_mountable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_stop_mountable(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_stop_mountable$handle() {
        return g_file_stop_mountable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_stop_mountable(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_stop_mountable(MemorySegment file, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_stop_mountable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_stop_mountable", file, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_stop_mountable_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_stop_mountable_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_stop_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_stop_mountable_finish$descriptor() {
        return g_file_stop_mountable_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_stop_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_stop_mountable_finish$handle() {
        return g_file_stop_mountable_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_stop_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_stop_mountable_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_stop_mountable_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_stop_mountable_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_poll_mountable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_poll_mountable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_poll_mountable(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_poll_mountable$descriptor() {
        return g_file_poll_mountable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_poll_mountable(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_poll_mountable$handle() {
        return g_file_poll_mountable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_poll_mountable(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_poll_mountable(MemorySegment file, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_poll_mountable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_poll_mountable", file, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_poll_mountable_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_poll_mountable_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_poll_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_poll_mountable_finish$descriptor() {
        return g_file_poll_mountable_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_poll_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_poll_mountable_finish$handle() {
        return g_file_poll_mountable_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_poll_mountable_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_poll_mountable_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_poll_mountable_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_poll_mountable_finish", file, result, error);
            }
            return (int)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_default_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_default_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_file_query_default_handler(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_default_handler$descriptor() {
        return g_file_query_default_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_file_query_default_handler(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_query_default_handler$handle() {
        return g_file_query_default_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_file_query_default_handler(GFile *file, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_query_default_handler(MemorySegment file, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_query_default_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_default_handler", file, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(file, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_default_handler_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_default_handler_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_query_default_handler_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_query_default_handler_async$descriptor() {
        return g_file_query_default_handler_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_query_default_handler_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_query_default_handler_async$handle() {
        return g_file_query_default_handler_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_query_default_handler_async(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_query_default_handler_async(MemorySegment file, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_query_default_handler_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_default_handler_async", file, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_default_handler_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_default_handler_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_file_query_default_handler_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_query_default_handler_finish$descriptor() {
        return g_file_query_default_handler_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_file_query_default_handler_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_query_default_handler_finish$handle() {
        return g_file_query_default_handler_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_file_query_default_handler_finish(GFile *file, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_file_query_default_handler_finish(MemorySegment file, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_query_default_handler_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_default_handler_finish", file, result, error);
            }
            return (MemorySegment)mh$.invokeExact(file, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_load_contents(GFile *file, GCancellable *cancellable, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_load_contents$descriptor() {
        return g_file_load_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_load_contents(GFile *file, GCancellable *cancellable, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static MethodHandle g_file_load_contents$handle() {
        return g_file_load_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_load_contents(GFile *file, GCancellable *cancellable, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static int g_file_load_contents(MemorySegment file, MemorySegment cancellable, MemorySegment contents, MemorySegment length, MemorySegment etag_out, MemorySegment error) {
        var mh$ = g_file_load_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_contents", file, cancellable, contents, length, etag_out, error);
            }
            return (int)mh$.invokeExact(file, cancellable, contents, length, etag_out, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_contents_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_contents_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_load_contents_async(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_load_contents_async$descriptor() {
        return g_file_load_contents_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_load_contents_async(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_load_contents_async$handle() {
        return g_file_load_contents_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_load_contents_async(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_load_contents_async(MemorySegment file, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_load_contents_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_contents_async", file, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_contents_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_contents_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_load_contents_finish(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_load_contents_finish$descriptor() {
        return g_file_load_contents_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_load_contents_finish(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static MethodHandle g_file_load_contents_finish$handle() {
        return g_file_load_contents_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_load_contents_finish(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static int g_file_load_contents_finish(MemorySegment file, MemorySegment res, MemorySegment contents, MemorySegment length, MemorySegment etag_out, MemorySegment error) {
        var mh$ = g_file_load_contents_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_contents_finish", file, res, contents, length, etag_out, error);
            }
            return (int)mh$.invokeExact(file, res, contents, length, etag_out, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_partial_contents_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_partial_contents_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_load_partial_contents_async(GFile *file, GCancellable *cancellable, GFileReadMoreCallback read_more_callback, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_load_partial_contents_async$descriptor() {
        return g_file_load_partial_contents_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_load_partial_contents_async(GFile *file, GCancellable *cancellable, GFileReadMoreCallback read_more_callback, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_load_partial_contents_async$handle() {
        return g_file_load_partial_contents_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_load_partial_contents_async(GFile *file, GCancellable *cancellable, GFileReadMoreCallback read_more_callback, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_load_partial_contents_async(MemorySegment file, MemorySegment cancellable, MemorySegment read_more_callback, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_load_partial_contents_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_partial_contents_async", file, cancellable, read_more_callback, callback, user_data);
            }
            mh$.invokeExact(file, cancellable, read_more_callback, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_partial_contents_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_partial_contents_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_load_partial_contents_finish(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_load_partial_contents_finish$descriptor() {
        return g_file_load_partial_contents_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_load_partial_contents_finish(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static MethodHandle g_file_load_partial_contents_finish$handle() {
        return g_file_load_partial_contents_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_load_partial_contents_finish(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error)
     * }
     */
    public static int g_file_load_partial_contents_finish(MemorySegment file, MemorySegment res, MemorySegment contents, MemorySegment length, MemorySegment etag_out, MemorySegment error) {
        var mh$ = g_file_load_partial_contents_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_partial_contents_finish", file, res, contents, length, etag_out, error);
            }
            return (int)mh$.invokeExact(file, res, contents, length, etag_out, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_replace_contents(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, char **new_etag, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_replace_contents$descriptor() {
        return g_file_replace_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_replace_contents(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, char **new_etag, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_replace_contents$handle() {
        return g_file_replace_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_replace_contents(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, char **new_etag, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_replace_contents(MemorySegment file, MemorySegment contents, long length, MemorySegment etag, int make_backup, int flags, MemorySegment new_etag, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_replace_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_contents", file, contents, length, etag, make_backup, flags, new_etag, cancellable, error);
            }
            return (int)mh$.invokeExact(file, contents, length, etag, make_backup, flags, new_etag, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_contents_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_contents_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_replace_contents_async(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_replace_contents_async$descriptor() {
        return g_file_replace_contents_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_replace_contents_async(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_replace_contents_async$handle() {
        return g_file_replace_contents_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_replace_contents_async(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_replace_contents_async(MemorySegment file, MemorySegment contents, long length, MemorySegment etag, int make_backup, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_replace_contents_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_contents_async", file, contents, length, etag, make_backup, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, contents, length, etag, make_backup, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_contents_bytes_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_contents_bytes_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_replace_contents_bytes_async(GFile *file, GBytes *contents, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_replace_contents_bytes_async$descriptor() {
        return g_file_replace_contents_bytes_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_replace_contents_bytes_async(GFile *file, GBytes *contents, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_replace_contents_bytes_async$handle() {
        return g_file_replace_contents_bytes_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_replace_contents_bytes_async(GFile *file, GBytes *contents, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_replace_contents_bytes_async(MemorySegment file, MemorySegment contents, MemorySegment etag, int make_backup, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_replace_contents_bytes_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_contents_bytes_async", file, contents, etag, make_backup, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, contents, etag, make_backup, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_replace_contents_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_replace_contents_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_replace_contents_finish(GFile *file, GAsyncResult *res, char **new_etag, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_replace_contents_finish$descriptor() {
        return g_file_replace_contents_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_replace_contents_finish(GFile *file, GAsyncResult *res, char **new_etag, GError **error)
     * }
     */
    public static MethodHandle g_file_replace_contents_finish$handle() {
        return g_file_replace_contents_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_replace_contents_finish(GFile *file, GAsyncResult *res, char **new_etag, GError **error)
     * }
     */
    public static int g_file_replace_contents_finish(MemorySegment file, MemorySegment res, MemorySegment new_etag, MemorySegment error) {
        var mh$ = g_file_replace_contents_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_replace_contents_finish", file, res, new_etag, error);
            }
            return (int)mh$.invokeExact(file, res, new_etag, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_supports_thread_contexts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_supports_thread_contexts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_supports_thread_contexts(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_supports_thread_contexts$descriptor() {
        return g_file_supports_thread_contexts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_supports_thread_contexts(GFile *file)
     * }
     */
    public static MethodHandle g_file_supports_thread_contexts$handle() {
        return g_file_supports_thread_contexts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_supports_thread_contexts(GFile *file)
     * }
     */
    public static int g_file_supports_thread_contexts(MemorySegment file) {
        var mh$ = g_file_supports_thread_contexts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_supports_thread_contexts", file);
            }
            return (int)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_file_load_bytes(GFile *file, GCancellable *cancellable, gchar **etag_out, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_load_bytes$descriptor() {
        return g_file_load_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_file_load_bytes(GFile *file, GCancellable *cancellable, gchar **etag_out, GError **error)
     * }
     */
    public static MethodHandle g_file_load_bytes$handle() {
        return g_file_load_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_file_load_bytes(GFile *file, GCancellable *cancellable, gchar **etag_out, GError **error)
     * }
     */
    public static MemorySegment g_file_load_bytes(MemorySegment file, MemorySegment cancellable, MemorySegment etag_out, MemorySegment error) {
        var mh$ = g_file_load_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_bytes", file, cancellable, etag_out, error);
            }
            return (MemorySegment)mh$.invokeExact(file, cancellable, etag_out, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_bytes_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_bytes_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_load_bytes_async(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_load_bytes_async$descriptor() {
        return g_file_load_bytes_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_load_bytes_async(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_load_bytes_async$handle() {
        return g_file_load_bytes_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_load_bytes_async(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_load_bytes_async(MemorySegment file, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_load_bytes_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_bytes_async", file, cancellable, callback, user_data);
            }
            mh$.invokeExact(file, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_load_bytes_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_load_bytes_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_file_load_bytes_finish(GFile *file, GAsyncResult *result, gchar **etag_out, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_load_bytes_finish$descriptor() {
        return g_file_load_bytes_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_file_load_bytes_finish(GFile *file, GAsyncResult *result, gchar **etag_out, GError **error)
     * }
     */
    public static MethodHandle g_file_load_bytes_finish$handle() {
        return g_file_load_bytes_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_file_load_bytes_finish(GFile *file, GAsyncResult *result, gchar **etag_out, GError **error)
     * }
     */
    public static MemorySegment g_file_load_bytes_finish(MemorySegment file, MemorySegment result, MemorySegment etag_out, MemorySegment error) {
        var mh$ = g_file_load_bytes_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_load_bytes_finish", file, result, etag_out, error);
            }
            return (MemorySegment)mh$.invokeExact(file, result, etag_out, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_list_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_list_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_info_list_get_type()
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_list_get_type$descriptor() {
        return g_file_attribute_info_list_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_info_list_get_type()
     * }
     */
    public static MethodHandle g_file_attribute_info_list_get_type$handle() {
        return g_file_attribute_info_list_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_attribute_info_list_get_type()
     * }
     */
    public static long g_file_attribute_info_list_get_type() {
        var mh$ = g_file_attribute_info_list_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_list_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_list_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_list_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_new()
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_list_new$descriptor() {
        return g_file_attribute_info_list_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_new()
     * }
     */
    public static MethodHandle g_file_attribute_info_list_new$handle() {
        return g_file_attribute_info_list_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_new()
     * }
     */
    public static MemorySegment g_file_attribute_info_list_new() {
        var mh$ = g_file_attribute_info_list_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_list_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_list_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_list_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_ref(GFileAttributeInfoList *list)
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_list_ref$descriptor() {
        return g_file_attribute_info_list_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_ref(GFileAttributeInfoList *list)
     * }
     */
    public static MethodHandle g_file_attribute_info_list_ref$handle() {
        return g_file_attribute_info_list_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_ref(GFileAttributeInfoList *list)
     * }
     */
    public static MemorySegment g_file_attribute_info_list_ref(MemorySegment list) {
        var mh$ = g_file_attribute_info_list_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_list_ref", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_list_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_list_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_attribute_info_list_unref(GFileAttributeInfoList *list)
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_list_unref$descriptor() {
        return g_file_attribute_info_list_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_attribute_info_list_unref(GFileAttributeInfoList *list)
     * }
     */
    public static MethodHandle g_file_attribute_info_list_unref$handle() {
        return g_file_attribute_info_list_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_attribute_info_list_unref(GFileAttributeInfoList *list)
     * }
     */
    public static void g_file_attribute_info_list_unref(MemorySegment list) {
        var mh$ = g_file_attribute_info_list_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_list_unref", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_list_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_list_dup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_dup(GFileAttributeInfoList *list)
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_list_dup$descriptor() {
        return g_file_attribute_info_list_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_dup(GFileAttributeInfoList *list)
     * }
     */
    public static MethodHandle g_file_attribute_info_list_dup$handle() {
        return g_file_attribute_info_list_dup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeInfoList *g_file_attribute_info_list_dup(GFileAttributeInfoList *list)
     * }
     */
    public static MemorySegment g_file_attribute_info_list_dup(MemorySegment list) {
        var mh$ = g_file_attribute_info_list_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_list_dup", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_list_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_list_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GFileAttributeInfo *g_file_attribute_info_list_lookup(GFileAttributeInfoList *list, const char *name)
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_list_lookup$descriptor() {
        return g_file_attribute_info_list_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GFileAttributeInfo *g_file_attribute_info_list_lookup(GFileAttributeInfoList *list, const char *name)
     * }
     */
    public static MethodHandle g_file_attribute_info_list_lookup$handle() {
        return g_file_attribute_info_list_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GFileAttributeInfo *g_file_attribute_info_list_lookup(GFileAttributeInfoList *list, const char *name)
     * }
     */
    public static MemorySegment g_file_attribute_info_list_lookup(MemorySegment list, MemorySegment name) {
        var mh$ = g_file_attribute_info_list_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_list_lookup", list, name);
            }
            return (MemorySegment)mh$.invokeExact(list, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_list_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_list_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_attribute_info_list_add(GFileAttributeInfoList *list, const char *name, GFileAttributeType type, GFileAttributeInfoFlags flags)
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_list_add$descriptor() {
        return g_file_attribute_info_list_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_attribute_info_list_add(GFileAttributeInfoList *list, const char *name, GFileAttributeType type, GFileAttributeInfoFlags flags)
     * }
     */
    public static MethodHandle g_file_attribute_info_list_add$handle() {
        return g_file_attribute_info_list_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_attribute_info_list_add(GFileAttributeInfoList *list, const char *name, GFileAttributeType type, GFileAttributeInfoFlags flags)
     * }
     */
    public static void g_file_attribute_info_list_add(MemorySegment list, MemorySegment name, int type, int flags) {
        var mh$ = g_file_attribute_info_list_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_list_add", list, name, type, flags);
            }
            mh$.invokeExact(list, name, type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_enumerator_get_type()
     * }
     */
    public static FunctionDescriptor g_file_enumerator_get_type$descriptor() {
        return g_file_enumerator_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_enumerator_get_type()
     * }
     */
    public static MethodHandle g_file_enumerator_get_type$handle() {
        return g_file_enumerator_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_enumerator_get_type()
     * }
     */
    public static long g_file_enumerator_get_type() {
        var mh$ = g_file_enumerator_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_next_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_next_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_enumerator_next_file(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_next_file$descriptor() {
        return g_file_enumerator_next_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_enumerator_next_file(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_enumerator_next_file$handle() {
        return g_file_enumerator_next_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_enumerator_next_file(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_enumerator_next_file(MemorySegment enumerator, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_enumerator_next_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_next_file", enumerator, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(enumerator, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_close(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_close$descriptor() {
        return g_file_enumerator_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_close(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_enumerator_close$handle() {
        return g_file_enumerator_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_close(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_enumerator_close(MemorySegment enumerator, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_enumerator_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_close", enumerator, cancellable, error);
            }
            return (int)mh$.invokeExact(enumerator, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_next_files_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_next_files_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_enumerator_next_files_async(GFileEnumerator *enumerator, int num_files, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_next_files_async$descriptor() {
        return g_file_enumerator_next_files_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_enumerator_next_files_async(GFileEnumerator *enumerator, int num_files, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_enumerator_next_files_async$handle() {
        return g_file_enumerator_next_files_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_enumerator_next_files_async(GFileEnumerator *enumerator, int num_files, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_enumerator_next_files_async(MemorySegment enumerator, int num_files, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_enumerator_next_files_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_next_files_async", enumerator, num_files, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(enumerator, num_files, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_next_files_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_next_files_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_file_enumerator_next_files_finish(GFileEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_next_files_finish$descriptor() {
        return g_file_enumerator_next_files_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_file_enumerator_next_files_finish(GFileEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_enumerator_next_files_finish$handle() {
        return g_file_enumerator_next_files_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_file_enumerator_next_files_finish(GFileEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_file_enumerator_next_files_finish(MemorySegment enumerator, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_enumerator_next_files_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_next_files_finish", enumerator, result, error);
            }
            return (MemorySegment)mh$.invokeExact(enumerator, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_close_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_close_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_enumerator_close_async(GFileEnumerator *enumerator, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_close_async$descriptor() {
        return g_file_enumerator_close_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_enumerator_close_async(GFileEnumerator *enumerator, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_enumerator_close_async$handle() {
        return g_file_enumerator_close_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_enumerator_close_async(GFileEnumerator *enumerator, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_enumerator_close_async(MemorySegment enumerator, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_enumerator_close_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_close_async", enumerator, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(enumerator, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_close_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_close_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_close_finish(GFileEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_close_finish$descriptor() {
        return g_file_enumerator_close_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_close_finish(GFileEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_enumerator_close_finish$handle() {
        return g_file_enumerator_close_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_close_finish(GFileEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_file_enumerator_close_finish(MemorySegment enumerator, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_enumerator_close_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_close_finish", enumerator, result, error);
            }
            return (int)mh$.invokeExact(enumerator, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_is_closed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_is_closed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_is_closed(GFileEnumerator *enumerator)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_is_closed$descriptor() {
        return g_file_enumerator_is_closed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_is_closed(GFileEnumerator *enumerator)
     * }
     */
    public static MethodHandle g_file_enumerator_is_closed$handle() {
        return g_file_enumerator_is_closed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_is_closed(GFileEnumerator *enumerator)
     * }
     */
    public static int g_file_enumerator_is_closed(MemorySegment enumerator) {
        var mh$ = g_file_enumerator_is_closed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_is_closed", enumerator);
            }
            return (int)mh$.invokeExact(enumerator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_has_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_has_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_has_pending(GFileEnumerator *enumerator)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_has_pending$descriptor() {
        return g_file_enumerator_has_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_has_pending(GFileEnumerator *enumerator)
     * }
     */
    public static MethodHandle g_file_enumerator_has_pending$handle() {
        return g_file_enumerator_has_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_has_pending(GFileEnumerator *enumerator)
     * }
     */
    public static int g_file_enumerator_has_pending(MemorySegment enumerator) {
        var mh$ = g_file_enumerator_has_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_has_pending", enumerator);
            }
            return (int)mh$.invokeExact(enumerator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_set_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_set_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_enumerator_set_pending(GFileEnumerator *enumerator, gboolean pending)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_set_pending$descriptor() {
        return g_file_enumerator_set_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_enumerator_set_pending(GFileEnumerator *enumerator, gboolean pending)
     * }
     */
    public static MethodHandle g_file_enumerator_set_pending$handle() {
        return g_file_enumerator_set_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_enumerator_set_pending(GFileEnumerator *enumerator, gboolean pending)
     * }
     */
    public static void g_file_enumerator_set_pending(MemorySegment enumerator, int pending) {
        var mh$ = g_file_enumerator_set_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_set_pending", enumerator, pending);
            }
            mh$.invokeExact(enumerator, pending);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_get_container {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_get_container"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_enumerator_get_container(GFileEnumerator *enumerator)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_get_container$descriptor() {
        return g_file_enumerator_get_container.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_enumerator_get_container(GFileEnumerator *enumerator)
     * }
     */
    public static MethodHandle g_file_enumerator_get_container$handle() {
        return g_file_enumerator_get_container.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_enumerator_get_container(GFileEnumerator *enumerator)
     * }
     */
    public static MemorySegment g_file_enumerator_get_container(MemorySegment enumerator) {
        var mh$ = g_file_enumerator_get_container.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_get_container", enumerator);
            }
            return (MemorySegment)mh$.invokeExact(enumerator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_get_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_get_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_enumerator_get_child(GFileEnumerator *enumerator, GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_get_child$descriptor() {
        return g_file_enumerator_get_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_enumerator_get_child(GFileEnumerator *enumerator, GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_enumerator_get_child$handle() {
        return g_file_enumerator_get_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_enumerator_get_child(GFileEnumerator *enumerator, GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_enumerator_get_child(MemorySegment enumerator, MemorySegment info) {
        var mh$ = g_file_enumerator_get_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_get_child", enumerator, info);
            }
            return (MemorySegment)mh$.invokeExact(enumerator, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_enumerator_iterate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_enumerator_iterate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_iterate(GFileEnumerator *direnum, GFileInfo **out_info, GFile **out_child, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_enumerator_iterate$descriptor() {
        return g_file_enumerator_iterate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_iterate(GFileEnumerator *direnum, GFileInfo **out_info, GFile **out_child, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_enumerator_iterate$handle() {
        return g_file_enumerator_iterate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_enumerator_iterate(GFileEnumerator *direnum, GFileInfo **out_info, GFile **out_child, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_file_enumerator_iterate(MemorySegment direnum, MemorySegment out_info, MemorySegment out_child, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_enumerator_iterate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_enumerator_iterate", direnum, out_info, out_child, cancellable, error);
            }
            return (int)mh$.invokeExact(direnum, out_info, out_child, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_icon_get_type()
     * }
     */
    public static FunctionDescriptor g_file_icon_get_type$descriptor() {
        return g_file_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_icon_get_type()
     * }
     */
    public static MethodHandle g_file_icon_get_type$handle() {
        return g_file_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_icon_get_type()
     * }
     */
    public static long g_file_icon_get_type() {
        var mh$ = g_file_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_icon_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_icon_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_file_icon_new(GFile *file)
     * }
     */
    public static FunctionDescriptor g_file_icon_new$descriptor() {
        return g_file_icon_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_file_icon_new(GFile *file)
     * }
     */
    public static MethodHandle g_file_icon_new$handle() {
        return g_file_icon_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_file_icon_new(GFile *file)
     * }
     */
    public static MemorySegment g_file_icon_new(MemorySegment file) {
        var mh$ = g_file_icon_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_icon_new", file);
            }
            return (MemorySegment)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_icon_get_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_icon_get_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_file_icon_get_file(GFileIcon *icon)
     * }
     */
    public static FunctionDescriptor g_file_icon_get_file$descriptor() {
        return g_file_icon_get_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_file_icon_get_file(GFileIcon *icon)
     * }
     */
    public static MethodHandle g_file_icon_get_file$handle() {
        return g_file_icon_get_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_file_icon_get_file(GFileIcon *icon)
     * }
     */
    public static MemorySegment g_file_icon_get_file(MemorySegment icon) {
        var mh$ = g_file_icon_get_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_icon_get_file", icon);
            }
            return (MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_info_get_type()
     * }
     */
    public static FunctionDescriptor g_file_info_get_type$descriptor() {
        return g_file_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_info_get_type()
     * }
     */
    public static MethodHandle g_file_info_get_type$handle() {
        return g_file_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_info_get_type()
     * }
     */
    public static long g_file_info_get_type() {
        var mh$ = g_file_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_info_new()
     * }
     */
    public static FunctionDescriptor g_file_info_new$descriptor() {
        return g_file_info_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_info_new()
     * }
     */
    public static MethodHandle g_file_info_new$handle() {
        return g_file_info_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_info_new()
     * }
     */
    public static MemorySegment g_file_info_new() {
        var mh$ = g_file_info_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_dup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_info_dup(GFileInfo *other)
     * }
     */
    public static FunctionDescriptor g_file_info_dup$descriptor() {
        return g_file_info_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_info_dup(GFileInfo *other)
     * }
     */
    public static MethodHandle g_file_info_dup$handle() {
        return g_file_info_dup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_info_dup(GFileInfo *other)
     * }
     */
    public static MemorySegment g_file_info_dup(MemorySegment other) {
        var mh$ = g_file_info_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_dup", other);
            }
            return (MemorySegment)mh$.invokeExact(other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_copy_into {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_copy_into"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_copy_into(GFileInfo *src_info, GFileInfo *dest_info)
     * }
     */
    public static FunctionDescriptor g_file_info_copy_into$descriptor() {
        return g_file_info_copy_into.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_copy_into(GFileInfo *src_info, GFileInfo *dest_info)
     * }
     */
    public static MethodHandle g_file_info_copy_into$handle() {
        return g_file_info_copy_into.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_copy_into(GFileInfo *src_info, GFileInfo *dest_info)
     * }
     */
    public static void g_file_info_copy_into(MemorySegment src_info, MemorySegment dest_info) {
        var mh$ = g_file_info_copy_into.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_copy_into", src_info, dest_info);
            }
            mh$.invokeExact(src_info, dest_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_has_attribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_has_attribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_has_attribute(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_has_attribute$descriptor() {
        return g_file_info_has_attribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_has_attribute(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_has_attribute$handle() {
        return g_file_info_has_attribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_has_attribute(GFileInfo *info, const char *attribute)
     * }
     */
    public static int g_file_info_has_attribute(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_has_attribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_has_attribute", info, attribute);
            }
            return (int)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_has_namespace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_has_namespace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_has_namespace(GFileInfo *info, const char *name_space)
     * }
     */
    public static FunctionDescriptor g_file_info_has_namespace$descriptor() {
        return g_file_info_has_namespace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_has_namespace(GFileInfo *info, const char *name_space)
     * }
     */
    public static MethodHandle g_file_info_has_namespace$handle() {
        return g_file_info_has_namespace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_has_namespace(GFileInfo *info, const char *name_space)
     * }
     */
    public static int g_file_info_has_namespace(MemorySegment info, MemorySegment name_space) {
        var mh$ = g_file_info_has_namespace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_has_namespace", info, name_space);
            }
            return (int)mh$.invokeExact(info, name_space);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_list_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_list_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_file_info_list_attributes(GFileInfo *info, const char *name_space)
     * }
     */
    public static FunctionDescriptor g_file_info_list_attributes$descriptor() {
        return g_file_info_list_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_file_info_list_attributes(GFileInfo *info, const char *name_space)
     * }
     */
    public static MethodHandle g_file_info_list_attributes$handle() {
        return g_file_info_list_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_file_info_list_attributes(GFileInfo *info, const char *name_space)
     * }
     */
    public static MemorySegment g_file_info_list_attributes(MemorySegment info, MemorySegment name_space) {
        var mh$ = g_file_info_list_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_list_attributes", info, name_space);
            }
            return (MemorySegment)mh$.invokeExact(info, name_space);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_attribute_data(GFileInfo *info, const char *attribute, GFileAttributeType *type, gpointer *value_pp, GFileAttributeStatus *status)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_data$descriptor() {
        return g_file_info_get_attribute_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_attribute_data(GFileInfo *info, const char *attribute, GFileAttributeType *type, gpointer *value_pp, GFileAttributeStatus *status)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_data$handle() {
        return g_file_info_get_attribute_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_attribute_data(GFileInfo *info, const char *attribute, GFileAttributeType *type, gpointer *value_pp, GFileAttributeStatus *status)
     * }
     */
    public static int g_file_info_get_attribute_data(MemorySegment info, MemorySegment attribute, MemorySegment type, MemorySegment value_pp, MemorySegment status) {
        var mh$ = g_file_info_get_attribute_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_data", info, attribute, type, value_pp, status);
            }
            return (int)mh$.invokeExact(info, attribute, type, value_pp, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeType g_file_info_get_attribute_type(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_type$descriptor() {
        return g_file_info_get_attribute_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeType g_file_info_get_attribute_type(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_type$handle() {
        return g_file_info_get_attribute_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeType g_file_info_get_attribute_type(GFileInfo *info, const char *attribute)
     * }
     */
    public static int g_file_info_get_attribute_type(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_type", info, attribute);
            }
            return (int)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_remove_attribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_remove_attribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_remove_attribute(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_remove_attribute$descriptor() {
        return g_file_info_remove_attribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_remove_attribute(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_remove_attribute$handle() {
        return g_file_info_remove_attribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_remove_attribute(GFileInfo *info, const char *attribute)
     * }
     */
    public static void g_file_info_remove_attribute(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_remove_attribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_remove_attribute", info, attribute);
            }
            mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeStatus g_file_info_get_attribute_status(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_status$descriptor() {
        return g_file_info_get_attribute_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeStatus g_file_info_get_attribute_status(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_status$handle() {
        return g_file_info_get_attribute_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeStatus g_file_info_get_attribute_status(GFileInfo *info, const char *attribute)
     * }
     */
    public static int g_file_info_get_attribute_status(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_status", info, attribute);
            }
            return (int)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_set_attribute_status(GFileInfo *info, const char *attribute, GFileAttributeStatus status)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_status$descriptor() {
        return g_file_info_set_attribute_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_set_attribute_status(GFileInfo *info, const char *attribute, GFileAttributeStatus status)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_status$handle() {
        return g_file_info_set_attribute_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_set_attribute_status(GFileInfo *info, const char *attribute, GFileAttributeStatus status)
     * }
     */
    public static int g_file_info_set_attribute_status(MemorySegment info, MemorySegment attribute, int status) {
        var mh$ = g_file_info_set_attribute_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_status", info, attribute, status);
            }
            return (int)mh$.invokeExact(info, attribute, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_as_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_as_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_info_get_attribute_as_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_as_string$descriptor() {
        return g_file_info_get_attribute_as_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_info_get_attribute_as_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_as_string$handle() {
        return g_file_info_get_attribute_as_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_info_get_attribute_as_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static MemorySegment g_file_info_get_attribute_as_string(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_as_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_as_string", info, attribute);
            }
            return (MemorySegment)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_string$descriptor() {
        return g_file_info_get_attribute_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_string$handle() {
        return g_file_info_get_attribute_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static MemorySegment g_file_info_get_attribute_string(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_string", info, attribute);
            }
            return (MemorySegment)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_byte_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_byte_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_byte_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_byte_string$descriptor() {
        return g_file_info_get_attribute_byte_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_byte_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_byte_string$handle() {
        return g_file_info_get_attribute_byte_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_byte_string(GFileInfo *info, const char *attribute)
     * }
     */
    public static MemorySegment g_file_info_get_attribute_byte_string(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_byte_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_byte_string", info, attribute);
            }
            return (MemorySegment)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_attribute_boolean(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_boolean$descriptor() {
        return g_file_info_get_attribute_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_attribute_boolean(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_boolean$handle() {
        return g_file_info_get_attribute_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_attribute_boolean(GFileInfo *info, const char *attribute)
     * }
     */
    public static int g_file_info_get_attribute_boolean(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_boolean", info, attribute);
            }
            return (int)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_uint32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_uint32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_file_info_get_attribute_uint32(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_uint32$descriptor() {
        return g_file_info_get_attribute_uint32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_file_info_get_attribute_uint32(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_uint32$handle() {
        return g_file_info_get_attribute_uint32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_file_info_get_attribute_uint32(GFileInfo *info, const char *attribute)
     * }
     */
    public static int g_file_info_get_attribute_uint32(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_uint32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_uint32", info, attribute);
            }
            return (int)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_int32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_int32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_file_info_get_attribute_int32(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_int32$descriptor() {
        return g_file_info_get_attribute_int32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_file_info_get_attribute_int32(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_int32$handle() {
        return g_file_info_get_attribute_int32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_file_info_get_attribute_int32(GFileInfo *info, const char *attribute)
     * }
     */
    public static int g_file_info_get_attribute_int32(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_int32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_int32", info, attribute);
            }
            return (int)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_file_info_get_attribute_uint64(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_uint64$descriptor() {
        return g_file_info_get_attribute_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_file_info_get_attribute_uint64(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_uint64$handle() {
        return g_file_info_get_attribute_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 g_file_info_get_attribute_uint64(GFileInfo *info, const char *attribute)
     * }
     */
    public static long g_file_info_get_attribute_uint64(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_uint64", info, attribute);
            }
            return (long)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_file_info_get_attribute_int64(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_int64$descriptor() {
        return g_file_info_get_attribute_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_file_info_get_attribute_int64(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_int64$handle() {
        return g_file_info_get_attribute_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_file_info_get_attribute_int64(GFileInfo *info, const char *attribute)
     * }
     */
    public static long g_file_info_get_attribute_int64(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_int64", info, attribute);
            }
            return (long)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_file_info_get_attribute_object(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_object$descriptor() {
        return g_file_info_get_attribute_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_file_info_get_attribute_object(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_object$handle() {
        return g_file_info_get_attribute_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_file_info_get_attribute_object(GFileInfo *info, const char *attribute)
     * }
     */
    public static MemorySegment g_file_info_get_attribute_object(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_object", info, attribute);
            }
            return (MemorySegment)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_stringv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_stringv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_file_info_get_attribute_stringv(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_stringv$descriptor() {
        return g_file_info_get_attribute_stringv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_file_info_get_attribute_stringv(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_stringv$handle() {
        return g_file_info_get_attribute_stringv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_file_info_get_attribute_stringv(GFileInfo *info, const char *attribute)
     * }
     */
    public static MemorySegment g_file_info_get_attribute_stringv(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_stringv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_stringv", info, attribute);
            }
            return (MemorySegment)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_attribute_file_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_attribute_file_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_file_path(GFileInfo *info, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_info_get_attribute_file_path$descriptor() {
        return g_file_info_get_attribute_file_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_file_path(GFileInfo *info, const char *attribute)
     * }
     */
    public static MethodHandle g_file_info_get_attribute_file_path$handle() {
        return g_file_info_get_attribute_file_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_attribute_file_path(GFileInfo *info, const char *attribute)
     * }
     */
    public static MemorySegment g_file_info_get_attribute_file_path(MemorySegment info, MemorySegment attribute) {
        var mh$ = g_file_info_get_attribute_file_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_attribute_file_path", info, attribute);
            }
            return (MemorySegment)mh$.invokeExact(info, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute(GFileInfo *info, const char *attribute, GFileAttributeType type, gpointer value_p)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute$descriptor() {
        return g_file_info_set_attribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute(GFileInfo *info, const char *attribute, GFileAttributeType type, gpointer value_p)
     * }
     */
    public static MethodHandle g_file_info_set_attribute$handle() {
        return g_file_info_set_attribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute(GFileInfo *info, const char *attribute, GFileAttributeType type, gpointer value_p)
     * }
     */
    public static void g_file_info_set_attribute(MemorySegment info, MemorySegment attribute, int type, MemorySegment value_p) {
        var mh$ = g_file_info_set_attribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute", info, attribute, type, value_p);
            }
            mh$.invokeExact(info, attribute, type, value_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_string(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_string$descriptor() {
        return g_file_info_set_attribute_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_string(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_string$handle() {
        return g_file_info_set_attribute_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_string(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static void g_file_info_set_attribute_string(MemorySegment info, MemorySegment attribute, MemorySegment attr_value) {
        var mh$ = g_file_info_set_attribute_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_string", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_byte_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_byte_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_byte_string(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_byte_string$descriptor() {
        return g_file_info_set_attribute_byte_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_byte_string(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_byte_string$handle() {
        return g_file_info_set_attribute_byte_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_byte_string(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static void g_file_info_set_attribute_byte_string(MemorySegment info, MemorySegment attribute, MemorySegment attr_value) {
        var mh$ = g_file_info_set_attribute_byte_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_byte_string", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_boolean(GFileInfo *info, const char *attribute, gboolean attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_boolean$descriptor() {
        return g_file_info_set_attribute_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_boolean(GFileInfo *info, const char *attribute, gboolean attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_boolean$handle() {
        return g_file_info_set_attribute_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_boolean(GFileInfo *info, const char *attribute, gboolean attr_value)
     * }
     */
    public static void g_file_info_set_attribute_boolean(MemorySegment info, MemorySegment attribute, int attr_value) {
        var mh$ = g_file_info_set_attribute_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_boolean", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_uint32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_uint32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_uint32(GFileInfo *info, const char *attribute, guint32 attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_uint32$descriptor() {
        return g_file_info_set_attribute_uint32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_uint32(GFileInfo *info, const char *attribute, guint32 attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_uint32$handle() {
        return g_file_info_set_attribute_uint32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_uint32(GFileInfo *info, const char *attribute, guint32 attr_value)
     * }
     */
    public static void g_file_info_set_attribute_uint32(MemorySegment info, MemorySegment attribute, int attr_value) {
        var mh$ = g_file_info_set_attribute_uint32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_uint32", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_int32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_int32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_int32(GFileInfo *info, const char *attribute, gint32 attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_int32$descriptor() {
        return g_file_info_set_attribute_int32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_int32(GFileInfo *info, const char *attribute, gint32 attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_int32$handle() {
        return g_file_info_set_attribute_int32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_int32(GFileInfo *info, const char *attribute, gint32 attr_value)
     * }
     */
    public static void g_file_info_set_attribute_int32(MemorySegment info, MemorySegment attribute, int attr_value) {
        var mh$ = g_file_info_set_attribute_int32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_int32", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_uint64(GFileInfo *info, const char *attribute, guint64 attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_uint64$descriptor() {
        return g_file_info_set_attribute_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_uint64(GFileInfo *info, const char *attribute, guint64 attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_uint64$handle() {
        return g_file_info_set_attribute_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_uint64(GFileInfo *info, const char *attribute, guint64 attr_value)
     * }
     */
    public static void g_file_info_set_attribute_uint64(MemorySegment info, MemorySegment attribute, long attr_value) {
        var mh$ = g_file_info_set_attribute_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_uint64", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_int64(GFileInfo *info, const char *attribute, gint64 attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_int64$descriptor() {
        return g_file_info_set_attribute_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_int64(GFileInfo *info, const char *attribute, gint64 attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_int64$handle() {
        return g_file_info_set_attribute_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_int64(GFileInfo *info, const char *attribute, gint64 attr_value)
     * }
     */
    public static void g_file_info_set_attribute_int64(MemorySegment info, MemorySegment attribute, long attr_value) {
        var mh$ = g_file_info_set_attribute_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_int64", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_object(GFileInfo *info, const char *attribute, GObject *attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_object$descriptor() {
        return g_file_info_set_attribute_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_object(GFileInfo *info, const char *attribute, GObject *attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_object$handle() {
        return g_file_info_set_attribute_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_object(GFileInfo *info, const char *attribute, GObject *attr_value)
     * }
     */
    public static void g_file_info_set_attribute_object(MemorySegment info, MemorySegment attribute, MemorySegment attr_value) {
        var mh$ = g_file_info_set_attribute_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_object", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_stringv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_stringv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_stringv(GFileInfo *info, const char *attribute, char **attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_stringv$descriptor() {
        return g_file_info_set_attribute_stringv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_stringv(GFileInfo *info, const char *attribute, char **attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_stringv$handle() {
        return g_file_info_set_attribute_stringv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_stringv(GFileInfo *info, const char *attribute, char **attr_value)
     * }
     */
    public static void g_file_info_set_attribute_stringv(MemorySegment info, MemorySegment attribute, MemorySegment attr_value) {
        var mh$ = g_file_info_set_attribute_stringv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_stringv", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_file_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_file_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_file_path(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_file_path$descriptor() {
        return g_file_info_set_attribute_file_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_file_path(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_file_path$handle() {
        return g_file_info_set_attribute_file_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_file_path(GFileInfo *info, const char *attribute, const char *attr_value)
     * }
     */
    public static void g_file_info_set_attribute_file_path(MemorySegment info, MemorySegment attribute, MemorySegment attr_value) {
        var mh$ = g_file_info_set_attribute_file_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_file_path", info, attribute, attr_value);
            }
            mh$.invokeExact(info, attribute, attr_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_clear_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_clear_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_clear_status(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_clear_status$descriptor() {
        return g_file_info_clear_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_clear_status(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_clear_status$handle() {
        return g_file_info_clear_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_clear_status(GFileInfo *info)
     * }
     */
    public static void g_file_info_clear_status(MemorySegment info) {
        var mh$ = g_file_info_clear_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_clear_status", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_deletion_date {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_deletion_date"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_deletion_date(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_deletion_date$descriptor() {
        return g_file_info_get_deletion_date.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_deletion_date(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_deletion_date$handle() {
        return g_file_info_get_deletion_date.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_deletion_date(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_deletion_date(MemorySegment info) {
        var mh$ = g_file_info_get_deletion_date.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_deletion_date", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_file_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_file_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileType g_file_info_get_file_type(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_file_type$descriptor() {
        return g_file_info_get_file_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileType g_file_info_get_file_type(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_file_type$handle() {
        return g_file_info_get_file_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileType g_file_info_get_file_type(GFileInfo *info)
     * }
     */
    public static int g_file_info_get_file_type(MemorySegment info) {
        var mh$ = g_file_info_get_file_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_file_type", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_is_hidden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_is_hidden"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_hidden(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_is_hidden$descriptor() {
        return g_file_info_get_is_hidden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_hidden(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_is_hidden$handle() {
        return g_file_info_get_is_hidden.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_hidden(GFileInfo *info)
     * }
     */
    public static int g_file_info_get_is_hidden(MemorySegment info) {
        var mh$ = g_file_info_get_is_hidden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_is_hidden", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_is_backup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_is_backup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_backup(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_is_backup$descriptor() {
        return g_file_info_get_is_backup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_backup(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_is_backup$handle() {
        return g_file_info_get_is_backup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_backup(GFileInfo *info)
     * }
     */
    public static int g_file_info_get_is_backup(MemorySegment info) {
        var mh$ = g_file_info_get_is_backup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_is_backup", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_is_symlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_is_symlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_symlink(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_is_symlink$descriptor() {
        return g_file_info_get_is_symlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_symlink(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_is_symlink$handle() {
        return g_file_info_get_is_symlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_info_get_is_symlink(GFileInfo *info)
     * }
     */
    public static int g_file_info_get_is_symlink(MemorySegment info) {
        var mh$ = g_file_info_get_is_symlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_is_symlink", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_name(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_name$descriptor() {
        return g_file_info_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_name(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_name$handle() {
        return g_file_info_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_name(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_name(MemorySegment info) {
        var mh$ = g_file_info_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_name", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_display_name(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_display_name$descriptor() {
        return g_file_info_get_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_display_name(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_display_name$handle() {
        return g_file_info_get_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_display_name(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_display_name(MemorySegment info) {
        var mh$ = g_file_info_get_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_display_name", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_edit_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_edit_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_edit_name(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_edit_name$descriptor() {
        return g_file_info_get_edit_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_edit_name(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_edit_name$handle() {
        return g_file_info_get_edit_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_edit_name(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_edit_name(MemorySegment info) {
        var mh$ = g_file_info_get_edit_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_edit_name", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_file_info_get_icon(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_icon$descriptor() {
        return g_file_info_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_file_info_get_icon(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_icon$handle() {
        return g_file_info_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_file_info_get_icon(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_icon(MemorySegment info) {
        var mh$ = g_file_info_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_icon", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_symbolic_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_symbolic_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_file_info_get_symbolic_icon(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_symbolic_icon$descriptor() {
        return g_file_info_get_symbolic_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_file_info_get_symbolic_icon(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_symbolic_icon$handle() {
        return g_file_info_get_symbolic_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_file_info_get_symbolic_icon(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_symbolic_icon(MemorySegment info) {
        var mh$ = g_file_info_get_symbolic_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_symbolic_icon", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_content_type(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_content_type$descriptor() {
        return g_file_info_get_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_content_type(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_content_type$handle() {
        return g_file_info_get_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_content_type(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_content_type(MemorySegment info) {
        var mh$ = g_file_info_get_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_content_type", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern goffset g_file_info_get_size(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_size$descriptor() {
        return g_file_info_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern goffset g_file_info_get_size(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_size$handle() {
        return g_file_info_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern goffset g_file_info_get_size(GFileInfo *info)
     * }
     */
    public static long g_file_info_get_size(MemorySegment info) {
        var mh$ = g_file_info_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_size", info);
            }
            return (long)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_modification_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_modification_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_get_modification_time(GFileInfo *info, GTimeVal *result)
     * }
     */
    public static FunctionDescriptor g_file_info_get_modification_time$descriptor() {
        return g_file_info_get_modification_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_get_modification_time(GFileInfo *info, GTimeVal *result)
     * }
     */
    public static MethodHandle g_file_info_get_modification_time$handle() {
        return g_file_info_get_modification_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_get_modification_time(GFileInfo *info, GTimeVal *result)
     * }
     */
    public static void g_file_info_get_modification_time(MemorySegment info, MemorySegment result) {
        var mh$ = g_file_info_get_modification_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_modification_time", info, result);
            }
            mh$.invokeExact(info, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_modification_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_modification_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_modification_date_time(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_modification_date_time$descriptor() {
        return g_file_info_get_modification_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_modification_date_time(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_modification_date_time$handle() {
        return g_file_info_get_modification_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_modification_date_time(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_modification_date_time(MemorySegment info) {
        var mh$ = g_file_info_get_modification_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_modification_date_time", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_access_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_access_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_access_date_time(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_access_date_time$descriptor() {
        return g_file_info_get_access_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_access_date_time(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_access_date_time$handle() {
        return g_file_info_get_access_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_access_date_time(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_access_date_time(MemorySegment info) {
        var mh$ = g_file_info_get_access_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_access_date_time", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_creation_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_creation_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_creation_date_time(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_creation_date_time$descriptor() {
        return g_file_info_get_creation_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_creation_date_time(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_creation_date_time$handle() {
        return g_file_info_get_creation_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_file_info_get_creation_date_time(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_creation_date_time(MemorySegment info) {
        var mh$ = g_file_info_get_creation_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_creation_date_time", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_symlink_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_symlink_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_symlink_target(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_symlink_target$descriptor() {
        return g_file_info_get_symlink_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_symlink_target(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_symlink_target$handle() {
        return g_file_info_get_symlink_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_symlink_target(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_symlink_target(MemorySegment info) {
        var mh$ = g_file_info_get_symlink_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_symlink_target", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_etag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_etag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_etag(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_etag$descriptor() {
        return g_file_info_get_etag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_info_get_etag(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_etag$handle() {
        return g_file_info_get_etag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_info_get_etag(GFileInfo *info)
     * }
     */
    public static MemorySegment g_file_info_get_etag(MemorySegment info) {
        var mh$ = g_file_info_get_etag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_etag", info);
            }
            return (MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_get_sort_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_get_sort_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_file_info_get_sort_order(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_get_sort_order$descriptor() {
        return g_file_info_get_sort_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_file_info_get_sort_order(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_get_sort_order$handle() {
        return g_file_info_get_sort_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_file_info_get_sort_order(GFileInfo *info)
     * }
     */
    public static int g_file_info_get_sort_order(MemorySegment info) {
        var mh$ = g_file_info_get_sort_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_get_sort_order", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_attribute_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_attribute_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_mask(GFileInfo *info, GFileAttributeMatcher *mask)
     * }
     */
    public static FunctionDescriptor g_file_info_set_attribute_mask$descriptor() {
        return g_file_info_set_attribute_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_mask(GFileInfo *info, GFileAttributeMatcher *mask)
     * }
     */
    public static MethodHandle g_file_info_set_attribute_mask$handle() {
        return g_file_info_set_attribute_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_attribute_mask(GFileInfo *info, GFileAttributeMatcher *mask)
     * }
     */
    public static void g_file_info_set_attribute_mask(MemorySegment info, MemorySegment mask) {
        var mh$ = g_file_info_set_attribute_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_attribute_mask", info, mask);
            }
            mh$.invokeExact(info, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_unset_attribute_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_unset_attribute_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_unset_attribute_mask(GFileInfo *info)
     * }
     */
    public static FunctionDescriptor g_file_info_unset_attribute_mask$descriptor() {
        return g_file_info_unset_attribute_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_unset_attribute_mask(GFileInfo *info)
     * }
     */
    public static MethodHandle g_file_info_unset_attribute_mask$handle() {
        return g_file_info_unset_attribute_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_unset_attribute_mask(GFileInfo *info)
     * }
     */
    public static void g_file_info_unset_attribute_mask(MemorySegment info) {
        var mh$ = g_file_info_unset_attribute_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_unset_attribute_mask", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_file_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_file_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_file_type(GFileInfo *info, GFileType type)
     * }
     */
    public static FunctionDescriptor g_file_info_set_file_type$descriptor() {
        return g_file_info_set_file_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_file_type(GFileInfo *info, GFileType type)
     * }
     */
    public static MethodHandle g_file_info_set_file_type$handle() {
        return g_file_info_set_file_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_file_type(GFileInfo *info, GFileType type)
     * }
     */
    public static void g_file_info_set_file_type(MemorySegment info, int type) {
        var mh$ = g_file_info_set_file_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_file_type", info, type);
            }
            mh$.invokeExact(info, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_is_hidden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_is_hidden"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_is_hidden(GFileInfo *info, gboolean is_hidden)
     * }
     */
    public static FunctionDescriptor g_file_info_set_is_hidden$descriptor() {
        return g_file_info_set_is_hidden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_is_hidden(GFileInfo *info, gboolean is_hidden)
     * }
     */
    public static MethodHandle g_file_info_set_is_hidden$handle() {
        return g_file_info_set_is_hidden.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_is_hidden(GFileInfo *info, gboolean is_hidden)
     * }
     */
    public static void g_file_info_set_is_hidden(MemorySegment info, int is_hidden) {
        var mh$ = g_file_info_set_is_hidden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_is_hidden", info, is_hidden);
            }
            mh$.invokeExact(info, is_hidden);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_is_symlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_is_symlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_is_symlink(GFileInfo *info, gboolean is_symlink)
     * }
     */
    public static FunctionDescriptor g_file_info_set_is_symlink$descriptor() {
        return g_file_info_set_is_symlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_is_symlink(GFileInfo *info, gboolean is_symlink)
     * }
     */
    public static MethodHandle g_file_info_set_is_symlink$handle() {
        return g_file_info_set_is_symlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_is_symlink(GFileInfo *info, gboolean is_symlink)
     * }
     */
    public static void g_file_info_set_is_symlink(MemorySegment info, int is_symlink) {
        var mh$ = g_file_info_set_is_symlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_is_symlink", info, is_symlink);
            }
            mh$.invokeExact(info, is_symlink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_name(GFileInfo *info, const char *name)
     * }
     */
    public static FunctionDescriptor g_file_info_set_name$descriptor() {
        return g_file_info_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_name(GFileInfo *info, const char *name)
     * }
     */
    public static MethodHandle g_file_info_set_name$handle() {
        return g_file_info_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_name(GFileInfo *info, const char *name)
     * }
     */
    public static void g_file_info_set_name(MemorySegment info, MemorySegment name) {
        var mh$ = g_file_info_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_name", info, name);
            }
            mh$.invokeExact(info, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_display_name(GFileInfo *info, const char *display_name)
     * }
     */
    public static FunctionDescriptor g_file_info_set_display_name$descriptor() {
        return g_file_info_set_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_display_name(GFileInfo *info, const char *display_name)
     * }
     */
    public static MethodHandle g_file_info_set_display_name$handle() {
        return g_file_info_set_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_display_name(GFileInfo *info, const char *display_name)
     * }
     */
    public static void g_file_info_set_display_name(MemorySegment info, MemorySegment display_name) {
        var mh$ = g_file_info_set_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_display_name", info, display_name);
            }
            mh$.invokeExact(info, display_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_edit_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_edit_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_edit_name(GFileInfo *info, const char *edit_name)
     * }
     */
    public static FunctionDescriptor g_file_info_set_edit_name$descriptor() {
        return g_file_info_set_edit_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_edit_name(GFileInfo *info, const char *edit_name)
     * }
     */
    public static MethodHandle g_file_info_set_edit_name$handle() {
        return g_file_info_set_edit_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_edit_name(GFileInfo *info, const char *edit_name)
     * }
     */
    public static void g_file_info_set_edit_name(MemorySegment info, MemorySegment edit_name) {
        var mh$ = g_file_info_set_edit_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_edit_name", info, edit_name);
            }
            mh$.invokeExact(info, edit_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_icon(GFileInfo *info, GIcon *icon)
     * }
     */
    public static FunctionDescriptor g_file_info_set_icon$descriptor() {
        return g_file_info_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_icon(GFileInfo *info, GIcon *icon)
     * }
     */
    public static MethodHandle g_file_info_set_icon$handle() {
        return g_file_info_set_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_icon(GFileInfo *info, GIcon *icon)
     * }
     */
    public static void g_file_info_set_icon(MemorySegment info, MemorySegment icon) {
        var mh$ = g_file_info_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_icon", info, icon);
            }
            mh$.invokeExact(info, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_symbolic_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_symbolic_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_symbolic_icon(GFileInfo *info, GIcon *icon)
     * }
     */
    public static FunctionDescriptor g_file_info_set_symbolic_icon$descriptor() {
        return g_file_info_set_symbolic_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_symbolic_icon(GFileInfo *info, GIcon *icon)
     * }
     */
    public static MethodHandle g_file_info_set_symbolic_icon$handle() {
        return g_file_info_set_symbolic_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_symbolic_icon(GFileInfo *info, GIcon *icon)
     * }
     */
    public static void g_file_info_set_symbolic_icon(MemorySegment info, MemorySegment icon) {
        var mh$ = g_file_info_set_symbolic_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_symbolic_icon", info, icon);
            }
            mh$.invokeExact(info, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_content_type(GFileInfo *info, const char *content_type)
     * }
     */
    public static FunctionDescriptor g_file_info_set_content_type$descriptor() {
        return g_file_info_set_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_content_type(GFileInfo *info, const char *content_type)
     * }
     */
    public static MethodHandle g_file_info_set_content_type$handle() {
        return g_file_info_set_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_content_type(GFileInfo *info, const char *content_type)
     * }
     */
    public static void g_file_info_set_content_type(MemorySegment info, MemorySegment content_type) {
        var mh$ = g_file_info_set_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_content_type", info, content_type);
            }
            mh$.invokeExact(info, content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_size(GFileInfo *info, goffset size)
     * }
     */
    public static FunctionDescriptor g_file_info_set_size$descriptor() {
        return g_file_info_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_size(GFileInfo *info, goffset size)
     * }
     */
    public static MethodHandle g_file_info_set_size$handle() {
        return g_file_info_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_size(GFileInfo *info, goffset size)
     * }
     */
    public static void g_file_info_set_size(MemorySegment info, long size) {
        var mh$ = g_file_info_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_size", info, size);
            }
            mh$.invokeExact(info, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_modification_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_modification_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_modification_time(GFileInfo *info, GTimeVal *mtime)
     * }
     */
    public static FunctionDescriptor g_file_info_set_modification_time$descriptor() {
        return g_file_info_set_modification_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_modification_time(GFileInfo *info, GTimeVal *mtime)
     * }
     */
    public static MethodHandle g_file_info_set_modification_time$handle() {
        return g_file_info_set_modification_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_modification_time(GFileInfo *info, GTimeVal *mtime)
     * }
     */
    public static void g_file_info_set_modification_time(MemorySegment info, MemorySegment mtime) {
        var mh$ = g_file_info_set_modification_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_modification_time", info, mtime);
            }
            mh$.invokeExact(info, mtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_modification_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_modification_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_modification_date_time(GFileInfo *info, GDateTime *mtime)
     * }
     */
    public static FunctionDescriptor g_file_info_set_modification_date_time$descriptor() {
        return g_file_info_set_modification_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_modification_date_time(GFileInfo *info, GDateTime *mtime)
     * }
     */
    public static MethodHandle g_file_info_set_modification_date_time$handle() {
        return g_file_info_set_modification_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_modification_date_time(GFileInfo *info, GDateTime *mtime)
     * }
     */
    public static void g_file_info_set_modification_date_time(MemorySegment info, MemorySegment mtime) {
        var mh$ = g_file_info_set_modification_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_modification_date_time", info, mtime);
            }
            mh$.invokeExact(info, mtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_access_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_access_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_access_date_time(GFileInfo *info, GDateTime *atime)
     * }
     */
    public static FunctionDescriptor g_file_info_set_access_date_time$descriptor() {
        return g_file_info_set_access_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_access_date_time(GFileInfo *info, GDateTime *atime)
     * }
     */
    public static MethodHandle g_file_info_set_access_date_time$handle() {
        return g_file_info_set_access_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_access_date_time(GFileInfo *info, GDateTime *atime)
     * }
     */
    public static void g_file_info_set_access_date_time(MemorySegment info, MemorySegment atime) {
        var mh$ = g_file_info_set_access_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_access_date_time", info, atime);
            }
            mh$.invokeExact(info, atime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_creation_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_creation_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_creation_date_time(GFileInfo *info, GDateTime *creation_time)
     * }
     */
    public static FunctionDescriptor g_file_info_set_creation_date_time$descriptor() {
        return g_file_info_set_creation_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_creation_date_time(GFileInfo *info, GDateTime *creation_time)
     * }
     */
    public static MethodHandle g_file_info_set_creation_date_time$handle() {
        return g_file_info_set_creation_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_creation_date_time(GFileInfo *info, GDateTime *creation_time)
     * }
     */
    public static void g_file_info_set_creation_date_time(MemorySegment info, MemorySegment creation_time) {
        var mh$ = g_file_info_set_creation_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_creation_date_time", info, creation_time);
            }
            mh$.invokeExact(info, creation_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_symlink_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_symlink_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_symlink_target(GFileInfo *info, const char *symlink_target)
     * }
     */
    public static FunctionDescriptor g_file_info_set_symlink_target$descriptor() {
        return g_file_info_set_symlink_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_symlink_target(GFileInfo *info, const char *symlink_target)
     * }
     */
    public static MethodHandle g_file_info_set_symlink_target$handle() {
        return g_file_info_set_symlink_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_symlink_target(GFileInfo *info, const char *symlink_target)
     * }
     */
    public static void g_file_info_set_symlink_target(MemorySegment info, MemorySegment symlink_target) {
        var mh$ = g_file_info_set_symlink_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_symlink_target", info, symlink_target);
            }
            mh$.invokeExact(info, symlink_target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_info_set_sort_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_info_set_sort_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_info_set_sort_order(GFileInfo *info, gint32 sort_order)
     * }
     */
    public static FunctionDescriptor g_file_info_set_sort_order$descriptor() {
        return g_file_info_set_sort_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_info_set_sort_order(GFileInfo *info, gint32 sort_order)
     * }
     */
    public static MethodHandle g_file_info_set_sort_order$handle() {
        return g_file_info_set_sort_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_info_set_sort_order(GFileInfo *info, gint32 sort_order)
     * }
     */
    public static void g_file_info_set_sort_order(MemorySegment info, int sort_order) {
        var mh$ = g_file_info_set_sort_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_info_set_sort_order", info, sort_order);
            }
            mh$.invokeExact(info, sort_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_matcher_get_type()
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_get_type$descriptor() {
        return g_file_attribute_matcher_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_matcher_get_type()
     * }
     */
    public static MethodHandle g_file_attribute_matcher_get_type$handle() {
        return g_file_attribute_matcher_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_attribute_matcher_get_type()
     * }
     */
    public static long g_file_attribute_matcher_get_type() {
        var mh$ = g_file_attribute_matcher_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_new(const char *attributes)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_new$descriptor() {
        return g_file_attribute_matcher_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_new(const char *attributes)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_new$handle() {
        return g_file_attribute_matcher_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_new(const char *attributes)
     * }
     */
    public static MemorySegment g_file_attribute_matcher_new(MemorySegment attributes) {
        var mh$ = g_file_attribute_matcher_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_new", attributes);
            }
            return (MemorySegment)mh$.invokeExact(attributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_ref(GFileAttributeMatcher *matcher)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_ref$descriptor() {
        return g_file_attribute_matcher_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_ref(GFileAttributeMatcher *matcher)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_ref$handle() {
        return g_file_attribute_matcher_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_ref(GFileAttributeMatcher *matcher)
     * }
     */
    public static MemorySegment g_file_attribute_matcher_ref(MemorySegment matcher) {
        var mh$ = g_file_attribute_matcher_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_ref", matcher);
            }
            return (MemorySegment)mh$.invokeExact(matcher);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_attribute_matcher_unref(GFileAttributeMatcher *matcher)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_unref$descriptor() {
        return g_file_attribute_matcher_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_attribute_matcher_unref(GFileAttributeMatcher *matcher)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_unref$handle() {
        return g_file_attribute_matcher_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_attribute_matcher_unref(GFileAttributeMatcher *matcher)
     * }
     */
    public static void g_file_attribute_matcher_unref(MemorySegment matcher) {
        var mh$ = g_file_attribute_matcher_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_unref", matcher);
            }
            mh$.invokeExact(matcher);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_subtract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_subtract"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_subtract(GFileAttributeMatcher *matcher, GFileAttributeMatcher *subtract)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_subtract$descriptor() {
        return g_file_attribute_matcher_subtract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_subtract(GFileAttributeMatcher *matcher, GFileAttributeMatcher *subtract)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_subtract$handle() {
        return g_file_attribute_matcher_subtract.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileAttributeMatcher *g_file_attribute_matcher_subtract(GFileAttributeMatcher *matcher, GFileAttributeMatcher *subtract)
     * }
     */
    public static MemorySegment g_file_attribute_matcher_subtract(MemorySegment matcher, MemorySegment subtract) {
        var mh$ = g_file_attribute_matcher_subtract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_subtract", matcher, subtract);
            }
            return (MemorySegment)mh$.invokeExact(matcher, subtract);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_matches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_matches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_matches(GFileAttributeMatcher *matcher, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_matches$descriptor() {
        return g_file_attribute_matcher_matches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_matches(GFileAttributeMatcher *matcher, const char *attribute)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_matches$handle() {
        return g_file_attribute_matcher_matches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_matches(GFileAttributeMatcher *matcher, const char *attribute)
     * }
     */
    public static int g_file_attribute_matcher_matches(MemorySegment matcher, MemorySegment attribute) {
        var mh$ = g_file_attribute_matcher_matches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_matches", matcher, attribute);
            }
            return (int)mh$.invokeExact(matcher, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_matches_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_matches_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_matches_only(GFileAttributeMatcher *matcher, const char *attribute)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_matches_only$descriptor() {
        return g_file_attribute_matcher_matches_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_matches_only(GFileAttributeMatcher *matcher, const char *attribute)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_matches_only$handle() {
        return g_file_attribute_matcher_matches_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_matches_only(GFileAttributeMatcher *matcher, const char *attribute)
     * }
     */
    public static int g_file_attribute_matcher_matches_only(MemorySegment matcher, MemorySegment attribute) {
        var mh$ = g_file_attribute_matcher_matches_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_matches_only", matcher, attribute);
            }
            return (int)mh$.invokeExact(matcher, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_enumerate_namespace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_enumerate_namespace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher *matcher, const char *ns)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_enumerate_namespace$descriptor() {
        return g_file_attribute_matcher_enumerate_namespace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher *matcher, const char *ns)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_enumerate_namespace$handle() {
        return g_file_attribute_matcher_enumerate_namespace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher *matcher, const char *ns)
     * }
     */
    public static int g_file_attribute_matcher_enumerate_namespace(MemorySegment matcher, MemorySegment ns) {
        var mh$ = g_file_attribute_matcher_enumerate_namespace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_enumerate_namespace", matcher, ns);
            }
            return (int)mh$.invokeExact(matcher, ns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_enumerate_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_enumerate_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher *matcher)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_enumerate_next$descriptor() {
        return g_file_attribute_matcher_enumerate_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher *matcher)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_enumerate_next$handle() {
        return g_file_attribute_matcher_enumerate_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher *matcher)
     * }
     */
    public static MemorySegment g_file_attribute_matcher_enumerate_next(MemorySegment matcher) {
        var mh$ = g_file_attribute_matcher_enumerate_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_enumerate_next", matcher);
            }
            return (MemorySegment)mh$.invokeExact(matcher);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_matcher_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_matcher_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_attribute_matcher_to_string(GFileAttributeMatcher *matcher)
     * }
     */
    public static FunctionDescriptor g_file_attribute_matcher_to_string$descriptor() {
        return g_file_attribute_matcher_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_attribute_matcher_to_string(GFileAttributeMatcher *matcher)
     * }
     */
    public static MethodHandle g_file_attribute_matcher_to_string$handle() {
        return g_file_attribute_matcher_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_attribute_matcher_to_string(GFileAttributeMatcher *matcher)
     * }
     */
    public static MemorySegment g_file_attribute_matcher_to_string(MemorySegment matcher) {
        var mh$ = g_file_attribute_matcher_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_matcher_to_string", matcher);
            }
            return (MemorySegment)mh$.invokeExact(matcher);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_file_input_stream_get_type$descriptor() {
        return g_file_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_input_stream_get_type()
     * }
     */
    public static MethodHandle g_file_input_stream_get_type$handle() {
        return g_file_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_input_stream_get_type()
     * }
     */
    public static long g_file_input_stream_get_type() {
        var mh$ = g_file_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_input_stream_query_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_input_stream_query_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_input_stream_query_info(GFileInputStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_input_stream_query_info$descriptor() {
        return g_file_input_stream_query_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_input_stream_query_info(GFileInputStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_input_stream_query_info$handle() {
        return g_file_input_stream_query_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_input_stream_query_info(GFileInputStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_input_stream_query_info(MemorySegment stream, MemorySegment attributes, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_input_stream_query_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_input_stream_query_info", stream, attributes, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, attributes, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_input_stream_query_info_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_input_stream_query_info_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_input_stream_query_info_async(GFileInputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_input_stream_query_info_async$descriptor() {
        return g_file_input_stream_query_info_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_input_stream_query_info_async(GFileInputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_input_stream_query_info_async$handle() {
        return g_file_input_stream_query_info_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_input_stream_query_info_async(GFileInputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_input_stream_query_info_async(MemorySegment stream, MemorySegment attributes, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_input_stream_query_info_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_input_stream_query_info_async", stream, attributes, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, attributes, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_input_stream_query_info_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_input_stream_query_info_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_input_stream_query_info_finish(GFileInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_input_stream_query_info_finish$descriptor() {
        return g_file_input_stream_query_info_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_input_stream_query_info_finish(GFileInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_input_stream_query_info_finish$handle() {
        return g_file_input_stream_query_info_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_input_stream_query_info_finish(GFileInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_file_input_stream_query_info_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_input_stream_query_info_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_input_stream_query_info_finish", stream, result, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_io_error_quark()
     * }
     */
    public static FunctionDescriptor g_io_error_quark$descriptor() {
        return g_io_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_io_error_quark()
     * }
     */
    public static MethodHandle g_io_error_quark$handle() {
        return g_io_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_io_error_quark()
     * }
     */
    public static int g_io_error_quark() {
        var mh$ = g_io_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_error_from_errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_error_from_errno"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOErrorEnum g_io_error_from_errno(gint err_no)
     * }
     */
    public static FunctionDescriptor g_io_error_from_errno$descriptor() {
        return g_io_error_from_errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOErrorEnum g_io_error_from_errno(gint err_no)
     * }
     */
    public static MethodHandle g_io_error_from_errno$handle() {
        return g_io_error_from_errno.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOErrorEnum g_io_error_from_errno(gint err_no)
     * }
     */
    public static int g_io_error_from_errno(int err_no) {
        var mh$ = g_io_error_from_errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_error_from_errno", err_no);
            }
            return (int)mh$.invokeExact(err_no);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_error_from_file_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_error_from_file_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOErrorEnum g_io_error_from_file_error(GFileError file_error)
     * }
     */
    public static FunctionDescriptor g_io_error_from_file_error$descriptor() {
        return g_io_error_from_file_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOErrorEnum g_io_error_from_file_error(GFileError file_error)
     * }
     */
    public static MethodHandle g_io_error_from_file_error$handle() {
        return g_io_error_from_file_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOErrorEnum g_io_error_from_file_error(GFileError file_error)
     * }
     */
    public static int g_io_error_from_file_error(int file_error) {
        var mh$ = g_io_error_from_file_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_error_from_file_error", file_error);
            }
            return (int)mh$.invokeExact(file_error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_io_stream_get_type$descriptor() {
        return g_io_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_stream_get_type()
     * }
     */
    public static MethodHandle g_io_stream_get_type$handle() {
        return g_io_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_stream_get_type()
     * }
     */
    public static long g_io_stream_get_type() {
        var mh$ = g_io_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_get_input_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_get_input_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_io_stream_get_input_stream(GIOStream *stream)
     * }
     */
    public static FunctionDescriptor g_io_stream_get_input_stream$descriptor() {
        return g_io_stream_get_input_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_io_stream_get_input_stream(GIOStream *stream)
     * }
     */
    public static MethodHandle g_io_stream_get_input_stream$handle() {
        return g_io_stream_get_input_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_io_stream_get_input_stream(GIOStream *stream)
     * }
     */
    public static MemorySegment g_io_stream_get_input_stream(MemorySegment stream) {
        var mh$ = g_io_stream_get_input_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_get_input_stream", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_get_output_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_get_output_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_io_stream_get_output_stream(GIOStream *stream)
     * }
     */
    public static FunctionDescriptor g_io_stream_get_output_stream$descriptor() {
        return g_io_stream_get_output_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_io_stream_get_output_stream(GIOStream *stream)
     * }
     */
    public static MethodHandle g_io_stream_get_output_stream$handle() {
        return g_io_stream_get_output_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_io_stream_get_output_stream(GIOStream *stream)
     * }
     */
    public static MemorySegment g_io_stream_get_output_stream(MemorySegment stream) {
        var mh$ = g_io_stream_get_output_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_get_output_stream", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_splice_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_splice_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_stream_splice_async(GIOStream *stream1, GIOStream *stream2, GIOStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_io_stream_splice_async$descriptor() {
        return g_io_stream_splice_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_stream_splice_async(GIOStream *stream1, GIOStream *stream2, GIOStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_io_stream_splice_async$handle() {
        return g_io_stream_splice_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_stream_splice_async(GIOStream *stream1, GIOStream *stream2, GIOStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_io_stream_splice_async(MemorySegment stream1, MemorySegment stream2, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_io_stream_splice_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_splice_async", stream1, stream2, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream1, stream2, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_splice_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_splice_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_splice_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_stream_splice_finish$descriptor() {
        return g_io_stream_splice_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_splice_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_io_stream_splice_finish$handle() {
        return g_io_stream_splice_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_stream_splice_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static int g_io_stream_splice_finish(MemorySegment result, MemorySegment error) {
        var mh$ = g_io_stream_splice_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_splice_finish", result, error);
            }
            return (int)mh$.invokeExact(result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_close(GIOStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_stream_close$descriptor() {
        return g_io_stream_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_close(GIOStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_io_stream_close$handle() {
        return g_io_stream_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_stream_close(GIOStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_io_stream_close(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_io_stream_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_close", stream, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_close_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_close_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_stream_close_async(GIOStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_io_stream_close_async$descriptor() {
        return g_io_stream_close_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_stream_close_async(GIOStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_io_stream_close_async$handle() {
        return g_io_stream_close_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_stream_close_async(GIOStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_io_stream_close_async(MemorySegment stream, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_io_stream_close_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_close_async", stream, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_close_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_close_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_close_finish(GIOStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_stream_close_finish$descriptor() {
        return g_io_stream_close_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_close_finish(GIOStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_io_stream_close_finish$handle() {
        return g_io_stream_close_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_stream_close_finish(GIOStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_io_stream_close_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_io_stream_close_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_close_finish", stream, result, error);
            }
            return (int)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_is_closed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_is_closed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_is_closed(GIOStream *stream)
     * }
     */
    public static FunctionDescriptor g_io_stream_is_closed$descriptor() {
        return g_io_stream_is_closed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_is_closed(GIOStream *stream)
     * }
     */
    public static MethodHandle g_io_stream_is_closed$handle() {
        return g_io_stream_is_closed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_stream_is_closed(GIOStream *stream)
     * }
     */
    public static int g_io_stream_is_closed(MemorySegment stream) {
        var mh$ = g_io_stream_is_closed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_is_closed", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_has_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_has_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_has_pending(GIOStream *stream)
     * }
     */
    public static FunctionDescriptor g_io_stream_has_pending$descriptor() {
        return g_io_stream_has_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_has_pending(GIOStream *stream)
     * }
     */
    public static MethodHandle g_io_stream_has_pending$handle() {
        return g_io_stream_has_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_stream_has_pending(GIOStream *stream)
     * }
     */
    public static int g_io_stream_has_pending(MemorySegment stream) {
        var mh$ = g_io_stream_has_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_has_pending", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_set_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_set_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_set_pending(GIOStream *stream, GError **error)
     * }
     */
    public static FunctionDescriptor g_io_stream_set_pending$descriptor() {
        return g_io_stream_set_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_stream_set_pending(GIOStream *stream, GError **error)
     * }
     */
    public static MethodHandle g_io_stream_set_pending$handle() {
        return g_io_stream_set_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_stream_set_pending(GIOStream *stream, GError **error)
     * }
     */
    public static int g_io_stream_set_pending(MemorySegment stream, MemorySegment error) {
        var mh$ = g_io_stream_set_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_set_pending", stream, error);
            }
            return (int)mh$.invokeExact(stream, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_clear_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_clear_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_stream_clear_pending(GIOStream *stream)
     * }
     */
    public static FunctionDescriptor g_io_stream_clear_pending$descriptor() {
        return g_io_stream_clear_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_stream_clear_pending(GIOStream *stream)
     * }
     */
    public static MethodHandle g_io_stream_clear_pending$handle() {
        return g_io_stream_clear_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_stream_clear_pending(GIOStream *stream)
     * }
     */
    public static void g_io_stream_clear_pending(MemorySegment stream) {
        var mh$ = g_io_stream_clear_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_clear_pending", stream);
            }
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_io_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_io_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_io_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_file_io_stream_get_type$descriptor() {
        return g_file_io_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_io_stream_get_type()
     * }
     */
    public static MethodHandle g_file_io_stream_get_type$handle() {
        return g_file_io_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_io_stream_get_type()
     * }
     */
    public static long g_file_io_stream_get_type() {
        var mh$ = g_file_io_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_io_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_io_stream_query_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_io_stream_query_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_io_stream_query_info(GFileIOStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_io_stream_query_info$descriptor() {
        return g_file_io_stream_query_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_io_stream_query_info(GFileIOStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_io_stream_query_info$handle() {
        return g_file_io_stream_query_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_io_stream_query_info(GFileIOStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_io_stream_query_info(MemorySegment stream, MemorySegment attributes, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_io_stream_query_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_io_stream_query_info", stream, attributes, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, attributes, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_io_stream_query_info_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_io_stream_query_info_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_io_stream_query_info_async(GFileIOStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_io_stream_query_info_async$descriptor() {
        return g_file_io_stream_query_info_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_io_stream_query_info_async(GFileIOStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_io_stream_query_info_async$handle() {
        return g_file_io_stream_query_info_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_io_stream_query_info_async(GFileIOStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_io_stream_query_info_async(MemorySegment stream, MemorySegment attributes, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_io_stream_query_info_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_io_stream_query_info_async", stream, attributes, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, attributes, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_io_stream_query_info_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_io_stream_query_info_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_io_stream_query_info_finish(GFileIOStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_io_stream_query_info_finish$descriptor() {
        return g_file_io_stream_query_info_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_io_stream_query_info_finish(GFileIOStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_io_stream_query_info_finish$handle() {
        return g_file_io_stream_query_info_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_io_stream_query_info_finish(GFileIOStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_file_io_stream_query_info_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_io_stream_query_info_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_io_stream_query_info_finish", stream, result, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_io_stream_get_etag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_io_stream_get_etag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_io_stream_get_etag(GFileIOStream *stream)
     * }
     */
    public static FunctionDescriptor g_file_io_stream_get_etag$descriptor() {
        return g_file_io_stream_get_etag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_io_stream_get_etag(GFileIOStream *stream)
     * }
     */
    public static MethodHandle g_file_io_stream_get_etag$handle() {
        return g_file_io_stream_get_etag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_io_stream_get_etag(GFileIOStream *stream)
     * }
     */
    public static MemorySegment g_file_io_stream_get_etag(MemorySegment stream) {
        var mh$ = g_file_io_stream_get_etag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_io_stream_get_etag", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_monitor_get_type()
     * }
     */
    public static FunctionDescriptor g_file_monitor_get_type$descriptor() {
        return g_file_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_monitor_get_type()
     * }
     */
    public static MethodHandle g_file_monitor_get_type$handle() {
        return g_file_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_monitor_get_type()
     * }
     */
    public static long g_file_monitor_get_type() {
        var mh$ = g_file_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_monitor_cancel(GFileMonitor *monitor)
     * }
     */
    public static FunctionDescriptor g_file_monitor_cancel$descriptor() {
        return g_file_monitor_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_monitor_cancel(GFileMonitor *monitor)
     * }
     */
    public static MethodHandle g_file_monitor_cancel$handle() {
        return g_file_monitor_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_monitor_cancel(GFileMonitor *monitor)
     * }
     */
    public static int g_file_monitor_cancel(MemorySegment monitor) {
        var mh$ = g_file_monitor_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_cancel", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_is_cancelled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_is_cancelled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_monitor_is_cancelled(GFileMonitor *monitor)
     * }
     */
    public static FunctionDescriptor g_file_monitor_is_cancelled$descriptor() {
        return g_file_monitor_is_cancelled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_monitor_is_cancelled(GFileMonitor *monitor)
     * }
     */
    public static MethodHandle g_file_monitor_is_cancelled$handle() {
        return g_file_monitor_is_cancelled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_monitor_is_cancelled(GFileMonitor *monitor)
     * }
     */
    public static int g_file_monitor_is_cancelled(MemorySegment monitor) {
        var mh$ = g_file_monitor_is_cancelled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_is_cancelled", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_set_rate_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_set_rate_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_monitor_set_rate_limit(GFileMonitor *monitor, gint limit_msecs)
     * }
     */
    public static FunctionDescriptor g_file_monitor_set_rate_limit$descriptor() {
        return g_file_monitor_set_rate_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_monitor_set_rate_limit(GFileMonitor *monitor, gint limit_msecs)
     * }
     */
    public static MethodHandle g_file_monitor_set_rate_limit$handle() {
        return g_file_monitor_set_rate_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_monitor_set_rate_limit(GFileMonitor *monitor, gint limit_msecs)
     * }
     */
    public static void g_file_monitor_set_rate_limit(MemorySegment monitor, int limit_msecs) {
        var mh$ = g_file_monitor_set_rate_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_set_rate_limit", monitor, limit_msecs);
            }
            mh$.invokeExact(monitor, limit_msecs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_emit_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_emit_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_monitor_emit_event(GFileMonitor *monitor, GFile *child, GFile *other_file, GFileMonitorEvent event_type)
     * }
     */
    public static FunctionDescriptor g_file_monitor_emit_event$descriptor() {
        return g_file_monitor_emit_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_monitor_emit_event(GFileMonitor *monitor, GFile *child, GFile *other_file, GFileMonitorEvent event_type)
     * }
     */
    public static MethodHandle g_file_monitor_emit_event$handle() {
        return g_file_monitor_emit_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_monitor_emit_event(GFileMonitor *monitor, GFile *child, GFile *other_file, GFileMonitorEvent event_type)
     * }
     */
    public static void g_file_monitor_emit_event(MemorySegment monitor, MemorySegment child, MemorySegment other_file, int event_type) {
        var mh$ = g_file_monitor_emit_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_emit_event", monitor, child, other_file, event_type);
            }
            mh$.invokeExact(monitor, child, other_file, event_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_completer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_completer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_filename_completer_get_type()
     * }
     */
    public static FunctionDescriptor g_filename_completer_get_type$descriptor() {
        return g_filename_completer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_filename_completer_get_type()
     * }
     */
    public static MethodHandle g_filename_completer_get_type$handle() {
        return g_filename_completer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_filename_completer_get_type()
     * }
     */
    public static long g_filename_completer_get_type() {
        var mh$ = g_filename_completer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_completer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_completer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_completer_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFilenameCompleter *g_filename_completer_new()
     * }
     */
    public static FunctionDescriptor g_filename_completer_new$descriptor() {
        return g_filename_completer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFilenameCompleter *g_filename_completer_new()
     * }
     */
    public static MethodHandle g_filename_completer_new$handle() {
        return g_filename_completer_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFilenameCompleter *g_filename_completer_new()
     * }
     */
    public static MemorySegment g_filename_completer_new() {
        var mh$ = g_filename_completer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_completer_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_completer_get_completion_suffix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_completer_get_completion_suffix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_filename_completer_get_completion_suffix(GFilenameCompleter *completer, const char *initial_text)
     * }
     */
    public static FunctionDescriptor g_filename_completer_get_completion_suffix$descriptor() {
        return g_filename_completer_get_completion_suffix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_filename_completer_get_completion_suffix(GFilenameCompleter *completer, const char *initial_text)
     * }
     */
    public static MethodHandle g_filename_completer_get_completion_suffix$handle() {
        return g_filename_completer_get_completion_suffix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_filename_completer_get_completion_suffix(GFilenameCompleter *completer, const char *initial_text)
     * }
     */
    public static MemorySegment g_filename_completer_get_completion_suffix(MemorySegment completer, MemorySegment initial_text) {
        var mh$ = g_filename_completer_get_completion_suffix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_completer_get_completion_suffix", completer, initial_text);
            }
            return (MemorySegment)mh$.invokeExact(completer, initial_text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_completer_get_completions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_completer_get_completions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_filename_completer_get_completions(GFilenameCompleter *completer, const char *initial_text)
     * }
     */
    public static FunctionDescriptor g_filename_completer_get_completions$descriptor() {
        return g_filename_completer_get_completions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_filename_completer_get_completions(GFilenameCompleter *completer, const char *initial_text)
     * }
     */
    public static MethodHandle g_filename_completer_get_completions$handle() {
        return g_filename_completer_get_completions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_filename_completer_get_completions(GFilenameCompleter *completer, const char *initial_text)
     * }
     */
    public static MemorySegment g_filename_completer_get_completions(MemorySegment completer, MemorySegment initial_text) {
        var mh$ = g_filename_completer_get_completions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_completer_get_completions", completer, initial_text);
            }
            return (MemorySegment)mh$.invokeExact(completer, initial_text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_completer_set_dirs_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_completer_set_dirs_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_filename_completer_set_dirs_only(GFilenameCompleter *completer, gboolean dirs_only)
     * }
     */
    public static FunctionDescriptor g_filename_completer_set_dirs_only$descriptor() {
        return g_filename_completer_set_dirs_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_filename_completer_set_dirs_only(GFilenameCompleter *completer, gboolean dirs_only)
     * }
     */
    public static MethodHandle g_filename_completer_set_dirs_only$handle() {
        return g_filename_completer_set_dirs_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_filename_completer_set_dirs_only(GFilenameCompleter *completer, gboolean dirs_only)
     * }
     */
    public static void g_filename_completer_set_dirs_only(MemorySegment completer, int dirs_only) {
        var mh$ = g_filename_completer_set_dirs_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_completer_set_dirs_only", completer, dirs_only);
            }
            mh$.invokeExact(completer, dirs_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_file_output_stream_get_type$descriptor() {
        return g_file_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_output_stream_get_type()
     * }
     */
    public static MethodHandle g_file_output_stream_get_type$handle() {
        return g_file_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_output_stream_get_type()
     * }
     */
    public static long g_file_output_stream_get_type() {
        var mh$ = g_file_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_output_stream_query_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_output_stream_query_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_output_stream_query_info(GFileOutputStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_output_stream_query_info$descriptor() {
        return g_file_output_stream_query_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_output_stream_query_info(GFileOutputStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_file_output_stream_query_info$handle() {
        return g_file_output_stream_query_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_output_stream_query_info(GFileOutputStream *stream, const char *attributes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_file_output_stream_query_info(MemorySegment stream, MemorySegment attributes, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_file_output_stream_query_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_output_stream_query_info", stream, attributes, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, attributes, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_output_stream_query_info_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_output_stream_query_info_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_file_output_stream_query_info_async(GFileOutputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_file_output_stream_query_info_async$descriptor() {
        return g_file_output_stream_query_info_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_file_output_stream_query_info_async(GFileOutputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_file_output_stream_query_info_async$handle() {
        return g_file_output_stream_query_info_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_file_output_stream_query_info_async(GFileOutputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_file_output_stream_query_info_async(MemorySegment stream, MemorySegment attributes, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_file_output_stream_query_info_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_output_stream_query_info_async", stream, attributes, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, attributes, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_output_stream_query_info_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_output_stream_query_info_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_output_stream_query_info_finish(GFileOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_output_stream_query_info_finish$descriptor() {
        return g_file_output_stream_query_info_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_file_output_stream_query_info_finish(GFileOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_file_output_stream_query_info_finish$handle() {
        return g_file_output_stream_query_info_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_file_output_stream_query_info_finish(GFileOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_file_output_stream_query_info_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_file_output_stream_query_info_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_output_stream_query_info_finish", stream, result, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_output_stream_get_etag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_output_stream_get_etag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_file_output_stream_get_etag(GFileOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_file_output_stream_get_etag$descriptor() {
        return g_file_output_stream_get_etag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_file_output_stream_get_etag(GFileOutputStream *stream)
     * }
     */
    public static MethodHandle g_file_output_stream_get_etag$handle() {
        return g_file_output_stream_get_etag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_file_output_stream_get_etag(GFileOutputStream *stream)
     * }
     */
    public static MemorySegment g_file_output_stream_get_etag(MemorySegment stream) {
        var mh$ = g_file_output_stream_get_etag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_output_stream_get_etag", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_inet_address_get_type()
     * }
     */
    public static FunctionDescriptor g_inet_address_get_type$descriptor() {
        return g_inet_address_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_inet_address_get_type()
     * }
     */
    public static MethodHandle g_inet_address_get_type$handle() {
        return g_inet_address_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_inet_address_get_type()
     * }
     */
    public static long g_inet_address_get_type() {
        var mh$ = g_inet_address_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_new_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_from_string(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_inet_address_new_from_string$descriptor() {
        return g_inet_address_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_from_string(const gchar *string)
     * }
     */
    public static MethodHandle g_inet_address_new_from_string$handle() {
        return g_inet_address_new_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_from_string(const gchar *string)
     * }
     */
    public static MemorySegment g_inet_address_new_from_string(MemorySegment string) {
        var mh$ = g_inet_address_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_new_from_string", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_new_from_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_new_from_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_from_bytes(const guint8 *bytes, GSocketFamily family)
     * }
     */
    public static FunctionDescriptor g_inet_address_new_from_bytes$descriptor() {
        return g_inet_address_new_from_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_from_bytes(const guint8 *bytes, GSocketFamily family)
     * }
     */
    public static MethodHandle g_inet_address_new_from_bytes$handle() {
        return g_inet_address_new_from_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_from_bytes(const guint8 *bytes, GSocketFamily family)
     * }
     */
    public static MemorySegment g_inet_address_new_from_bytes(MemorySegment bytes, int family) {
        var mh$ = g_inet_address_new_from_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_new_from_bytes", bytes, family);
            }
            return (MemorySegment)mh$.invokeExact(bytes, family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_new_loopback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_new_loopback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_loopback(GSocketFamily family)
     * }
     */
    public static FunctionDescriptor g_inet_address_new_loopback$descriptor() {
        return g_inet_address_new_loopback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_loopback(GSocketFamily family)
     * }
     */
    public static MethodHandle g_inet_address_new_loopback$handle() {
        return g_inet_address_new_loopback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_loopback(GSocketFamily family)
     * }
     */
    public static MemorySegment g_inet_address_new_loopback(int family) {
        var mh$ = g_inet_address_new_loopback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_new_loopback", family);
            }
            return (MemorySegment)mh$.invokeExact(family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_new_any {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_new_any"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_any(GSocketFamily family)
     * }
     */
    public static FunctionDescriptor g_inet_address_new_any$descriptor() {
        return g_inet_address_new_any.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_any(GSocketFamily family)
     * }
     */
    public static MethodHandle g_inet_address_new_any$handle() {
        return g_inet_address_new_any.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_new_any(GSocketFamily family)
     * }
     */
    public static MemorySegment g_inet_address_new_any(int family) {
        var mh$ = g_inet_address_new_any.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_new_any", family);
            }
            return (MemorySegment)mh$.invokeExact(family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_equal(GInetAddress *address, GInetAddress *other_address)
     * }
     */
    public static FunctionDescriptor g_inet_address_equal$descriptor() {
        return g_inet_address_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_equal(GInetAddress *address, GInetAddress *other_address)
     * }
     */
    public static MethodHandle g_inet_address_equal$handle() {
        return g_inet_address_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_equal(GInetAddress *address, GInetAddress *other_address)
     * }
     */
    public static int g_inet_address_equal(MemorySegment address, MemorySegment other_address) {
        var mh$ = g_inet_address_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_equal", address, other_address);
            }
            return (int)mh$.invokeExact(address, other_address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_inet_address_to_string(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_to_string$descriptor() {
        return g_inet_address_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_inet_address_to_string(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_to_string$handle() {
        return g_inet_address_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_inet_address_to_string(GInetAddress *address)
     * }
     */
    public static MemorySegment g_inet_address_to_string(MemorySegment address) {
        var mh$ = g_inet_address_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_to_string", address);
            }
            return (MemorySegment)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_to_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_to_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const guint8 *g_inet_address_to_bytes(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_to_bytes$descriptor() {
        return g_inet_address_to_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const guint8 *g_inet_address_to_bytes(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_to_bytes$handle() {
        return g_inet_address_to_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const guint8 *g_inet_address_to_bytes(GInetAddress *address)
     * }
     */
    public static MemorySegment g_inet_address_to_bytes(MemorySegment address) {
        var mh$ = g_inet_address_to_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_to_bytes", address);
            }
            return (MemorySegment)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_native_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_native_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_inet_address_get_native_size(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_native_size$descriptor() {
        return g_inet_address_get_native_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_inet_address_get_native_size(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_native_size$handle() {
        return g_inet_address_get_native_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_inet_address_get_native_size(GInetAddress *address)
     * }
     */
    public static long g_inet_address_get_native_size(MemorySegment address) {
        var mh$ = g_inet_address_get_native_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_native_size", address);
            }
            return (long)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketFamily g_inet_address_get_family(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_family$descriptor() {
        return g_inet_address_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketFamily g_inet_address_get_family(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_family$handle() {
        return g_inet_address_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketFamily g_inet_address_get_family(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_family(MemorySegment address) {
        var mh$ = g_inet_address_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_family", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_any {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_any"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_any(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_any$descriptor() {
        return g_inet_address_get_is_any.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_any(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_any$handle() {
        return g_inet_address_get_is_any.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_any(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_any(MemorySegment address) {
        var mh$ = g_inet_address_get_is_any.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_any", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_loopback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_loopback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_loopback(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_loopback$descriptor() {
        return g_inet_address_get_is_loopback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_loopback(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_loopback$handle() {
        return g_inet_address_get_is_loopback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_loopback(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_loopback(MemorySegment address) {
        var mh$ = g_inet_address_get_is_loopback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_loopback", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_link_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_link_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_link_local(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_link_local$descriptor() {
        return g_inet_address_get_is_link_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_link_local(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_link_local$handle() {
        return g_inet_address_get_is_link_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_link_local(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_link_local(MemorySegment address) {
        var mh$ = g_inet_address_get_is_link_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_link_local", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_site_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_site_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_site_local(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_site_local$descriptor() {
        return g_inet_address_get_is_site_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_site_local(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_site_local$handle() {
        return g_inet_address_get_is_site_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_site_local(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_site_local(MemorySegment address) {
        var mh$ = g_inet_address_get_is_site_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_site_local", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_multicast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_multicast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_multicast(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_multicast$descriptor() {
        return g_inet_address_get_is_multicast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_multicast(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_multicast$handle() {
        return g_inet_address_get_is_multicast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_multicast(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_multicast(MemorySegment address) {
        var mh$ = g_inet_address_get_is_multicast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_multicast", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_mc_global {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_mc_global"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_global(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_mc_global$descriptor() {
        return g_inet_address_get_is_mc_global.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_global(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_mc_global$handle() {
        return g_inet_address_get_is_mc_global.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_global(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_mc_global(MemorySegment address) {
        var mh$ = g_inet_address_get_is_mc_global.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_mc_global", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_mc_link_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_mc_link_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_link_local(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_mc_link_local$descriptor() {
        return g_inet_address_get_is_mc_link_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_link_local(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_mc_link_local$handle() {
        return g_inet_address_get_is_mc_link_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_link_local(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_mc_link_local(MemorySegment address) {
        var mh$ = g_inet_address_get_is_mc_link_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_mc_link_local", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_mc_node_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_mc_node_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_node_local(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_mc_node_local$descriptor() {
        return g_inet_address_get_is_mc_node_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_node_local(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_mc_node_local$handle() {
        return g_inet_address_get_is_mc_node_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_node_local(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_mc_node_local(MemorySegment address) {
        var mh$ = g_inet_address_get_is_mc_node_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_mc_node_local", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_mc_org_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_mc_org_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_org_local(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_mc_org_local$descriptor() {
        return g_inet_address_get_is_mc_org_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_org_local(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_mc_org_local$handle() {
        return g_inet_address_get_is_mc_org_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_org_local(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_mc_org_local(MemorySegment address) {
        var mh$ = g_inet_address_get_is_mc_org_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_mc_org_local", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_get_is_mc_site_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_get_is_mc_site_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_site_local(GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_get_is_mc_site_local$descriptor() {
        return g_inet_address_get_is_mc_site_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_site_local(GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_get_is_mc_site_local$handle() {
        return g_inet_address_get_is_mc_site_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_get_is_mc_site_local(GInetAddress *address)
     * }
     */
    public static int g_inet_address_get_is_mc_site_local(MemorySegment address) {
        var mh$ = g_inet_address_get_is_mc_site_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_get_is_mc_site_local", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_inet_address_mask_get_type()
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_get_type$descriptor() {
        return g_inet_address_mask_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_inet_address_mask_get_type()
     * }
     */
    public static MethodHandle g_inet_address_mask_get_type$handle() {
        return g_inet_address_mask_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_inet_address_mask_get_type()
     * }
     */
    public static long g_inet_address_mask_get_type() {
        var mh$ = g_inet_address_mask_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddressMask *g_inet_address_mask_new(GInetAddress *addr, guint length, GError **error)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_new$descriptor() {
        return g_inet_address_mask_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddressMask *g_inet_address_mask_new(GInetAddress *addr, guint length, GError **error)
     * }
     */
    public static MethodHandle g_inet_address_mask_new$handle() {
        return g_inet_address_mask_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddressMask *g_inet_address_mask_new(GInetAddress *addr, guint length, GError **error)
     * }
     */
    public static MemorySegment g_inet_address_mask_new(MemorySegment addr, int length, MemorySegment error) {
        var mh$ = g_inet_address_mask_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_new", addr, length, error);
            }
            return (MemorySegment)mh$.invokeExact(addr, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_new_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddressMask *g_inet_address_mask_new_from_string(const gchar *mask_string, GError **error)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_new_from_string$descriptor() {
        return g_inet_address_mask_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddressMask *g_inet_address_mask_new_from_string(const gchar *mask_string, GError **error)
     * }
     */
    public static MethodHandle g_inet_address_mask_new_from_string$handle() {
        return g_inet_address_mask_new_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddressMask *g_inet_address_mask_new_from_string(const gchar *mask_string, GError **error)
     * }
     */
    public static MemorySegment g_inet_address_mask_new_from_string(MemorySegment mask_string, MemorySegment error) {
        var mh$ = g_inet_address_mask_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_new_from_string", mask_string, error);
            }
            return (MemorySegment)mh$.invokeExact(mask_string, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_inet_address_mask_to_string(GInetAddressMask *mask)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_to_string$descriptor() {
        return g_inet_address_mask_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_inet_address_mask_to_string(GInetAddressMask *mask)
     * }
     */
    public static MethodHandle g_inet_address_mask_to_string$handle() {
        return g_inet_address_mask_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_inet_address_mask_to_string(GInetAddressMask *mask)
     * }
     */
    public static MemorySegment g_inet_address_mask_to_string(MemorySegment mask) {
        var mh$ = g_inet_address_mask_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_to_string", mask);
            }
            return (MemorySegment)mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketFamily g_inet_address_mask_get_family(GInetAddressMask *mask)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_get_family$descriptor() {
        return g_inet_address_mask_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketFamily g_inet_address_mask_get_family(GInetAddressMask *mask)
     * }
     */
    public static MethodHandle g_inet_address_mask_get_family$handle() {
        return g_inet_address_mask_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketFamily g_inet_address_mask_get_family(GInetAddressMask *mask)
     * }
     */
    public static int g_inet_address_mask_get_family(MemorySegment mask) {
        var mh$ = g_inet_address_mask_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_get_family", mask);
            }
            return (int)mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_get_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_get_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_mask_get_address(GInetAddressMask *mask)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_get_address$descriptor() {
        return g_inet_address_mask_get_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_mask_get_address(GInetAddressMask *mask)
     * }
     */
    public static MethodHandle g_inet_address_mask_get_address$handle() {
        return g_inet_address_mask_get_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_address_mask_get_address(GInetAddressMask *mask)
     * }
     */
    public static MemorySegment g_inet_address_mask_get_address(MemorySegment mask) {
        var mh$ = g_inet_address_mask_get_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_get_address", mask);
            }
            return (MemorySegment)mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_inet_address_mask_get_length(GInetAddressMask *mask)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_get_length$descriptor() {
        return g_inet_address_mask_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_inet_address_mask_get_length(GInetAddressMask *mask)
     * }
     */
    public static MethodHandle g_inet_address_mask_get_length$handle() {
        return g_inet_address_mask_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_inet_address_mask_get_length(GInetAddressMask *mask)
     * }
     */
    public static int g_inet_address_mask_get_length(MemorySegment mask) {
        var mh$ = g_inet_address_mask_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_get_length", mask);
            }
            return (int)mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_matches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_matches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_mask_matches(GInetAddressMask *mask, GInetAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_matches$descriptor() {
        return g_inet_address_mask_matches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_mask_matches(GInetAddressMask *mask, GInetAddress *address)
     * }
     */
    public static MethodHandle g_inet_address_mask_matches$handle() {
        return g_inet_address_mask_matches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_mask_matches(GInetAddressMask *mask, GInetAddress *address)
     * }
     */
    public static int g_inet_address_mask_matches(MemorySegment mask, MemorySegment address) {
        var mh$ = g_inet_address_mask_matches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_matches", mask, address);
            }
            return (int)mh$.invokeExact(mask, address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_address_mask_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_address_mask_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_mask_equal(GInetAddressMask *mask, GInetAddressMask *mask2)
     * }
     */
    public static FunctionDescriptor g_inet_address_mask_equal$descriptor() {
        return g_inet_address_mask_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_inet_address_mask_equal(GInetAddressMask *mask, GInetAddressMask *mask2)
     * }
     */
    public static MethodHandle g_inet_address_mask_equal$handle() {
        return g_inet_address_mask_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_inet_address_mask_equal(GInetAddressMask *mask, GInetAddressMask *mask2)
     * }
     */
    public static int g_inet_address_mask_equal(MemorySegment mask, MemorySegment mask2) {
        var mh$ = g_inet_address_mask_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_address_mask_equal", mask, mask2);
            }
            return (int)mh$.invokeExact(mask, mask2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_address_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_address_get_type$descriptor() {
        return g_socket_address_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_address_get_type()
     * }
     */
    public static MethodHandle g_socket_address_get_type$handle() {
        return g_socket_address_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_address_get_type()
     * }
     */
    public static long g_socket_address_get_type() {
        var mh$ = g_socket_address_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_address_get_family(GSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_socket_address_get_family$descriptor() {
        return g_socket_address_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_address_get_family(GSocketAddress *address)
     * }
     */
    public static MethodHandle g_socket_address_get_family$handle() {
        return g_socket_address_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_address_get_family(GSocketAddress *address)
     * }
     */
    public static int g_socket_address_get_family(MemorySegment address) {
        var mh$ = g_socket_address_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_get_family", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_new_from_native {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_new_from_native"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_new_from_native(gpointer native, gsize len)
     * }
     */
    public static FunctionDescriptor g_socket_address_new_from_native$descriptor() {
        return g_socket_address_new_from_native.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_new_from_native(gpointer native, gsize len)
     * }
     */
    public static MethodHandle g_socket_address_new_from_native$handle() {
        return g_socket_address_new_from_native.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_new_from_native(gpointer native, gsize len)
     * }
     */
    public static MemorySegment g_socket_address_new_from_native(MemorySegment native_, long len) {
        var mh$ = g_socket_address_new_from_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_new_from_native", native_, len);
            }
            return (MemorySegment)mh$.invokeExact(native_, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_to_native {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_to_native"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_address_to_native(GSocketAddress *address, gpointer dest, gsize destlen, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_address_to_native$descriptor() {
        return g_socket_address_to_native.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_address_to_native(GSocketAddress *address, gpointer dest, gsize destlen, GError **error)
     * }
     */
    public static MethodHandle g_socket_address_to_native$handle() {
        return g_socket_address_to_native.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_address_to_native(GSocketAddress *address, gpointer dest, gsize destlen, GError **error)
     * }
     */
    public static int g_socket_address_to_native(MemorySegment address, MemorySegment dest, long destlen, MemorySegment error) {
        var mh$ = g_socket_address_to_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_to_native", address, dest, destlen, error);
            }
            return (int)mh$.invokeExact(address, dest, destlen, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_get_native_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_get_native_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_address_get_native_size(GSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_socket_address_get_native_size$descriptor() {
        return g_socket_address_get_native_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_address_get_native_size(GSocketAddress *address)
     * }
     */
    public static MethodHandle g_socket_address_get_native_size$handle() {
        return g_socket_address_get_native_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_address_get_native_size(GSocketAddress *address)
     * }
     */
    public static long g_socket_address_get_native_size(MemorySegment address) {
        var mh$ = g_socket_address_get_native_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_get_native_size", address);
            }
            return (long)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_socket_address_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_socket_address_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_inet_socket_address_get_type()
     * }
     */
    public static FunctionDescriptor g_inet_socket_address_get_type$descriptor() {
        return g_inet_socket_address_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_inet_socket_address_get_type()
     * }
     */
    public static MethodHandle g_inet_socket_address_get_type$handle() {
        return g_inet_socket_address_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_inet_socket_address_get_type()
     * }
     */
    public static long g_inet_socket_address_get_type() {
        var mh$ = g_inet_socket_address_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_socket_address_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_socket_address_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_socket_address_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_inet_socket_address_new(GInetAddress *address, guint16 port)
     * }
     */
    public static FunctionDescriptor g_inet_socket_address_new$descriptor() {
        return g_inet_socket_address_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_inet_socket_address_new(GInetAddress *address, guint16 port)
     * }
     */
    public static MethodHandle g_inet_socket_address_new$handle() {
        return g_inet_socket_address_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_inet_socket_address_new(GInetAddress *address, guint16 port)
     * }
     */
    public static MemorySegment g_inet_socket_address_new(MemorySegment address, short port) {
        var mh$ = g_inet_socket_address_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_socket_address_new", address, port);
            }
            return (MemorySegment)mh$.invokeExact(address, port);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_socket_address_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_socket_address_new_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_inet_socket_address_new_from_string(const char *address, guint port)
     * }
     */
    public static FunctionDescriptor g_inet_socket_address_new_from_string$descriptor() {
        return g_inet_socket_address_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_inet_socket_address_new_from_string(const char *address, guint port)
     * }
     */
    public static MethodHandle g_inet_socket_address_new_from_string$handle() {
        return g_inet_socket_address_new_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_inet_socket_address_new_from_string(const char *address, guint port)
     * }
     */
    public static MemorySegment g_inet_socket_address_new_from_string(MemorySegment address, int port) {
        var mh$ = g_inet_socket_address_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_socket_address_new_from_string", address, port);
            }
            return (MemorySegment)mh$.invokeExact(address, port);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_socket_address_get_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_socket_address_get_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_socket_address_get_address(GInetSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_socket_address_get_address$descriptor() {
        return g_inet_socket_address_get_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_socket_address_get_address(GInetSocketAddress *address)
     * }
     */
    public static MethodHandle g_inet_socket_address_get_address$handle() {
        return g_inet_socket_address_get_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInetAddress *g_inet_socket_address_get_address(GInetSocketAddress *address)
     * }
     */
    public static MemorySegment g_inet_socket_address_get_address(MemorySegment address) {
        var mh$ = g_inet_socket_address_get_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_socket_address_get_address", address);
            }
            return (MemorySegment)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_socket_address_get_port {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_socket_address_get_port"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_inet_socket_address_get_port(GInetSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_socket_address_get_port$descriptor() {
        return g_inet_socket_address_get_port.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_inet_socket_address_get_port(GInetSocketAddress *address)
     * }
     */
    public static MethodHandle g_inet_socket_address_get_port$handle() {
        return g_inet_socket_address_get_port.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_inet_socket_address_get_port(GInetSocketAddress *address)
     * }
     */
    public static short g_inet_socket_address_get_port(MemorySegment address) {
        var mh$ = g_inet_socket_address_get_port.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_socket_address_get_port", address);
            }
            return (short)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_socket_address_get_flowinfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_socket_address_get_flowinfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_inet_socket_address_get_flowinfo(GInetSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_socket_address_get_flowinfo$descriptor() {
        return g_inet_socket_address_get_flowinfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_inet_socket_address_get_flowinfo(GInetSocketAddress *address)
     * }
     */
    public static MethodHandle g_inet_socket_address_get_flowinfo$handle() {
        return g_inet_socket_address_get_flowinfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_inet_socket_address_get_flowinfo(GInetSocketAddress *address)
     * }
     */
    public static int g_inet_socket_address_get_flowinfo(MemorySegment address) {
        var mh$ = g_inet_socket_address_get_flowinfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_socket_address_get_flowinfo", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_inet_socket_address_get_scope_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_inet_socket_address_get_scope_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_inet_socket_address_get_scope_id(GInetSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_inet_socket_address_get_scope_id$descriptor() {
        return g_inet_socket_address_get_scope_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_inet_socket_address_get_scope_id(GInetSocketAddress *address)
     * }
     */
    public static MethodHandle g_inet_socket_address_get_scope_id$handle() {
        return g_inet_socket_address_get_scope_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_inet_socket_address_get_scope_id(GInetSocketAddress *address)
     * }
     */
    public static int g_inet_socket_address_get_scope_id(MemorySegment address) {
        var mh$ = g_inet_socket_address_get_scope_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_inet_socket_address_get_scope_id", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_create_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_create_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_app_info_create_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_app_info_create_flags_get_type$descriptor() {
        return g_app_info_create_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_app_info_create_flags_get_type()
     * }
     */
    public static MethodHandle g_app_info_create_flags_get_type$handle() {
        return g_app_info_create_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_app_info_create_flags_get_type()
     * }
     */
    public static long g_app_info_create_flags_get_type() {
        var mh$ = g_app_info_create_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_create_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_converter_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_converter_flags_get_type$descriptor() {
        return g_converter_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_converter_flags_get_type()
     * }
     */
    public static MethodHandle g_converter_flags_get_type$handle() {
        return g_converter_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_converter_flags_get_type()
     * }
     */
    public static long g_converter_flags_get_type() {
        var mh$ = g_converter_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_result_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_result_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_converter_result_get_type()
     * }
     */
    public static FunctionDescriptor g_converter_result_get_type$descriptor() {
        return g_converter_result_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_converter_result_get_type()
     * }
     */
    public static MethodHandle g_converter_result_get_type$handle() {
        return g_converter_result_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_converter_result_get_type()
     * }
     */
    public static long g_converter_result_get_type() {
        var mh$ = g_converter_result_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_result_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_stream_byte_order_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_stream_byte_order_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_data_stream_byte_order_get_type()
     * }
     */
    public static FunctionDescriptor g_data_stream_byte_order_get_type$descriptor() {
        return g_data_stream_byte_order_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_data_stream_byte_order_get_type()
     * }
     */
    public static MethodHandle g_data_stream_byte_order_get_type$handle() {
        return g_data_stream_byte_order_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_data_stream_byte_order_get_type()
     * }
     */
    public static long g_data_stream_byte_order_get_type() {
        var mh$ = g_data_stream_byte_order_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_stream_byte_order_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_stream_newline_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_stream_newline_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_data_stream_newline_type_get_type()
     * }
     */
    public static FunctionDescriptor g_data_stream_newline_type_get_type$descriptor() {
        return g_data_stream_newline_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_data_stream_newline_type_get_type()
     * }
     */
    public static MethodHandle g_data_stream_newline_type_get_type$handle() {
        return g_data_stream_newline_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_data_stream_newline_type_get_type()
     * }
     */
    public static long g_data_stream_newline_type_get_type() {
        var mh$ = g_data_stream_newline_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_stream_newline_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_type_get_type()
     * }
     */
    public static FunctionDescriptor g_file_attribute_type_get_type$descriptor() {
        return g_file_attribute_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_type_get_type()
     * }
     */
    public static MethodHandle g_file_attribute_type_get_type$handle() {
        return g_file_attribute_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_attribute_type_get_type()
     * }
     */
    public static long g_file_attribute_type_get_type() {
        var mh$ = g_file_attribute_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_info_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_info_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_info_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_file_attribute_info_flags_get_type$descriptor() {
        return g_file_attribute_info_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_info_flags_get_type()
     * }
     */
    public static MethodHandle g_file_attribute_info_flags_get_type$handle() {
        return g_file_attribute_info_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_attribute_info_flags_get_type()
     * }
     */
    public static long g_file_attribute_info_flags_get_type() {
        var mh$ = g_file_attribute_info_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_info_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_attribute_status_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_attribute_status_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_status_get_type()
     * }
     */
    public static FunctionDescriptor g_file_attribute_status_get_type$descriptor() {
        return g_file_attribute_status_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_attribute_status_get_type()
     * }
     */
    public static MethodHandle g_file_attribute_status_get_type$handle() {
        return g_file_attribute_status_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_attribute_status_get_type()
     * }
     */
    public static long g_file_attribute_status_get_type() {
        var mh$ = g_file_attribute_status_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_attribute_status_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_query_info_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_query_info_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_query_info_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_file_query_info_flags_get_type$descriptor() {
        return g_file_query_info_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_query_info_flags_get_type()
     * }
     */
    public static MethodHandle g_file_query_info_flags_get_type$handle() {
        return g_file_query_info_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_query_info_flags_get_type()
     * }
     */
    public static long g_file_query_info_flags_get_type() {
        var mh$ = g_file_query_info_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_query_info_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_create_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_create_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_create_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_file_create_flags_get_type$descriptor() {
        return g_file_create_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_create_flags_get_type()
     * }
     */
    public static MethodHandle g_file_create_flags_get_type$handle() {
        return g_file_create_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_create_flags_get_type()
     * }
     */
    public static long g_file_create_flags_get_type() {
        var mh$ = g_file_create_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_create_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_measure_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_measure_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_measure_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_file_measure_flags_get_type$descriptor() {
        return g_file_measure_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_measure_flags_get_type()
     * }
     */
    public static MethodHandle g_file_measure_flags_get_type$handle() {
        return g_file_measure_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_measure_flags_get_type()
     * }
     */
    public static long g_file_measure_flags_get_type() {
        var mh$ = g_file_measure_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_measure_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_mount_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_mount_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_mount_mount_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_mount_mount_flags_get_type$descriptor() {
        return g_mount_mount_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_mount_mount_flags_get_type()
     * }
     */
    public static MethodHandle g_mount_mount_flags_get_type$handle() {
        return g_mount_mount_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_mount_mount_flags_get_type()
     * }
     */
    public static long g_mount_mount_flags_get_type() {
        var mh$ = g_mount_mount_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_mount_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_unmount_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_unmount_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_mount_unmount_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_mount_unmount_flags_get_type$descriptor() {
        return g_mount_unmount_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_mount_unmount_flags_get_type()
     * }
     */
    public static MethodHandle g_mount_unmount_flags_get_type$handle() {
        return g_mount_unmount_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_mount_unmount_flags_get_type()
     * }
     */
    public static long g_mount_unmount_flags_get_type() {
        var mh$ = g_mount_unmount_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_unmount_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_start_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_start_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_drive_start_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_drive_start_flags_get_type$descriptor() {
        return g_drive_start_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_drive_start_flags_get_type()
     * }
     */
    public static MethodHandle g_drive_start_flags_get_type$handle() {
        return g_drive_start_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_drive_start_flags_get_type()
     * }
     */
    public static long g_drive_start_flags_get_type() {
        var mh$ = g_drive_start_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_start_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_drive_start_stop_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_drive_start_stop_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_drive_start_stop_type_get_type()
     * }
     */
    public static FunctionDescriptor g_drive_start_stop_type_get_type$descriptor() {
        return g_drive_start_stop_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_drive_start_stop_type_get_type()
     * }
     */
    public static MethodHandle g_drive_start_stop_type_get_type$handle() {
        return g_drive_start_stop_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_drive_start_stop_type_get_type()
     * }
     */
    public static long g_drive_start_stop_type_get_type() {
        var mh$ = g_drive_start_stop_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_drive_start_stop_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_copy_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_copy_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_copy_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_file_copy_flags_get_type$descriptor() {
        return g_file_copy_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_copy_flags_get_type()
     * }
     */
    public static MethodHandle g_file_copy_flags_get_type$handle() {
        return g_file_copy_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_copy_flags_get_type()
     * }
     */
    public static long g_file_copy_flags_get_type() {
        var mh$ = g_file_copy_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_copy_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_monitor_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_file_monitor_flags_get_type$descriptor() {
        return g_file_monitor_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_monitor_flags_get_type()
     * }
     */
    public static MethodHandle g_file_monitor_flags_get_type$handle() {
        return g_file_monitor_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_monitor_flags_get_type()
     * }
     */
    public static long g_file_monitor_flags_get_type() {
        var mh$ = g_file_monitor_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_type_get_type()
     * }
     */
    public static FunctionDescriptor g_file_type_get_type$descriptor() {
        return g_file_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_type_get_type()
     * }
     */
    public static MethodHandle g_file_type_get_type$handle() {
        return g_file_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_type_get_type()
     * }
     */
    public static long g_file_type_get_type() {
        var mh$ = g_file_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filesystem_preview_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filesystem_preview_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_filesystem_preview_type_get_type()
     * }
     */
    public static FunctionDescriptor g_filesystem_preview_type_get_type$descriptor() {
        return g_filesystem_preview_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_filesystem_preview_type_get_type()
     * }
     */
    public static MethodHandle g_filesystem_preview_type_get_type$handle() {
        return g_filesystem_preview_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_filesystem_preview_type_get_type()
     * }
     */
    public static long g_filesystem_preview_type_get_type() {
        var mh$ = g_filesystem_preview_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filesystem_preview_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_monitor_event_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_monitor_event_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_file_monitor_event_get_type()
     * }
     */
    public static FunctionDescriptor g_file_monitor_event_get_type$descriptor() {
        return g_file_monitor_event_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_file_monitor_event_get_type()
     * }
     */
    public static MethodHandle g_file_monitor_event_get_type$handle() {
        return g_file_monitor_event_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_file_monitor_event_get_type()
     * }
     */
    public static long g_file_monitor_event_get_type() {
        var mh$ = g_file_monitor_event_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_monitor_event_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_error_enum_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_error_enum_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_error_enum_get_type()
     * }
     */
    public static FunctionDescriptor g_io_error_enum_get_type$descriptor() {
        return g_io_error_enum_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_error_enum_get_type()
     * }
     */
    public static MethodHandle g_io_error_enum_get_type$handle() {
        return g_io_error_enum_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_error_enum_get_type()
     * }
     */
    public static long g_io_error_enum_get_type() {
        var mh$ = g_io_error_enum_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_error_enum_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ask_password_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ask_password_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_ask_password_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_ask_password_flags_get_type$descriptor() {
        return g_ask_password_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_ask_password_flags_get_type()
     * }
     */
    public static MethodHandle g_ask_password_flags_get_type$handle() {
        return g_ask_password_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_ask_password_flags_get_type()
     * }
     */
    public static long g_ask_password_flags_get_type() {
        var mh$ = g_ask_password_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ask_password_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_password_save_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_password_save_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_password_save_get_type()
     * }
     */
    public static FunctionDescriptor g_password_save_get_type$descriptor() {
        return g_password_save_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_password_save_get_type()
     * }
     */
    public static MethodHandle g_password_save_get_type$handle() {
        return g_password_save_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_password_save_get_type()
     * }
     */
    public static long g_password_save_get_type() {
        var mh$ = g_password_save_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_password_save_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_result_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_result_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_mount_operation_result_get_type()
     * }
     */
    public static FunctionDescriptor g_mount_operation_result_get_type$descriptor() {
        return g_mount_operation_result_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_mount_operation_result_get_type()
     * }
     */
    public static MethodHandle g_mount_operation_result_get_type$handle() {
        return g_mount_operation_result_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_mount_operation_result_get_type()
     * }
     */
    public static long g_mount_operation_result_get_type() {
        var mh$ = g_mount_operation_result_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_result_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_splice_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_splice_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_output_stream_splice_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_output_stream_splice_flags_get_type$descriptor() {
        return g_output_stream_splice_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_output_stream_splice_flags_get_type()
     * }
     */
    public static MethodHandle g_output_stream_splice_flags_get_type$handle() {
        return g_output_stream_splice_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_output_stream_splice_flags_get_type()
     * }
     */
    public static long g_output_stream_splice_flags_get_type() {
        var mh$ = g_output_stream_splice_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_splice_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_stream_splice_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_stream_splice_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_stream_splice_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_io_stream_splice_flags_get_type$descriptor() {
        return g_io_stream_splice_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_stream_splice_flags_get_type()
     * }
     */
    public static MethodHandle g_io_stream_splice_flags_get_type$handle() {
        return g_io_stream_splice_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_stream_splice_flags_get_type()
     * }
     */
    public static long g_io_stream_splice_flags_get_type() {
        var mh$ = g_io_stream_splice_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_stream_splice_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_emblem_origin_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_emblem_origin_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_emblem_origin_get_type()
     * }
     */
    public static FunctionDescriptor g_emblem_origin_get_type$descriptor() {
        return g_emblem_origin_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_emblem_origin_get_type()
     * }
     */
    public static MethodHandle g_emblem_origin_get_type$handle() {
        return g_emblem_origin_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_emblem_origin_get_type()
     * }
     */
    public static long g_emblem_origin_get_type() {
        var mh$ = g_emblem_origin_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_emblem_origin_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resolver_error_get_type()
     * }
     */
    public static FunctionDescriptor g_resolver_error_get_type$descriptor() {
        return g_resolver_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resolver_error_get_type()
     * }
     */
    public static MethodHandle g_resolver_error_get_type$handle() {
        return g_resolver_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resolver_error_get_type()
     * }
     */
    public static long g_resolver_error_get_type() {
        var mh$ = g_resolver_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_record_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_record_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resolver_record_type_get_type()
     * }
     */
    public static FunctionDescriptor g_resolver_record_type_get_type$descriptor() {
        return g_resolver_record_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resolver_record_type_get_type()
     * }
     */
    public static MethodHandle g_resolver_record_type_get_type$handle() {
        return g_resolver_record_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resolver_record_type_get_type()
     * }
     */
    public static long g_resolver_record_type_get_type() {
        var mh$ = g_resolver_record_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_record_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resource_error_get_type()
     * }
     */
    public static FunctionDescriptor g_resource_error_get_type$descriptor() {
        return g_resource_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resource_error_get_type()
     * }
     */
    public static MethodHandle g_resource_error_get_type$handle() {
        return g_resource_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resource_error_get_type()
     * }
     */
    public static long g_resource_error_get_type() {
        var mh$ = g_resource_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resource_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_resource_flags_get_type$descriptor() {
        return g_resource_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resource_flags_get_type()
     * }
     */
    public static MethodHandle g_resource_flags_get_type$handle() {
        return g_resource_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resource_flags_get_type()
     * }
     */
    public static long g_resource_flags_get_type() {
        var mh$ = g_resource_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_lookup_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_lookup_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resource_lookup_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_resource_lookup_flags_get_type$descriptor() {
        return g_resource_lookup_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resource_lookup_flags_get_type()
     * }
     */
    public static MethodHandle g_resource_lookup_flags_get_type$handle() {
        return g_resource_lookup_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resource_lookup_flags_get_type()
     * }
     */
    public static long g_resource_lookup_flags_get_type() {
        var mh$ = g_resource_lookup_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_lookup_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_family_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_family_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_family_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_family_get_type$descriptor() {
        return g_socket_family_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_family_get_type()
     * }
     */
    public static MethodHandle g_socket_family_get_type$handle() {
        return g_socket_family_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_family_get_type()
     * }
     */
    public static long g_socket_family_get_type() {
        var mh$ = g_socket_family_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_family_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_type_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_type_get_type$descriptor() {
        return g_socket_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_type_get_type()
     * }
     */
    public static MethodHandle g_socket_type_get_type$handle() {
        return g_socket_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_type_get_type()
     * }
     */
    public static long g_socket_type_get_type() {
        var mh$ = g_socket_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_msg_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_msg_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_msg_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_msg_flags_get_type$descriptor() {
        return g_socket_msg_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_msg_flags_get_type()
     * }
     */
    public static MethodHandle g_socket_msg_flags_get_type$handle() {
        return g_socket_msg_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_msg_flags_get_type()
     * }
     */
    public static long g_socket_msg_flags_get_type() {
        var mh$ = g_socket_msg_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_msg_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_protocol_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_protocol_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_protocol_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_protocol_get_type$descriptor() {
        return g_socket_protocol_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_protocol_get_type()
     * }
     */
    public static MethodHandle g_socket_protocol_get_type$handle() {
        return g_socket_protocol_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_protocol_get_type()
     * }
     */
    public static long g_socket_protocol_get_type() {
        var mh$ = g_socket_protocol_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_protocol_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_compressor_format_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_compressor_format_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_zlib_compressor_format_get_type()
     * }
     */
    public static FunctionDescriptor g_zlib_compressor_format_get_type$descriptor() {
        return g_zlib_compressor_format_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_zlib_compressor_format_get_type()
     * }
     */
    public static MethodHandle g_zlib_compressor_format_get_type$handle() {
        return g_zlib_compressor_format_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_zlib_compressor_format_get_type()
     * }
     */
    public static long g_zlib_compressor_format_get_type() {
        var mh$ = g_zlib_compressor_format_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_compressor_format_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unix_socket_address_type_get_type()
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_type_get_type$descriptor() {
        return g_unix_socket_address_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unix_socket_address_type_get_type()
     * }
     */
    public static MethodHandle g_unix_socket_address_type_get_type$handle() {
        return g_unix_socket_address_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unix_socket_address_type_get_type()
     * }
     */
    public static long g_unix_socket_address_type_get_type() {
        var mh$ = g_unix_socket_address_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_bus_type_get_type()
     * }
     */
    public static FunctionDescriptor g_bus_type_get_type$descriptor() {
        return g_bus_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_bus_type_get_type()
     * }
     */
    public static MethodHandle g_bus_type_get_type$handle() {
        return g_bus_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_bus_type_get_type()
     * }
     */
    public static long g_bus_type_get_type() {
        var mh$ = g_bus_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_name_owner_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_name_owner_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_bus_name_owner_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_bus_name_owner_flags_get_type$descriptor() {
        return g_bus_name_owner_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_bus_name_owner_flags_get_type()
     * }
     */
    public static MethodHandle g_bus_name_owner_flags_get_type$handle() {
        return g_bus_name_owner_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_bus_name_owner_flags_get_type()
     * }
     */
    public static long g_bus_name_owner_flags_get_type() {
        var mh$ = g_bus_name_owner_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_name_owner_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_name_watcher_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_name_watcher_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_bus_name_watcher_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_bus_name_watcher_flags_get_type$descriptor() {
        return g_bus_name_watcher_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_bus_name_watcher_flags_get_type()
     * }
     */
    public static MethodHandle g_bus_name_watcher_flags_get_type$handle() {
        return g_bus_name_watcher_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_bus_name_watcher_flags_get_type()
     * }
     */
    public static long g_bus_name_watcher_flags_get_type() {
        var mh$ = g_bus_name_watcher_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_name_watcher_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_proxy_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_proxy_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_proxy_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_proxy_flags_get_type$descriptor() {
        return g_dbus_proxy_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_proxy_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_proxy_flags_get_type$handle() {
        return g_dbus_proxy_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_proxy_flags_get_type()
     * }
     */
    public static long g_dbus_proxy_flags_get_type() {
        var mh$ = g_dbus_proxy_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_proxy_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_error_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_error_get_type$descriptor() {
        return g_dbus_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_error_get_type()
     * }
     */
    public static MethodHandle g_dbus_error_get_type$handle() {
        return g_dbus_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_error_get_type()
     * }
     */
    public static long g_dbus_error_get_type() {
        var mh$ = g_dbus_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_connection_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_connection_flags_get_type$descriptor() {
        return g_dbus_connection_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_connection_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_connection_flags_get_type$handle() {
        return g_dbus_connection_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_connection_flags_get_type()
     * }
     */
    public static long g_dbus_connection_flags_get_type() {
        var mh$ = g_dbus_connection_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_capability_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_capability_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_capability_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_capability_flags_get_type$descriptor() {
        return g_dbus_capability_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_capability_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_capability_flags_get_type$handle() {
        return g_dbus_capability_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_capability_flags_get_type()
     * }
     */
    public static long g_dbus_capability_flags_get_type() {
        var mh$ = g_dbus_capability_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_capability_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_call_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_call_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_call_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_call_flags_get_type$descriptor() {
        return g_dbus_call_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_call_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_call_flags_get_type$handle() {
        return g_dbus_call_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_call_flags_get_type()
     * }
     */
    public static long g_dbus_call_flags_get_type() {
        var mh$ = g_dbus_call_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_call_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_type_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_message_type_get_type$descriptor() {
        return g_dbus_message_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_type_get_type()
     * }
     */
    public static MethodHandle g_dbus_message_type_get_type$handle() {
        return g_dbus_message_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_message_type_get_type()
     * }
     */
    public static long g_dbus_message_type_get_type() {
        var mh$ = g_dbus_message_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_message_flags_get_type$descriptor() {
        return g_dbus_message_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_message_flags_get_type$handle() {
        return g_dbus_message_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_message_flags_get_type()
     * }
     */
    public static long g_dbus_message_flags_get_type() {
        var mh$ = g_dbus_message_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_header_field_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_header_field_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_header_field_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_message_header_field_get_type$descriptor() {
        return g_dbus_message_header_field_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_header_field_get_type()
     * }
     */
    public static MethodHandle g_dbus_message_header_field_get_type$handle() {
        return g_dbus_message_header_field_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_message_header_field_get_type()
     * }
     */
    public static long g_dbus_message_header_field_get_type() {
        var mh$ = g_dbus_message_header_field_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_header_field_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_property_info_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_property_info_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_property_info_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_property_info_flags_get_type$descriptor() {
        return g_dbus_property_info_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_property_info_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_property_info_flags_get_type$handle() {
        return g_dbus_property_info_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_property_info_flags_get_type()
     * }
     */
    public static long g_dbus_property_info_flags_get_type() {
        var mh$ = g_dbus_property_info_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_property_info_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_subtree_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_subtree_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_subtree_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_subtree_flags_get_type$descriptor() {
        return g_dbus_subtree_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_subtree_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_subtree_flags_get_type$handle() {
        return g_dbus_subtree_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_subtree_flags_get_type()
     * }
     */
    public static long g_dbus_subtree_flags_get_type() {
        var mh$ = g_dbus_subtree_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_subtree_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_server_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_server_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_server_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_server_flags_get_type$descriptor() {
        return g_dbus_server_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_server_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_server_flags_get_type$handle() {
        return g_dbus_server_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_server_flags_get_type()
     * }
     */
    public static long g_dbus_server_flags_get_type() {
        var mh$ = g_dbus_server_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_server_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_signal_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_signal_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_signal_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_signal_flags_get_type$descriptor() {
        return g_dbus_signal_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_signal_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_signal_flags_get_type$handle() {
        return g_dbus_signal_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_signal_flags_get_type()
     * }
     */
    public static long g_dbus_signal_flags_get_type() {
        var mh$ = g_dbus_signal_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_signal_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_send_message_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_send_message_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_send_message_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_send_message_flags_get_type$descriptor() {
        return g_dbus_send_message_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_send_message_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_send_message_flags_get_type$handle() {
        return g_dbus_send_message_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_send_message_flags_get_type()
     * }
     */
    public static long g_dbus_send_message_flags_get_type() {
        var mh$ = g_dbus_send_message_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_send_message_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_credentials_type_get_type()
     * }
     */
    public static FunctionDescriptor g_credentials_type_get_type$descriptor() {
        return g_credentials_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_credentials_type_get_type()
     * }
     */
    public static MethodHandle g_credentials_type_get_type$handle() {
        return g_credentials_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_credentials_type_get_type()
     * }
     */
    public static long g_credentials_type_get_type() {
        var mh$ = g_credentials_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_message_byte_order_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_message_byte_order_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_byte_order_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_message_byte_order_get_type$descriptor() {
        return g_dbus_message_byte_order_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_message_byte_order_get_type()
     * }
     */
    public static MethodHandle g_dbus_message_byte_order_get_type$handle() {
        return g_dbus_message_byte_order_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_message_byte_order_get_type()
     * }
     */
    public static long g_dbus_message_byte_order_get_type() {
        var mh$ = g_dbus_message_byte_order_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_message_byte_order_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_application_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_application_flags_get_type$descriptor() {
        return g_application_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_application_flags_get_type()
     * }
     */
    public static MethodHandle g_application_flags_get_type$handle() {
        return g_application_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_application_flags_get_type()
     * }
     */
    public static long g_application_flags_get_type() {
        var mh$ = g_application_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_error_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_error_get_type$descriptor() {
        return g_tls_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_error_get_type()
     * }
     */
    public static MethodHandle g_tls_error_get_type$handle() {
        return g_tls_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_error_get_type()
     * }
     */
    public static long g_tls_error_get_type() {
        var mh$ = g_tls_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_certificate_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_certificate_flags_get_type$descriptor() {
        return g_tls_certificate_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_certificate_flags_get_type()
     * }
     */
    public static MethodHandle g_tls_certificate_flags_get_type$handle() {
        return g_tls_certificate_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_certificate_flags_get_type()
     * }
     */
    public static long g_tls_certificate_flags_get_type() {
        var mh$ = g_tls_certificate_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_authentication_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_authentication_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_authentication_mode_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_authentication_mode_get_type$descriptor() {
        return g_tls_authentication_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_authentication_mode_get_type()
     * }
     */
    public static MethodHandle g_tls_authentication_mode_get_type$handle() {
        return g_tls_authentication_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_authentication_mode_get_type()
     * }
     */
    public static long g_tls_authentication_mode_get_type() {
        var mh$ = g_tls_authentication_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_authentication_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_channel_binding_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_channel_binding_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_channel_binding_type_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_channel_binding_type_get_type$descriptor() {
        return g_tls_channel_binding_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_channel_binding_type_get_type()
     * }
     */
    public static MethodHandle g_tls_channel_binding_type_get_type$handle() {
        return g_tls_channel_binding_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_channel_binding_type_get_type()
     * }
     */
    public static long g_tls_channel_binding_type_get_type() {
        var mh$ = g_tls_channel_binding_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_channel_binding_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_channel_binding_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_channel_binding_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_channel_binding_error_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_channel_binding_error_get_type$descriptor() {
        return g_tls_channel_binding_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_channel_binding_error_get_type()
     * }
     */
    public static MethodHandle g_tls_channel_binding_error_get_type$handle() {
        return g_tls_channel_binding_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_channel_binding_error_get_type()
     * }
     */
    public static long g_tls_channel_binding_error_get_type() {
        var mh$ = g_tls_channel_binding_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_channel_binding_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_rehandshake_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_rehandshake_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_rehandshake_mode_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_rehandshake_mode_get_type$descriptor() {
        return g_tls_rehandshake_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_rehandshake_mode_get_type()
     * }
     */
    public static MethodHandle g_tls_rehandshake_mode_get_type$handle() {
        return g_tls_rehandshake_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_rehandshake_mode_get_type()
     * }
     */
    public static long g_tls_rehandshake_mode_get_type() {
        var mh$ = g_tls_rehandshake_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_rehandshake_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_password_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_password_flags_get_type$descriptor() {
        return g_tls_password_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_password_flags_get_type()
     * }
     */
    public static MethodHandle g_tls_password_flags_get_type$handle() {
        return g_tls_password_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_password_flags_get_type()
     * }
     */
    public static long g_tls_password_flags_get_type() {
        var mh$ = g_tls_password_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_result_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_result_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_interaction_result_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_interaction_result_get_type$descriptor() {
        return g_tls_interaction_result_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_interaction_result_get_type()
     * }
     */
    public static MethodHandle g_tls_interaction_result_get_type$handle() {
        return g_tls_interaction_result_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_interaction_result_get_type()
     * }
     */
    public static long g_tls_interaction_result_get_type() {
        var mh$ = g_tls_interaction_result_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_result_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_interface_skeleton_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_interface_skeleton_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_skeleton_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_interface_skeleton_flags_get_type$descriptor() {
        return g_dbus_interface_skeleton_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_interface_skeleton_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_interface_skeleton_flags_get_type$handle() {
        return g_dbus_interface_skeleton_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_interface_skeleton_flags_get_type()
     * }
     */
    public static long g_dbus_interface_skeleton_flags_get_type() {
        var mh$ = g_dbus_interface_skeleton_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_interface_skeleton_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_object_manager_client_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_object_manager_client_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_client_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_object_manager_client_flags_get_type$descriptor() {
        return g_dbus_object_manager_client_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_client_flags_get_type()
     * }
     */
    public static MethodHandle g_dbus_object_manager_client_flags_get_type$handle() {
        return g_dbus_object_manager_client_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_object_manager_client_flags_get_type()
     * }
     */
    public static long g_dbus_object_manager_client_flags_get_type() {
        var mh$ = g_dbus_object_manager_client_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_object_manager_client_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_verify_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_verify_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_database_verify_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_database_verify_flags_get_type$descriptor() {
        return g_tls_database_verify_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_database_verify_flags_get_type()
     * }
     */
    public static MethodHandle g_tls_database_verify_flags_get_type$handle() {
        return g_tls_database_verify_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_database_verify_flags_get_type()
     * }
     */
    public static long g_tls_database_verify_flags_get_type() {
        var mh$ = g_tls_database_verify_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_verify_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_database_lookup_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_flags_get_type$descriptor() {
        return g_tls_database_lookup_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_database_lookup_flags_get_type()
     * }
     */
    public static MethodHandle g_tls_database_lookup_flags_get_type$handle() {
        return g_tls_database_lookup_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_database_lookup_flags_get_type()
     * }
     */
    public static long g_tls_database_lookup_flags_get_type() {
        var mh$ = g_tls_database_lookup_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_request_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_request_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_certificate_request_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_certificate_request_flags_get_type$descriptor() {
        return g_tls_certificate_request_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_certificate_request_flags_get_type()
     * }
     */
    public static MethodHandle g_tls_certificate_request_flags_get_type$handle() {
        return g_tls_certificate_request_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_certificate_request_flags_get_type()
     * }
     */
    public static long g_tls_certificate_request_flags_get_type() {
        var mh$ = g_tls_certificate_request_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_request_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_protocol_version_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_protocol_version_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_protocol_version_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_protocol_version_get_type$descriptor() {
        return g_tls_protocol_version_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_protocol_version_get_type()
     * }
     */
    public static MethodHandle g_tls_protocol_version_get_type$handle() {
        return g_tls_protocol_version_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_protocol_version_get_type()
     * }
     */
    public static long g_tls_protocol_version_get_type() {
        var mh$ = g_tls_protocol_version_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_protocol_version_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_scope_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_scope_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_module_scope_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_io_module_scope_flags_get_type$descriptor() {
        return g_io_module_scope_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_module_scope_flags_get_type()
     * }
     */
    public static MethodHandle g_io_module_scope_flags_get_type$handle() {
        return g_io_module_scope_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_module_scope_flags_get_type()
     * }
     */
    public static long g_io_module_scope_flags_get_type() {
        var mh$ = g_io_module_scope_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_scope_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_event_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_event_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_client_event_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_client_event_get_type$descriptor() {
        return g_socket_client_event_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_client_event_get_type()
     * }
     */
    public static MethodHandle g_socket_client_event_get_type$handle() {
        return g_socket_client_event_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_client_event_get_type()
     * }
     */
    public static long g_socket_client_event_get_type() {
        var mh$ = g_socket_client_event_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_event_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_event_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_event_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_listener_event_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_listener_event_get_type$descriptor() {
        return g_socket_listener_event_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_listener_event_get_type()
     * }
     */
    public static MethodHandle g_socket_listener_event_get_type$handle() {
        return g_socket_listener_event_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_listener_event_get_type()
     * }
     */
    public static long g_socket_listener_event_get_type() {
        var mh$ = g_socket_listener_event_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_event_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_test_dbus_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_test_dbus_flags_get_type$descriptor() {
        return g_test_dbus_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_test_dbus_flags_get_type()
     * }
     */
    public static MethodHandle g_test_dbus_flags_get_type$handle() {
        return g_test_dbus_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_test_dbus_flags_get_type()
     * }
     */
    public static long g_test_dbus_flags_get_type() {
        var mh$ = g_test_dbus_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_subprocess_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_subprocess_flags_get_type$descriptor() {
        return g_subprocess_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_subprocess_flags_get_type()
     * }
     */
    public static MethodHandle g_subprocess_flags_get_type$handle() {
        return g_subprocess_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_subprocess_flags_get_type()
     * }
     */
    public static long g_subprocess_flags_get_type() {
        var mh$ = g_subprocess_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_priority_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_priority_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_notification_priority_get_type()
     * }
     */
    public static FunctionDescriptor g_notification_priority_get_type$descriptor() {
        return g_notification_priority_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_notification_priority_get_type()
     * }
     */
    public static MethodHandle g_notification_priority_get_type$handle() {
        return g_notification_priority_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_notification_priority_get_type()
     * }
     */
    public static long g_notification_priority_get_type() {
        var mh$ = g_notification_priority_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_priority_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_connectivity_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_connectivity_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_network_connectivity_get_type()
     * }
     */
    public static FunctionDescriptor g_network_connectivity_get_type$descriptor() {
        return g_network_connectivity_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_network_connectivity_get_type()
     * }
     */
    public static MethodHandle g_network_connectivity_get_type$handle() {
        return g_network_connectivity_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_network_connectivity_get_type()
     * }
     */
    public static long g_network_connectivity_get_type() {
        var mh$ = g_network_connectivity_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_connectivity_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_return_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_return_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_pollable_return_get_type()
     * }
     */
    public static FunctionDescriptor g_pollable_return_get_type$descriptor() {
        return g_pollable_return_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_pollable_return_get_type()
     * }
     */
    public static MethodHandle g_pollable_return_get_type$handle() {
        return g_pollable_return_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_pollable_return_get_type()
     * }
     */
    public static long g_pollable_return_get_type() {
        var mh$ = g_pollable_return_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_return_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_monitor_warning_level_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_monitor_warning_level_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_memory_monitor_warning_level_get_type()
     * }
     */
    public static FunctionDescriptor g_memory_monitor_warning_level_get_type$descriptor() {
        return g_memory_monitor_warning_level_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_memory_monitor_warning_level_get_type()
     * }
     */
    public static MethodHandle g_memory_monitor_warning_level_get_type$handle() {
        return g_memory_monitor_warning_level_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_memory_monitor_warning_level_get_type()
     * }
     */
    public static long g_memory_monitor_warning_level_get_type() {
        var mh$ = g_memory_monitor_warning_level_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_monitor_warning_level_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_name_lookup_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_name_lookup_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resolver_name_lookup_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_resolver_name_lookup_flags_get_type$descriptor() {
        return g_resolver_name_lookup_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resolver_name_lookup_flags_get_type()
     * }
     */
    public static MethodHandle g_resolver_name_lookup_flags_get_type$handle() {
        return g_resolver_name_lookup_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resolver_name_lookup_flags_get_type()
     * }
     */
    public static long g_resolver_name_lookup_flags_get_type() {
        var mh$ = g_resolver_name_lookup_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_name_lookup_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_bind_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_bind_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_settings_bind_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_settings_bind_flags_get_type$descriptor() {
        return g_settings_bind_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_settings_bind_flags_get_type()
     * }
     */
    public static MethodHandle g_settings_bind_flags_get_type$handle() {
        return g_settings_bind_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_settings_bind_flags_get_type()
     * }
     */
    public static long g_settings_bind_flags_get_type() {
        var mh$ = g_settings_bind_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_bind_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_MODULE_BIND_LAZY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MODULE_BIND_LAZY = 1
     * }
     */
    public static int G_MODULE_BIND_LAZY() {
        return G_MODULE_BIND_LAZY;
    }
    private static final int G_MODULE_BIND_LOCAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MODULE_BIND_LOCAL = 2
     * }
     */
    public static int G_MODULE_BIND_LOCAL() {
        return G_MODULE_BIND_LOCAL;
    }
    private static final int G_MODULE_BIND_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MODULE_BIND_MASK = 3
     * }
     */
    public static int G_MODULE_BIND_MASK() {
        return G_MODULE_BIND_MASK;
    }

    private static class g_module_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_module_error_quark()
     * }
     */
    public static FunctionDescriptor g_module_error_quark$descriptor() {
        return g_module_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_module_error_quark()
     * }
     */
    public static MethodHandle g_module_error_quark$handle() {
        return g_module_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_module_error_quark()
     * }
     */
    public static int g_module_error_quark() {
        var mh$ = g_module_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_MODULE_ERROR_FAILED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MODULE_ERROR_FAILED = 0
     * }
     */
    public static int G_MODULE_ERROR_FAILED() {
        return G_MODULE_ERROR_FAILED;
    }
    private static final int G_MODULE_ERROR_CHECK_FAILED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MODULE_ERROR_CHECK_FAILED = 1
     * }
     */
    public static int G_MODULE_ERROR_CHECK_FAILED() {
        return G_MODULE_ERROR_CHECK_FAILED;
    }

    private static class g_module_supported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_supported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_module_supported()
     * }
     */
    public static FunctionDescriptor g_module_supported$descriptor() {
        return g_module_supported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_module_supported()
     * }
     */
    public static MethodHandle g_module_supported$handle() {
        return g_module_supported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_module_supported()
     * }
     */
    public static int g_module_supported() {
        var mh$ = g_module_supported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_supported");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_open"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GModule *g_module_open(const gchar *file_name, GModuleFlags flags)
     * }
     */
    public static FunctionDescriptor g_module_open$descriptor() {
        return g_module_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GModule *g_module_open(const gchar *file_name, GModuleFlags flags)
     * }
     */
    public static MethodHandle g_module_open$handle() {
        return g_module_open.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GModule *g_module_open(const gchar *file_name, GModuleFlags flags)
     * }
     */
    public static MemorySegment g_module_open(MemorySegment file_name, int flags) {
        var mh$ = g_module_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_open", file_name, flags);
            }
            return (MemorySegment)mh$.invokeExact(file_name, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_open_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_open_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GModule *g_module_open_full(const gchar *file_name, GModuleFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_module_open_full$descriptor() {
        return g_module_open_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GModule *g_module_open_full(const gchar *file_name, GModuleFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_module_open_full$handle() {
        return g_module_open_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GModule *g_module_open_full(const gchar *file_name, GModuleFlags flags, GError **error)
     * }
     */
    public static MemorySegment g_module_open_full(MemorySegment file_name, int flags, MemorySegment error) {
        var mh$ = g_module_open_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_open_full", file_name, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(file_name, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_module_close(GModule *module)
     * }
     */
    public static FunctionDescriptor g_module_close$descriptor() {
        return g_module_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_module_close(GModule *module)
     * }
     */
    public static MethodHandle g_module_close$handle() {
        return g_module_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_module_close(GModule *module)
     * }
     */
    public static int g_module_close(MemorySegment module) {
        var mh$ = g_module_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_close", module);
            }
            return (int)mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_make_resident {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_make_resident"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_module_make_resident(GModule *module)
     * }
     */
    public static FunctionDescriptor g_module_make_resident$descriptor() {
        return g_module_make_resident.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_module_make_resident(GModule *module)
     * }
     */
    public static MethodHandle g_module_make_resident$handle() {
        return g_module_make_resident.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_module_make_resident(GModule *module)
     * }
     */
    public static void g_module_make_resident(MemorySegment module) {
        var mh$ = g_module_make_resident.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_make_resident", module);
            }
            mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_module_error()
     * }
     */
    public static FunctionDescriptor g_module_error$descriptor() {
        return g_module_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_module_error()
     * }
     */
    public static MethodHandle g_module_error$handle() {
        return g_module_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_module_error()
     * }
     */
    public static MemorySegment g_module_error() {
        var mh$ = g_module_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_error");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_module_symbol(GModule *module, const gchar *symbol_name, gpointer *symbol)
     * }
     */
    public static FunctionDescriptor g_module_symbol$descriptor() {
        return g_module_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_module_symbol(GModule *module, const gchar *symbol_name, gpointer *symbol)
     * }
     */
    public static MethodHandle g_module_symbol$handle() {
        return g_module_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_module_symbol(GModule *module, const gchar *symbol_name, gpointer *symbol)
     * }
     */
    public static int g_module_symbol(MemorySegment module, MemorySegment symbol_name, MemorySegment symbol) {
        var mh$ = g_module_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_symbol", module, symbol_name, symbol);
            }
            return (int)mh$.invokeExact(module, symbol_name, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_module_name(GModule *module)
     * }
     */
    public static FunctionDescriptor g_module_name$descriptor() {
        return g_module_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_module_name(GModule *module)
     * }
     */
    public static MethodHandle g_module_name$handle() {
        return g_module_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_module_name(GModule *module)
     * }
     */
    public static MemorySegment g_module_name(MemorySegment module) {
        var mh$ = g_module_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_name", module);
            }
            return (MemorySegment)mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_module_build_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_module_build_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_module_build_path(const gchar *directory, const gchar *module_name)
     * }
     */
    public static FunctionDescriptor g_module_build_path$descriptor() {
        return g_module_build_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_module_build_path(const gchar *directory, const gchar *module_name)
     * }
     */
    public static MethodHandle g_module_build_path$handle() {
        return g_module_build_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_module_build_path(const gchar *directory, const gchar *module_name)
     * }
     */
    public static MemorySegment g_module_build_path(MemorySegment directory, MemorySegment module_name) {
        var mh$ = g_module_build_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_module_build_path", directory, module_name);
            }
            return (MemorySegment)mh$.invokeExact(directory, module_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_scope_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_scope_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOModuleScope *g_io_module_scope_new(GIOModuleScopeFlags flags)
     * }
     */
    public static FunctionDescriptor g_io_module_scope_new$descriptor() {
        return g_io_module_scope_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOModuleScope *g_io_module_scope_new(GIOModuleScopeFlags flags)
     * }
     */
    public static MethodHandle g_io_module_scope_new$handle() {
        return g_io_module_scope_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOModuleScope *g_io_module_scope_new(GIOModuleScopeFlags flags)
     * }
     */
    public static MemorySegment g_io_module_scope_new(int flags) {
        var mh$ = g_io_module_scope_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_scope_new", flags);
            }
            return (MemorySegment)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_scope_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_scope_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_module_scope_free(GIOModuleScope *scope)
     * }
     */
    public static FunctionDescriptor g_io_module_scope_free$descriptor() {
        return g_io_module_scope_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_module_scope_free(GIOModuleScope *scope)
     * }
     */
    public static MethodHandle g_io_module_scope_free$handle() {
        return g_io_module_scope_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_module_scope_free(GIOModuleScope *scope)
     * }
     */
    public static void g_io_module_scope_free(MemorySegment scope) {
        var mh$ = g_io_module_scope_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_scope_free", scope);
            }
            mh$.invokeExact(scope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_scope_block {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_scope_block"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_module_scope_block(GIOModuleScope *scope, const gchar *basename)
     * }
     */
    public static FunctionDescriptor g_io_module_scope_block$descriptor() {
        return g_io_module_scope_block.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_module_scope_block(GIOModuleScope *scope, const gchar *basename)
     * }
     */
    public static MethodHandle g_io_module_scope_block$handle() {
        return g_io_module_scope_block.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_module_scope_block(GIOModuleScope *scope, const gchar *basename)
     * }
     */
    public static void g_io_module_scope_block(MemorySegment scope, MemorySegment basename) {
        var mh$ = g_io_module_scope_block.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_scope_block", scope, basename);
            }
            mh$.invokeExact(scope, basename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_module_get_type()
     * }
     */
    public static FunctionDescriptor g_io_module_get_type$descriptor() {
        return g_io_module_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_module_get_type()
     * }
     */
    public static MethodHandle g_io_module_get_type$handle() {
        return g_io_module_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_module_get_type()
     * }
     */
    public static long g_io_module_get_type() {
        var mh$ = g_io_module_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOModule *g_io_module_new(const gchar *filename)
     * }
     */
    public static FunctionDescriptor g_io_module_new$descriptor() {
        return g_io_module_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOModule *g_io_module_new(const gchar *filename)
     * }
     */
    public static MethodHandle g_io_module_new$handle() {
        return g_io_module_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOModule *g_io_module_new(const gchar *filename)
     * }
     */
    public static MemorySegment g_io_module_new(MemorySegment filename) {
        var mh$ = g_io_module_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_new", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_modules_scan_all_in_directory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_modules_scan_all_in_directory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_modules_scan_all_in_directory(const char *dirname)
     * }
     */
    public static FunctionDescriptor g_io_modules_scan_all_in_directory$descriptor() {
        return g_io_modules_scan_all_in_directory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_modules_scan_all_in_directory(const char *dirname)
     * }
     */
    public static MethodHandle g_io_modules_scan_all_in_directory$handle() {
        return g_io_modules_scan_all_in_directory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_modules_scan_all_in_directory(const char *dirname)
     * }
     */
    public static void g_io_modules_scan_all_in_directory(MemorySegment dirname) {
        var mh$ = g_io_modules_scan_all_in_directory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_modules_scan_all_in_directory", dirname);
            }
            mh$.invokeExact(dirname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_modules_load_all_in_directory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_modules_load_all_in_directory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_io_modules_load_all_in_directory(const gchar *dirname)
     * }
     */
    public static FunctionDescriptor g_io_modules_load_all_in_directory$descriptor() {
        return g_io_modules_load_all_in_directory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_io_modules_load_all_in_directory(const gchar *dirname)
     * }
     */
    public static MethodHandle g_io_modules_load_all_in_directory$handle() {
        return g_io_modules_load_all_in_directory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_io_modules_load_all_in_directory(const gchar *dirname)
     * }
     */
    public static MemorySegment g_io_modules_load_all_in_directory(MemorySegment dirname) {
        var mh$ = g_io_modules_load_all_in_directory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_modules_load_all_in_directory", dirname);
            }
            return (MemorySegment)mh$.invokeExact(dirname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_modules_scan_all_in_directory_with_scope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_modules_scan_all_in_directory_with_scope"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_modules_scan_all_in_directory_with_scope(const gchar *dirname, GIOModuleScope *scope)
     * }
     */
    public static FunctionDescriptor g_io_modules_scan_all_in_directory_with_scope$descriptor() {
        return g_io_modules_scan_all_in_directory_with_scope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_modules_scan_all_in_directory_with_scope(const gchar *dirname, GIOModuleScope *scope)
     * }
     */
    public static MethodHandle g_io_modules_scan_all_in_directory_with_scope$handle() {
        return g_io_modules_scan_all_in_directory_with_scope.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_modules_scan_all_in_directory_with_scope(const gchar *dirname, GIOModuleScope *scope)
     * }
     */
    public static void g_io_modules_scan_all_in_directory_with_scope(MemorySegment dirname, MemorySegment scope) {
        var mh$ = g_io_modules_scan_all_in_directory_with_scope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_modules_scan_all_in_directory_with_scope", dirname, scope);
            }
            mh$.invokeExact(dirname, scope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_modules_load_all_in_directory_with_scope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_modules_load_all_in_directory_with_scope"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_io_modules_load_all_in_directory_with_scope(const gchar *dirname, GIOModuleScope *scope)
     * }
     */
    public static FunctionDescriptor g_io_modules_load_all_in_directory_with_scope$descriptor() {
        return g_io_modules_load_all_in_directory_with_scope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_io_modules_load_all_in_directory_with_scope(const gchar *dirname, GIOModuleScope *scope)
     * }
     */
    public static MethodHandle g_io_modules_load_all_in_directory_with_scope$handle() {
        return g_io_modules_load_all_in_directory_with_scope.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_io_modules_load_all_in_directory_with_scope(const gchar *dirname, GIOModuleScope *scope)
     * }
     */
    public static MemorySegment g_io_modules_load_all_in_directory_with_scope(MemorySegment dirname, MemorySegment scope) {
        var mh$ = g_io_modules_load_all_in_directory_with_scope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_modules_load_all_in_directory_with_scope", dirname, scope);
            }
            return (MemorySegment)mh$.invokeExact(dirname, scope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_point_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_point_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOExtensionPoint *g_io_extension_point_register(const char *name)
     * }
     */
    public static FunctionDescriptor g_io_extension_point_register$descriptor() {
        return g_io_extension_point_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOExtensionPoint *g_io_extension_point_register(const char *name)
     * }
     */
    public static MethodHandle g_io_extension_point_register$handle() {
        return g_io_extension_point_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOExtensionPoint *g_io_extension_point_register(const char *name)
     * }
     */
    public static MemorySegment g_io_extension_point_register(MemorySegment name) {
        var mh$ = g_io_extension_point_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_point_register", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_point_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_point_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOExtensionPoint *g_io_extension_point_lookup(const char *name)
     * }
     */
    public static FunctionDescriptor g_io_extension_point_lookup$descriptor() {
        return g_io_extension_point_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOExtensionPoint *g_io_extension_point_lookup(const char *name)
     * }
     */
    public static MethodHandle g_io_extension_point_lookup$handle() {
        return g_io_extension_point_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOExtensionPoint *g_io_extension_point_lookup(const char *name)
     * }
     */
    public static MemorySegment g_io_extension_point_lookup(MemorySegment name) {
        var mh$ = g_io_extension_point_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_point_lookup", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_point_set_required_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_point_set_required_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_extension_point_set_required_type(GIOExtensionPoint *extension_point, GType type)
     * }
     */
    public static FunctionDescriptor g_io_extension_point_set_required_type$descriptor() {
        return g_io_extension_point_set_required_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_extension_point_set_required_type(GIOExtensionPoint *extension_point, GType type)
     * }
     */
    public static MethodHandle g_io_extension_point_set_required_type$handle() {
        return g_io_extension_point_set_required_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_extension_point_set_required_type(GIOExtensionPoint *extension_point, GType type)
     * }
     */
    public static void g_io_extension_point_set_required_type(MemorySegment extension_point, long type) {
        var mh$ = g_io_extension_point_set_required_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_point_set_required_type", extension_point, type);
            }
            mh$.invokeExact(extension_point, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_point_get_required_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_point_get_required_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_extension_point_get_required_type(GIOExtensionPoint *extension_point)
     * }
     */
    public static FunctionDescriptor g_io_extension_point_get_required_type$descriptor() {
        return g_io_extension_point_get_required_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_extension_point_get_required_type(GIOExtensionPoint *extension_point)
     * }
     */
    public static MethodHandle g_io_extension_point_get_required_type$handle() {
        return g_io_extension_point_get_required_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_extension_point_get_required_type(GIOExtensionPoint *extension_point)
     * }
     */
    public static long g_io_extension_point_get_required_type(MemorySegment extension_point) {
        var mh$ = g_io_extension_point_get_required_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_point_get_required_type", extension_point);
            }
            return (long)mh$.invokeExact(extension_point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_point_get_extensions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_point_get_extensions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_io_extension_point_get_extensions(GIOExtensionPoint *extension_point)
     * }
     */
    public static FunctionDescriptor g_io_extension_point_get_extensions$descriptor() {
        return g_io_extension_point_get_extensions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_io_extension_point_get_extensions(GIOExtensionPoint *extension_point)
     * }
     */
    public static MethodHandle g_io_extension_point_get_extensions$handle() {
        return g_io_extension_point_get_extensions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_io_extension_point_get_extensions(GIOExtensionPoint *extension_point)
     * }
     */
    public static MemorySegment g_io_extension_point_get_extensions(MemorySegment extension_point) {
        var mh$ = g_io_extension_point_get_extensions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_point_get_extensions", extension_point);
            }
            return (MemorySegment)mh$.invokeExact(extension_point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_point_get_extension_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_point_get_extension_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOExtension *g_io_extension_point_get_extension_by_name(GIOExtensionPoint *extension_point, const char *name)
     * }
     */
    public static FunctionDescriptor g_io_extension_point_get_extension_by_name$descriptor() {
        return g_io_extension_point_get_extension_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOExtension *g_io_extension_point_get_extension_by_name(GIOExtensionPoint *extension_point, const char *name)
     * }
     */
    public static MethodHandle g_io_extension_point_get_extension_by_name$handle() {
        return g_io_extension_point_get_extension_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOExtension *g_io_extension_point_get_extension_by_name(GIOExtensionPoint *extension_point, const char *name)
     * }
     */
    public static MemorySegment g_io_extension_point_get_extension_by_name(MemorySegment extension_point, MemorySegment name) {
        var mh$ = g_io_extension_point_get_extension_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_point_get_extension_by_name", extension_point, name);
            }
            return (MemorySegment)mh$.invokeExact(extension_point, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_point_implement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_point_implement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOExtension *g_io_extension_point_implement(const char *extension_point_name, GType type, const char *extension_name, gint priority)
     * }
     */
    public static FunctionDescriptor g_io_extension_point_implement$descriptor() {
        return g_io_extension_point_implement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOExtension *g_io_extension_point_implement(const char *extension_point_name, GType type, const char *extension_name, gint priority)
     * }
     */
    public static MethodHandle g_io_extension_point_implement$handle() {
        return g_io_extension_point_implement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOExtension *g_io_extension_point_implement(const char *extension_point_name, GType type, const char *extension_name, gint priority)
     * }
     */
    public static MemorySegment g_io_extension_point_implement(MemorySegment extension_point_name, long type, MemorySegment extension_name, int priority) {
        var mh$ = g_io_extension_point_implement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_point_implement", extension_point_name, type, extension_name, priority);
            }
            return (MemorySegment)mh$.invokeExact(extension_point_name, type, extension_name, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_extension_get_type(GIOExtension *extension)
     * }
     */
    public static FunctionDescriptor g_io_extension_get_type$descriptor() {
        return g_io_extension_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_extension_get_type(GIOExtension *extension)
     * }
     */
    public static MethodHandle g_io_extension_get_type$handle() {
        return g_io_extension_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_extension_get_type(GIOExtension *extension)
     * }
     */
    public static long g_io_extension_get_type(MemorySegment extension) {
        var mh$ = g_io_extension_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_get_type", extension);
            }
            return (long)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_io_extension_get_name(GIOExtension *extension)
     * }
     */
    public static FunctionDescriptor g_io_extension_get_name$descriptor() {
        return g_io_extension_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_io_extension_get_name(GIOExtension *extension)
     * }
     */
    public static MethodHandle g_io_extension_get_name$handle() {
        return g_io_extension_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_io_extension_get_name(GIOExtension *extension)
     * }
     */
    public static MemorySegment g_io_extension_get_name(MemorySegment extension) {
        var mh$ = g_io_extension_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_get_name", extension);
            }
            return (MemorySegment)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_get_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_get_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_io_extension_get_priority(GIOExtension *extension)
     * }
     */
    public static FunctionDescriptor g_io_extension_get_priority$descriptor() {
        return g_io_extension_get_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_io_extension_get_priority(GIOExtension *extension)
     * }
     */
    public static MethodHandle g_io_extension_get_priority$handle() {
        return g_io_extension_get_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_io_extension_get_priority(GIOExtension *extension)
     * }
     */
    public static int g_io_extension_get_priority(MemorySegment extension) {
        var mh$ = g_io_extension_get_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_get_priority", extension);
            }
            return (int)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_extension_ref_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_extension_ref_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeClass *g_io_extension_ref_class(GIOExtension *extension)
     * }
     */
    public static FunctionDescriptor g_io_extension_ref_class$descriptor() {
        return g_io_extension_ref_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeClass *g_io_extension_ref_class(GIOExtension *extension)
     * }
     */
    public static MethodHandle g_io_extension_ref_class$handle() {
        return g_io_extension_ref_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTypeClass *g_io_extension_ref_class(GIOExtension *extension)
     * }
     */
    public static MemorySegment g_io_extension_ref_class(MemorySegment extension) {
        var mh$ = g_io_extension_ref_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_extension_ref_class", extension);
            }
            return (MemorySegment)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_load"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void g_io_module_load(GIOModule *module)
     * }
     */
    public static FunctionDescriptor g_io_module_load$descriptor() {
        return g_io_module_load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void g_io_module_load(GIOModule *module)
     * }
     */
    public static MethodHandle g_io_module_load$handle() {
        return g_io_module_load.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void g_io_module_load(GIOModule *module)
     * }
     */
    public static void g_io_module_load(MemorySegment module) {
        var mh$ = g_io_module_load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_load", module);
            }
            mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_unload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_unload"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void g_io_module_unload(GIOModule *module)
     * }
     */
    public static FunctionDescriptor g_io_module_unload$descriptor() {
        return g_io_module_unload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void g_io_module_unload(GIOModule *module)
     * }
     */
    public static MethodHandle g_io_module_unload$handle() {
        return g_io_module_unload.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void g_io_module_unload(GIOModule *module)
     * }
     */
    public static void g_io_module_unload(MemorySegment module) {
        var mh$ = g_io_module_unload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_unload", module);
            }
            mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_module_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_module_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char **g_io_module_query()
     * }
     */
    public static FunctionDescriptor g_io_module_query$descriptor() {
        return g_io_module_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char **g_io_module_query()
     * }
     */
    public static MethodHandle g_io_module_query$handle() {
        return g_io_module_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * char **g_io_module_query()
     * }
     */
    public static MemorySegment g_io_module_query() {
        var mh$ = g_io_module_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_module_query");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_scheduler_push_job {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_scheduler_push_job"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_scheduler_push_job(GIOSchedulerJobFunc job_func, gpointer user_data, GDestroyNotify notify, gint io_priority, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_io_scheduler_push_job$descriptor() {
        return g_io_scheduler_push_job.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_scheduler_push_job(GIOSchedulerJobFunc job_func, gpointer user_data, GDestroyNotify notify, gint io_priority, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_io_scheduler_push_job$handle() {
        return g_io_scheduler_push_job.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_scheduler_push_job(GIOSchedulerJobFunc job_func, gpointer user_data, GDestroyNotify notify, gint io_priority, GCancellable *cancellable)
     * }
     */
    public static void g_io_scheduler_push_job(MemorySegment job_func, MemorySegment user_data, MemorySegment notify, int io_priority, MemorySegment cancellable) {
        var mh$ = g_io_scheduler_push_job.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_scheduler_push_job", job_func, user_data, notify, io_priority, cancellable);
            }
            mh$.invokeExact(job_func, user_data, notify, io_priority, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_scheduler_cancel_all_jobs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_scheduler_cancel_all_jobs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_scheduler_cancel_all_jobs()
     * }
     */
    public static FunctionDescriptor g_io_scheduler_cancel_all_jobs$descriptor() {
        return g_io_scheduler_cancel_all_jobs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_scheduler_cancel_all_jobs()
     * }
     */
    public static MethodHandle g_io_scheduler_cancel_all_jobs$handle() {
        return g_io_scheduler_cancel_all_jobs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_scheduler_cancel_all_jobs()
     * }
     */
    public static void g_io_scheduler_cancel_all_jobs() {
        var mh$ = g_io_scheduler_cancel_all_jobs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_scheduler_cancel_all_jobs");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_scheduler_job_send_to_mainloop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_scheduler_job_send_to_mainloop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_io_scheduler_job_send_to_mainloop$descriptor() {
        return g_io_scheduler_job_send_to_mainloop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_io_scheduler_job_send_to_mainloop$handle() {
        return g_io_scheduler_job_send_to_mainloop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static int g_io_scheduler_job_send_to_mainloop(MemorySegment job, MemorySegment func, MemorySegment user_data, MemorySegment notify) {
        var mh$ = g_io_scheduler_job_send_to_mainloop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_scheduler_job_send_to_mainloop", job, func, user_data, notify);
            }
            return (int)mh$.invokeExact(job, func, user_data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_scheduler_job_send_to_mainloop_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_scheduler_job_send_to_mainloop_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_io_scheduler_job_send_to_mainloop_async$descriptor() {
        return g_io_scheduler_job_send_to_mainloop_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_io_scheduler_job_send_to_mainloop_async$handle() {
        return g_io_scheduler_job_send_to_mainloop_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static void g_io_scheduler_job_send_to_mainloop_async(MemorySegment job, MemorySegment func, MemorySegment user_data, MemorySegment notify) {
        var mh$ = g_io_scheduler_job_send_to_mainloop_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_scheduler_job_send_to_mainloop_async", job, func, user_data, notify);
            }
            mh$.invokeExact(job, func, user_data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_model_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_model_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_list_model_get_type()
     * }
     */
    public static FunctionDescriptor g_list_model_get_type$descriptor() {
        return g_list_model_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_list_model_get_type()
     * }
     */
    public static MethodHandle g_list_model_get_type$handle() {
        return g_list_model_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_list_model_get_type()
     * }
     */
    public static long g_list_model_get_type() {
        var mh$ = g_list_model_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_model_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GListModel *GListModel_autoptr
     * }
     */
    public static final AddressLayout GListModel_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GListModel_listautoptr
     * }
     */
    public static final AddressLayout GListModel_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GListModel_slistautoptr
     * }
     */
    public static final AddressLayout GListModel_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GListModel_queueautoptr
     * }
     */
    public static final AddressLayout GListModel_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_list_model_get_item_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_model_get_item_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_list_model_get_item_type(GListModel *list)
     * }
     */
    public static FunctionDescriptor g_list_model_get_item_type$descriptor() {
        return g_list_model_get_item_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_list_model_get_item_type(GListModel *list)
     * }
     */
    public static MethodHandle g_list_model_get_item_type$handle() {
        return g_list_model_get_item_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_list_model_get_item_type(GListModel *list)
     * }
     */
    public static long g_list_model_get_item_type(MemorySegment list) {
        var mh$ = g_list_model_get_item_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_model_get_item_type", list);
            }
            return (long)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_model_get_n_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_model_get_n_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_list_model_get_n_items(GListModel *list)
     * }
     */
    public static FunctionDescriptor g_list_model_get_n_items$descriptor() {
        return g_list_model_get_n_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_list_model_get_n_items(GListModel *list)
     * }
     */
    public static MethodHandle g_list_model_get_n_items$handle() {
        return g_list_model_get_n_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_list_model_get_n_items(GListModel *list)
     * }
     */
    public static int g_list_model_get_n_items(MemorySegment list) {
        var mh$ = g_list_model_get_n_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_model_get_n_items", list);
            }
            return (int)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_model_get_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_model_get_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_list_model_get_item(GListModel *list, guint position)
     * }
     */
    public static FunctionDescriptor g_list_model_get_item$descriptor() {
        return g_list_model_get_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_list_model_get_item(GListModel *list, guint position)
     * }
     */
    public static MethodHandle g_list_model_get_item$handle() {
        return g_list_model_get_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_list_model_get_item(GListModel *list, guint position)
     * }
     */
    public static MemorySegment g_list_model_get_item(MemorySegment list, int position) {
        var mh$ = g_list_model_get_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_model_get_item", list, position);
            }
            return (MemorySegment)mh$.invokeExact(list, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_model_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_model_get_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_list_model_get_object(GListModel *list, guint position)
     * }
     */
    public static FunctionDescriptor g_list_model_get_object$descriptor() {
        return g_list_model_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_list_model_get_object(GListModel *list, guint position)
     * }
     */
    public static MethodHandle g_list_model_get_object$handle() {
        return g_list_model_get_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_list_model_get_object(GListModel *list, guint position)
     * }
     */
    public static MemorySegment g_list_model_get_object(MemorySegment list, int position) {
        var mh$ = g_list_model_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_model_get_object", list, position);
            }
            return (MemorySegment)mh$.invokeExact(list, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_model_items_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_model_items_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_model_items_changed(GListModel *list, guint position, guint removed, guint added)
     * }
     */
    public static FunctionDescriptor g_list_model_items_changed$descriptor() {
        return g_list_model_items_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_model_items_changed(GListModel *list, guint position, guint removed, guint added)
     * }
     */
    public static MethodHandle g_list_model_items_changed$handle() {
        return g_list_model_items_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_model_items_changed(GListModel *list, guint position, guint removed, guint added)
     * }
     */
    public static void g_list_model_items_changed(MemorySegment list, int position, int removed, int added) {
        var mh$ = g_list_model_items_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_model_items_changed", list, position, removed, added);
            }
            mh$.invokeExact(list, position, removed, added);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_list_store_get_type()
     * }
     */
    public static FunctionDescriptor g_list_store_get_type$descriptor() {
        return g_list_store_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_list_store_get_type()
     * }
     */
    public static MethodHandle g_list_store_get_type$handle() {
        return g_list_store_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_list_store_get_type()
     * }
     */
    public static long g_list_store_get_type() {
        var mh$ = g_list_store_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GListStore *GListStore_autoptr
     * }
     */
    public static final AddressLayout GListStore_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GListStore_listautoptr
     * }
     */
    public static final AddressLayout GListStore_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GListStore_slistautoptr
     * }
     */
    public static final AddressLayout GListStore_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GListStore_queueautoptr
     * }
     */
    public static final AddressLayout GListStore_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GListStoreClass *GListStoreClass_autoptr
     * }
     */
    public static final AddressLayout GListStoreClass_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GListStoreClass_listautoptr
     * }
     */
    public static final AddressLayout GListStoreClass_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GListStoreClass_slistautoptr
     * }
     */
    public static final AddressLayout GListStoreClass_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GListStoreClass_queueautoptr
     * }
     */
    public static final AddressLayout GListStoreClass_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_list_store_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GListStore *g_list_store_new(GType item_type)
     * }
     */
    public static FunctionDescriptor g_list_store_new$descriptor() {
        return g_list_store_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GListStore *g_list_store_new(GType item_type)
     * }
     */
    public static MethodHandle g_list_store_new$handle() {
        return g_list_store_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GListStore *g_list_store_new(GType item_type)
     * }
     */
    public static MemorySegment g_list_store_new(long item_type) {
        var mh$ = g_list_store_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_new", item_type);
            }
            return (MemorySegment)mh$.invokeExact(item_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_store_insert(GListStore *store, guint position, gpointer item)
     * }
     */
    public static FunctionDescriptor g_list_store_insert$descriptor() {
        return g_list_store_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_store_insert(GListStore *store, guint position, gpointer item)
     * }
     */
    public static MethodHandle g_list_store_insert$handle() {
        return g_list_store_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_store_insert(GListStore *store, guint position, gpointer item)
     * }
     */
    public static void g_list_store_insert(MemorySegment store, int position, MemorySegment item) {
        var mh$ = g_list_store_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_insert", store, position, item);
            }
            mh$.invokeExact(store, position, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_insert_sorted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_insert_sorted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_list_store_insert_sorted(GListStore *store, gpointer item, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_list_store_insert_sorted$descriptor() {
        return g_list_store_insert_sorted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_list_store_insert_sorted(GListStore *store, gpointer item, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_list_store_insert_sorted$handle() {
        return g_list_store_insert_sorted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_list_store_insert_sorted(GListStore *store, gpointer item, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static int g_list_store_insert_sorted(MemorySegment store, MemorySegment item, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_list_store_insert_sorted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_insert_sorted", store, item, compare_func, user_data);
            }
            return (int)mh$.invokeExact(store, item, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_store_sort(GListStore *store, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_list_store_sort$descriptor() {
        return g_list_store_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_store_sort(GListStore *store, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_list_store_sort$handle() {
        return g_list_store_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_store_sort(GListStore *store, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static void g_list_store_sort(MemorySegment store, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_list_store_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_sort", store, compare_func, user_data);
            }
            mh$.invokeExact(store, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_store_append(GListStore *store, gpointer item)
     * }
     */
    public static FunctionDescriptor g_list_store_append$descriptor() {
        return g_list_store_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_store_append(GListStore *store, gpointer item)
     * }
     */
    public static MethodHandle g_list_store_append$handle() {
        return g_list_store_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_store_append(GListStore *store, gpointer item)
     * }
     */
    public static void g_list_store_append(MemorySegment store, MemorySegment item) {
        var mh$ = g_list_store_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_append", store, item);
            }
            mh$.invokeExact(store, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_store_remove(GListStore *store, guint position)
     * }
     */
    public static FunctionDescriptor g_list_store_remove$descriptor() {
        return g_list_store_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_store_remove(GListStore *store, guint position)
     * }
     */
    public static MethodHandle g_list_store_remove$handle() {
        return g_list_store_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_store_remove(GListStore *store, guint position)
     * }
     */
    public static void g_list_store_remove(MemorySegment store, int position) {
        var mh$ = g_list_store_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_remove", store, position);
            }
            mh$.invokeExact(store, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_store_remove_all(GListStore *store)
     * }
     */
    public static FunctionDescriptor g_list_store_remove_all$descriptor() {
        return g_list_store_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_store_remove_all(GListStore *store)
     * }
     */
    public static MethodHandle g_list_store_remove_all$handle() {
        return g_list_store_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_store_remove_all(GListStore *store)
     * }
     */
    public static void g_list_store_remove_all(MemorySegment store) {
        var mh$ = g_list_store_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_remove_all", store);
            }
            mh$.invokeExact(store);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_splice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_splice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_store_splice(GListStore *store, guint position, guint n_removals, gpointer *additions, guint n_additions)
     * }
     */
    public static FunctionDescriptor g_list_store_splice$descriptor() {
        return g_list_store_splice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_store_splice(GListStore *store, guint position, guint n_removals, gpointer *additions, guint n_additions)
     * }
     */
    public static MethodHandle g_list_store_splice$handle() {
        return g_list_store_splice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_store_splice(GListStore *store, guint position, guint n_removals, gpointer *additions, guint n_additions)
     * }
     */
    public static void g_list_store_splice(MemorySegment store, int position, int n_removals, MemorySegment additions, int n_additions) {
        var mh$ = g_list_store_splice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_splice", store, position, n_removals, additions, n_additions);
            }
            mh$.invokeExact(store, position, n_removals, additions, n_additions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_list_store_find(GListStore *store, gpointer item, guint *position)
     * }
     */
    public static FunctionDescriptor g_list_store_find$descriptor() {
        return g_list_store_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_list_store_find(GListStore *store, gpointer item, guint *position)
     * }
     */
    public static MethodHandle g_list_store_find$handle() {
        return g_list_store_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_list_store_find(GListStore *store, gpointer item, guint *position)
     * }
     */
    public static int g_list_store_find(MemorySegment store, MemorySegment item, MemorySegment position) {
        var mh$ = g_list_store_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_find", store, item, position);
            }
            return (int)mh$.invokeExact(store, item, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_find_with_equal_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_find_with_equal_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_list_store_find_with_equal_func(GListStore *store, gpointer item, GEqualFunc equal_func, guint *position)
     * }
     */
    public static FunctionDescriptor g_list_store_find_with_equal_func$descriptor() {
        return g_list_store_find_with_equal_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_list_store_find_with_equal_func(GListStore *store, gpointer item, GEqualFunc equal_func, guint *position)
     * }
     */
    public static MethodHandle g_list_store_find_with_equal_func$handle() {
        return g_list_store_find_with_equal_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_list_store_find_with_equal_func(GListStore *store, gpointer item, GEqualFunc equal_func, guint *position)
     * }
     */
    public static int g_list_store_find_with_equal_func(MemorySegment store, MemorySegment item, MemorySegment equal_func, MemorySegment position) {
        var mh$ = g_list_store_find_with_equal_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_find_with_equal_func", store, item, equal_func, position);
            }
            return (int)mh$.invokeExact(store, item, equal_func, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_store_find_with_equal_func_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_store_find_with_equal_func_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_list_store_find_with_equal_func_full(GListStore *store, gpointer item, GEqualFuncFull equal_func, gpointer user_data, guint *position)
     * }
     */
    public static FunctionDescriptor g_list_store_find_with_equal_func_full$descriptor() {
        return g_list_store_find_with_equal_func_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_list_store_find_with_equal_func_full(GListStore *store, gpointer item, GEqualFuncFull equal_func, gpointer user_data, guint *position)
     * }
     */
    public static MethodHandle g_list_store_find_with_equal_func_full$handle() {
        return g_list_store_find_with_equal_func_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_list_store_find_with_equal_func_full(GListStore *store, gpointer item, GEqualFuncFull equal_func, gpointer user_data, guint *position)
     * }
     */
    public static int g_list_store_find_with_equal_func_full(MemorySegment store, MemorySegment item, MemorySegment equal_func, MemorySegment user_data, MemorySegment position) {
        var mh$ = g_list_store_find_with_equal_func_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_store_find_with_equal_func_full", store, item, equal_func, user_data, position);
            }
            return (int)mh$.invokeExact(store, item, equal_func, user_data, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_loadable_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_loadable_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_loadable_icon_get_type()
     * }
     */
    public static FunctionDescriptor g_loadable_icon_get_type$descriptor() {
        return g_loadable_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_loadable_icon_get_type()
     * }
     */
    public static MethodHandle g_loadable_icon_get_type$handle() {
        return g_loadable_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_loadable_icon_get_type()
     * }
     */
    public static long g_loadable_icon_get_type() {
        var mh$ = g_loadable_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_loadable_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_loadable_icon_load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_loadable_icon_load"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_loadable_icon_load(GLoadableIcon *icon, int size, char **type, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_loadable_icon_load$descriptor() {
        return g_loadable_icon_load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_loadable_icon_load(GLoadableIcon *icon, int size, char **type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_loadable_icon_load$handle() {
        return g_loadable_icon_load.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_loadable_icon_load(GLoadableIcon *icon, int size, char **type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_loadable_icon_load(MemorySegment icon, int size, MemorySegment type, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_loadable_icon_load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_loadable_icon_load", icon, size, type, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(icon, size, type, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_loadable_icon_load_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_loadable_icon_load_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_loadable_icon_load_async(GLoadableIcon *icon, int size, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_loadable_icon_load_async$descriptor() {
        return g_loadable_icon_load_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_loadable_icon_load_async(GLoadableIcon *icon, int size, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_loadable_icon_load_async$handle() {
        return g_loadable_icon_load_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_loadable_icon_load_async(GLoadableIcon *icon, int size, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_loadable_icon_load_async(MemorySegment icon, int size, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_loadable_icon_load_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_loadable_icon_load_async", icon, size, cancellable, callback, user_data);
            }
            mh$.invokeExact(icon, size, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_loadable_icon_load_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_loadable_icon_load_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_loadable_icon_load_finish(GLoadableIcon *icon, GAsyncResult *res, char **type, GError **error)
     * }
     */
    public static FunctionDescriptor g_loadable_icon_load_finish$descriptor() {
        return g_loadable_icon_load_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_loadable_icon_load_finish(GLoadableIcon *icon, GAsyncResult *res, char **type, GError **error)
     * }
     */
    public static MethodHandle g_loadable_icon_load_finish$handle() {
        return g_loadable_icon_load_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_loadable_icon_load_finish(GLoadableIcon *icon, GAsyncResult *res, char **type, GError **error)
     * }
     */
    public static MemorySegment g_loadable_icon_load_finish(MemorySegment icon, MemorySegment res, MemorySegment type, MemorySegment error) {
        var mh$ = g_loadable_icon_load_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_loadable_icon_load_finish", icon, res, type, error);
            }
            return (MemorySegment)mh$.invokeExact(icon, res, type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_memory_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_memory_input_stream_get_type$descriptor() {
        return g_memory_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_memory_input_stream_get_type()
     * }
     */
    public static MethodHandle g_memory_input_stream_get_type$handle() {
        return g_memory_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_memory_input_stream_get_type()
     * }
     */
    public static long g_memory_input_stream_get_type() {
        var mh$ = g_memory_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_input_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_input_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new()
     * }
     */
    public static FunctionDescriptor g_memory_input_stream_new$descriptor() {
        return g_memory_input_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new()
     * }
     */
    public static MethodHandle g_memory_input_stream_new$handle() {
        return g_memory_input_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new()
     * }
     */
    public static MemorySegment g_memory_input_stream_new() {
        var mh$ = g_memory_input_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_input_stream_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_input_stream_new_from_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_input_stream_new_from_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new_from_data(const void *data, gssize len, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_memory_input_stream_new_from_data$descriptor() {
        return g_memory_input_stream_new_from_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new_from_data(const void *data, gssize len, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_memory_input_stream_new_from_data$handle() {
        return g_memory_input_stream_new_from_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new_from_data(const void *data, gssize len, GDestroyNotify destroy)
     * }
     */
    public static MemorySegment g_memory_input_stream_new_from_data(MemorySegment data, long len, MemorySegment destroy) {
        var mh$ = g_memory_input_stream_new_from_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_input_stream_new_from_data", data, len, destroy);
            }
            return (MemorySegment)mh$.invokeExact(data, len, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_input_stream_new_from_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_input_stream_new_from_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new_from_bytes(GBytes *bytes)
     * }
     */
    public static FunctionDescriptor g_memory_input_stream_new_from_bytes$descriptor() {
        return g_memory_input_stream_new_from_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new_from_bytes(GBytes *bytes)
     * }
     */
    public static MethodHandle g_memory_input_stream_new_from_bytes$handle() {
        return g_memory_input_stream_new_from_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_memory_input_stream_new_from_bytes(GBytes *bytes)
     * }
     */
    public static MemorySegment g_memory_input_stream_new_from_bytes(MemorySegment bytes) {
        var mh$ = g_memory_input_stream_new_from_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_input_stream_new_from_bytes", bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_input_stream_add_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_input_stream_add_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_memory_input_stream_add_data(GMemoryInputStream *stream, const void *data, gssize len, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_memory_input_stream_add_data$descriptor() {
        return g_memory_input_stream_add_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_memory_input_stream_add_data(GMemoryInputStream *stream, const void *data, gssize len, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_memory_input_stream_add_data$handle() {
        return g_memory_input_stream_add_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_memory_input_stream_add_data(GMemoryInputStream *stream, const void *data, gssize len, GDestroyNotify destroy)
     * }
     */
    public static void g_memory_input_stream_add_data(MemorySegment stream, MemorySegment data, long len, MemorySegment destroy) {
        var mh$ = g_memory_input_stream_add_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_input_stream_add_data", stream, data, len, destroy);
            }
            mh$.invokeExact(stream, data, len, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_input_stream_add_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_input_stream_add_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_memory_input_stream_add_bytes(GMemoryInputStream *stream, GBytes *bytes)
     * }
     */
    public static FunctionDescriptor g_memory_input_stream_add_bytes$descriptor() {
        return g_memory_input_stream_add_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_memory_input_stream_add_bytes(GMemoryInputStream *stream, GBytes *bytes)
     * }
     */
    public static MethodHandle g_memory_input_stream_add_bytes$handle() {
        return g_memory_input_stream_add_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_memory_input_stream_add_bytes(GMemoryInputStream *stream, GBytes *bytes)
     * }
     */
    public static void g_memory_input_stream_add_bytes(MemorySegment stream, MemorySegment bytes) {
        var mh$ = g_memory_input_stream_add_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_input_stream_add_bytes", stream, bytes);
            }
            mh$.invokeExact(stream, bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_memory_monitor_get_type()
     * }
     */
    public static FunctionDescriptor g_memory_monitor_get_type$descriptor() {
        return g_memory_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_memory_monitor_get_type()
     * }
     */
    public static MethodHandle g_memory_monitor_get_type$handle() {
        return g_memory_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_memory_monitor_get_type()
     * }
     */
    public static long g_memory_monitor_get_type() {
        var mh$ = g_memory_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GMemoryMonitor *GMemoryMonitor_autoptr
     * }
     */
    public static final AddressLayout GMemoryMonitor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMemoryMonitor_listautoptr
     * }
     */
    public static final AddressLayout GMemoryMonitor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMemoryMonitor_slistautoptr
     * }
     */
    public static final AddressLayout GMemoryMonitor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMemoryMonitor_queueautoptr
     * }
     */
    public static final AddressLayout GMemoryMonitor_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_memory_monitor_dup_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_monitor_dup_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMemoryMonitor *g_memory_monitor_dup_default()
     * }
     */
    public static FunctionDescriptor g_memory_monitor_dup_default$descriptor() {
        return g_memory_monitor_dup_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMemoryMonitor *g_memory_monitor_dup_default()
     * }
     */
    public static MethodHandle g_memory_monitor_dup_default$handle() {
        return g_memory_monitor_dup_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMemoryMonitor *g_memory_monitor_dup_default()
     * }
     */
    public static MemorySegment g_memory_monitor_dup_default() {
        var mh$ = g_memory_monitor_dup_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_monitor_dup_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_memory_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_get_type$descriptor() {
        return g_memory_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_memory_output_stream_get_type()
     * }
     */
    public static MethodHandle g_memory_output_stream_get_type$handle() {
        return g_memory_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_memory_output_stream_get_type()
     * }
     */
    public static long g_memory_output_stream_get_type() {
        var mh$ = g_memory_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_memory_output_stream_new(gpointer data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function)
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_new$descriptor() {
        return g_memory_output_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_memory_output_stream_new(gpointer data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function)
     * }
     */
    public static MethodHandle g_memory_output_stream_new$handle() {
        return g_memory_output_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_memory_output_stream_new(gpointer data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function)
     * }
     */
    public static MemorySegment g_memory_output_stream_new(MemorySegment data, long size, MemorySegment realloc_function, MemorySegment destroy_function) {
        var mh$ = g_memory_output_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_new", data, size, realloc_function, destroy_function);
            }
            return (MemorySegment)mh$.invokeExact(data, size, realloc_function, destroy_function);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_new_resizable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_new_resizable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_memory_output_stream_new_resizable()
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_new_resizable$descriptor() {
        return g_memory_output_stream_new_resizable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_memory_output_stream_new_resizable()
     * }
     */
    public static MethodHandle g_memory_output_stream_new_resizable$handle() {
        return g_memory_output_stream_new_resizable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_memory_output_stream_new_resizable()
     * }
     */
    public static MemorySegment g_memory_output_stream_new_resizable() {
        var mh$ = g_memory_output_stream_new_resizable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_new_resizable");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_memory_output_stream_get_data(GMemoryOutputStream *ostream)
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_get_data$descriptor() {
        return g_memory_output_stream_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_memory_output_stream_get_data(GMemoryOutputStream *ostream)
     * }
     */
    public static MethodHandle g_memory_output_stream_get_data$handle() {
        return g_memory_output_stream_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_memory_output_stream_get_data(GMemoryOutputStream *ostream)
     * }
     */
    public static MemorySegment g_memory_output_stream_get_data(MemorySegment ostream) {
        var mh$ = g_memory_output_stream_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_get_data", ostream);
            }
            return (MemorySegment)mh$.invokeExact(ostream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_memory_output_stream_get_size(GMemoryOutputStream *ostream)
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_get_size$descriptor() {
        return g_memory_output_stream_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_memory_output_stream_get_size(GMemoryOutputStream *ostream)
     * }
     */
    public static MethodHandle g_memory_output_stream_get_size$handle() {
        return g_memory_output_stream_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_memory_output_stream_get_size(GMemoryOutputStream *ostream)
     * }
     */
    public static long g_memory_output_stream_get_size(MemorySegment ostream) {
        var mh$ = g_memory_output_stream_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_get_size", ostream);
            }
            return (long)mh$.invokeExact(ostream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_get_data_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_get_data_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_memory_output_stream_get_data_size(GMemoryOutputStream *ostream)
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_get_data_size$descriptor() {
        return g_memory_output_stream_get_data_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_memory_output_stream_get_data_size(GMemoryOutputStream *ostream)
     * }
     */
    public static MethodHandle g_memory_output_stream_get_data_size$handle() {
        return g_memory_output_stream_get_data_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_memory_output_stream_get_data_size(GMemoryOutputStream *ostream)
     * }
     */
    public static long g_memory_output_stream_get_data_size(MemorySegment ostream) {
        var mh$ = g_memory_output_stream_get_data_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_get_data_size", ostream);
            }
            return (long)mh$.invokeExact(ostream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_steal_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_steal_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_memory_output_stream_steal_data(GMemoryOutputStream *ostream)
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_steal_data$descriptor() {
        return g_memory_output_stream_steal_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_memory_output_stream_steal_data(GMemoryOutputStream *ostream)
     * }
     */
    public static MethodHandle g_memory_output_stream_steal_data$handle() {
        return g_memory_output_stream_steal_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_memory_output_stream_steal_data(GMemoryOutputStream *ostream)
     * }
     */
    public static MemorySegment g_memory_output_stream_steal_data(MemorySegment ostream) {
        var mh$ = g_memory_output_stream_steal_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_steal_data", ostream);
            }
            return (MemorySegment)mh$.invokeExact(ostream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_memory_output_stream_steal_as_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_memory_output_stream_steal_as_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_memory_output_stream_steal_as_bytes(GMemoryOutputStream *ostream)
     * }
     */
    public static FunctionDescriptor g_memory_output_stream_steal_as_bytes$descriptor() {
        return g_memory_output_stream_steal_as_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_memory_output_stream_steal_as_bytes(GMemoryOutputStream *ostream)
     * }
     */
    public static MethodHandle g_memory_output_stream_steal_as_bytes$handle() {
        return g_memory_output_stream_steal_as_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_memory_output_stream_steal_as_bytes(GMemoryOutputStream *ostream)
     * }
     */
    public static MemorySegment g_memory_output_stream_steal_as_bytes(MemorySegment ostream) {
        var mh$ = g_memory_output_stream_steal_as_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_memory_output_stream_steal_as_bytes", ostream);
            }
            return (MemorySegment)mh$.invokeExact(ostream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_model_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_menu_model_get_type()
     * }
     */
    public static FunctionDescriptor g_menu_model_get_type$descriptor() {
        return g_menu_model_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_menu_model_get_type()
     * }
     */
    public static MethodHandle g_menu_model_get_type$handle() {
        return g_menu_model_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_menu_model_get_type()
     * }
     */
    public static long g_menu_model_get_type() {
        var mh$ = g_menu_model_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_model_is_mutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_is_mutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_menu_model_is_mutable(GMenuModel *model)
     * }
     */
    public static FunctionDescriptor g_menu_model_is_mutable$descriptor() {
        return g_menu_model_is_mutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_menu_model_is_mutable(GMenuModel *model)
     * }
     */
    public static MethodHandle g_menu_model_is_mutable$handle() {
        return g_menu_model_is_mutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_menu_model_is_mutable(GMenuModel *model)
     * }
     */
    public static int g_menu_model_is_mutable(MemorySegment model) {
        var mh$ = g_menu_model_is_mutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_is_mutable", model);
            }
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_model_get_n_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_get_n_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_menu_model_get_n_items(GMenuModel *model)
     * }
     */
    public static FunctionDescriptor g_menu_model_get_n_items$descriptor() {
        return g_menu_model_get_n_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_menu_model_get_n_items(GMenuModel *model)
     * }
     */
    public static MethodHandle g_menu_model_get_n_items$handle() {
        return g_menu_model_get_n_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_menu_model_get_n_items(GMenuModel *model)
     * }
     */
    public static int g_menu_model_get_n_items(MemorySegment model) {
        var mh$ = g_menu_model_get_n_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_get_n_items", model);
            }
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_model_iterate_item_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_iterate_item_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuAttributeIter *g_menu_model_iterate_item_attributes(GMenuModel *model, gint item_index)
     * }
     */
    public static FunctionDescriptor g_menu_model_iterate_item_attributes$descriptor() {
        return g_menu_model_iterate_item_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuAttributeIter *g_menu_model_iterate_item_attributes(GMenuModel *model, gint item_index)
     * }
     */
    public static MethodHandle g_menu_model_iterate_item_attributes$handle() {
        return g_menu_model_iterate_item_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuAttributeIter *g_menu_model_iterate_item_attributes(GMenuModel *model, gint item_index)
     * }
     */
    public static MemorySegment g_menu_model_iterate_item_attributes(MemorySegment model, int item_index) {
        var mh$ = g_menu_model_iterate_item_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_iterate_item_attributes", model, item_index);
            }
            return (MemorySegment)mh$.invokeExact(model, item_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_model_get_item_attribute_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_get_item_attribute_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_menu_model_get_item_attribute_value(GMenuModel *model, gint item_index, const gchar *attribute, const GVariantType *expected_type)
     * }
     */
    public static FunctionDescriptor g_menu_model_get_item_attribute_value$descriptor() {
        return g_menu_model_get_item_attribute_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_menu_model_get_item_attribute_value(GMenuModel *model, gint item_index, const gchar *attribute, const GVariantType *expected_type)
     * }
     */
    public static MethodHandle g_menu_model_get_item_attribute_value$handle() {
        return g_menu_model_get_item_attribute_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_menu_model_get_item_attribute_value(GMenuModel *model, gint item_index, const gchar *attribute, const GVariantType *expected_type)
     * }
     */
    public static MemorySegment g_menu_model_get_item_attribute_value(MemorySegment model, int item_index, MemorySegment attribute, MemorySegment expected_type) {
        var mh$ = g_menu_model_get_item_attribute_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_get_item_attribute_value", model, item_index, attribute, expected_type);
            }
            return (MemorySegment)mh$.invokeExact(model, item_index, attribute, expected_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_menu_model_get_item_attribute(GMenuModel *model, gint item_index, const gchar *attribute, const gchar *format_string, ...)
     * }
     */
    public static class g_menu_model_get_item_attribute {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_menu_model_get_item_attribute");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_menu_model_get_item_attribute(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_menu_model_get_item_attribute(GMenuModel *model, gint item_index, const gchar *attribute, const gchar *format_string, ...)
         * }
         */
        public static g_menu_model_get_item_attribute makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_menu_model_get_item_attribute(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment model, int item_index, MemorySegment attribute, MemorySegment format_string, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_menu_model_get_item_attribute", model, item_index, attribute, format_string, x4);
                }
                return (int)spreader.invokeExact(model, item_index, attribute, format_string, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_menu_model_iterate_item_links {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_iterate_item_links"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuLinkIter *g_menu_model_iterate_item_links(GMenuModel *model, gint item_index)
     * }
     */
    public static FunctionDescriptor g_menu_model_iterate_item_links$descriptor() {
        return g_menu_model_iterate_item_links.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuLinkIter *g_menu_model_iterate_item_links(GMenuModel *model, gint item_index)
     * }
     */
    public static MethodHandle g_menu_model_iterate_item_links$handle() {
        return g_menu_model_iterate_item_links.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuLinkIter *g_menu_model_iterate_item_links(GMenuModel *model, gint item_index)
     * }
     */
    public static MemorySegment g_menu_model_iterate_item_links(MemorySegment model, int item_index) {
        var mh$ = g_menu_model_iterate_item_links.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_iterate_item_links", model, item_index);
            }
            return (MemorySegment)mh$.invokeExact(model, item_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_model_get_item_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_get_item_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_model_get_item_link(GMenuModel *model, gint item_index, const gchar *link)
     * }
     */
    public static FunctionDescriptor g_menu_model_get_item_link$descriptor() {
        return g_menu_model_get_item_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_model_get_item_link(GMenuModel *model, gint item_index, const gchar *link)
     * }
     */
    public static MethodHandle g_menu_model_get_item_link$handle() {
        return g_menu_model_get_item_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_model_get_item_link(GMenuModel *model, gint item_index, const gchar *link)
     * }
     */
    public static MemorySegment g_menu_model_get_item_link(MemorySegment model, int item_index, MemorySegment link) {
        var mh$ = g_menu_model_get_item_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_get_item_link", model, item_index, link);
            }
            return (MemorySegment)mh$.invokeExact(model, item_index, link);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_model_items_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_model_items_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_model_items_changed(GMenuModel *model, gint position, gint removed, gint added)
     * }
     */
    public static FunctionDescriptor g_menu_model_items_changed$descriptor() {
        return g_menu_model_items_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_model_items_changed(GMenuModel *model, gint position, gint removed, gint added)
     * }
     */
    public static MethodHandle g_menu_model_items_changed$handle() {
        return g_menu_model_items_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_model_items_changed(GMenuModel *model, gint position, gint removed, gint added)
     * }
     */
    public static void g_menu_model_items_changed(MemorySegment model, int position, int removed, int added) {
        var mh$ = g_menu_model_items_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_model_items_changed", model, position, removed, added);
            }
            mh$.invokeExact(model, position, removed, added);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_attribute_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_attribute_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_menu_attribute_iter_get_type()
     * }
     */
    public static FunctionDescriptor g_menu_attribute_iter_get_type$descriptor() {
        return g_menu_attribute_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_menu_attribute_iter_get_type()
     * }
     */
    public static MethodHandle g_menu_attribute_iter_get_type$handle() {
        return g_menu_attribute_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_menu_attribute_iter_get_type()
     * }
     */
    public static long g_menu_attribute_iter_get_type() {
        var mh$ = g_menu_attribute_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_attribute_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_attribute_iter_get_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_attribute_iter_get_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_menu_attribute_iter_get_next(GMenuAttributeIter *iter, const gchar **out_name, GVariant **value)
     * }
     */
    public static FunctionDescriptor g_menu_attribute_iter_get_next$descriptor() {
        return g_menu_attribute_iter_get_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_menu_attribute_iter_get_next(GMenuAttributeIter *iter, const gchar **out_name, GVariant **value)
     * }
     */
    public static MethodHandle g_menu_attribute_iter_get_next$handle() {
        return g_menu_attribute_iter_get_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_menu_attribute_iter_get_next(GMenuAttributeIter *iter, const gchar **out_name, GVariant **value)
     * }
     */
    public static int g_menu_attribute_iter_get_next(MemorySegment iter, MemorySegment out_name, MemorySegment value) {
        var mh$ = g_menu_attribute_iter_get_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_attribute_iter_get_next", iter, out_name, value);
            }
            return (int)mh$.invokeExact(iter, out_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_attribute_iter_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_attribute_iter_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_menu_attribute_iter_next(GMenuAttributeIter *iter)
     * }
     */
    public static FunctionDescriptor g_menu_attribute_iter_next$descriptor() {
        return g_menu_attribute_iter_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_menu_attribute_iter_next(GMenuAttributeIter *iter)
     * }
     */
    public static MethodHandle g_menu_attribute_iter_next$handle() {
        return g_menu_attribute_iter_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_menu_attribute_iter_next(GMenuAttributeIter *iter)
     * }
     */
    public static int g_menu_attribute_iter_next(MemorySegment iter) {
        var mh$ = g_menu_attribute_iter_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_attribute_iter_next", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_attribute_iter_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_attribute_iter_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_menu_attribute_iter_get_name(GMenuAttributeIter *iter)
     * }
     */
    public static FunctionDescriptor g_menu_attribute_iter_get_name$descriptor() {
        return g_menu_attribute_iter_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_menu_attribute_iter_get_name(GMenuAttributeIter *iter)
     * }
     */
    public static MethodHandle g_menu_attribute_iter_get_name$handle() {
        return g_menu_attribute_iter_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_menu_attribute_iter_get_name(GMenuAttributeIter *iter)
     * }
     */
    public static MemorySegment g_menu_attribute_iter_get_name(MemorySegment iter) {
        var mh$ = g_menu_attribute_iter_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_attribute_iter_get_name", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_attribute_iter_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_attribute_iter_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_menu_attribute_iter_get_value(GMenuAttributeIter *iter)
     * }
     */
    public static FunctionDescriptor g_menu_attribute_iter_get_value$descriptor() {
        return g_menu_attribute_iter_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_menu_attribute_iter_get_value(GMenuAttributeIter *iter)
     * }
     */
    public static MethodHandle g_menu_attribute_iter_get_value$handle() {
        return g_menu_attribute_iter_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_menu_attribute_iter_get_value(GMenuAttributeIter *iter)
     * }
     */
    public static MemorySegment g_menu_attribute_iter_get_value(MemorySegment iter) {
        var mh$ = g_menu_attribute_iter_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_attribute_iter_get_value", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_link_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_link_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_menu_link_iter_get_type()
     * }
     */
    public static FunctionDescriptor g_menu_link_iter_get_type$descriptor() {
        return g_menu_link_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_menu_link_iter_get_type()
     * }
     */
    public static MethodHandle g_menu_link_iter_get_type$handle() {
        return g_menu_link_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_menu_link_iter_get_type()
     * }
     */
    public static long g_menu_link_iter_get_type() {
        var mh$ = g_menu_link_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_link_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_link_iter_get_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_link_iter_get_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_menu_link_iter_get_next(GMenuLinkIter *iter, const gchar **out_link, GMenuModel **value)
     * }
     */
    public static FunctionDescriptor g_menu_link_iter_get_next$descriptor() {
        return g_menu_link_iter_get_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_menu_link_iter_get_next(GMenuLinkIter *iter, const gchar **out_link, GMenuModel **value)
     * }
     */
    public static MethodHandle g_menu_link_iter_get_next$handle() {
        return g_menu_link_iter_get_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_menu_link_iter_get_next(GMenuLinkIter *iter, const gchar **out_link, GMenuModel **value)
     * }
     */
    public static int g_menu_link_iter_get_next(MemorySegment iter, MemorySegment out_link, MemorySegment value) {
        var mh$ = g_menu_link_iter_get_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_link_iter_get_next", iter, out_link, value);
            }
            return (int)mh$.invokeExact(iter, out_link, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_link_iter_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_link_iter_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_menu_link_iter_next(GMenuLinkIter *iter)
     * }
     */
    public static FunctionDescriptor g_menu_link_iter_next$descriptor() {
        return g_menu_link_iter_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_menu_link_iter_next(GMenuLinkIter *iter)
     * }
     */
    public static MethodHandle g_menu_link_iter_next$handle() {
        return g_menu_link_iter_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_menu_link_iter_next(GMenuLinkIter *iter)
     * }
     */
    public static int g_menu_link_iter_next(MemorySegment iter) {
        var mh$ = g_menu_link_iter_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_link_iter_next", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_link_iter_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_link_iter_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_menu_link_iter_get_name(GMenuLinkIter *iter)
     * }
     */
    public static FunctionDescriptor g_menu_link_iter_get_name$descriptor() {
        return g_menu_link_iter_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_menu_link_iter_get_name(GMenuLinkIter *iter)
     * }
     */
    public static MethodHandle g_menu_link_iter_get_name$handle() {
        return g_menu_link_iter_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_menu_link_iter_get_name(GMenuLinkIter *iter)
     * }
     */
    public static MemorySegment g_menu_link_iter_get_name(MemorySegment iter) {
        var mh$ = g_menu_link_iter_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_link_iter_get_name", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_link_iter_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_link_iter_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_link_iter_get_value(GMenuLinkIter *iter)
     * }
     */
    public static FunctionDescriptor g_menu_link_iter_get_value$descriptor() {
        return g_menu_link_iter_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_link_iter_get_value(GMenuLinkIter *iter)
     * }
     */
    public static MethodHandle g_menu_link_iter_get_value$handle() {
        return g_menu_link_iter_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_link_iter_get_value(GMenuLinkIter *iter)
     * }
     */
    public static MemorySegment g_menu_link_iter_get_value(MemorySegment iter) {
        var mh$ = g_menu_link_iter_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_link_iter_get_value", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_menu_get_type()
     * }
     */
    public static FunctionDescriptor g_menu_get_type$descriptor() {
        return g_menu_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_menu_get_type()
     * }
     */
    public static MethodHandle g_menu_get_type$handle() {
        return g_menu_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_menu_get_type()
     * }
     */
    public static long g_menu_get_type() {
        var mh$ = g_menu_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenu *g_menu_new()
     * }
     */
    public static FunctionDescriptor g_menu_new$descriptor() {
        return g_menu_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenu *g_menu_new()
     * }
     */
    public static MethodHandle g_menu_new$handle() {
        return g_menu_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenu *g_menu_new()
     * }
     */
    public static MemorySegment g_menu_new() {
        var mh$ = g_menu_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_freeze {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_freeze"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_freeze(GMenu *menu)
     * }
     */
    public static FunctionDescriptor g_menu_freeze$descriptor() {
        return g_menu_freeze.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_freeze(GMenu *menu)
     * }
     */
    public static MethodHandle g_menu_freeze$handle() {
        return g_menu_freeze.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_freeze(GMenu *menu)
     * }
     */
    public static void g_menu_freeze(MemorySegment menu) {
        var mh$ = g_menu_freeze.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_freeze", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_insert_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_insert_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_insert_item(GMenu *menu, gint position, GMenuItem *item)
     * }
     */
    public static FunctionDescriptor g_menu_insert_item$descriptor() {
        return g_menu_insert_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_insert_item(GMenu *menu, gint position, GMenuItem *item)
     * }
     */
    public static MethodHandle g_menu_insert_item$handle() {
        return g_menu_insert_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_insert_item(GMenu *menu, gint position, GMenuItem *item)
     * }
     */
    public static void g_menu_insert_item(MemorySegment menu, int position, MemorySegment item) {
        var mh$ = g_menu_insert_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_insert_item", menu, position, item);
            }
            mh$.invokeExact(menu, position, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_prepend_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_prepend_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_prepend_item(GMenu *menu, GMenuItem *item)
     * }
     */
    public static FunctionDescriptor g_menu_prepend_item$descriptor() {
        return g_menu_prepend_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_prepend_item(GMenu *menu, GMenuItem *item)
     * }
     */
    public static MethodHandle g_menu_prepend_item$handle() {
        return g_menu_prepend_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_prepend_item(GMenu *menu, GMenuItem *item)
     * }
     */
    public static void g_menu_prepend_item(MemorySegment menu, MemorySegment item) {
        var mh$ = g_menu_prepend_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_prepend_item", menu, item);
            }
            mh$.invokeExact(menu, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_append_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_append_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_append_item(GMenu *menu, GMenuItem *item)
     * }
     */
    public static FunctionDescriptor g_menu_append_item$descriptor() {
        return g_menu_append_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_append_item(GMenu *menu, GMenuItem *item)
     * }
     */
    public static MethodHandle g_menu_append_item$handle() {
        return g_menu_append_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_append_item(GMenu *menu, GMenuItem *item)
     * }
     */
    public static void g_menu_append_item(MemorySegment menu, MemorySegment item) {
        var mh$ = g_menu_append_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_append_item", menu, item);
            }
            mh$.invokeExact(menu, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_remove(GMenu *menu, gint position)
     * }
     */
    public static FunctionDescriptor g_menu_remove$descriptor() {
        return g_menu_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_remove(GMenu *menu, gint position)
     * }
     */
    public static MethodHandle g_menu_remove$handle() {
        return g_menu_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_remove(GMenu *menu, gint position)
     * }
     */
    public static void g_menu_remove(MemorySegment menu, int position) {
        var mh$ = g_menu_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_remove", menu, position);
            }
            mh$.invokeExact(menu, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_remove_all(GMenu *menu)
     * }
     */
    public static FunctionDescriptor g_menu_remove_all$descriptor() {
        return g_menu_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_remove_all(GMenu *menu)
     * }
     */
    public static MethodHandle g_menu_remove_all$handle() {
        return g_menu_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_remove_all(GMenu *menu)
     * }
     */
    public static void g_menu_remove_all(MemorySegment menu) {
        var mh$ = g_menu_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_remove_all", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_insert(GMenu *menu, gint position, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static FunctionDescriptor g_menu_insert$descriptor() {
        return g_menu_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_insert(GMenu *menu, gint position, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static MethodHandle g_menu_insert$handle() {
        return g_menu_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_insert(GMenu *menu, gint position, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static void g_menu_insert(MemorySegment menu, int position, MemorySegment label, MemorySegment detailed_action) {
        var mh$ = g_menu_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_insert", menu, position, label, detailed_action);
            }
            mh$.invokeExact(menu, position, label, detailed_action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_prepend(GMenu *menu, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static FunctionDescriptor g_menu_prepend$descriptor() {
        return g_menu_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_prepend(GMenu *menu, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static MethodHandle g_menu_prepend$handle() {
        return g_menu_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_prepend(GMenu *menu, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static void g_menu_prepend(MemorySegment menu, MemorySegment label, MemorySegment detailed_action) {
        var mh$ = g_menu_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_prepend", menu, label, detailed_action);
            }
            mh$.invokeExact(menu, label, detailed_action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_append(GMenu *menu, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static FunctionDescriptor g_menu_append$descriptor() {
        return g_menu_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_append(GMenu *menu, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static MethodHandle g_menu_append$handle() {
        return g_menu_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_append(GMenu *menu, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static void g_menu_append(MemorySegment menu, MemorySegment label, MemorySegment detailed_action) {
        var mh$ = g_menu_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_append", menu, label, detailed_action);
            }
            mh$.invokeExact(menu, label, detailed_action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_insert_section {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_insert_section"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_insert_section(GMenu *menu, gint position, const gchar *label, GMenuModel *section)
     * }
     */
    public static FunctionDescriptor g_menu_insert_section$descriptor() {
        return g_menu_insert_section.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_insert_section(GMenu *menu, gint position, const gchar *label, GMenuModel *section)
     * }
     */
    public static MethodHandle g_menu_insert_section$handle() {
        return g_menu_insert_section.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_insert_section(GMenu *menu, gint position, const gchar *label, GMenuModel *section)
     * }
     */
    public static void g_menu_insert_section(MemorySegment menu, int position, MemorySegment label, MemorySegment section) {
        var mh$ = g_menu_insert_section.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_insert_section", menu, position, label, section);
            }
            mh$.invokeExact(menu, position, label, section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_prepend_section {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_prepend_section"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_prepend_section(GMenu *menu, const gchar *label, GMenuModel *section)
     * }
     */
    public static FunctionDescriptor g_menu_prepend_section$descriptor() {
        return g_menu_prepend_section.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_prepend_section(GMenu *menu, const gchar *label, GMenuModel *section)
     * }
     */
    public static MethodHandle g_menu_prepend_section$handle() {
        return g_menu_prepend_section.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_prepend_section(GMenu *menu, const gchar *label, GMenuModel *section)
     * }
     */
    public static void g_menu_prepend_section(MemorySegment menu, MemorySegment label, MemorySegment section) {
        var mh$ = g_menu_prepend_section.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_prepend_section", menu, label, section);
            }
            mh$.invokeExact(menu, label, section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_append_section {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_append_section"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_append_section(GMenu *menu, const gchar *label, GMenuModel *section)
     * }
     */
    public static FunctionDescriptor g_menu_append_section$descriptor() {
        return g_menu_append_section.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_append_section(GMenu *menu, const gchar *label, GMenuModel *section)
     * }
     */
    public static MethodHandle g_menu_append_section$handle() {
        return g_menu_append_section.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_append_section(GMenu *menu, const gchar *label, GMenuModel *section)
     * }
     */
    public static void g_menu_append_section(MemorySegment menu, MemorySegment label, MemorySegment section) {
        var mh$ = g_menu_append_section.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_append_section", menu, label, section);
            }
            mh$.invokeExact(menu, label, section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_insert_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_insert_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_insert_submenu(GMenu *menu, gint position, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static FunctionDescriptor g_menu_insert_submenu$descriptor() {
        return g_menu_insert_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_insert_submenu(GMenu *menu, gint position, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static MethodHandle g_menu_insert_submenu$handle() {
        return g_menu_insert_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_insert_submenu(GMenu *menu, gint position, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static void g_menu_insert_submenu(MemorySegment menu, int position, MemorySegment label, MemorySegment submenu) {
        var mh$ = g_menu_insert_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_insert_submenu", menu, position, label, submenu);
            }
            mh$.invokeExact(menu, position, label, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_prepend_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_prepend_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_prepend_submenu(GMenu *menu, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static FunctionDescriptor g_menu_prepend_submenu$descriptor() {
        return g_menu_prepend_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_prepend_submenu(GMenu *menu, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static MethodHandle g_menu_prepend_submenu$handle() {
        return g_menu_prepend_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_prepend_submenu(GMenu *menu, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static void g_menu_prepend_submenu(MemorySegment menu, MemorySegment label, MemorySegment submenu) {
        var mh$ = g_menu_prepend_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_prepend_submenu", menu, label, submenu);
            }
            mh$.invokeExact(menu, label, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_append_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_append_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_append_submenu(GMenu *menu, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static FunctionDescriptor g_menu_append_submenu$descriptor() {
        return g_menu_append_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_append_submenu(GMenu *menu, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static MethodHandle g_menu_append_submenu$handle() {
        return g_menu_append_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_append_submenu(GMenu *menu, const gchar *label, GMenuModel *submenu)
     * }
     */
    public static void g_menu_append_submenu(MemorySegment menu, MemorySegment label, MemorySegment submenu) {
        var mh$ = g_menu_append_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_append_submenu", menu, label, submenu);
            }
            mh$.invokeExact(menu, label, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_menu_item_get_type()
     * }
     */
    public static FunctionDescriptor g_menu_item_get_type$descriptor() {
        return g_menu_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_menu_item_get_type()
     * }
     */
    public static MethodHandle g_menu_item_get_type$handle() {
        return g_menu_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_menu_item_get_type()
     * }
     */
    public static long g_menu_item_get_type() {
        var mh$ = g_menu_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new(const gchar *label, const gchar *detailed_action)
     * }
     */
    public static FunctionDescriptor g_menu_item_new$descriptor() {
        return g_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new(const gchar *label, const gchar *detailed_action)
     * }
     */
    public static MethodHandle g_menu_item_new$handle() {
        return g_menu_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new(const gchar *label, const gchar *detailed_action)
     * }
     */
    public static MemorySegment g_menu_item_new(MemorySegment label, MemorySegment detailed_action) {
        var mh$ = g_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_new", label, detailed_action);
            }
            return (MemorySegment)mh$.invokeExact(label, detailed_action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_new_from_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_new_from_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_from_model(GMenuModel *model, gint item_index)
     * }
     */
    public static FunctionDescriptor g_menu_item_new_from_model$descriptor() {
        return g_menu_item_new_from_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_from_model(GMenuModel *model, gint item_index)
     * }
     */
    public static MethodHandle g_menu_item_new_from_model$handle() {
        return g_menu_item_new_from_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_from_model(GMenuModel *model, gint item_index)
     * }
     */
    public static MemorySegment g_menu_item_new_from_model(MemorySegment model, int item_index) {
        var mh$ = g_menu_item_new_from_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_new_from_model", model, item_index);
            }
            return (MemorySegment)mh$.invokeExact(model, item_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_new_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_new_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_submenu(const gchar *label, GMenuModel *submenu)
     * }
     */
    public static FunctionDescriptor g_menu_item_new_submenu$descriptor() {
        return g_menu_item_new_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_submenu(const gchar *label, GMenuModel *submenu)
     * }
     */
    public static MethodHandle g_menu_item_new_submenu$handle() {
        return g_menu_item_new_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_submenu(const gchar *label, GMenuModel *submenu)
     * }
     */
    public static MemorySegment g_menu_item_new_submenu(MemorySegment label, MemorySegment submenu) {
        var mh$ = g_menu_item_new_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_new_submenu", label, submenu);
            }
            return (MemorySegment)mh$.invokeExact(label, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_new_section {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_new_section"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_section(const gchar *label, GMenuModel *section)
     * }
     */
    public static FunctionDescriptor g_menu_item_new_section$descriptor() {
        return g_menu_item_new_section.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_section(const gchar *label, GMenuModel *section)
     * }
     */
    public static MethodHandle g_menu_item_new_section$handle() {
        return g_menu_item_new_section.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuItem *g_menu_item_new_section(const gchar *label, GMenuModel *section)
     * }
     */
    public static MemorySegment g_menu_item_new_section(MemorySegment label, MemorySegment section) {
        var mh$ = g_menu_item_new_section.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_new_section", label, section);
            }
            return (MemorySegment)mh$.invokeExact(label, section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_get_attribute_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_get_attribute_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_menu_item_get_attribute_value(GMenuItem *menu_item, const gchar *attribute, const GVariantType *expected_type)
     * }
     */
    public static FunctionDescriptor g_menu_item_get_attribute_value$descriptor() {
        return g_menu_item_get_attribute_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_menu_item_get_attribute_value(GMenuItem *menu_item, const gchar *attribute, const GVariantType *expected_type)
     * }
     */
    public static MethodHandle g_menu_item_get_attribute_value$handle() {
        return g_menu_item_get_attribute_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_menu_item_get_attribute_value(GMenuItem *menu_item, const gchar *attribute, const GVariantType *expected_type)
     * }
     */
    public static MemorySegment g_menu_item_get_attribute_value(MemorySegment menu_item, MemorySegment attribute, MemorySegment expected_type) {
        var mh$ = g_menu_item_get_attribute_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_get_attribute_value", menu_item, attribute, expected_type);
            }
            return (MemorySegment)mh$.invokeExact(menu_item, attribute, expected_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_menu_item_get_attribute(GMenuItem *menu_item, const gchar *attribute, const gchar *format_string, ...)
     * }
     */
    public static class g_menu_item_get_attribute {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_menu_item_get_attribute");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_menu_item_get_attribute(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_menu_item_get_attribute(GMenuItem *menu_item, const gchar *attribute, const gchar *format_string, ...)
         * }
         */
        public static g_menu_item_get_attribute makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_menu_item_get_attribute(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment menu_item, MemorySegment attribute, MemorySegment format_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_menu_item_get_attribute", menu_item, attribute, format_string, x3);
                }
                return (int)spreader.invokeExact(menu_item, attribute, format_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_menu_item_get_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_get_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_item_get_link(GMenuItem *menu_item, const gchar *link)
     * }
     */
    public static FunctionDescriptor g_menu_item_get_link$descriptor() {
        return g_menu_item_get_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_item_get_link(GMenuItem *menu_item, const gchar *link)
     * }
     */
    public static MethodHandle g_menu_item_get_link$handle() {
        return g_menu_item_get_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuModel *g_menu_item_get_link(GMenuItem *menu_item, const gchar *link)
     * }
     */
    public static MemorySegment g_menu_item_get_link(MemorySegment menu_item, MemorySegment link) {
        var mh$ = g_menu_item_get_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_get_link", menu_item, link);
            }
            return (MemorySegment)mh$.invokeExact(menu_item, link);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_set_attribute_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_attribute_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_attribute_value(GMenuItem *menu_item, const gchar *attribute, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_attribute_value$descriptor() {
        return g_menu_item_set_attribute_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_attribute_value(GMenuItem *menu_item, const gchar *attribute, GVariant *value)
     * }
     */
    public static MethodHandle g_menu_item_set_attribute_value$handle() {
        return g_menu_item_set_attribute_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_attribute_value(GMenuItem *menu_item, const gchar *attribute, GVariant *value)
     * }
     */
    public static void g_menu_item_set_attribute_value(MemorySegment menu_item, MemorySegment attribute, MemorySegment value) {
        var mh$ = g_menu_item_set_attribute_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_attribute_value", menu_item, attribute, value);
            }
            mh$.invokeExact(menu_item, attribute, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_attribute(GMenuItem *menu_item, const gchar *attribute, const gchar *format_string, ...)
     * }
     */
    public static class g_menu_item_set_attribute {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_menu_item_set_attribute");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_menu_item_set_attribute(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_menu_item_set_attribute(GMenuItem *menu_item, const gchar *attribute, const gchar *format_string, ...)
         * }
         */
        public static g_menu_item_set_attribute makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_menu_item_set_attribute(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment menu_item, MemorySegment attribute, MemorySegment format_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_menu_item_set_attribute", menu_item, attribute, format_string, x3);
                }
                spreader.invokeExact(menu_item, attribute, format_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_menu_item_set_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_link(GMenuItem *menu_item, const gchar *link, GMenuModel *model)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_link$descriptor() {
        return g_menu_item_set_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_link(GMenuItem *menu_item, const gchar *link, GMenuModel *model)
     * }
     */
    public static MethodHandle g_menu_item_set_link$handle() {
        return g_menu_item_set_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_link(GMenuItem *menu_item, const gchar *link, GMenuModel *model)
     * }
     */
    public static void g_menu_item_set_link(MemorySegment menu_item, MemorySegment link, MemorySegment model) {
        var mh$ = g_menu_item_set_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_link", menu_item, link, model);
            }
            mh$.invokeExact(menu_item, link, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_label(GMenuItem *menu_item, const gchar *label)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_label$descriptor() {
        return g_menu_item_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_label(GMenuItem *menu_item, const gchar *label)
     * }
     */
    public static MethodHandle g_menu_item_set_label$handle() {
        return g_menu_item_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_label(GMenuItem *menu_item, const gchar *label)
     * }
     */
    public static void g_menu_item_set_label(MemorySegment menu_item, MemorySegment label) {
        var mh$ = g_menu_item_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_label", menu_item, label);
            }
            mh$.invokeExact(menu_item, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_set_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_submenu(GMenuItem *menu_item, GMenuModel *submenu)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_submenu$descriptor() {
        return g_menu_item_set_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_submenu(GMenuItem *menu_item, GMenuModel *submenu)
     * }
     */
    public static MethodHandle g_menu_item_set_submenu$handle() {
        return g_menu_item_set_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_submenu(GMenuItem *menu_item, GMenuModel *submenu)
     * }
     */
    public static void g_menu_item_set_submenu(MemorySegment menu_item, MemorySegment submenu) {
        var mh$ = g_menu_item_set_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_submenu", menu_item, submenu);
            }
            mh$.invokeExact(menu_item, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_set_section {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_section"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_section(GMenuItem *menu_item, GMenuModel *section)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_section$descriptor() {
        return g_menu_item_set_section.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_section(GMenuItem *menu_item, GMenuModel *section)
     * }
     */
    public static MethodHandle g_menu_item_set_section$handle() {
        return g_menu_item_set_section.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_section(GMenuItem *menu_item, GMenuModel *section)
     * }
     */
    public static void g_menu_item_set_section(MemorySegment menu_item, MemorySegment section) {
        var mh$ = g_menu_item_set_section.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_section", menu_item, section);
            }
            mh$.invokeExact(menu_item, section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_set_action_and_target_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_action_and_target_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_action_and_target_value(GMenuItem *menu_item, const gchar *action, GVariant *target_value)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_action_and_target_value$descriptor() {
        return g_menu_item_set_action_and_target_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_action_and_target_value(GMenuItem *menu_item, const gchar *action, GVariant *target_value)
     * }
     */
    public static MethodHandle g_menu_item_set_action_and_target_value$handle() {
        return g_menu_item_set_action_and_target_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_action_and_target_value(GMenuItem *menu_item, const gchar *action, GVariant *target_value)
     * }
     */
    public static void g_menu_item_set_action_and_target_value(MemorySegment menu_item, MemorySegment action, MemorySegment target_value) {
        var mh$ = g_menu_item_set_action_and_target_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_action_and_target_value", menu_item, action, target_value);
            }
            mh$.invokeExact(menu_item, action, target_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_action_and_target(GMenuItem *menu_item, const gchar *action, const gchar *format_string, ...)
     * }
     */
    public static class g_menu_item_set_action_and_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_menu_item_set_action_and_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_menu_item_set_action_and_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_menu_item_set_action_and_target(GMenuItem *menu_item, const gchar *action, const gchar *format_string, ...)
         * }
         */
        public static g_menu_item_set_action_and_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_menu_item_set_action_and_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment menu_item, MemorySegment action, MemorySegment format_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_menu_item_set_action_and_target", menu_item, action, format_string, x3);
                }
                spreader.invokeExact(menu_item, action, format_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_menu_item_set_detailed_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_detailed_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_detailed_action(GMenuItem *menu_item, const gchar *detailed_action)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_detailed_action$descriptor() {
        return g_menu_item_set_detailed_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_detailed_action(GMenuItem *menu_item, const gchar *detailed_action)
     * }
     */
    public static MethodHandle g_menu_item_set_detailed_action$handle() {
        return g_menu_item_set_detailed_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_detailed_action(GMenuItem *menu_item, const gchar *detailed_action)
     * }
     */
    public static void g_menu_item_set_detailed_action(MemorySegment menu_item, MemorySegment detailed_action) {
        var mh$ = g_menu_item_set_detailed_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_detailed_action", menu_item, detailed_action);
            }
            mh$.invokeExact(menu_item, detailed_action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_menu_item_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_menu_item_set_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_icon(GMenuItem *menu_item, GIcon *icon)
     * }
     */
    public static FunctionDescriptor g_menu_item_set_icon$descriptor() {
        return g_menu_item_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_menu_item_set_icon(GMenuItem *menu_item, GIcon *icon)
     * }
     */
    public static MethodHandle g_menu_item_set_icon$handle() {
        return g_menu_item_set_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_menu_item_set_icon(GMenuItem *menu_item, GIcon *icon)
     * }
     */
    public static void g_menu_item_set_icon(MemorySegment menu_item, MemorySegment icon) {
        var mh$ = g_menu_item_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_menu_item_set_icon", menu_item, icon);
            }
            mh$.invokeExact(menu_item, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_export_menu_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_export_menu_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_export_menu_model(GDBusConnection *connection, const gchar *object_path, GMenuModel *menu, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_export_menu_model$descriptor() {
        return g_dbus_connection_export_menu_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_export_menu_model(GDBusConnection *connection, const gchar *object_path, GMenuModel *menu, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_export_menu_model$handle() {
        return g_dbus_connection_export_menu_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_dbus_connection_export_menu_model(GDBusConnection *connection, const gchar *object_path, GMenuModel *menu, GError **error)
     * }
     */
    public static int g_dbus_connection_export_menu_model(MemorySegment connection, MemorySegment object_path, MemorySegment menu, MemorySegment error) {
        var mh$ = g_dbus_connection_export_menu_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_export_menu_model", connection, object_path, menu, error);
            }
            return (int)mh$.invokeExact(connection, object_path, menu, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_unexport_menu_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_unexport_menu_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_unexport_menu_model(GDBusConnection *connection, guint export_id)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_unexport_menu_model$descriptor() {
        return g_dbus_connection_unexport_menu_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_unexport_menu_model(GDBusConnection *connection, guint export_id)
     * }
     */
    public static MethodHandle g_dbus_connection_unexport_menu_model$handle() {
        return g_dbus_connection_unexport_menu_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_unexport_menu_model(GDBusConnection *connection, guint export_id)
     * }
     */
    public static void g_dbus_connection_unexport_menu_model(MemorySegment connection, int export_id) {
        var mh$ = g_dbus_connection_unexport_menu_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_unexport_menu_model", connection, export_id);
            }
            mh$.invokeExact(connection, export_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_mount_get_type()
     * }
     */
    public static FunctionDescriptor g_mount_get_type$descriptor() {
        return g_mount_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_mount_get_type()
     * }
     */
    public static MethodHandle g_mount_get_type$handle() {
        return g_mount_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_mount_get_type()
     * }
     */
    public static long g_mount_get_type() {
        var mh$ = g_mount_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_root"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_mount_get_root(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_root$descriptor() {
        return g_mount_get_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_mount_get_root(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_root$handle() {
        return g_mount_get_root.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_mount_get_root(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_root(MemorySegment mount) {
        var mh$ = g_mount_get_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_root", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_default_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_default_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_mount_get_default_location(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_default_location$descriptor() {
        return g_mount_get_default_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_mount_get_default_location(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_default_location$handle() {
        return g_mount_get_default_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_mount_get_default_location(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_default_location(MemorySegment mount) {
        var mh$ = g_mount_get_default_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_default_location", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_mount_get_name(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_name$descriptor() {
        return g_mount_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_mount_get_name(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_name$handle() {
        return g_mount_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_mount_get_name(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_name(MemorySegment mount) {
        var mh$ = g_mount_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_name", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_mount_get_icon(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_icon$descriptor() {
        return g_mount_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_mount_get_icon(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_icon$handle() {
        return g_mount_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_mount_get_icon(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_icon(MemorySegment mount) {
        var mh$ = g_mount_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_icon", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_symbolic_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_symbolic_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_mount_get_symbolic_icon(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_symbolic_icon$descriptor() {
        return g_mount_get_symbolic_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_mount_get_symbolic_icon(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_symbolic_icon$handle() {
        return g_mount_get_symbolic_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_mount_get_symbolic_icon(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_symbolic_icon(MemorySegment mount) {
        var mh$ = g_mount_get_symbolic_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_symbolic_icon", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_uuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_uuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_mount_get_uuid(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_uuid$descriptor() {
        return g_mount_get_uuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_mount_get_uuid(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_uuid$handle() {
        return g_mount_get_uuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_mount_get_uuid(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_uuid(MemorySegment mount) {
        var mh$ = g_mount_get_uuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_uuid", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_volume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_volume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVolume *g_mount_get_volume(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_volume$descriptor() {
        return g_mount_get_volume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVolume *g_mount_get_volume(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_volume$handle() {
        return g_mount_get_volume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVolume *g_mount_get_volume(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_volume(MemorySegment mount) {
        var mh$ = g_mount_get_volume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_volume", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_drive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_drive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDrive *g_mount_get_drive(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_drive$descriptor() {
        return g_mount_get_drive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDrive *g_mount_get_drive(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_drive$handle() {
        return g_mount_get_drive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDrive *g_mount_get_drive(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_drive(MemorySegment mount) {
        var mh$ = g_mount_get_drive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_drive", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_can_unmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_can_unmount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_can_unmount(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_can_unmount$descriptor() {
        return g_mount_can_unmount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_can_unmount(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_can_unmount$handle() {
        return g_mount_can_unmount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_can_unmount(GMount *mount)
     * }
     */
    public static int g_mount_can_unmount(MemorySegment mount) {
        var mh$ = g_mount_can_unmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_can_unmount", mount);
            }
            return (int)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_can_eject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_can_eject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_can_eject(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_can_eject$descriptor() {
        return g_mount_can_eject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_can_eject(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_can_eject$handle() {
        return g_mount_can_eject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_can_eject(GMount *mount)
     * }
     */
    public static int g_mount_can_eject(MemorySegment mount) {
        var mh$ = g_mount_can_eject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_can_eject", mount);
            }
            return (int)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_unmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_unmount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_unmount(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_mount_unmount$descriptor() {
        return g_mount_unmount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_unmount(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_mount_unmount$handle() {
        return g_mount_unmount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_unmount(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_mount_unmount(MemorySegment mount, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_mount_unmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_unmount", mount, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(mount, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_unmount_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_unmount_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_unmount_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_mount_unmount_finish$descriptor() {
        return g_mount_unmount_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_unmount_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_mount_unmount_finish$handle() {
        return g_mount_unmount_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_unmount_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_mount_unmount_finish(MemorySegment mount, MemorySegment result, MemorySegment error) {
        var mh$ = g_mount_unmount_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_unmount_finish", mount, result, error);
            }
            return (int)mh$.invokeExact(mount, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_eject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_eject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_eject(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_mount_eject$descriptor() {
        return g_mount_eject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_eject(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_mount_eject$handle() {
        return g_mount_eject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_eject(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_mount_eject(MemorySegment mount, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_mount_eject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_eject", mount, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(mount, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_eject_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_eject_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_eject_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_mount_eject_finish$descriptor() {
        return g_mount_eject_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_eject_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_mount_eject_finish$handle() {
        return g_mount_eject_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_eject_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_mount_eject_finish(MemorySegment mount, MemorySegment result, MemorySegment error) {
        var mh$ = g_mount_eject_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_eject_finish", mount, result, error);
            }
            return (int)mh$.invokeExact(mount, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_remount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_remount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_remount(GMount *mount, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_mount_remount$descriptor() {
        return g_mount_remount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_remount(GMount *mount, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_mount_remount$handle() {
        return g_mount_remount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_remount(GMount *mount, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_mount_remount(MemorySegment mount, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_mount_remount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_remount", mount, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(mount, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_remount_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_remount_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_remount_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_mount_remount_finish$descriptor() {
        return g_mount_remount_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_remount_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_mount_remount_finish$handle() {
        return g_mount_remount_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_remount_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_mount_remount_finish(MemorySegment mount, MemorySegment result, MemorySegment error) {
        var mh$ = g_mount_remount_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_remount_finish", mount, result, error);
            }
            return (int)mh$.invokeExact(mount, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_guess_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_guess_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_guess_content_type(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_mount_guess_content_type$descriptor() {
        return g_mount_guess_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_guess_content_type(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_mount_guess_content_type$handle() {
        return g_mount_guess_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_guess_content_type(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_mount_guess_content_type(MemorySegment mount, int force_rescan, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_mount_guess_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_guess_content_type", mount, force_rescan, cancellable, callback, user_data);
            }
            mh$.invokeExact(mount, force_rescan, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_guess_content_type_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_guess_content_type_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_mount_guess_content_type_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_mount_guess_content_type_finish$descriptor() {
        return g_mount_guess_content_type_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_mount_guess_content_type_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_mount_guess_content_type_finish$handle() {
        return g_mount_guess_content_type_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_mount_guess_content_type_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_mount_guess_content_type_finish(MemorySegment mount, MemorySegment result, MemorySegment error) {
        var mh$ = g_mount_guess_content_type_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_guess_content_type_finish", mount, result, error);
            }
            return (MemorySegment)mh$.invokeExact(mount, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_guess_content_type_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_guess_content_type_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_mount_guess_content_type_sync(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_mount_guess_content_type_sync$descriptor() {
        return g_mount_guess_content_type_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_mount_guess_content_type_sync(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_mount_guess_content_type_sync$handle() {
        return g_mount_guess_content_type_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_mount_guess_content_type_sync(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_mount_guess_content_type_sync(MemorySegment mount, int force_rescan, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_mount_guess_content_type_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_guess_content_type_sync", mount, force_rescan, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(mount, force_rescan, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_is_shadowed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_is_shadowed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_is_shadowed(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_is_shadowed$descriptor() {
        return g_mount_is_shadowed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_is_shadowed(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_is_shadowed$handle() {
        return g_mount_is_shadowed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_is_shadowed(GMount *mount)
     * }
     */
    public static int g_mount_is_shadowed(MemorySegment mount) {
        var mh$ = g_mount_is_shadowed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_is_shadowed", mount);
            }
            return (int)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_shadow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_shadow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_shadow(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_shadow$descriptor() {
        return g_mount_shadow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_shadow(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_shadow$handle() {
        return g_mount_shadow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_shadow(GMount *mount)
     * }
     */
    public static void g_mount_shadow(MemorySegment mount) {
        var mh$ = g_mount_shadow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_shadow", mount);
            }
            mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_unshadow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_unshadow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_unshadow(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_unshadow$descriptor() {
        return g_mount_unshadow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_unshadow(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_unshadow$handle() {
        return g_mount_unshadow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_unshadow(GMount *mount)
     * }
     */
    public static void g_mount_unshadow(MemorySegment mount) {
        var mh$ = g_mount_unshadow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_unshadow", mount);
            }
            mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_unmount_with_operation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_unmount_with_operation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_unmount_with_operation(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_mount_unmount_with_operation$descriptor() {
        return g_mount_unmount_with_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_unmount_with_operation(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_mount_unmount_with_operation$handle() {
        return g_mount_unmount_with_operation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_unmount_with_operation(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_mount_unmount_with_operation(MemorySegment mount, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_mount_unmount_with_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_unmount_with_operation", mount, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(mount, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_unmount_with_operation_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_unmount_with_operation_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_unmount_with_operation_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_mount_unmount_with_operation_finish$descriptor() {
        return g_mount_unmount_with_operation_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_unmount_with_operation_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_mount_unmount_with_operation_finish$handle() {
        return g_mount_unmount_with_operation_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_unmount_with_operation_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_mount_unmount_with_operation_finish(MemorySegment mount, MemorySegment result, MemorySegment error) {
        var mh$ = g_mount_unmount_with_operation_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_unmount_with_operation_finish", mount, result, error);
            }
            return (int)mh$.invokeExact(mount, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_eject_with_operation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_eject_with_operation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_eject_with_operation(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_mount_eject_with_operation$descriptor() {
        return g_mount_eject_with_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_eject_with_operation(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_mount_eject_with_operation$handle() {
        return g_mount_eject_with_operation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_eject_with_operation(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_mount_eject_with_operation(MemorySegment mount, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_mount_eject_with_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_eject_with_operation", mount, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(mount, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_eject_with_operation_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_eject_with_operation_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_eject_with_operation_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_mount_eject_with_operation_finish$descriptor() {
        return g_mount_eject_with_operation_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_eject_with_operation_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_mount_eject_with_operation_finish$handle() {
        return g_mount_eject_with_operation_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_eject_with_operation_finish(GMount *mount, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_mount_eject_with_operation_finish(MemorySegment mount, MemorySegment result, MemorySegment error) {
        var mh$ = g_mount_eject_with_operation_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_eject_with_operation_finish", mount, result, error);
            }
            return (int)mh$.invokeExact(mount, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_get_sort_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_get_sort_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_mount_get_sort_key(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_mount_get_sort_key$descriptor() {
        return g_mount_get_sort_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_mount_get_sort_key(GMount *mount)
     * }
     */
    public static MethodHandle g_mount_get_sort_key$handle() {
        return g_mount_get_sort_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_mount_get_sort_key(GMount *mount)
     * }
     */
    public static MemorySegment g_mount_get_sort_key(MemorySegment mount) {
        var mh$ = g_mount_get_sort_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_get_sort_key", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_mount_operation_get_type()
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_type$descriptor() {
        return g_mount_operation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_mount_operation_get_type()
     * }
     */
    public static MethodHandle g_mount_operation_get_type$handle() {
        return g_mount_operation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_mount_operation_get_type()
     * }
     */
    public static long g_mount_operation_get_type() {
        var mh$ = g_mount_operation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMountOperation *g_mount_operation_new()
     * }
     */
    public static FunctionDescriptor g_mount_operation_new$descriptor() {
        return g_mount_operation_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMountOperation *g_mount_operation_new()
     * }
     */
    public static MethodHandle g_mount_operation_new$handle() {
        return g_mount_operation_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMountOperation *g_mount_operation_new()
     * }
     */
    public static MemorySegment g_mount_operation_new() {
        var mh$ = g_mount_operation_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_username {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_username"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_username(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_username$descriptor() {
        return g_mount_operation_get_username.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_username(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_username$handle() {
        return g_mount_operation_get_username.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_username(GMountOperation *op)
     * }
     */
    public static MemorySegment g_mount_operation_get_username(MemorySegment op) {
        var mh$ = g_mount_operation_get_username.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_username", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_username {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_username"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_username(GMountOperation *op, const char *username)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_username$descriptor() {
        return g_mount_operation_set_username.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_username(GMountOperation *op, const char *username)
     * }
     */
    public static MethodHandle g_mount_operation_set_username$handle() {
        return g_mount_operation_set_username.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_username(GMountOperation *op, const char *username)
     * }
     */
    public static void g_mount_operation_set_username(MemorySegment op, MemorySegment username) {
        var mh$ = g_mount_operation_set_username.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_username", op, username);
            }
            mh$.invokeExact(op, username);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_password {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_password"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_password(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_password$descriptor() {
        return g_mount_operation_get_password.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_password(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_password$handle() {
        return g_mount_operation_get_password.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_password(GMountOperation *op)
     * }
     */
    public static MemorySegment g_mount_operation_get_password(MemorySegment op) {
        var mh$ = g_mount_operation_get_password.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_password", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_password {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_password"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_password(GMountOperation *op, const char *password)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_password$descriptor() {
        return g_mount_operation_set_password.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_password(GMountOperation *op, const char *password)
     * }
     */
    public static MethodHandle g_mount_operation_set_password$handle() {
        return g_mount_operation_set_password.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_password(GMountOperation *op, const char *password)
     * }
     */
    public static void g_mount_operation_set_password(MemorySegment op, MemorySegment password) {
        var mh$ = g_mount_operation_set_password.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_password", op, password);
            }
            mh$.invokeExact(op, password);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_anonymous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_anonymous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_anonymous(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_anonymous$descriptor() {
        return g_mount_operation_get_anonymous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_anonymous(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_anonymous$handle() {
        return g_mount_operation_get_anonymous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_anonymous(GMountOperation *op)
     * }
     */
    public static int g_mount_operation_get_anonymous(MemorySegment op) {
        var mh$ = g_mount_operation_get_anonymous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_anonymous", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_anonymous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_anonymous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_anonymous(GMountOperation *op, gboolean anonymous)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_anonymous$descriptor() {
        return g_mount_operation_set_anonymous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_anonymous(GMountOperation *op, gboolean anonymous)
     * }
     */
    public static MethodHandle g_mount_operation_set_anonymous$handle() {
        return g_mount_operation_set_anonymous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_anonymous(GMountOperation *op, gboolean anonymous)
     * }
     */
    public static void g_mount_operation_set_anonymous(MemorySegment op, int anonymous) {
        var mh$ = g_mount_operation_set_anonymous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_anonymous", op, anonymous);
            }
            mh$.invokeExact(op, anonymous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_domain(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_domain$descriptor() {
        return g_mount_operation_get_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_domain(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_domain$handle() {
        return g_mount_operation_get_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_mount_operation_get_domain(GMountOperation *op)
     * }
     */
    public static MemorySegment g_mount_operation_get_domain(MemorySegment op) {
        var mh$ = g_mount_operation_get_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_domain", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_domain(GMountOperation *op, const char *domain)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_domain$descriptor() {
        return g_mount_operation_set_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_domain(GMountOperation *op, const char *domain)
     * }
     */
    public static MethodHandle g_mount_operation_set_domain$handle() {
        return g_mount_operation_set_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_domain(GMountOperation *op, const char *domain)
     * }
     */
    public static void g_mount_operation_set_domain(MemorySegment op, MemorySegment domain) {
        var mh$ = g_mount_operation_set_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_domain", op, domain);
            }
            mh$.invokeExact(op, domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_password_save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_password_save"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPasswordSave g_mount_operation_get_password_save(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_password_save$descriptor() {
        return g_mount_operation_get_password_save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPasswordSave g_mount_operation_get_password_save(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_password_save$handle() {
        return g_mount_operation_get_password_save.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPasswordSave g_mount_operation_get_password_save(GMountOperation *op)
     * }
     */
    public static int g_mount_operation_get_password_save(MemorySegment op) {
        var mh$ = g_mount_operation_get_password_save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_password_save", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_password_save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_password_save"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_password_save(GMountOperation *op, GPasswordSave save)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_password_save$descriptor() {
        return g_mount_operation_set_password_save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_password_save(GMountOperation *op, GPasswordSave save)
     * }
     */
    public static MethodHandle g_mount_operation_set_password_save$handle() {
        return g_mount_operation_set_password_save.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_password_save(GMountOperation *op, GPasswordSave save)
     * }
     */
    public static void g_mount_operation_set_password_save(MemorySegment op, int save) {
        var mh$ = g_mount_operation_set_password_save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_password_save", op, save);
            }
            mh$.invokeExact(op, save);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_choice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_choice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_mount_operation_get_choice(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_choice$descriptor() {
        return g_mount_operation_get_choice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_mount_operation_get_choice(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_choice$handle() {
        return g_mount_operation_get_choice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_mount_operation_get_choice(GMountOperation *op)
     * }
     */
    public static int g_mount_operation_get_choice(MemorySegment op) {
        var mh$ = g_mount_operation_get_choice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_choice", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_choice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_choice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_choice(GMountOperation *op, int choice)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_choice$descriptor() {
        return g_mount_operation_set_choice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_choice(GMountOperation *op, int choice)
     * }
     */
    public static MethodHandle g_mount_operation_set_choice$handle() {
        return g_mount_operation_set_choice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_choice(GMountOperation *op, int choice)
     * }
     */
    public static void g_mount_operation_set_choice(MemorySegment op, int choice) {
        var mh$ = g_mount_operation_set_choice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_choice", op, choice);
            }
            mh$.invokeExact(op, choice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_reply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_reply"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_reply(GMountOperation *op, GMountOperationResult result)
     * }
     */
    public static FunctionDescriptor g_mount_operation_reply$descriptor() {
        return g_mount_operation_reply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_reply(GMountOperation *op, GMountOperationResult result)
     * }
     */
    public static MethodHandle g_mount_operation_reply$handle() {
        return g_mount_operation_reply.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_reply(GMountOperation *op, GMountOperationResult result)
     * }
     */
    public static void g_mount_operation_reply(MemorySegment op, int result) {
        var mh$ = g_mount_operation_reply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_reply", op, result);
            }
            mh$.invokeExact(op, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_is_tcrypt_hidden_volume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_is_tcrypt_hidden_volume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_is_tcrypt_hidden_volume(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_is_tcrypt_hidden_volume$descriptor() {
        return g_mount_operation_get_is_tcrypt_hidden_volume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_is_tcrypt_hidden_volume(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_is_tcrypt_hidden_volume$handle() {
        return g_mount_operation_get_is_tcrypt_hidden_volume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_is_tcrypt_hidden_volume(GMountOperation *op)
     * }
     */
    public static int g_mount_operation_get_is_tcrypt_hidden_volume(MemorySegment op) {
        var mh$ = g_mount_operation_get_is_tcrypt_hidden_volume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_is_tcrypt_hidden_volume", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_is_tcrypt_hidden_volume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_is_tcrypt_hidden_volume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_is_tcrypt_hidden_volume(GMountOperation *op, gboolean hidden_volume)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_is_tcrypt_hidden_volume$descriptor() {
        return g_mount_operation_set_is_tcrypt_hidden_volume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_is_tcrypt_hidden_volume(GMountOperation *op, gboolean hidden_volume)
     * }
     */
    public static MethodHandle g_mount_operation_set_is_tcrypt_hidden_volume$handle() {
        return g_mount_operation_set_is_tcrypt_hidden_volume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_is_tcrypt_hidden_volume(GMountOperation *op, gboolean hidden_volume)
     * }
     */
    public static void g_mount_operation_set_is_tcrypt_hidden_volume(MemorySegment op, int hidden_volume) {
        var mh$ = g_mount_operation_set_is_tcrypt_hidden_volume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_is_tcrypt_hidden_volume", op, hidden_volume);
            }
            mh$.invokeExact(op, hidden_volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_is_tcrypt_system_volume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_is_tcrypt_system_volume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_is_tcrypt_system_volume(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_is_tcrypt_system_volume$descriptor() {
        return g_mount_operation_get_is_tcrypt_system_volume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_is_tcrypt_system_volume(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_is_tcrypt_system_volume$handle() {
        return g_mount_operation_get_is_tcrypt_system_volume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mount_operation_get_is_tcrypt_system_volume(GMountOperation *op)
     * }
     */
    public static int g_mount_operation_get_is_tcrypt_system_volume(MemorySegment op) {
        var mh$ = g_mount_operation_get_is_tcrypt_system_volume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_is_tcrypt_system_volume", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_is_tcrypt_system_volume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_is_tcrypt_system_volume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_is_tcrypt_system_volume(GMountOperation *op, gboolean system_volume)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_is_tcrypt_system_volume$descriptor() {
        return g_mount_operation_set_is_tcrypt_system_volume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_is_tcrypt_system_volume(GMountOperation *op, gboolean system_volume)
     * }
     */
    public static MethodHandle g_mount_operation_set_is_tcrypt_system_volume$handle() {
        return g_mount_operation_set_is_tcrypt_system_volume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_is_tcrypt_system_volume(GMountOperation *op, gboolean system_volume)
     * }
     */
    public static void g_mount_operation_set_is_tcrypt_system_volume(MemorySegment op, int system_volume) {
        var mh$ = g_mount_operation_set_is_tcrypt_system_volume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_is_tcrypt_system_volume", op, system_volume);
            }
            mh$.invokeExact(op, system_volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_get_pim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_get_pim"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_mount_operation_get_pim(GMountOperation *op)
     * }
     */
    public static FunctionDescriptor g_mount_operation_get_pim$descriptor() {
        return g_mount_operation_get_pim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_mount_operation_get_pim(GMountOperation *op)
     * }
     */
    public static MethodHandle g_mount_operation_get_pim$handle() {
        return g_mount_operation_get_pim.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_mount_operation_get_pim(GMountOperation *op)
     * }
     */
    public static int g_mount_operation_get_pim(MemorySegment op) {
        var mh$ = g_mount_operation_get_pim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_get_pim", op);
            }
            return (int)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mount_operation_set_pim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mount_operation_set_pim"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_pim(GMountOperation *op, guint pim)
     * }
     */
    public static FunctionDescriptor g_mount_operation_set_pim$descriptor() {
        return g_mount_operation_set_pim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mount_operation_set_pim(GMountOperation *op, guint pim)
     * }
     */
    public static MethodHandle g_mount_operation_set_pim$handle() {
        return g_mount_operation_set_pim.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mount_operation_set_pim(GMountOperation *op, guint pim)
     * }
     */
    public static void g_mount_operation_set_pim(MemorySegment op, int pim) {
        var mh$ = g_mount_operation_set_pim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mount_operation_set_pim", op, pim);
            }
            mh$.invokeExact(op, pim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_native_socket_address_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_native_socket_address_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_native_socket_address_get_type()
     * }
     */
    public static FunctionDescriptor g_native_socket_address_get_type$descriptor() {
        return g_native_socket_address_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_native_socket_address_get_type()
     * }
     */
    public static MethodHandle g_native_socket_address_get_type$handle() {
        return g_native_socket_address_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_native_socket_address_get_type()
     * }
     */
    public static long g_native_socket_address_get_type() {
        var mh$ = g_native_socket_address_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_native_socket_address_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_native_socket_address_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_native_socket_address_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_native_socket_address_new(gpointer native, gsize len)
     * }
     */
    public static FunctionDescriptor g_native_socket_address_new$descriptor() {
        return g_native_socket_address_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_native_socket_address_new(gpointer native, gsize len)
     * }
     */
    public static MethodHandle g_native_socket_address_new$handle() {
        return g_native_socket_address_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_native_socket_address_new(gpointer native, gsize len)
     * }
     */
    public static MemorySegment g_native_socket_address_new(MemorySegment native_, long len) {
        var mh$ = g_native_socket_address_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_native_socket_address_new", native_, len);
            }
            return (MemorySegment)mh$.invokeExact(native_, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_volume_monitor_get_type()
     * }
     */
    public static FunctionDescriptor g_volume_monitor_get_type$descriptor() {
        return g_volume_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_volume_monitor_get_type()
     * }
     */
    public static MethodHandle g_volume_monitor_get_type$handle() {
        return g_volume_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_volume_monitor_get_type()
     * }
     */
    public static long g_volume_monitor_get_type() {
        var mh$ = g_volume_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVolumeMonitor *g_volume_monitor_get()
     * }
     */
    public static FunctionDescriptor g_volume_monitor_get$descriptor() {
        return g_volume_monitor_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVolumeMonitor *g_volume_monitor_get()
     * }
     */
    public static MethodHandle g_volume_monitor_get$handle() {
        return g_volume_monitor_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVolumeMonitor *g_volume_monitor_get()
     * }
     */
    public static MemorySegment g_volume_monitor_get() {
        var mh$ = g_volume_monitor_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_get");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_get_connected_drives {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_get_connected_drives"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_connected_drives(GVolumeMonitor *volume_monitor)
     * }
     */
    public static FunctionDescriptor g_volume_monitor_get_connected_drives$descriptor() {
        return g_volume_monitor_get_connected_drives.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_connected_drives(GVolumeMonitor *volume_monitor)
     * }
     */
    public static MethodHandle g_volume_monitor_get_connected_drives$handle() {
        return g_volume_monitor_get_connected_drives.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_connected_drives(GVolumeMonitor *volume_monitor)
     * }
     */
    public static MemorySegment g_volume_monitor_get_connected_drives(MemorySegment volume_monitor) {
        var mh$ = g_volume_monitor_get_connected_drives.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_get_connected_drives", volume_monitor);
            }
            return (MemorySegment)mh$.invokeExact(volume_monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_get_volumes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_get_volumes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_volumes(GVolumeMonitor *volume_monitor)
     * }
     */
    public static FunctionDescriptor g_volume_monitor_get_volumes$descriptor() {
        return g_volume_monitor_get_volumes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_volumes(GVolumeMonitor *volume_monitor)
     * }
     */
    public static MethodHandle g_volume_monitor_get_volumes$handle() {
        return g_volume_monitor_get_volumes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_volumes(GVolumeMonitor *volume_monitor)
     * }
     */
    public static MemorySegment g_volume_monitor_get_volumes(MemorySegment volume_monitor) {
        var mh$ = g_volume_monitor_get_volumes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_get_volumes", volume_monitor);
            }
            return (MemorySegment)mh$.invokeExact(volume_monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_get_mounts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_get_mounts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_mounts(GVolumeMonitor *volume_monitor)
     * }
     */
    public static FunctionDescriptor g_volume_monitor_get_mounts$descriptor() {
        return g_volume_monitor_get_mounts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_mounts(GVolumeMonitor *volume_monitor)
     * }
     */
    public static MethodHandle g_volume_monitor_get_mounts$handle() {
        return g_volume_monitor_get_mounts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_volume_monitor_get_mounts(GVolumeMonitor *volume_monitor)
     * }
     */
    public static MemorySegment g_volume_monitor_get_mounts(MemorySegment volume_monitor) {
        var mh$ = g_volume_monitor_get_mounts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_get_mounts", volume_monitor);
            }
            return (MemorySegment)mh$.invokeExact(volume_monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_get_volume_for_uuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_get_volume_for_uuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVolume *g_volume_monitor_get_volume_for_uuid(GVolumeMonitor *volume_monitor, const char *uuid)
     * }
     */
    public static FunctionDescriptor g_volume_monitor_get_volume_for_uuid$descriptor() {
        return g_volume_monitor_get_volume_for_uuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVolume *g_volume_monitor_get_volume_for_uuid(GVolumeMonitor *volume_monitor, const char *uuid)
     * }
     */
    public static MethodHandle g_volume_monitor_get_volume_for_uuid$handle() {
        return g_volume_monitor_get_volume_for_uuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVolume *g_volume_monitor_get_volume_for_uuid(GVolumeMonitor *volume_monitor, const char *uuid)
     * }
     */
    public static MemorySegment g_volume_monitor_get_volume_for_uuid(MemorySegment volume_monitor, MemorySegment uuid) {
        var mh$ = g_volume_monitor_get_volume_for_uuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_get_volume_for_uuid", volume_monitor, uuid);
            }
            return (MemorySegment)mh$.invokeExact(volume_monitor, uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_get_mount_for_uuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_get_mount_for_uuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMount *g_volume_monitor_get_mount_for_uuid(GVolumeMonitor *volume_monitor, const char *uuid)
     * }
     */
    public static FunctionDescriptor g_volume_monitor_get_mount_for_uuid$descriptor() {
        return g_volume_monitor_get_mount_for_uuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMount *g_volume_monitor_get_mount_for_uuid(GVolumeMonitor *volume_monitor, const char *uuid)
     * }
     */
    public static MethodHandle g_volume_monitor_get_mount_for_uuid$handle() {
        return g_volume_monitor_get_mount_for_uuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMount *g_volume_monitor_get_mount_for_uuid(GVolumeMonitor *volume_monitor, const char *uuid)
     * }
     */
    public static MemorySegment g_volume_monitor_get_mount_for_uuid(MemorySegment volume_monitor, MemorySegment uuid) {
        var mh$ = g_volume_monitor_get_mount_for_uuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_get_mount_for_uuid", volume_monitor, uuid);
            }
            return (MemorySegment)mh$.invokeExact(volume_monitor, uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_monitor_adopt_orphan_mount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_monitor_adopt_orphan_mount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVolume *g_volume_monitor_adopt_orphan_mount(GMount *mount)
     * }
     */
    public static FunctionDescriptor g_volume_monitor_adopt_orphan_mount$descriptor() {
        return g_volume_monitor_adopt_orphan_mount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVolume *g_volume_monitor_adopt_orphan_mount(GMount *mount)
     * }
     */
    public static MethodHandle g_volume_monitor_adopt_orphan_mount$handle() {
        return g_volume_monitor_adopt_orphan_mount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVolume *g_volume_monitor_adopt_orphan_mount(GMount *mount)
     * }
     */
    public static MemorySegment g_volume_monitor_adopt_orphan_mount(MemorySegment mount) {
        var mh$ = g_volume_monitor_adopt_orphan_mount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_monitor_adopt_orphan_mount", mount);
            }
            return (MemorySegment)mh$.invokeExact(mount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_native_volume_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_native_volume_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_native_volume_monitor_get_type()
     * }
     */
    public static FunctionDescriptor g_native_volume_monitor_get_type$descriptor() {
        return g_native_volume_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_native_volume_monitor_get_type()
     * }
     */
    public static MethodHandle g_native_volume_monitor_get_type$handle() {
        return g_native_volume_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_native_volume_monitor_get_type()
     * }
     */
    public static long g_native_volume_monitor_get_type() {
        var mh$ = g_native_volume_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_native_volume_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_network_address_get_type()
     * }
     */
    public static FunctionDescriptor g_network_address_get_type$descriptor() {
        return g_network_address_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_network_address_get_type()
     * }
     */
    public static MethodHandle g_network_address_get_type$handle() {
        return g_network_address_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_network_address_get_type()
     * }
     */
    public static long g_network_address_get_type() {
        var mh$ = g_network_address_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_new(const gchar *hostname, guint16 port)
     * }
     */
    public static FunctionDescriptor g_network_address_new$descriptor() {
        return g_network_address_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_new(const gchar *hostname, guint16 port)
     * }
     */
    public static MethodHandle g_network_address_new$handle() {
        return g_network_address_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_new(const gchar *hostname, guint16 port)
     * }
     */
    public static MemorySegment g_network_address_new(MemorySegment hostname, short port) {
        var mh$ = g_network_address_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_new", hostname, port);
            }
            return (MemorySegment)mh$.invokeExact(hostname, port);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_new_loopback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_new_loopback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_new_loopback(guint16 port)
     * }
     */
    public static FunctionDescriptor g_network_address_new_loopback$descriptor() {
        return g_network_address_new_loopback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_new_loopback(guint16 port)
     * }
     */
    public static MethodHandle g_network_address_new_loopback$handle() {
        return g_network_address_new_loopback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_new_loopback(guint16 port)
     * }
     */
    public static MemorySegment g_network_address_new_loopback(short port) {
        var mh$ = g_network_address_new_loopback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_new_loopback", port);
            }
            return (MemorySegment)mh$.invokeExact(port);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_parse(const gchar *host_and_port, guint16 default_port, GError **error)
     * }
     */
    public static FunctionDescriptor g_network_address_parse$descriptor() {
        return g_network_address_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_parse(const gchar *host_and_port, guint16 default_port, GError **error)
     * }
     */
    public static MethodHandle g_network_address_parse$handle() {
        return g_network_address_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_parse(const gchar *host_and_port, guint16 default_port, GError **error)
     * }
     */
    public static MemorySegment g_network_address_parse(MemorySegment host_and_port, short default_port, MemorySegment error) {
        var mh$ = g_network_address_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_parse", host_and_port, default_port, error);
            }
            return (MemorySegment)mh$.invokeExact(host_and_port, default_port, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_parse_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_parse_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_parse_uri(const gchar *uri, guint16 default_port, GError **error)
     * }
     */
    public static FunctionDescriptor g_network_address_parse_uri$descriptor() {
        return g_network_address_parse_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_parse_uri(const gchar *uri, guint16 default_port, GError **error)
     * }
     */
    public static MethodHandle g_network_address_parse_uri$handle() {
        return g_network_address_parse_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_address_parse_uri(const gchar *uri, guint16 default_port, GError **error)
     * }
     */
    public static MemorySegment g_network_address_parse_uri(MemorySegment uri, short default_port, MemorySegment error) {
        var mh$ = g_network_address_parse_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_parse_uri", uri, default_port, error);
            }
            return (MemorySegment)mh$.invokeExact(uri, default_port, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_get_hostname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_get_hostname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_network_address_get_hostname(GNetworkAddress *addr)
     * }
     */
    public static FunctionDescriptor g_network_address_get_hostname$descriptor() {
        return g_network_address_get_hostname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_network_address_get_hostname(GNetworkAddress *addr)
     * }
     */
    public static MethodHandle g_network_address_get_hostname$handle() {
        return g_network_address_get_hostname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_network_address_get_hostname(GNetworkAddress *addr)
     * }
     */
    public static MemorySegment g_network_address_get_hostname(MemorySegment addr) {
        var mh$ = g_network_address_get_hostname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_get_hostname", addr);
            }
            return (MemorySegment)mh$.invokeExact(addr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_get_port {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_get_port"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_network_address_get_port(GNetworkAddress *addr)
     * }
     */
    public static FunctionDescriptor g_network_address_get_port$descriptor() {
        return g_network_address_get_port.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_network_address_get_port(GNetworkAddress *addr)
     * }
     */
    public static MethodHandle g_network_address_get_port$handle() {
        return g_network_address_get_port.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_network_address_get_port(GNetworkAddress *addr)
     * }
     */
    public static short g_network_address_get_port(MemorySegment addr) {
        var mh$ = g_network_address_get_port.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_get_port", addr);
            }
            return (short)mh$.invokeExact(addr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_address_get_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_address_get_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_network_address_get_scheme(GNetworkAddress *addr)
     * }
     */
    public static FunctionDescriptor g_network_address_get_scheme$descriptor() {
        return g_network_address_get_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_network_address_get_scheme(GNetworkAddress *addr)
     * }
     */
    public static MethodHandle g_network_address_get_scheme$handle() {
        return g_network_address_get_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_network_address_get_scheme(GNetworkAddress *addr)
     * }
     */
    public static MemorySegment g_network_address_get_scheme(MemorySegment addr) {
        var mh$ = g_network_address_get_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_address_get_scheme", addr);
            }
            return (MemorySegment)mh$.invokeExact(addr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_network_monitor_get_type()
     * }
     */
    public static FunctionDescriptor g_network_monitor_get_type$descriptor() {
        return g_network_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_network_monitor_get_type()
     * }
     */
    public static MethodHandle g_network_monitor_get_type$handle() {
        return g_network_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_network_monitor_get_type()
     * }
     */
    public static long g_network_monitor_get_type() {
        var mh$ = g_network_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNetworkMonitor *g_network_monitor_get_default()
     * }
     */
    public static FunctionDescriptor g_network_monitor_get_default$descriptor() {
        return g_network_monitor_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNetworkMonitor *g_network_monitor_get_default()
     * }
     */
    public static MethodHandle g_network_monitor_get_default$handle() {
        return g_network_monitor_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNetworkMonitor *g_network_monitor_get_default()
     * }
     */
    public static MemorySegment g_network_monitor_get_default() {
        var mh$ = g_network_monitor_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_get_network_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_get_network_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_get_network_available(GNetworkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor g_network_monitor_get_network_available$descriptor() {
        return g_network_monitor_get_network_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_get_network_available(GNetworkMonitor *monitor)
     * }
     */
    public static MethodHandle g_network_monitor_get_network_available$handle() {
        return g_network_monitor_get_network_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_get_network_available(GNetworkMonitor *monitor)
     * }
     */
    public static int g_network_monitor_get_network_available(MemorySegment monitor) {
        var mh$ = g_network_monitor_get_network_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_get_network_available", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_get_network_metered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_get_network_metered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_get_network_metered(GNetworkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor g_network_monitor_get_network_metered$descriptor() {
        return g_network_monitor_get_network_metered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_get_network_metered(GNetworkMonitor *monitor)
     * }
     */
    public static MethodHandle g_network_monitor_get_network_metered$handle() {
        return g_network_monitor_get_network_metered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_get_network_metered(GNetworkMonitor *monitor)
     * }
     */
    public static int g_network_monitor_get_network_metered(MemorySegment monitor) {
        var mh$ = g_network_monitor_get_network_metered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_get_network_metered", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_get_connectivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_get_connectivity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNetworkConnectivity g_network_monitor_get_connectivity(GNetworkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor g_network_monitor_get_connectivity$descriptor() {
        return g_network_monitor_get_connectivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNetworkConnectivity g_network_monitor_get_connectivity(GNetworkMonitor *monitor)
     * }
     */
    public static MethodHandle g_network_monitor_get_connectivity$handle() {
        return g_network_monitor_get_connectivity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNetworkConnectivity g_network_monitor_get_connectivity(GNetworkMonitor *monitor)
     * }
     */
    public static int g_network_monitor_get_connectivity(MemorySegment monitor) {
        var mh$ = g_network_monitor_get_connectivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_get_connectivity", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_can_reach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_can_reach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_can_reach(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_network_monitor_can_reach$descriptor() {
        return g_network_monitor_can_reach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_can_reach(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_network_monitor_can_reach$handle() {
        return g_network_monitor_can_reach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_can_reach(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_network_monitor_can_reach(MemorySegment monitor, MemorySegment connectable, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_network_monitor_can_reach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_can_reach", monitor, connectable, cancellable, error);
            }
            return (int)mh$.invokeExact(monitor, connectable, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_can_reach_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_can_reach_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_network_monitor_can_reach_async(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_network_monitor_can_reach_async$descriptor() {
        return g_network_monitor_can_reach_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_network_monitor_can_reach_async(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_network_monitor_can_reach_async$handle() {
        return g_network_monitor_can_reach_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_network_monitor_can_reach_async(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_network_monitor_can_reach_async(MemorySegment monitor, MemorySegment connectable, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_network_monitor_can_reach_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_can_reach_async", monitor, connectable, cancellable, callback, user_data);
            }
            mh$.invokeExact(monitor, connectable, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_monitor_can_reach_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_monitor_can_reach_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_can_reach_finish(GNetworkMonitor *monitor, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_network_monitor_can_reach_finish$descriptor() {
        return g_network_monitor_can_reach_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_can_reach_finish(GNetworkMonitor *monitor, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_network_monitor_can_reach_finish$handle() {
        return g_network_monitor_can_reach_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_network_monitor_can_reach_finish(GNetworkMonitor *monitor, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_network_monitor_can_reach_finish(MemorySegment monitor, MemorySegment result, MemorySegment error) {
        var mh$ = g_network_monitor_can_reach_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_monitor_can_reach_finish", monitor, result, error);
            }
            return (int)mh$.invokeExact(monitor, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_service_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_service_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_network_service_get_type()
     * }
     */
    public static FunctionDescriptor g_network_service_get_type$descriptor() {
        return g_network_service_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_network_service_get_type()
     * }
     */
    public static MethodHandle g_network_service_get_type$handle() {
        return g_network_service_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_network_service_get_type()
     * }
     */
    public static long g_network_service_get_type() {
        var mh$ = g_network_service_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_service_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_service_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_service_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_service_new(const gchar *service, const gchar *protocol, const gchar *domain)
     * }
     */
    public static FunctionDescriptor g_network_service_new$descriptor() {
        return g_network_service_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_service_new(const gchar *service, const gchar *protocol, const gchar *domain)
     * }
     */
    public static MethodHandle g_network_service_new$handle() {
        return g_network_service_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnectable *g_network_service_new(const gchar *service, const gchar *protocol, const gchar *domain)
     * }
     */
    public static MemorySegment g_network_service_new(MemorySegment service, MemorySegment protocol, MemorySegment domain) {
        var mh$ = g_network_service_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_service_new", service, protocol, domain);
            }
            return (MemorySegment)mh$.invokeExact(service, protocol, domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_service_get_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_service_get_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_service(GNetworkService *srv)
     * }
     */
    public static FunctionDescriptor g_network_service_get_service$descriptor() {
        return g_network_service_get_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_service(GNetworkService *srv)
     * }
     */
    public static MethodHandle g_network_service_get_service$handle() {
        return g_network_service_get_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_service(GNetworkService *srv)
     * }
     */
    public static MemorySegment g_network_service_get_service(MemorySegment srv) {
        var mh$ = g_network_service_get_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_service_get_service", srv);
            }
            return (MemorySegment)mh$.invokeExact(srv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_service_get_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_service_get_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_protocol(GNetworkService *srv)
     * }
     */
    public static FunctionDescriptor g_network_service_get_protocol$descriptor() {
        return g_network_service_get_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_protocol(GNetworkService *srv)
     * }
     */
    public static MethodHandle g_network_service_get_protocol$handle() {
        return g_network_service_get_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_protocol(GNetworkService *srv)
     * }
     */
    public static MemorySegment g_network_service_get_protocol(MemorySegment srv) {
        var mh$ = g_network_service_get_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_service_get_protocol", srv);
            }
            return (MemorySegment)mh$.invokeExact(srv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_service_get_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_service_get_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_domain(GNetworkService *srv)
     * }
     */
    public static FunctionDescriptor g_network_service_get_domain$descriptor() {
        return g_network_service_get_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_domain(GNetworkService *srv)
     * }
     */
    public static MethodHandle g_network_service_get_domain$handle() {
        return g_network_service_get_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_domain(GNetworkService *srv)
     * }
     */
    public static MemorySegment g_network_service_get_domain(MemorySegment srv) {
        var mh$ = g_network_service_get_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_service_get_domain", srv);
            }
            return (MemorySegment)mh$.invokeExact(srv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_service_get_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_service_get_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_scheme(GNetworkService *srv)
     * }
     */
    public static FunctionDescriptor g_network_service_get_scheme$descriptor() {
        return g_network_service_get_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_scheme(GNetworkService *srv)
     * }
     */
    public static MethodHandle g_network_service_get_scheme$handle() {
        return g_network_service_get_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_network_service_get_scheme(GNetworkService *srv)
     * }
     */
    public static MemorySegment g_network_service_get_scheme(MemorySegment srv) {
        var mh$ = g_network_service_get_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_service_get_scheme", srv);
            }
            return (MemorySegment)mh$.invokeExact(srv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_network_service_set_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_network_service_set_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_network_service_set_scheme(GNetworkService *srv, const gchar *scheme)
     * }
     */
    public static FunctionDescriptor g_network_service_set_scheme$descriptor() {
        return g_network_service_set_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_network_service_set_scheme(GNetworkService *srv, const gchar *scheme)
     * }
     */
    public static MethodHandle g_network_service_set_scheme$handle() {
        return g_network_service_set_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_network_service_set_scheme(GNetworkService *srv, const gchar *scheme)
     * }
     */
    public static void g_network_service_set_scheme(MemorySegment srv, MemorySegment scheme) {
        var mh$ = g_network_service_set_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_network_service_set_scheme", srv, scheme);
            }
            mh$.invokeExact(srv, scheme);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_notification_get_type()
     * }
     */
    public static FunctionDescriptor g_notification_get_type$descriptor() {
        return g_notification_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_notification_get_type()
     * }
     */
    public static MethodHandle g_notification_get_type$handle() {
        return g_notification_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_notification_get_type()
     * }
     */
    public static long g_notification_get_type() {
        var mh$ = g_notification_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GNotification *g_notification_new(const gchar *title)
     * }
     */
    public static FunctionDescriptor g_notification_new$descriptor() {
        return g_notification_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GNotification *g_notification_new(const gchar *title)
     * }
     */
    public static MethodHandle g_notification_new$handle() {
        return g_notification_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GNotification *g_notification_new(const gchar *title)
     * }
     */
    public static MemorySegment g_notification_new(MemorySegment title) {
        var mh$ = g_notification_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_new", title);
            }
            return (MemorySegment)mh$.invokeExact(title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_title(GNotification *notification, const gchar *title)
     * }
     */
    public static FunctionDescriptor g_notification_set_title$descriptor() {
        return g_notification_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_title(GNotification *notification, const gchar *title)
     * }
     */
    public static MethodHandle g_notification_set_title$handle() {
        return g_notification_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_title(GNotification *notification, const gchar *title)
     * }
     */
    public static void g_notification_set_title(MemorySegment notification, MemorySegment title) {
        var mh$ = g_notification_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_title", notification, title);
            }
            mh$.invokeExact(notification, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_set_body {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_body"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_body(GNotification *notification, const gchar *body)
     * }
     */
    public static FunctionDescriptor g_notification_set_body$descriptor() {
        return g_notification_set_body.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_body(GNotification *notification, const gchar *body)
     * }
     */
    public static MethodHandle g_notification_set_body$handle() {
        return g_notification_set_body.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_body(GNotification *notification, const gchar *body)
     * }
     */
    public static void g_notification_set_body(MemorySegment notification, MemorySegment body) {
        var mh$ = g_notification_set_body.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_body", notification, body);
            }
            mh$.invokeExact(notification, body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_icon(GNotification *notification, GIcon *icon)
     * }
     */
    public static FunctionDescriptor g_notification_set_icon$descriptor() {
        return g_notification_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_icon(GNotification *notification, GIcon *icon)
     * }
     */
    public static MethodHandle g_notification_set_icon$handle() {
        return g_notification_set_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_icon(GNotification *notification, GIcon *icon)
     * }
     */
    public static void g_notification_set_icon(MemorySegment notification, MemorySegment icon) {
        var mh$ = g_notification_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_icon", notification, icon);
            }
            mh$.invokeExact(notification, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_set_urgent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_urgent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_urgent(GNotification *notification, gboolean urgent)
     * }
     */
    public static FunctionDescriptor g_notification_set_urgent$descriptor() {
        return g_notification_set_urgent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_urgent(GNotification *notification, gboolean urgent)
     * }
     */
    public static MethodHandle g_notification_set_urgent$handle() {
        return g_notification_set_urgent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_urgent(GNotification *notification, gboolean urgent)
     * }
     */
    public static void g_notification_set_urgent(MemorySegment notification, int urgent) {
        var mh$ = g_notification_set_urgent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_urgent", notification, urgent);
            }
            mh$.invokeExact(notification, urgent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_set_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_priority(GNotification *notification, GNotificationPriority priority)
     * }
     */
    public static FunctionDescriptor g_notification_set_priority$descriptor() {
        return g_notification_set_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_priority(GNotification *notification, GNotificationPriority priority)
     * }
     */
    public static MethodHandle g_notification_set_priority$handle() {
        return g_notification_set_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_priority(GNotification *notification, GNotificationPriority priority)
     * }
     */
    public static void g_notification_set_priority(MemorySegment notification, int priority) {
        var mh$ = g_notification_set_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_priority", notification, priority);
            }
            mh$.invokeExact(notification, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_set_category {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_category"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_category(GNotification *notification, const gchar *category)
     * }
     */
    public static FunctionDescriptor g_notification_set_category$descriptor() {
        return g_notification_set_category.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_category(GNotification *notification, const gchar *category)
     * }
     */
    public static MethodHandle g_notification_set_category$handle() {
        return g_notification_set_category.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_category(GNotification *notification, const gchar *category)
     * }
     */
    public static void g_notification_set_category(MemorySegment notification, MemorySegment category) {
        var mh$ = g_notification_set_category.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_category", notification, category);
            }
            mh$.invokeExact(notification, category);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_add_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_add_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_add_button(GNotification *notification, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static FunctionDescriptor g_notification_add_button$descriptor() {
        return g_notification_add_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_add_button(GNotification *notification, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static MethodHandle g_notification_add_button$handle() {
        return g_notification_add_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_add_button(GNotification *notification, const gchar *label, const gchar *detailed_action)
     * }
     */
    public static void g_notification_add_button(MemorySegment notification, MemorySegment label, MemorySegment detailed_action) {
        var mh$ = g_notification_add_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_add_button", notification, label, detailed_action);
            }
            mh$.invokeExact(notification, label, detailed_action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_notification_add_button_with_target(GNotification *notification, const gchar *label, const gchar *action, const gchar *target_format, ...)
     * }
     */
    public static class g_notification_add_button_with_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_notification_add_button_with_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_notification_add_button_with_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_notification_add_button_with_target(GNotification *notification, const gchar *label, const gchar *action, const gchar *target_format, ...)
         * }
         */
        public static g_notification_add_button_with_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_notification_add_button_with_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment notification, MemorySegment label, MemorySegment action, MemorySegment target_format, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_notification_add_button_with_target", notification, label, action, target_format, x4);
                }
                spreader.invokeExact(notification, label, action, target_format, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
}

