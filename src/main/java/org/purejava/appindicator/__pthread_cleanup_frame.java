// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct __pthread_cleanup_frame {
 *     void (*__cancel_routine)(void*);
 *     void* __cancel_arg;
 *     int __do_it;
 *     int __cancel_type;
 * };
 * }
 */
public class __pthread_cleanup_frame {

    public static MemoryLayout $LAYOUT() {
        return constants$523.const$3;
    }
    /**
     * {@snippet :
 * void (*__cancel_routine)(void*);
     * }
     */
    public interface __cancel_routine {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(__cancel_routine fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$523.const$4, fi, constants$13.const$1, scope);
        }
        static __cancel_routine ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle __cancel_routine$VH() {
        return constants$523.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*__cancel_routine)(void*);
     * }
     */
    public static MemorySegment __cancel_routine$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$523.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*__cancel_routine)(void*);
     * }
     */
    public static void __cancel_routine$set(MemorySegment seg, MemorySegment x) {
        constants$523.const$5.set(seg, x);
    }
    public static MemorySegment __cancel_routine$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$523.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void __cancel_routine$set(MemorySegment seg, long index, MemorySegment x) {
        constants$523.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static __cancel_routine __cancel_routine(MemorySegment segment, Arena scope) {
        return __cancel_routine.ofAddress(__cancel_routine$get(segment), scope);
    }
    public static VarHandle __cancel_arg$VH() {
        return constants$524.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* __cancel_arg;
     * }
     */
    public static MemorySegment __cancel_arg$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$524.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* __cancel_arg;
     * }
     */
    public static void __cancel_arg$set(MemorySegment seg, MemorySegment x) {
        constants$524.const$0.set(seg, x);
    }
    public static MemorySegment __cancel_arg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$524.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void __cancel_arg$set(MemorySegment seg, long index, MemorySegment x) {
        constants$524.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle __do_it$VH() {
        return constants$524.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int __do_it;
     * }
     */
    public static int __do_it$get(MemorySegment seg) {
        return (int)constants$524.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int __do_it;
     * }
     */
    public static void __do_it$set(MemorySegment seg, int x) {
        constants$524.const$1.set(seg, x);
    }
    public static int __do_it$get(MemorySegment seg, long index) {
        return (int)constants$524.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void __do_it$set(MemorySegment seg, long index, int x) {
        constants$524.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle __cancel_type$VH() {
        return constants$524.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int __cancel_type;
     * }
     */
    public static int __cancel_type$get(MemorySegment seg) {
        return (int)constants$524.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int __cancel_type;
     * }
     */
    public static void __cancel_type$set(MemorySegment seg, int x) {
        constants$524.const$2.set(seg, x);
    }
    public static int __cancel_type$get(MemorySegment seg, long index) {
        return (int)constants$524.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void __cancel_type$set(MemorySegment seg, long index, int x) {
        constants$524.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


