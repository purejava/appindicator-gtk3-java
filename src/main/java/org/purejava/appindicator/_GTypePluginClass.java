// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GTypePluginClass {
 *     GTypeInterface base_iface;
 *     GTypePluginUse use_plugin;
 *     GTypePluginUnuse unuse_plugin;
 *     GTypePluginCompleteTypeInfo complete_type_info;
 *     GTypePluginCompleteInterfaceInfo complete_interface_info;
 * }
 * }
 */
public class _GTypePluginClass {

    _GTypePluginClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("base_iface"),
        app_indicator_h.C_POINTER.withName("use_plugin"),
        app_indicator_h.C_POINTER.withName("unuse_plugin"),
        app_indicator_h.C_POINTER.withName("complete_type_info"),
        app_indicator_h.C_POINTER.withName("complete_interface_info")
    ).withName("_GTypePluginClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout base_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("base_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static final GroupLayout base_iface$layout() {
        return base_iface$LAYOUT;
    }

    private static final long base_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static final long base_iface$offset() {
        return base_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static MemorySegment base_iface(MemorySegment struct) {
        return struct.asSlice(base_iface$OFFSET, base_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static void base_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, base_iface$OFFSET, base_iface$LAYOUT.byteSize());
    }

    private static final AddressLayout use_plugin$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("use_plugin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypePluginUse use_plugin
     * }
     */
    public static final AddressLayout use_plugin$layout() {
        return use_plugin$LAYOUT;
    }

    private static final long use_plugin$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypePluginUse use_plugin
     * }
     */
    public static final long use_plugin$offset() {
        return use_plugin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypePluginUse use_plugin
     * }
     */
    public static MemorySegment use_plugin(MemorySegment struct) {
        return struct.get(use_plugin$LAYOUT, use_plugin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypePluginUse use_plugin
     * }
     */
    public static void use_plugin(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(use_plugin$LAYOUT, use_plugin$OFFSET, fieldValue);
    }

    private static final AddressLayout unuse_plugin$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unuse_plugin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypePluginUnuse unuse_plugin
     * }
     */
    public static final AddressLayout unuse_plugin$layout() {
        return unuse_plugin$LAYOUT;
    }

    private static final long unuse_plugin$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypePluginUnuse unuse_plugin
     * }
     */
    public static final long unuse_plugin$offset() {
        return unuse_plugin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypePluginUnuse unuse_plugin
     * }
     */
    public static MemorySegment unuse_plugin(MemorySegment struct) {
        return struct.get(unuse_plugin$LAYOUT, unuse_plugin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypePluginUnuse unuse_plugin
     * }
     */
    public static void unuse_plugin(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unuse_plugin$LAYOUT, unuse_plugin$OFFSET, fieldValue);
    }

    private static final AddressLayout complete_type_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("complete_type_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypePluginCompleteTypeInfo complete_type_info
     * }
     */
    public static final AddressLayout complete_type_info$layout() {
        return complete_type_info$LAYOUT;
    }

    private static final long complete_type_info$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypePluginCompleteTypeInfo complete_type_info
     * }
     */
    public static final long complete_type_info$offset() {
        return complete_type_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypePluginCompleteTypeInfo complete_type_info
     * }
     */
    public static MemorySegment complete_type_info(MemorySegment struct) {
        return struct.get(complete_type_info$LAYOUT, complete_type_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypePluginCompleteTypeInfo complete_type_info
     * }
     */
    public static void complete_type_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(complete_type_info$LAYOUT, complete_type_info$OFFSET, fieldValue);
    }

    private static final AddressLayout complete_interface_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("complete_interface_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypePluginCompleteInterfaceInfo complete_interface_info
     * }
     */
    public static final AddressLayout complete_interface_info$layout() {
        return complete_interface_info$LAYOUT;
    }

    private static final long complete_interface_info$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypePluginCompleteInterfaceInfo complete_interface_info
     * }
     */
    public static final long complete_interface_info$offset() {
        return complete_interface_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypePluginCompleteInterfaceInfo complete_interface_info
     * }
     */
    public static MemorySegment complete_interface_info(MemorySegment struct) {
        return struct.get(complete_interface_info$LAYOUT, complete_interface_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypePluginCompleteInterfaceInfo complete_interface_info
     * }
     */
    public static void complete_interface_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(complete_interface_info$LAYOUT, complete_interface_info$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

