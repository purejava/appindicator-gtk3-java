// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;

/**
 * {@snippet :
 * void (*sig_t)(int);
 * }
 */
public interface sig_t {

    void apply(int _x0);
    static MemorySegment allocate(sig_t fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$75.sig_t_UP$MH, fi, constants$75.sig_t$FUNC, scope);
    }
    static sig_t ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (int __x0) -> {
            try {
                constants$75.sig_t_DOWN$MH.invokeExact(symbol, __x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


