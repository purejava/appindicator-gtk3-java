// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GdkPixbufLoaderClass {
 *     GObjectClass parent_class;
 *     void (*size_prepared)(GdkPixbufLoader *, int, int);
 *     void (*area_prepared)(GdkPixbufLoader *);
 *     void (*area_updated)(GdkPixbufLoader *, int, int, int, int);
 *     void (*closed)(GdkPixbufLoader *);
 * }
 * }
 */
public class _GdkPixbufLoaderClass {

    _GdkPixbufLoaderClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("size_prepared"),
        app_indicator_h.C_POINTER.withName("area_prepared"),
        app_indicator_h.C_POINTER.withName("area_updated"),
        app_indicator_h.C_POINTER.withName("closed")
    ).withName("_GdkPixbufLoaderClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*size_prepared)(GdkPixbufLoader *, int, int)
     * }
     */
    public class size_prepared {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(size_prepared.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(size_prepared.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout size_prepared$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size_prepared"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*size_prepared)(GdkPixbufLoader *, int, int)
     * }
     */
    public static final AddressLayout size_prepared$layout() {
        return size_prepared$LAYOUT;
    }

    private static final long size_prepared$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*size_prepared)(GdkPixbufLoader *, int, int)
     * }
     */
    public static final long size_prepared$offset() {
        return size_prepared$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*size_prepared)(GdkPixbufLoader *, int, int)
     * }
     */
    public static MemorySegment size_prepared(MemorySegment struct) {
        return struct.get(size_prepared$LAYOUT, size_prepared$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*size_prepared)(GdkPixbufLoader *, int, int)
     * }
     */
    public static void size_prepared(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(size_prepared$LAYOUT, size_prepared$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*area_prepared)(GdkPixbufLoader *)
     * }
     */
    public class area_prepared {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(area_prepared.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(area_prepared.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout area_prepared$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("area_prepared"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*area_prepared)(GdkPixbufLoader *)
     * }
     */
    public static final AddressLayout area_prepared$layout() {
        return area_prepared$LAYOUT;
    }

    private static final long area_prepared$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*area_prepared)(GdkPixbufLoader *)
     * }
     */
    public static final long area_prepared$offset() {
        return area_prepared$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*area_prepared)(GdkPixbufLoader *)
     * }
     */
    public static MemorySegment area_prepared(MemorySegment struct) {
        return struct.get(area_prepared$LAYOUT, area_prepared$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*area_prepared)(GdkPixbufLoader *)
     * }
     */
    public static void area_prepared(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(area_prepared$LAYOUT, area_prepared$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*area_updated)(GdkPixbufLoader *, int, int, int, int)
     * }
     */
    public class area_updated {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2, int _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(area_updated.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(area_updated.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3, int _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout area_updated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("area_updated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*area_updated)(GdkPixbufLoader *, int, int, int, int)
     * }
     */
    public static final AddressLayout area_updated$layout() {
        return area_updated$LAYOUT;
    }

    private static final long area_updated$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*area_updated)(GdkPixbufLoader *, int, int, int, int)
     * }
     */
    public static final long area_updated$offset() {
        return area_updated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*area_updated)(GdkPixbufLoader *, int, int, int, int)
     * }
     */
    public static MemorySegment area_updated(MemorySegment struct) {
        return struct.get(area_updated$LAYOUT, area_updated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*area_updated)(GdkPixbufLoader *, int, int, int, int)
     * }
     */
    public static void area_updated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(area_updated$LAYOUT, area_updated$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*closed)(GdkPixbufLoader *)
     * }
     */
    public class closed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(closed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(closed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout closed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("closed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*closed)(GdkPixbufLoader *)
     * }
     */
    public static final AddressLayout closed$layout() {
        return closed$LAYOUT;
    }

    private static final long closed$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*closed)(GdkPixbufLoader *)
     * }
     */
    public static final long closed$offset() {
        return closed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*closed)(GdkPixbufLoader *)
     * }
     */
    public static MemorySegment closed(MemorySegment struct) {
        return struct.get(closed$LAYOUT, closed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*closed)(GdkPixbufLoader *)
     * }
     */
    public static void closed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(closed$LAYOUT, closed$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

