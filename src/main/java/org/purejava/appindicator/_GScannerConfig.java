// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GScannerConfig {
 *     gchar* cset_skip_characters;
 *     gchar* cset_identifier_first;
 *     gchar* cset_identifier_nth;
 *     gchar* cpair_comment_single;
 *      *     guint case_sensitive;
 *     guint skip_comment_multi;
 *     guint skip_comment_single;
 *     guint scan_comment_multi;
 *     guint scan_identifier;
 *     guint scan_identifier_1char;
 *     guint scan_identifier_NULL;
 *     guint scan_symbols;
 *     guint scan_binary;
 *     guint scan_octal;
 *     guint scan_float;
 *     guint scan_hex;
 *     guint scan_hex_dollar;
 *     guint scan_string_sq;
 *     guint scan_string_dq;
 *     guint numbers_2_int;
 *     guint int_2_float;
 *     guint identifier_2_string;
 *     guint char_2_token;
 *     guint symbol_2_token;
 *     guint scope_0_fallback;
 *     guint store_int64;
 *     guint padding_dummy;
 * };
 * }
 */
public class _GScannerConfig {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("cset_skip_characters"),
        Constants$root.C_POINTER$LAYOUT.withName("cset_identifier_first"),
        Constants$root.C_POINTER$LAYOUT.withName("cset_identifier_nth"),
        Constants$root.C_POINTER$LAYOUT.withName("cpair_comment_single"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_INT$LAYOUT.withName("padding_dummy")
    ).withName("_GScannerConfig");
    public static MemoryLayout $LAYOUT() {
        return _GScannerConfig.$struct$LAYOUT;
    }
    static final VarHandle cset_skip_characters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cset_skip_characters"));
    public static VarHandle cset_skip_characters$VH() {
        return _GScannerConfig.cset_skip_characters$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* cset_skip_characters;
     * }
     */
    public static MemorySegment cset_skip_characters$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cset_skip_characters$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* cset_skip_characters;
     * }
     */
    public static void cset_skip_characters$set(MemorySegment seg, MemorySegment x) {
        _GScannerConfig.cset_skip_characters$VH.set(seg, x);
    }
    public static MemorySegment cset_skip_characters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cset_skip_characters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_skip_characters$set(MemorySegment seg, long index, MemorySegment x) {
        _GScannerConfig.cset_skip_characters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cset_identifier_first$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cset_identifier_first"));
    public static VarHandle cset_identifier_first$VH() {
        return _GScannerConfig.cset_identifier_first$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* cset_identifier_first;
     * }
     */
    public static MemorySegment cset_identifier_first$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cset_identifier_first$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* cset_identifier_first;
     * }
     */
    public static void cset_identifier_first$set(MemorySegment seg, MemorySegment x) {
        _GScannerConfig.cset_identifier_first$VH.set(seg, x);
    }
    public static MemorySegment cset_identifier_first$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cset_identifier_first$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_identifier_first$set(MemorySegment seg, long index, MemorySegment x) {
        _GScannerConfig.cset_identifier_first$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cset_identifier_nth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cset_identifier_nth"));
    public static VarHandle cset_identifier_nth$VH() {
        return _GScannerConfig.cset_identifier_nth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* cset_identifier_nth;
     * }
     */
    public static MemorySegment cset_identifier_nth$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cset_identifier_nth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* cset_identifier_nth;
     * }
     */
    public static void cset_identifier_nth$set(MemorySegment seg, MemorySegment x) {
        _GScannerConfig.cset_identifier_nth$VH.set(seg, x);
    }
    public static MemorySegment cset_identifier_nth$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cset_identifier_nth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_identifier_nth$set(MemorySegment seg, long index, MemorySegment x) {
        _GScannerConfig.cset_identifier_nth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cpair_comment_single$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cpair_comment_single"));
    public static VarHandle cpair_comment_single$VH() {
        return _GScannerConfig.cpair_comment_single$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* cpair_comment_single;
     * }
     */
    public static MemorySegment cpair_comment_single$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cpair_comment_single$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* cpair_comment_single;
     * }
     */
    public static void cpair_comment_single$set(MemorySegment seg, MemorySegment x) {
        _GScannerConfig.cpair_comment_single$VH.set(seg, x);
    }
    public static MemorySegment cpair_comment_single$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GScannerConfig.cpair_comment_single$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cpair_comment_single$set(MemorySegment seg, long index, MemorySegment x) {
        _GScannerConfig.cpair_comment_single$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle padding_dummy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("padding_dummy"));
    public static VarHandle padding_dummy$VH() {
        return _GScannerConfig.padding_dummy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint padding_dummy;
     * }
     */
    public static int padding_dummy$get(MemorySegment seg) {
        return (int)_GScannerConfig.padding_dummy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint padding_dummy;
     * }
     */
    public static void padding_dummy$set(MemorySegment seg, int x) {
        _GScannerConfig.padding_dummy$VH.set(seg, x);
    }
    public static int padding_dummy$get(MemorySegment seg, long index) {
        return (int)_GScannerConfig.padding_dummy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void padding_dummy$set(MemorySegment seg, long index, int x) {
        _GScannerConfig.padding_dummy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


