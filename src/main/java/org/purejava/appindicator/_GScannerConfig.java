// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GScannerConfig {
 *     char* cset_skip_characters;
 *     char* cset_identifier_first;
 *     char* cset_identifier_nth;
 *     char* cpair_comment_single;
 *      *     unsigned int case_sensitive;
 *     unsigned int skip_comment_multi;
 *     unsigned int skip_comment_single;
 *     unsigned int scan_comment_multi;
 *     unsigned int scan_identifier;
 *     unsigned int scan_identifier_1char;
 *     unsigned int scan_identifier_NULL;
 *     unsigned int scan_symbols;
 *     unsigned int scan_binary;
 *     unsigned int scan_octal;
 *     unsigned int scan_float;
 *     unsigned int scan_hex;
 *     unsigned int scan_hex_dollar;
 *     unsigned int scan_string_sq;
 *     unsigned int scan_string_dq;
 *     unsigned int numbers_2_int;
 *     unsigned int int_2_float;
 *     unsigned int identifier_2_string;
 *     unsigned int char_2_token;
 *     unsigned int symbol_2_token;
 *     unsigned int scope_0_fallback;
 *     unsigned int store_int64;
 *     unsigned int padding_dummy;
 * };
 * }
 */
public class _GScannerConfig {

    public static MemoryLayout $LAYOUT() {
        return constants$422.const$4;
    }
    public static VarHandle cset_skip_characters$VH() {
        return constants$422.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* cset_skip_characters;
     * }
     */
    public static MemorySegment cset_skip_characters$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$422.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* cset_skip_characters;
     * }
     */
    public static void cset_skip_characters$set(MemorySegment seg, MemorySegment x) {
        constants$422.const$5.set(seg, x);
    }
    public static MemorySegment cset_skip_characters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$422.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_skip_characters$set(MemorySegment seg, long index, MemorySegment x) {
        constants$422.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cset_identifier_first$VH() {
        return constants$423.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* cset_identifier_first;
     * }
     */
    public static MemorySegment cset_identifier_first$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$423.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* cset_identifier_first;
     * }
     */
    public static void cset_identifier_first$set(MemorySegment seg, MemorySegment x) {
        constants$423.const$0.set(seg, x);
    }
    public static MemorySegment cset_identifier_first$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$423.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_identifier_first$set(MemorySegment seg, long index, MemorySegment x) {
        constants$423.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cset_identifier_nth$VH() {
        return constants$423.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* cset_identifier_nth;
     * }
     */
    public static MemorySegment cset_identifier_nth$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$423.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* cset_identifier_nth;
     * }
     */
    public static void cset_identifier_nth$set(MemorySegment seg, MemorySegment x) {
        constants$423.const$1.set(seg, x);
    }
    public static MemorySegment cset_identifier_nth$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$423.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_identifier_nth$set(MemorySegment seg, long index, MemorySegment x) {
        constants$423.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cpair_comment_single$VH() {
        return constants$423.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* cpair_comment_single;
     * }
     */
    public static MemorySegment cpair_comment_single$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$423.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* cpair_comment_single;
     * }
     */
    public static void cpair_comment_single$set(MemorySegment seg, MemorySegment x) {
        constants$423.const$2.set(seg, x);
    }
    public static MemorySegment cpair_comment_single$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$423.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cpair_comment_single$set(MemorySegment seg, long index, MemorySegment x) {
        constants$423.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle padding_dummy$VH() {
        return constants$423.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int padding_dummy;
     * }
     */
    public static int padding_dummy$get(MemorySegment seg) {
        return (int)constants$423.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int padding_dummy;
     * }
     */
    public static void padding_dummy$set(MemorySegment seg, int x) {
        constants$423.const$3.set(seg, x);
    }
    public static int padding_dummy$get(MemorySegment seg, long index) {
        return (int)constants$423.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void padding_dummy$set(MemorySegment seg, long index, int x) {
        constants$423.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


