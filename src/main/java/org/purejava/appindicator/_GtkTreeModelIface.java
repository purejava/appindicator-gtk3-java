// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkTreeModelIface {
 *     GTypeInterface g_iface;
 *     void (*row_changed)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *);
 *     void (*row_inserted)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *);
 *     void (*row_has_child_toggled)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *);
 *     void (*row_deleted)(GtkTreeModel *, GtkTreePath *);
 *     void (*rows_reordered)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *, gint *);
 *     GtkTreeModelFlags (*get_flags)(GtkTreeModel *);
 *     gint (*get_n_columns)(GtkTreeModel *);
 *     GType (*get_column_type)(GtkTreeModel *, gint);
 *     gboolean (*get_iter)(GtkTreeModel *, GtkTreeIter *, GtkTreePath *);
 *     GtkTreePath *(*get_path)(GtkTreeModel *, GtkTreeIter *);
 *     void (*get_value)(GtkTreeModel *, GtkTreeIter *, gint, GValue *);
 *     gboolean (*iter_next)(GtkTreeModel *, GtkTreeIter *);
 *     gboolean (*iter_previous)(GtkTreeModel *, GtkTreeIter *);
 *     gboolean (*iter_children)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *);
 *     gboolean (*iter_has_child)(GtkTreeModel *, GtkTreeIter *);
 *     gint (*iter_n_children)(GtkTreeModel *, GtkTreeIter *);
 *     gboolean (*iter_nth_child)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gint);
 *     gboolean (*iter_parent)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *);
 *     void (*ref_node)(GtkTreeModel *, GtkTreeIter *);
 *     void (*unref_node)(GtkTreeModel *, GtkTreeIter *);
 * }
 * }
 */
public class _GtkTreeModelIface {

    _GtkTreeModelIface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("g_iface"),
        app_indicator_h.C_POINTER.withName("row_changed"),
        app_indicator_h.C_POINTER.withName("row_inserted"),
        app_indicator_h.C_POINTER.withName("row_has_child_toggled"),
        app_indicator_h.C_POINTER.withName("row_deleted"),
        app_indicator_h.C_POINTER.withName("rows_reordered"),
        app_indicator_h.C_POINTER.withName("get_flags"),
        app_indicator_h.C_POINTER.withName("get_n_columns"),
        app_indicator_h.C_POINTER.withName("get_column_type"),
        app_indicator_h.C_POINTER.withName("get_iter"),
        app_indicator_h.C_POINTER.withName("get_path"),
        app_indicator_h.C_POINTER.withName("get_value"),
        app_indicator_h.C_POINTER.withName("iter_next"),
        app_indicator_h.C_POINTER.withName("iter_previous"),
        app_indicator_h.C_POINTER.withName("iter_children"),
        app_indicator_h.C_POINTER.withName("iter_has_child"),
        app_indicator_h.C_POINTER.withName("iter_n_children"),
        app_indicator_h.C_POINTER.withName("iter_nth_child"),
        app_indicator_h.C_POINTER.withName("iter_parent"),
        app_indicator_h.C_POINTER.withName("ref_node"),
        app_indicator_h.C_POINTER.withName("unref_node")
    ).withName("_GtkTreeModelIface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout g_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("g_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final GroupLayout g_iface$layout() {
        return g_iface$LAYOUT;
    }

    private static final long g_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final long g_iface$offset() {
        return g_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static MemorySegment g_iface(MemorySegment struct) {
        return struct.asSlice(g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static void g_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*row_changed)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public class row_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(row_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(row_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout row_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*row_changed)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout row_changed$layout() {
        return row_changed$LAYOUT;
    }

    private static final long row_changed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*row_changed)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static final long row_changed$offset() {
        return row_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*row_changed)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static MemorySegment row_changed(MemorySegment struct) {
        return struct.get(row_changed$LAYOUT, row_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*row_changed)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static void row_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row_changed$LAYOUT, row_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*row_inserted)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public class row_inserted {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(row_inserted.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(row_inserted.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout row_inserted$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row_inserted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*row_inserted)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout row_inserted$layout() {
        return row_inserted$LAYOUT;
    }

    private static final long row_inserted$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*row_inserted)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static final long row_inserted$offset() {
        return row_inserted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*row_inserted)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static MemorySegment row_inserted(MemorySegment struct) {
        return struct.get(row_inserted$LAYOUT, row_inserted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*row_inserted)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static void row_inserted(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row_inserted$LAYOUT, row_inserted$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*row_has_child_toggled)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public class row_has_child_toggled {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(row_has_child_toggled.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(row_has_child_toggled.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout row_has_child_toggled$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row_has_child_toggled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*row_has_child_toggled)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout row_has_child_toggled$layout() {
        return row_has_child_toggled$LAYOUT;
    }

    private static final long row_has_child_toggled$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*row_has_child_toggled)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static final long row_has_child_toggled$offset() {
        return row_has_child_toggled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*row_has_child_toggled)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static MemorySegment row_has_child_toggled(MemorySegment struct) {
        return struct.get(row_has_child_toggled$LAYOUT, row_has_child_toggled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*row_has_child_toggled)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *)
     * }
     */
    public static void row_has_child_toggled(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row_has_child_toggled$LAYOUT, row_has_child_toggled$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*row_deleted)(GtkTreeModel *, GtkTreePath *)
     * }
     */
    public class row_deleted {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(row_deleted.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(row_deleted.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout row_deleted$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row_deleted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*row_deleted)(GtkTreeModel *, GtkTreePath *)
     * }
     */
    public static final AddressLayout row_deleted$layout() {
        return row_deleted$LAYOUT;
    }

    private static final long row_deleted$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*row_deleted)(GtkTreeModel *, GtkTreePath *)
     * }
     */
    public static final long row_deleted$offset() {
        return row_deleted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*row_deleted)(GtkTreeModel *, GtkTreePath *)
     * }
     */
    public static MemorySegment row_deleted(MemorySegment struct) {
        return struct.get(row_deleted$LAYOUT, row_deleted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*row_deleted)(GtkTreeModel *, GtkTreePath *)
     * }
     */
    public static void row_deleted(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row_deleted$LAYOUT, row_deleted$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*rows_reordered)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *, gint *)
     * }
     */
    public class rows_reordered {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(rows_reordered.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(rows_reordered.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout rows_reordered$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rows_reordered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*rows_reordered)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *, gint *)
     * }
     */
    public static final AddressLayout rows_reordered$layout() {
        return rows_reordered$LAYOUT;
    }

    private static final long rows_reordered$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*rows_reordered)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *, gint *)
     * }
     */
    public static final long rows_reordered$offset() {
        return rows_reordered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*rows_reordered)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *, gint *)
     * }
     */
    public static MemorySegment rows_reordered(MemorySegment struct) {
        return struct.get(rows_reordered$LAYOUT, rows_reordered$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*rows_reordered)(GtkTreeModel *, GtkTreePath *, GtkTreeIter *, gint *)
     * }
     */
    public static void rows_reordered(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rows_reordered$LAYOUT, rows_reordered$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GtkTreeModelFlags (*get_flags)(GtkTreeModel *)
     * }
     */
    public class get_flags {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_flags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_flags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_flags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkTreeModelFlags (*get_flags)(GtkTreeModel *)
     * }
     */
    public static final AddressLayout get_flags$layout() {
        return get_flags$LAYOUT;
    }

    private static final long get_flags$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkTreeModelFlags (*get_flags)(GtkTreeModel *)
     * }
     */
    public static final long get_flags$offset() {
        return get_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkTreeModelFlags (*get_flags)(GtkTreeModel *)
     * }
     */
    public static MemorySegment get_flags(MemorySegment struct) {
        return struct.get(get_flags$LAYOUT, get_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkTreeModelFlags (*get_flags)(GtkTreeModel *)
     * }
     */
    public static void get_flags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_flags$LAYOUT, get_flags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gint (*get_n_columns)(GtkTreeModel *)
     * }
     */
    public class get_n_columns {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_n_columns.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_n_columns.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_n_columns$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_n_columns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint (*get_n_columns)(GtkTreeModel *)
     * }
     */
    public static final AddressLayout get_n_columns$layout() {
        return get_n_columns$LAYOUT;
    }

    private static final long get_n_columns$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint (*get_n_columns)(GtkTreeModel *)
     * }
     */
    public static final long get_n_columns$offset() {
        return get_n_columns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint (*get_n_columns)(GtkTreeModel *)
     * }
     */
    public static MemorySegment get_n_columns(MemorySegment struct) {
        return struct.get(get_n_columns$LAYOUT, get_n_columns$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint (*get_n_columns)(GtkTreeModel *)
     * }
     */
    public static void get_n_columns(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_n_columns$LAYOUT, get_n_columns$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GType (*get_column_type)(GtkTreeModel *, gint)
     * }
     */
    public class get_column_type {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_column_type.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_column_type.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_column_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_column_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GType (*get_column_type)(GtkTreeModel *, gint)
     * }
     */
    public static final AddressLayout get_column_type$layout() {
        return get_column_type$LAYOUT;
    }

    private static final long get_column_type$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GType (*get_column_type)(GtkTreeModel *, gint)
     * }
     */
    public static final long get_column_type$offset() {
        return get_column_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GType (*get_column_type)(GtkTreeModel *, gint)
     * }
     */
    public static MemorySegment get_column_type(MemorySegment struct) {
        return struct.get(get_column_type$LAYOUT, get_column_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GType (*get_column_type)(GtkTreeModel *, gint)
     * }
     */
    public static void get_column_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_column_type$LAYOUT, get_column_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*get_iter)(GtkTreeModel *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public class get_iter {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_iter.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_iter.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_iter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_iter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*get_iter)(GtkTreeModel *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final AddressLayout get_iter$layout() {
        return get_iter$LAYOUT;
    }

    private static final long get_iter$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*get_iter)(GtkTreeModel *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final long get_iter$offset() {
        return get_iter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*get_iter)(GtkTreeModel *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static MemorySegment get_iter(MemorySegment struct) {
        return struct.get(get_iter$LAYOUT, get_iter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*get_iter)(GtkTreeModel *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static void get_iter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_iter$LAYOUT, get_iter$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GtkTreePath *(*get_path)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public class get_path {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_path.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_path.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkTreePath *(*get_path)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout get_path$layout() {
        return get_path$LAYOUT;
    }

    private static final long get_path$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkTreePath *(*get_path)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final long get_path$offset() {
        return get_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkTreePath *(*get_path)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static MemorySegment get_path(MemorySegment struct) {
        return struct.get(get_path$LAYOUT, get_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkTreePath *(*get_path)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static void get_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_path$LAYOUT, get_path$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_value)(GtkTreeModel *, GtkTreeIter *, gint, GValue *)
     * }
     */
    public class get_value {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_value.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_value.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_value$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_value)(GtkTreeModel *, GtkTreeIter *, gint, GValue *)
     * }
     */
    public static final AddressLayout get_value$layout() {
        return get_value$LAYOUT;
    }

    private static final long get_value$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_value)(GtkTreeModel *, GtkTreeIter *, gint, GValue *)
     * }
     */
    public static final long get_value$offset() {
        return get_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_value)(GtkTreeModel *, GtkTreeIter *, gint, GValue *)
     * }
     */
    public static MemorySegment get_value(MemorySegment struct) {
        return struct.get(get_value$LAYOUT, get_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_value)(GtkTreeModel *, GtkTreeIter *, gint, GValue *)
     * }
     */
    public static void get_value(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_value$LAYOUT, get_value$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*iter_next)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public class iter_next {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(iter_next.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(iter_next.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout iter_next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iter_next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*iter_next)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout iter_next$layout() {
        return iter_next$LAYOUT;
    }

    private static final long iter_next$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*iter_next)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final long iter_next$offset() {
        return iter_next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*iter_next)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static MemorySegment iter_next(MemorySegment struct) {
        return struct.get(iter_next$LAYOUT, iter_next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*iter_next)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static void iter_next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iter_next$LAYOUT, iter_next$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*iter_previous)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public class iter_previous {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(iter_previous.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(iter_previous.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout iter_previous$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iter_previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*iter_previous)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout iter_previous$layout() {
        return iter_previous$LAYOUT;
    }

    private static final long iter_previous$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*iter_previous)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final long iter_previous$offset() {
        return iter_previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*iter_previous)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static MemorySegment iter_previous(MemorySegment struct) {
        return struct.get(iter_previous$LAYOUT, iter_previous$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*iter_previous)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static void iter_previous(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iter_previous$LAYOUT, iter_previous$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*iter_children)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public class iter_children {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(iter_children.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(iter_children.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout iter_children$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iter_children"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*iter_children)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout iter_children$layout() {
        return iter_children$LAYOUT;
    }

    private static final long iter_children$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*iter_children)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static final long iter_children$offset() {
        return iter_children$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*iter_children)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static MemorySegment iter_children(MemorySegment struct) {
        return struct.get(iter_children$LAYOUT, iter_children$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*iter_children)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static void iter_children(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iter_children$LAYOUT, iter_children$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*iter_has_child)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public class iter_has_child {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(iter_has_child.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(iter_has_child.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout iter_has_child$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iter_has_child"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*iter_has_child)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout iter_has_child$layout() {
        return iter_has_child$LAYOUT;
    }

    private static final long iter_has_child$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*iter_has_child)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final long iter_has_child$offset() {
        return iter_has_child$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*iter_has_child)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static MemorySegment iter_has_child(MemorySegment struct) {
        return struct.get(iter_has_child$LAYOUT, iter_has_child$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*iter_has_child)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static void iter_has_child(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iter_has_child$LAYOUT, iter_has_child$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gint (*iter_n_children)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public class iter_n_children {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(iter_n_children.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(iter_n_children.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout iter_n_children$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iter_n_children"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint (*iter_n_children)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout iter_n_children$layout() {
        return iter_n_children$LAYOUT;
    }

    private static final long iter_n_children$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint (*iter_n_children)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final long iter_n_children$offset() {
        return iter_n_children$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint (*iter_n_children)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static MemorySegment iter_n_children(MemorySegment struct) {
        return struct.get(iter_n_children$LAYOUT, iter_n_children$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint (*iter_n_children)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static void iter_n_children(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iter_n_children$LAYOUT, iter_n_children$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*iter_nth_child)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gint)
     * }
     */
    public class iter_nth_child {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(iter_nth_child.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(iter_nth_child.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout iter_nth_child$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iter_nth_child"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*iter_nth_child)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gint)
     * }
     */
    public static final AddressLayout iter_nth_child$layout() {
        return iter_nth_child$LAYOUT;
    }

    private static final long iter_nth_child$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*iter_nth_child)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gint)
     * }
     */
    public static final long iter_nth_child$offset() {
        return iter_nth_child$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*iter_nth_child)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gint)
     * }
     */
    public static MemorySegment iter_nth_child(MemorySegment struct) {
        return struct.get(iter_nth_child$LAYOUT, iter_nth_child$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*iter_nth_child)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gint)
     * }
     */
    public static void iter_nth_child(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iter_nth_child$LAYOUT, iter_nth_child$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*iter_parent)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public class iter_parent {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(iter_parent.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(iter_parent.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout iter_parent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iter_parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*iter_parent)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout iter_parent$layout() {
        return iter_parent$LAYOUT;
    }

    private static final long iter_parent$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*iter_parent)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static final long iter_parent$offset() {
        return iter_parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*iter_parent)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static MemorySegment iter_parent(MemorySegment struct) {
        return struct.get(iter_parent$LAYOUT, iter_parent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*iter_parent)(GtkTreeModel *, GtkTreeIter *, GtkTreeIter *)
     * }
     */
    public static void iter_parent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iter_parent$LAYOUT, iter_parent$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*ref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public class ref_node {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(ref_node.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ref_node.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ref_node$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ref_node"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*ref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout ref_node$layout() {
        return ref_node$LAYOUT;
    }

    private static final long ref_node$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*ref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final long ref_node$offset() {
        return ref_node$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*ref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static MemorySegment ref_node(MemorySegment struct) {
        return struct.get(ref_node$LAYOUT, ref_node$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*ref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static void ref_node(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ref_node$LAYOUT, ref_node$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*unref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public class unref_node {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unref_node.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unref_node.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unref_node$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unref_node"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*unref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final AddressLayout unref_node$layout() {
        return unref_node$LAYOUT;
    }

    private static final long unref_node$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*unref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static final long unref_node$offset() {
        return unref_node$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*unref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static MemorySegment unref_node(MemorySegment struct) {
        return struct.get(unref_node$LAYOUT, unref_node$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*unref_node)(GtkTreeModel *, GtkTreeIter *)
     * }
     */
    public static void unref_node(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unref_node$LAYOUT, unref_node$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

