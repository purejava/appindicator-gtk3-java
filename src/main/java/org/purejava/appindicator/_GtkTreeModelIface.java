// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkTreeModelIface {
 *     struct _GTypeInterface g_iface;
 *     void (*row_changed)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
 *     void (*row_inserted)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
 *     void (*row_has_child_toggled)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
 *     void (*row_deleted)(struct _GtkTreeModel*,struct _GtkTreePath*);
 *     void (*rows_reordered)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*,int*);
 *     enum GtkTreeModelFlags (*get_flags)(struct _GtkTreeModel*);
 *     int (*get_n_columns)(struct _GtkTreeModel*);
 *     unsigned long (*get_column_type)(struct _GtkTreeModel*,int);
 *     int (*get_iter)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreePath*);
 *     struct _GtkTreePath* (*get_path)(struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     void (*get_value)(struct _GtkTreeModel*,struct _GtkTreeIter*,int,struct _GValue*);
 *     int (*iter_next)(struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     int (*iter_previous)(struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     int (*iter_children)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
 *     int (*iter_has_child)(struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     int (*iter_n_children)(struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     int (*iter_nth_child)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,int);
 *     int (*iter_parent)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
 *     void (*ref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     void (*unref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
 * };
 * }
 */
public class _GtkTreeModelIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2288.const$2;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*row_changed)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public interface row_changed {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(row_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2288.const$3, fi, constants$14.const$3, scope);
        }
        static row_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_changed$VH() {
        return constants$2288.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_changed)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment row_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_changed)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public static void row_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2288.const$4.set(seg, x);
    }
    public static MemorySegment row_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2288.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void row_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2288.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_changed row_changed(MemorySegment segment, Arena scope) {
        return row_changed.ofAddress(row_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_inserted)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public interface row_inserted {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(row_inserted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2288.const$5, fi, constants$14.const$3, scope);
        }
        static row_inserted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_inserted$VH() {
        return constants$2289.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_inserted)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment row_inserted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_inserted)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public static void row_inserted$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$0.set(seg, x);
    }
    public static MemorySegment row_inserted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void row_inserted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_inserted row_inserted(MemorySegment segment, Arena scope) {
        return row_inserted.ofAddress(row_inserted$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_has_child_toggled)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public interface row_has_child_toggled {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(row_has_child_toggled fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2289.const$1, fi, constants$14.const$3, scope);
        }
        static row_has_child_toggled ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_has_child_toggled$VH() {
        return constants$2289.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_has_child_toggled)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment row_has_child_toggled$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_has_child_toggled)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*);
     * }
     */
    public static void row_has_child_toggled$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$2.set(seg, x);
    }
    public static MemorySegment row_has_child_toggled$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void row_has_child_toggled$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_has_child_toggled row_has_child_toggled(MemorySegment segment, Arena scope) {
        return row_has_child_toggled.ofAddress(row_has_child_toggled$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_deleted)(struct _GtkTreeModel*,struct _GtkTreePath*);
     * }
     */
    public interface row_deleted {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(row_deleted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2289.const$3, fi, constants$13.const$4, scope);
        }
        static row_deleted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_deleted$VH() {
        return constants$2289.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_deleted)(struct _GtkTreeModel*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment row_deleted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_deleted)(struct _GtkTreeModel*,struct _GtkTreePath*);
     * }
     */
    public static void row_deleted$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$4.set(seg, x);
    }
    public static MemorySegment row_deleted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void row_deleted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_deleted row_deleted(MemorySegment segment, Arena scope) {
        return row_deleted.ofAddress(row_deleted$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*rows_reordered)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*,int*);
     * }
     */
    public interface rows_reordered {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(rows_reordered fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2289.const$5, fi, constants$42.const$1, scope);
        }
        static rows_reordered ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle rows_reordered$VH() {
        return constants$2290.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*rows_reordered)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*,int*);
     * }
     */
    public static MemorySegment rows_reordered$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*rows_reordered)(struct _GtkTreeModel*,struct _GtkTreePath*,struct _GtkTreeIter*,int*);
     * }
     */
    public static void rows_reordered$set(MemorySegment seg, MemorySegment x) {
        constants$2290.const$0.set(seg, x);
    }
    public static MemorySegment rows_reordered$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rows_reordered$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2290.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static rows_reordered rows_reordered(MemorySegment segment, Arena scope) {
        return rows_reordered.ofAddress(rows_reordered$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GtkTreeModelFlags (*get_flags)(struct _GtkTreeModel*);
     * }
     */
    public interface get_flags {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_flags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2290.const$1, fi, constants$10.const$5, scope);
        }
        static get_flags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_flags$VH() {
        return constants$2290.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkTreeModelFlags (*get_flags)(struct _GtkTreeModel*);
     * }
     */
    public static MemorySegment get_flags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkTreeModelFlags (*get_flags)(struct _GtkTreeModel*);
     * }
     */
    public static void get_flags$set(MemorySegment seg, MemorySegment x) {
        constants$2290.const$2.set(seg, x);
    }
    public static MemorySegment get_flags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_flags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2290.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_flags get_flags(MemorySegment segment, Arena scope) {
        return get_flags.ofAddress(get_flags$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_n_columns)(struct _GtkTreeModel*);
     * }
     */
    public interface get_n_columns {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_n_columns fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2290.const$3, fi, constants$10.const$5, scope);
        }
        static get_n_columns ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_n_columns$VH() {
        return constants$2290.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_n_columns)(struct _GtkTreeModel*);
     * }
     */
    public static MemorySegment get_n_columns$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_n_columns)(struct _GtkTreeModel*);
     * }
     */
    public static void get_n_columns$set(MemorySegment seg, MemorySegment x) {
        constants$2290.const$4.set(seg, x);
    }
    public static MemorySegment get_n_columns$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2290.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_columns$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2290.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_columns get_n_columns(MemorySegment segment, Arena scope) {
        return get_n_columns.ofAddress(get_n_columns$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned long (*get_column_type)(struct _GtkTreeModel*,int);
     * }
     */
    public interface get_column_type {

        long apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_column_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2290.const$5, fi, constants$820.const$1, scope);
        }
        static get_column_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (long)constants$2291.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_column_type$VH() {
        return constants$2291.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long (*get_column_type)(struct _GtkTreeModel*,int);
     * }
     */
    public static MemorySegment get_column_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long (*get_column_type)(struct _GtkTreeModel*,int);
     * }
     */
    public static void get_column_type$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$1.set(seg, x);
    }
    public static MemorySegment get_column_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_type get_column_type(MemorySegment segment, Arena scope) {
        return get_column_type.ofAddress(get_column_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_iter)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public interface get_iter {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_iter fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2291.const$2, fi, constants$12.const$2, scope);
        }
        static get_iter ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_iter$VH() {
        return constants$2291.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_iter)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment get_iter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_iter)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static void get_iter$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$3.set(seg, x);
    }
    public static MemorySegment get_iter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_iter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_iter get_iter(MemorySegment segment, Arena scope) {
        return get_iter.ofAddress(get_iter$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkTreePath* (*get_path)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface get_path {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2291.const$4, fi, constants$5.const$5, scope);
        }
        static get_path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_path$VH() {
        return constants$2291.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkTreePath* (*get_path)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment get_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkTreePath* (*get_path)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void get_path$set(MemorySegment seg, MemorySegment x) {
        constants$2291.const$5.set(seg, x);
    }
    public static MemorySegment get_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2291.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2291.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_path get_path(MemorySegment segment, Arena scope) {
        return get_path.ofAddress(get_path$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_value)(struct _GtkTreeModel*,struct _GtkTreeIter*,int,struct _GValue*);
     * }
     */
    public interface get_value {

        void apply(java.lang.foreign.MemorySegment clipboard, java.lang.foreign.MemorySegment atoms, int n_atoms, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2292.const$0, fi, constants$464.const$4, scope);
        }
        static get_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _clipboard, java.lang.foreign.MemorySegment _atoms, int _n_atoms, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$737.const$4.invokeExact(symbol, _clipboard, _atoms, _n_atoms, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_value$VH() {
        return constants$2292.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_value)(struct _GtkTreeModel*,struct _GtkTreeIter*,int,struct _GValue*);
     * }
     */
    public static MemorySegment get_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_value)(struct _GtkTreeModel*,struct _GtkTreeIter*,int,struct _GValue*);
     * }
     */
    public static void get_value$set(MemorySegment seg, MemorySegment x) {
        constants$2292.const$1.set(seg, x);
    }
    public static MemorySegment get_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2292.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value get_value(MemorySegment segment, Arena scope) {
        return get_value.ofAddress(get_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*iter_next)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface iter_next {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(iter_next fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2292.const$2, fi, constants$9.const$0, scope);
        }
        static iter_next ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle iter_next$VH() {
        return constants$2292.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*iter_next)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment iter_next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*iter_next)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void iter_next$set(MemorySegment seg, MemorySegment x) {
        constants$2292.const$3.set(seg, x);
    }
    public static MemorySegment iter_next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void iter_next$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2292.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static iter_next iter_next(MemorySegment segment, Arena scope) {
        return iter_next.ofAddress(iter_next$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*iter_previous)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface iter_previous {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(iter_previous fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2292.const$4, fi, constants$9.const$0, scope);
        }
        static iter_previous ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle iter_previous$VH() {
        return constants$2292.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*iter_previous)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment iter_previous$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*iter_previous)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void iter_previous$set(MemorySegment seg, MemorySegment x) {
        constants$2292.const$5.set(seg, x);
    }
    public static MemorySegment iter_previous$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2292.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void iter_previous$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2292.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static iter_previous iter_previous(MemorySegment segment, Arena scope) {
        return iter_previous.ofAddress(iter_previous$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*iter_children)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
     * }
     */
    public interface iter_children {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(iter_children fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2293.const$0, fi, constants$12.const$2, scope);
        }
        static iter_children ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle iter_children$VH() {
        return constants$2293.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*iter_children)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment iter_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2293.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*iter_children)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
     * }
     */
    public static void iter_children$set(MemorySegment seg, MemorySegment x) {
        constants$2293.const$1.set(seg, x);
    }
    public static MemorySegment iter_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2293.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void iter_children$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2293.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static iter_children iter_children(MemorySegment segment, Arena scope) {
        return iter_children.ofAddress(iter_children$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*iter_has_child)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface iter_has_child {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(iter_has_child fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2293.const$2, fi, constants$9.const$0, scope);
        }
        static iter_has_child ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle iter_has_child$VH() {
        return constants$2293.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*iter_has_child)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment iter_has_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2293.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*iter_has_child)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void iter_has_child$set(MemorySegment seg, MemorySegment x) {
        constants$2293.const$3.set(seg, x);
    }
    public static MemorySegment iter_has_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2293.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void iter_has_child$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2293.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static iter_has_child iter_has_child(MemorySegment segment, Arena scope) {
        return iter_has_child.ofAddress(iter_has_child$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*iter_n_children)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface iter_n_children {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(iter_n_children fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2293.const$4, fi, constants$9.const$0, scope);
        }
        static iter_n_children ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle iter_n_children$VH() {
        return constants$2293.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*iter_n_children)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment iter_n_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2293.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*iter_n_children)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void iter_n_children$set(MemorySegment seg, MemorySegment x) {
        constants$2293.const$5.set(seg, x);
    }
    public static MemorySegment iter_n_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2293.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void iter_n_children$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2293.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static iter_n_children iter_n_children(MemorySegment segment, Arena scope) {
        return iter_n_children.ofAddress(iter_n_children$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*iter_nth_child)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,int);
     * }
     */
    public interface iter_nth_child {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(iter_nth_child fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2294.const$0, fi, constants$311.const$0, scope);
        }
        static iter_nth_child ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$1606.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle iter_nth_child$VH() {
        return constants$2294.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*iter_nth_child)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,int);
     * }
     */
    public static MemorySegment iter_nth_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2294.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*iter_nth_child)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,int);
     * }
     */
    public static void iter_nth_child$set(MemorySegment seg, MemorySegment x) {
        constants$2294.const$1.set(seg, x);
    }
    public static MemorySegment iter_nth_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2294.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void iter_nth_child$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2294.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static iter_nth_child iter_nth_child(MemorySegment segment, Arena scope) {
        return iter_nth_child.ofAddress(iter_nth_child$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*iter_parent)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
     * }
     */
    public interface iter_parent {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(iter_parent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2294.const$2, fi, constants$12.const$2, scope);
        }
        static iter_parent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle iter_parent$VH() {
        return constants$2294.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*iter_parent)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment iter_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2294.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*iter_parent)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*);
     * }
     */
    public static void iter_parent$set(MemorySegment seg, MemorySegment x) {
        constants$2294.const$3.set(seg, x);
    }
    public static MemorySegment iter_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2294.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void iter_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2294.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static iter_parent iter_parent(MemorySegment segment, Arena scope) {
        return iter_parent.ofAddress(iter_parent$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface ref_node {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(ref_node fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2294.const$4, fi, constants$13.const$4, scope);
        }
        static ref_node ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ref_node$VH() {
        return constants$2294.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment ref_node$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2294.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void ref_node$set(MemorySegment seg, MemorySegment x) {
        constants$2294.const$5.set(seg, x);
    }
    public static MemorySegment ref_node$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2294.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_node$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2294.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_node ref_node(MemorySegment segment, Arena scope) {
        return ref_node.ofAddress(ref_node$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface unref_node {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(unref_node fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2295.const$0, fi, constants$13.const$4, scope);
        }
        static unref_node ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unref_node$VH() {
        return constants$2295.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment unref_node$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2295.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unref_node)(struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void unref_node$set(MemorySegment seg, MemorySegment x) {
        constants$2295.const$1.set(seg, x);
    }
    public static MemorySegment unref_node$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2295.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void unref_node$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2295.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static unref_node unref_node(MemorySegment segment, Arena scope) {
        return unref_node.ofAddress(unref_node$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


