// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _AtkMiscClass {
 *     GObjectClass parent;
 *     void (*threads_enter)(AtkMisc *);
 *     void (*threads_leave)(AtkMisc *);
 *     gpointer vfuncs[32];
 * }
 * }
 */
public class _AtkMiscClass {

    _AtkMiscClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent"),
        app_indicator_h.C_POINTER.withName("threads_enter"),
        app_indicator_h.C_POINTER.withName("threads_leave"),
        MemoryLayout.sequenceLayout(32, app_indicator_h.C_POINTER).withName("vfuncs")
    ).withName("_AtkMiscClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static final GroupLayout parent$layout() {
        return parent$LAYOUT;
    }

    private static final long parent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static final long parent$offset() {
        return parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static MemorySegment parent(MemorySegment struct) {
        return struct.asSlice(parent$OFFSET, parent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static void parent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent$OFFSET, parent$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*threads_enter)(AtkMisc *)
     * }
     */
    public class threads_enter {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(threads_enter.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(threads_enter.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout threads_enter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("threads_enter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*threads_enter)(AtkMisc *)
     * }
     */
    public static final AddressLayout threads_enter$layout() {
        return threads_enter$LAYOUT;
    }

    private static final long threads_enter$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*threads_enter)(AtkMisc *)
     * }
     */
    public static final long threads_enter$offset() {
        return threads_enter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*threads_enter)(AtkMisc *)
     * }
     */
    public static MemorySegment threads_enter(MemorySegment struct) {
        return struct.get(threads_enter$LAYOUT, threads_enter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*threads_enter)(AtkMisc *)
     * }
     */
    public static void threads_enter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(threads_enter$LAYOUT, threads_enter$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*threads_leave)(AtkMisc *)
     * }
     */
    public class threads_leave {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(threads_leave.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(threads_leave.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout threads_leave$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("threads_leave"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*threads_leave)(AtkMisc *)
     * }
     */
    public static final AddressLayout threads_leave$layout() {
        return threads_leave$LAYOUT;
    }

    private static final long threads_leave$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*threads_leave)(AtkMisc *)
     * }
     */
    public static final long threads_leave$offset() {
        return threads_leave$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*threads_leave)(AtkMisc *)
     * }
     */
    public static MemorySegment threads_leave(MemorySegment struct) {
        return struct.get(threads_leave$LAYOUT, threads_leave$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*threads_leave)(AtkMisc *)
     * }
     */
    public static void threads_leave(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(threads_leave$LAYOUT, threads_leave$OFFSET, fieldValue);
    }

    private static final SequenceLayout vfuncs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("vfuncs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer vfuncs[32]
     * }
     */
    public static final SequenceLayout vfuncs$layout() {
        return vfuncs$LAYOUT;
    }

    private static final long vfuncs$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer vfuncs[32]
     * }
     */
    public static final long vfuncs$offset() {
        return vfuncs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer vfuncs[32]
     * }
     */
    public static MemorySegment vfuncs(MemorySegment struct) {
        return struct.asSlice(vfuncs$OFFSET, vfuncs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer vfuncs[32]
     * }
     */
    public static void vfuncs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, vfuncs$OFFSET, vfuncs$LAYOUT.byteSize());
    }

    private static long[] vfuncs$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * gpointer vfuncs[32]
     * }
     */
    public static long[] vfuncs$dimensions() {
        return vfuncs$DIMS;
    }
    private static final VarHandle vfuncs$ELEM_HANDLE = vfuncs$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * gpointer vfuncs[32]
     * }
     */
    public static MemorySegment vfuncs(MemorySegment struct, long index0) {
        return (MemorySegment)vfuncs$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * gpointer vfuncs[32]
     * }
     */
    public static void vfuncs(MemorySegment struct, long index0, MemorySegment fieldValue) {
        vfuncs$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

