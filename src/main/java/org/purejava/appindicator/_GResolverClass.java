// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GResolverClass {
 *     struct _GObjectClass parent_class;
 *     void (*reload)(struct _GResolver*);
 *     struct _GList* (*lookup_by_name)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
 *     void (*lookup_by_name_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GList* (*lookup_by_name_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
 *     char* (*lookup_by_address)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,struct _GError**);
 *     void (*lookup_by_address_async)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     char* (*lookup_by_address_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
 *     struct _GList* (*lookup_service)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
 *     void (*lookup_service_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GList* (*lookup_service_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
 *     struct _GList* (*lookup_records)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,struct _GError**);
 *     void (*lookup_records_async)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GList* (*lookup_records_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
 *     void (*lookup_by_name_with_flags_async)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GList* (*lookup_by_name_with_flags_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
 *     struct _GList* (*lookup_by_name_with_flags)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,struct _GError**);
 * };
 * }
 */
public class _GResolverClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1234.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*reload)(struct _GResolver*);
     * }
     */
    public interface reload {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(reload fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1234.const$3, fi, constants$13.const$1, scope);
        }
        static reload ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle reload$VH() {
        return constants$1234.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*reload)(struct _GResolver*);
     * }
     */
    public static MemorySegment reload$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1234.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*reload)(struct _GResolver*);
     * }
     */
    public static void reload$set(MemorySegment seg, MemorySegment x) {
        constants$1234.const$4.set(seg, x);
    }
    public static MemorySegment reload$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1234.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reload$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1234.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static reload reload(MemorySegment segment, Arena scope) {
        return reload.ofAddress(reload$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_by_name)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_by_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(lookup_by_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1234.const$5, fi, constants$39.const$1, scope);
        }
        static lookup_by_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$868.const$5.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_name$VH() {
        return constants$1235.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_by_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1235.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_by_name$set(MemorySegment seg, MemorySegment x) {
        constants$1235.const$0.set(seg, x);
    }
    public static MemorySegment lookup_by_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1235.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1235.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name lookup_by_name(MemorySegment segment, Arena scope) {
        return lookup_by_name.ofAddress(lookup_by_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_by_name_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_by_name_async {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(lookup_by_name_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1235.const$1, fi, constants$332.const$1, scope);
        }
        static lookup_by_name_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$919.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_name_async$VH() {
        return constants$1235.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_by_name_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_by_name_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1235.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_by_name_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_by_name_async$set(MemorySegment seg, MemorySegment x) {
        constants$1235.const$2.set(seg, x);
    }
    public static MemorySegment lookup_by_name_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1235.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1235.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_async lookup_by_name_async(MemorySegment segment, Arena scope) {
        return lookup_by_name_async.ofAddress(lookup_by_name_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_by_name_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_by_name_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_by_name_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1235.const$3, fi, constants$23.const$0, scope);
        }
        static lookup_by_name_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_name_finish$VH() {
        return constants$1235.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_by_name_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1235.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_by_name_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1235.const$4.set(seg, x);
    }
    public static MemorySegment lookup_by_name_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1235.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1235.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_finish lookup_by_name_finish(MemorySegment segment, Arena scope) {
        return lookup_by_name_finish.ofAddress(lookup_by_name_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*lookup_by_address)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_by_address {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(lookup_by_address fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1235.const$5, fi, constants$39.const$1, scope);
        }
        static lookup_by_address ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$868.const$5.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_address$VH() {
        return constants$1236.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*lookup_by_address)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_by_address$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1236.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*lookup_by_address)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_by_address$set(MemorySegment seg, MemorySegment x) {
        constants$1236.const$0.set(seg, x);
    }
    public static MemorySegment lookup_by_address$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1236.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_address$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1236.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_address lookup_by_address(MemorySegment segment, Arena scope) {
        return lookup_by_address.ofAddress(lookup_by_address$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_by_address_async)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_by_address_async {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(lookup_by_address_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1236.const$1, fi, constants$332.const$1, scope);
        }
        static lookup_by_address_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$919.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_address_async$VH() {
        return constants$1236.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_by_address_async)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_by_address_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1236.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_by_address_async)(struct _GResolver*,struct _GInetAddress*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_by_address_async$set(MemorySegment seg, MemorySegment x) {
        constants$1236.const$2.set(seg, x);
    }
    public static MemorySegment lookup_by_address_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1236.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_address_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1236.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_address_async lookup_by_address_async(MemorySegment segment, Arena scope) {
        return lookup_by_address_async.ofAddress(lookup_by_address_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*lookup_by_address_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_by_address_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_by_address_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1236.const$3, fi, constants$23.const$0, scope);
        }
        static lookup_by_address_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_address_finish$VH() {
        return constants$1236.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*lookup_by_address_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_by_address_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1236.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*lookup_by_address_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_by_address_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1236.const$4.set(seg, x);
    }
    public static MemorySegment lookup_by_address_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1236.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_address_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1236.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_address_finish lookup_by_address_finish(MemorySegment segment, Arena scope) {
        return lookup_by_address_finish.ofAddress(lookup_by_address_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_service)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_service {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(lookup_service fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1236.const$5, fi, constants$39.const$1, scope);
        }
        static lookup_service ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$868.const$5.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_service$VH() {
        return constants$1237.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_service)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_service$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1237.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_service)(struct _GResolver*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_service$set(MemorySegment seg, MemorySegment x) {
        constants$1237.const$0.set(seg, x);
    }
    public static MemorySegment lookup_service$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1237.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_service$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1237.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_service lookup_service(MemorySegment segment, Arena scope) {
        return lookup_service.ofAddress(lookup_service$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_service_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_service_async {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(lookup_service_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1237.const$1, fi, constants$332.const$1, scope);
        }
        static lookup_service_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$919.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_service_async$VH() {
        return constants$1237.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_service_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_service_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1237.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_service_async)(struct _GResolver*,char*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_service_async$set(MemorySegment seg, MemorySegment x) {
        constants$1237.const$2.set(seg, x);
    }
    public static MemorySegment lookup_service_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1237.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_service_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1237.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_service_async lookup_service_async(MemorySegment segment, Arena scope) {
        return lookup_service_async.ofAddress(lookup_service_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_service_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_service_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_service_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1237.const$3, fi, constants$23.const$0, scope);
        }
        static lookup_service_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_service_finish$VH() {
        return constants$1237.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_service_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_service_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1237.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_service_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_service_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1237.const$4.set(seg, x);
    }
    public static MemorySegment lookup_service_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1237.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_service_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1237.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_service_finish lookup_service_finish(MemorySegment segment, Arena scope) {
        return lookup_service_finish.ofAddress(lookup_service_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_records)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_records {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(lookup_records fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1237.const$5, fi, constants$980.const$0, scope);
        }
        static lookup_records ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$980.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_records$VH() {
        return constants$1238.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_records)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_records$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1238.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_records)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_records$set(MemorySegment seg, MemorySegment x) {
        constants$1238.const$0.set(seg, x);
    }
    public static MemorySegment lookup_records$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1238.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_records$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1238.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_records lookup_records(MemorySegment segment, Arena scope) {
        return lookup_records.ofAddress(lookup_records$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_records_async)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_records_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(lookup_records_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1238.const$1, fi, constants$587.const$0, scope);
        }
        static lookup_records_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$587.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_records_async$VH() {
        return constants$1238.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_records_async)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_records_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1238.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_records_async)(struct _GResolver*,char*,enum GResolverRecordType,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_records_async$set(MemorySegment seg, MemorySegment x) {
        constants$1238.const$2.set(seg, x);
    }
    public static MemorySegment lookup_records_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1238.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_records_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1238.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_records_async lookup_records_async(MemorySegment segment, Arena scope) {
        return lookup_records_async.ofAddress(lookup_records_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_records_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_records_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_records_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1238.const$3, fi, constants$23.const$0, scope);
        }
        static lookup_records_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_records_finish$VH() {
        return constants$1238.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_records_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_records_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1238.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_records_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_records_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1238.const$4.set(seg, x);
    }
    public static MemorySegment lookup_records_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1238.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_records_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1238.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_records_finish lookup_records_finish(MemorySegment segment, Arena scope) {
        return lookup_records_finish.ofAddress(lookup_records_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_by_name_with_flags_async)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_by_name_with_flags_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(lookup_by_name_with_flags_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1238.const$5, fi, constants$587.const$0, scope);
        }
        static lookup_by_name_with_flags_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$587.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_name_with_flags_async$VH() {
        return constants$1239.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_by_name_with_flags_async)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_by_name_with_flags_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1239.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_by_name_with_flags_async)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_by_name_with_flags_async$set(MemorySegment seg, MemorySegment x) {
        constants$1239.const$0.set(seg, x);
    }
    public static MemorySegment lookup_by_name_with_flags_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1239.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_with_flags_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1239.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_with_flags_async lookup_by_name_with_flags_async(MemorySegment segment, Arena scope) {
        return lookup_by_name_with_flags_async.ofAddress(lookup_by_name_with_flags_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_by_name_with_flags_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_by_name_with_flags_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_by_name_with_flags_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1239.const$1, fi, constants$23.const$0, scope);
        }
        static lookup_by_name_with_flags_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_name_with_flags_finish$VH() {
        return constants$1239.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name_with_flags_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_by_name_with_flags_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1239.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name_with_flags_finish)(struct _GResolver*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_by_name_with_flags_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1239.const$2.set(seg, x);
    }
    public static MemorySegment lookup_by_name_with_flags_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1239.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_with_flags_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1239.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_with_flags_finish lookup_by_name_with_flags_finish(MemorySegment segment, Arena scope) {
        return lookup_by_name_with_flags_finish.ofAddress(lookup_by_name_with_flags_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_by_name_with_flags)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_by_name_with_flags {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(lookup_by_name_with_flags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1239.const$3, fi, constants$980.const$0, scope);
        }
        static lookup_by_name_with_flags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$980.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_by_name_with_flags$VH() {
        return constants$1239.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name_with_flags)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_by_name_with_flags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1239.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_by_name_with_flags)(struct _GResolver*,char*,enum GResolverNameLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_by_name_with_flags$set(MemorySegment seg, MemorySegment x) {
        constants$1239.const$4.set(seg, x);
    }
    public static MemorySegment lookup_by_name_with_flags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1239.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_with_flags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1239.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_with_flags lookup_by_name_with_flags(MemorySegment segment, Arena scope) {
        return lookup_by_name_with_flags.ofAddress(lookup_by_name_with_flags$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


