// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GResolverClass {
 *     GObjectClass parent_class;
 *     void (*reload)(GResolver *);
 *     GList *(*lookup_by_name)(GResolver *, const gchar *, GCancellable *, GError **);
 *     void (*lookup_by_name_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     GList *(*lookup_by_name_finish)(GResolver *, GAsyncResult *, GError **);
 *     gchar *(*lookup_by_address)(GResolver *, GInetAddress *, GCancellable *, GError **);
 *     void (*lookup_by_address_async)(GResolver *, GInetAddress *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gchar *(*lookup_by_address_finish)(GResolver *, GAsyncResult *, GError **);
 *     GList *(*lookup_service)(GResolver *, const gchar *, GCancellable *, GError **);
 *     void (*lookup_service_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     GList *(*lookup_service_finish)(GResolver *, GAsyncResult *, GError **);
 *     GList *(*lookup_records)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GError **);
 *     void (*lookup_records_async)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GAsyncReadyCallback, gpointer);
 *     GList *(*lookup_records_finish)(GResolver *, GAsyncResult *, GError **);
 *     void (*lookup_by_name_with_flags_async)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GAsyncReadyCallback, gpointer);
 *     GList *(*lookup_by_name_with_flags_finish)(GResolver *, GAsyncResult *, GError **);
 *     GList *(*lookup_by_name_with_flags)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GError **);
 * }
 * }
 */
public class _GResolverClass {

    _GResolverClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("reload"),
        app_indicator_h.C_POINTER.withName("lookup_by_name"),
        app_indicator_h.C_POINTER.withName("lookup_by_name_async"),
        app_indicator_h.C_POINTER.withName("lookup_by_name_finish"),
        app_indicator_h.C_POINTER.withName("lookup_by_address"),
        app_indicator_h.C_POINTER.withName("lookup_by_address_async"),
        app_indicator_h.C_POINTER.withName("lookup_by_address_finish"),
        app_indicator_h.C_POINTER.withName("lookup_service"),
        app_indicator_h.C_POINTER.withName("lookup_service_async"),
        app_indicator_h.C_POINTER.withName("lookup_service_finish"),
        app_indicator_h.C_POINTER.withName("lookup_records"),
        app_indicator_h.C_POINTER.withName("lookup_records_async"),
        app_indicator_h.C_POINTER.withName("lookup_records_finish"),
        app_indicator_h.C_POINTER.withName("lookup_by_name_with_flags_async"),
        app_indicator_h.C_POINTER.withName("lookup_by_name_with_flags_finish"),
        app_indicator_h.C_POINTER.withName("lookup_by_name_with_flags")
    ).withName("_GResolverClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*reload)(GResolver *)
     * }
     */
    public class reload {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(reload.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(reload.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout reload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*reload)(GResolver *)
     * }
     */
    public static final AddressLayout reload$layout() {
        return reload$LAYOUT;
    }

    private static final long reload$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*reload)(GResolver *)
     * }
     */
    public static final long reload$offset() {
        return reload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*reload)(GResolver *)
     * }
     */
    public static MemorySegment reload(MemorySegment struct) {
        return struct.get(reload$LAYOUT, reload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*reload)(GResolver *)
     * }
     */
    public static void reload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reload$LAYOUT, reload$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_by_name)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public class lookup_by_name {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_name.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_name.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout lookup_by_name$layout() {
        return lookup_by_name$LAYOUT;
    }

    private static final long lookup_by_name$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static final long lookup_by_name$offset() {
        return lookup_by_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static MemorySegment lookup_by_name(MemorySegment struct) {
        return struct.get(lookup_by_name$LAYOUT, lookup_by_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static void lookup_by_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_name$LAYOUT, lookup_by_name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*lookup_by_name_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class lookup_by_name_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_name_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_name_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_name_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_name_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout lookup_by_name_async$layout() {
        return lookup_by_name_async$LAYOUT;
    }

    private static final long lookup_by_name_async$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long lookup_by_name_async$offset() {
        return lookup_by_name_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment lookup_by_name_async(MemorySegment struct) {
        return struct.get(lookup_by_name_async$LAYOUT, lookup_by_name_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void lookup_by_name_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_name_async$LAYOUT, lookup_by_name_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_by_name_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public class lookup_by_name_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_name_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_name_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_name_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_name_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout lookup_by_name_finish$layout() {
        return lookup_by_name_finish$LAYOUT;
    }

    private static final long lookup_by_name_finish$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final long lookup_by_name_finish$offset() {
        return lookup_by_name_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment lookup_by_name_finish(MemorySegment struct) {
        return struct.get(lookup_by_name_finish$LAYOUT, lookup_by_name_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static void lookup_by_name_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_name_finish$LAYOUT, lookup_by_name_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gchar *(*lookup_by_address)(GResolver *, GInetAddress *, GCancellable *, GError **)
     * }
     */
    public class lookup_by_address {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_address.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_address.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_address$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_address"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address)(GResolver *, GInetAddress *, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout lookup_by_address$layout() {
        return lookup_by_address$LAYOUT;
    }

    private static final long lookup_by_address$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address)(GResolver *, GInetAddress *, GCancellable *, GError **)
     * }
     */
    public static final long lookup_by_address$offset() {
        return lookup_by_address$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address)(GResolver *, GInetAddress *, GCancellable *, GError **)
     * }
     */
    public static MemorySegment lookup_by_address(MemorySegment struct) {
        return struct.get(lookup_by_address$LAYOUT, lookup_by_address$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address)(GResolver *, GInetAddress *, GCancellable *, GError **)
     * }
     */
    public static void lookup_by_address(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_address$LAYOUT, lookup_by_address$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*lookup_by_address_async)(GResolver *, GInetAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class lookup_by_address_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_address_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_address_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_address_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_address_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*lookup_by_address_async)(GResolver *, GInetAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout lookup_by_address_async$layout() {
        return lookup_by_address_async$LAYOUT;
    }

    private static final long lookup_by_address_async$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*lookup_by_address_async)(GResolver *, GInetAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long lookup_by_address_async$offset() {
        return lookup_by_address_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*lookup_by_address_async)(GResolver *, GInetAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment lookup_by_address_async(MemorySegment struct) {
        return struct.get(lookup_by_address_async$LAYOUT, lookup_by_address_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*lookup_by_address_async)(GResolver *, GInetAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void lookup_by_address_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_address_async$LAYOUT, lookup_by_address_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gchar *(*lookup_by_address_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public class lookup_by_address_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_address_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_address_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_address_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_address_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout lookup_by_address_finish$layout() {
        return lookup_by_address_finish$LAYOUT;
    }

    private static final long lookup_by_address_finish$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final long lookup_by_address_finish$offset() {
        return lookup_by_address_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment lookup_by_address_finish(MemorySegment struct) {
        return struct.get(lookup_by_address_finish$LAYOUT, lookup_by_address_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *(*lookup_by_address_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static void lookup_by_address_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_address_finish$LAYOUT, lookup_by_address_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_service)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public class lookup_service {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_service.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_service.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_service$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_service"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_service)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout lookup_service$layout() {
        return lookup_service$LAYOUT;
    }

    private static final long lookup_service$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_service)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static final long lookup_service$offset() {
        return lookup_service$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_service)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static MemorySegment lookup_service(MemorySegment struct) {
        return struct.get(lookup_service$LAYOUT, lookup_service$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_service)(GResolver *, const gchar *, GCancellable *, GError **)
     * }
     */
    public static void lookup_service(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_service$LAYOUT, lookup_service$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*lookup_service_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class lookup_service_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_service_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_service_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_service_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_service_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*lookup_service_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout lookup_service_async$layout() {
        return lookup_service_async$LAYOUT;
    }

    private static final long lookup_service_async$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*lookup_service_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long lookup_service_async$offset() {
        return lookup_service_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*lookup_service_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment lookup_service_async(MemorySegment struct) {
        return struct.get(lookup_service_async$LAYOUT, lookup_service_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*lookup_service_async)(GResolver *, const gchar *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void lookup_service_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_service_async$LAYOUT, lookup_service_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_service_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public class lookup_service_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_service_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_service_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_service_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_service_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_service_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout lookup_service_finish$layout() {
        return lookup_service_finish$LAYOUT;
    }

    private static final long lookup_service_finish$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_service_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final long lookup_service_finish$offset() {
        return lookup_service_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_service_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment lookup_service_finish(MemorySegment struct) {
        return struct.get(lookup_service_finish$LAYOUT, lookup_service_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_service_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static void lookup_service_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_service_finish$LAYOUT, lookup_service_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_records)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GError **)
     * }
     */
    public class lookup_records {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_records.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_records.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_records$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_records"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_records)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout lookup_records$layout() {
        return lookup_records$LAYOUT;
    }

    private static final long lookup_records$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_records)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GError **)
     * }
     */
    public static final long lookup_records$offset() {
        return lookup_records$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_records)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GError **)
     * }
     */
    public static MemorySegment lookup_records(MemorySegment struct) {
        return struct.get(lookup_records$LAYOUT, lookup_records$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_records)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GError **)
     * }
     */
    public static void lookup_records(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_records$LAYOUT, lookup_records$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*lookup_records_async)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class lookup_records_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_records_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_records_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_records_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_records_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*lookup_records_async)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout lookup_records_async$layout() {
        return lookup_records_async$LAYOUT;
    }

    private static final long lookup_records_async$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*lookup_records_async)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long lookup_records_async$offset() {
        return lookup_records_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*lookup_records_async)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment lookup_records_async(MemorySegment struct) {
        return struct.get(lookup_records_async$LAYOUT, lookup_records_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*lookup_records_async)(GResolver *, const gchar *, GResolverRecordType, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void lookup_records_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_records_async$LAYOUT, lookup_records_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_records_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public class lookup_records_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_records_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_records_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_records_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_records_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_records_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout lookup_records_finish$layout() {
        return lookup_records_finish$LAYOUT;
    }

    private static final long lookup_records_finish$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_records_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final long lookup_records_finish$offset() {
        return lookup_records_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_records_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment lookup_records_finish(MemorySegment struct) {
        return struct.get(lookup_records_finish$LAYOUT, lookup_records_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_records_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static void lookup_records_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_records_finish$LAYOUT, lookup_records_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*lookup_by_name_with_flags_async)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class lookup_by_name_with_flags_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_name_with_flags_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_name_with_flags_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_name_with_flags_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_name_with_flags_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_with_flags_async)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout lookup_by_name_with_flags_async$layout() {
        return lookup_by_name_with_flags_async$LAYOUT;
    }

    private static final long lookup_by_name_with_flags_async$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_with_flags_async)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long lookup_by_name_with_flags_async$offset() {
        return lookup_by_name_with_flags_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_with_flags_async)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment lookup_by_name_with_flags_async(MemorySegment struct) {
        return struct.get(lookup_by_name_with_flags_async$LAYOUT, lookup_by_name_with_flags_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*lookup_by_name_with_flags_async)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void lookup_by_name_with_flags_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_name_with_flags_async$LAYOUT, lookup_by_name_with_flags_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public class lookup_by_name_with_flags_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_name_with_flags_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_name_with_flags_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_name_with_flags_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_name_with_flags_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout lookup_by_name_with_flags_finish$layout() {
        return lookup_by_name_with_flags_finish$LAYOUT;
    }

    private static final long lookup_by_name_with_flags_finish$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static final long lookup_by_name_with_flags_finish$offset() {
        return lookup_by_name_with_flags_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment lookup_by_name_with_flags_finish(MemorySegment struct) {
        return struct.get(lookup_by_name_with_flags_finish$LAYOUT, lookup_by_name_with_flags_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags_finish)(GResolver *, GAsyncResult *, GError **)
     * }
     */
    public static void lookup_by_name_with_flags_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_name_with_flags_finish$LAYOUT, lookup_by_name_with_flags_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GError **)
     * }
     */
    public class lookup_by_name_with_flags {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(lookup_by_name_with_flags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(lookup_by_name_with_flags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout lookup_by_name_with_flags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lookup_by_name_with_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout lookup_by_name_with_flags$layout() {
        return lookup_by_name_with_flags$LAYOUT;
    }

    private static final long lookup_by_name_with_flags$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GError **)
     * }
     */
    public static final long lookup_by_name_with_flags$offset() {
        return lookup_by_name_with_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GError **)
     * }
     */
    public static MemorySegment lookup_by_name_with_flags(MemorySegment struct) {
        return struct.get(lookup_by_name_with_flags$LAYOUT, lookup_by_name_with_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*lookup_by_name_with_flags)(GResolver *, const gchar *, GResolverNameLookupFlags, GCancellable *, GError **)
     * }
     */
    public static void lookup_by_name_with_flags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lookup_by_name_with_flags$LAYOUT, lookup_by_name_with_flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

