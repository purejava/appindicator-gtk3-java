// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;

/**
 * {@snippet :
 * unsigned char* (*GtkTextBufferSerializeFunc)(struct _GtkTextBuffer* register_buffer,struct _GtkTextBuffer* content_buffer,struct _GtkTextIter* start,struct _GtkTextIter* end,unsigned long* length,void* user_data);
 * }
 */
public interface GtkTextBufferSerializeFunc {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment register_buffer, java.lang.foreign.MemorySegment content_buffer, java.lang.foreign.MemorySegment start, java.lang.foreign.MemorySegment end, java.lang.foreign.MemorySegment length, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GtkTextBufferSerializeFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$1836.GtkTextBufferSerializeFunc_UP$MH, fi, constants$1836.GtkTextBufferSerializeFunc$FUNC, scope);
    }
    static GtkTextBufferSerializeFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _register_buffer, java.lang.foreign.MemorySegment _content_buffer, java.lang.foreign.MemorySegment _start, java.lang.foreign.MemorySegment _end, java.lang.foreign.MemorySegment _length, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$1836.GtkTextBufferSerializeFunc_DOWN$MH.invokeExact(symbol, _register_buffer, _content_buffer, _start, _end, _length, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


