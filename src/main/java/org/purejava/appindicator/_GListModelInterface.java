// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GListModelInterface {
 *     GTypeInterface g_iface;
 *     GType (*get_item_type)(GListModel *);
 *     guint (*get_n_items)(GListModel *);
 *     gpointer (*get_item)(GListModel *, guint);
 * }
 * }
 */
public class _GListModelInterface {

    _GListModelInterface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("g_iface"),
        app_indicator_h.C_POINTER.withName("get_item_type"),
        app_indicator_h.C_POINTER.withName("get_n_items"),
        app_indicator_h.C_POINTER.withName("get_item")
    ).withName("_GListModelInterface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout g_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("g_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final GroupLayout g_iface$layout() {
        return g_iface$LAYOUT;
    }

    private static final long g_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final long g_iface$offset() {
        return g_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static MemorySegment g_iface(MemorySegment struct) {
        return struct.asSlice(g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static void g_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * GType (*get_item_type)(GListModel *)
     * }
     */
    public class get_item_type {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_item_type.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_item_type.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_item_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_item_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GType (*get_item_type)(GListModel *)
     * }
     */
    public static final AddressLayout get_item_type$layout() {
        return get_item_type$LAYOUT;
    }

    private static final long get_item_type$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GType (*get_item_type)(GListModel *)
     * }
     */
    public static final long get_item_type$offset() {
        return get_item_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GType (*get_item_type)(GListModel *)
     * }
     */
    public static MemorySegment get_item_type(MemorySegment struct) {
        return struct.get(get_item_type$LAYOUT, get_item_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GType (*get_item_type)(GListModel *)
     * }
     */
    public static void get_item_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_item_type$LAYOUT, get_item_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * guint (*get_n_items)(GListModel *)
     * }
     */
    public class get_n_items {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_n_items.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_n_items.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_n_items$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_n_items"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint (*get_n_items)(GListModel *)
     * }
     */
    public static final AddressLayout get_n_items$layout() {
        return get_n_items$LAYOUT;
    }

    private static final long get_n_items$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint (*get_n_items)(GListModel *)
     * }
     */
    public static final long get_n_items$offset() {
        return get_n_items$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint (*get_n_items)(GListModel *)
     * }
     */
    public static MemorySegment get_n_items(MemorySegment struct) {
        return struct.get(get_n_items$LAYOUT, get_n_items$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint (*get_n_items)(GListModel *)
     * }
     */
    public static void get_n_items(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_n_items$LAYOUT, get_n_items$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gpointer (*get_item)(GListModel *, guint)
     * }
     */
    public class get_item {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_item.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_item.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_item$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_item"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer (*get_item)(GListModel *, guint)
     * }
     */
    public static final AddressLayout get_item$layout() {
        return get_item$LAYOUT;
    }

    private static final long get_item$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer (*get_item)(GListModel *, guint)
     * }
     */
    public static final long get_item$offset() {
        return get_item$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer (*get_item)(GListModel *, guint)
     * }
     */
    public static MemorySegment get_item(MemorySegment struct) {
        return struct.get(get_item$LAYOUT, get_item$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer (*get_item)(GListModel *, guint)
     * }
     */
    public static void get_item(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_item$LAYOUT, get_item$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

