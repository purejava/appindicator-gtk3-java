// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkTreeSortableIface {
 *     struct _GTypeInterface g_iface;
 *     void (*sort_column_changed)(struct _GtkTreeSortable*);
 *     int (*get_sort_column_id)(struct _GtkTreeSortable*,int*,enum GtkSortType*);
 *     void (*set_sort_column_id)(struct _GtkTreeSortable*,int,enum GtkSortType);
 *     void (*set_sort_func)(struct _GtkTreeSortable*,int,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
 *     void (*set_default_sort_func)(struct _GtkTreeSortable*,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
 *     int (*has_default_sort_func)(struct _GtkTreeSortable*);
 * };
 * }
 */
public class _GtkTreeSortableIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2324.const$1;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*sort_column_changed)(struct _GtkTreeSortable*);
     * }
     */
    public interface sort_column_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(sort_column_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2324.const$2, fi, constants$13.const$1, scope);
        }
        static sort_column_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle sort_column_changed$VH() {
        return constants$2324.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*sort_column_changed)(struct _GtkTreeSortable*);
     * }
     */
    public static MemorySegment sort_column_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*sort_column_changed)(struct _GtkTreeSortable*);
     * }
     */
    public static void sort_column_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2324.const$3.set(seg, x);
    }
    public static MemorySegment sort_column_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sort_column_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2324.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static sort_column_changed sort_column_changed(MemorySegment segment, Arena scope) {
        return sort_column_changed.ofAddress(sort_column_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_sort_column_id)(struct _GtkTreeSortable*,int*,enum GtkSortType*);
     * }
     */
    public interface get_sort_column_id {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_sort_column_id fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2324.const$4, fi, constants$12.const$2, scope);
        }
        static get_sort_column_id ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_sort_column_id$VH() {
        return constants$2324.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_sort_column_id)(struct _GtkTreeSortable*,int*,enum GtkSortType*);
     * }
     */
    public static MemorySegment get_sort_column_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_sort_column_id)(struct _GtkTreeSortable*,int*,enum GtkSortType*);
     * }
     */
    public static void get_sort_column_id$set(MemorySegment seg, MemorySegment x) {
        constants$2324.const$5.set(seg, x);
    }
    public static MemorySegment get_sort_column_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sort_column_id$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2324.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sort_column_id get_sort_column_id(MemorySegment segment, Arena scope) {
        return get_sort_column_id.ofAddress(get_sort_column_id$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_sort_column_id)(struct _GtkTreeSortable*,int,enum GtkSortType);
     * }
     */
    public interface set_sort_column_id {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(set_sort_column_id fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2325.const$0, fi, constants$469.const$2, scope);
        }
        static set_sort_column_id ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1906.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_sort_column_id$VH() {
        return constants$2325.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_sort_column_id)(struct _GtkTreeSortable*,int,enum GtkSortType);
     * }
     */
    public static MemorySegment set_sort_column_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_sort_column_id)(struct _GtkTreeSortable*,int,enum GtkSortType);
     * }
     */
    public static void set_sort_column_id$set(MemorySegment seg, MemorySegment x) {
        constants$2325.const$1.set(seg, x);
    }
    public static MemorySegment set_sort_column_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void set_sort_column_id$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2325.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_sort_column_id set_sort_column_id(MemorySegment segment, Arena scope) {
        return set_sort_column_id.ofAddress(set_sort_column_id$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_sort_func)(struct _GtkTreeSortable*,int,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
     * }
     */
    public interface set_sort_func {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(set_sort_func fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2325.const$2, fi, constants$282.const$1, scope);
        }
        static set_sort_func ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_sort_func$VH() {
        return constants$2325.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_sort_func)(struct _GtkTreeSortable*,int,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
     * }
     */
    public static MemorySegment set_sort_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_sort_func)(struct _GtkTreeSortable*,int,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
     * }
     */
    public static void set_sort_func$set(MemorySegment seg, MemorySegment x) {
        constants$2325.const$3.set(seg, x);
    }
    public static MemorySegment set_sort_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_sort_func$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2325.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_sort_func set_sort_func(MemorySegment segment, Arena scope) {
        return set_sort_func.ofAddress(set_sort_func$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_default_sort_func)(struct _GtkTreeSortable*,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
     * }
     */
    public interface set_default_sort_func {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_default_sort_func fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2325.const$4, fi, constants$42.const$1, scope);
        }
        static set_default_sort_func ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_default_sort_func$VH() {
        return constants$2325.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_default_sort_func)(struct _GtkTreeSortable*,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
     * }
     */
    public static MemorySegment set_default_sort_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_default_sort_func)(struct _GtkTreeSortable*,int (*)(struct _GtkTreeModel*,struct _GtkTreeIter*,struct _GtkTreeIter*,void*),void*,void (*)(void*));
     * }
     */
    public static void set_default_sort_func$set(MemorySegment seg, MemorySegment x) {
        constants$2325.const$5.set(seg, x);
    }
    public static MemorySegment set_default_sort_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void set_default_sort_func$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2325.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_default_sort_func set_default_sort_func(MemorySegment segment, Arena scope) {
        return set_default_sort_func.ofAddress(set_default_sort_func$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*has_default_sort_func)(struct _GtkTreeSortable*);
     * }
     */
    public interface has_default_sort_func {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(has_default_sort_func fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2326.const$0, fi, constants$10.const$5, scope);
        }
        static has_default_sort_func ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle has_default_sort_func$VH() {
        return constants$2326.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*has_default_sort_func)(struct _GtkTreeSortable*);
     * }
     */
    public static MemorySegment has_default_sort_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2326.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*has_default_sort_func)(struct _GtkTreeSortable*);
     * }
     */
    public static void has_default_sort_func$set(MemorySegment seg, MemorySegment x) {
        constants$2326.const$1.set(seg, x);
    }
    public static MemorySegment has_default_sort_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2326.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void has_default_sort_func$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2326.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static has_default_sort_func has_default_sort_func(MemorySegment segment, Arena scope) {
        return has_default_sort_func.ofAddress(has_default_sort_func$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


