// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkTreeSortableIface {
 *     GTypeInterface g_iface;
 *     void (*sort_column_changed)(GtkTreeSortable *);
 *     gboolean (*get_sort_column_id)(GtkTreeSortable *, gint *, GtkSortType *);
 *     void (*set_sort_column_id)(GtkTreeSortable *, gint, GtkSortType);
 *     void (*set_sort_func)(GtkTreeSortable *, gint, GtkTreeIterCompareFunc, gpointer, GDestroyNotify);
 *     void (*set_default_sort_func)(GtkTreeSortable *, GtkTreeIterCompareFunc, gpointer, GDestroyNotify);
 *     gboolean (*has_default_sort_func)(GtkTreeSortable *);
 * }
 * }
 */
public class _GtkTreeSortableIface {

    _GtkTreeSortableIface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("g_iface"),
        app_indicator_h.C_POINTER.withName("sort_column_changed"),
        app_indicator_h.C_POINTER.withName("get_sort_column_id"),
        app_indicator_h.C_POINTER.withName("set_sort_column_id"),
        app_indicator_h.C_POINTER.withName("set_sort_func"),
        app_indicator_h.C_POINTER.withName("set_default_sort_func"),
        app_indicator_h.C_POINTER.withName("has_default_sort_func")
    ).withName("_GtkTreeSortableIface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout g_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("g_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final GroupLayout g_iface$layout() {
        return g_iface$LAYOUT;
    }

    private static final long g_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final long g_iface$offset() {
        return g_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static MemorySegment g_iface(MemorySegment struct) {
        return struct.asSlice(g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static void g_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*sort_column_changed)(GtkTreeSortable *)
     * }
     */
    public class sort_column_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(sort_column_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(sort_column_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout sort_column_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sort_column_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*sort_column_changed)(GtkTreeSortable *)
     * }
     */
    public static final AddressLayout sort_column_changed$layout() {
        return sort_column_changed$LAYOUT;
    }

    private static final long sort_column_changed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*sort_column_changed)(GtkTreeSortable *)
     * }
     */
    public static final long sort_column_changed$offset() {
        return sort_column_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*sort_column_changed)(GtkTreeSortable *)
     * }
     */
    public static MemorySegment sort_column_changed(MemorySegment struct) {
        return struct.get(sort_column_changed$LAYOUT, sort_column_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*sort_column_changed)(GtkTreeSortable *)
     * }
     */
    public static void sort_column_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sort_column_changed$LAYOUT, sort_column_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*get_sort_column_id)(GtkTreeSortable *, gint *, GtkSortType *)
     * }
     */
    public class get_sort_column_id {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_sort_column_id.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_sort_column_id.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_sort_column_id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_sort_column_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*get_sort_column_id)(GtkTreeSortable *, gint *, GtkSortType *)
     * }
     */
    public static final AddressLayout get_sort_column_id$layout() {
        return get_sort_column_id$LAYOUT;
    }

    private static final long get_sort_column_id$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*get_sort_column_id)(GtkTreeSortable *, gint *, GtkSortType *)
     * }
     */
    public static final long get_sort_column_id$offset() {
        return get_sort_column_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*get_sort_column_id)(GtkTreeSortable *, gint *, GtkSortType *)
     * }
     */
    public static MemorySegment get_sort_column_id(MemorySegment struct) {
        return struct.get(get_sort_column_id$LAYOUT, get_sort_column_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*get_sort_column_id)(GtkTreeSortable *, gint *, GtkSortType *)
     * }
     */
    public static void get_sort_column_id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_sort_column_id$LAYOUT, get_sort_column_id$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_sort_column_id)(GtkTreeSortable *, gint, GtkSortType)
     * }
     */
    public class set_sort_column_id {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_sort_column_id.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_sort_column_id.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_sort_column_id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_sort_column_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_sort_column_id)(GtkTreeSortable *, gint, GtkSortType)
     * }
     */
    public static final AddressLayout set_sort_column_id$layout() {
        return set_sort_column_id$LAYOUT;
    }

    private static final long set_sort_column_id$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_sort_column_id)(GtkTreeSortable *, gint, GtkSortType)
     * }
     */
    public static final long set_sort_column_id$offset() {
        return set_sort_column_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_sort_column_id)(GtkTreeSortable *, gint, GtkSortType)
     * }
     */
    public static MemorySegment set_sort_column_id(MemorySegment struct) {
        return struct.get(set_sort_column_id$LAYOUT, set_sort_column_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_sort_column_id)(GtkTreeSortable *, gint, GtkSortType)
     * }
     */
    public static void set_sort_column_id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_sort_column_id$LAYOUT, set_sort_column_id$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_sort_func)(GtkTreeSortable *, gint, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public class set_sort_func {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_sort_func.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_sort_func.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_sort_func$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_sort_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_sort_func)(GtkTreeSortable *, gint, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static final AddressLayout set_sort_func$layout() {
        return set_sort_func$LAYOUT;
    }

    private static final long set_sort_func$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_sort_func)(GtkTreeSortable *, gint, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static final long set_sort_func$offset() {
        return set_sort_func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_sort_func)(GtkTreeSortable *, gint, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static MemorySegment set_sort_func(MemorySegment struct) {
        return struct.get(set_sort_func$LAYOUT, set_sort_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_sort_func)(GtkTreeSortable *, gint, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static void set_sort_func(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_sort_func$LAYOUT, set_sort_func$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_default_sort_func)(GtkTreeSortable *, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public class set_default_sort_func {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_default_sort_func.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_default_sort_func.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_default_sort_func$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_default_sort_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_default_sort_func)(GtkTreeSortable *, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static final AddressLayout set_default_sort_func$layout() {
        return set_default_sort_func$LAYOUT;
    }

    private static final long set_default_sort_func$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_default_sort_func)(GtkTreeSortable *, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static final long set_default_sort_func$offset() {
        return set_default_sort_func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_default_sort_func)(GtkTreeSortable *, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static MemorySegment set_default_sort_func(MemorySegment struct) {
        return struct.get(set_default_sort_func$LAYOUT, set_default_sort_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_default_sort_func)(GtkTreeSortable *, GtkTreeIterCompareFunc, gpointer, GDestroyNotify)
     * }
     */
    public static void set_default_sort_func(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_default_sort_func$LAYOUT, set_default_sort_func$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*has_default_sort_func)(GtkTreeSortable *)
     * }
     */
    public class has_default_sort_func {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(has_default_sort_func.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(has_default_sort_func.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout has_default_sort_func$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("has_default_sort_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*has_default_sort_func)(GtkTreeSortable *)
     * }
     */
    public static final AddressLayout has_default_sort_func$layout() {
        return has_default_sort_func$LAYOUT;
    }

    private static final long has_default_sort_func$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*has_default_sort_func)(GtkTreeSortable *)
     * }
     */
    public static final long has_default_sort_func$offset() {
        return has_default_sort_func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*has_default_sort_func)(GtkTreeSortable *)
     * }
     */
    public static MemorySegment has_default_sort_func(MemorySegment struct) {
        return struct.get(has_default_sort_func$LAYOUT, has_default_sort_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*has_default_sort_func)(GtkTreeSortable *)
     * }
     */
    public static void has_default_sort_func(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(has_default_sort_func$LAYOUT, has_default_sort_func$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

