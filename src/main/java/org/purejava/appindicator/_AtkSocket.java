// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _AtkSocket {
 *     AtkObject parent;
 *     gchar* embedded_plug_id;
 * };
 * }
 */
public class _AtkSocket {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("g_class")
                ).withName("g_type_instance"),
                Constants$root.C_INT$LAYOUT.withName("ref_count"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("qdata")
            ).withName("parent"),
            Constants$root.C_POINTER$LAYOUT.withName("description"),
            Constants$root.C_POINTER$LAYOUT.withName("name"),
            Constants$root.C_POINTER$LAYOUT.withName("accessible_parent"),
            Constants$root.C_INT$LAYOUT.withName("role"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("relation_set"),
            Constants$root.C_INT$LAYOUT.withName("layer"),
            MemoryLayout.paddingLayout(32)
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("embedded_plug_id")
    ).withName("_AtkSocket");
    public static MemoryLayout $LAYOUT() {
        return _AtkSocket.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    static final VarHandle embedded_plug_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("embedded_plug_id"));
    public static VarHandle embedded_plug_id$VH() {
        return _AtkSocket.embedded_plug_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* embedded_plug_id;
     * }
     */
    public static MemorySegment embedded_plug_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkSocket.embedded_plug_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* embedded_plug_id;
     * }
     */
    public static void embedded_plug_id$set(MemorySegment seg, MemorySegment x) {
        _AtkSocket.embedded_plug_id$VH.set(seg, x);
    }
    public static MemorySegment embedded_plug_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkSocket.embedded_plug_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void embedded_plug_id$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkSocket.embedded_plug_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


