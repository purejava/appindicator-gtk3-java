// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct cairo_glyph_t {
 *     unsigned long index;
 *     double x;
 *     double y;
 * };
 * }
 */
public class cairo_glyph_t {

    public static MemoryLayout $LAYOUT() {
        return constants$1694.const$3;
    }
    public static VarHandle index$VH() {
        return constants$1694.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long index;
     * }
     */
    public static long index$get(MemorySegment seg) {
        return (long)constants$1694.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long index;
     * }
     */
    public static void index$set(MemorySegment seg, long x) {
        constants$1694.const$4.set(seg, x);
    }
    public static long index$get(MemorySegment seg, long index) {
        return (long)constants$1694.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void index$set(MemorySegment seg, long index, long x) {
        constants$1694.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle x$VH() {
        return constants$1694.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double x;
     * }
     */
    public static double x$get(MemorySegment seg) {
        return (double)constants$1694.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double x;
     * }
     */
    public static void x$set(MemorySegment seg, double x) {
        constants$1694.const$5.set(seg, x);
    }
    public static double x$get(MemorySegment seg, long index) {
        return (double)constants$1694.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, double x) {
        constants$1694.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y$VH() {
        return constants$1695.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double y;
     * }
     */
    public static double y$get(MemorySegment seg) {
        return (double)constants$1695.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double y;
     * }
     */
    public static void y$set(MemorySegment seg, double x) {
        constants$1695.const$0.set(seg, x);
    }
    public static double y$get(MemorySegment seg, long index) {
        return (double)constants$1695.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, double x) {
        constants$1695.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


