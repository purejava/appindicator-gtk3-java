// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_2 extends app_indicator_h_3 {

    app_indicator_h_2() {
        // Should not be called directly
    }

    private static class gtk_window_group_get_current_device_grab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_group_get_current_device_grab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_group_get_current_device_grab(GtkWindowGroup *window_group, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gtk_window_group_get_current_device_grab$descriptor() {
        return gtk_window_group_get_current_device_grab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_group_get_current_device_grab(GtkWindowGroup *window_group, GdkDevice *device)
     * }
     */
    public static MethodHandle gtk_window_group_get_current_device_grab$handle() {
        return gtk_window_group_get_current_device_grab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_group_get_current_device_grab(GtkWindowGroup *window_group, GdkDevice *device)
     * }
     */
    public static MemorySegment gtk_window_group_get_current_device_grab(MemorySegment window_group, MemorySegment device) {
        var mh$ = gtk_window_group_get_current_device_grab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_group_get_current_device_grab", window_group, device);
            }
            return (MemorySegment)mh$.invokeExact(window_group, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_arrow_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_arrow_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_arrow_get_type()
     * }
     */
    public static FunctionDescriptor gtk_arrow_get_type$descriptor() {
        return gtk_arrow_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_arrow_get_type()
     * }
     */
    public static MethodHandle gtk_arrow_get_type$handle() {
        return gtk_arrow_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_arrow_get_type()
     * }
     */
    public static long gtk_arrow_get_type() {
        var mh$ = gtk_arrow_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_arrow_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_arrow_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_arrow_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_arrow_new(GtkArrowType arrow_type, GtkShadowType shadow_type)
     * }
     */
    public static FunctionDescriptor gtk_arrow_new$descriptor() {
        return gtk_arrow_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_arrow_new(GtkArrowType arrow_type, GtkShadowType shadow_type)
     * }
     */
    public static MethodHandle gtk_arrow_new$handle() {
        return gtk_arrow_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_arrow_new(GtkArrowType arrow_type, GtkShadowType shadow_type)
     * }
     */
    public static MemorySegment gtk_arrow_new(int arrow_type, int shadow_type) {
        var mh$ = gtk_arrow_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_arrow_new", arrow_type, shadow_type);
            }
            return (MemorySegment)mh$.invokeExact(arrow_type, shadow_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_arrow_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_arrow_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_arrow_set(GtkArrow *arrow, GtkArrowType arrow_type, GtkShadowType shadow_type)
     * }
     */
    public static FunctionDescriptor gtk_arrow_set$descriptor() {
        return gtk_arrow_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_arrow_set(GtkArrow *arrow, GtkArrowType arrow_type, GtkShadowType shadow_type)
     * }
     */
    public static MethodHandle gtk_arrow_set$handle() {
        return gtk_arrow_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_arrow_set(GtkArrow *arrow, GtkArrowType arrow_type, GtkShadowType shadow_type)
     * }
     */
    public static void gtk_arrow_set(MemorySegment arrow, int arrow_type, int shadow_type) {
        var mh$ = gtk_arrow_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_arrow_set", arrow, arrow_type, shadow_type);
            }
            mh$.invokeExact(arrow, arrow_type, shadow_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_action_get_type()
     * }
     */
    public static FunctionDescriptor gtk_action_get_type$descriptor() {
        return gtk_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_action_get_type()
     * }
     */
    public static MethodHandle gtk_action_get_type$handle() {
        return gtk_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_action_get_type()
     * }
     */
    public static long gtk_action_get_type() {
        var mh$ = gtk_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_action_new$descriptor() {
        return gtk_action_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_action_new$handle() {
        return gtk_action_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAction *gtk_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_action_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_new", name, label, tooltip, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_name(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_name$descriptor() {
        return gtk_action_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_name(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_name$handle() {
        return gtk_action_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_name(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_name(MemorySegment action) {
        var mh$ = gtk_action_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_name", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_is_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_is_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_is_sensitive(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_is_sensitive$descriptor() {
        return gtk_action_is_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_is_sensitive(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_is_sensitive$handle() {
        return gtk_action_is_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_is_sensitive(GtkAction *action)
     * }
     */
    public static int gtk_action_is_sensitive(MemorySegment action) {
        var mh$ = gtk_action_is_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_is_sensitive", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_sensitive(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_sensitive$descriptor() {
        return gtk_action_get_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_sensitive(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_sensitive$handle() {
        return gtk_action_get_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_sensitive(GtkAction *action)
     * }
     */
    public static int gtk_action_get_sensitive(MemorySegment action) {
        var mh$ = gtk_action_get_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_sensitive", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_sensitive(GtkAction *action, gboolean sensitive)
     * }
     */
    public static FunctionDescriptor gtk_action_set_sensitive$descriptor() {
        return gtk_action_set_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_sensitive(GtkAction *action, gboolean sensitive)
     * }
     */
    public static MethodHandle gtk_action_set_sensitive$handle() {
        return gtk_action_set_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_sensitive(GtkAction *action, gboolean sensitive)
     * }
     */
    public static void gtk_action_set_sensitive(MemorySegment action, int sensitive) {
        var mh$ = gtk_action_set_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_sensitive", action, sensitive);
            }
            mh$.invokeExact(action, sensitive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_is_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_is_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_is_visible(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_is_visible$descriptor() {
        return gtk_action_is_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_is_visible(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_is_visible$handle() {
        return gtk_action_is_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_is_visible(GtkAction *action)
     * }
     */
    public static int gtk_action_is_visible(MemorySegment action) {
        var mh$ = gtk_action_is_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_is_visible", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_visible$descriptor() {
        return gtk_action_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_visible$handle() {
        return gtk_action_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible(GtkAction *action)
     * }
     */
    public static int gtk_action_get_visible(MemorySegment action) {
        var mh$ = gtk_action_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_visible", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_visible(GtkAction *action, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_action_set_visible$descriptor() {
        return gtk_action_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_visible(GtkAction *action, gboolean visible)
     * }
     */
    public static MethodHandle gtk_action_set_visible$handle() {
        return gtk_action_set_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_visible(GtkAction *action, gboolean visible)
     * }
     */
    public static void gtk_action_set_visible(MemorySegment action, int visible) {
        var mh$ = gtk_action_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_visible", action, visible);
            }
            mh$.invokeExact(action, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_activate(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_activate$descriptor() {
        return gtk_action_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_activate(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_activate$handle() {
        return gtk_action_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_activate(GtkAction *action)
     * }
     */
    public static void gtk_action_activate(MemorySegment action) {
        var mh$ = gtk_action_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_activate", action);
            }
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_create_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_create_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_icon(GtkAction *action, GtkIconSize icon_size)
     * }
     */
    public static FunctionDescriptor gtk_action_create_icon$descriptor() {
        return gtk_action_create_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_icon(GtkAction *action, GtkIconSize icon_size)
     * }
     */
    public static MethodHandle gtk_action_create_icon$handle() {
        return gtk_action_create_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_icon(GtkAction *action, GtkIconSize icon_size)
     * }
     */
    public static MemorySegment gtk_action_create_icon(MemorySegment action, int icon_size) {
        var mh$ = gtk_action_create_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_create_icon", action, icon_size);
            }
            return (MemorySegment)mh$.invokeExact(action, icon_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_create_menu_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_create_menu_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_menu_item(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_create_menu_item$descriptor() {
        return gtk_action_create_menu_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_menu_item(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_create_menu_item$handle() {
        return gtk_action_create_menu_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_menu_item(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_create_menu_item(MemorySegment action) {
        var mh$ = gtk_action_create_menu_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_create_menu_item", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_create_tool_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_create_tool_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_tool_item(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_create_tool_item$descriptor() {
        return gtk_action_create_tool_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_tool_item(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_create_tool_item$handle() {
        return gtk_action_create_tool_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_tool_item(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_create_tool_item(MemorySegment action) {
        var mh$ = gtk_action_create_tool_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_create_tool_item", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_create_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_create_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_menu(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_create_menu$descriptor() {
        return gtk_action_create_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_menu(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_create_menu$handle() {
        return gtk_action_create_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_create_menu(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_create_menu(MemorySegment action) {
        var mh$ = gtk_action_create_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_create_menu", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_proxies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_proxies"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_action_get_proxies(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_proxies$descriptor() {
        return gtk_action_get_proxies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_action_get_proxies(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_proxies$handle() {
        return gtk_action_get_proxies.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_action_get_proxies(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_proxies(MemorySegment action) {
        var mh$ = gtk_action_get_proxies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_proxies", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_connect_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_connect_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_connect_accelerator(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_connect_accelerator$descriptor() {
        return gtk_action_connect_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_connect_accelerator(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_connect_accelerator$handle() {
        return gtk_action_connect_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_connect_accelerator(GtkAction *action)
     * }
     */
    public static void gtk_action_connect_accelerator(MemorySegment action) {
        var mh$ = gtk_action_connect_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_connect_accelerator", action);
            }
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_disconnect_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_disconnect_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_disconnect_accelerator(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_disconnect_accelerator$descriptor() {
        return gtk_action_disconnect_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_disconnect_accelerator(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_disconnect_accelerator$handle() {
        return gtk_action_disconnect_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_disconnect_accelerator(GtkAction *action)
     * }
     */
    public static void gtk_action_disconnect_accelerator(MemorySegment action) {
        var mh$ = gtk_action_disconnect_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_disconnect_accelerator", action);
            }
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_accel_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_accel_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_accel_path(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_accel_path$descriptor() {
        return gtk_action_get_accel_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_accel_path(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_accel_path$handle() {
        return gtk_action_get_accel_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_accel_path(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_accel_path(MemorySegment action) {
        var mh$ = gtk_action_get_accel_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_accel_path", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_accel_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_accel_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *gtk_action_get_accel_closure(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_accel_closure$descriptor() {
        return gtk_action_get_accel_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *gtk_action_get_accel_closure(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_accel_closure$handle() {
        return gtk_action_get_accel_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *gtk_action_get_accel_closure(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_accel_closure(MemorySegment action) {
        var mh$ = gtk_action_get_accel_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_accel_closure", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_block_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_block_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_block_activate(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_block_activate$descriptor() {
        return gtk_action_block_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_block_activate(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_block_activate$handle() {
        return gtk_action_block_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_block_activate(GtkAction *action)
     * }
     */
    public static void gtk_action_block_activate(MemorySegment action) {
        var mh$ = gtk_action_block_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_block_activate", action);
            }
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_unblock_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_unblock_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_unblock_activate(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_unblock_activate$descriptor() {
        return gtk_action_unblock_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_unblock_activate(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_unblock_activate$handle() {
        return gtk_action_unblock_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_unblock_activate(GtkAction *action)
     * }
     */
    public static void gtk_action_unblock_activate(MemorySegment action) {
        var mh$ = gtk_action_unblock_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_unblock_activate", action);
            }
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_add_to_proxy_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_add_to_proxy_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_add_to_proxy_list(GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static FunctionDescriptor _gtk_action_add_to_proxy_list$descriptor() {
        return _gtk_action_add_to_proxy_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_add_to_proxy_list(GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static MethodHandle _gtk_action_add_to_proxy_list$handle() {
        return _gtk_action_add_to_proxy_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_add_to_proxy_list(GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static void _gtk_action_add_to_proxy_list(MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_add_to_proxy_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_add_to_proxy_list", action, proxy);
            }
            mh$.invokeExact(action, proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_remove_from_proxy_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_remove_from_proxy_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_remove_from_proxy_list(GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static FunctionDescriptor _gtk_action_remove_from_proxy_list$descriptor() {
        return _gtk_action_remove_from_proxy_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_remove_from_proxy_list(GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static MethodHandle _gtk_action_remove_from_proxy_list$handle() {
        return _gtk_action_remove_from_proxy_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_remove_from_proxy_list(GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static void _gtk_action_remove_from_proxy_list(MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_remove_from_proxy_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_remove_from_proxy_list", action, proxy);
            }
            mh$.invokeExact(action, proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_emit_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_emit_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_emit_activate(GtkAction *action)
     * }
     */
    public static FunctionDescriptor _gtk_action_emit_activate$descriptor() {
        return _gtk_action_emit_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_emit_activate(GtkAction *action)
     * }
     */
    public static MethodHandle _gtk_action_emit_activate$handle() {
        return _gtk_action_emit_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_emit_activate(GtkAction *action)
     * }
     */
    public static void _gtk_action_emit_activate(MemorySegment action) {
        var mh$ = _gtk_action_emit_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_emit_activate", action);
            }
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_accel_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_accel_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_accel_path(GtkAction *action, const gchar *accel_path)
     * }
     */
    public static FunctionDescriptor gtk_action_set_accel_path$descriptor() {
        return gtk_action_set_accel_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_accel_path(GtkAction *action, const gchar *accel_path)
     * }
     */
    public static MethodHandle gtk_action_set_accel_path$handle() {
        return gtk_action_set_accel_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_accel_path(GtkAction *action, const gchar *accel_path)
     * }
     */
    public static void gtk_action_set_accel_path(MemorySegment action, MemorySegment accel_path) {
        var mh$ = gtk_action_set_accel_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_accel_path", action, accel_path);
            }
            mh$.invokeExact(action, accel_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_accel_group(GtkAction *action, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_action_set_accel_group$descriptor() {
        return gtk_action_set_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_accel_group(GtkAction *action, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_action_set_accel_group$handle() {
        return gtk_action_set_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_accel_group(GtkAction *action, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_action_set_accel_group(MemorySegment action, MemorySegment accel_group) {
        var mh$ = gtk_action_set_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_accel_group", action, accel_group);
            }
            mh$.invokeExact(action, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_sync_menu_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_sync_menu_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_sync_menu_visible(GtkAction *action, GtkWidget *proxy, gboolean empty)
     * }
     */
    public static FunctionDescriptor _gtk_action_sync_menu_visible$descriptor() {
        return _gtk_action_sync_menu_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_sync_menu_visible(GtkAction *action, GtkWidget *proxy, gboolean empty)
     * }
     */
    public static MethodHandle _gtk_action_sync_menu_visible$handle() {
        return _gtk_action_sync_menu_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_sync_menu_visible(GtkAction *action, GtkWidget *proxy, gboolean empty)
     * }
     */
    public static void _gtk_action_sync_menu_visible(MemorySegment action, MemorySegment proxy, int empty) {
        var mh$ = _gtk_action_sync_menu_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_sync_menu_visible", action, proxy, empty);
            }
            mh$.invokeExact(action, proxy, empty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_label(GtkAction *action, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_action_set_label$descriptor() {
        return gtk_action_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_label(GtkAction *action, const gchar *label)
     * }
     */
    public static MethodHandle gtk_action_set_label$handle() {
        return gtk_action_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_label(GtkAction *action, const gchar *label)
     * }
     */
    public static void gtk_action_set_label(MemorySegment action, MemorySegment label) {
        var mh$ = gtk_action_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_label", action, label);
            }
            mh$.invokeExact(action, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_label(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_label$descriptor() {
        return gtk_action_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_label(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_label$handle() {
        return gtk_action_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_label(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_label(MemorySegment action) {
        var mh$ = gtk_action_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_label", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_short_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_short_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_short_label(GtkAction *action, const gchar *short_label)
     * }
     */
    public static FunctionDescriptor gtk_action_set_short_label$descriptor() {
        return gtk_action_set_short_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_short_label(GtkAction *action, const gchar *short_label)
     * }
     */
    public static MethodHandle gtk_action_set_short_label$handle() {
        return gtk_action_set_short_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_short_label(GtkAction *action, const gchar *short_label)
     * }
     */
    public static void gtk_action_set_short_label(MemorySegment action, MemorySegment short_label) {
        var mh$ = gtk_action_set_short_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_short_label", action, short_label);
            }
            mh$.invokeExact(action, short_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_short_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_short_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_short_label(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_short_label$descriptor() {
        return gtk_action_get_short_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_short_label(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_short_label$handle() {
        return gtk_action_get_short_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_short_label(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_short_label(MemorySegment action) {
        var mh$ = gtk_action_get_short_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_short_label", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_tooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_tooltip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_tooltip(GtkAction *action, const gchar *tooltip)
     * }
     */
    public static FunctionDescriptor gtk_action_set_tooltip$descriptor() {
        return gtk_action_set_tooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_tooltip(GtkAction *action, const gchar *tooltip)
     * }
     */
    public static MethodHandle gtk_action_set_tooltip$handle() {
        return gtk_action_set_tooltip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_tooltip(GtkAction *action, const gchar *tooltip)
     * }
     */
    public static void gtk_action_set_tooltip(MemorySegment action, MemorySegment tooltip) {
        var mh$ = gtk_action_set_tooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_tooltip", action, tooltip);
            }
            mh$.invokeExact(action, tooltip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_tooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_tooltip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_tooltip(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_tooltip$descriptor() {
        return gtk_action_get_tooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_tooltip(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_tooltip$handle() {
        return gtk_action_get_tooltip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_tooltip(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_tooltip(MemorySegment action) {
        var mh$ = gtk_action_get_tooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_tooltip", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_stock_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_stock_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_stock_id(GtkAction *action, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_action_set_stock_id$descriptor() {
        return gtk_action_set_stock_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_stock_id(GtkAction *action, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_action_set_stock_id$handle() {
        return gtk_action_set_stock_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_stock_id(GtkAction *action, const gchar *stock_id)
     * }
     */
    public static void gtk_action_set_stock_id(MemorySegment action, MemorySegment stock_id) {
        var mh$ = gtk_action_set_stock_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_stock_id", action, stock_id);
            }
            mh$.invokeExact(action, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_stock_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_stock_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_stock_id(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_stock_id$descriptor() {
        return gtk_action_get_stock_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_stock_id(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_stock_id$handle() {
        return gtk_action_get_stock_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_stock_id(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_stock_id(MemorySegment action) {
        var mh$ = gtk_action_get_stock_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_stock_id", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_gicon(GtkAction *action, GIcon *icon)
     * }
     */
    public static FunctionDescriptor gtk_action_set_gicon$descriptor() {
        return gtk_action_set_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_gicon(GtkAction *action, GIcon *icon)
     * }
     */
    public static MethodHandle gtk_action_set_gicon$handle() {
        return gtk_action_set_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_gicon(GtkAction *action, GIcon *icon)
     * }
     */
    public static void gtk_action_set_gicon(MemorySegment action, MemorySegment icon) {
        var mh$ = gtk_action_set_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_gicon", action, icon);
            }
            mh$.invokeExact(action, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *gtk_action_get_gicon(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_gicon$descriptor() {
        return gtk_action_get_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *gtk_action_get_gicon(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_gicon$handle() {
        return gtk_action_get_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *gtk_action_get_gicon(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_gicon(MemorySegment action) {
        var mh$ = gtk_action_get_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_gicon", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_icon_name(GtkAction *action, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_action_set_icon_name$descriptor() {
        return gtk_action_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_icon_name(GtkAction *action, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_action_set_icon_name$handle() {
        return gtk_action_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_icon_name(GtkAction *action, const gchar *icon_name)
     * }
     */
    public static void gtk_action_set_icon_name(MemorySegment action, MemorySegment icon_name) {
        var mh$ = gtk_action_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_icon_name", action, icon_name);
            }
            mh$.invokeExact(action, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_icon_name(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_icon_name$descriptor() {
        return gtk_action_get_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_icon_name(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_icon_name$handle() {
        return gtk_action_get_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_get_icon_name(GtkAction *action)
     * }
     */
    public static MemorySegment gtk_action_get_icon_name(MemorySegment action) {
        var mh$ = gtk_action_get_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_icon_name", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_visible_horizontal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_visible_horizontal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_visible_horizontal(GtkAction *action, gboolean visible_horizontal)
     * }
     */
    public static FunctionDescriptor gtk_action_set_visible_horizontal$descriptor() {
        return gtk_action_set_visible_horizontal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_visible_horizontal(GtkAction *action, gboolean visible_horizontal)
     * }
     */
    public static MethodHandle gtk_action_set_visible_horizontal$handle() {
        return gtk_action_set_visible_horizontal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_visible_horizontal(GtkAction *action, gboolean visible_horizontal)
     * }
     */
    public static void gtk_action_set_visible_horizontal(MemorySegment action, int visible_horizontal) {
        var mh$ = gtk_action_set_visible_horizontal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_visible_horizontal", action, visible_horizontal);
            }
            mh$.invokeExact(action, visible_horizontal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_visible_horizontal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_visible_horizontal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible_horizontal(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_visible_horizontal$descriptor() {
        return gtk_action_get_visible_horizontal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible_horizontal(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_visible_horizontal$handle() {
        return gtk_action_get_visible_horizontal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible_horizontal(GtkAction *action)
     * }
     */
    public static int gtk_action_get_visible_horizontal(MemorySegment action) {
        var mh$ = gtk_action_get_visible_horizontal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_visible_horizontal", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_visible_vertical {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_visible_vertical"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_visible_vertical(GtkAction *action, gboolean visible_vertical)
     * }
     */
    public static FunctionDescriptor gtk_action_set_visible_vertical$descriptor() {
        return gtk_action_set_visible_vertical.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_visible_vertical(GtkAction *action, gboolean visible_vertical)
     * }
     */
    public static MethodHandle gtk_action_set_visible_vertical$handle() {
        return gtk_action_set_visible_vertical.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_visible_vertical(GtkAction *action, gboolean visible_vertical)
     * }
     */
    public static void gtk_action_set_visible_vertical(MemorySegment action, int visible_vertical) {
        var mh$ = gtk_action_set_visible_vertical.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_visible_vertical", action, visible_vertical);
            }
            mh$.invokeExact(action, visible_vertical);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_visible_vertical {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_visible_vertical"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible_vertical(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_visible_vertical$descriptor() {
        return gtk_action_get_visible_vertical.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible_vertical(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_visible_vertical$handle() {
        return gtk_action_get_visible_vertical.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_visible_vertical(GtkAction *action)
     * }
     */
    public static int gtk_action_get_visible_vertical(MemorySegment action) {
        var mh$ = gtk_action_get_visible_vertical.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_visible_vertical", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_is_important {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_is_important"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_is_important(GtkAction *action, gboolean is_important)
     * }
     */
    public static FunctionDescriptor gtk_action_set_is_important$descriptor() {
        return gtk_action_set_is_important.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_is_important(GtkAction *action, gboolean is_important)
     * }
     */
    public static MethodHandle gtk_action_set_is_important$handle() {
        return gtk_action_set_is_important.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_is_important(GtkAction *action, gboolean is_important)
     * }
     */
    public static void gtk_action_set_is_important(MemorySegment action, int is_important) {
        var mh$ = gtk_action_set_is_important.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_is_important", action, is_important);
            }
            mh$.invokeExact(action, is_important);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_is_important {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_is_important"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_is_important(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_is_important$descriptor() {
        return gtk_action_get_is_important.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_is_important(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_is_important$handle() {
        return gtk_action_get_is_important.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_is_important(GtkAction *action)
     * }
     */
    public static int gtk_action_get_is_important(MemorySegment action) {
        var mh$ = gtk_action_get_is_important.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_is_important", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_set_always_show_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_set_always_show_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_set_always_show_image(GtkAction *action, gboolean always_show)
     * }
     */
    public static FunctionDescriptor gtk_action_set_always_show_image$descriptor() {
        return gtk_action_set_always_show_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_set_always_show_image(GtkAction *action, gboolean always_show)
     * }
     */
    public static MethodHandle gtk_action_set_always_show_image$handle() {
        return gtk_action_set_always_show_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_set_always_show_image(GtkAction *action, gboolean always_show)
     * }
     */
    public static void gtk_action_set_always_show_image(MemorySegment action, int always_show) {
        var mh$ = gtk_action_set_always_show_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_set_always_show_image", action, always_show);
            }
            mh$.invokeExact(action, always_show);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_get_always_show_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_get_always_show_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_always_show_image(GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_get_always_show_image$descriptor() {
        return gtk_action_get_always_show_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_always_show_image(GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_get_always_show_image$handle() {
        return gtk_action_get_always_show_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_get_always_show_image(GtkAction *action)
     * }
     */
    public static int gtk_action_get_always_show_image(MemorySegment action) {
        var mh$ = gtk_action_get_always_show_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_get_always_show_image", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_activatable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_activatable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_activatable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_activatable_get_type$descriptor() {
        return gtk_activatable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_activatable_get_type()
     * }
     */
    public static MethodHandle gtk_activatable_get_type$handle() {
        return gtk_activatable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_activatable_get_type()
     * }
     */
    public static long gtk_activatable_get_type() {
        var mh$ = gtk_activatable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_activatable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_activatable_sync_action_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_activatable_sync_action_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_activatable_sync_action_properties(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_activatable_sync_action_properties$descriptor() {
        return gtk_activatable_sync_action_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_activatable_sync_action_properties(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static MethodHandle gtk_activatable_sync_action_properties$handle() {
        return gtk_activatable_sync_action_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_activatable_sync_action_properties(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static void gtk_activatable_sync_action_properties(MemorySegment activatable, MemorySegment action) {
        var mh$ = gtk_activatable_sync_action_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_activatable_sync_action_properties", activatable, action);
            }
            mh$.invokeExact(activatable, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_activatable_set_related_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_activatable_set_related_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_activatable_set_related_action(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_activatable_set_related_action$descriptor() {
        return gtk_activatable_set_related_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_activatable_set_related_action(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static MethodHandle gtk_activatable_set_related_action$handle() {
        return gtk_activatable_set_related_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_activatable_set_related_action(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static void gtk_activatable_set_related_action(MemorySegment activatable, MemorySegment action) {
        var mh$ = gtk_activatable_set_related_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_activatable_set_related_action", activatable, action);
            }
            mh$.invokeExact(activatable, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_activatable_get_related_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_activatable_get_related_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_activatable_get_related_action(GtkActivatable *activatable)
     * }
     */
    public static FunctionDescriptor gtk_activatable_get_related_action$descriptor() {
        return gtk_activatable_get_related_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_activatable_get_related_action(GtkActivatable *activatable)
     * }
     */
    public static MethodHandle gtk_activatable_get_related_action$handle() {
        return gtk_activatable_get_related_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAction *gtk_activatable_get_related_action(GtkActivatable *activatable)
     * }
     */
    public static MemorySegment gtk_activatable_get_related_action(MemorySegment activatable) {
        var mh$ = gtk_activatable_get_related_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_activatable_get_related_action", activatable);
            }
            return (MemorySegment)mh$.invokeExact(activatable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_activatable_set_use_action_appearance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_activatable_set_use_action_appearance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_activatable_set_use_action_appearance(GtkActivatable *activatable, gboolean use_appearance)
     * }
     */
    public static FunctionDescriptor gtk_activatable_set_use_action_appearance$descriptor() {
        return gtk_activatable_set_use_action_appearance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_activatable_set_use_action_appearance(GtkActivatable *activatable, gboolean use_appearance)
     * }
     */
    public static MethodHandle gtk_activatable_set_use_action_appearance$handle() {
        return gtk_activatable_set_use_action_appearance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_activatable_set_use_action_appearance(GtkActivatable *activatable, gboolean use_appearance)
     * }
     */
    public static void gtk_activatable_set_use_action_appearance(MemorySegment activatable, int use_appearance) {
        var mh$ = gtk_activatable_set_use_action_appearance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_activatable_set_use_action_appearance", activatable, use_appearance);
            }
            mh$.invokeExact(activatable, use_appearance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_activatable_get_use_action_appearance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_activatable_get_use_action_appearance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_activatable_get_use_action_appearance(GtkActivatable *activatable)
     * }
     */
    public static FunctionDescriptor gtk_activatable_get_use_action_appearance$descriptor() {
        return gtk_activatable_get_use_action_appearance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_activatable_get_use_action_appearance(GtkActivatable *activatable)
     * }
     */
    public static MethodHandle gtk_activatable_get_use_action_appearance$handle() {
        return gtk_activatable_get_use_action_appearance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_activatable_get_use_action_appearance(GtkActivatable *activatable)
     * }
     */
    public static int gtk_activatable_get_use_action_appearance(MemorySegment activatable) {
        var mh$ = gtk_activatable_get_use_action_appearance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_activatable_get_use_action_appearance", activatable);
            }
            return (int)mh$.invokeExact(activatable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_activatable_do_set_related_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_activatable_do_set_related_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_activatable_do_set_related_action(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_activatable_do_set_related_action$descriptor() {
        return gtk_activatable_do_set_related_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_activatable_do_set_related_action(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static MethodHandle gtk_activatable_do_set_related_action$handle() {
        return gtk_activatable_do_set_related_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_activatable_do_set_related_action(GtkActivatable *activatable, GtkAction *action)
     * }
     */
    public static void gtk_activatable_do_set_related_action(MemorySegment activatable, MemorySegment action) {
        var mh$ = gtk_activatable_do_set_related_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_activatable_do_set_related_action", activatable, action);
            }
            mh$.invokeExact(activatable, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stock_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stock_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stock_add(const GtkStockItem *items, guint n_items)
     * }
     */
    public static FunctionDescriptor gtk_stock_add$descriptor() {
        return gtk_stock_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stock_add(const GtkStockItem *items, guint n_items)
     * }
     */
    public static MethodHandle gtk_stock_add$handle() {
        return gtk_stock_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stock_add(const GtkStockItem *items, guint n_items)
     * }
     */
    public static void gtk_stock_add(MemorySegment items, int n_items) {
        var mh$ = gtk_stock_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stock_add", items, n_items);
            }
            mh$.invokeExact(items, n_items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stock_add_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stock_add_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stock_add_static(const GtkStockItem *items, guint n_items)
     * }
     */
    public static FunctionDescriptor gtk_stock_add_static$descriptor() {
        return gtk_stock_add_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stock_add_static(const GtkStockItem *items, guint n_items)
     * }
     */
    public static MethodHandle gtk_stock_add_static$handle() {
        return gtk_stock_add_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stock_add_static(const GtkStockItem *items, guint n_items)
     * }
     */
    public static void gtk_stock_add_static(MemorySegment items, int n_items) {
        var mh$ = gtk_stock_add_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stock_add_static", items, n_items);
            }
            mh$.invokeExact(items, n_items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stock_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stock_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_stock_lookup(const gchar *stock_id, GtkStockItem *item)
     * }
     */
    public static FunctionDescriptor gtk_stock_lookup$descriptor() {
        return gtk_stock_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_stock_lookup(const gchar *stock_id, GtkStockItem *item)
     * }
     */
    public static MethodHandle gtk_stock_lookup$handle() {
        return gtk_stock_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_stock_lookup(const gchar *stock_id, GtkStockItem *item)
     * }
     */
    public static int gtk_stock_lookup(MemorySegment stock_id, MemorySegment item) {
        var mh$ = gtk_stock_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stock_lookup", stock_id, item);
            }
            return (int)mh$.invokeExact(stock_id, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stock_list_ids {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stock_list_ids"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_stock_list_ids()
     * }
     */
    public static FunctionDescriptor gtk_stock_list_ids$descriptor() {
        return gtk_stock_list_ids.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_stock_list_ids()
     * }
     */
    public static MethodHandle gtk_stock_list_ids$handle() {
        return gtk_stock_list_ids.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_stock_list_ids()
     * }
     */
    public static MemorySegment gtk_stock_list_ids() {
        var mh$ = gtk_stock_list_ids.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stock_list_ids");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stock_item_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stock_item_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStockItem *gtk_stock_item_copy(const GtkStockItem *item)
     * }
     */
    public static FunctionDescriptor gtk_stock_item_copy$descriptor() {
        return gtk_stock_item_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStockItem *gtk_stock_item_copy(const GtkStockItem *item)
     * }
     */
    public static MethodHandle gtk_stock_item_copy$handle() {
        return gtk_stock_item_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStockItem *gtk_stock_item_copy(const GtkStockItem *item)
     * }
     */
    public static MemorySegment gtk_stock_item_copy(MemorySegment item) {
        var mh$ = gtk_stock_item_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stock_item_copy", item);
            }
            return (MemorySegment)mh$.invokeExact(item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stock_item_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stock_item_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stock_item_free(GtkStockItem *item)
     * }
     */
    public static FunctionDescriptor gtk_stock_item_free$descriptor() {
        return gtk_stock_item_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stock_item_free(GtkStockItem *item)
     * }
     */
    public static MethodHandle gtk_stock_item_free$handle() {
        return gtk_stock_item_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stock_item_free(GtkStockItem *item)
     * }
     */
    public static void gtk_stock_item_free(MemorySegment item) {
        var mh$ = gtk_stock_item_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stock_item_free", item);
            }
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_stock_set_translate_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_stock_set_translate_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_stock_set_translate_func(const gchar *domain, GtkTranslateFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gtk_stock_set_translate_func$descriptor() {
        return gtk_stock_set_translate_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_stock_set_translate_func(const gchar *domain, GtkTranslateFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gtk_stock_set_translate_func$handle() {
        return gtk_stock_set_translate_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_stock_set_translate_func(const gchar *domain, GtkTranslateFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static void gtk_stock_set_translate_func(MemorySegment domain, MemorySegment func, MemorySegment data, MemorySegment notify) {
        var mh$ = gtk_stock_set_translate_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_stock_set_translate_func", domain, func, data, notify);
            }
            mh$.invokeExact(domain, func, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef char *GtkStock
     * }
     */
    public static final AddressLayout GtkStock = app_indicator_h.C_POINTER;

    private static class gtk_action_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_action_group_get_type()
     * }
     */
    public static FunctionDescriptor gtk_action_group_get_type$descriptor() {
        return gtk_action_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_action_group_get_type()
     * }
     */
    public static MethodHandle gtk_action_group_get_type$handle() {
        return gtk_action_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_action_group_get_type()
     * }
     */
    public static long gtk_action_group_get_type() {
        var mh$ = gtk_action_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkActionGroup *gtk_action_group_new(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_action_group_new$descriptor() {
        return gtk_action_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkActionGroup *gtk_action_group_new(const gchar *name)
     * }
     */
    public static MethodHandle gtk_action_group_new$handle() {
        return gtk_action_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkActionGroup *gtk_action_group_new(const gchar *name)
     * }
     */
    public static MemorySegment gtk_action_group_new(MemorySegment name) {
        var mh$ = gtk_action_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_new", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_group_get_name(GtkActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor gtk_action_group_get_name$descriptor() {
        return gtk_action_group_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_group_get_name(GtkActionGroup *action_group)
     * }
     */
    public static MethodHandle gtk_action_group_get_name$handle() {
        return gtk_action_group_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_group_get_name(GtkActionGroup *action_group)
     * }
     */
    public static MemorySegment gtk_action_group_get_name(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_get_name", action_group);
            }
            return (MemorySegment)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_get_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_get_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_group_get_sensitive(GtkActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor gtk_action_group_get_sensitive$descriptor() {
        return gtk_action_group_get_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_group_get_sensitive(GtkActionGroup *action_group)
     * }
     */
    public static MethodHandle gtk_action_group_get_sensitive$handle() {
        return gtk_action_group_get_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_group_get_sensitive(GtkActionGroup *action_group)
     * }
     */
    public static int gtk_action_group_get_sensitive(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_get_sensitive", action_group);
            }
            return (int)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_set_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_set_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_sensitive(GtkActionGroup *action_group, gboolean sensitive)
     * }
     */
    public static FunctionDescriptor gtk_action_group_set_sensitive$descriptor() {
        return gtk_action_group_set_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_sensitive(GtkActionGroup *action_group, gboolean sensitive)
     * }
     */
    public static MethodHandle gtk_action_group_set_sensitive$handle() {
        return gtk_action_group_set_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_set_sensitive(GtkActionGroup *action_group, gboolean sensitive)
     * }
     */
    public static void gtk_action_group_set_sensitive(MemorySegment action_group, int sensitive) {
        var mh$ = gtk_action_group_set_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_set_sensitive", action_group, sensitive);
            }
            mh$.invokeExact(action_group, sensitive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_group_get_visible(GtkActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor gtk_action_group_get_visible$descriptor() {
        return gtk_action_group_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_action_group_get_visible(GtkActionGroup *action_group)
     * }
     */
    public static MethodHandle gtk_action_group_get_visible$handle() {
        return gtk_action_group_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_action_group_get_visible(GtkActionGroup *action_group)
     * }
     */
    public static int gtk_action_group_get_visible(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_get_visible", action_group);
            }
            return (int)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_set_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_visible(GtkActionGroup *action_group, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_action_group_set_visible$descriptor() {
        return gtk_action_group_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_visible(GtkActionGroup *action_group, gboolean visible)
     * }
     */
    public static MethodHandle gtk_action_group_set_visible$handle() {
        return gtk_action_group_set_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_set_visible(GtkActionGroup *action_group, gboolean visible)
     * }
     */
    public static void gtk_action_group_set_visible(MemorySegment action_group, int visible) {
        var mh$ = gtk_action_group_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_set_visible", action_group, visible);
            }
            mh$.invokeExact(action_group, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_get_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_get_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_action_group_get_accel_group(GtkActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor gtk_action_group_get_accel_group$descriptor() {
        return gtk_action_group_get_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_action_group_get_accel_group(GtkActionGroup *action_group)
     * }
     */
    public static MethodHandle gtk_action_group_get_accel_group$handle() {
        return gtk_action_group_get_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_action_group_get_accel_group(GtkActionGroup *action_group)
     * }
     */
    public static MemorySegment gtk_action_group_get_accel_group(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_get_accel_group", action_group);
            }
            return (MemorySegment)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_set_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_set_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_accel_group(GtkActionGroup *action_group, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_action_group_set_accel_group$descriptor() {
        return gtk_action_group_set_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_accel_group(GtkActionGroup *action_group, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_action_group_set_accel_group$handle() {
        return gtk_action_group_set_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_set_accel_group(GtkActionGroup *action_group, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_action_group_set_accel_group(MemorySegment action_group, MemorySegment accel_group) {
        var mh$ = gtk_action_group_set_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_set_accel_group", action_group, accel_group);
            }
            mh$.invokeExact(action_group, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_get_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_get_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_action_group_get_action(GtkActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor gtk_action_group_get_action$descriptor() {
        return gtk_action_group_get_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_action_group_get_action(GtkActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle gtk_action_group_get_action$handle() {
        return gtk_action_group_get_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAction *gtk_action_group_get_action(GtkActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MemorySegment gtk_action_group_get_action(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = gtk_action_group_get_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_get_action", action_group, action_name);
            }
            return (MemorySegment)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_list_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_list_actions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_action_group_list_actions(GtkActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor gtk_action_group_list_actions$descriptor() {
        return gtk_action_group_list_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_action_group_list_actions(GtkActionGroup *action_group)
     * }
     */
    public static MethodHandle gtk_action_group_list_actions$handle() {
        return gtk_action_group_list_actions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_action_group_list_actions(GtkActionGroup *action_group)
     * }
     */
    public static MemorySegment gtk_action_group_list_actions(MemorySegment action_group) {
        var mh$ = gtk_action_group_list_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_list_actions", action_group);
            }
            return (MemorySegment)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_action$descriptor() {
        return gtk_action_group_add_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_group_add_action$handle() {
        return gtk_action_group_add_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static void gtk_action_group_add_action(MemorySegment action_group, MemorySegment action) {
        var mh$ = gtk_action_group_add_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_action", action_group, action);
            }
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_action_with_accel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_action_with_accel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action_with_accel(GtkActionGroup *action_group, GtkAction *action, const gchar *accelerator)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_action_with_accel$descriptor() {
        return gtk_action_group_add_action_with_accel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action_with_accel(GtkActionGroup *action_group, GtkAction *action, const gchar *accelerator)
     * }
     */
    public static MethodHandle gtk_action_group_add_action_with_accel$handle() {
        return gtk_action_group_add_action_with_accel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_action_with_accel(GtkActionGroup *action_group, GtkAction *action, const gchar *accelerator)
     * }
     */
    public static void gtk_action_group_add_action_with_accel(MemorySegment action_group, MemorySegment action, MemorySegment accelerator) {
        var mh$ = gtk_action_group_add_action_with_accel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_action_with_accel", action_group, action, accelerator);
            }
            mh$.invokeExact(action_group, action, accelerator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_remove_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_remove_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_remove_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static FunctionDescriptor gtk_action_group_remove_action$descriptor() {
        return gtk_action_group_remove_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_remove_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static MethodHandle gtk_action_group_remove_action$handle() {
        return gtk_action_group_remove_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_remove_action(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static void gtk_action_group_remove_action(MemorySegment action_group, MemorySegment action) {
        var mh$ = gtk_action_group_remove_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_remove_action", action_group, action);
            }
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_actions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_actions$descriptor() {
        return gtk_action_group_add_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_action_group_add_actions$handle() {
        return gtk_action_group_add_actions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static void gtk_action_group_add_actions(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data) {
        var mh$ = gtk_action_group_add_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_actions", action_group, entries, n_entries, user_data);
            }
            mh$.invokeExact(action_group, entries, n_entries, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_toggle_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_toggle_actions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_toggle_actions(GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_toggle_actions$descriptor() {
        return gtk_action_group_add_toggle_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_toggle_actions(GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_action_group_add_toggle_actions$handle() {
        return gtk_action_group_add_toggle_actions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_toggle_actions(GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data)
     * }
     */
    public static void gtk_action_group_add_toggle_actions(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data) {
        var mh$ = gtk_action_group_add_toggle_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_toggle_actions", action_group, entries, n_entries, user_data);
            }
            mh$.invokeExact(action_group, entries, n_entries, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_radio_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_radio_actions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_radio_actions(GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_radio_actions$descriptor() {
        return gtk_action_group_add_radio_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_radio_actions(GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_action_group_add_radio_actions$handle() {
        return gtk_action_group_add_radio_actions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_radio_actions(GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data)
     * }
     */
    public static void gtk_action_group_add_radio_actions(MemorySegment action_group, MemorySegment entries, int n_entries, int value, MemorySegment on_change, MemorySegment user_data) {
        var mh$ = gtk_action_group_add_radio_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_radio_actions", action_group, entries, n_entries, value, on_change, user_data);
            }
            mh$.invokeExact(action_group, entries, n_entries, value, on_change, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_actions_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_actions_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions_full(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_actions_full$descriptor() {
        return gtk_action_group_add_actions_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions_full(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_action_group_add_actions_full$handle() {
        return gtk_action_group_add_actions_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_actions_full(GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_action_group_add_actions_full(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_action_group_add_actions_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_actions_full", action_group, entries, n_entries, user_data, destroy);
            }
            mh$.invokeExact(action_group, entries, n_entries, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_toggle_actions_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_toggle_actions_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_toggle_actions_full(GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_toggle_actions_full$descriptor() {
        return gtk_action_group_add_toggle_actions_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_toggle_actions_full(GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_action_group_add_toggle_actions_full$handle() {
        return gtk_action_group_add_toggle_actions_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_toggle_actions_full(GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_action_group_add_toggle_actions_full(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_action_group_add_toggle_actions_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_toggle_actions_full", action_group, entries, n_entries, user_data, destroy);
            }
            mh$.invokeExact(action_group, entries, n_entries, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_add_radio_actions_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_add_radio_actions_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_radio_actions_full(GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_action_group_add_radio_actions_full$descriptor() {
        return gtk_action_group_add_radio_actions_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_add_radio_actions_full(GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_action_group_add_radio_actions_full$handle() {
        return gtk_action_group_add_radio_actions_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_add_radio_actions_full(GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_action_group_add_radio_actions_full(MemorySegment action_group, MemorySegment entries, int n_entries, int value, MemorySegment on_change, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_action_group_add_radio_actions_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_add_radio_actions_full", action_group, entries, n_entries, value, on_change, user_data, destroy);
            }
            mh$.invokeExact(action_group, entries, n_entries, value, on_change, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_set_translate_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_set_translate_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_translate_func(GtkActionGroup *action_group, GtkTranslateFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gtk_action_group_set_translate_func$descriptor() {
        return gtk_action_group_set_translate_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_translate_func(GtkActionGroup *action_group, GtkTranslateFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gtk_action_group_set_translate_func$handle() {
        return gtk_action_group_set_translate_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_set_translate_func(GtkActionGroup *action_group, GtkTranslateFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static void gtk_action_group_set_translate_func(MemorySegment action_group, MemorySegment func, MemorySegment data, MemorySegment notify) {
        var mh$ = gtk_action_group_set_translate_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_set_translate_func", action_group, func, data, notify);
            }
            mh$.invokeExact(action_group, func, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_set_translation_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_set_translation_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_translation_domain(GtkActionGroup *action_group, const gchar *domain)
     * }
     */
    public static FunctionDescriptor gtk_action_group_set_translation_domain$descriptor() {
        return gtk_action_group_set_translation_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_group_set_translation_domain(GtkActionGroup *action_group, const gchar *domain)
     * }
     */
    public static MethodHandle gtk_action_group_set_translation_domain$handle() {
        return gtk_action_group_set_translation_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_group_set_translation_domain(GtkActionGroup *action_group, const gchar *domain)
     * }
     */
    public static void gtk_action_group_set_translation_domain(MemorySegment action_group, MemorySegment domain) {
        var mh$ = gtk_action_group_set_translation_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_set_translation_domain", action_group, domain);
            }
            mh$.invokeExact(action_group, domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_group_translate_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_group_translate_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_group_translate_string(GtkActionGroup *action_group, const gchar *string)
     * }
     */
    public static FunctionDescriptor gtk_action_group_translate_string$descriptor() {
        return gtk_action_group_translate_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_action_group_translate_string(GtkActionGroup *action_group, const gchar *string)
     * }
     */
    public static MethodHandle gtk_action_group_translate_string$handle() {
        return gtk_action_group_translate_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_action_group_translate_string(GtkActionGroup *action_group, const gchar *string)
     * }
     */
    public static MemorySegment gtk_action_group_translate_string(MemorySegment action_group, MemorySegment string) {
        var mh$ = gtk_action_group_translate_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_group_translate_string", action_group, string);
            }
            return (MemorySegment)mh$.invokeExact(action_group, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_group_emit_connect_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_group_emit_connect_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_connect_proxy(GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static FunctionDescriptor _gtk_action_group_emit_connect_proxy$descriptor() {
        return _gtk_action_group_emit_connect_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_connect_proxy(GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static MethodHandle _gtk_action_group_emit_connect_proxy$handle() {
        return _gtk_action_group_emit_connect_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_group_emit_connect_proxy(GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static void _gtk_action_group_emit_connect_proxy(MemorySegment action_group, MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_group_emit_connect_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_group_emit_connect_proxy", action_group, action, proxy);
            }
            mh$.invokeExact(action_group, action, proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_group_emit_disconnect_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_group_emit_disconnect_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_disconnect_proxy(GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static FunctionDescriptor _gtk_action_group_emit_disconnect_proxy$descriptor() {
        return _gtk_action_group_emit_disconnect_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_disconnect_proxy(GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static MethodHandle _gtk_action_group_emit_disconnect_proxy$handle() {
        return _gtk_action_group_emit_disconnect_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_group_emit_disconnect_proxy(GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy)
     * }
     */
    public static void _gtk_action_group_emit_disconnect_proxy(MemorySegment action_group, MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_group_emit_disconnect_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_group_emit_disconnect_proxy", action_group, action, proxy);
            }
            mh$.invokeExact(action_group, action, proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_group_emit_pre_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_group_emit_pre_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_pre_activate(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static FunctionDescriptor _gtk_action_group_emit_pre_activate$descriptor() {
        return _gtk_action_group_emit_pre_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_pre_activate(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static MethodHandle _gtk_action_group_emit_pre_activate$handle() {
        return _gtk_action_group_emit_pre_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_group_emit_pre_activate(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static void _gtk_action_group_emit_pre_activate(MemorySegment action_group, MemorySegment action) {
        var mh$ = _gtk_action_group_emit_pre_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_group_emit_pre_activate", action_group, action);
            }
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_action_group_emit_post_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_action_group_emit_post_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_post_activate(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static FunctionDescriptor _gtk_action_group_emit_post_activate$descriptor() {
        return _gtk_action_group_emit_post_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_action_group_emit_post_activate(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static MethodHandle _gtk_action_group_emit_post_activate$handle() {
        return _gtk_action_group_emit_post_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_action_group_emit_post_activate(GtkActionGroup *action_group, GtkAction *action)
     * }
     */
    public static void _gtk_action_group_emit_post_activate(MemorySegment action_group, MemorySegment action) {
        var mh$ = _gtk_action_group_emit_post_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_action_group_emit_post_activate", action_group, action);
            }
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_alignment_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_alignment_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_alignment_get_type()
     * }
     */
    public static FunctionDescriptor gtk_alignment_get_type$descriptor() {
        return gtk_alignment_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_alignment_get_type()
     * }
     */
    public static MethodHandle gtk_alignment_get_type$handle() {
        return gtk_alignment_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_alignment_get_type()
     * }
     */
    public static long gtk_alignment_get_type() {
        var mh$ = gtk_alignment_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_alignment_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_alignment_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_alignment_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_alignment_new(gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
     * }
     */
    public static FunctionDescriptor gtk_alignment_new$descriptor() {
        return gtk_alignment_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_alignment_new(gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
     * }
     */
    public static MethodHandle gtk_alignment_new$handle() {
        return gtk_alignment_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_alignment_new(gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
     * }
     */
    public static MemorySegment gtk_alignment_new(float xalign, float yalign, float xscale, float yscale) {
        var mh$ = gtk_alignment_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_alignment_new", xalign, yalign, xscale, yscale);
            }
            return (MemorySegment)mh$.invokeExact(xalign, yalign, xscale, yscale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_alignment_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_alignment_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_alignment_set(GtkAlignment *alignment, gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
     * }
     */
    public static FunctionDescriptor gtk_alignment_set$descriptor() {
        return gtk_alignment_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_alignment_set(GtkAlignment *alignment, gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
     * }
     */
    public static MethodHandle gtk_alignment_set$handle() {
        return gtk_alignment_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_alignment_set(GtkAlignment *alignment, gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
     * }
     */
    public static void gtk_alignment_set(MemorySegment alignment, float xalign, float yalign, float xscale, float yscale) {
        var mh$ = gtk_alignment_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_alignment_set", alignment, xalign, yalign, xscale, yscale);
            }
            mh$.invokeExact(alignment, xalign, yalign, xscale, yscale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_alignment_set_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_alignment_set_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_alignment_set_padding(GtkAlignment *alignment, guint padding_top, guint padding_bottom, guint padding_left, guint padding_right)
     * }
     */
    public static FunctionDescriptor gtk_alignment_set_padding$descriptor() {
        return gtk_alignment_set_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_alignment_set_padding(GtkAlignment *alignment, guint padding_top, guint padding_bottom, guint padding_left, guint padding_right)
     * }
     */
    public static MethodHandle gtk_alignment_set_padding$handle() {
        return gtk_alignment_set_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_alignment_set_padding(GtkAlignment *alignment, guint padding_top, guint padding_bottom, guint padding_left, guint padding_right)
     * }
     */
    public static void gtk_alignment_set_padding(MemorySegment alignment, int padding_top, int padding_bottom, int padding_left, int padding_right) {
        var mh$ = gtk_alignment_set_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_alignment_set_padding", alignment, padding_top, padding_bottom, padding_left, padding_right);
            }
            mh$.invokeExact(alignment, padding_top, padding_bottom, padding_left, padding_right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_alignment_get_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_alignment_get_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_alignment_get_padding(GtkAlignment *alignment, guint *padding_top, guint *padding_bottom, guint *padding_left, guint *padding_right)
     * }
     */
    public static FunctionDescriptor gtk_alignment_get_padding$descriptor() {
        return gtk_alignment_get_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_alignment_get_padding(GtkAlignment *alignment, guint *padding_top, guint *padding_bottom, guint *padding_left, guint *padding_right)
     * }
     */
    public static MethodHandle gtk_alignment_get_padding$handle() {
        return gtk_alignment_get_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_alignment_get_padding(GtkAlignment *alignment, guint *padding_top, guint *padding_bottom, guint *padding_left, guint *padding_right)
     * }
     */
    public static void gtk_alignment_get_padding(MemorySegment alignment, MemorySegment padding_top, MemorySegment padding_bottom, MemorySegment padding_left, MemorySegment padding_right) {
        var mh$ = gtk_alignment_get_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_alignment_get_padding", alignment, padding_top, padding_bottom, padding_left, padding_right);
            }
            mh$.invokeExact(alignment, padding_top, padding_bottom, padding_left, padding_right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_color_selection_get_type()
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_type$descriptor() {
        return gtk_color_selection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_color_selection_get_type()
     * }
     */
    public static MethodHandle gtk_color_selection_get_type$handle() {
        return gtk_color_selection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_color_selection_get_type()
     * }
     */
    public static long gtk_color_selection_get_type() {
        var mh$ = gtk_color_selection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_new()
     * }
     */
    public static FunctionDescriptor gtk_color_selection_new$descriptor() {
        return gtk_color_selection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_new()
     * }
     */
    public static MethodHandle gtk_color_selection_new$handle() {
        return gtk_color_selection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_new()
     * }
     */
    public static MemorySegment gtk_color_selection_new() {
        var mh$ = gtk_color_selection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_has_opacity_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_has_opacity_control"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_get_has_opacity_control(GtkColorSelection *colorsel)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_has_opacity_control$descriptor() {
        return gtk_color_selection_get_has_opacity_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_get_has_opacity_control(GtkColorSelection *colorsel)
     * }
     */
    public static MethodHandle gtk_color_selection_get_has_opacity_control$handle() {
        return gtk_color_selection_get_has_opacity_control.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_get_has_opacity_control(GtkColorSelection *colorsel)
     * }
     */
    public static int gtk_color_selection_get_has_opacity_control(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_has_opacity_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_has_opacity_control", colorsel);
            }
            return (int)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_has_opacity_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_has_opacity_control"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_has_opacity_control(GtkColorSelection *colorsel, gboolean has_opacity)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_has_opacity_control$descriptor() {
        return gtk_color_selection_set_has_opacity_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_has_opacity_control(GtkColorSelection *colorsel, gboolean has_opacity)
     * }
     */
    public static MethodHandle gtk_color_selection_set_has_opacity_control$handle() {
        return gtk_color_selection_set_has_opacity_control.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_has_opacity_control(GtkColorSelection *colorsel, gboolean has_opacity)
     * }
     */
    public static void gtk_color_selection_set_has_opacity_control(MemorySegment colorsel, int has_opacity) {
        var mh$ = gtk_color_selection_set_has_opacity_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_has_opacity_control", colorsel, has_opacity);
            }
            mh$.invokeExact(colorsel, has_opacity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_has_palette {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_has_palette"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_get_has_palette(GtkColorSelection *colorsel)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_has_palette$descriptor() {
        return gtk_color_selection_get_has_palette.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_get_has_palette(GtkColorSelection *colorsel)
     * }
     */
    public static MethodHandle gtk_color_selection_get_has_palette$handle() {
        return gtk_color_selection_get_has_palette.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_get_has_palette(GtkColorSelection *colorsel)
     * }
     */
    public static int gtk_color_selection_get_has_palette(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_has_palette.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_has_palette", colorsel);
            }
            return (int)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_has_palette {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_has_palette"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_has_palette(GtkColorSelection *colorsel, gboolean has_palette)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_has_palette$descriptor() {
        return gtk_color_selection_set_has_palette.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_has_palette(GtkColorSelection *colorsel, gboolean has_palette)
     * }
     */
    public static MethodHandle gtk_color_selection_set_has_palette$handle() {
        return gtk_color_selection_set_has_palette.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_has_palette(GtkColorSelection *colorsel, gboolean has_palette)
     * }
     */
    public static void gtk_color_selection_set_has_palette(MemorySegment colorsel, int has_palette) {
        var mh$ = gtk_color_selection_set_has_palette.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_has_palette", colorsel, has_palette);
            }
            mh$.invokeExact(colorsel, has_palette);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_current_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_current_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_alpha(GtkColorSelection *colorsel, guint16 alpha)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_current_alpha$descriptor() {
        return gtk_color_selection_set_current_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_alpha(GtkColorSelection *colorsel, guint16 alpha)
     * }
     */
    public static MethodHandle gtk_color_selection_set_current_alpha$handle() {
        return gtk_color_selection_set_current_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_alpha(GtkColorSelection *colorsel, guint16 alpha)
     * }
     */
    public static void gtk_color_selection_set_current_alpha(MemorySegment colorsel, short alpha) {
        var mh$ = gtk_color_selection_set_current_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_current_alpha", colorsel, alpha);
            }
            mh$.invokeExact(colorsel, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_current_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_current_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 gtk_color_selection_get_current_alpha(GtkColorSelection *colorsel)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_current_alpha$descriptor() {
        return gtk_color_selection_get_current_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 gtk_color_selection_get_current_alpha(GtkColorSelection *colorsel)
     * }
     */
    public static MethodHandle gtk_color_selection_get_current_alpha$handle() {
        return gtk_color_selection_get_current_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 gtk_color_selection_get_current_alpha(GtkColorSelection *colorsel)
     * }
     */
    public static short gtk_color_selection_get_current_alpha(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_current_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_current_alpha", colorsel);
            }
            return (short)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_previous_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_previous_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_alpha(GtkColorSelection *colorsel, guint16 alpha)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_previous_alpha$descriptor() {
        return gtk_color_selection_set_previous_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_alpha(GtkColorSelection *colorsel, guint16 alpha)
     * }
     */
    public static MethodHandle gtk_color_selection_set_previous_alpha$handle() {
        return gtk_color_selection_set_previous_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_alpha(GtkColorSelection *colorsel, guint16 alpha)
     * }
     */
    public static void gtk_color_selection_set_previous_alpha(MemorySegment colorsel, short alpha) {
        var mh$ = gtk_color_selection_set_previous_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_previous_alpha", colorsel, alpha);
            }
            mh$.invokeExact(colorsel, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_previous_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_previous_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 gtk_color_selection_get_previous_alpha(GtkColorSelection *colorsel)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_previous_alpha$descriptor() {
        return gtk_color_selection_get_previous_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 gtk_color_selection_get_previous_alpha(GtkColorSelection *colorsel)
     * }
     */
    public static MethodHandle gtk_color_selection_get_previous_alpha$handle() {
        return gtk_color_selection_get_previous_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 gtk_color_selection_get_previous_alpha(GtkColorSelection *colorsel)
     * }
     */
    public static short gtk_color_selection_get_previous_alpha(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_previous_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_previous_alpha", colorsel);
            }
            return (short)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_current_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_current_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_rgba(GtkColorSelection *colorsel, const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_current_rgba$descriptor() {
        return gtk_color_selection_set_current_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_rgba(GtkColorSelection *colorsel, const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_color_selection_set_current_rgba$handle() {
        return gtk_color_selection_set_current_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_rgba(GtkColorSelection *colorsel, const GdkRGBA *rgba)
     * }
     */
    public static void gtk_color_selection_set_current_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_set_current_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_current_rgba", colorsel, rgba);
            }
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_current_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_current_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_current_rgba(GtkColorSelection *colorsel, GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_current_rgba$descriptor() {
        return gtk_color_selection_get_current_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_current_rgba(GtkColorSelection *colorsel, GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_color_selection_get_current_rgba$handle() {
        return gtk_color_selection_get_current_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_current_rgba(GtkColorSelection *colorsel, GdkRGBA *rgba)
     * }
     */
    public static void gtk_color_selection_get_current_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_get_current_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_current_rgba", colorsel, rgba);
            }
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_previous_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_previous_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_rgba(GtkColorSelection *colorsel, const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_previous_rgba$descriptor() {
        return gtk_color_selection_set_previous_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_rgba(GtkColorSelection *colorsel, const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_color_selection_set_previous_rgba$handle() {
        return gtk_color_selection_set_previous_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_rgba(GtkColorSelection *colorsel, const GdkRGBA *rgba)
     * }
     */
    public static void gtk_color_selection_set_previous_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_set_previous_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_previous_rgba", colorsel, rgba);
            }
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_previous_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_previous_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_previous_rgba(GtkColorSelection *colorsel, GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_previous_rgba$descriptor() {
        return gtk_color_selection_get_previous_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_previous_rgba(GtkColorSelection *colorsel, GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_color_selection_get_previous_rgba$handle() {
        return gtk_color_selection_get_previous_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_previous_rgba(GtkColorSelection *colorsel, GdkRGBA *rgba)
     * }
     */
    public static void gtk_color_selection_get_previous_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_get_previous_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_previous_rgba", colorsel, rgba);
            }
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_is_adjusting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_is_adjusting"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_is_adjusting(GtkColorSelection *colorsel)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_is_adjusting$descriptor() {
        return gtk_color_selection_is_adjusting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_is_adjusting(GtkColorSelection *colorsel)
     * }
     */
    public static MethodHandle gtk_color_selection_is_adjusting$handle() {
        return gtk_color_selection_is_adjusting.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_is_adjusting(GtkColorSelection *colorsel)
     * }
     */
    public static int gtk_color_selection_is_adjusting(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_is_adjusting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_is_adjusting", colorsel);
            }
            return (int)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_palette_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_palette_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_palette_from_string(const gchar *str, GdkColor **colors, gint *n_colors)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_palette_from_string$descriptor() {
        return gtk_color_selection_palette_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_palette_from_string(const gchar *str, GdkColor **colors, gint *n_colors)
     * }
     */
    public static MethodHandle gtk_color_selection_palette_from_string$handle() {
        return gtk_color_selection_palette_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_color_selection_palette_from_string(const gchar *str, GdkColor **colors, gint *n_colors)
     * }
     */
    public static int gtk_color_selection_palette_from_string(MemorySegment str, MemorySegment colors, MemorySegment n_colors) {
        var mh$ = gtk_color_selection_palette_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_palette_from_string", str, colors, n_colors);
            }
            return (int)mh$.invokeExact(str, colors, n_colors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_palette_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_palette_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_color_selection_palette_to_string(const GdkColor *colors, gint n_colors)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_palette_to_string$descriptor() {
        return gtk_color_selection_palette_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_color_selection_palette_to_string(const GdkColor *colors, gint n_colors)
     * }
     */
    public static MethodHandle gtk_color_selection_palette_to_string$handle() {
        return gtk_color_selection_palette_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_color_selection_palette_to_string(const GdkColor *colors, gint n_colors)
     * }
     */
    public static MemorySegment gtk_color_selection_palette_to_string(MemorySegment colors, int n_colors) {
        var mh$ = gtk_color_selection_palette_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_palette_to_string", colors, n_colors);
            }
            return (MemorySegment)mh$.invokeExact(colors, n_colors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_change_palette_with_screen_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_change_palette_with_screen_hook"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook(GtkColorSelectionChangePaletteWithScreenFunc func)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_change_palette_with_screen_hook$descriptor() {
        return gtk_color_selection_set_change_palette_with_screen_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook(GtkColorSelectionChangePaletteWithScreenFunc func)
     * }
     */
    public static MethodHandle gtk_color_selection_set_change_palette_with_screen_hook$handle() {
        return gtk_color_selection_set_change_palette_with_screen_hook.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook(GtkColorSelectionChangePaletteWithScreenFunc func)
     * }
     */
    public static MemorySegment gtk_color_selection_set_change_palette_with_screen_hook(MemorySegment func) {
        var mh$ = gtk_color_selection_set_change_palette_with_screen_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_change_palette_with_screen_hook", func);
            }
            return (MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_current_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_current_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_color(GtkColorSelection *colorsel, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_current_color$descriptor() {
        return gtk_color_selection_set_current_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_color(GtkColorSelection *colorsel, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_color_selection_set_current_color$handle() {
        return gtk_color_selection_set_current_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_current_color(GtkColorSelection *colorsel, const GdkColor *color)
     * }
     */
    public static void gtk_color_selection_set_current_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_set_current_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_current_color", colorsel, color);
            }
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_current_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_current_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_current_color(GtkColorSelection *colorsel, GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_current_color$descriptor() {
        return gtk_color_selection_get_current_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_current_color(GtkColorSelection *colorsel, GdkColor *color)
     * }
     */
    public static MethodHandle gtk_color_selection_get_current_color$handle() {
        return gtk_color_selection_get_current_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_current_color(GtkColorSelection *colorsel, GdkColor *color)
     * }
     */
    public static void gtk_color_selection_get_current_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_get_current_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_current_color", colorsel, color);
            }
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_set_previous_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_set_previous_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_color(GtkColorSelection *colorsel, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_set_previous_color$descriptor() {
        return gtk_color_selection_set_previous_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_color(GtkColorSelection *colorsel, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_color_selection_set_previous_color$handle() {
        return gtk_color_selection_set_previous_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_set_previous_color(GtkColorSelection *colorsel, const GdkColor *color)
     * }
     */
    public static void gtk_color_selection_set_previous_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_set_previous_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_set_previous_color", colorsel, color);
            }
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_get_previous_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_get_previous_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_previous_color(GtkColorSelection *colorsel, GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_get_previous_color$descriptor() {
        return gtk_color_selection_get_previous_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_previous_color(GtkColorSelection *colorsel, GdkColor *color)
     * }
     */
    public static MethodHandle gtk_color_selection_get_previous_color$handle() {
        return gtk_color_selection_get_previous_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_selection_get_previous_color(GtkColorSelection *colorsel, GdkColor *color)
     * }
     */
    public static void gtk_color_selection_get_previous_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_get_previous_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_get_previous_color", colorsel, color);
            }
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_color_selection_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_color_selection_dialog_get_type$descriptor() {
        return gtk_color_selection_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_color_selection_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_color_selection_dialog_get_type$handle() {
        return gtk_color_selection_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_color_selection_dialog_get_type()
     * }
     */
    public static long gtk_color_selection_dialog_get_type() {
        var mh$ = gtk_color_selection_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_dialog_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_dialog_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_dialog_new(const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_dialog_new$descriptor() {
        return gtk_color_selection_dialog_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_dialog_new(const gchar *title)
     * }
     */
    public static MethodHandle gtk_color_selection_dialog_new$handle() {
        return gtk_color_selection_dialog_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_dialog_new(const gchar *title)
     * }
     */
    public static MemorySegment gtk_color_selection_dialog_new(MemorySegment title) {
        var mh$ = gtk_color_selection_dialog_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_dialog_new", title);
            }
            return (MemorySegment)mh$.invokeExact(title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_selection_dialog_get_color_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_selection_dialog_get_color_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_dialog_get_color_selection(GtkColorSelectionDialog *colorsel)
     * }
     */
    public static FunctionDescriptor gtk_color_selection_dialog_get_color_selection$descriptor() {
        return gtk_color_selection_dialog_get_color_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_dialog_get_color_selection(GtkColorSelectionDialog *colorsel)
     * }
     */
    public static MethodHandle gtk_color_selection_dialog_get_color_selection$handle() {
        return gtk_color_selection_dialog_get_color_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_selection_dialog_get_color_selection(GtkColorSelectionDialog *colorsel)
     * }
     */
    public static MemorySegment gtk_color_selection_dialog_get_color_selection(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_dialog_get_color_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_selection_dialog_get_color_selection", colorsel);
            }
            return (MemorySegment)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_font_selection_get_type()
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_type$descriptor() {
        return gtk_font_selection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_font_selection_get_type()
     * }
     */
    public static MethodHandle gtk_font_selection_get_type$handle() {
        return gtk_font_selection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_font_selection_get_type()
     * }
     */
    public static long gtk_font_selection_get_type() {
        var mh$ = gtk_font_selection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_new()
     * }
     */
    public static FunctionDescriptor gtk_font_selection_new$descriptor() {
        return gtk_font_selection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_new()
     * }
     */
    public static MethodHandle gtk_font_selection_new$handle() {
        return gtk_font_selection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_new()
     * }
     */
    public static MemorySegment gtk_font_selection_new() {
        var mh$ = gtk_font_selection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_family_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_family_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_family_list(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_family_list$descriptor() {
        return gtk_font_selection_get_family_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_family_list(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_family_list$handle() {
        return gtk_font_selection_get_family_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_family_list(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_family_list(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_family_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_family_list", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_face_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_face_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_face_list(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_face_list$descriptor() {
        return gtk_font_selection_get_face_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_face_list(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_face_list$handle() {
        return gtk_font_selection_get_face_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_face_list(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_face_list(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_face_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_face_list", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_size_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_size_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_size_entry(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_size_entry$descriptor() {
        return gtk_font_selection_get_size_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_size_entry(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_size_entry$handle() {
        return gtk_font_selection_get_size_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_size_entry(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_size_entry(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_size_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_size_entry", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_size_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_size_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_size_list(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_size_list$descriptor() {
        return gtk_font_selection_get_size_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_size_list(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_size_list$handle() {
        return gtk_font_selection_get_size_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_size_list(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_size_list(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_size_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_size_list", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_preview_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_preview_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_preview_entry(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_preview_entry$descriptor() {
        return gtk_font_selection_get_preview_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_preview_entry(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_preview_entry$handle() {
        return gtk_font_selection_get_preview_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_get_preview_entry(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_preview_entry(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_preview_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_preview_entry", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFamily *gtk_font_selection_get_family(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_family$descriptor() {
        return gtk_font_selection_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFamily *gtk_font_selection_get_family(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_family$handle() {
        return gtk_font_selection_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFamily *gtk_font_selection_get_family(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_family(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_family", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFace *gtk_font_selection_get_face(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_face$descriptor() {
        return gtk_font_selection_get_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFace *gtk_font_selection_get_face(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_face$handle() {
        return gtk_font_selection_get_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFace *gtk_font_selection_get_face(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_face(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_face", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_font_selection_get_size(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_size$descriptor() {
        return gtk_font_selection_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_font_selection_get_size(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_size$handle() {
        return gtk_font_selection_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_font_selection_get_size(GtkFontSelection *fontsel)
     * }
     */
    public static int gtk_font_selection_get_size(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_size", fontsel);
            }
            return (int)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_font_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_font_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_selection_get_font_name(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_font_name$descriptor() {
        return gtk_font_selection_get_font_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_selection_get_font_name(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_font_name$handle() {
        return gtk_font_selection_get_font_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_font_selection_get_font_name(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_font_name(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_font_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_font_name", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_set_font_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_set_font_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_selection_set_font_name(GtkFontSelection *fontsel, const gchar *fontname)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_set_font_name$descriptor() {
        return gtk_font_selection_set_font_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_selection_set_font_name(GtkFontSelection *fontsel, const gchar *fontname)
     * }
     */
    public static MethodHandle gtk_font_selection_set_font_name$handle() {
        return gtk_font_selection_set_font_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_selection_set_font_name(GtkFontSelection *fontsel, const gchar *fontname)
     * }
     */
    public static int gtk_font_selection_set_font_name(MemorySegment fontsel, MemorySegment fontname) {
        var mh$ = gtk_font_selection_set_font_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_set_font_name", fontsel, fontname);
            }
            return (int)mh$.invokeExact(fontsel, fontname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_get_preview_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_get_preview_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_selection_get_preview_text(GtkFontSelection *fontsel)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_get_preview_text$descriptor() {
        return gtk_font_selection_get_preview_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_selection_get_preview_text(GtkFontSelection *fontsel)
     * }
     */
    public static MethodHandle gtk_font_selection_get_preview_text$handle() {
        return gtk_font_selection_get_preview_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_font_selection_get_preview_text(GtkFontSelection *fontsel)
     * }
     */
    public static MemorySegment gtk_font_selection_get_preview_text(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_preview_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_get_preview_text", fontsel);
            }
            return (MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_set_preview_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_set_preview_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_selection_set_preview_text(GtkFontSelection *fontsel, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_set_preview_text$descriptor() {
        return gtk_font_selection_set_preview_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_selection_set_preview_text(GtkFontSelection *fontsel, const gchar *text)
     * }
     */
    public static MethodHandle gtk_font_selection_set_preview_text$handle() {
        return gtk_font_selection_set_preview_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_selection_set_preview_text(GtkFontSelection *fontsel, const gchar *text)
     * }
     */
    public static void gtk_font_selection_set_preview_text(MemorySegment fontsel, MemorySegment text) {
        var mh$ = gtk_font_selection_set_preview_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_set_preview_text", fontsel, text);
            }
            mh$.invokeExact(fontsel, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_font_selection_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_get_type$descriptor() {
        return gtk_font_selection_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_font_selection_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_get_type$handle() {
        return gtk_font_selection_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_font_selection_dialog_get_type()
     * }
     */
    public static long gtk_font_selection_dialog_get_type() {
        var mh$ = gtk_font_selection_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_new(const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_new$descriptor() {
        return gtk_font_selection_dialog_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_new(const gchar *title)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_new$handle() {
        return gtk_font_selection_dialog_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_new(const gchar *title)
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_new(MemorySegment title) {
        var mh$ = gtk_font_selection_dialog_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_new", title);
            }
            return (MemorySegment)mh$.invokeExact(title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_get_ok_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_get_ok_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_ok_button(GtkFontSelectionDialog *fsd)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_get_ok_button$descriptor() {
        return gtk_font_selection_dialog_get_ok_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_ok_button(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_get_ok_button$handle() {
        return gtk_font_selection_dialog_get_ok_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_ok_button(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_ok_button(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_ok_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_get_ok_button", fsd);
            }
            return (MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_get_cancel_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_get_cancel_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_cancel_button(GtkFontSelectionDialog *fsd)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_get_cancel_button$descriptor() {
        return gtk_font_selection_dialog_get_cancel_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_cancel_button(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_get_cancel_button$handle() {
        return gtk_font_selection_dialog_get_cancel_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_cancel_button(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_cancel_button(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_cancel_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_get_cancel_button", fsd);
            }
            return (MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_get_font_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_get_font_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_font_selection(GtkFontSelectionDialog *fsd)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_get_font_selection$descriptor() {
        return gtk_font_selection_dialog_get_font_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_font_selection(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_get_font_selection$handle() {
        return gtk_font_selection_dialog_get_font_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_font_selection_dialog_get_font_selection(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_font_selection(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_font_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_get_font_selection", fsd);
            }
            return (MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_get_font_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_get_font_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog *fsd)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_get_font_name$descriptor() {
        return gtk_font_selection_dialog_get_font_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_get_font_name$handle() {
        return gtk_font_selection_dialog_get_font_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_font_name(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_font_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_get_font_name", fsd);
            }
            return (MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_set_font_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_set_font_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog *fsd, const gchar *fontname)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_set_font_name$descriptor() {
        return gtk_font_selection_dialog_set_font_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog *fsd, const gchar *fontname)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_set_font_name$handle() {
        return gtk_font_selection_dialog_set_font_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog *fsd, const gchar *fontname)
     * }
     */
    public static int gtk_font_selection_dialog_set_font_name(MemorySegment fsd, MemorySegment fontname) {
        var mh$ = gtk_font_selection_dialog_set_font_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_set_font_name", fsd, fontname);
            }
            return (int)mh$.invokeExact(fsd, fontname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_get_preview_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_get_preview_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog *fsd)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_get_preview_text$descriptor() {
        return gtk_font_selection_dialog_get_preview_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_get_preview_text$handle() {
        return gtk_font_selection_dialog_get_preview_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog *fsd)
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_preview_text(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_preview_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_get_preview_text", fsd);
            }
            return (MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_font_selection_dialog_set_preview_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_font_selection_dialog_set_preview_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog *fsd, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_font_selection_dialog_set_preview_text$descriptor() {
        return gtk_font_selection_dialog_set_preview_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog *fsd, const gchar *text)
     * }
     */
    public static MethodHandle gtk_font_selection_dialog_set_preview_text$handle() {
        return gtk_font_selection_dialog_set_preview_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog *fsd, const gchar *text)
     * }
     */
    public static void gtk_font_selection_dialog_set_preview_text(MemorySegment fsd, MemorySegment text) {
        var mh$ = gtk_font_selection_dialog_set_preview_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_font_selection_dialog_set_preview_text", fsd, text);
            }
            mh$.invokeExact(fsd, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_symbolic_color_get_type()
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_get_type$descriptor() {
        return gtk_symbolic_color_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_symbolic_color_get_type()
     * }
     */
    public static MethodHandle gtk_symbolic_color_get_type$handle() {
        return gtk_symbolic_color_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_symbolic_color_get_type()
     * }
     */
    public static long gtk_symbolic_color_get_type() {
        var mh$ = gtk_symbolic_color_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_new_literal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_new_literal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_literal(const GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_new_literal$descriptor() {
        return gtk_symbolic_color_new_literal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_literal(const GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_symbolic_color_new_literal$handle() {
        return gtk_symbolic_color_new_literal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_literal(const GdkRGBA *color)
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_literal(MemorySegment color) {
        var mh$ = gtk_symbolic_color_new_literal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_new_literal", color);
            }
            return (MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_new_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_new_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_new_name$descriptor() {
        return gtk_symbolic_color_new_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_name(const gchar *name)
     * }
     */
    public static MethodHandle gtk_symbolic_color_new_name$handle() {
        return gtk_symbolic_color_new_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_name(const gchar *name)
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_name(MemorySegment name) {
        var mh$ = gtk_symbolic_color_new_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_new_name", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_new_shade {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_new_shade"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_shade(GtkSymbolicColor *color, gdouble factor)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_new_shade$descriptor() {
        return gtk_symbolic_color_new_shade.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_shade(GtkSymbolicColor *color, gdouble factor)
     * }
     */
    public static MethodHandle gtk_symbolic_color_new_shade$handle() {
        return gtk_symbolic_color_new_shade.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_shade(GtkSymbolicColor *color, gdouble factor)
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_shade(MemorySegment color, double factor) {
        var mh$ = gtk_symbolic_color_new_shade.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_new_shade", color, factor);
            }
            return (MemorySegment)mh$.invokeExact(color, factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_new_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_new_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_alpha(GtkSymbolicColor *color, gdouble factor)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_new_alpha$descriptor() {
        return gtk_symbolic_color_new_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_alpha(GtkSymbolicColor *color, gdouble factor)
     * }
     */
    public static MethodHandle gtk_symbolic_color_new_alpha$handle() {
        return gtk_symbolic_color_new_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_alpha(GtkSymbolicColor *color, gdouble factor)
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_alpha(MemorySegment color, double factor) {
        var mh$ = gtk_symbolic_color_new_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_new_alpha", color, factor);
            }
            return (MemorySegment)mh$.invokeExact(color, factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_new_mix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_new_mix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_mix(GtkSymbolicColor *color1, GtkSymbolicColor *color2, gdouble factor)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_new_mix$descriptor() {
        return gtk_symbolic_color_new_mix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_mix(GtkSymbolicColor *color1, GtkSymbolicColor *color2, gdouble factor)
     * }
     */
    public static MethodHandle gtk_symbolic_color_new_mix$handle() {
        return gtk_symbolic_color_new_mix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_mix(GtkSymbolicColor *color1, GtkSymbolicColor *color2, gdouble factor)
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_mix(MemorySegment color1, MemorySegment color2, double factor) {
        var mh$ = gtk_symbolic_color_new_mix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_new_mix", color1, color2, factor);
            }
            return (MemorySegment)mh$.invokeExact(color1, color2, factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_new_win32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_new_win32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_win32(const gchar *theme_class, gint id)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_new_win32$descriptor() {
        return gtk_symbolic_color_new_win32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_win32(const gchar *theme_class, gint id)
     * }
     */
    public static MethodHandle gtk_symbolic_color_new_win32$handle() {
        return gtk_symbolic_color_new_win32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_new_win32(const gchar *theme_class, gint id)
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_win32(MemorySegment theme_class, int id) {
        var mh$ = gtk_symbolic_color_new_win32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_new_win32", theme_class, id);
            }
            return (MemorySegment)mh$.invokeExact(theme_class, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_ref(GtkSymbolicColor *color)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_ref$descriptor() {
        return gtk_symbolic_color_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_ref(GtkSymbolicColor *color)
     * }
     */
    public static MethodHandle gtk_symbolic_color_ref$handle() {
        return gtk_symbolic_color_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSymbolicColor *gtk_symbolic_color_ref(GtkSymbolicColor *color)
     * }
     */
    public static MemorySegment gtk_symbolic_color_ref(MemorySegment color) {
        var mh$ = gtk_symbolic_color_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_ref", color);
            }
            return (MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_symbolic_color_unref(GtkSymbolicColor *color)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_unref$descriptor() {
        return gtk_symbolic_color_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_symbolic_color_unref(GtkSymbolicColor *color)
     * }
     */
    public static MethodHandle gtk_symbolic_color_unref$handle() {
        return gtk_symbolic_color_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_symbolic_color_unref(GtkSymbolicColor *color)
     * }
     */
    public static void gtk_symbolic_color_unref(MemorySegment color) {
        var mh$ = gtk_symbolic_color_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_unref", color);
            }
            mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_symbolic_color_to_string(GtkSymbolicColor *color)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_to_string$descriptor() {
        return gtk_symbolic_color_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_symbolic_color_to_string(GtkSymbolicColor *color)
     * }
     */
    public static MethodHandle gtk_symbolic_color_to_string$handle() {
        return gtk_symbolic_color_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_symbolic_color_to_string(GtkSymbolicColor *color)
     * }
     */
    public static MemorySegment gtk_symbolic_color_to_string(MemorySegment color) {
        var mh$ = gtk_symbolic_color_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_to_string", color);
            }
            return (MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_symbolic_color_resolve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_symbolic_color_resolve"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_symbolic_color_resolve(GtkSymbolicColor *color, GtkStyleProperties *props, GdkRGBA *resolved_color)
     * }
     */
    public static FunctionDescriptor gtk_symbolic_color_resolve$descriptor() {
        return gtk_symbolic_color_resolve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_symbolic_color_resolve(GtkSymbolicColor *color, GtkStyleProperties *props, GdkRGBA *resolved_color)
     * }
     */
    public static MethodHandle gtk_symbolic_color_resolve$handle() {
        return gtk_symbolic_color_resolve.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_symbolic_color_resolve(GtkSymbolicColor *color, GtkStyleProperties *props, GdkRGBA *resolved_color)
     * }
     */
    public static int gtk_symbolic_color_resolve(MemorySegment color, MemorySegment props, MemorySegment resolved_color) {
        var mh$ = gtk_symbolic_color_resolve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_symbolic_color_resolve", color, props, resolved_color);
            }
            return (int)mh$.invokeExact(color, props, resolved_color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_gradient_get_type()
     * }
     */
    public static FunctionDescriptor gtk_gradient_get_type$descriptor() {
        return gtk_gradient_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_gradient_get_type()
     * }
     */
    public static MethodHandle gtk_gradient_get_type$handle() {
        return gtk_gradient_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_gradient_get_type()
     * }
     */
    public static long gtk_gradient_get_type() {
        var mh$ = gtk_gradient_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_new_linear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_new_linear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_new_linear(gdouble x0, gdouble y0, gdouble x1, gdouble y1)
     * }
     */
    public static FunctionDescriptor gtk_gradient_new_linear$descriptor() {
        return gtk_gradient_new_linear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_new_linear(gdouble x0, gdouble y0, gdouble x1, gdouble y1)
     * }
     */
    public static MethodHandle gtk_gradient_new_linear$handle() {
        return gtk_gradient_new_linear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_new_linear(gdouble x0, gdouble y0, gdouble x1, gdouble y1)
     * }
     */
    public static MemorySegment gtk_gradient_new_linear(double x0, double y0, double x1, double y1) {
        var mh$ = gtk_gradient_new_linear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_new_linear", x0, y0, x1, y1);
            }
            return (MemorySegment)mh$.invokeExact(x0, y0, x1, y1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_new_radial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_new_radial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_new_radial(gdouble x0, gdouble y0, gdouble radius0, gdouble x1, gdouble y1, gdouble radius1)
     * }
     */
    public static FunctionDescriptor gtk_gradient_new_radial$descriptor() {
        return gtk_gradient_new_radial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_new_radial(gdouble x0, gdouble y0, gdouble radius0, gdouble x1, gdouble y1, gdouble radius1)
     * }
     */
    public static MethodHandle gtk_gradient_new_radial$handle() {
        return gtk_gradient_new_radial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_new_radial(gdouble x0, gdouble y0, gdouble radius0, gdouble x1, gdouble y1, gdouble radius1)
     * }
     */
    public static MemorySegment gtk_gradient_new_radial(double x0, double y0, double radius0, double x1, double y1, double radius1) {
        var mh$ = gtk_gradient_new_radial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_new_radial", x0, y0, radius0, x1, y1, radius1);
            }
            return (MemorySegment)mh$.invokeExact(x0, y0, radius0, x1, y1, radius1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_add_color_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_add_color_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gradient_add_color_stop(GtkGradient *gradient, gdouble offset, GtkSymbolicColor *color)
     * }
     */
    public static FunctionDescriptor gtk_gradient_add_color_stop$descriptor() {
        return gtk_gradient_add_color_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gradient_add_color_stop(GtkGradient *gradient, gdouble offset, GtkSymbolicColor *color)
     * }
     */
    public static MethodHandle gtk_gradient_add_color_stop$handle() {
        return gtk_gradient_add_color_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gradient_add_color_stop(GtkGradient *gradient, gdouble offset, GtkSymbolicColor *color)
     * }
     */
    public static void gtk_gradient_add_color_stop(MemorySegment gradient, double offset, MemorySegment color) {
        var mh$ = gtk_gradient_add_color_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_add_color_stop", gradient, offset, color);
            }
            mh$.invokeExact(gradient, offset, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_ref(GtkGradient *gradient)
     * }
     */
    public static FunctionDescriptor gtk_gradient_ref$descriptor() {
        return gtk_gradient_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_ref(GtkGradient *gradient)
     * }
     */
    public static MethodHandle gtk_gradient_ref$handle() {
        return gtk_gradient_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkGradient *gtk_gradient_ref(GtkGradient *gradient)
     * }
     */
    public static MemorySegment gtk_gradient_ref(MemorySegment gradient) {
        var mh$ = gtk_gradient_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_ref", gradient);
            }
            return (MemorySegment)mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_gradient_unref(GtkGradient *gradient)
     * }
     */
    public static FunctionDescriptor gtk_gradient_unref$descriptor() {
        return gtk_gradient_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_gradient_unref(GtkGradient *gradient)
     * }
     */
    public static MethodHandle gtk_gradient_unref$handle() {
        return gtk_gradient_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_gradient_unref(GtkGradient *gradient)
     * }
     */
    public static void gtk_gradient_unref(MemorySegment gradient) {
        var mh$ = gtk_gradient_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_unref", gradient);
            }
            mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_resolve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_resolve"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_gradient_resolve(GtkGradient *gradient, GtkStyleProperties *props, cairo_pattern_t **resolved_gradient)
     * }
     */
    public static FunctionDescriptor gtk_gradient_resolve$descriptor() {
        return gtk_gradient_resolve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_gradient_resolve(GtkGradient *gradient, GtkStyleProperties *props, cairo_pattern_t **resolved_gradient)
     * }
     */
    public static MethodHandle gtk_gradient_resolve$handle() {
        return gtk_gradient_resolve.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_gradient_resolve(GtkGradient *gradient, GtkStyleProperties *props, cairo_pattern_t **resolved_gradient)
     * }
     */
    public static int gtk_gradient_resolve(MemorySegment gradient, MemorySegment props, MemorySegment resolved_gradient) {
        var mh$ = gtk_gradient_resolve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_resolve", gradient, props, resolved_gradient);
            }
            return (int)mh$.invokeExact(gradient, props, resolved_gradient);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_resolve_for_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_resolve_for_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *gtk_gradient_resolve_for_context(GtkGradient *gradient, GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_gradient_resolve_for_context$descriptor() {
        return gtk_gradient_resolve_for_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *gtk_gradient_resolve_for_context(GtkGradient *gradient, GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_gradient_resolve_for_context$handle() {
        return gtk_gradient_resolve_for_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *gtk_gradient_resolve_for_context(GtkGradient *gradient, GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_gradient_resolve_for_context(MemorySegment gradient, MemorySegment context) {
        var mh$ = gtk_gradient_resolve_for_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_resolve_for_context", gradient, context);
            }
            return (MemorySegment)mh$.invokeExact(gradient, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_gradient_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_gradient_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_gradient_to_string(GtkGradient *gradient)
     * }
     */
    public static FunctionDescriptor gtk_gradient_to_string$descriptor() {
        return gtk_gradient_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_gradient_to_string(GtkGradient *gradient)
     * }
     */
    public static MethodHandle gtk_gradient_to_string$handle() {
        return gtk_gradient_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_gradient_to_string(GtkGradient *gradient)
     * }
     */
    public static MemorySegment gtk_gradient_to_string(MemorySegment gradient) {
        var mh$ = gtk_gradient_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_gradient_to_string", gradient);
            }
            return (MemorySegment)mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_handle_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_handle_box_get_type$descriptor() {
        return gtk_handle_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_handle_box_get_type()
     * }
     */
    public static MethodHandle gtk_handle_box_get_type$handle() {
        return gtk_handle_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_handle_box_get_type()
     * }
     */
    public static long gtk_handle_box_get_type() {
        var mh$ = gtk_handle_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_handle_box_new()
     * }
     */
    public static FunctionDescriptor gtk_handle_box_new$descriptor() {
        return gtk_handle_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_handle_box_new()
     * }
     */
    public static MethodHandle gtk_handle_box_new$handle() {
        return gtk_handle_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_handle_box_new()
     * }
     */
    public static MemorySegment gtk_handle_box_new() {
        var mh$ = gtk_handle_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_set_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_set_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_shadow_type(GtkHandleBox *handle_box, GtkShadowType type)
     * }
     */
    public static FunctionDescriptor gtk_handle_box_set_shadow_type$descriptor() {
        return gtk_handle_box_set_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_shadow_type(GtkHandleBox *handle_box, GtkShadowType type)
     * }
     */
    public static MethodHandle gtk_handle_box_set_shadow_type$handle() {
        return gtk_handle_box_set_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_shadow_type(GtkHandleBox *handle_box, GtkShadowType type)
     * }
     */
    public static void gtk_handle_box_set_shadow_type(MemorySegment handle_box, int type) {
        var mh$ = gtk_handle_box_set_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_set_shadow_type", handle_box, type);
            }
            mh$.invokeExact(handle_box, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_get_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_get_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_handle_box_get_shadow_type(GtkHandleBox *handle_box)
     * }
     */
    public static FunctionDescriptor gtk_handle_box_get_shadow_type$descriptor() {
        return gtk_handle_box_get_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_handle_box_get_shadow_type(GtkHandleBox *handle_box)
     * }
     */
    public static MethodHandle gtk_handle_box_get_shadow_type$handle() {
        return gtk_handle_box_get_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkShadowType gtk_handle_box_get_shadow_type(GtkHandleBox *handle_box)
     * }
     */
    public static int gtk_handle_box_get_shadow_type(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_get_shadow_type", handle_box);
            }
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_set_handle_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_set_handle_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_handle_position(GtkHandleBox *handle_box, GtkPositionType position)
     * }
     */
    public static FunctionDescriptor gtk_handle_box_set_handle_position$descriptor() {
        return gtk_handle_box_set_handle_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_handle_position(GtkHandleBox *handle_box, GtkPositionType position)
     * }
     */
    public static MethodHandle gtk_handle_box_set_handle_position$handle() {
        return gtk_handle_box_set_handle_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_handle_position(GtkHandleBox *handle_box, GtkPositionType position)
     * }
     */
    public static void gtk_handle_box_set_handle_position(MemorySegment handle_box, int position) {
        var mh$ = gtk_handle_box_set_handle_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_set_handle_position", handle_box, position);
            }
            mh$.invokeExact(handle_box, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_get_handle_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_get_handle_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box)
     * }
     */
    public static FunctionDescriptor gtk_handle_box_get_handle_position$descriptor() {
        return gtk_handle_box_get_handle_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box)
     * }
     */
    public static MethodHandle gtk_handle_box_get_handle_position$handle() {
        return gtk_handle_box_get_handle_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box)
     * }
     */
    public static int gtk_handle_box_get_handle_position(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_handle_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_get_handle_position", handle_box);
            }
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_set_snap_edge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_set_snap_edge"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_snap_edge(GtkHandleBox *handle_box, GtkPositionType edge)
     * }
     */
    public static FunctionDescriptor gtk_handle_box_set_snap_edge$descriptor() {
        return gtk_handle_box_set_snap_edge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_snap_edge(GtkHandleBox *handle_box, GtkPositionType edge)
     * }
     */
    public static MethodHandle gtk_handle_box_set_snap_edge$handle() {
        return gtk_handle_box_set_snap_edge.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_handle_box_set_snap_edge(GtkHandleBox *handle_box, GtkPositionType edge)
     * }
     */
    public static void gtk_handle_box_set_snap_edge(MemorySegment handle_box, int edge) {
        var mh$ = gtk_handle_box_set_snap_edge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_set_snap_edge", handle_box, edge);
            }
            mh$.invokeExact(handle_box, edge);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_get_snap_edge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_get_snap_edge"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_handle_box_get_snap_edge(GtkHandleBox *handle_box)
     * }
     */
    public static FunctionDescriptor gtk_handle_box_get_snap_edge$descriptor() {
        return gtk_handle_box_get_snap_edge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_handle_box_get_snap_edge(GtkHandleBox *handle_box)
     * }
     */
    public static MethodHandle gtk_handle_box_get_snap_edge$handle() {
        return gtk_handle_box_get_snap_edge.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPositionType gtk_handle_box_get_snap_edge(GtkHandleBox *handle_box)
     * }
     */
    public static int gtk_handle_box_get_snap_edge(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_snap_edge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_get_snap_edge", handle_box);
            }
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_handle_box_get_child_detached {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_handle_box_get_child_detached"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_handle_box_get_child_detached(GtkHandleBox *handle_box)
     * }
     */
    public static FunctionDescriptor gtk_handle_box_get_child_detached$descriptor() {
        return gtk_handle_box_get_child_detached.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_handle_box_get_child_detached(GtkHandleBox *handle_box)
     * }
     */
    public static MethodHandle gtk_handle_box_get_child_detached$handle() {
        return gtk_handle_box_get_child_detached.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_handle_box_get_child_detached(GtkHandleBox *handle_box)
     * }
     */
    public static int gtk_handle_box_get_child_detached(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_child_detached.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_handle_box_get_child_detached", handle_box);
            }
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hbutton_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hbutton_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_hbutton_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_hbutton_box_get_type$descriptor() {
        return gtk_hbutton_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_hbutton_box_get_type()
     * }
     */
    public static MethodHandle gtk_hbutton_box_get_type$handle() {
        return gtk_hbutton_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_hbutton_box_get_type()
     * }
     */
    public static long gtk_hbutton_box_get_type() {
        var mh$ = gtk_hbutton_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hbutton_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hbutton_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hbutton_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hbutton_box_new()
     * }
     */
    public static FunctionDescriptor gtk_hbutton_box_new$descriptor() {
        return gtk_hbutton_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hbutton_box_new()
     * }
     */
    public static MethodHandle gtk_hbutton_box_new$handle() {
        return gtk_hbutton_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hbutton_box_new()
     * }
     */
    public static MemorySegment gtk_hbutton_box_new() {
        var mh$ = gtk_hbutton_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hbutton_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hbox_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hbox_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_hbox_get_type()
     * }
     */
    public static FunctionDescriptor gtk_hbox_get_type$descriptor() {
        return gtk_hbox_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_hbox_get_type()
     * }
     */
    public static MethodHandle gtk_hbox_get_type$handle() {
        return gtk_hbox_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_hbox_get_type()
     * }
     */
    public static long gtk_hbox_get_type() {
        var mh$ = gtk_hbox_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hbox_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hbox_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hbox_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hbox_new(gboolean homogeneous, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_hbox_new$descriptor() {
        return gtk_hbox_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hbox_new(gboolean homogeneous, gint spacing)
     * }
     */
    public static MethodHandle gtk_hbox_new$handle() {
        return gtk_hbox_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hbox_new(gboolean homogeneous, gint spacing)
     * }
     */
    public static MemorySegment gtk_hbox_new(int homogeneous, int spacing) {
        var mh$ = gtk_hbox_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hbox_new", homogeneous, spacing);
            }
            return (MemorySegment)mh$.invokeExact(homogeneous, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hpaned_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hpaned_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_hpaned_get_type()
     * }
     */
    public static FunctionDescriptor gtk_hpaned_get_type$descriptor() {
        return gtk_hpaned_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_hpaned_get_type()
     * }
     */
    public static MethodHandle gtk_hpaned_get_type$handle() {
        return gtk_hpaned_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_hpaned_get_type()
     * }
     */
    public static long gtk_hpaned_get_type() {
        var mh$ = gtk_hpaned_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hpaned_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hpaned_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hpaned_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hpaned_new()
     * }
     */
    public static FunctionDescriptor gtk_hpaned_new$descriptor() {
        return gtk_hpaned_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hpaned_new()
     * }
     */
    public static MethodHandle gtk_hpaned_new$handle() {
        return gtk_hpaned_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hpaned_new()
     * }
     */
    public static MemorySegment gtk_hpaned_new() {
        var mh$ = gtk_hpaned_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hpaned_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_hsv_get_type()
     * }
     */
    public static FunctionDescriptor gtk_hsv_get_type$descriptor() {
        return gtk_hsv_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_hsv_get_type()
     * }
     */
    public static MethodHandle gtk_hsv_get_type$handle() {
        return gtk_hsv_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_hsv_get_type()
     * }
     */
    public static long gtk_hsv_get_type() {
        var mh$ = gtk_hsv_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hsv_new()
     * }
     */
    public static FunctionDescriptor gtk_hsv_new$descriptor() {
        return gtk_hsv_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hsv_new()
     * }
     */
    public static MethodHandle gtk_hsv_new$handle() {
        return gtk_hsv_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hsv_new()
     * }
     */
    public static MemorySegment gtk_hsv_new() {
        var mh$ = gtk_hsv_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_set_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_set_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_hsv_set_color(GtkHSV *hsv, double h, double s, double v)
     * }
     */
    public static FunctionDescriptor gtk_hsv_set_color$descriptor() {
        return gtk_hsv_set_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_hsv_set_color(GtkHSV *hsv, double h, double s, double v)
     * }
     */
    public static MethodHandle gtk_hsv_set_color$handle() {
        return gtk_hsv_set_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_hsv_set_color(GtkHSV *hsv, double h, double s, double v)
     * }
     */
    public static void gtk_hsv_set_color(MemorySegment hsv, double h, double s, double v) {
        var mh$ = gtk_hsv_set_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_set_color", hsv, h, s, v);
            }
            mh$.invokeExact(hsv, h, s, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_get_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_get_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_hsv_get_color(GtkHSV *hsv, gdouble *h, gdouble *s, gdouble *v)
     * }
     */
    public static FunctionDescriptor gtk_hsv_get_color$descriptor() {
        return gtk_hsv_get_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_hsv_get_color(GtkHSV *hsv, gdouble *h, gdouble *s, gdouble *v)
     * }
     */
    public static MethodHandle gtk_hsv_get_color$handle() {
        return gtk_hsv_get_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_hsv_get_color(GtkHSV *hsv, gdouble *h, gdouble *s, gdouble *v)
     * }
     */
    public static void gtk_hsv_get_color(MemorySegment hsv, MemorySegment h, MemorySegment s, MemorySegment v) {
        var mh$ = gtk_hsv_get_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_get_color", hsv, h, s, v);
            }
            mh$.invokeExact(hsv, h, s, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_set_metrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_set_metrics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_hsv_set_metrics(GtkHSV *hsv, gint size, gint ring_width)
     * }
     */
    public static FunctionDescriptor gtk_hsv_set_metrics$descriptor() {
        return gtk_hsv_set_metrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_hsv_set_metrics(GtkHSV *hsv, gint size, gint ring_width)
     * }
     */
    public static MethodHandle gtk_hsv_set_metrics$handle() {
        return gtk_hsv_set_metrics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_hsv_set_metrics(GtkHSV *hsv, gint size, gint ring_width)
     * }
     */
    public static void gtk_hsv_set_metrics(MemorySegment hsv, int size, int ring_width) {
        var mh$ = gtk_hsv_set_metrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_set_metrics", hsv, size, ring_width);
            }
            mh$.invokeExact(hsv, size, ring_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_get_metrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_get_metrics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_hsv_get_metrics(GtkHSV *hsv, gint *size, gint *ring_width)
     * }
     */
    public static FunctionDescriptor gtk_hsv_get_metrics$descriptor() {
        return gtk_hsv_get_metrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_hsv_get_metrics(GtkHSV *hsv, gint *size, gint *ring_width)
     * }
     */
    public static MethodHandle gtk_hsv_get_metrics$handle() {
        return gtk_hsv_get_metrics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_hsv_get_metrics(GtkHSV *hsv, gint *size, gint *ring_width)
     * }
     */
    public static void gtk_hsv_get_metrics(MemorySegment hsv, MemorySegment size, MemorySegment ring_width) {
        var mh$ = gtk_hsv_get_metrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_get_metrics", hsv, size, ring_width);
            }
            mh$.invokeExact(hsv, size, ring_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_is_adjusting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_is_adjusting"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_hsv_is_adjusting(GtkHSV *hsv)
     * }
     */
    public static FunctionDescriptor gtk_hsv_is_adjusting$descriptor() {
        return gtk_hsv_is_adjusting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_hsv_is_adjusting(GtkHSV *hsv)
     * }
     */
    public static MethodHandle gtk_hsv_is_adjusting$handle() {
        return gtk_hsv_is_adjusting.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_hsv_is_adjusting(GtkHSV *hsv)
     * }
     */
    public static int gtk_hsv_is_adjusting(MemorySegment hsv) {
        var mh$ = gtk_hsv_is_adjusting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_is_adjusting", hsv);
            }
            return (int)mh$.invokeExact(hsv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hscale_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hscale_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_hscale_get_type()
     * }
     */
    public static FunctionDescriptor gtk_hscale_get_type$descriptor() {
        return gtk_hscale_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_hscale_get_type()
     * }
     */
    public static MethodHandle gtk_hscale_get_type$handle() {
        return gtk_hscale_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_hscale_get_type()
     * }
     */
    public static long gtk_hscale_get_type() {
        var mh$ = gtk_hscale_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hscale_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hscale_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hscale_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscale_new(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_hscale_new$descriptor() {
        return gtk_hscale_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscale_new(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_hscale_new$handle() {
        return gtk_hscale_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscale_new(GtkAdjustment *adjustment)
     * }
     */
    public static MemorySegment gtk_hscale_new(MemorySegment adjustment) {
        var mh$ = gtk_hscale_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hscale_new", adjustment);
            }
            return (MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hscale_new_with_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hscale_new_with_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscale_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static FunctionDescriptor gtk_hscale_new_with_range$descriptor() {
        return gtk_hscale_new_with_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscale_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MethodHandle gtk_hscale_new_with_range$handle() {
        return gtk_hscale_new_with_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscale_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MemorySegment gtk_hscale_new_with_range(double min, double max, double step) {
        var mh$ = gtk_hscale_new_with_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hscale_new_with_range", min, max, step);
            }
            return (MemorySegment)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hscrollbar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hscrollbar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_hscrollbar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_hscrollbar_get_type$descriptor() {
        return gtk_hscrollbar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_hscrollbar_get_type()
     * }
     */
    public static MethodHandle gtk_hscrollbar_get_type$handle() {
        return gtk_hscrollbar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_hscrollbar_get_type()
     * }
     */
    public static long gtk_hscrollbar_get_type() {
        var mh$ = gtk_hscrollbar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hscrollbar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hscrollbar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hscrollbar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscrollbar_new(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_hscrollbar_new$descriptor() {
        return gtk_hscrollbar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscrollbar_new(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_hscrollbar_new$handle() {
        return gtk_hscrollbar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hscrollbar_new(GtkAdjustment *adjustment)
     * }
     */
    public static MemorySegment gtk_hscrollbar_new(MemorySegment adjustment) {
        var mh$ = gtk_hscrollbar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hscrollbar_new", adjustment);
            }
            return (MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hseparator_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hseparator_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_hseparator_get_type()
     * }
     */
    public static FunctionDescriptor gtk_hseparator_get_type$descriptor() {
        return gtk_hseparator_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_hseparator_get_type()
     * }
     */
    public static MethodHandle gtk_hseparator_get_type$handle() {
        return gtk_hseparator_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_hseparator_get_type()
     * }
     */
    public static long gtk_hseparator_get_type() {
        var mh$ = gtk_hseparator_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hseparator_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hseparator_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hseparator_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hseparator_new()
     * }
     */
    public static FunctionDescriptor gtk_hseparator_new$descriptor() {
        return gtk_hseparator_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hseparator_new()
     * }
     */
    public static MethodHandle gtk_hseparator_new$handle() {
        return gtk_hseparator_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_hseparator_new()
     * }
     */
    public static MemorySegment gtk_hseparator_new() {
        var mh$ = gtk_hseparator_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hseparator_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_image_menu_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_get_type$descriptor() {
        return gtk_image_menu_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_image_menu_item_get_type()
     * }
     */
    public static MethodHandle gtk_image_menu_item_get_type$handle() {
        return gtk_image_menu_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_image_menu_item_get_type()
     * }
     */
    public static long gtk_image_menu_item_get_type() {
        var mh$ = gtk_image_menu_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new()
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_new$descriptor() {
        return gtk_image_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new()
     * }
     */
    public static MethodHandle gtk_image_menu_item_new$handle() {
        return gtk_image_menu_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new()
     * }
     */
    public static MemorySegment gtk_image_menu_item_new() {
        var mh$ = gtk_image_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_new_with_label$descriptor() {
        return gtk_image_menu_item_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MethodHandle gtk_image_menu_item_new_with_label$handle() {
        return gtk_image_menu_item_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_with_label(MemorySegment label) {
        var mh$ = gtk_image_menu_item_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_new_with_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_new_with_mnemonic$descriptor() {
        return gtk_image_menu_item_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MethodHandle gtk_image_menu_item_new_with_mnemonic$handle() {
        return gtk_image_menu_item_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_image_menu_item_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_new_with_mnemonic", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_from_stock(const gchar *stock_id, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_new_from_stock$descriptor() {
        return gtk_image_menu_item_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_from_stock(const gchar *stock_id, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_image_menu_item_new_from_stock$handle() {
        return gtk_image_menu_item_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_new_from_stock(const gchar *stock_id, GtkAccelGroup *accel_group)
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_from_stock(MemorySegment stock_id, MemorySegment accel_group) {
        var mh$ = gtk_image_menu_item_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_new_from_stock", stock_id, accel_group);
            }
            return (MemorySegment)mh$.invokeExact(stock_id, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_set_always_show_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_set_always_show_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_always_show_image(GtkImageMenuItem *image_menu_item, gboolean always_show)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_set_always_show_image$descriptor() {
        return gtk_image_menu_item_set_always_show_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_always_show_image(GtkImageMenuItem *image_menu_item, gboolean always_show)
     * }
     */
    public static MethodHandle gtk_image_menu_item_set_always_show_image$handle() {
        return gtk_image_menu_item_set_always_show_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_always_show_image(GtkImageMenuItem *image_menu_item, gboolean always_show)
     * }
     */
    public static void gtk_image_menu_item_set_always_show_image(MemorySegment image_menu_item, int always_show) {
        var mh$ = gtk_image_menu_item_set_always_show_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_set_always_show_image", image_menu_item, always_show);
            }
            mh$.invokeExact(image_menu_item, always_show);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_get_always_show_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_get_always_show_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_image_menu_item_get_always_show_image(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_get_always_show_image$descriptor() {
        return gtk_image_menu_item_get_always_show_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_image_menu_item_get_always_show_image(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static MethodHandle gtk_image_menu_item_get_always_show_image$handle() {
        return gtk_image_menu_item_get_always_show_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_image_menu_item_get_always_show_image(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static int gtk_image_menu_item_get_always_show_image(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_always_show_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_get_always_show_image", image_menu_item);
            }
            return (int)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_set_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_set_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_image(GtkImageMenuItem *image_menu_item, GtkWidget *image)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_set_image$descriptor() {
        return gtk_image_menu_item_set_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_image(GtkImageMenuItem *image_menu_item, GtkWidget *image)
     * }
     */
    public static MethodHandle gtk_image_menu_item_set_image$handle() {
        return gtk_image_menu_item_set_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_image(GtkImageMenuItem *image_menu_item, GtkWidget *image)
     * }
     */
    public static void gtk_image_menu_item_set_image(MemorySegment image_menu_item, MemorySegment image) {
        var mh$ = gtk_image_menu_item_set_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_set_image", image_menu_item, image);
            }
            mh$.invokeExact(image_menu_item, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_get_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_get_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_get_image(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_get_image$descriptor() {
        return gtk_image_menu_item_get_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_get_image(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static MethodHandle gtk_image_menu_item_get_image$handle() {
        return gtk_image_menu_item_get_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_menu_item_get_image(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static MemorySegment gtk_image_menu_item_get_image(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_get_image", image_menu_item);
            }
            return (MemorySegment)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_set_use_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_set_use_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_use_stock(GtkImageMenuItem *image_menu_item, gboolean use_stock)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_set_use_stock$descriptor() {
        return gtk_image_menu_item_set_use_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_use_stock(GtkImageMenuItem *image_menu_item, gboolean use_stock)
     * }
     */
    public static MethodHandle gtk_image_menu_item_set_use_stock$handle() {
        return gtk_image_menu_item_set_use_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_use_stock(GtkImageMenuItem *image_menu_item, gboolean use_stock)
     * }
     */
    public static void gtk_image_menu_item_set_use_stock(MemorySegment image_menu_item, int use_stock) {
        var mh$ = gtk_image_menu_item_set_use_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_set_use_stock", image_menu_item, use_stock);
            }
            mh$.invokeExact(image_menu_item, use_stock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_get_use_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_get_use_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_image_menu_item_get_use_stock(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_get_use_stock$descriptor() {
        return gtk_image_menu_item_get_use_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_image_menu_item_get_use_stock(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static MethodHandle gtk_image_menu_item_get_use_stock$handle() {
        return gtk_image_menu_item_get_use_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_image_menu_item_get_use_stock(GtkImageMenuItem *image_menu_item)
     * }
     */
    public static int gtk_image_menu_item_get_use_stock(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_use_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_get_use_stock", image_menu_item);
            }
            return (int)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_menu_item_set_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_menu_item_set_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_accel_group(GtkImageMenuItem *image_menu_item, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_image_menu_item_set_accel_group$descriptor() {
        return gtk_image_menu_item_set_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_accel_group(GtkImageMenuItem *image_menu_item, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_image_menu_item_set_accel_group$handle() {
        return gtk_image_menu_item_set_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_menu_item_set_accel_group(GtkImageMenuItem *image_menu_item, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_image_menu_item_set_accel_group(MemorySegment image_menu_item, MemorySegment accel_group) {
        var mh$ = gtk_image_menu_item_set_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_menu_item_set_accel_group", image_menu_item, accel_group);
            }
            mh$.invokeExact(image_menu_item, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_numerable_icon_get_type()
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_get_type$descriptor() {
        return gtk_numerable_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_numerable_icon_get_type()
     * }
     */
    public static MethodHandle gtk_numerable_icon_get_type$handle() {
        return gtk_numerable_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_numerable_icon_get_type()
     * }
     */
    public static long gtk_numerable_icon_get_type() {
        var mh$ = gtk_numerable_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_new(GIcon *base_icon)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_new$descriptor() {
        return gtk_numerable_icon_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_new(GIcon *base_icon)
     * }
     */
    public static MethodHandle gtk_numerable_icon_new$handle() {
        return gtk_numerable_icon_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_new(GIcon *base_icon)
     * }
     */
    public static MemorySegment gtk_numerable_icon_new(MemorySegment base_icon) {
        var mh$ = gtk_numerable_icon_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_new", base_icon);
            }
            return (MemorySegment)mh$.invokeExact(base_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_new_with_style_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_new_with_style_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_new_with_style_context(GIcon *base_icon, GtkStyleContext *context)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_new_with_style_context$descriptor() {
        return gtk_numerable_icon_new_with_style_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_new_with_style_context(GIcon *base_icon, GtkStyleContext *context)
     * }
     */
    public static MethodHandle gtk_numerable_icon_new_with_style_context$handle() {
        return gtk_numerable_icon_new_with_style_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_new_with_style_context(GIcon *base_icon, GtkStyleContext *context)
     * }
     */
    public static MemorySegment gtk_numerable_icon_new_with_style_context(MemorySegment base_icon, MemorySegment context) {
        var mh$ = gtk_numerable_icon_new_with_style_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_new_with_style_context", base_icon, context);
            }
            return (MemorySegment)mh$.invokeExact(base_icon, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_get_style_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_get_style_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_numerable_icon_get_style_context(GtkNumerableIcon *self)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_get_style_context$descriptor() {
        return gtk_numerable_icon_get_style_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_numerable_icon_get_style_context(GtkNumerableIcon *self)
     * }
     */
    public static MethodHandle gtk_numerable_icon_get_style_context$handle() {
        return gtk_numerable_icon_get_style_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_numerable_icon_get_style_context(GtkNumerableIcon *self)
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_style_context(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_style_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_get_style_context", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_set_style_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_set_style_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_style_context(GtkNumerableIcon *self, GtkStyleContext *style)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_set_style_context$descriptor() {
        return gtk_numerable_icon_set_style_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_style_context(GtkNumerableIcon *self, GtkStyleContext *style)
     * }
     */
    public static MethodHandle gtk_numerable_icon_set_style_context$handle() {
        return gtk_numerable_icon_set_style_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_style_context(GtkNumerableIcon *self, GtkStyleContext *style)
     * }
     */
    public static void gtk_numerable_icon_set_style_context(MemorySegment self, MemorySegment style) {
        var mh$ = gtk_numerable_icon_set_style_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_set_style_context", self, style);
            }
            mh$.invokeExact(self, style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_get_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_get_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_numerable_icon_get_count(GtkNumerableIcon *self)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_get_count$descriptor() {
        return gtk_numerable_icon_get_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_numerable_icon_get_count(GtkNumerableIcon *self)
     * }
     */
    public static MethodHandle gtk_numerable_icon_get_count$handle() {
        return gtk_numerable_icon_get_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_numerable_icon_get_count(GtkNumerableIcon *self)
     * }
     */
    public static int gtk_numerable_icon_get_count(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_get_count", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_set_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_set_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_count(GtkNumerableIcon *self, gint count)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_set_count$descriptor() {
        return gtk_numerable_icon_set_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_count(GtkNumerableIcon *self, gint count)
     * }
     */
    public static MethodHandle gtk_numerable_icon_set_count$handle() {
        return gtk_numerable_icon_set_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_count(GtkNumerableIcon *self, gint count)
     * }
     */
    public static void gtk_numerable_icon_set_count(MemorySegment self, int count) {
        var mh$ = gtk_numerable_icon_set_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_set_count", self, count);
            }
            mh$.invokeExact(self, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_numerable_icon_get_label(GtkNumerableIcon *self)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_get_label$descriptor() {
        return gtk_numerable_icon_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_numerable_icon_get_label(GtkNumerableIcon *self)
     * }
     */
    public static MethodHandle gtk_numerable_icon_get_label$handle() {
        return gtk_numerable_icon_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_numerable_icon_get_label(GtkNumerableIcon *self)
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_label(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_get_label", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_label(GtkNumerableIcon *self, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_set_label$descriptor() {
        return gtk_numerable_icon_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_label(GtkNumerableIcon *self, const gchar *label)
     * }
     */
    public static MethodHandle gtk_numerable_icon_set_label$handle() {
        return gtk_numerable_icon_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_label(GtkNumerableIcon *self, const gchar *label)
     * }
     */
    public static void gtk_numerable_icon_set_label(MemorySegment self, MemorySegment label) {
        var mh$ = gtk_numerable_icon_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_set_label", self, label);
            }
            mh$.invokeExact(self, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_set_background_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_set_background_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_background_gicon(GtkNumerableIcon *self, GIcon *icon)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_set_background_gicon$descriptor() {
        return gtk_numerable_icon_set_background_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_background_gicon(GtkNumerableIcon *self, GIcon *icon)
     * }
     */
    public static MethodHandle gtk_numerable_icon_set_background_gicon$handle() {
        return gtk_numerable_icon_set_background_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_background_gicon(GtkNumerableIcon *self, GIcon *icon)
     * }
     */
    public static void gtk_numerable_icon_set_background_gicon(MemorySegment self, MemorySegment icon) {
        var mh$ = gtk_numerable_icon_set_background_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_set_background_gicon", self, icon);
            }
            mh$.invokeExact(self, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_get_background_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_get_background_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_get_background_gicon(GtkNumerableIcon *self)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_get_background_gicon$descriptor() {
        return gtk_numerable_icon_get_background_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_get_background_gicon(GtkNumerableIcon *self)
     * }
     */
    public static MethodHandle gtk_numerable_icon_get_background_gicon$handle() {
        return gtk_numerable_icon_get_background_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *gtk_numerable_icon_get_background_gicon(GtkNumerableIcon *self)
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_background_gicon(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_background_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_get_background_gicon", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_set_background_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_set_background_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon *self, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_set_background_icon_name$descriptor() {
        return gtk_numerable_icon_set_background_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon *self, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_numerable_icon_set_background_icon_name$handle() {
        return gtk_numerable_icon_set_background_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon *self, const gchar *icon_name)
     * }
     */
    public static void gtk_numerable_icon_set_background_icon_name(MemorySegment self, MemorySegment icon_name) {
        var mh$ = gtk_numerable_icon_set_background_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_set_background_icon_name", self, icon_name);
            }
            mh$.invokeExact(self, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_numerable_icon_get_background_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_numerable_icon_get_background_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon *self)
     * }
     */
    public static FunctionDescriptor gtk_numerable_icon_get_background_icon_name$descriptor() {
        return gtk_numerable_icon_get_background_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon *self)
     * }
     */
    public static MethodHandle gtk_numerable_icon_get_background_icon_name$handle() {
        return gtk_numerable_icon_get_background_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon *self)
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_background_icon_name(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_background_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_numerable_icon_get_background_icon_name", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_toggle_action_get_type()
     * }
     */
    public static FunctionDescriptor gtk_toggle_action_get_type$descriptor() {
        return gtk_toggle_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_toggle_action_get_type()
     * }
     */
    public static MethodHandle gtk_toggle_action_get_type$handle() {
        return gtk_toggle_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_toggle_action_get_type()
     * }
     */
    public static long gtk_toggle_action_get_type() {
        var mh$ = gtk_toggle_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_action_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_action_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkToggleAction *gtk_toggle_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_toggle_action_new$descriptor() {
        return gtk_toggle_action_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkToggleAction *gtk_toggle_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_toggle_action_new$handle() {
        return gtk_toggle_action_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkToggleAction *gtk_toggle_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_toggle_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_toggle_action_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_action_new", name, label, tooltip, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_action_toggled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_action_toggled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_action_toggled(GtkToggleAction *action)
     * }
     */
    public static FunctionDescriptor gtk_toggle_action_toggled$descriptor() {
        return gtk_toggle_action_toggled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_action_toggled(GtkToggleAction *action)
     * }
     */
    public static MethodHandle gtk_toggle_action_toggled$handle() {
        return gtk_toggle_action_toggled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_action_toggled(GtkToggleAction *action)
     * }
     */
    public static void gtk_toggle_action_toggled(MemorySegment action) {
        var mh$ = gtk_toggle_action_toggled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_action_toggled", action);
            }
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_action_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_action_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_action_set_active(GtkToggleAction *action, gboolean is_active)
     * }
     */
    public static FunctionDescriptor gtk_toggle_action_set_active$descriptor() {
        return gtk_toggle_action_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_action_set_active(GtkToggleAction *action, gboolean is_active)
     * }
     */
    public static MethodHandle gtk_toggle_action_set_active$handle() {
        return gtk_toggle_action_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_action_set_active(GtkToggleAction *action, gboolean is_active)
     * }
     */
    public static void gtk_toggle_action_set_active(MemorySegment action, int is_active) {
        var mh$ = gtk_toggle_action_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_action_set_active", action, is_active);
            }
            mh$.invokeExact(action, is_active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_action_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_action_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_action_get_active(GtkToggleAction *action)
     * }
     */
    public static FunctionDescriptor gtk_toggle_action_get_active$descriptor() {
        return gtk_toggle_action_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_action_get_active(GtkToggleAction *action)
     * }
     */
    public static MethodHandle gtk_toggle_action_get_active$handle() {
        return gtk_toggle_action_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_action_get_active(GtkToggleAction *action)
     * }
     */
    public static int gtk_toggle_action_get_active(MemorySegment action) {
        var mh$ = gtk_toggle_action_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_action_get_active", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_action_set_draw_as_radio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_action_set_draw_as_radio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_action_set_draw_as_radio(GtkToggleAction *action, gboolean draw_as_radio)
     * }
     */
    public static FunctionDescriptor gtk_toggle_action_set_draw_as_radio$descriptor() {
        return gtk_toggle_action_set_draw_as_radio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_action_set_draw_as_radio(GtkToggleAction *action, gboolean draw_as_radio)
     * }
     */
    public static MethodHandle gtk_toggle_action_set_draw_as_radio$handle() {
        return gtk_toggle_action_set_draw_as_radio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_action_set_draw_as_radio(GtkToggleAction *action, gboolean draw_as_radio)
     * }
     */
    public static void gtk_toggle_action_set_draw_as_radio(MemorySegment action, int draw_as_radio) {
        var mh$ = gtk_toggle_action_set_draw_as_radio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_action_set_draw_as_radio", action, draw_as_radio);
            }
            mh$.invokeExact(action, draw_as_radio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_action_get_draw_as_radio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_action_get_draw_as_radio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_action_get_draw_as_radio(GtkToggleAction *action)
     * }
     */
    public static FunctionDescriptor gtk_toggle_action_get_draw_as_radio$descriptor() {
        return gtk_toggle_action_get_draw_as_radio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_action_get_draw_as_radio(GtkToggleAction *action)
     * }
     */
    public static MethodHandle gtk_toggle_action_get_draw_as_radio$handle() {
        return gtk_toggle_action_get_draw_as_radio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_action_get_draw_as_radio(GtkToggleAction *action)
     * }
     */
    public static int gtk_toggle_action_get_draw_as_radio(MemorySegment action) {
        var mh$ = gtk_toggle_action_get_draw_as_radio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_action_get_draw_as_radio", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_toggle_action_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_toggle_action_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_toggle_action_set_active(GtkToggleAction *toggle_action, gboolean is_active)
     * }
     */
    public static FunctionDescriptor _gtk_toggle_action_set_active$descriptor() {
        return _gtk_toggle_action_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_toggle_action_set_active(GtkToggleAction *toggle_action, gboolean is_active)
     * }
     */
    public static MethodHandle _gtk_toggle_action_set_active$handle() {
        return _gtk_toggle_action_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_toggle_action_set_active(GtkToggleAction *toggle_action, gboolean is_active)
     * }
     */
    public static void _gtk_toggle_action_set_active(MemorySegment toggle_action, int is_active) {
        var mh$ = _gtk_toggle_action_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_toggle_action_set_active", toggle_action, is_active);
            }
            mh$.invokeExact(toggle_action, is_active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_radio_action_get_type()
     * }
     */
    public static FunctionDescriptor gtk_radio_action_get_type$descriptor() {
        return gtk_radio_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_radio_action_get_type()
     * }
     */
    public static MethodHandle gtk_radio_action_get_type$handle() {
        return gtk_radio_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_radio_action_get_type()
     * }
     */
    public static long gtk_radio_action_get_type() {
        var mh$ = gtk_radio_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_action_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_action_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRadioAction *gtk_radio_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, gint value)
     * }
     */
    public static FunctionDescriptor gtk_radio_action_new$descriptor() {
        return gtk_radio_action_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRadioAction *gtk_radio_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, gint value)
     * }
     */
    public static MethodHandle gtk_radio_action_new$handle() {
        return gtk_radio_action_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRadioAction *gtk_radio_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, gint value)
     * }
     */
    public static MemorySegment gtk_radio_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id, int value) {
        var mh$ = gtk_radio_action_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_action_new", name, label, tooltip, stock_id, value);
            }
            return (MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_action_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_action_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_action_get_group(GtkRadioAction *action)
     * }
     */
    public static FunctionDescriptor gtk_radio_action_get_group$descriptor() {
        return gtk_radio_action_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_radio_action_get_group(GtkRadioAction *action)
     * }
     */
    public static MethodHandle gtk_radio_action_get_group$handle() {
        return gtk_radio_action_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_radio_action_get_group(GtkRadioAction *action)
     * }
     */
    public static MemorySegment gtk_radio_action_get_group(MemorySegment action) {
        var mh$ = gtk_radio_action_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_action_get_group", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_action_set_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_action_set_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_action_set_group(GtkRadioAction *action, GSList *group)
     * }
     */
    public static FunctionDescriptor gtk_radio_action_set_group$descriptor() {
        return gtk_radio_action_set_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_action_set_group(GtkRadioAction *action, GSList *group)
     * }
     */
    public static MethodHandle gtk_radio_action_set_group$handle() {
        return gtk_radio_action_set_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_action_set_group(GtkRadioAction *action, GSList *group)
     * }
     */
    public static void gtk_radio_action_set_group(MemorySegment action, MemorySegment group) {
        var mh$ = gtk_radio_action_set_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_action_set_group", action, group);
            }
            mh$.invokeExact(action, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_action_join_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_action_join_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_action_join_group(GtkRadioAction *action, GtkRadioAction *group_source)
     * }
     */
    public static FunctionDescriptor gtk_radio_action_join_group$descriptor() {
        return gtk_radio_action_join_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_action_join_group(GtkRadioAction *action, GtkRadioAction *group_source)
     * }
     */
    public static MethodHandle gtk_radio_action_join_group$handle() {
        return gtk_radio_action_join_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_action_join_group(GtkRadioAction *action, GtkRadioAction *group_source)
     * }
     */
    public static void gtk_radio_action_join_group(MemorySegment action, MemorySegment group_source) {
        var mh$ = gtk_radio_action_join_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_action_join_group", action, group_source);
            }
            mh$.invokeExact(action, group_source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_action_get_current_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_action_get_current_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_radio_action_get_current_value(GtkRadioAction *action)
     * }
     */
    public static FunctionDescriptor gtk_radio_action_get_current_value$descriptor() {
        return gtk_radio_action_get_current_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_radio_action_get_current_value(GtkRadioAction *action)
     * }
     */
    public static MethodHandle gtk_radio_action_get_current_value$handle() {
        return gtk_radio_action_get_current_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_radio_action_get_current_value(GtkRadioAction *action)
     * }
     */
    public static int gtk_radio_action_get_current_value(MemorySegment action) {
        var mh$ = gtk_radio_action_get_current_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_action_get_current_value", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_radio_action_set_current_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_radio_action_set_current_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_radio_action_set_current_value(GtkRadioAction *action, gint current_value)
     * }
     */
    public static FunctionDescriptor gtk_radio_action_set_current_value$descriptor() {
        return gtk_radio_action_set_current_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_radio_action_set_current_value(GtkRadioAction *action, gint current_value)
     * }
     */
    public static MethodHandle gtk_radio_action_set_current_value$handle() {
        return gtk_radio_action_set_current_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_radio_action_set_current_value(GtkRadioAction *action, gint current_value)
     * }
     */
    public static void gtk_radio_action_set_current_value(MemorySegment action, int current_value) {
        var mh$ = gtk_radio_action_set_current_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_radio_action_set_current_value", action, current_value);
            }
            mh$.invokeExact(action, current_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_RC_FG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_FG = 1
     * }
     */
    public static int GTK_RC_FG() {
        return GTK_RC_FG;
    }
    private static final int GTK_RC_BG = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_BG = 2
     * }
     */
    public static int GTK_RC_BG() {
        return GTK_RC_BG;
    }
    private static final int GTK_RC_TEXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TEXT = 4
     * }
     */
    public static int GTK_RC_TEXT() {
        return GTK_RC_TEXT;
    }
    private static final int GTK_RC_BASE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_BASE = 8
     * }
     */
    public static int GTK_RC_BASE() {
        return GTK_RC_BASE;
    }

    private static class _gtk_rc_parse_widget_class_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_rc_parse_widget_class_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GSList *_gtk_rc_parse_widget_class_path(const gchar *pattern)
     * }
     */
    public static FunctionDescriptor _gtk_rc_parse_widget_class_path$descriptor() {
        return _gtk_rc_parse_widget_class_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GSList *_gtk_rc_parse_widget_class_path(const gchar *pattern)
     * }
     */
    public static MethodHandle _gtk_rc_parse_widget_class_path$handle() {
        return _gtk_rc_parse_widget_class_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * GSList *_gtk_rc_parse_widget_class_path(const gchar *pattern)
     * }
     */
    public static MemorySegment _gtk_rc_parse_widget_class_path(MemorySegment pattern) {
        var mh$ = _gtk_rc_parse_widget_class_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_rc_parse_widget_class_path", pattern);
            }
            return (MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_rc_free_widget_class_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_rc_free_widget_class_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_rc_free_widget_class_path(GSList *list)
     * }
     */
    public static FunctionDescriptor _gtk_rc_free_widget_class_path$descriptor() {
        return _gtk_rc_free_widget_class_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_rc_free_widget_class_path(GSList *list)
     * }
     */
    public static MethodHandle _gtk_rc_free_widget_class_path$handle() {
        return _gtk_rc_free_widget_class_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_rc_free_widget_class_path(GSList *list)
     * }
     */
    public static void _gtk_rc_free_widget_class_path(MemorySegment list) {
        var mh$ = _gtk_rc_free_widget_class_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_rc_free_widget_class_path", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_rc_match_widget_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_rc_match_widget_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gboolean _gtk_rc_match_widget_class(GSList *list, gint length, gchar *path, gchar *path_reversed)
     * }
     */
    public static FunctionDescriptor _gtk_rc_match_widget_class$descriptor() {
        return _gtk_rc_match_widget_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gboolean _gtk_rc_match_widget_class(GSList *list, gint length, gchar *path, gchar *path_reversed)
     * }
     */
    public static MethodHandle _gtk_rc_match_widget_class$handle() {
        return _gtk_rc_match_widget_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gboolean _gtk_rc_match_widget_class(GSList *list, gint length, gchar *path, gchar *path_reversed)
     * }
     */
    public static int _gtk_rc_match_widget_class(MemorySegment list, int length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = _gtk_rc_match_widget_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_rc_match_widget_class", list, length, path, path_reversed);
            }
            return (int)mh$.invokeExact(list, length, path, path_reversed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_add_default_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_add_default_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_rc_add_default_file(const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_rc_add_default_file$descriptor() {
        return gtk_rc_add_default_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_rc_add_default_file(const gchar *filename)
     * }
     */
    public static MethodHandle gtk_rc_add_default_file$handle() {
        return gtk_rc_add_default_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_rc_add_default_file(const gchar *filename)
     * }
     */
    public static void gtk_rc_add_default_file(MemorySegment filename) {
        var mh$ = gtk_rc_add_default_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_add_default_file", filename);
            }
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_set_default_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_set_default_files"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_rc_set_default_files(gchar **filenames)
     * }
     */
    public static FunctionDescriptor gtk_rc_set_default_files$descriptor() {
        return gtk_rc_set_default_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_rc_set_default_files(gchar **filenames)
     * }
     */
    public static MethodHandle gtk_rc_set_default_files$handle() {
        return gtk_rc_set_default_files.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_rc_set_default_files(gchar **filenames)
     * }
     */
    public static void gtk_rc_set_default_files(MemorySegment filenames) {
        var mh$ = gtk_rc_set_default_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_set_default_files", filenames);
            }
            mh$.invokeExact(filenames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_get_default_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_get_default_files"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_rc_get_default_files()
     * }
     */
    public static FunctionDescriptor gtk_rc_get_default_files$descriptor() {
        return gtk_rc_get_default_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_rc_get_default_files()
     * }
     */
    public static MethodHandle gtk_rc_get_default_files$handle() {
        return gtk_rc_get_default_files.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_rc_get_default_files()
     * }
     */
    public static MemorySegment gtk_rc_get_default_files() {
        var mh$ = gtk_rc_get_default_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_get_default_files");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_get_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_get_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_rc_get_style(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_rc_get_style$descriptor() {
        return gtk_rc_get_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_rc_get_style(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_rc_get_style$handle() {
        return gtk_rc_get_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyle *gtk_rc_get_style(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_rc_get_style(MemorySegment widget) {
        var mh$ = gtk_rc_get_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_get_style", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_get_style_by_paths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_get_style_by_paths"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_rc_get_style_by_paths(GtkSettings *settings, const char *widget_path, const char *class_path, GType type)
     * }
     */
    public static FunctionDescriptor gtk_rc_get_style_by_paths$descriptor() {
        return gtk_rc_get_style_by_paths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_rc_get_style_by_paths(GtkSettings *settings, const char *widget_path, const char *class_path, GType type)
     * }
     */
    public static MethodHandle gtk_rc_get_style_by_paths$handle() {
        return gtk_rc_get_style_by_paths.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyle *gtk_rc_get_style_by_paths(GtkSettings *settings, const char *widget_path, const char *class_path, GType type)
     * }
     */
    public static MemorySegment gtk_rc_get_style_by_paths(MemorySegment settings, MemorySegment widget_path, MemorySegment class_path, long type) {
        var mh$ = gtk_rc_get_style_by_paths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_get_style_by_paths", settings, widget_path, class_path, type);
            }
            return (MemorySegment)mh$.invokeExact(settings, widget_path, class_path, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_reparse_all_for_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_reparse_all_for_settings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_reparse_all_for_settings(GtkSettings *settings, gboolean force_load)
     * }
     */
    public static FunctionDescriptor gtk_rc_reparse_all_for_settings$descriptor() {
        return gtk_rc_reparse_all_for_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_reparse_all_for_settings(GtkSettings *settings, gboolean force_load)
     * }
     */
    public static MethodHandle gtk_rc_reparse_all_for_settings$handle() {
        return gtk_rc_reparse_all_for_settings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_rc_reparse_all_for_settings(GtkSettings *settings, gboolean force_load)
     * }
     */
    public static int gtk_rc_reparse_all_for_settings(MemorySegment settings, int force_load) {
        var mh$ = gtk_rc_reparse_all_for_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_reparse_all_for_settings", settings, force_load);
            }
            return (int)mh$.invokeExact(settings, force_load);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_reset_styles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_reset_styles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_rc_reset_styles(GtkSettings *settings)
     * }
     */
    public static FunctionDescriptor gtk_rc_reset_styles$descriptor() {
        return gtk_rc_reset_styles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_rc_reset_styles(GtkSettings *settings)
     * }
     */
    public static MethodHandle gtk_rc_reset_styles$handle() {
        return gtk_rc_reset_styles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_rc_reset_styles(GtkSettings *settings)
     * }
     */
    public static void gtk_rc_reset_styles(MemorySegment settings) {
        var mh$ = gtk_rc_reset_styles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_reset_styles", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_find_pixmap_in_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_find_pixmap_in_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_find_pixmap_in_path(GtkSettings *settings, GScanner *scanner, const gchar *pixmap_file)
     * }
     */
    public static FunctionDescriptor gtk_rc_find_pixmap_in_path$descriptor() {
        return gtk_rc_find_pixmap_in_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_find_pixmap_in_path(GtkSettings *settings, GScanner *scanner, const gchar *pixmap_file)
     * }
     */
    public static MethodHandle gtk_rc_find_pixmap_in_path$handle() {
        return gtk_rc_find_pixmap_in_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_rc_find_pixmap_in_path(GtkSettings *settings, GScanner *scanner, const gchar *pixmap_file)
     * }
     */
    public static MemorySegment gtk_rc_find_pixmap_in_path(MemorySegment settings, MemorySegment scanner, MemorySegment pixmap_file) {
        var mh$ = gtk_rc_find_pixmap_in_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_find_pixmap_in_path", settings, scanner, pixmap_file);
            }
            return (MemorySegment)mh$.invokeExact(settings, scanner, pixmap_file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_rc_parse(const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_rc_parse$descriptor() {
        return gtk_rc_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_rc_parse(const gchar *filename)
     * }
     */
    public static MethodHandle gtk_rc_parse$handle() {
        return gtk_rc_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_rc_parse(const gchar *filename)
     * }
     */
    public static void gtk_rc_parse(MemorySegment filename) {
        var mh$ = gtk_rc_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_parse", filename);
            }
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_parse_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_parse_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_rc_parse_string(const gchar *rc_string)
     * }
     */
    public static FunctionDescriptor gtk_rc_parse_string$descriptor() {
        return gtk_rc_parse_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_rc_parse_string(const gchar *rc_string)
     * }
     */
    public static MethodHandle gtk_rc_parse_string$handle() {
        return gtk_rc_parse_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_rc_parse_string(const gchar *rc_string)
     * }
     */
    public static void gtk_rc_parse_string(MemorySegment rc_string) {
        var mh$ = gtk_rc_parse_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_parse_string", rc_string);
            }
            mh$.invokeExact(rc_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_reparse_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_reparse_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_reparse_all()
     * }
     */
    public static FunctionDescriptor gtk_rc_reparse_all$descriptor() {
        return gtk_rc_reparse_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_rc_reparse_all()
     * }
     */
    public static MethodHandle gtk_rc_reparse_all$handle() {
        return gtk_rc_reparse_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_rc_reparse_all()
     * }
     */
    public static int gtk_rc_reparse_all() {
        var mh$ = gtk_rc_reparse_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_reparse_all");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_rc_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_rc_style_get_type$descriptor() {
        return gtk_rc_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_rc_style_get_type()
     * }
     */
    public static MethodHandle gtk_rc_style_get_type$handle() {
        return gtk_rc_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_rc_style_get_type()
     * }
     */
    public static long gtk_rc_style_get_type() {
        var mh$ = gtk_rc_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_style_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_style_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_rc_style_new()
     * }
     */
    public static FunctionDescriptor gtk_rc_style_new$descriptor() {
        return gtk_rc_style_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_rc_style_new()
     * }
     */
    public static MethodHandle gtk_rc_style_new$handle() {
        return gtk_rc_style_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_rc_style_new()
     * }
     */
    public static MemorySegment gtk_rc_style_new() {
        var mh$ = gtk_rc_style_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_style_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_style_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_style_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_rc_style_copy(GtkRcStyle *orig)
     * }
     */
    public static FunctionDescriptor gtk_rc_style_copy$descriptor() {
        return gtk_rc_style_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_rc_style_copy(GtkRcStyle *orig)
     * }
     */
    public static MethodHandle gtk_rc_style_copy$handle() {
        return gtk_rc_style_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_rc_style_copy(GtkRcStyle *orig)
     * }
     */
    public static MemorySegment gtk_rc_style_copy(MemorySegment orig) {
        var mh$ = gtk_rc_style_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_style_copy", orig);
            }
            return (MemorySegment)mh$.invokeExact(orig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_find_module_in_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_find_module_in_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_find_module_in_path(const gchar *module_file)
     * }
     */
    public static FunctionDescriptor gtk_rc_find_module_in_path$descriptor() {
        return gtk_rc_find_module_in_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_find_module_in_path(const gchar *module_file)
     * }
     */
    public static MethodHandle gtk_rc_find_module_in_path$handle() {
        return gtk_rc_find_module_in_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_rc_find_module_in_path(const gchar *module_file)
     * }
     */
    public static MemorySegment gtk_rc_find_module_in_path(MemorySegment module_file) {
        var mh$ = gtk_rc_find_module_in_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_find_module_in_path", module_file);
            }
            return (MemorySegment)mh$.invokeExact(module_file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_get_theme_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_get_theme_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_theme_dir()
     * }
     */
    public static FunctionDescriptor gtk_rc_get_theme_dir$descriptor() {
        return gtk_rc_get_theme_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_theme_dir()
     * }
     */
    public static MethodHandle gtk_rc_get_theme_dir$handle() {
        return gtk_rc_get_theme_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_theme_dir()
     * }
     */
    public static MemorySegment gtk_rc_get_theme_dir() {
        var mh$ = gtk_rc_get_theme_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_get_theme_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_get_module_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_get_module_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_module_dir()
     * }
     */
    public static FunctionDescriptor gtk_rc_get_module_dir$descriptor() {
        return gtk_rc_get_module_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_module_dir()
     * }
     */
    public static MethodHandle gtk_rc_get_module_dir$handle() {
        return gtk_rc_get_module_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_module_dir()
     * }
     */
    public static MemorySegment gtk_rc_get_module_dir() {
        var mh$ = gtk_rc_get_module_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_get_module_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_get_im_module_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_get_im_module_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_im_module_path()
     * }
     */
    public static FunctionDescriptor gtk_rc_get_im_module_path$descriptor() {
        return gtk_rc_get_im_module_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_im_module_path()
     * }
     */
    public static MethodHandle gtk_rc_get_im_module_path$handle() {
        return gtk_rc_get_im_module_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_im_module_path()
     * }
     */
    public static MemorySegment gtk_rc_get_im_module_path() {
        var mh$ = gtk_rc_get_im_module_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_get_im_module_path");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_get_im_module_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_get_im_module_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_im_module_file()
     * }
     */
    public static FunctionDescriptor gtk_rc_get_im_module_file$descriptor() {
        return gtk_rc_get_im_module_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_im_module_file()
     * }
     */
    public static MethodHandle gtk_rc_get_im_module_file$handle() {
        return gtk_rc_get_im_module_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_rc_get_im_module_file()
     * }
     */
    public static MemorySegment gtk_rc_get_im_module_file() {
        var mh$ = gtk_rc_get_im_module_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_get_im_module_file");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_RC_TOKEN_INVALID = (int)270L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_INVALID = 270
     * }
     */
    public static int GTK_RC_TOKEN_INVALID() {
        return GTK_RC_TOKEN_INVALID;
    }
    private static final int GTK_RC_TOKEN_INCLUDE = (int)271L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_INCLUDE = 271
     * }
     */
    public static int GTK_RC_TOKEN_INCLUDE() {
        return GTK_RC_TOKEN_INCLUDE;
    }
    private static final int GTK_RC_TOKEN_NORMAL = (int)272L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_NORMAL = 272
     * }
     */
    public static int GTK_RC_TOKEN_NORMAL() {
        return GTK_RC_TOKEN_NORMAL;
    }
    private static final int GTK_RC_TOKEN_ACTIVE = (int)273L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_ACTIVE = 273
     * }
     */
    public static int GTK_RC_TOKEN_ACTIVE() {
        return GTK_RC_TOKEN_ACTIVE;
    }
    private static final int GTK_RC_TOKEN_PRELIGHT = (int)274L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_PRELIGHT = 274
     * }
     */
    public static int GTK_RC_TOKEN_PRELIGHT() {
        return GTK_RC_TOKEN_PRELIGHT;
    }
    private static final int GTK_RC_TOKEN_SELECTED = (int)275L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_SELECTED = 275
     * }
     */
    public static int GTK_RC_TOKEN_SELECTED() {
        return GTK_RC_TOKEN_SELECTED;
    }
    private static final int GTK_RC_TOKEN_INSENSITIVE = (int)276L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_INSENSITIVE = 276
     * }
     */
    public static int GTK_RC_TOKEN_INSENSITIVE() {
        return GTK_RC_TOKEN_INSENSITIVE;
    }
    private static final int GTK_RC_TOKEN_FG = (int)277L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_FG = 277
     * }
     */
    public static int GTK_RC_TOKEN_FG() {
        return GTK_RC_TOKEN_FG;
    }
    private static final int GTK_RC_TOKEN_BG = (int)278L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_BG = 278
     * }
     */
    public static int GTK_RC_TOKEN_BG() {
        return GTK_RC_TOKEN_BG;
    }
    private static final int GTK_RC_TOKEN_TEXT = (int)279L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_TEXT = 279
     * }
     */
    public static int GTK_RC_TOKEN_TEXT() {
        return GTK_RC_TOKEN_TEXT;
    }
    private static final int GTK_RC_TOKEN_BASE = (int)280L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_BASE = 280
     * }
     */
    public static int GTK_RC_TOKEN_BASE() {
        return GTK_RC_TOKEN_BASE;
    }
    private static final int GTK_RC_TOKEN_XTHICKNESS = (int)281L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_XTHICKNESS = 281
     * }
     */
    public static int GTK_RC_TOKEN_XTHICKNESS() {
        return GTK_RC_TOKEN_XTHICKNESS;
    }
    private static final int GTK_RC_TOKEN_YTHICKNESS = (int)282L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_YTHICKNESS = 282
     * }
     */
    public static int GTK_RC_TOKEN_YTHICKNESS() {
        return GTK_RC_TOKEN_YTHICKNESS;
    }
    private static final int GTK_RC_TOKEN_FONT = (int)283L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_FONT = 283
     * }
     */
    public static int GTK_RC_TOKEN_FONT() {
        return GTK_RC_TOKEN_FONT;
    }
    private static final int GTK_RC_TOKEN_FONTSET = (int)284L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_FONTSET = 284
     * }
     */
    public static int GTK_RC_TOKEN_FONTSET() {
        return GTK_RC_TOKEN_FONTSET;
    }
    private static final int GTK_RC_TOKEN_FONT_NAME = (int)285L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_FONT_NAME = 285
     * }
     */
    public static int GTK_RC_TOKEN_FONT_NAME() {
        return GTK_RC_TOKEN_FONT_NAME;
    }
    private static final int GTK_RC_TOKEN_BG_PIXMAP = (int)286L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_BG_PIXMAP = 286
     * }
     */
    public static int GTK_RC_TOKEN_BG_PIXMAP() {
        return GTK_RC_TOKEN_BG_PIXMAP;
    }
    private static final int GTK_RC_TOKEN_PIXMAP_PATH = (int)287L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_PIXMAP_PATH = 287
     * }
     */
    public static int GTK_RC_TOKEN_PIXMAP_PATH() {
        return GTK_RC_TOKEN_PIXMAP_PATH;
    }
    private static final int GTK_RC_TOKEN_STYLE = (int)288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_STYLE = 288
     * }
     */
    public static int GTK_RC_TOKEN_STYLE() {
        return GTK_RC_TOKEN_STYLE;
    }
    private static final int GTK_RC_TOKEN_BINDING = (int)289L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_BINDING = 289
     * }
     */
    public static int GTK_RC_TOKEN_BINDING() {
        return GTK_RC_TOKEN_BINDING;
    }
    private static final int GTK_RC_TOKEN_BIND = (int)290L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_BIND = 290
     * }
     */
    public static int GTK_RC_TOKEN_BIND() {
        return GTK_RC_TOKEN_BIND;
    }
    private static final int GTK_RC_TOKEN_WIDGET = (int)291L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_WIDGET = 291
     * }
     */
    public static int GTK_RC_TOKEN_WIDGET() {
        return GTK_RC_TOKEN_WIDGET;
    }
    private static final int GTK_RC_TOKEN_WIDGET_CLASS = (int)292L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_WIDGET_CLASS = 292
     * }
     */
    public static int GTK_RC_TOKEN_WIDGET_CLASS() {
        return GTK_RC_TOKEN_WIDGET_CLASS;
    }
    private static final int GTK_RC_TOKEN_CLASS = (int)293L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_CLASS = 293
     * }
     */
    public static int GTK_RC_TOKEN_CLASS() {
        return GTK_RC_TOKEN_CLASS;
    }
    private static final int GTK_RC_TOKEN_LOWEST = (int)294L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_LOWEST = 294
     * }
     */
    public static int GTK_RC_TOKEN_LOWEST() {
        return GTK_RC_TOKEN_LOWEST;
    }
    private static final int GTK_RC_TOKEN_GTK = (int)295L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_GTK = 295
     * }
     */
    public static int GTK_RC_TOKEN_GTK() {
        return GTK_RC_TOKEN_GTK;
    }
    private static final int GTK_RC_TOKEN_APPLICATION = (int)296L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_APPLICATION = 296
     * }
     */
    public static int GTK_RC_TOKEN_APPLICATION() {
        return GTK_RC_TOKEN_APPLICATION;
    }
    private static final int GTK_RC_TOKEN_THEME = (int)297L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_THEME = 297
     * }
     */
    public static int GTK_RC_TOKEN_THEME() {
        return GTK_RC_TOKEN_THEME;
    }
    private static final int GTK_RC_TOKEN_RC = (int)298L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_RC = 298
     * }
     */
    public static int GTK_RC_TOKEN_RC() {
        return GTK_RC_TOKEN_RC;
    }
    private static final int GTK_RC_TOKEN_HIGHEST = (int)299L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_HIGHEST = 299
     * }
     */
    public static int GTK_RC_TOKEN_HIGHEST() {
        return GTK_RC_TOKEN_HIGHEST;
    }
    private static final int GTK_RC_TOKEN_ENGINE = (int)300L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_ENGINE = 300
     * }
     */
    public static int GTK_RC_TOKEN_ENGINE() {
        return GTK_RC_TOKEN_ENGINE;
    }
    private static final int GTK_RC_TOKEN_MODULE_PATH = (int)301L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_MODULE_PATH = 301
     * }
     */
    public static int GTK_RC_TOKEN_MODULE_PATH() {
        return GTK_RC_TOKEN_MODULE_PATH;
    }
    private static final int GTK_RC_TOKEN_IM_MODULE_PATH = (int)302L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_IM_MODULE_PATH = 302
     * }
     */
    public static int GTK_RC_TOKEN_IM_MODULE_PATH() {
        return GTK_RC_TOKEN_IM_MODULE_PATH;
    }
    private static final int GTK_RC_TOKEN_IM_MODULE_FILE = (int)303L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_IM_MODULE_FILE = 303
     * }
     */
    public static int GTK_RC_TOKEN_IM_MODULE_FILE() {
        return GTK_RC_TOKEN_IM_MODULE_FILE;
    }
    private static final int GTK_RC_TOKEN_STOCK = (int)304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_STOCK = 304
     * }
     */
    public static int GTK_RC_TOKEN_STOCK() {
        return GTK_RC_TOKEN_STOCK;
    }
    private static final int GTK_RC_TOKEN_LTR = (int)305L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_LTR = 305
     * }
     */
    public static int GTK_RC_TOKEN_LTR() {
        return GTK_RC_TOKEN_LTR;
    }
    private static final int GTK_RC_TOKEN_RTL = (int)306L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_RTL = 306
     * }
     */
    public static int GTK_RC_TOKEN_RTL() {
        return GTK_RC_TOKEN_RTL;
    }
    private static final int GTK_RC_TOKEN_COLOR = (int)307L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_COLOR = 307
     * }
     */
    public static int GTK_RC_TOKEN_COLOR() {
        return GTK_RC_TOKEN_COLOR;
    }
    private static final int GTK_RC_TOKEN_UNBIND = (int)308L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_UNBIND = 308
     * }
     */
    public static int GTK_RC_TOKEN_UNBIND() {
        return GTK_RC_TOKEN_UNBIND;
    }
    private static final int GTK_RC_TOKEN_LAST = (int)309L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RC_TOKEN_LAST = 309
     * }
     */
    public static int GTK_RC_TOKEN_LAST() {
        return GTK_RC_TOKEN_LAST;
    }
    private static final int GTK_PATH_PRIO_LOWEST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_PRIO_LOWEST = 0
     * }
     */
    public static int GTK_PATH_PRIO_LOWEST() {
        return GTK_PATH_PRIO_LOWEST;
    }
    private static final int GTK_PATH_PRIO_GTK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_PRIO_GTK = 4
     * }
     */
    public static int GTK_PATH_PRIO_GTK() {
        return GTK_PATH_PRIO_GTK;
    }
    private static final int GTK_PATH_PRIO_APPLICATION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_PRIO_APPLICATION = 8
     * }
     */
    public static int GTK_PATH_PRIO_APPLICATION() {
        return GTK_PATH_PRIO_APPLICATION;
    }
    private static final int GTK_PATH_PRIO_THEME = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_PRIO_THEME = 10
     * }
     */
    public static int GTK_PATH_PRIO_THEME() {
        return GTK_PATH_PRIO_THEME;
    }
    private static final int GTK_PATH_PRIO_RC = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_PRIO_RC = 12
     * }
     */
    public static int GTK_PATH_PRIO_RC() {
        return GTK_PATH_PRIO_RC;
    }
    private static final int GTK_PATH_PRIO_HIGHEST = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_PRIO_HIGHEST = 15
     * }
     */
    public static int GTK_PATH_PRIO_HIGHEST() {
        return GTK_PATH_PRIO_HIGHEST;
    }
    private static final int GTK_PATH_WIDGET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_WIDGET = 0
     * }
     */
    public static int GTK_PATH_WIDGET() {
        return GTK_PATH_WIDGET;
    }
    private static final int GTK_PATH_WIDGET_CLASS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_WIDGET_CLASS = 1
     * }
     */
    public static int GTK_PATH_WIDGET_CLASS() {
        return GTK_PATH_WIDGET_CLASS;
    }
    private static final int GTK_PATH_CLASS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PATH_CLASS = 2
     * }
     */
    public static int GTK_PATH_CLASS() {
        return GTK_PATH_CLASS;
    }

    private static class gtk_rc_scanner_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_scanner_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GScanner *gtk_rc_scanner_new()
     * }
     */
    public static FunctionDescriptor gtk_rc_scanner_new$descriptor() {
        return gtk_rc_scanner_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GScanner *gtk_rc_scanner_new()
     * }
     */
    public static MethodHandle gtk_rc_scanner_new$handle() {
        return gtk_rc_scanner_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GScanner *gtk_rc_scanner_new()
     * }
     */
    public static MemorySegment gtk_rc_scanner_new() {
        var mh$ = gtk_rc_scanner_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_scanner_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_parse_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_parse_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_color(GScanner *scanner, GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_rc_parse_color$descriptor() {
        return gtk_rc_parse_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_color(GScanner *scanner, GdkColor *color)
     * }
     */
    public static MethodHandle gtk_rc_parse_color$handle() {
        return gtk_rc_parse_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_color(GScanner *scanner, GdkColor *color)
     * }
     */
    public static int gtk_rc_parse_color(MemorySegment scanner, MemorySegment color) {
        var mh$ = gtk_rc_parse_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_parse_color", scanner, color);
            }
            return (int)mh$.invokeExact(scanner, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_parse_color_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_parse_color_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_color_full(GScanner *scanner, GtkRcStyle *style, GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_rc_parse_color_full$descriptor() {
        return gtk_rc_parse_color_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_color_full(GScanner *scanner, GtkRcStyle *style, GdkColor *color)
     * }
     */
    public static MethodHandle gtk_rc_parse_color_full$handle() {
        return gtk_rc_parse_color_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_color_full(GScanner *scanner, GtkRcStyle *style, GdkColor *color)
     * }
     */
    public static int gtk_rc_parse_color_full(MemorySegment scanner, MemorySegment style, MemorySegment color) {
        var mh$ = gtk_rc_parse_color_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_parse_color_full", scanner, style, color);
            }
            return (int)mh$.invokeExact(scanner, style, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_parse_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_parse_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_state(GScanner *scanner, GtkStateType *state)
     * }
     */
    public static FunctionDescriptor gtk_rc_parse_state$descriptor() {
        return gtk_rc_parse_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_state(GScanner *scanner, GtkStateType *state)
     * }
     */
    public static MethodHandle gtk_rc_parse_state$handle() {
        return gtk_rc_parse_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_state(GScanner *scanner, GtkStateType *state)
     * }
     */
    public static int gtk_rc_parse_state(MemorySegment scanner, MemorySegment state) {
        var mh$ = gtk_rc_parse_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_parse_state", scanner, state);
            }
            return (int)mh$.invokeExact(scanner, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rc_parse_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rc_parse_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_priority(GScanner *scanner, GtkPathPriorityType *priority)
     * }
     */
    public static FunctionDescriptor gtk_rc_parse_priority$descriptor() {
        return gtk_rc_parse_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_priority(GScanner *scanner, GtkPathPriorityType *priority)
     * }
     */
    public static MethodHandle gtk_rc_parse_priority$handle() {
        return gtk_rc_parse_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_rc_parse_priority(GScanner *scanner, GtkPathPriorityType *priority)
     * }
     */
    public static int gtk_rc_parse_priority(MemorySegment scanner, MemorySegment priority) {
        var mh$ = gtk_rc_parse_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rc_parse_priority", scanner, priority);
            }
            return (int)mh$.invokeExact(scanner, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_set_add_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_set_add_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_binding_set_add_path(GtkBindingSet *binding_set, GtkPathType path_type, const gchar *path_pattern, GtkPathPriorityType priority)
     * }
     */
    public static FunctionDescriptor gtk_binding_set_add_path$descriptor() {
        return gtk_binding_set_add_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_binding_set_add_path(GtkBindingSet *binding_set, GtkPathType path_type, const gchar *path_pattern, GtkPathPriorityType priority)
     * }
     */
    public static MethodHandle gtk_binding_set_add_path$handle() {
        return gtk_binding_set_add_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_binding_set_add_path(GtkBindingSet *binding_set, GtkPathType path_type, const gchar *path_pattern, GtkPathPriorityType priority)
     * }
     */
    public static void gtk_binding_set_add_path(MemorySegment binding_set, int path_type, MemorySegment path_pattern, int priority) {
        var mh$ = gtk_binding_set_add_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_set_add_path", binding_set, path_type, path_pattern, priority);
            }
            mh$.invokeExact(binding_set, path_type, path_pattern, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_recent_action_get_type()
     * }
     */
    public static FunctionDescriptor gtk_recent_action_get_type$descriptor() {
        return gtk_recent_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_recent_action_get_type()
     * }
     */
    public static MethodHandle gtk_recent_action_get_type$handle() {
        return gtk_recent_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_recent_action_get_type()
     * }
     */
    public static long gtk_recent_action_get_type() {
        var mh$ = gtk_recent_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_action_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_action_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_recent_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_recent_action_new$descriptor() {
        return gtk_recent_action_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_recent_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_recent_action_new$handle() {
        return gtk_recent_action_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAction *gtk_recent_action_new(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_recent_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_recent_action_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_action_new", name, label, tooltip, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_action_new_for_manager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_action_new_for_manager"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_recent_action_new_for_manager(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, GtkRecentManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_recent_action_new_for_manager$descriptor() {
        return gtk_recent_action_new_for_manager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_recent_action_new_for_manager(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, GtkRecentManager *manager)
     * }
     */
    public static MethodHandle gtk_recent_action_new_for_manager$handle() {
        return gtk_recent_action_new_for_manager.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAction *gtk_recent_action_new_for_manager(const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, GtkRecentManager *manager)
     * }
     */
    public static MemorySegment gtk_recent_action_new_for_manager(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id, MemorySegment manager) {
        var mh$ = gtk_recent_action_new_for_manager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_action_new_for_manager", name, label, tooltip, stock_id, manager);
            }
            return (MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id, manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_action_get_show_numbers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_action_get_show_numbers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_action_get_show_numbers(GtkRecentAction *action)
     * }
     */
    public static FunctionDescriptor gtk_recent_action_get_show_numbers$descriptor() {
        return gtk_recent_action_get_show_numbers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_recent_action_get_show_numbers(GtkRecentAction *action)
     * }
     */
    public static MethodHandle gtk_recent_action_get_show_numbers$handle() {
        return gtk_recent_action_get_show_numbers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_recent_action_get_show_numbers(GtkRecentAction *action)
     * }
     */
    public static int gtk_recent_action_get_show_numbers(MemorySegment action) {
        var mh$ = gtk_recent_action_get_show_numbers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_action_get_show_numbers", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_recent_action_set_show_numbers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_recent_action_set_show_numbers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_recent_action_set_show_numbers(GtkRecentAction *action, gboolean show_numbers)
     * }
     */
    public static FunctionDescriptor gtk_recent_action_set_show_numbers$descriptor() {
        return gtk_recent_action_set_show_numbers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_recent_action_set_show_numbers(GtkRecentAction *action, gboolean show_numbers)
     * }
     */
    public static MethodHandle gtk_recent_action_set_show_numbers$handle() {
        return gtk_recent_action_set_show_numbers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_recent_action_set_show_numbers(GtkRecentAction *action, gboolean show_numbers)
     * }
     */
    public static void gtk_recent_action_set_show_numbers(MemorySegment action, int show_numbers) {
        var mh$ = gtk_recent_action_set_show_numbers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_recent_action_set_show_numbers", action, show_numbers);
            }
            mh$.invokeExact(action, show_numbers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_status_icon_get_type()
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_type$descriptor() {
        return gtk_status_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_status_icon_get_type()
     * }
     */
    public static MethodHandle gtk_status_icon_get_type$handle() {
        return gtk_status_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_status_icon_get_type()
     * }
     */
    public static long gtk_status_icon_get_type() {
        var mh$ = gtk_status_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new()
     * }
     */
    public static FunctionDescriptor gtk_status_icon_new$descriptor() {
        return gtk_status_icon_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new()
     * }
     */
    public static MethodHandle gtk_status_icon_new$handle() {
        return gtk_status_icon_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new()
     * }
     */
    public static MemorySegment gtk_status_icon_new() {
        var mh$ = gtk_status_icon_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_new_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_new_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_new_from_pixbuf$descriptor() {
        return gtk_status_icon_new_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_status_icon_new_from_pixbuf$handle() {
        return gtk_status_icon_new_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_pixbuf(MemorySegment pixbuf) {
        var mh$ = gtk_status_icon_new_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_new_from_pixbuf", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_file(const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_new_from_file$descriptor() {
        return gtk_status_icon_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_file(const gchar *filename)
     * }
     */
    public static MethodHandle gtk_status_icon_new_from_file$handle() {
        return gtk_status_icon_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_file(const gchar *filename)
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_file(MemorySegment filename) {
        var mh$ = gtk_status_icon_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_new_from_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_stock(const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_new_from_stock$descriptor() {
        return gtk_status_icon_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_status_icon_new_from_stock$handle() {
        return gtk_status_icon_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_stock(MemorySegment stock_id) {
        var mh$ = gtk_status_icon_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_new_from_stock", stock_id);
            }
            return (MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_new_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_new_from_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_icon_name(const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_new_from_icon_name$descriptor() {
        return gtk_status_icon_new_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_icon_name(const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_status_icon_new_from_icon_name$handle() {
        return gtk_status_icon_new_from_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_icon_name(const gchar *icon_name)
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_icon_name(MemorySegment icon_name) {
        var mh$ = gtk_status_icon_new_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_new_from_icon_name", icon_name);
            }
            return (MemorySegment)mh$.invokeExact(icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_new_from_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_new_from_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_gicon(GIcon *icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_new_from_gicon$descriptor() {
        return gtk_status_icon_new_from_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_gicon(GIcon *icon)
     * }
     */
    public static MethodHandle gtk_status_icon_new_from_gicon$handle() {
        return gtk_status_icon_new_from_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStatusIcon *gtk_status_icon_new_from_gicon(GIcon *icon)
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_gicon(MemorySegment icon) {
        var mh$ = gtk_status_icon_new_from_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_new_from_gicon", icon);
            }
            return (MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_pixbuf(GtkStatusIcon *status_icon, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_from_pixbuf$descriptor() {
        return gtk_status_icon_set_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_pixbuf(GtkStatusIcon *status_icon, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_status_icon_set_from_pixbuf$handle() {
        return gtk_status_icon_set_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_pixbuf(GtkStatusIcon *status_icon, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_status_icon_set_from_pixbuf(MemorySegment status_icon, MemorySegment pixbuf) {
        var mh$ = gtk_status_icon_set_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_from_pixbuf", status_icon, pixbuf);
            }
            mh$.invokeExact(status_icon, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_file(GtkStatusIcon *status_icon, const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_from_file$descriptor() {
        return gtk_status_icon_set_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_file(GtkStatusIcon *status_icon, const gchar *filename)
     * }
     */
    public static MethodHandle gtk_status_icon_set_from_file$handle() {
        return gtk_status_icon_set_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_file(GtkStatusIcon *status_icon, const gchar *filename)
     * }
     */
    public static void gtk_status_icon_set_from_file(MemorySegment status_icon, MemorySegment filename) {
        var mh$ = gtk_status_icon_set_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_from_file", status_icon, filename);
            }
            mh$.invokeExact(status_icon, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_stock(GtkStatusIcon *status_icon, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_from_stock$descriptor() {
        return gtk_status_icon_set_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_stock(GtkStatusIcon *status_icon, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_status_icon_set_from_stock$handle() {
        return gtk_status_icon_set_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_stock(GtkStatusIcon *status_icon, const gchar *stock_id)
     * }
     */
    public static void gtk_status_icon_set_from_stock(MemorySegment status_icon, MemorySegment stock_id) {
        var mh$ = gtk_status_icon_set_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_from_stock", status_icon, stock_id);
            }
            mh$.invokeExact(status_icon, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_from_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_icon_name(GtkStatusIcon *status_icon, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_from_icon_name$descriptor() {
        return gtk_status_icon_set_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_icon_name(GtkStatusIcon *status_icon, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_status_icon_set_from_icon_name$handle() {
        return gtk_status_icon_set_from_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_icon_name(GtkStatusIcon *status_icon, const gchar *icon_name)
     * }
     */
    public static void gtk_status_icon_set_from_icon_name(MemorySegment status_icon, MemorySegment icon_name) {
        var mh$ = gtk_status_icon_set_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_from_icon_name", status_icon, icon_name);
            }
            mh$.invokeExact(status_icon, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_from_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_from_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_gicon(GtkStatusIcon *status_icon, GIcon *icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_from_gicon$descriptor() {
        return gtk_status_icon_set_from_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_gicon(GtkStatusIcon *status_icon, GIcon *icon)
     * }
     */
    public static MethodHandle gtk_status_icon_set_from_gicon$handle() {
        return gtk_status_icon_set_from_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_from_gicon(GtkStatusIcon *status_icon, GIcon *icon)
     * }
     */
    public static void gtk_status_icon_set_from_gicon(MemorySegment status_icon, MemorySegment icon) {
        var mh$ = gtk_status_icon_set_from_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_from_gicon", status_icon, icon);
            }
            mh$.invokeExact(status_icon, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_storage_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_storage_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkImageType gtk_status_icon_get_storage_type(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_storage_type$descriptor() {
        return gtk_status_icon_get_storage_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkImageType gtk_status_icon_get_storage_type(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_storage_type$handle() {
        return gtk_status_icon_get_storage_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkImageType gtk_status_icon_get_storage_type(GtkStatusIcon *status_icon)
     * }
     */
    public static int gtk_status_icon_get_storage_type(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_storage_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_storage_type", status_icon);
            }
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_status_icon_get_pixbuf(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_pixbuf$descriptor() {
        return gtk_status_icon_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_status_icon_get_pixbuf(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_pixbuf$handle() {
        return gtk_status_icon_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_status_icon_get_pixbuf(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_pixbuf(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_pixbuf", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_stock(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_stock$descriptor() {
        return gtk_status_icon_get_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_stock(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_stock$handle() {
        return gtk_status_icon_get_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_stock(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_stock(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_stock", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_icon_name(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_icon_name$descriptor() {
        return gtk_status_icon_get_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_icon_name(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_icon_name$handle() {
        return gtk_status_icon_get_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_icon_name(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_icon_name(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_icon_name", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *gtk_status_icon_get_gicon(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_gicon$descriptor() {
        return gtk_status_icon_get_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *gtk_status_icon_get_gicon(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_gicon$handle() {
        return gtk_status_icon_get_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *gtk_status_icon_get_gicon(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_gicon(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_gicon", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_status_icon_get_size(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_size$descriptor() {
        return gtk_status_icon_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_status_icon_get_size(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_size$handle() {
        return gtk_status_icon_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_status_icon_get_size(GtkStatusIcon *status_icon)
     * }
     */
    public static int gtk_status_icon_get_size(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_size", status_icon);
            }
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_screen(GtkStatusIcon *status_icon, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_screen$descriptor() {
        return gtk_status_icon_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_screen(GtkStatusIcon *status_icon, GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_status_icon_set_screen$handle() {
        return gtk_status_icon_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_screen(GtkStatusIcon *status_icon, GdkScreen *screen)
     * }
     */
    public static void gtk_status_icon_set_screen(MemorySegment status_icon, MemorySegment screen) {
        var mh$ = gtk_status_icon_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_screen", status_icon, screen);
            }
            mh$.invokeExact(status_icon, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_status_icon_get_screen(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_screen$descriptor() {
        return gtk_status_icon_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_status_icon_get_screen(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_screen$handle() {
        return gtk_status_icon_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gtk_status_icon_get_screen(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_screen(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_screen", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_has_tooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_has_tooltip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_has_tooltip(GtkStatusIcon *status_icon, gboolean has_tooltip)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_has_tooltip$descriptor() {
        return gtk_status_icon_set_has_tooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_has_tooltip(GtkStatusIcon *status_icon, gboolean has_tooltip)
     * }
     */
    public static MethodHandle gtk_status_icon_set_has_tooltip$handle() {
        return gtk_status_icon_set_has_tooltip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_has_tooltip(GtkStatusIcon *status_icon, gboolean has_tooltip)
     * }
     */
    public static void gtk_status_icon_set_has_tooltip(MemorySegment status_icon, int has_tooltip) {
        var mh$ = gtk_status_icon_set_has_tooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_has_tooltip", status_icon, has_tooltip);
            }
            mh$.invokeExact(status_icon, has_tooltip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_tooltip_text(GtkStatusIcon *status_icon, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_tooltip_text$descriptor() {
        return gtk_status_icon_set_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_tooltip_text(GtkStatusIcon *status_icon, const gchar *text)
     * }
     */
    public static MethodHandle gtk_status_icon_set_tooltip_text$handle() {
        return gtk_status_icon_set_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_tooltip_text(GtkStatusIcon *status_icon, const gchar *text)
     * }
     */
    public static void gtk_status_icon_set_tooltip_text(MemorySegment status_icon, MemorySegment text) {
        var mh$ = gtk_status_icon_set_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_tooltip_text", status_icon, text);
            }
            mh$.invokeExact(status_icon, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_tooltip_markup(GtkStatusIcon *status_icon, const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_tooltip_markup$descriptor() {
        return gtk_status_icon_set_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_tooltip_markup(GtkStatusIcon *status_icon, const gchar *markup)
     * }
     */
    public static MethodHandle gtk_status_icon_set_tooltip_markup$handle() {
        return gtk_status_icon_set_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_tooltip_markup(GtkStatusIcon *status_icon, const gchar *markup)
     * }
     */
    public static void gtk_status_icon_set_tooltip_markup(MemorySegment status_icon, MemorySegment markup) {
        var mh$ = gtk_status_icon_set_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_tooltip_markup", status_icon, markup);
            }
            mh$.invokeExact(status_icon, markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_title(GtkStatusIcon *status_icon, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_title$descriptor() {
        return gtk_status_icon_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_title(GtkStatusIcon *status_icon, const gchar *title)
     * }
     */
    public static MethodHandle gtk_status_icon_set_title$handle() {
        return gtk_status_icon_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_title(GtkStatusIcon *status_icon, const gchar *title)
     * }
     */
    public static void gtk_status_icon_set_title(MemorySegment status_icon, MemorySegment title) {
        var mh$ = gtk_status_icon_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_title", status_icon, title);
            }
            mh$.invokeExact(status_icon, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_title(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_title$descriptor() {
        return gtk_status_icon_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_title(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_title$handle() {
        return gtk_status_icon_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_status_icon_get_title(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_title(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_title", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_name(GtkStatusIcon *status_icon, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_name$descriptor() {
        return gtk_status_icon_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_name(GtkStatusIcon *status_icon, const gchar *name)
     * }
     */
    public static MethodHandle gtk_status_icon_set_name$handle() {
        return gtk_status_icon_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_name(GtkStatusIcon *status_icon, const gchar *name)
     * }
     */
    public static void gtk_status_icon_set_name(MemorySegment status_icon, MemorySegment name) {
        var mh$ = gtk_status_icon_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_name", status_icon, name);
            }
            mh$.invokeExact(status_icon, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_set_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_visible(GtkStatusIcon *status_icon, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_set_visible$descriptor() {
        return gtk_status_icon_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_visible(GtkStatusIcon *status_icon, gboolean visible)
     * }
     */
    public static MethodHandle gtk_status_icon_set_visible$handle() {
        return gtk_status_icon_set_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_set_visible(GtkStatusIcon *status_icon, gboolean visible)
     * }
     */
    public static void gtk_status_icon_set_visible(MemorySegment status_icon, int visible) {
        var mh$ = gtk_status_icon_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_set_visible", status_icon, visible);
            }
            mh$.invokeExact(status_icon, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_visible(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_visible$descriptor() {
        return gtk_status_icon_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_visible(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_visible$handle() {
        return gtk_status_icon_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_visible(GtkStatusIcon *status_icon)
     * }
     */
    public static int gtk_status_icon_get_visible(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_visible", status_icon);
            }
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_is_embedded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_is_embedded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_is_embedded(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_is_embedded$descriptor() {
        return gtk_status_icon_is_embedded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_is_embedded(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_is_embedded$handle() {
        return gtk_status_icon_is_embedded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_is_embedded(GtkStatusIcon *status_icon)
     * }
     */
    public static int gtk_status_icon_is_embedded(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_is_embedded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_is_embedded", status_icon);
            }
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_position_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_position_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_position_menu(GtkMenu *menu, gint *x, gint *y, gboolean *push_in, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_position_menu$descriptor() {
        return gtk_status_icon_position_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_status_icon_position_menu(GtkMenu *menu, gint *x, gint *y, gboolean *push_in, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_status_icon_position_menu$handle() {
        return gtk_status_icon_position_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_status_icon_position_menu(GtkMenu *menu, gint *x, gint *y, gboolean *push_in, gpointer user_data)
     * }
     */
    public static void gtk_status_icon_position_menu(MemorySegment menu, MemorySegment x, MemorySegment y, MemorySegment push_in, MemorySegment user_data) {
        var mh$ = gtk_status_icon_position_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_position_menu", menu, x, y, push_in, user_data);
            }
            mh$.invokeExact(menu, x, y, push_in, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_geometry(GtkStatusIcon *status_icon, GdkScreen **screen, GdkRectangle *area, GtkOrientation *orientation)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_geometry$descriptor() {
        return gtk_status_icon_get_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_geometry(GtkStatusIcon *status_icon, GdkScreen **screen, GdkRectangle *area, GtkOrientation *orientation)
     * }
     */
    public static MethodHandle gtk_status_icon_get_geometry$handle() {
        return gtk_status_icon_get_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_geometry(GtkStatusIcon *status_icon, GdkScreen **screen, GdkRectangle *area, GtkOrientation *orientation)
     * }
     */
    public static int gtk_status_icon_get_geometry(MemorySegment status_icon, MemorySegment screen, MemorySegment area, MemorySegment orientation) {
        var mh$ = gtk_status_icon_get_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_geometry", status_icon, screen, area, orientation);
            }
            return (int)mh$.invokeExact(status_icon, screen, area, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_has_tooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_has_tooltip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_has_tooltip(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_has_tooltip$descriptor() {
        return gtk_status_icon_get_has_tooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_has_tooltip(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_has_tooltip$handle() {
        return gtk_status_icon_get_has_tooltip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_status_icon_get_has_tooltip(GtkStatusIcon *status_icon)
     * }
     */
    public static int gtk_status_icon_get_has_tooltip(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_has_tooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_has_tooltip", status_icon);
            }
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_status_icon_get_tooltip_text(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_tooltip_text$descriptor() {
        return gtk_status_icon_get_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_status_icon_get_tooltip_text(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_tooltip_text$handle() {
        return gtk_status_icon_get_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_status_icon_get_tooltip_text(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_tooltip_text(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_tooltip_text", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_status_icon_get_tooltip_markup(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_tooltip_markup$descriptor() {
        return gtk_status_icon_get_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_status_icon_get_tooltip_markup(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_tooltip_markup$handle() {
        return gtk_status_icon_get_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_status_icon_get_tooltip_markup(GtkStatusIcon *status_icon)
     * }
     */
    public static MemorySegment gtk_status_icon_get_tooltip_markup(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_tooltip_markup", status_icon);
            }
            return (MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_status_icon_get_x11_window_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_status_icon_get_x11_window_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 gtk_status_icon_get_x11_window_id(GtkStatusIcon *status_icon)
     * }
     */
    public static FunctionDescriptor gtk_status_icon_get_x11_window_id$descriptor() {
        return gtk_status_icon_get_x11_window_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 gtk_status_icon_get_x11_window_id(GtkStatusIcon *status_icon)
     * }
     */
    public static MethodHandle gtk_status_icon_get_x11_window_id$handle() {
        return gtk_status_icon_get_x11_window_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 gtk_status_icon_get_x11_window_id(GtkStatusIcon *status_icon)
     * }
     */
    public static int gtk_status_icon_get_x11_window_id(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_x11_window_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_status_icon_get_x11_window_id", status_icon);
            }
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_EXPANDER_COLLAPSED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EXPANDER_COLLAPSED = 0
     * }
     */
    public static int GTK_EXPANDER_COLLAPSED() {
        return GTK_EXPANDER_COLLAPSED;
    }
    private static final int GTK_EXPANDER_SEMI_COLLAPSED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EXPANDER_SEMI_COLLAPSED = 1
     * }
     */
    public static int GTK_EXPANDER_SEMI_COLLAPSED() {
        return GTK_EXPANDER_SEMI_COLLAPSED;
    }
    private static final int GTK_EXPANDER_SEMI_EXPANDED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EXPANDER_SEMI_EXPANDED = 2
     * }
     */
    public static int GTK_EXPANDER_SEMI_EXPANDED() {
        return GTK_EXPANDER_SEMI_EXPANDED;
    }
    private static final int GTK_EXPANDER_EXPANDED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EXPANDER_EXPANDED = 3
     * }
     */
    public static int GTK_EXPANDER_EXPANDED() {
        return GTK_EXPANDER_EXPANDED;
    }

    private static class gtk_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_style_get_type()
     * }
     */
    public static FunctionDescriptor gtk_style_get_type$descriptor() {
        return gtk_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_style_get_type()
     * }
     */
    public static MethodHandle gtk_style_get_type$handle() {
        return gtk_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_style_get_type()
     * }
     */
    public static long gtk_style_get_type() {
        var mh$ = gtk_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_new()
     * }
     */
    public static FunctionDescriptor gtk_style_new$descriptor() {
        return gtk_style_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_new()
     * }
     */
    public static MethodHandle gtk_style_new$handle() {
        return gtk_style_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_new()
     * }
     */
    public static MemorySegment gtk_style_new() {
        var mh$ = gtk_style_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_copy(GtkStyle *style)
     * }
     */
    public static FunctionDescriptor gtk_style_copy$descriptor() {
        return gtk_style_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_copy(GtkStyle *style)
     * }
     */
    public static MethodHandle gtk_style_copy$handle() {
        return gtk_style_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_copy(GtkStyle *style)
     * }
     */
    public static MemorySegment gtk_style_copy(MemorySegment style) {
        var mh$ = gtk_style_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_copy", style);
            }
            return (MemorySegment)mh$.invokeExact(style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_attach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_attach(GtkStyle *style, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_style_attach$descriptor() {
        return gtk_style_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_attach(GtkStyle *style, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_style_attach$handle() {
        return gtk_style_attach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyle *gtk_style_attach(GtkStyle *style, GdkWindow *window)
     * }
     */
    public static MemorySegment gtk_style_attach(MemorySegment style, MemorySegment window) {
        var mh$ = gtk_style_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_attach", style, window);
            }
            return (MemorySegment)mh$.invokeExact(style, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_detach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_detach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_detach(GtkStyle *style)
     * }
     */
    public static FunctionDescriptor gtk_style_detach$descriptor() {
        return gtk_style_detach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_detach(GtkStyle *style)
     * }
     */
    public static MethodHandle gtk_style_detach$handle() {
        return gtk_style_detach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_detach(GtkStyle *style)
     * }
     */
    public static void gtk_style_detach(MemorySegment style) {
        var mh$ = gtk_style_detach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_detach", style);
            }
            mh$.invokeExact(style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_set_background {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_set_background"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_set_background(GtkStyle *style, GdkWindow *window, GtkStateType state_type)
     * }
     */
    public static FunctionDescriptor gtk_style_set_background$descriptor() {
        return gtk_style_set_background.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_set_background(GtkStyle *style, GdkWindow *window, GtkStateType state_type)
     * }
     */
    public static MethodHandle gtk_style_set_background$handle() {
        return gtk_style_set_background.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_set_background(GtkStyle *style, GdkWindow *window, GtkStateType state_type)
     * }
     */
    public static void gtk_style_set_background(MemorySegment style, MemorySegment window, int state_type) {
        var mh$ = gtk_style_set_background.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_set_background", style, window, state_type);
            }
            mh$.invokeExact(style, window, state_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_apply_default_background {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_apply_default_background"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_apply_default_background(GtkStyle *style, cairo_t *cr, GdkWindow *window, GtkStateType state_type, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_style_apply_default_background$descriptor() {
        return gtk_style_apply_default_background.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_apply_default_background(GtkStyle *style, cairo_t *cr, GdkWindow *window, GtkStateType state_type, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_style_apply_default_background$handle() {
        return gtk_style_apply_default_background.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_apply_default_background(GtkStyle *style, cairo_t *cr, GdkWindow *window, GtkStateType state_type, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_style_apply_default_background(MemorySegment style, MemorySegment cr, MemorySegment window, int state_type, int x, int y, int width, int height) {
        var mh$ = gtk_style_apply_default_background.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_apply_default_background", style, cr, window, state_type, x, y, width, height);
            }
            mh$.invokeExact(style, cr, window, state_type, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_lookup_icon_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_lookup_icon_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_style_lookup_icon_set(GtkStyle *style, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_style_lookup_icon_set$descriptor() {
        return gtk_style_lookup_icon_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_style_lookup_icon_set(GtkStyle *style, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_style_lookup_icon_set$handle() {
        return gtk_style_lookup_icon_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIconSet *gtk_style_lookup_icon_set(GtkStyle *style, const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_style_lookup_icon_set(MemorySegment style, MemorySegment stock_id) {
        var mh$ = gtk_style_lookup_icon_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_lookup_icon_set", style, stock_id);
            }
            return (MemorySegment)mh$.invokeExact(style, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_lookup_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_lookup_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_lookup_color(GtkStyle *style, const gchar *color_name, GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_style_lookup_color$descriptor() {
        return gtk_style_lookup_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_lookup_color(GtkStyle *style, const gchar *color_name, GdkColor *color)
     * }
     */
    public static MethodHandle gtk_style_lookup_color$handle() {
        return gtk_style_lookup_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_lookup_color(GtkStyle *style, const gchar *color_name, GdkColor *color)
     * }
     */
    public static int gtk_style_lookup_color(MemorySegment style, MemorySegment color_name, MemorySegment color) {
        var mh$ = gtk_style_lookup_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_lookup_color", style, color_name, color);
            }
            return (int)mh$.invokeExact(style, color_name, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_render_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_render_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_style_render_icon(GtkStyle *style, const GtkIconSource *source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const gchar *detail)
     * }
     */
    public static FunctionDescriptor gtk_style_render_icon$descriptor() {
        return gtk_style_render_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_style_render_icon(GtkStyle *style, const GtkIconSource *source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const gchar *detail)
     * }
     */
    public static MethodHandle gtk_style_render_icon$handle() {
        return gtk_style_render_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_style_render_icon(GtkStyle *style, const GtkIconSource *source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const gchar *detail)
     * }
     */
    public static MemorySegment gtk_style_render_icon(MemorySegment style, MemorySegment source, int direction, int state, int size, MemorySegment widget, MemorySegment detail) {
        var mh$ = gtk_style_render_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_render_icon", style, source, direction, state, size, widget, detail);
            }
            return (MemorySegment)mh$.invokeExact(style, source, direction, state, size, widget, detail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_hline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_hline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_hline(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x1, gint x2, gint y)
     * }
     */
    public static FunctionDescriptor gtk_paint_hline$descriptor() {
        return gtk_paint_hline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_hline(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x1, gint x2, gint y)
     * }
     */
    public static MethodHandle gtk_paint_hline$handle() {
        return gtk_paint_hline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_hline(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x1, gint x2, gint y)
     * }
     */
    public static void gtk_paint_hline(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x1, int x2, int y) {
        var mh$ = gtk_paint_hline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_hline", style, cr, state_type, widget, detail, x1, x2, y);
            }
            mh$.invokeExact(style, cr, state_type, widget, detail, x1, x2, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_vline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_vline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_vline(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint y1_, gint y2_, gint x)
     * }
     */
    public static FunctionDescriptor gtk_paint_vline$descriptor() {
        return gtk_paint_vline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_vline(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint y1_, gint y2_, gint x)
     * }
     */
    public static MethodHandle gtk_paint_vline$handle() {
        return gtk_paint_vline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_vline(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint y1_, gint y2_, gint x)
     * }
     */
    public static void gtk_paint_vline(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int y1_, int y2_, int x) {
        var mh$ = gtk_paint_vline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_vline", style, cr, state_type, widget, detail, y1_, y2_, x);
            }
            mh$.invokeExact(style, cr, state_type, widget, detail, y1_, y2_, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_shadow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_shadow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_shadow(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_shadow$descriptor() {
        return gtk_paint_shadow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_shadow(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_shadow$handle() {
        return gtk_paint_shadow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_shadow(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_shadow(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_shadow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_shadow", style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_arrow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_arrow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_arrow(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_arrow$descriptor() {
        return gtk_paint_arrow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_arrow(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_arrow$handle() {
        return gtk_paint_arrow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_arrow(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_arrow(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int arrow_type, int fill, int x, int y, int width, int height) {
        var mh$ = gtk_paint_arrow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_arrow", style, cr, state_type, shadow_type, widget, detail, arrow_type, fill, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, arrow_type, fill, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_diamond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_diamond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_diamond(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_diamond$descriptor() {
        return gtk_paint_diamond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_diamond(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_diamond$handle() {
        return gtk_paint_diamond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_diamond(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_diamond(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_diamond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_diamond", style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_box {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_box"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_box(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_box$descriptor() {
        return gtk_paint_box.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_box(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_box$handle() {
        return gtk_paint_box.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_box(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_box(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_box.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_box", style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_flat_box {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_flat_box"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_flat_box(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_flat_box$descriptor() {
        return gtk_paint_flat_box.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_flat_box(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_flat_box$handle() {
        return gtk_paint_flat_box.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_flat_box(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_flat_box(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_flat_box.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_flat_box", style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_check(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_check$descriptor() {
        return gtk_paint_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_check(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_check$handle() {
        return gtk_paint_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_check(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_check(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_check", style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_option(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_option$descriptor() {
        return gtk_paint_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_option(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_option$handle() {
        return gtk_paint_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_option(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_option(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_option", style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_tab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_tab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_tab(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_tab$descriptor() {
        return gtk_paint_tab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_tab(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_tab$handle() {
        return gtk_paint_tab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_tab(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_tab(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_tab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_tab", style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_shadow_gap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_shadow_gap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_shadow_gap(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
     * }
     */
    public static FunctionDescriptor gtk_paint_shadow_gap$descriptor() {
        return gtk_paint_shadow_gap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_shadow_gap(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
     * }
     */
    public static MethodHandle gtk_paint_shadow_gap$handle() {
        return gtk_paint_shadow_gap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_shadow_gap(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
     * }
     */
    public static void gtk_paint_shadow_gap(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width) {
        var mh$ = gtk_paint_shadow_gap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_shadow_gap", style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_box_gap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_box_gap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_box_gap(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
     * }
     */
    public static FunctionDescriptor gtk_paint_box_gap$descriptor() {
        return gtk_paint_box_gap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_box_gap(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
     * }
     */
    public static MethodHandle gtk_paint_box_gap$handle() {
        return gtk_paint_box_gap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_box_gap(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
     * }
     */
    public static void gtk_paint_box_gap(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width) {
        var mh$ = gtk_paint_box_gap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_box_gap", style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_extension"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_extension(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side)
     * }
     */
    public static FunctionDescriptor gtk_paint_extension$descriptor() {
        return gtk_paint_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_extension(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side)
     * }
     */
    public static MethodHandle gtk_paint_extension$handle() {
        return gtk_paint_extension.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_extension(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side)
     * }
     */
    public static void gtk_paint_extension(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side) {
        var mh$ = gtk_paint_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_extension", style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_focus(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_focus$descriptor() {
        return gtk_paint_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_focus(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_focus$handle() {
        return gtk_paint_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_focus(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_focus(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_focus", style, cr, state_type, widget, detail, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_slider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_slider"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_slider(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_paint_slider$descriptor() {
        return gtk_paint_slider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_slider(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_paint_slider$handle() {
        return gtk_paint_slider.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_slider(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
     * }
     */
    public static void gtk_paint_slider(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int orientation) {
        var mh$ = gtk_paint_slider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_slider", style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_handle(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_paint_handle$descriptor() {
        return gtk_paint_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_handle(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_paint_handle$handle() {
        return gtk_paint_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_handle(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
     * }
     */
    public static void gtk_paint_handle(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int orientation) {
        var mh$ = gtk_paint_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_handle", style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
            }
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_expander {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_expander"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_expander(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x, gint y, GtkExpanderStyle expander_style)
     * }
     */
    public static FunctionDescriptor gtk_paint_expander$descriptor() {
        return gtk_paint_expander.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_expander(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x, gint y, GtkExpanderStyle expander_style)
     * }
     */
    public static MethodHandle gtk_paint_expander$handle() {
        return gtk_paint_expander.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_expander(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, gint x, gint y, GtkExpanderStyle expander_style)
     * }
     */
    public static void gtk_paint_expander(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x, int y, int expander_style) {
        var mh$ = gtk_paint_expander.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_expander", style, cr, state_type, widget, detail, x, y, expander_style);
            }
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, expander_style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_layout(GtkStyle *style, cairo_t *cr, GtkStateType state_type, gboolean use_text, GtkWidget *widget, const gchar *detail, gint x, gint y, PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor gtk_paint_layout$descriptor() {
        return gtk_paint_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_layout(GtkStyle *style, cairo_t *cr, GtkStateType state_type, gboolean use_text, GtkWidget *widget, const gchar *detail, gint x, gint y, PangoLayout *layout)
     * }
     */
    public static MethodHandle gtk_paint_layout$handle() {
        return gtk_paint_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_layout(GtkStyle *style, cairo_t *cr, GtkStateType state_type, gboolean use_text, GtkWidget *widget, const gchar *detail, gint x, gint y, PangoLayout *layout)
     * }
     */
    public static void gtk_paint_layout(MemorySegment style, MemorySegment cr, int state_type, int use_text, MemorySegment widget, MemorySegment detail, int x, int y, MemorySegment layout) {
        var mh$ = gtk_paint_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_layout", style, cr, state_type, use_text, widget, detail, x, y, layout);
            }
            mh$.invokeExact(style, cr, state_type, use_text, widget, detail, x, y, layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_resize_grip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_resize_grip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_resize_grip(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, GdkWindowEdge edge, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_resize_grip$descriptor() {
        return gtk_paint_resize_grip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_resize_grip(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, GdkWindowEdge edge, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_resize_grip$handle() {
        return gtk_paint_resize_grip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_resize_grip(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, GdkWindowEdge edge, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_resize_grip(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int edge, int x, int y, int width, int height) {
        var mh$ = gtk_paint_resize_grip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_resize_grip", style, cr, state_type, widget, detail, edge, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, widget, detail, edge, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_paint_spinner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_paint_spinner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_paint_spinner(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, guint step, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_paint_spinner$descriptor() {
        return gtk_paint_spinner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_paint_spinner(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, guint step, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_paint_spinner$handle() {
        return gtk_paint_spinner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_paint_spinner(GtkStyle *style, cairo_t *cr, GtkStateType state_type, GtkWidget *widget, const gchar *detail, guint step, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_paint_spinner(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int step, int x, int y, int width, int height) {
        var mh$ = gtk_paint_spinner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_paint_spinner", style, cr, state_type, widget, detail, step, x, y, width, height);
            }
            mh$.invokeExact(style, cr, state_type, widget, detail, step, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_get_style_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_get_style_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_style_get_style_property(GtkStyle *style, GType widget_type, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_style_get_style_property$descriptor() {
        return gtk_style_get_style_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_style_get_style_property(GtkStyle *style, GType widget_type, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle gtk_style_get_style_property$handle() {
        return gtk_style_get_style_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_style_get_style_property(GtkStyle *style, GType widget_type, const gchar *property_name, GValue *value)
     * }
     */
    public static void gtk_style_get_style_property(MemorySegment style, long widget_type, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_style_get_style_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_get_style_property", style, widget_type, property_name, value);
            }
            mh$.invokeExact(style, widget_type, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_style_get(GtkStyle *style, GType widget_type, const gchar *first_property_name, ...)
     * }
     */
    public static class gtk_style_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_style_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_style_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_style_get(GtkStyle *style, GType widget_type, const gchar *first_property_name, ...)
         * }
         */
        public static gtk_style_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_style_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment style, long widget_type, MemorySegment first_property_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_style_get", style, widget_type, first_property_name, x3);
                }
                spreader.invokeExact(style, widget_type, first_property_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class _gtk_style_new_for_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_style_new_for_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GtkStyle *_gtk_style_new_for_path(GdkScreen *screen, GtkWidgetPath *path)
     * }
     */
    public static FunctionDescriptor _gtk_style_new_for_path$descriptor() {
        return _gtk_style_new_for_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GtkStyle *_gtk_style_new_for_path(GdkScreen *screen, GtkWidgetPath *path)
     * }
     */
    public static MethodHandle _gtk_style_new_for_path$handle() {
        return _gtk_style_new_for_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * GtkStyle *_gtk_style_new_for_path(GdkScreen *screen, GtkWidgetPath *path)
     * }
     */
    public static MemorySegment _gtk_style_new_for_path(MemorySegment screen, MemorySegment path) {
        var mh$ = _gtk_style_new_for_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_style_new_for_path", screen, path);
            }
            return (MemorySegment)mh$.invokeExact(screen, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_style_shade {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_style_shade"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_style_shade(const GdkColor *a, GdkColor *b, gdouble k)
     * }
     */
    public static FunctionDescriptor _gtk_style_shade$descriptor() {
        return _gtk_style_shade.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_style_shade(const GdkColor *a, GdkColor *b, gdouble k)
     * }
     */
    public static MethodHandle _gtk_style_shade$handle() {
        return _gtk_style_shade.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_style_shade(const GdkColor *a, GdkColor *b, gdouble k)
     * }
     */
    public static void _gtk_style_shade(MemorySegment a, MemorySegment b, double k) {
        var mh$ = _gtk_style_shade.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_style_shade", a, b, k);
            }
            mh$.invokeExact(a, b, k);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_style_has_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_style_has_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_has_context(GtkStyle *style)
     * }
     */
    public static FunctionDescriptor gtk_style_has_context$descriptor() {
        return gtk_style_has_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_style_has_context(GtkStyle *style)
     * }
     */
    public static MethodHandle gtk_style_has_context$handle() {
        return gtk_style_has_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_style_has_context(GtkStyle *style)
     * }
     */
    public static int gtk_style_has_context(MemorySegment style) {
        var mh$ = gtk_style_has_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_style_has_context", style);
            }
            return (int)mh$.invokeExact(style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_style_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_style_attach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_style_attach(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_style_attach$descriptor() {
        return gtk_widget_style_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_style_attach(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_style_attach$handle() {
        return gtk_widget_style_attach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_style_attach(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_style_attach(MemorySegment widget) {
        var mh$ = gtk_widget_style_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_style_attach", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_has_rc_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_has_rc_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_rc_style(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_has_rc_style$descriptor() {
        return gtk_widget_has_rc_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_rc_style(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_has_rc_style$handle() {
        return gtk_widget_has_rc_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_rc_style(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_has_rc_style(MemorySegment widget) {
        var mh$ = gtk_widget_has_rc_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_has_rc_style", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_style(GtkWidget *widget, GtkStyle *style)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_style$descriptor() {
        return gtk_widget_set_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_style(GtkWidget *widget, GtkStyle *style)
     * }
     */
    public static MethodHandle gtk_widget_set_style$handle() {
        return gtk_widget_set_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_style(GtkWidget *widget, GtkStyle *style)
     * }
     */
    public static void gtk_widget_set_style(MemorySegment widget, MemorySegment style) {
        var mh$ = gtk_widget_set_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_style", widget, style);
            }
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_ensure_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_ensure_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_ensure_style(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_ensure_style$descriptor() {
        return gtk_widget_ensure_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_ensure_style(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_ensure_style$handle() {
        return gtk_widget_ensure_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_ensure_style(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_ensure_style(MemorySegment widget) {
        var mh$ = gtk_widget_ensure_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_ensure_style", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_widget_get_style(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_style$descriptor() {
        return gtk_widget_get_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_widget_get_style(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_style$handle() {
        return gtk_widget_get_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyle *gtk_widget_get_style(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_style(MemorySegment widget) {
        var mh$ = gtk_widget_get_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_style", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_modify_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_modify_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_style(GtkWidget *widget, GtkRcStyle *style)
     * }
     */
    public static FunctionDescriptor gtk_widget_modify_style$descriptor() {
        return gtk_widget_modify_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_style(GtkWidget *widget, GtkRcStyle *style)
     * }
     */
    public static MethodHandle gtk_widget_modify_style$handle() {
        return gtk_widget_modify_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_modify_style(GtkWidget *widget, GtkRcStyle *style)
     * }
     */
    public static void gtk_widget_modify_style(MemorySegment widget, MemorySegment style) {
        var mh$ = gtk_widget_modify_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_modify_style", widget, style);
            }
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_modifier_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_modifier_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_widget_get_modifier_style(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_modifier_style$descriptor() {
        return gtk_widget_get_modifier_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_widget_get_modifier_style(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_modifier_style$handle() {
        return gtk_widget_get_modifier_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRcStyle *gtk_widget_get_modifier_style(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_modifier_style(MemorySegment widget) {
        var mh$ = gtk_widget_get_modifier_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_modifier_style", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_modify_fg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_modify_fg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_fg(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_widget_modify_fg$descriptor() {
        return gtk_widget_modify_fg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_fg(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_widget_modify_fg$handle() {
        return gtk_widget_modify_fg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_modify_fg(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static void gtk_widget_modify_fg(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_fg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_modify_fg", widget, state, color);
            }
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_modify_bg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_modify_bg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_bg(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_widget_modify_bg$descriptor() {
        return gtk_widget_modify_bg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_bg(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_widget_modify_bg$handle() {
        return gtk_widget_modify_bg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_modify_bg(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static void gtk_widget_modify_bg(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_bg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_modify_bg", widget, state, color);
            }
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_modify_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_modify_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_text(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_widget_modify_text$descriptor() {
        return gtk_widget_modify_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_text(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_widget_modify_text$handle() {
        return gtk_widget_modify_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_modify_text(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static void gtk_widget_modify_text(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_modify_text", widget, state, color);
            }
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_modify_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_modify_base"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_base(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_widget_modify_base$descriptor() {
        return gtk_widget_modify_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_base(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_widget_modify_base$handle() {
        return gtk_widget_modify_base.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_modify_base(GtkWidget *widget, GtkStateType state, const GdkColor *color)
     * }
     */
    public static void gtk_widget_modify_base(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_modify_base", widget, state, color);
            }
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_modify_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_modify_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_cursor(GtkWidget *widget, const GdkColor *primary, const GdkColor *secondary)
     * }
     */
    public static FunctionDescriptor gtk_widget_modify_cursor$descriptor() {
        return gtk_widget_modify_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_cursor(GtkWidget *widget, const GdkColor *primary, const GdkColor *secondary)
     * }
     */
    public static MethodHandle gtk_widget_modify_cursor$handle() {
        return gtk_widget_modify_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_modify_cursor(GtkWidget *widget, const GdkColor *primary, const GdkColor *secondary)
     * }
     */
    public static void gtk_widget_modify_cursor(MemorySegment widget, MemorySegment primary, MemorySegment secondary) {
        var mh$ = gtk_widget_modify_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_modify_cursor", widget, primary, secondary);
            }
            mh$.invokeExact(widget, primary, secondary);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_modify_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_modify_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_font(GtkWidget *widget, PangoFontDescription *font_desc)
     * }
     */
    public static FunctionDescriptor gtk_widget_modify_font$descriptor() {
        return gtk_widget_modify_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_modify_font(GtkWidget *widget, PangoFontDescription *font_desc)
     * }
     */
    public static MethodHandle gtk_widget_modify_font$handle() {
        return gtk_widget_modify_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_modify_font(GtkWidget *widget, PangoFontDescription *font_desc)
     * }
     */
    public static void gtk_widget_modify_font(MemorySegment widget, MemorySegment font_desc) {
        var mh$ = gtk_widget_modify_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_modify_font", widget, font_desc);
            }
            mh$.invokeExact(widget, font_desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_reset_rc_styles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_reset_rc_styles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_reset_rc_styles(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_reset_rc_styles$descriptor() {
        return gtk_widget_reset_rc_styles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_reset_rc_styles(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_reset_rc_styles$handle() {
        return gtk_widget_reset_rc_styles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_reset_rc_styles(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_reset_rc_styles(MemorySegment widget) {
        var mh$ = gtk_widget_reset_rc_styles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_reset_rc_styles", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_default_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_default_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_widget_get_default_style()
     * }
     */
    public static FunctionDescriptor gtk_widget_get_default_style$descriptor() {
        return gtk_widget_get_default_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyle *gtk_widget_get_default_style()
     * }
     */
    public static MethodHandle gtk_widget_get_default_style$handle() {
        return gtk_widget_get_default_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyle *gtk_widget_get_default_style()
     * }
     */
    public static MemorySegment gtk_widget_get_default_style() {
        var mh$ = gtk_widget_get_default_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_default_style");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
     * }
     */
    public static FunctionDescriptor gtk_widget_path$descriptor() {
        return gtk_widget_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
     * }
     */
    public static MethodHandle gtk_widget_path$handle() {
        return gtk_widget_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
     * }
     */
    public static void gtk_widget_path(MemorySegment widget, MemorySegment path_length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = gtk_widget_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_path", widget, path_length, path, path_reversed);
            }
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_path$descriptor() {
        return gtk_widget_class_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
     * }
     */
    public static MethodHandle gtk_widget_class_path$handle() {
        return gtk_widget_class_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
     * }
     */
    public static void gtk_widget_class_path(MemorySegment widget, MemorySegment path_length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = gtk_widget_class_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_path", widget, path_length, path, path_reversed);
            }
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_render_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_render_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_widget_render_icon(GtkWidget *widget, const gchar *stock_id, GtkIconSize size, const gchar *detail)
     * }
     */
    public static FunctionDescriptor gtk_widget_render_icon$descriptor() {
        return gtk_widget_render_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_widget_render_icon(GtkWidget *widget, const gchar *stock_id, GtkIconSize size, const gchar *detail)
     * }
     */
    public static MethodHandle gtk_widget_render_icon$handle() {
        return gtk_widget_render_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_widget_render_icon(GtkWidget *widget, const gchar *stock_id, GtkIconSize size, const gchar *detail)
     * }
     */
    public static MemorySegment gtk_widget_render_icon(MemorySegment widget, MemorySegment stock_id, int size, MemorySegment detail) {
        var mh$ = gtk_widget_render_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_render_icon", widget, stock_id, size, detail);
            }
            return (MemorySegment)mh$.invokeExact(widget, stock_id, size, detail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_EXPAND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EXPAND = 1
     * }
     */
    public static int GTK_EXPAND() {
        return GTK_EXPAND;
    }
    private static final int GTK_SHRINK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHRINK = 2
     * }
     */
    public static int GTK_SHRINK() {
        return GTK_SHRINK;
    }
    private static final int GTK_FILL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILL = 4
     * }
     */
    public static int GTK_FILL() {
        return GTK_FILL;
    }

    private static class gtk_table_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_table_get_type()
     * }
     */
    public static FunctionDescriptor gtk_table_get_type$descriptor() {
        return gtk_table_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_table_get_type()
     * }
     */
    public static MethodHandle gtk_table_get_type$handle() {
        return gtk_table_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_table_get_type()
     * }
     */
    public static long gtk_table_get_type() {
        var mh$ = gtk_table_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_table_new$descriptor() {
        return gtk_table_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_table_new$handle() {
        return gtk_table_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_table_new(guint rows, guint columns, gboolean homogeneous)
     * }
     */
    public static MemorySegment gtk_table_new(int rows, int columns, int homogeneous) {
        var mh$ = gtk_table_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_new", rows, columns, homogeneous);
            }
            return (MemorySegment)mh$.invokeExact(rows, columns, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_resize(GtkTable *table, guint rows, guint columns)
     * }
     */
    public static FunctionDescriptor gtk_table_resize$descriptor() {
        return gtk_table_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_resize(GtkTable *table, guint rows, guint columns)
     * }
     */
    public static MethodHandle gtk_table_resize$handle() {
        return gtk_table_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_resize(GtkTable *table, guint rows, guint columns)
     * }
     */
    public static void gtk_table_resize(MemorySegment table, int rows, int columns) {
        var mh$ = gtk_table_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_resize", table, rows, columns);
            }
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_attach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
     * }
     */
    public static FunctionDescriptor gtk_table_attach$descriptor() {
        return gtk_table_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
     * }
     */
    public static MethodHandle gtk_table_attach$handle() {
        return gtk_table_attach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
     * }
     */
    public static void gtk_table_attach(MemorySegment table, MemorySegment child, int left_attach, int right_attach, int top_attach, int bottom_attach, int xoptions, int yoptions, int xpadding, int ypadding) {
        var mh$ = gtk_table_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_attach", table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
            }
            mh$.invokeExact(table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_attach_defaults {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_attach_defaults"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_attach_defaults(GtkTable *table, GtkWidget *widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)
     * }
     */
    public static FunctionDescriptor gtk_table_attach_defaults$descriptor() {
        return gtk_table_attach_defaults.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_attach_defaults(GtkTable *table, GtkWidget *widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)
     * }
     */
    public static MethodHandle gtk_table_attach_defaults$handle() {
        return gtk_table_attach_defaults.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_attach_defaults(GtkTable *table, GtkWidget *widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)
     * }
     */
    public static void gtk_table_attach_defaults(MemorySegment table, MemorySegment widget, int left_attach, int right_attach, int top_attach, int bottom_attach) {
        var mh$ = gtk_table_attach_defaults.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_attach_defaults", table, widget, left_attach, right_attach, top_attach, bottom_attach);
            }
            mh$.invokeExact(table, widget, left_attach, right_attach, top_attach, bottom_attach);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_set_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_set_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_set_row_spacing(GtkTable *table, guint row, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_table_set_row_spacing$descriptor() {
        return gtk_table_set_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_set_row_spacing(GtkTable *table, guint row, guint spacing)
     * }
     */
    public static MethodHandle gtk_table_set_row_spacing$handle() {
        return gtk_table_set_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_set_row_spacing(GtkTable *table, guint row, guint spacing)
     * }
     */
    public static void gtk_table_set_row_spacing(MemorySegment table, int row, int spacing) {
        var mh$ = gtk_table_set_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_set_row_spacing", table, row, spacing);
            }
            mh$.invokeExact(table, row, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_get_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_get_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_row_spacing(GtkTable *table, guint row)
     * }
     */
    public static FunctionDescriptor gtk_table_get_row_spacing$descriptor() {
        return gtk_table_get_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_row_spacing(GtkTable *table, guint row)
     * }
     */
    public static MethodHandle gtk_table_get_row_spacing$handle() {
        return gtk_table_get_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_table_get_row_spacing(GtkTable *table, guint row)
     * }
     */
    public static int gtk_table_get_row_spacing(MemorySegment table, int row) {
        var mh$ = gtk_table_get_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_get_row_spacing", table, row);
            }
            return (int)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_set_col_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_set_col_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_set_col_spacing(GtkTable *table, guint column, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_table_set_col_spacing$descriptor() {
        return gtk_table_set_col_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_set_col_spacing(GtkTable *table, guint column, guint spacing)
     * }
     */
    public static MethodHandle gtk_table_set_col_spacing$handle() {
        return gtk_table_set_col_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_set_col_spacing(GtkTable *table, guint column, guint spacing)
     * }
     */
    public static void gtk_table_set_col_spacing(MemorySegment table, int column, int spacing) {
        var mh$ = gtk_table_set_col_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_set_col_spacing", table, column, spacing);
            }
            mh$.invokeExact(table, column, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_get_col_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_get_col_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_col_spacing(GtkTable *table, guint column)
     * }
     */
    public static FunctionDescriptor gtk_table_get_col_spacing$descriptor() {
        return gtk_table_get_col_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_col_spacing(GtkTable *table, guint column)
     * }
     */
    public static MethodHandle gtk_table_get_col_spacing$handle() {
        return gtk_table_get_col_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_table_get_col_spacing(GtkTable *table, guint column)
     * }
     */
    public static int gtk_table_get_col_spacing(MemorySegment table, int column) {
        var mh$ = gtk_table_get_col_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_get_col_spacing", table, column);
            }
            return (int)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_set_row_spacings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_set_row_spacings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_set_row_spacings(GtkTable *table, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_table_set_row_spacings$descriptor() {
        return gtk_table_set_row_spacings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_set_row_spacings(GtkTable *table, guint spacing)
     * }
     */
    public static MethodHandle gtk_table_set_row_spacings$handle() {
        return gtk_table_set_row_spacings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_set_row_spacings(GtkTable *table, guint spacing)
     * }
     */
    public static void gtk_table_set_row_spacings(MemorySegment table, int spacing) {
        var mh$ = gtk_table_set_row_spacings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_set_row_spacings", table, spacing);
            }
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_get_default_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_get_default_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_default_row_spacing(GtkTable *table)
     * }
     */
    public static FunctionDescriptor gtk_table_get_default_row_spacing$descriptor() {
        return gtk_table_get_default_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_default_row_spacing(GtkTable *table)
     * }
     */
    public static MethodHandle gtk_table_get_default_row_spacing$handle() {
        return gtk_table_get_default_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_table_get_default_row_spacing(GtkTable *table)
     * }
     */
    public static int gtk_table_get_default_row_spacing(MemorySegment table) {
        var mh$ = gtk_table_get_default_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_get_default_row_spacing", table);
            }
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_set_col_spacings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_set_col_spacings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_set_col_spacings(GtkTable *table, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_table_set_col_spacings$descriptor() {
        return gtk_table_set_col_spacings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_set_col_spacings(GtkTable *table, guint spacing)
     * }
     */
    public static MethodHandle gtk_table_set_col_spacings$handle() {
        return gtk_table_set_col_spacings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_set_col_spacings(GtkTable *table, guint spacing)
     * }
     */
    public static void gtk_table_set_col_spacings(MemorySegment table, int spacing) {
        var mh$ = gtk_table_set_col_spacings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_set_col_spacings", table, spacing);
            }
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_get_default_col_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_get_default_col_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_default_col_spacing(GtkTable *table)
     * }
     */
    public static FunctionDescriptor gtk_table_get_default_col_spacing$descriptor() {
        return gtk_table_get_default_col_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_table_get_default_col_spacing(GtkTable *table)
     * }
     */
    public static MethodHandle gtk_table_get_default_col_spacing$handle() {
        return gtk_table_get_default_col_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_table_get_default_col_spacing(GtkTable *table)
     * }
     */
    public static int gtk_table_get_default_col_spacing(MemorySegment table) {
        var mh$ = gtk_table_get_default_col_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_get_default_col_spacing", table);
            }
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_set_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_set_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_set_homogeneous(GtkTable *table, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_table_set_homogeneous$descriptor() {
        return gtk_table_set_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_set_homogeneous(GtkTable *table, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_table_set_homogeneous$handle() {
        return gtk_table_set_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_set_homogeneous(GtkTable *table, gboolean homogeneous)
     * }
     */
    public static void gtk_table_set_homogeneous(MemorySegment table, int homogeneous) {
        var mh$ = gtk_table_set_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_set_homogeneous", table, homogeneous);
            }
            mh$.invokeExact(table, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_get_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_get_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_table_get_homogeneous(GtkTable *table)
     * }
     */
    public static FunctionDescriptor gtk_table_get_homogeneous$descriptor() {
        return gtk_table_get_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_table_get_homogeneous(GtkTable *table)
     * }
     */
    public static MethodHandle gtk_table_get_homogeneous$handle() {
        return gtk_table_get_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_table_get_homogeneous(GtkTable *table)
     * }
     */
    public static int gtk_table_get_homogeneous(MemorySegment table) {
        var mh$ = gtk_table_get_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_get_homogeneous", table);
            }
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_table_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_table_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_table_get_size(GtkTable *table, guint *rows, guint *columns)
     * }
     */
    public static FunctionDescriptor gtk_table_get_size$descriptor() {
        return gtk_table_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_table_get_size(GtkTable *table, guint *rows, guint *columns)
     * }
     */
    public static MethodHandle gtk_table_get_size$handle() {
        return gtk_table_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_table_get_size(GtkTable *table, guint *rows, guint *columns)
     * }
     */
    public static void gtk_table_get_size(MemorySegment table, MemorySegment rows, MemorySegment columns) {
        var mh$ = gtk_table_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_table_get_size", table, rows, columns);
            }
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tearoff_menu_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tearoff_menu_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tearoff_menu_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tearoff_menu_item_get_type$descriptor() {
        return gtk_tearoff_menu_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tearoff_menu_item_get_type()
     * }
     */
    public static MethodHandle gtk_tearoff_menu_item_get_type$handle() {
        return gtk_tearoff_menu_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tearoff_menu_item_get_type()
     * }
     */
    public static long gtk_tearoff_menu_item_get_type() {
        var mh$ = gtk_tearoff_menu_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tearoff_menu_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tearoff_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tearoff_menu_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tearoff_menu_item_new()
     * }
     */
    public static FunctionDescriptor gtk_tearoff_menu_item_new$descriptor() {
        return gtk_tearoff_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tearoff_menu_item_new()
     * }
     */
    public static MethodHandle gtk_tearoff_menu_item_new$handle() {
        return gtk_tearoff_menu_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tearoff_menu_item_new()
     * }
     */
    public static MemorySegment gtk_tearoff_menu_item_new() {
        var mh$ = gtk_tearoff_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tearoff_menu_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_theming_engine_get_type()
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_type$descriptor() {
        return gtk_theming_engine_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_theming_engine_get_type()
     * }
     */
    public static MethodHandle gtk_theming_engine_get_type$handle() {
        return gtk_theming_engine_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_theming_engine_get_type()
     * }
     */
    public static long gtk_theming_engine_get_type() {
        var mh$ = gtk_theming_engine_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_register_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_register_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_register_property(const gchar *name_space, GtkStylePropertyParser parse_func, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_register_property$descriptor() {
        return gtk_theming_engine_register_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_register_property(const gchar *name_space, GtkStylePropertyParser parse_func, GParamSpec *pspec)
     * }
     */
    public static MethodHandle gtk_theming_engine_register_property$handle() {
        return gtk_theming_engine_register_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_register_property(const gchar *name_space, GtkStylePropertyParser parse_func, GParamSpec *pspec)
     * }
     */
    public static void gtk_theming_engine_register_property(MemorySegment name_space, MemorySegment parse_func, MemorySegment pspec) {
        var mh$ = gtk_theming_engine_register_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_register_property", name_space, parse_func, pspec);
            }
            mh$.invokeExact(name_space, parse_func, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_property(GtkThemingEngine *engine, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_property$descriptor() {
        return gtk_theming_engine_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_property(GtkThemingEngine *engine, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_property$handle() {
        return gtk_theming_engine_get_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_property(GtkThemingEngine *engine, const gchar *property, GtkStateFlags state, GValue *value)
     * }
     */
    public static void gtk_theming_engine_get_property(MemorySegment engine, MemorySegment property, int state, MemorySegment value) {
        var mh$ = gtk_theming_engine_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_property", engine, property, state, value);
            }
            mh$.invokeExact(engine, property, state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get(GtkThemingEngine *engine, GtkStateFlags state, ...)
     * }
     */
    public static class gtk_theming_engine_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_theming_engine_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_theming_engine_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_theming_engine_get(GtkThemingEngine *engine, GtkStateFlags state, ...)
         * }
         */
        public static gtk_theming_engine_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_theming_engine_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment engine, int state, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_theming_engine_get", engine, state, x2);
                }
                spreader.invokeExact(engine, state, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_theming_engine_get_style_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_style_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_style_property(GtkThemingEngine *engine, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_style_property$descriptor() {
        return gtk_theming_engine_get_style_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_style_property(GtkThemingEngine *engine, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_style_property$handle() {
        return gtk_theming_engine_get_style_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_style_property(GtkThemingEngine *engine, const gchar *property_name, GValue *value)
     * }
     */
    public static void gtk_theming_engine_get_style_property(MemorySegment engine, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_theming_engine_get_style_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_style_property", engine, property_name, value);
            }
            mh$.invokeExact(engine, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_style(GtkThemingEngine *engine, ...)
     * }
     */
    public static class gtk_theming_engine_get_style {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_theming_engine_get_style");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_theming_engine_get_style(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_theming_engine_get_style(GtkThemingEngine *engine, ...)
         * }
         */
        public static gtk_theming_engine_get_style makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_theming_engine_get_style(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment engine, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_theming_engine_get_style", engine, x1);
                }
                spreader.invokeExact(engine, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_theming_engine_lookup_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_lookup_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_lookup_color(GtkThemingEngine *engine, const gchar *color_name, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_lookup_color$descriptor() {
        return gtk_theming_engine_lookup_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_lookup_color(GtkThemingEngine *engine, const gchar *color_name, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_theming_engine_lookup_color$handle() {
        return gtk_theming_engine_lookup_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_lookup_color(GtkThemingEngine *engine, const gchar *color_name, GdkRGBA *color)
     * }
     */
    public static int gtk_theming_engine_lookup_color(MemorySegment engine, MemorySegment color_name, MemorySegment color) {
        var mh$ = gtk_theming_engine_lookup_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_lookup_color", engine, color_name, color);
            }
            return (int)mh$.invokeExact(engine, color_name, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_theming_engine_get_path(GtkThemingEngine *engine)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_path$descriptor() {
        return gtk_theming_engine_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_theming_engine_get_path(GtkThemingEngine *engine)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_path$handle() {
        return gtk_theming_engine_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GtkWidgetPath *gtk_theming_engine_get_path(GtkThemingEngine *engine)
     * }
     */
    public static MemorySegment gtk_theming_engine_get_path(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_path", engine);
            }
            return (MemorySegment)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_has_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_has_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_has_class(GtkThemingEngine *engine, const gchar *style_class)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_has_class$descriptor() {
        return gtk_theming_engine_has_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_has_class(GtkThemingEngine *engine, const gchar *style_class)
     * }
     */
    public static MethodHandle gtk_theming_engine_has_class$handle() {
        return gtk_theming_engine_has_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_has_class(GtkThemingEngine *engine, const gchar *style_class)
     * }
     */
    public static int gtk_theming_engine_has_class(MemorySegment engine, MemorySegment style_class) {
        var mh$ = gtk_theming_engine_has_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_has_class", engine, style_class);
            }
            return (int)mh$.invokeExact(engine, style_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_has_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_has_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_has_region(GtkThemingEngine *engine, const gchar *style_region, GtkRegionFlags *flags)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_has_region$descriptor() {
        return gtk_theming_engine_has_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_has_region(GtkThemingEngine *engine, const gchar *style_region, GtkRegionFlags *flags)
     * }
     */
    public static MethodHandle gtk_theming_engine_has_region$handle() {
        return gtk_theming_engine_has_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_has_region(GtkThemingEngine *engine, const gchar *style_region, GtkRegionFlags *flags)
     * }
     */
    public static int gtk_theming_engine_has_region(MemorySegment engine, MemorySegment style_region, MemorySegment flags) {
        var mh$ = gtk_theming_engine_has_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_has_region", engine, style_region, flags);
            }
            return (int)mh$.invokeExact(engine, style_region, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_theming_engine_get_state(GtkThemingEngine *engine)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_state$descriptor() {
        return gtk_theming_engine_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_theming_engine_get_state(GtkThemingEngine *engine)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_state$handle() {
        return gtk_theming_engine_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_theming_engine_get_state(GtkThemingEngine *engine)
     * }
     */
    public static int gtk_theming_engine_get_state(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_state", engine);
            }
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_state_is_running {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_state_is_running"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_state_is_running(GtkThemingEngine *engine, GtkStateType state, gdouble *progress)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_state_is_running$descriptor() {
        return gtk_theming_engine_state_is_running.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_state_is_running(GtkThemingEngine *engine, GtkStateType state, gdouble *progress)
     * }
     */
    public static MethodHandle gtk_theming_engine_state_is_running$handle() {
        return gtk_theming_engine_state_is_running.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_theming_engine_state_is_running(GtkThemingEngine *engine, GtkStateType state, gdouble *progress)
     * }
     */
    public static int gtk_theming_engine_state_is_running(MemorySegment engine, int state, MemorySegment progress) {
        var mh$ = gtk_theming_engine_state_is_running.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_state_is_running", engine, state, progress);
            }
            return (int)mh$.invokeExact(engine, state, progress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_theming_engine_get_direction(GtkThemingEngine *engine)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_direction$descriptor() {
        return gtk_theming_engine_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_theming_engine_get_direction(GtkThemingEngine *engine)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_direction$handle() {
        return gtk_theming_engine_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_theming_engine_get_direction(GtkThemingEngine *engine)
     * }
     */
    public static int gtk_theming_engine_get_direction(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_direction", engine);
            }
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_junction_sides {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_junction_sides"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkJunctionSides gtk_theming_engine_get_junction_sides(GtkThemingEngine *engine)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_junction_sides$descriptor() {
        return gtk_theming_engine_get_junction_sides.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkJunctionSides gtk_theming_engine_get_junction_sides(GtkThemingEngine *engine)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_junction_sides$handle() {
        return gtk_theming_engine_get_junction_sides.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkJunctionSides gtk_theming_engine_get_junction_sides(GtkThemingEngine *engine)
     * }
     */
    public static int gtk_theming_engine_get_junction_sides(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_junction_sides.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_junction_sides", engine);
            }
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_color$descriptor() {
        return gtk_theming_engine_get_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_color$handle() {
        return gtk_theming_engine_get_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static void gtk_theming_engine_get_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_color", engine, state, color);
            }
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_background_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_background_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_background_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_background_color$descriptor() {
        return gtk_theming_engine_get_background_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_background_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_background_color$handle() {
        return gtk_theming_engine_get_background_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_background_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static void gtk_theming_engine_get_background_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_background_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_background_color", engine, state, color);
            }
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_border_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_border_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_border_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_border_color$descriptor() {
        return gtk_theming_engine_get_border_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_border_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_border_color$handle() {
        return gtk_theming_engine_get_border_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_border_color(GtkThemingEngine *engine, GtkStateFlags state, GdkRGBA *color)
     * }
     */
    public static void gtk_theming_engine_get_border_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_border_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_border_color", engine, state, color);
            }
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_border(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *border)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_border$descriptor() {
        return gtk_theming_engine_get_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_border(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *border)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_border$handle() {
        return gtk_theming_engine_get_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_border(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *border)
     * }
     */
    public static void gtk_theming_engine_get_border(MemorySegment engine, int state, MemorySegment border) {
        var mh$ = gtk_theming_engine_get_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_border", engine, state, border);
            }
            mh$.invokeExact(engine, state, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_padding(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *padding)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_padding$descriptor() {
        return gtk_theming_engine_get_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_padding(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *padding)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_padding$handle() {
        return gtk_theming_engine_get_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_padding(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *padding)
     * }
     */
    public static void gtk_theming_engine_get_padding(MemorySegment engine, int state, MemorySegment padding) {
        var mh$ = gtk_theming_engine_get_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_padding", engine, state, padding);
            }
            mh$.invokeExact(engine, state, padding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_margin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_margin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_margin(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *margin)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_margin$descriptor() {
        return gtk_theming_engine_get_margin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_margin(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *margin)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_margin$handle() {
        return gtk_theming_engine_get_margin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_theming_engine_get_margin(GtkThemingEngine *engine, GtkStateFlags state, GtkBorder *margin)
     * }
     */
    public static void gtk_theming_engine_get_margin(MemorySegment engine, int state, MemorySegment margin) {
        var mh$ = gtk_theming_engine_get_margin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_margin", engine, state, margin);
            }
            mh$.invokeExact(engine, state, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const PangoFontDescription *gtk_theming_engine_get_font(GtkThemingEngine *engine, GtkStateFlags state)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_font$descriptor() {
        return gtk_theming_engine_get_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const PangoFontDescription *gtk_theming_engine_get_font(GtkThemingEngine *engine, GtkStateFlags state)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_font$handle() {
        return gtk_theming_engine_get_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const PangoFontDescription *gtk_theming_engine_get_font(GtkThemingEngine *engine, GtkStateFlags state)
     * }
     */
    public static MemorySegment gtk_theming_engine_get_font(MemorySegment engine, int state) {
        var mh$ = gtk_theming_engine_get_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_font", engine, state);
            }
            return (MemorySegment)mh$.invokeExact(engine, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_load"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkThemingEngine *gtk_theming_engine_load(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_load$descriptor() {
        return gtk_theming_engine_load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkThemingEngine *gtk_theming_engine_load(const gchar *name)
     * }
     */
    public static MethodHandle gtk_theming_engine_load$handle() {
        return gtk_theming_engine_load.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkThemingEngine *gtk_theming_engine_load(const gchar *name)
     * }
     */
    public static MemorySegment gtk_theming_engine_load(MemorySegment name) {
        var mh$ = gtk_theming_engine_load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_load", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_theming_engine_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_theming_engine_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_theming_engine_get_screen(GtkThemingEngine *engine)
     * }
     */
    public static FunctionDescriptor gtk_theming_engine_get_screen$descriptor() {
        return gtk_theming_engine_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_theming_engine_get_screen(GtkThemingEngine *engine)
     * }
     */
    public static MethodHandle gtk_theming_engine_get_screen$handle() {
        return gtk_theming_engine_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gtk_theming_engine_get_screen(GtkThemingEngine *engine)
     * }
     */
    public static MemorySegment gtk_theming_engine_get_screen(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_theming_engine_get_screen", engine);
            }
            return (MemorySegment)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_UI_MANAGER_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_AUTO = 0
     * }
     */
    public static int GTK_UI_MANAGER_AUTO() {
        return GTK_UI_MANAGER_AUTO;
    }
    private static final int GTK_UI_MANAGER_MENUBAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_MENUBAR = 1
     * }
     */
    public static int GTK_UI_MANAGER_MENUBAR() {
        return GTK_UI_MANAGER_MENUBAR;
    }
    private static final int GTK_UI_MANAGER_MENU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_MENU = 2
     * }
     */
    public static int GTK_UI_MANAGER_MENU() {
        return GTK_UI_MANAGER_MENU;
    }
    private static final int GTK_UI_MANAGER_TOOLBAR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_TOOLBAR = 4
     * }
     */
    public static int GTK_UI_MANAGER_TOOLBAR() {
        return GTK_UI_MANAGER_TOOLBAR;
    }
    private static final int GTK_UI_MANAGER_PLACEHOLDER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_PLACEHOLDER = 8
     * }
     */
    public static int GTK_UI_MANAGER_PLACEHOLDER() {
        return GTK_UI_MANAGER_PLACEHOLDER;
    }
    private static final int GTK_UI_MANAGER_POPUP = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_POPUP = 16
     * }
     */
    public static int GTK_UI_MANAGER_POPUP() {
        return GTK_UI_MANAGER_POPUP;
    }
    private static final int GTK_UI_MANAGER_MENUITEM = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_MENUITEM = 32
     * }
     */
    public static int GTK_UI_MANAGER_MENUITEM() {
        return GTK_UI_MANAGER_MENUITEM;
    }
    private static final int GTK_UI_MANAGER_TOOLITEM = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_TOOLITEM = 64
     * }
     */
    public static int GTK_UI_MANAGER_TOOLITEM() {
        return GTK_UI_MANAGER_TOOLITEM;
    }
    private static final int GTK_UI_MANAGER_SEPARATOR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_SEPARATOR = 128
     * }
     */
    public static int GTK_UI_MANAGER_SEPARATOR() {
        return GTK_UI_MANAGER_SEPARATOR;
    }
    private static final int GTK_UI_MANAGER_ACCELERATOR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_ACCELERATOR = 256
     * }
     */
    public static int GTK_UI_MANAGER_ACCELERATOR() {
        return GTK_UI_MANAGER_ACCELERATOR;
    }
    private static final int GTK_UI_MANAGER_POPUP_WITH_ACCELS = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512
     * }
     */
    public static int GTK_UI_MANAGER_POPUP_WITH_ACCELS() {
        return GTK_UI_MANAGER_POPUP_WITH_ACCELS;
    }

    private static class gtk_ui_manager_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_ui_manager_get_type()
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_type$descriptor() {
        return gtk_ui_manager_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_ui_manager_get_type()
     * }
     */
    public static MethodHandle gtk_ui_manager_get_type$handle() {
        return gtk_ui_manager_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_ui_manager_get_type()
     * }
     */
    public static long gtk_ui_manager_get_type() {
        var mh$ = gtk_ui_manager_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkUIManager *gtk_ui_manager_new()
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_new$descriptor() {
        return gtk_ui_manager_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkUIManager *gtk_ui_manager_new()
     * }
     */
    public static MethodHandle gtk_ui_manager_new$handle() {
        return gtk_ui_manager_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkUIManager *gtk_ui_manager_new()
     * }
     */
    public static MemorySegment gtk_ui_manager_new() {
        var mh$ = gtk_ui_manager_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_set_add_tearoffs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_set_add_tearoffs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_set_add_tearoffs(GtkUIManager *manager, gboolean add_tearoffs)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_set_add_tearoffs$descriptor() {
        return gtk_ui_manager_set_add_tearoffs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_set_add_tearoffs(GtkUIManager *manager, gboolean add_tearoffs)
     * }
     */
    public static MethodHandle gtk_ui_manager_set_add_tearoffs$handle() {
        return gtk_ui_manager_set_add_tearoffs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_set_add_tearoffs(GtkUIManager *manager, gboolean add_tearoffs)
     * }
     */
    public static void gtk_ui_manager_set_add_tearoffs(MemorySegment manager, int add_tearoffs) {
        var mh$ = gtk_ui_manager_set_add_tearoffs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_set_add_tearoffs", manager, add_tearoffs);
            }
            mh$.invokeExact(manager, add_tearoffs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_add_tearoffs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_add_tearoffs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_ui_manager_get_add_tearoffs(GtkUIManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_add_tearoffs$descriptor() {
        return gtk_ui_manager_get_add_tearoffs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_ui_manager_get_add_tearoffs(GtkUIManager *manager)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_add_tearoffs$handle() {
        return gtk_ui_manager_get_add_tearoffs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_ui_manager_get_add_tearoffs(GtkUIManager *manager)
     * }
     */
    public static int gtk_ui_manager_get_add_tearoffs(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_add_tearoffs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_add_tearoffs", manager);
            }
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_insert_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_insert_action_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_insert_action_group(GtkUIManager *manager, GtkActionGroup *action_group, gint pos)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_insert_action_group$descriptor() {
        return gtk_ui_manager_insert_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_insert_action_group(GtkUIManager *manager, GtkActionGroup *action_group, gint pos)
     * }
     */
    public static MethodHandle gtk_ui_manager_insert_action_group$handle() {
        return gtk_ui_manager_insert_action_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_insert_action_group(GtkUIManager *manager, GtkActionGroup *action_group, gint pos)
     * }
     */
    public static void gtk_ui_manager_insert_action_group(MemorySegment manager, MemorySegment action_group, int pos) {
        var mh$ = gtk_ui_manager_insert_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_insert_action_group", manager, action_group, pos);
            }
            mh$.invokeExact(manager, action_group, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_remove_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_remove_action_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_remove_action_group(GtkUIManager *manager, GtkActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_remove_action_group$descriptor() {
        return gtk_ui_manager_remove_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_remove_action_group(GtkUIManager *manager, GtkActionGroup *action_group)
     * }
     */
    public static MethodHandle gtk_ui_manager_remove_action_group$handle() {
        return gtk_ui_manager_remove_action_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_remove_action_group(GtkUIManager *manager, GtkActionGroup *action_group)
     * }
     */
    public static void gtk_ui_manager_remove_action_group(MemorySegment manager, MemorySegment action_group) {
        var mh$ = gtk_ui_manager_remove_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_remove_action_group", manager, action_group);
            }
            mh$.invokeExact(manager, action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_action_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_action_groups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_ui_manager_get_action_groups(GtkUIManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_action_groups$descriptor() {
        return gtk_ui_manager_get_action_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_ui_manager_get_action_groups(GtkUIManager *manager)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_action_groups$handle() {
        return gtk_ui_manager_get_action_groups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_ui_manager_get_action_groups(GtkUIManager *manager)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_action_groups(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_action_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_action_groups", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_ui_manager_get_accel_group(GtkUIManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_accel_group$descriptor() {
        return gtk_ui_manager_get_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_ui_manager_get_accel_group(GtkUIManager *manager)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_accel_group$handle() {
        return gtk_ui_manager_get_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_ui_manager_get_accel_group(GtkUIManager *manager)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_accel_group(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_accel_group", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_ui_manager_get_widget(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_widget$descriptor() {
        return gtk_ui_manager_get_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_ui_manager_get_widget(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_widget$handle() {
        return gtk_ui_manager_get_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_ui_manager_get_widget(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_widget(MemorySegment manager, MemorySegment path) {
        var mh$ = gtk_ui_manager_get_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_widget", manager, path);
            }
            return (MemorySegment)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_toplevels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_toplevels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_ui_manager_get_toplevels(GtkUIManager *manager, GtkUIManagerItemType types)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_toplevels$descriptor() {
        return gtk_ui_manager_get_toplevels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_ui_manager_get_toplevels(GtkUIManager *manager, GtkUIManagerItemType types)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_toplevels$handle() {
        return gtk_ui_manager_get_toplevels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_ui_manager_get_toplevels(GtkUIManager *manager, GtkUIManagerItemType types)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_toplevels(MemorySegment manager, int types) {
        var mh$ = gtk_ui_manager_get_toplevels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_toplevels", manager, types);
            }
            return (MemorySegment)mh$.invokeExact(manager, types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_ui_manager_get_action(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_action$descriptor() {
        return gtk_ui_manager_get_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAction *gtk_ui_manager_get_action(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_action$handle() {
        return gtk_ui_manager_get_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAction *gtk_ui_manager_get_action(GtkUIManager *manager, const gchar *path)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_action(MemorySegment manager, MemorySegment path) {
        var mh$ = gtk_ui_manager_get_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_action", manager, path);
            }
            return (MemorySegment)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_add_ui_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_add_ui_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_string(GtkUIManager *manager, const gchar *buffer, gssize length, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_add_ui_from_string$descriptor() {
        return gtk_ui_manager_add_ui_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_string(GtkUIManager *manager, const gchar *buffer, gssize length, GError **error)
     * }
     */
    public static MethodHandle gtk_ui_manager_add_ui_from_string$handle() {
        return gtk_ui_manager_add_ui_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_string(GtkUIManager *manager, const gchar *buffer, gssize length, GError **error)
     * }
     */
    public static int gtk_ui_manager_add_ui_from_string(MemorySegment manager, MemorySegment buffer, long length, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_add_ui_from_string", manager, buffer, length, error);
            }
            return (int)mh$.invokeExact(manager, buffer, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_add_ui_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_add_ui_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_file(GtkUIManager *manager, const gchar *filename, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_add_ui_from_file$descriptor() {
        return gtk_ui_manager_add_ui_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_file(GtkUIManager *manager, const gchar *filename, GError **error)
     * }
     */
    public static MethodHandle gtk_ui_manager_add_ui_from_file$handle() {
        return gtk_ui_manager_add_ui_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_file(GtkUIManager *manager, const gchar *filename, GError **error)
     * }
     */
    public static int gtk_ui_manager_add_ui_from_file(MemorySegment manager, MemorySegment filename, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_add_ui_from_file", manager, filename, error);
            }
            return (int)mh$.invokeExact(manager, filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_add_ui_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_add_ui_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_resource(GtkUIManager *manager, const gchar *resource_path, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_add_ui_from_resource$descriptor() {
        return gtk_ui_manager_add_ui_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_resource(GtkUIManager *manager, const gchar *resource_path, GError **error)
     * }
     */
    public static MethodHandle gtk_ui_manager_add_ui_from_resource$handle() {
        return gtk_ui_manager_add_ui_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_add_ui_from_resource(GtkUIManager *manager, const gchar *resource_path, GError **error)
     * }
     */
    public static int gtk_ui_manager_add_ui_from_resource(MemorySegment manager, MemorySegment resource_path, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_add_ui_from_resource", manager, resource_path, error);
            }
            return (int)mh$.invokeExact(manager, resource_path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_add_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_add_ui"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_add_ui(GtkUIManager *manager, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_add_ui$descriptor() {
        return gtk_ui_manager_add_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_add_ui(GtkUIManager *manager, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top)
     * }
     */
    public static MethodHandle gtk_ui_manager_add_ui$handle() {
        return gtk_ui_manager_add_ui.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_add_ui(GtkUIManager *manager, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top)
     * }
     */
    public static void gtk_ui_manager_add_ui(MemorySegment manager, int merge_id, MemorySegment path, MemorySegment name, MemorySegment action, int type, int top) {
        var mh$ = gtk_ui_manager_add_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_add_ui", manager, merge_id, path, name, action, type, top);
            }
            mh$.invokeExact(manager, merge_id, path, name, action, type, top);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_remove_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_remove_ui"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_remove_ui(GtkUIManager *manager, guint merge_id)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_remove_ui$descriptor() {
        return gtk_ui_manager_remove_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_remove_ui(GtkUIManager *manager, guint merge_id)
     * }
     */
    public static MethodHandle gtk_ui_manager_remove_ui$handle() {
        return gtk_ui_manager_remove_ui.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_remove_ui(GtkUIManager *manager, guint merge_id)
     * }
     */
    public static void gtk_ui_manager_remove_ui(MemorySegment manager, int merge_id) {
        var mh$ = gtk_ui_manager_remove_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_remove_ui", manager, merge_id);
            }
            mh$.invokeExact(manager, merge_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_get_ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_get_ui"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_ui_manager_get_ui(GtkUIManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_get_ui$descriptor() {
        return gtk_ui_manager_get_ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_ui_manager_get_ui(GtkUIManager *manager)
     * }
     */
    public static MethodHandle gtk_ui_manager_get_ui$handle() {
        return gtk_ui_manager_get_ui.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_ui_manager_get_ui(GtkUIManager *manager)
     * }
     */
    public static MemorySegment gtk_ui_manager_get_ui(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_get_ui", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_ensure_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_ensure_update"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_ensure_update(GtkUIManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_ensure_update$descriptor() {
        return gtk_ui_manager_ensure_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_ui_manager_ensure_update(GtkUIManager *manager)
     * }
     */
    public static MethodHandle gtk_ui_manager_ensure_update$handle() {
        return gtk_ui_manager_ensure_update.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_ui_manager_ensure_update(GtkUIManager *manager)
     * }
     */
    public static void gtk_ui_manager_ensure_update(MemorySegment manager) {
        var mh$ = gtk_ui_manager_ensure_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_ensure_update", manager);
            }
            mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_ui_manager_new_merge_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_ui_manager_new_merge_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_new_merge_id(GtkUIManager *manager)
     * }
     */
    public static FunctionDescriptor gtk_ui_manager_new_merge_id$descriptor() {
        return gtk_ui_manager_new_merge_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_new_merge_id(GtkUIManager *manager)
     * }
     */
    public static MethodHandle gtk_ui_manager_new_merge_id$handle() {
        return gtk_ui_manager_new_merge_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_ui_manager_new_merge_id(GtkUIManager *manager)
     * }
     */
    public static int gtk_ui_manager_new_merge_id(MemorySegment manager) {
        var mh$ = gtk_ui_manager_new_merge_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_ui_manager_new_merge_id", manager);
            }
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vbutton_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vbutton_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_vbutton_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_vbutton_box_get_type$descriptor() {
        return gtk_vbutton_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_vbutton_box_get_type()
     * }
     */
    public static MethodHandle gtk_vbutton_box_get_type$handle() {
        return gtk_vbutton_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_vbutton_box_get_type()
     * }
     */
    public static long gtk_vbutton_box_get_type() {
        var mh$ = gtk_vbutton_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vbutton_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vbutton_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vbutton_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vbutton_box_new()
     * }
     */
    public static FunctionDescriptor gtk_vbutton_box_new$descriptor() {
        return gtk_vbutton_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vbutton_box_new()
     * }
     */
    public static MethodHandle gtk_vbutton_box_new$handle() {
        return gtk_vbutton_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vbutton_box_new()
     * }
     */
    public static MemorySegment gtk_vbutton_box_new() {
        var mh$ = gtk_vbutton_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vbutton_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vbox_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vbox_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_vbox_get_type()
     * }
     */
    public static FunctionDescriptor gtk_vbox_get_type$descriptor() {
        return gtk_vbox_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_vbox_get_type()
     * }
     */
    public static MethodHandle gtk_vbox_get_type$handle() {
        return gtk_vbox_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_vbox_get_type()
     * }
     */
    public static long gtk_vbox_get_type() {
        var mh$ = gtk_vbox_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vbox_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vbox_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vbox_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vbox_new(gboolean homogeneous, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_vbox_new$descriptor() {
        return gtk_vbox_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vbox_new(gboolean homogeneous, gint spacing)
     * }
     */
    public static MethodHandle gtk_vbox_new$handle() {
        return gtk_vbox_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vbox_new(gboolean homogeneous, gint spacing)
     * }
     */
    public static MemorySegment gtk_vbox_new(int homogeneous, int spacing) {
        var mh$ = gtk_vbox_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vbox_new", homogeneous, spacing);
            }
            return (MemorySegment)mh$.invokeExact(homogeneous, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vpaned_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vpaned_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_vpaned_get_type()
     * }
     */
    public static FunctionDescriptor gtk_vpaned_get_type$descriptor() {
        return gtk_vpaned_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_vpaned_get_type()
     * }
     */
    public static MethodHandle gtk_vpaned_get_type$handle() {
        return gtk_vpaned_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_vpaned_get_type()
     * }
     */
    public static long gtk_vpaned_get_type() {
        var mh$ = gtk_vpaned_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vpaned_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vpaned_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vpaned_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vpaned_new()
     * }
     */
    public static FunctionDescriptor gtk_vpaned_new$descriptor() {
        return gtk_vpaned_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vpaned_new()
     * }
     */
    public static MethodHandle gtk_vpaned_new$handle() {
        return gtk_vpaned_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vpaned_new()
     * }
     */
    public static MemorySegment gtk_vpaned_new() {
        var mh$ = gtk_vpaned_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vpaned_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vscale_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vscale_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_vscale_get_type()
     * }
     */
    public static FunctionDescriptor gtk_vscale_get_type$descriptor() {
        return gtk_vscale_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_vscale_get_type()
     * }
     */
    public static MethodHandle gtk_vscale_get_type$handle() {
        return gtk_vscale_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_vscale_get_type()
     * }
     */
    public static long gtk_vscale_get_type() {
        var mh$ = gtk_vscale_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vscale_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vscale_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vscale_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscale_new(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_vscale_new$descriptor() {
        return gtk_vscale_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscale_new(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_vscale_new$handle() {
        return gtk_vscale_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscale_new(GtkAdjustment *adjustment)
     * }
     */
    public static MemorySegment gtk_vscale_new(MemorySegment adjustment) {
        var mh$ = gtk_vscale_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vscale_new", adjustment);
            }
            return (MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vscale_new_with_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vscale_new_with_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscale_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static FunctionDescriptor gtk_vscale_new_with_range$descriptor() {
        return gtk_vscale_new_with_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscale_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MethodHandle gtk_vscale_new_with_range$handle() {
        return gtk_vscale_new_with_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscale_new_with_range(gdouble min, gdouble max, gdouble step)
     * }
     */
    public static MemorySegment gtk_vscale_new_with_range(double min, double max, double step) {
        var mh$ = gtk_vscale_new_with_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vscale_new_with_range", min, max, step);
            }
            return (MemorySegment)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vscrollbar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vscrollbar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_vscrollbar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_vscrollbar_get_type$descriptor() {
        return gtk_vscrollbar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_vscrollbar_get_type()
     * }
     */
    public static MethodHandle gtk_vscrollbar_get_type$handle() {
        return gtk_vscrollbar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_vscrollbar_get_type()
     * }
     */
    public static long gtk_vscrollbar_get_type() {
        var mh$ = gtk_vscrollbar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vscrollbar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vscrollbar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vscrollbar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscrollbar_new(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_vscrollbar_new$descriptor() {
        return gtk_vscrollbar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscrollbar_new(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_vscrollbar_new$handle() {
        return gtk_vscrollbar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vscrollbar_new(GtkAdjustment *adjustment)
     * }
     */
    public static MemorySegment gtk_vscrollbar_new(MemorySegment adjustment) {
        var mh$ = gtk_vscrollbar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vscrollbar_new", adjustment);
            }
            return (MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vseparator_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vseparator_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_vseparator_get_type()
     * }
     */
    public static FunctionDescriptor gtk_vseparator_get_type$descriptor() {
        return gtk_vseparator_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_vseparator_get_type()
     * }
     */
    public static MethodHandle gtk_vseparator_get_type$handle() {
        return gtk_vseparator_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_vseparator_get_type()
     * }
     */
    public static long gtk_vseparator_get_type() {
        var mh$ = gtk_vseparator_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vseparator_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_vseparator_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_vseparator_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vseparator_new()
     * }
     */
    public static FunctionDescriptor gtk_vseparator_new$descriptor() {
        return gtk_vseparator_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vseparator_new()
     * }
     */
    public static MethodHandle gtk_vseparator_new$handle() {
        return gtk_vseparator_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_vseparator_new()
     * }
     */
    public static MemorySegment gtk_vseparator_new() {
        var mh$ = gtk_vseparator_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_vseparator_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkAccessible *GtkAccessible_autoptr
     * }
     */
    public static final AddressLayout GtkAccessible_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAccessible_listautoptr
     * }
     */
    public static final AddressLayout GtkAccessible_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAccessible_slistautoptr
     * }
     */
    public static final AddressLayout GtkAccessible_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAccessible_queueautoptr
     * }
     */
    public static final AddressLayout GtkAccessible_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkActionBar *GtkActionBar_autoptr
     * }
     */
    public static final AddressLayout GtkActionBar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkActionBar_listautoptr
     * }
     */
    public static final AddressLayout GtkActionBar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkActionBar_slistautoptr
     * }
     */
    public static final AddressLayout GtkActionBar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkActionBar_queueautoptr
     * }
     */
    public static final AddressLayout GtkActionBar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkActionable *GtkActionable_autoptr
     * }
     */
    public static final AddressLayout GtkActionable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkActionable_listautoptr
     * }
     */
    public static final AddressLayout GtkActionable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkActionable_slistautoptr
     * }
     */
    public static final AddressLayout GtkActionable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkActionable_queueautoptr
     * }
     */
    public static final AddressLayout GtkActionable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkAdjustment *GtkAdjustment_autoptr
     * }
     */
    public static final AddressLayout GtkAdjustment_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAdjustment_listautoptr
     * }
     */
    public static final AddressLayout GtkAdjustment_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAdjustment_slistautoptr
     * }
     */
    public static final AddressLayout GtkAdjustment_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAdjustment_queueautoptr
     * }
     */
    public static final AddressLayout GtkAdjustment_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkAppChooser *GtkAppChooser_autoptr
     * }
     */
    public static final AddressLayout GtkAppChooser_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAppChooser_listautoptr
     * }
     */
    public static final AddressLayout GtkAppChooser_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAppChooser_slistautoptr
     * }
     */
    public static final AddressLayout GtkAppChooser_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAppChooser_queueautoptr
     * }
     */
    public static final AddressLayout GtkAppChooser_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkAppChooserButton *GtkAppChooserButton_autoptr
     * }
     */
    public static final AddressLayout GtkAppChooserButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAppChooserButton_listautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAppChooserButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAppChooserButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkAppChooserDialog *GtkAppChooserDialog_autoptr
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAppChooserDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAppChooserDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAppChooserDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkAppChooserWidget *GtkAppChooserWidget_autoptr
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAppChooserWidget_listautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAppChooserWidget_slistautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAppChooserWidget_queueautoptr
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkApplicationWindow *GtkApplicationWindow_autoptr
     * }
     */
    public static final AddressLayout GtkApplicationWindow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkApplicationWindow_listautoptr
     * }
     */
    public static final AddressLayout GtkApplicationWindow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkApplicationWindow_slistautoptr
     * }
     */
    public static final AddressLayout GtkApplicationWindow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkApplicationWindow_queueautoptr
     * }
     */
    public static final AddressLayout GtkApplicationWindow_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkAspectFrame *GtkAspectFrame_autoptr
     * }
     */
    public static final AddressLayout GtkAspectFrame_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAspectFrame_listautoptr
     * }
     */
    public static final AddressLayout GtkAspectFrame_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAspectFrame_slistautoptr
     * }
     */
    public static final AddressLayout GtkAspectFrame_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAspectFrame_queueautoptr
     * }
     */
    public static final AddressLayout GtkAspectFrame_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkAssistant *GtkAssistant_autoptr
     * }
     */
    public static final AddressLayout GtkAssistant_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAssistant_listautoptr
     * }
     */
    public static final AddressLayout GtkAssistant_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAssistant_slistautoptr
     * }
     */
    public static final AddressLayout GtkAssistant_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAssistant_queueautoptr
     * }
     */
    public static final AddressLayout GtkAssistant_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkBox *GtkBox_autoptr
     * }
     */
    public static final AddressLayout GtkBox_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkBox_listautoptr
     * }
     */
    public static final AddressLayout GtkBox_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkBox_slistautoptr
     * }
     */
    public static final AddressLayout GtkBox_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkBox_queueautoptr
     * }
     */
    public static final AddressLayout GtkBox_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkBuildable *GtkBuildable_autoptr
     * }
     */
    public static final AddressLayout GtkBuildable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkBuildable_listautoptr
     * }
     */
    public static final AddressLayout GtkBuildable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkBuildable_slistautoptr
     * }
     */
    public static final AddressLayout GtkBuildable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkBuildable_queueautoptr
     * }
     */
    public static final AddressLayout GtkBuildable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkBuilder *GtkBuilder_autoptr
     * }
     */
    public static final AddressLayout GtkBuilder_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkBuilder_listautoptr
     * }
     */
    public static final AddressLayout GtkBuilder_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkBuilder_slistautoptr
     * }
     */
    public static final AddressLayout GtkBuilder_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkBuilder_queueautoptr
     * }
     */
    public static final AddressLayout GtkBuilder_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkButton *GtkButton_autoptr
     * }
     */
    public static final AddressLayout GtkButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkButton_listautoptr
     * }
     */
    public static final AddressLayout GtkButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkButtonBox *GtkButtonBox_autoptr
     * }
     */
    public static final AddressLayout GtkButtonBox_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkButtonBox_listautoptr
     * }
     */
    public static final AddressLayout GtkButtonBox_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkButtonBox_slistautoptr
     * }
     */
    public static final AddressLayout GtkButtonBox_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkButtonBox_queueautoptr
     * }
     */
    public static final AddressLayout GtkButtonBox_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCalendar *GtkCalendar_autoptr
     * }
     */
    public static final AddressLayout GtkCalendar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCalendar_listautoptr
     * }
     */
    public static final AddressLayout GtkCalendar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCalendar_slistautoptr
     * }
     */
    public static final AddressLayout GtkCalendar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCalendar_queueautoptr
     * }
     */
    public static final AddressLayout GtkCalendar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellArea *GtkCellArea_autoptr
     * }
     */
    public static final AddressLayout GtkCellArea_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellArea_listautoptr
     * }
     */
    public static final AddressLayout GtkCellArea_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellArea_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellArea_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellArea_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellArea_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellAreaBox *GtkCellAreaBox_autoptr
     * }
     */
    public static final AddressLayout GtkCellAreaBox_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellAreaBox_listautoptr
     * }
     */
    public static final AddressLayout GtkCellAreaBox_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellAreaBox_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellAreaBox_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellAreaBox_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellAreaBox_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellAreaContext *GtkCellAreaContext_autoptr
     * }
     */
    public static final AddressLayout GtkCellAreaContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellAreaContext_listautoptr
     * }
     */
    public static final AddressLayout GtkCellAreaContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellAreaContext_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellAreaContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellAreaContext_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellAreaContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellEditable *GtkCellEditable_autoptr
     * }
     */
    public static final AddressLayout GtkCellEditable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellEditable_listautoptr
     * }
     */
    public static final AddressLayout GtkCellEditable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellEditable_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellEditable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellEditable_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellEditable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellLayout *GtkCellLayout_autoptr
     * }
     */
    public static final AddressLayout GtkCellLayout_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellLayout_listautoptr
     * }
     */
    public static final AddressLayout GtkCellLayout_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellLayout_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellLayout_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellLayout_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellLayout_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRenderer *GtkCellRenderer_autoptr
     * }
     */
    public static final AddressLayout GtkCellRenderer_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRenderer_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRenderer_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRenderer_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRenderer_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRenderer_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRenderer_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererAccel *GtkCellRendererAccel_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererAccel_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererAccel_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererAccel_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererCombo *GtkCellRendererCombo_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererCombo_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererCombo_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererCombo_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererPixbuf *GtkCellRendererPixbuf_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererPixbuf_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererPixbuf_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererPixbuf_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererProgress *GtkCellRendererProgress_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererProgress_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererProgress_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererProgress_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererSpin *GtkCellRendererSpin_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererSpin_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererSpin_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererSpin_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererSpinner *GtkCellRendererSpinner_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererSpinner_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererSpinner_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererSpinner_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererText *GtkCellRendererText_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererText_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererText_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererText_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererText_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererText_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererText_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererText_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellRendererToggle *GtkCellRendererToggle_autoptr
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellRendererToggle_listautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellRendererToggle_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellRendererToggle_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCellView *GtkCellView_autoptr
     * }
     */
    public static final AddressLayout GtkCellView_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCellView_listautoptr
     * }
     */
    public static final AddressLayout GtkCellView_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCellView_slistautoptr
     * }
     */
    public static final AddressLayout GtkCellView_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCellView_queueautoptr
     * }
     */
    public static final AddressLayout GtkCellView_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCheckButton *GtkCheckButton_autoptr
     * }
     */
    public static final AddressLayout GtkCheckButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCheckButton_listautoptr
     * }
     */
    public static final AddressLayout GtkCheckButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCheckButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkCheckButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCheckButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkCheckButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCheckMenuItem *GtkCheckMenuItem_autoptr
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCheckMenuItem_listautoptr
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCheckMenuItem_slistautoptr
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCheckMenuItem_queueautoptr
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkClipboard *GtkClipboard_autoptr
     * }
     */
    public static final AddressLayout GtkClipboard_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkClipboard_listautoptr
     * }
     */
    public static final AddressLayout GtkClipboard_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkClipboard_slistautoptr
     * }
     */
    public static final AddressLayout GtkClipboard_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkClipboard_queueautoptr
     * }
     */
    public static final AddressLayout GtkClipboard_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkColorButton *GtkColorButton_autoptr
     * }
     */
    public static final AddressLayout GtkColorButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkColorButton_listautoptr
     * }
     */
    public static final AddressLayout GtkColorButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkColorButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkColorButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkColorButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkColorButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkColorChooser *GtkColorChooser_autoptr
     * }
     */
    public static final AddressLayout GtkColorChooser_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkColorChooser_listautoptr
     * }
     */
    public static final AddressLayout GtkColorChooser_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkColorChooser_slistautoptr
     * }
     */
    public static final AddressLayout GtkColorChooser_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkColorChooser_queueautoptr
     * }
     */
    public static final AddressLayout GtkColorChooser_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkColorChooserDialog *GtkColorChooserDialog_autoptr
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkColorChooserDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkColorChooserDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkColorChooserDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkColorChooserWidget *GtkColorChooserWidget_autoptr
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkColorChooserWidget_listautoptr
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkColorChooserWidget_slistautoptr
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkColorChooserWidget_queueautoptr
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkComboBox *GtkComboBox_autoptr
     * }
     */
    public static final AddressLayout GtkComboBox_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkComboBox_listautoptr
     * }
     */
    public static final AddressLayout GtkComboBox_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkComboBox_slistautoptr
     * }
     */
    public static final AddressLayout GtkComboBox_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkComboBox_queueautoptr
     * }
     */
    public static final AddressLayout GtkComboBox_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkComboBoxText *GtkComboBoxText_autoptr
     * }
     */
    public static final AddressLayout GtkComboBoxText_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkComboBoxText_listautoptr
     * }
     */
    public static final AddressLayout GtkComboBoxText_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkComboBoxText_slistautoptr
     * }
     */
    public static final AddressLayout GtkComboBoxText_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkComboBoxText_queueautoptr
     * }
     */
    public static final AddressLayout GtkComboBoxText_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkCssProvider *GtkCssProvider_autoptr
     * }
     */
    public static final AddressLayout GtkCssProvider_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkCssProvider_listautoptr
     * }
     */
    public static final AddressLayout GtkCssProvider_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkCssProvider_slistautoptr
     * }
     */
    public static final AddressLayout GtkCssProvider_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkCssProvider_queueautoptr
     * }
     */
    public static final AddressLayout GtkCssProvider_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkDrawingArea *GtkDrawingArea_autoptr
     * }
     */
    public static final AddressLayout GtkDrawingArea_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkDrawingArea_listautoptr
     * }
     */
    public static final AddressLayout GtkDrawingArea_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkDrawingArea_slistautoptr
     * }
     */
    public static final AddressLayout GtkDrawingArea_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkDrawingArea_queueautoptr
     * }
     */
    public static final AddressLayout GtkDrawingArea_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkEditable *GtkEditable_autoptr
     * }
     */
    public static final AddressLayout GtkEditable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkEditable_listautoptr
     * }
     */
    public static final AddressLayout GtkEditable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkEditable_slistautoptr
     * }
     */
    public static final AddressLayout GtkEditable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkEditable_queueautoptr
     * }
     */
    public static final AddressLayout GtkEditable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkEntry *GtkEntry_autoptr
     * }
     */
    public static final AddressLayout GtkEntry_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkEntry_listautoptr
     * }
     */
    public static final AddressLayout GtkEntry_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkEntry_slistautoptr
     * }
     */
    public static final AddressLayout GtkEntry_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkEntry_queueautoptr
     * }
     */
    public static final AddressLayout GtkEntry_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkEntryBuffer *GtkEntryBuffer_autoptr
     * }
     */
    public static final AddressLayout GtkEntryBuffer_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkEntryBuffer_listautoptr
     * }
     */
    public static final AddressLayout GtkEntryBuffer_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkEntryBuffer_slistautoptr
     * }
     */
    public static final AddressLayout GtkEntryBuffer_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkEntryBuffer_queueautoptr
     * }
     */
    public static final AddressLayout GtkEntryBuffer_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkEntryCompletion *GtkEntryCompletion_autoptr
     * }
     */
    public static final AddressLayout GtkEntryCompletion_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkEntryCompletion_listautoptr
     * }
     */
    public static final AddressLayout GtkEntryCompletion_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkEntryCompletion_slistautoptr
     * }
     */
    public static final AddressLayout GtkEntryCompletion_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkEntryCompletion_queueautoptr
     * }
     */
    public static final AddressLayout GtkEntryCompletion_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkEventBox *GtkEventBox_autoptr
     * }
     */
    public static final AddressLayout GtkEventBox_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkEventBox_listautoptr
     * }
     */
    public static final AddressLayout GtkEventBox_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkEventBox_slistautoptr
     * }
     */
    public static final AddressLayout GtkEventBox_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkEventBox_queueautoptr
     * }
     */
    public static final AddressLayout GtkEventBox_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkEventController *GtkEventController_autoptr
     * }
     */
    public static final AddressLayout GtkEventController_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkEventController_listautoptr
     * }
     */
    public static final AddressLayout GtkEventController_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkEventController_slistautoptr
     * }
     */
    public static final AddressLayout GtkEventController_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkEventController_queueautoptr
     * }
     */
    public static final AddressLayout GtkEventController_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkExpander *GtkExpander_autoptr
     * }
     */
    public static final AddressLayout GtkExpander_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkExpander_listautoptr
     * }
     */
    public static final AddressLayout GtkExpander_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkExpander_slistautoptr
     * }
     */
    public static final AddressLayout GtkExpander_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkExpander_queueautoptr
     * }
     */
    public static final AddressLayout GtkExpander_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFileChooserButton *GtkFileChooserButton_autoptr
     * }
     */
    public static final AddressLayout GtkFileChooserButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFileChooserButton_listautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFileChooserButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFileChooserButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFileChooserDialog *GtkFileChooserDialog_autoptr
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFileChooserDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFileChooserDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFileChooserDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFileChooserWidget *GtkFileChooserWidget_autoptr
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFileChooserWidget_listautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFileChooserWidget_slistautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFileChooserWidget_queueautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFileFilter *GtkFileFilter_autoptr
     * }
     */
    public static final AddressLayout GtkFileFilter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFileFilter_listautoptr
     * }
     */
    public static final AddressLayout GtkFileFilter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFileFilter_slistautoptr
     * }
     */
    public static final AddressLayout GtkFileFilter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFileFilter_queueautoptr
     * }
     */
    public static final AddressLayout GtkFileFilter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFixed *GtkFixed_autoptr
     * }
     */
    public static final AddressLayout GtkFixed_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFixed_listautoptr
     * }
     */
    public static final AddressLayout GtkFixed_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFixed_slistautoptr
     * }
     */
    public static final AddressLayout GtkFixed_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFixed_queueautoptr
     * }
     */
    public static final AddressLayout GtkFixed_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFlowBox *GtkFlowBox_autoptr
     * }
     */
    public static final AddressLayout GtkFlowBox_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFlowBox_listautoptr
     * }
     */
    public static final AddressLayout GtkFlowBox_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFlowBox_slistautoptr
     * }
     */
    public static final AddressLayout GtkFlowBox_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFlowBox_queueautoptr
     * }
     */
    public static final AddressLayout GtkFlowBox_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFlowBoxChild *GtkFlowBoxChild_autoptr
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFlowBoxChild_listautoptr
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFlowBoxChild_slistautoptr
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFlowBoxChild_queueautoptr
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFontButton *GtkFontButton_autoptr
     * }
     */
    public static final AddressLayout GtkFontButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFontButton_listautoptr
     * }
     */
    public static final AddressLayout GtkFontButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFontButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkFontButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFontButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkFontButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFontChooser *GtkFontChooser_autoptr
     * }
     */
    public static final AddressLayout GtkFontChooser_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFontChooser_listautoptr
     * }
     */
    public static final AddressLayout GtkFontChooser_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFontChooser_slistautoptr
     * }
     */
    public static final AddressLayout GtkFontChooser_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFontChooser_queueautoptr
     * }
     */
    public static final AddressLayout GtkFontChooser_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFontChooserDialog *GtkFontChooserDialog_autoptr
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFontChooserDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFontChooserDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFontChooserDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFontChooserWidget *GtkFontChooserWidget_autoptr
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFontChooserWidget_listautoptr
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFontChooserWidget_slistautoptr
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFontChooserWidget_queueautoptr
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFrame *GtkFrame_autoptr
     * }
     */
    public static final AddressLayout GtkFrame_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFrame_listautoptr
     * }
     */
    public static final AddressLayout GtkFrame_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFrame_slistautoptr
     * }
     */
    public static final AddressLayout GtkFrame_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFrame_queueautoptr
     * }
     */
    public static final AddressLayout GtkFrame_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGLArea *GtkGLArea_autoptr
     * }
     */
    public static final AddressLayout GtkGLArea_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGLArea_listautoptr
     * }
     */
    public static final AddressLayout GtkGLArea_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGLArea_slistautoptr
     * }
     */
    public static final AddressLayout GtkGLArea_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGLArea_queueautoptr
     * }
     */
    public static final AddressLayout GtkGLArea_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGesture *GtkGesture_autoptr
     * }
     */
    public static final AddressLayout GtkGesture_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGesture_listautoptr
     * }
     */
    public static final AddressLayout GtkGesture_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGesture_slistautoptr
     * }
     */
    public static final AddressLayout GtkGesture_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGesture_queueautoptr
     * }
     */
    public static final AddressLayout GtkGesture_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGestureDrag *GtkGestureDrag_autoptr
     * }
     */
    public static final AddressLayout GtkGestureDrag_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGestureDrag_listautoptr
     * }
     */
    public static final AddressLayout GtkGestureDrag_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGestureDrag_slistautoptr
     * }
     */
    public static final AddressLayout GtkGestureDrag_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGestureDrag_queueautoptr
     * }
     */
    public static final AddressLayout GtkGestureDrag_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGestureLongPress *GtkGestureLongPress_autoptr
     * }
     */
    public static final AddressLayout GtkGestureLongPress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGestureLongPress_listautoptr
     * }
     */
    public static final AddressLayout GtkGestureLongPress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGestureLongPress_slistautoptr
     * }
     */
    public static final AddressLayout GtkGestureLongPress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGestureLongPress_queueautoptr
     * }
     */
    public static final AddressLayout GtkGestureLongPress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGestureMultiPress *GtkGestureMultiPress_autoptr
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGestureMultiPress_listautoptr
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGestureMultiPress_slistautoptr
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGestureMultiPress_queueautoptr
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGesturePan *GtkGesturePan_autoptr
     * }
     */
    public static final AddressLayout GtkGesturePan_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGesturePan_listautoptr
     * }
     */
    public static final AddressLayout GtkGesturePan_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGesturePan_slistautoptr
     * }
     */
    public static final AddressLayout GtkGesturePan_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGesturePan_queueautoptr
     * }
     */
    public static final AddressLayout GtkGesturePan_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGestureRotate *GtkGestureRotate_autoptr
     * }
     */
    public static final AddressLayout GtkGestureRotate_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGestureRotate_listautoptr
     * }
     */
    public static final AddressLayout GtkGestureRotate_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGestureRotate_slistautoptr
     * }
     */
    public static final AddressLayout GtkGestureRotate_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGestureRotate_queueautoptr
     * }
     */
    public static final AddressLayout GtkGestureRotate_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGestureSingle *GtkGestureSingle_autoptr
     * }
     */
    public static final AddressLayout GtkGestureSingle_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGestureSingle_listautoptr
     * }
     */
    public static final AddressLayout GtkGestureSingle_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGestureSingle_slistautoptr
     * }
     */
    public static final AddressLayout GtkGestureSingle_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGestureSingle_queueautoptr
     * }
     */
    public static final AddressLayout GtkGestureSingle_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGestureSwipe *GtkGestureSwipe_autoptr
     * }
     */
    public static final AddressLayout GtkGestureSwipe_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGestureSwipe_listautoptr
     * }
     */
    public static final AddressLayout GtkGestureSwipe_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGestureSwipe_slistautoptr
     * }
     */
    public static final AddressLayout GtkGestureSwipe_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGestureSwipe_queueautoptr
     * }
     */
    public static final AddressLayout GtkGestureSwipe_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGestureZoom *GtkGestureZoom_autoptr
     * }
     */
    public static final AddressLayout GtkGestureZoom_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGestureZoom_listautoptr
     * }
     */
    public static final AddressLayout GtkGestureZoom_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGestureZoom_slistautoptr
     * }
     */
    public static final AddressLayout GtkGestureZoom_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGestureZoom_queueautoptr
     * }
     */
    public static final AddressLayout GtkGestureZoom_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkGrid *GtkGrid_autoptr
     * }
     */
    public static final AddressLayout GtkGrid_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkGrid_listautoptr
     * }
     */
    public static final AddressLayout GtkGrid_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkGrid_slistautoptr
     * }
     */
    public static final AddressLayout GtkGrid_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkGrid_queueautoptr
     * }
     */
    public static final AddressLayout GtkGrid_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkHeaderBar *GtkHeaderBar_autoptr
     * }
     */
    public static final AddressLayout GtkHeaderBar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkHeaderBar_listautoptr
     * }
     */
    public static final AddressLayout GtkHeaderBar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkHeaderBar_slistautoptr
     * }
     */
    public static final AddressLayout GtkHeaderBar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkHeaderBar_queueautoptr
     * }
     */
    public static final AddressLayout GtkHeaderBar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkIMContext *GtkIMContext_autoptr
     * }
     */
    public static final AddressLayout GtkIMContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkIMContext_listautoptr
     * }
     */
    public static final AddressLayout GtkIMContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkIMContext_slistautoptr
     * }
     */
    public static final AddressLayout GtkIMContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkIMContext_queueautoptr
     * }
     */
    public static final AddressLayout GtkIMContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkIMContextSimple *GtkIMContextSimple_autoptr
     * }
     */
    public static final AddressLayout GtkIMContextSimple_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkIMContextSimple_listautoptr
     * }
     */
    public static final AddressLayout GtkIMContextSimple_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkIMContextSimple_slistautoptr
     * }
     */
    public static final AddressLayout GtkIMContextSimple_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkIMContextSimple_queueautoptr
     * }
     */
    public static final AddressLayout GtkIMContextSimple_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkIMMulticontext *GtkIMMulticontext_autoptr
     * }
     */
    public static final AddressLayout GtkIMMulticontext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkIMMulticontext_listautoptr
     * }
     */
    public static final AddressLayout GtkIMMulticontext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkIMMulticontext_slistautoptr
     * }
     */
    public static final AddressLayout GtkIMMulticontext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkIMMulticontext_queueautoptr
     * }
     */
    public static final AddressLayout GtkIMMulticontext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkIconInfo *GtkIconInfo_autoptr
     * }
     */
    public static final AddressLayout GtkIconInfo_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkIconInfo_listautoptr
     * }
     */
    public static final AddressLayout GtkIconInfo_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkIconInfo_slistautoptr
     * }
     */
    public static final AddressLayout GtkIconInfo_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkIconInfo_queueautoptr
     * }
     */
    public static final AddressLayout GtkIconInfo_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkIconTheme *GtkIconTheme_autoptr
     * }
     */
    public static final AddressLayout GtkIconTheme_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkIconTheme_listautoptr
     * }
     */
    public static final AddressLayout GtkIconTheme_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkIconTheme_slistautoptr
     * }
     */
    public static final AddressLayout GtkIconTheme_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkIconTheme_queueautoptr
     * }
     */
    public static final AddressLayout GtkIconTheme_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkIconView *GtkIconView_autoptr
     * }
     */
    public static final AddressLayout GtkIconView_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkIconView_listautoptr
     * }
     */
    public static final AddressLayout GtkIconView_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkIconView_slistautoptr
     * }
     */
    public static final AddressLayout GtkIconView_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkIconView_queueautoptr
     * }
     */
    public static final AddressLayout GtkIconView_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkImage *GtkImage_autoptr
     * }
     */
    public static final AddressLayout GtkImage_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkImage_listautoptr
     * }
     */
    public static final AddressLayout GtkImage_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkImage_slistautoptr
     * }
     */
    public static final AddressLayout GtkImage_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkImage_queueautoptr
     * }
     */
    public static final AddressLayout GtkImage_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkInfoBar *GtkInfoBar_autoptr
     * }
     */
    public static final AddressLayout GtkInfoBar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkInfoBar_listautoptr
     * }
     */
    public static final AddressLayout GtkInfoBar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkInfoBar_slistautoptr
     * }
     */
    public static final AddressLayout GtkInfoBar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkInfoBar_queueautoptr
     * }
     */
    public static final AddressLayout GtkInfoBar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkInvisible *GtkInvisible_autoptr
     * }
     */
    public static final AddressLayout GtkInvisible_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkInvisible_listautoptr
     * }
     */
    public static final AddressLayout GtkInvisible_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkInvisible_slistautoptr
     * }
     */
    public static final AddressLayout GtkInvisible_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkInvisible_queueautoptr
     * }
     */
    public static final AddressLayout GtkInvisible_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkLayout *GtkLayout_autoptr
     * }
     */
    public static final AddressLayout GtkLayout_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkLayout_listautoptr
     * }
     */
    public static final AddressLayout GtkLayout_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkLayout_slistautoptr
     * }
     */
    public static final AddressLayout GtkLayout_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkLayout_queueautoptr
     * }
     */
    public static final AddressLayout GtkLayout_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkLevelBar *GtkLevelBar_autoptr
     * }
     */
    public static final AddressLayout GtkLevelBar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkLevelBar_listautoptr
     * }
     */
    public static final AddressLayout GtkLevelBar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkLevelBar_slistautoptr
     * }
     */
    public static final AddressLayout GtkLevelBar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkLevelBar_queueautoptr
     * }
     */
    public static final AddressLayout GtkLevelBar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkLinkButton *GtkLinkButton_autoptr
     * }
     */
    public static final AddressLayout GtkLinkButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkLinkButton_listautoptr
     * }
     */
    public static final AddressLayout GtkLinkButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkLinkButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkLinkButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkLinkButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkLinkButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkListStore *GtkListStore_autoptr
     * }
     */
    public static final AddressLayout GtkListStore_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkListStore_listautoptr
     * }
     */
    public static final AddressLayout GtkListStore_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkListStore_slistautoptr
     * }
     */
    public static final AddressLayout GtkListStore_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkListStore_queueautoptr
     * }
     */
    public static final AddressLayout GtkListStore_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkLockButton *GtkLockButton_autoptr
     * }
     */
    public static final AddressLayout GtkLockButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkLockButton_listautoptr
     * }
     */
    public static final AddressLayout GtkLockButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkLockButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkLockButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkLockButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkLockButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkMenuBar *GtkMenuBar_autoptr
     * }
     */
    public static final AddressLayout GtkMenuBar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMenuBar_listautoptr
     * }
     */
    public static final AddressLayout GtkMenuBar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMenuBar_slistautoptr
     * }
     */
    public static final AddressLayout GtkMenuBar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMenuBar_queueautoptr
     * }
     */
    public static final AddressLayout GtkMenuBar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkMenuButton *GtkMenuButton_autoptr
     * }
     */
    public static final AddressLayout GtkMenuButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMenuButton_listautoptr
     * }
     */
    public static final AddressLayout GtkMenuButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMenuButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkMenuButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMenuButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkMenuButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkMenuItem *GtkMenuItem_autoptr
     * }
     */
    public static final AddressLayout GtkMenuItem_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMenuItem_listautoptr
     * }
     */
    public static final AddressLayout GtkMenuItem_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMenuItem_slistautoptr
     * }
     */
    public static final AddressLayout GtkMenuItem_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMenuItem_queueautoptr
     * }
     */
    public static final AddressLayout GtkMenuItem_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkMenuToolButton *GtkMenuToolButton_autoptr
     * }
     */
    public static final AddressLayout GtkMenuToolButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMenuToolButton_listautoptr
     * }
     */
    public static final AddressLayout GtkMenuToolButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMenuToolButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkMenuToolButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMenuToolButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkMenuToolButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkMessageDialog *GtkMessageDialog_autoptr
     * }
     */
    public static final AddressLayout GtkMessageDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMessageDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkMessageDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMessageDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkMessageDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMessageDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkMessageDialog_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkMountOperation *GtkMountOperation_autoptr
     * }
     */
    public static final AddressLayout GtkMountOperation_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMountOperation_listautoptr
     * }
     */
    public static final AddressLayout GtkMountOperation_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMountOperation_slistautoptr
     * }
     */
    public static final AddressLayout GtkMountOperation_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMountOperation_queueautoptr
     * }
     */
    public static final AddressLayout GtkMountOperation_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkNotebook *GtkNotebook_autoptr
     * }
     */
    public static final AddressLayout GtkNotebook_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkNotebook_listautoptr
     * }
     */
    public static final AddressLayout GtkNotebook_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkNotebook_slistautoptr
     * }
     */
    public static final AddressLayout GtkNotebook_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkNotebook_queueautoptr
     * }
     */
    public static final AddressLayout GtkNotebook_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkOffscreenWindow *GtkOffscreenWindow_autoptr
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkOffscreenWindow_listautoptr
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkOffscreenWindow_slistautoptr
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkOffscreenWindow_queueautoptr
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkOrientable *GtkOrientable_autoptr
     * }
     */
    public static final AddressLayout GtkOrientable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkOrientable_listautoptr
     * }
     */
    public static final AddressLayout GtkOrientable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkOrientable_slistautoptr
     * }
     */
    public static final AddressLayout GtkOrientable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkOrientable_queueautoptr
     * }
     */
    public static final AddressLayout GtkOrientable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkOverlay *GtkOverlay_autoptr
     * }
     */
    public static final AddressLayout GtkOverlay_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkOverlay_listautoptr
     * }
     */
    public static final AddressLayout GtkOverlay_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkOverlay_slistautoptr
     * }
     */
    public static final AddressLayout GtkOverlay_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkOverlay_queueautoptr
     * }
     */
    public static final AddressLayout GtkOverlay_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPageSetup *GtkPageSetup_autoptr
     * }
     */
    public static final AddressLayout GtkPageSetup_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPageSetup_listautoptr
     * }
     */
    public static final AddressLayout GtkPageSetup_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPageSetup_slistautoptr
     * }
     */
    public static final AddressLayout GtkPageSetup_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPageSetup_queueautoptr
     * }
     */
    public static final AddressLayout GtkPageSetup_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPaned *GtkPaned_autoptr
     * }
     */
    public static final AddressLayout GtkPaned_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPaned_listautoptr
     * }
     */
    public static final AddressLayout GtkPaned_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPaned_slistautoptr
     * }
     */
    public static final AddressLayout GtkPaned_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPaned_queueautoptr
     * }
     */
    public static final AddressLayout GtkPaned_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPlacesSidebar *GtkPlacesSidebar_autoptr
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPlacesSidebar_listautoptr
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPlacesSidebar_slistautoptr
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPlacesSidebar_queueautoptr
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPopover *GtkPopover_autoptr
     * }
     */
    public static final AddressLayout GtkPopover_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPopover_listautoptr
     * }
     */
    public static final AddressLayout GtkPopover_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPopover_slistautoptr
     * }
     */
    public static final AddressLayout GtkPopover_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPopover_queueautoptr
     * }
     */
    public static final AddressLayout GtkPopover_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPopoverMenu *GtkPopoverMenu_autoptr
     * }
     */
    public static final AddressLayout GtkPopoverMenu_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPopoverMenu_listautoptr
     * }
     */
    public static final AddressLayout GtkPopoverMenu_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPopoverMenu_slistautoptr
     * }
     */
    public static final AddressLayout GtkPopoverMenu_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPopoverMenu_queueautoptr
     * }
     */
    public static final AddressLayout GtkPopoverMenu_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPrintContext *GtkPrintContext_autoptr
     * }
     */
    public static final AddressLayout GtkPrintContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPrintContext_listautoptr
     * }
     */
    public static final AddressLayout GtkPrintContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPrintContext_slistautoptr
     * }
     */
    public static final AddressLayout GtkPrintContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPrintContext_queueautoptr
     * }
     */
    public static final AddressLayout GtkPrintContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPrintOperation *GtkPrintOperation_autoptr
     * }
     */
    public static final AddressLayout GtkPrintOperation_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPrintOperation_listautoptr
     * }
     */
    public static final AddressLayout GtkPrintOperation_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPrintOperation_slistautoptr
     * }
     */
    public static final AddressLayout GtkPrintOperation_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPrintOperation_queueautoptr
     * }
     */
    public static final AddressLayout GtkPrintOperation_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPrintOperationPreview *GtkPrintOperationPreview_autoptr
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPrintOperationPreview_listautoptr
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPrintOperationPreview_slistautoptr
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPrintOperationPreview_queueautoptr
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkPrintSettings *GtkPrintSettings_autoptr
     * }
     */
    public static final AddressLayout GtkPrintSettings_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkPrintSettings_listautoptr
     * }
     */
    public static final AddressLayout GtkPrintSettings_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkPrintSettings_slistautoptr
     * }
     */
    public static final AddressLayout GtkPrintSettings_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkPrintSettings_queueautoptr
     * }
     */
    public static final AddressLayout GtkPrintSettings_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkProgressBar *GtkProgressBar_autoptr
     * }
     */
    public static final AddressLayout GtkProgressBar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkProgressBar_listautoptr
     * }
     */
    public static final AddressLayout GtkProgressBar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkProgressBar_slistautoptr
     * }
     */
    public static final AddressLayout GtkProgressBar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkProgressBar_queueautoptr
     * }
     */
    public static final AddressLayout GtkProgressBar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRadioButton *GtkRadioButton_autoptr
     * }
     */
    public static final AddressLayout GtkRadioButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRadioButton_listautoptr
     * }
     */
    public static final AddressLayout GtkRadioButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRadioButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkRadioButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRadioButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkRadioButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRadioMenuItem *GtkRadioMenuItem_autoptr
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRadioMenuItem_listautoptr
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRadioMenuItem_slistautoptr
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRadioMenuItem_queueautoptr
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRadioToolButton *GtkRadioToolButton_autoptr
     * }
     */
    public static final AddressLayout GtkRadioToolButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRadioToolButton_listautoptr
     * }
     */
    public static final AddressLayout GtkRadioToolButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRadioToolButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkRadioToolButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRadioToolButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkRadioToolButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRange *GtkRange_autoptr
     * }
     */
    public static final AddressLayout GtkRange_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRange_listautoptr
     * }
     */
    public static final AddressLayout GtkRange_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRange_slistautoptr
     * }
     */
    public static final AddressLayout GtkRange_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRange_queueautoptr
     * }
     */
    public static final AddressLayout GtkRange_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRcStyle *GtkRcStyle_autoptr
     * }
     */
    public static final AddressLayout GtkRcStyle_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRcStyle_listautoptr
     * }
     */
    public static final AddressLayout GtkRcStyle_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRcStyle_slistautoptr
     * }
     */
    public static final AddressLayout GtkRcStyle_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRcStyle_queueautoptr
     * }
     */
    public static final AddressLayout GtkRcStyle_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRecentChooser *GtkRecentChooser_autoptr
     * }
     */
    public static final AddressLayout GtkRecentChooser_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRecentChooser_listautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooser_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRecentChooser_slistautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooser_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRecentChooser_queueautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooser_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRecentChooserDialog *GtkRecentChooserDialog_autoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRecentChooserDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRecentChooserDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRecentChooserDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserDialog_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRecentChooserMenu *GtkRecentChooserMenu_autoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserMenu_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRecentChooserMenu_listautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserMenu_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRecentChooserMenu_slistautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserMenu_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRecentChooserMenu_queueautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserMenu_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRecentChooserWidget *GtkRecentChooserWidget_autoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserWidget_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRecentChooserWidget_listautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserWidget_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRecentChooserWidget_slistautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserWidget_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRecentChooserWidget_queueautoptr
     * }
     */
    public static final AddressLayout GtkRecentChooserWidget_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRecentFilter *GtkRecentFilter_autoptr
     * }
     */
    public static final AddressLayout GtkRecentFilter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRecentFilter_listautoptr
     * }
     */
    public static final AddressLayout GtkRecentFilter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRecentFilter_slistautoptr
     * }
     */
    public static final AddressLayout GtkRecentFilter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRecentFilter_queueautoptr
     * }
     */
    public static final AddressLayout GtkRecentFilter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRecentManager *GtkRecentManager_autoptr
     * }
     */
    public static final AddressLayout GtkRecentManager_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRecentManager_listautoptr
     * }
     */
    public static final AddressLayout GtkRecentManager_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRecentManager_slistautoptr
     * }
     */
    public static final AddressLayout GtkRecentManager_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRecentManager_queueautoptr
     * }
     */
    public static final AddressLayout GtkRecentManager_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRevealer *GtkRevealer_autoptr
     * }
     */
    public static final AddressLayout GtkRevealer_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRevealer_listautoptr
     * }
     */
    public static final AddressLayout GtkRevealer_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRevealer_slistautoptr
     * }
     */
    public static final AddressLayout GtkRevealer_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRevealer_queueautoptr
     * }
     */
    public static final AddressLayout GtkRevealer_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkScale *GtkScale_autoptr
     * }
     */
    public static final AddressLayout GtkScale_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkScale_listautoptr
     * }
     */
    public static final AddressLayout GtkScale_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkScale_slistautoptr
     * }
     */
    public static final AddressLayout GtkScale_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkScale_queueautoptr
     * }
     */
    public static final AddressLayout GtkScale_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkScaleButton *GtkScaleButton_autoptr
     * }
     */
    public static final AddressLayout GtkScaleButton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkScaleButton_listautoptr
     * }
     */
    public static final AddressLayout GtkScaleButton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkScaleButton_slistautoptr
     * }
     */
    public static final AddressLayout GtkScaleButton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkScaleButton_queueautoptr
     * }
     */
    public static final AddressLayout GtkScaleButton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkScrollable *GtkScrollable_autoptr
     * }
     */
    public static final AddressLayout GtkScrollable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkScrollable_listautoptr
     * }
     */
    public static final AddressLayout GtkScrollable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkScrollable_slistautoptr
     * }
     */
    public static final AddressLayout GtkScrollable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkScrollable_queueautoptr
     * }
     */
    public static final AddressLayout GtkScrollable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkScrollbar *GtkScrollbar_autoptr
     * }
     */
    public static final AddressLayout GtkScrollbar_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkScrollbar_listautoptr
     * }
     */
    public static final AddressLayout GtkScrollbar_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkScrollbar_slistautoptr
     * }
     */
    public static final AddressLayout GtkScrollbar_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkScrollbar_queueautoptr
     * }
     */
    public static final AddressLayout GtkScrollbar_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkScrolledWindow *GtkScrolledWindow_autoptr
     * }
     */
    public static final AddressLayout GtkScrolledWindow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkScrolledWindow_listautoptr
     * }
     */
    public static final AddressLayout GtkScrolledWindow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkScrolledWindow_slistautoptr
     * }
     */
    public static final AddressLayout GtkScrolledWindow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkScrolledWindow_queueautoptr
     * }
     */
    public static final AddressLayout GtkScrolledWindow_queueautoptr = app_indicator_h.C_POINTER;
}

