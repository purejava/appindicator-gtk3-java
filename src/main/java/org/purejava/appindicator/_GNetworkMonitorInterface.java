// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GNetworkMonitorInterface {
 *     struct _GTypeInterface g_iface;
 *     void (*network_changed)(struct _GNetworkMonitor*,int);
 *     int (*can_reach)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,struct _GError**);
 *     void (*can_reach_async)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*can_reach_finish)(struct _GNetworkMonitor*,struct _GAsyncResult*,struct _GError**);
 * };
 * }
 */
public class _GNetworkMonitorInterface {

    public static MemoryLayout $LAYOUT() {
        return constants$1201.const$0;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*network_changed)(struct _GNetworkMonitor*,int);
     * }
     */
    public interface network_changed {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(network_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1201.const$1, fi, constants$40.const$2, scope);
        }
        static network_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$511.const$3.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle network_changed$VH() {
        return constants$1201.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*network_changed)(struct _GNetworkMonitor*,int);
     * }
     */
    public static MemorySegment network_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1201.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*network_changed)(struct _GNetworkMonitor*,int);
     * }
     */
    public static void network_changed$set(MemorySegment seg, MemorySegment x) {
        constants$1201.const$2.set(seg, x);
    }
    public static MemorySegment network_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1201.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void network_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1201.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static network_changed network_changed(MemorySegment segment, Arena scope) {
        return network_changed.ofAddress(network_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_reach)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface can_reach {

        int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_reach fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1201.const$3, fi, constants$34.const$5, scope);
        }
        static can_reach ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$383.const$0.invokeExact(symbol, _completion, _key, _iter, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_reach$VH() {
        return constants$1201.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_reach)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment can_reach$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1201.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_reach)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void can_reach$set(MemorySegment seg, MemorySegment x) {
        constants$1201.const$4.set(seg, x);
    }
    public static MemorySegment can_reach$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1201.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void can_reach$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1201.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_reach can_reach(MemorySegment segment, Arena scope) {
        return can_reach.ofAddress(can_reach$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*can_reach_async)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface can_reach_async {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(can_reach_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1201.const$5, fi, constants$332.const$1, scope);
        }
        static can_reach_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$919.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_reach_async$VH() {
        return constants$1202.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*can_reach_async)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment can_reach_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1202.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*can_reach_async)(struct _GNetworkMonitor*,struct _GSocketConnectable*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void can_reach_async$set(MemorySegment seg, MemorySegment x) {
        constants$1202.const$0.set(seg, x);
    }
    public static MemorySegment can_reach_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1202.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void can_reach_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1202.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_reach_async can_reach_async(MemorySegment segment, Arena scope) {
        return can_reach_async.ofAddress(can_reach_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_reach_finish)(struct _GNetworkMonitor*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface can_reach_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_reach_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1202.const$1, fi, constants$12.const$2, scope);
        }
        static can_reach_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_reach_finish$VH() {
        return constants$1202.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_reach_finish)(struct _GNetworkMonitor*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment can_reach_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1202.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_reach_finish)(struct _GNetworkMonitor*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void can_reach_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1202.const$2.set(seg, x);
    }
    public static MemorySegment can_reach_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1202.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void can_reach_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1202.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_reach_finish can_reach_finish(MemorySegment segment, Arena scope) {
        return can_reach_finish.ofAddress(can_reach_finish$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


