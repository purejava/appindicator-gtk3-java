// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _AtkImageIface {
 *     GTypeInterface parent;
 *     void (*get_image_position)(AtkImage*,gint*,gint*,AtkCoordType);
 *     const gchar* (*get_image_description)(AtkImage*);
 *     void (*get_image_size)(AtkImage*,gint*,gint*);
 *     gboolean (*set_image_description)(AtkImage*,const gchar*);
 *     const gchar* (*get_image_locale)(AtkImage*);
 * };
 * }
 */
public class _AtkImageIface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_position"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_size"),
        Constants$root.C_POINTER$LAYOUT.withName("set_image_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_image_locale")
    ).withName("_AtkImageIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkImageIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_image_position$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_image_position_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_image_position_UP$MH = RuntimeHelper.upcallHandle(get_image_position.class, "apply", _AtkImageIface.get_image_position_UP$FUNC);
    static final FunctionDescriptor get_image_position_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_image_position_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_position_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_image_position)(AtkImage*,gint*,gint*,AtkCoordType);
     * }
     */
    public interface get_image_position {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(get_image_position fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkImageIface.get_image_position_UP$MH, fi, _AtkImageIface.get_image_position$FUNC, scope);
        }
        static get_image_position ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    _AtkImageIface.get_image_position_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_position"));
    public static VarHandle get_image_position$VH() {
        return _AtkImageIface.get_image_position$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_image_position)(AtkImage*,gint*,gint*,AtkCoordType);
     * }
     */
    public static MemorySegment get_image_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_position$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_image_position)(AtkImage*,gint*,gint*,AtkCoordType);
     * }
     */
    public static void get_image_position$set(MemorySegment seg, MemorySegment x) {
        _AtkImageIface.get_image_position$VH.set(seg, x);
    }
    public static MemorySegment get_image_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_position$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkImageIface.get_image_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_position get_image_position(MemorySegment segment, SegmentScope scope) {
        return get_image_position.ofAddress(get_image_position$get(segment), scope);
    }
    static final FunctionDescriptor get_image_description$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_image_description_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_description_UP$MH = RuntimeHelper.upcallHandle(get_image_description.class, "apply", _AtkImageIface.get_image_description_UP$FUNC);
    static final FunctionDescriptor get_image_description_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_description_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_description_DOWN$FUNC
    );
    /**
     * {@snippet :
 * const gchar* (*get_image_description)(AtkImage*);
     * }
     */
    public interface get_image_description {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_image_description fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkImageIface.get_image_description_UP$MH, fi, _AtkImageIface.get_image_description$FUNC, scope);
        }
        static get_image_description ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_description_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_description"));
    public static VarHandle get_image_description$VH() {
        return _AtkImageIface.get_image_description$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const gchar* (*get_image_description)(AtkImage*);
     * }
     */
    public static MemorySegment get_image_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_description$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const gchar* (*get_image_description)(AtkImage*);
     * }
     */
    public static void get_image_description$set(MemorySegment seg, MemorySegment x) {
        _AtkImageIface.get_image_description$VH.set(seg, x);
    }
    public static MemorySegment get_image_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_description$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkImageIface.get_image_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_description get_image_description(MemorySegment segment, SegmentScope scope) {
        return get_image_description.ofAddress(get_image_description$get(segment), scope);
    }
    static final FunctionDescriptor get_image_size$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_image_size_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_size_UP$MH = RuntimeHelper.upcallHandle(get_image_size.class, "apply", _AtkImageIface.get_image_size_UP$FUNC);
    static final FunctionDescriptor get_image_size_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_size_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_size_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_image_size)(AtkImage*,gint*,gint*);
     * }
     */
    public interface get_image_size {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_image_size fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkImageIface.get_image_size_UP$MH, fi, _AtkImageIface.get_image_size$FUNC, scope);
        }
        static get_image_size ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _AtkImageIface.get_image_size_DOWN$MH.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_size"));
    public static VarHandle get_image_size$VH() {
        return _AtkImageIface.get_image_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_image_size)(AtkImage*,gint*,gint*);
     * }
     */
    public static MemorySegment get_image_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_image_size)(AtkImage*,gint*,gint*);
     * }
     */
    public static void get_image_size$set(MemorySegment seg, MemorySegment x) {
        _AtkImageIface.get_image_size$VH.set(seg, x);
    }
    public static MemorySegment get_image_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_size$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkImageIface.get_image_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_size get_image_size(MemorySegment segment, SegmentScope scope) {
        return get_image_size.ofAddress(get_image_size$get(segment), scope);
    }
    static final FunctionDescriptor set_image_description$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_image_description_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_image_description_UP$MH = RuntimeHelper.upcallHandle(set_image_description.class, "apply", _AtkImageIface.set_image_description_UP$FUNC);
    static final FunctionDescriptor set_image_description_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_image_description_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.set_image_description_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*set_image_description)(AtkImage*,const gchar*);
     * }
     */
    public interface set_image_description {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(set_image_description fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkImageIface.set_image_description_UP$MH, fi, _AtkImageIface.set_image_description$FUNC, scope);
        }
        static set_image_description ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)_AtkImageIface.set_image_description_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_image_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_image_description"));
    public static VarHandle set_image_description$VH() {
        return _AtkImageIface.set_image_description$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*set_image_description)(AtkImage*,const gchar*);
     * }
     */
    public static MemorySegment set_image_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.set_image_description$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*set_image_description)(AtkImage*,const gchar*);
     * }
     */
    public static void set_image_description$set(MemorySegment seg, MemorySegment x) {
        _AtkImageIface.set_image_description$VH.set(seg, x);
    }
    public static MemorySegment set_image_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.set_image_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_image_description$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkImageIface.set_image_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_image_description set_image_description(MemorySegment segment, SegmentScope scope) {
        return set_image_description.ofAddress(set_image_description$get(segment), scope);
    }
    static final FunctionDescriptor get_image_locale$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_image_locale_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_locale_UP$MH = RuntimeHelper.upcallHandle(get_image_locale.class, "apply", _AtkImageIface.get_image_locale_UP$FUNC);
    static final FunctionDescriptor get_image_locale_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_image_locale_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkImageIface.get_image_locale_DOWN$FUNC
    );
    /**
     * {@snippet :
 * const gchar* (*get_image_locale)(AtkImage*);
     * }
     */
    public interface get_image_locale {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_image_locale fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkImageIface.get_image_locale_UP$MH, fi, _AtkImageIface.get_image_locale$FUNC, scope);
        }
        static get_image_locale ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_locale_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_image_locale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_image_locale"));
    public static VarHandle get_image_locale$VH() {
        return _AtkImageIface.get_image_locale$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const gchar* (*get_image_locale)(AtkImage*);
     * }
     */
    public static MemorySegment get_image_locale$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_locale$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const gchar* (*get_image_locale)(AtkImage*);
     * }
     */
    public static void get_image_locale$set(MemorySegment seg, MemorySegment x) {
        _AtkImageIface.get_image_locale$VH.set(seg, x);
    }
    public static MemorySegment get_image_locale$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkImageIface.get_image_locale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_locale$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkImageIface.get_image_locale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_locale get_image_locale(MemorySegment segment, SegmentScope scope) {
        return get_image_locale.ofAddress(get_image_locale$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


