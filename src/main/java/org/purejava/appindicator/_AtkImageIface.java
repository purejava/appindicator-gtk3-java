// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _AtkImageIface {
 *     struct _GTypeInterface parent;
 *     void (*get_image_position)(struct _AtkImage*,int*,int*,enum AtkCoordType);
 *     char* (*get_image_description)(struct _AtkImage*);
 *     void (*get_image_size)(struct _AtkImage*,int*,int*);
 *     int (*set_image_description)(struct _AtkImage*,char*);
 *     char* (*get_image_locale)(struct _AtkImage*);
 * };
 * }
 */
public class _AtkImageIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2038.const$1;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*get_image_position)(struct _AtkImage*,int*,int*,enum AtkCoordType);
     * }
     */
    public interface get_image_position {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(get_image_position fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2038.const$2, fi, constants$331.const$4, scope);
        }
        static get_image_position ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$1085.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_image_position$VH() {
        return constants$2038.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_image_position)(struct _AtkImage*,int*,int*,enum AtkCoordType);
     * }
     */
    public static MemorySegment get_image_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2038.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_image_position)(struct _AtkImage*,int*,int*,enum AtkCoordType);
     * }
     */
    public static void get_image_position$set(MemorySegment seg, MemorySegment x) {
        constants$2038.const$3.set(seg, x);
    }
    public static MemorySegment get_image_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2038.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_position$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2038.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_position get_image_position(MemorySegment segment, Arena scope) {
        return get_image_position.ofAddress(get_image_position$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_image_description)(struct _AtkImage*);
     * }
     */
    public interface get_image_description {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_image_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2038.const$4, fi, constants$5.const$2, scope);
        }
        static get_image_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_image_description$VH() {
        return constants$2038.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_image_description)(struct _AtkImage*);
     * }
     */
    public static MemorySegment get_image_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2038.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_image_description)(struct _AtkImage*);
     * }
     */
    public static void get_image_description$set(MemorySegment seg, MemorySegment x) {
        constants$2038.const$5.set(seg, x);
    }
    public static MemorySegment get_image_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2038.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2038.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_description get_image_description(MemorySegment segment, Arena scope) {
        return get_image_description.ofAddress(get_image_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_image_size)(struct _AtkImage*,int*,int*);
     * }
     */
    public interface get_image_size {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_image_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2039.const$0, fi, constants$14.const$3, scope);
        }
        static get_image_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_image_size$VH() {
        return constants$2039.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_image_size)(struct _AtkImage*,int*,int*);
     * }
     */
    public static MemorySegment get_image_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2039.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_image_size)(struct _AtkImage*,int*,int*);
     * }
     */
    public static void get_image_size$set(MemorySegment seg, MemorySegment x) {
        constants$2039.const$1.set(seg, x);
    }
    public static MemorySegment get_image_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2039.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2039.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_size get_image_size(MemorySegment segment, Arena scope) {
        return get_image_size.ofAddress(get_image_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_image_description)(struct _AtkImage*,char*);
     * }
     */
    public interface set_image_description {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_image_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2039.const$2, fi, constants$9.const$0, scope);
        }
        static set_image_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_image_description$VH() {
        return constants$2039.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_image_description)(struct _AtkImage*,char*);
     * }
     */
    public static MemorySegment set_image_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2039.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_image_description)(struct _AtkImage*,char*);
     * }
     */
    public static void set_image_description$set(MemorySegment seg, MemorySegment x) {
        constants$2039.const$3.set(seg, x);
    }
    public static MemorySegment set_image_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2039.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_image_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2039.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_image_description set_image_description(MemorySegment segment, Arena scope) {
        return set_image_description.ofAddress(set_image_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_image_locale)(struct _AtkImage*);
     * }
     */
    public interface get_image_locale {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_image_locale fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2039.const$4, fi, constants$5.const$2, scope);
        }
        static get_image_locale ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_image_locale$VH() {
        return constants$2039.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_image_locale)(struct _AtkImage*);
     * }
     */
    public static MemorySegment get_image_locale$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2039.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_image_locale)(struct _AtkImage*);
     * }
     */
    public static void get_image_locale$set(MemorySegment seg, MemorySegment x) {
        constants$2039.const$5.set(seg, x);
    }
    public static MemorySegment get_image_locale$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2039.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_image_locale$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2039.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_image_locale get_image_locale(MemorySegment segment, Arena scope) {
        return get_image_locale.ofAddress(get_image_locale$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


