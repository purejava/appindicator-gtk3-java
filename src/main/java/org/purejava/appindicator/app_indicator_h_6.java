// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_6 extends app_indicator_h_7 {

    app_indicator_h_6() {
        // Should not be called directly
    }

    private static class gtk_application_set_app_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_set_app_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_set_app_menu(GtkApplication *application, GMenuModel *app_menu)
     * }
     */
    public static FunctionDescriptor gtk_application_set_app_menu$descriptor() {
        return gtk_application_set_app_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_set_app_menu(GtkApplication *application, GMenuModel *app_menu)
     * }
     */
    public static MethodHandle gtk_application_set_app_menu$handle() {
        return gtk_application_set_app_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_set_app_menu(GtkApplication *application, GMenuModel *app_menu)
     * }
     */
    public static void gtk_application_set_app_menu(MemorySegment application, MemorySegment app_menu) {
        var mh$ = gtk_application_set_app_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_set_app_menu", application, app_menu);
            }
            mh$.invokeExact(application, app_menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_menubar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_menubar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuModel *gtk_application_get_menubar(GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_application_get_menubar$descriptor() {
        return gtk_application_get_menubar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuModel *gtk_application_get_menubar(GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_application_get_menubar$handle() {
        return gtk_application_get_menubar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuModel *gtk_application_get_menubar(GtkApplication *application)
     * }
     */
    public static MemorySegment gtk_application_get_menubar(MemorySegment application) {
        var mh$ = gtk_application_get_menubar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_menubar", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_set_menubar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_set_menubar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_set_menubar(GtkApplication *application, GMenuModel *menubar)
     * }
     */
    public static FunctionDescriptor gtk_application_set_menubar$descriptor() {
        return gtk_application_set_menubar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_set_menubar(GtkApplication *application, GMenuModel *menubar)
     * }
     */
    public static MethodHandle gtk_application_set_menubar$handle() {
        return gtk_application_set_menubar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_set_menubar(GtkApplication *application, GMenuModel *menubar)
     * }
     */
    public static void gtk_application_set_menubar(MemorySegment application, MemorySegment menubar) {
        var mh$ = gtk_application_set_menubar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_set_menubar", application, menubar);
            }
            mh$.invokeExact(application, menubar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_add_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_add_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_add_accelerator(GtkApplication *application, const gchar *accelerator, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static FunctionDescriptor gtk_application_add_accelerator$descriptor() {
        return gtk_application_add_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_add_accelerator(GtkApplication *application, const gchar *accelerator, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static MethodHandle gtk_application_add_accelerator$handle() {
        return gtk_application_add_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_add_accelerator(GtkApplication *application, const gchar *accelerator, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static void gtk_application_add_accelerator(MemorySegment application, MemorySegment accelerator, MemorySegment action_name, MemorySegment parameter) {
        var mh$ = gtk_application_add_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_add_accelerator", application, accelerator, action_name, parameter);
            }
            mh$.invokeExact(application, accelerator, action_name, parameter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_remove_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_remove_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_remove_accelerator(GtkApplication *application, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static FunctionDescriptor gtk_application_remove_accelerator$descriptor() {
        return gtk_application_remove_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_remove_accelerator(GtkApplication *application, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static MethodHandle gtk_application_remove_accelerator$handle() {
        return gtk_application_remove_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_remove_accelerator(GtkApplication *application, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static void gtk_application_remove_accelerator(MemorySegment application, MemorySegment action_name, MemorySegment parameter) {
        var mh$ = gtk_application_remove_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_remove_accelerator", application, action_name, parameter);
            }
            mh$.invokeExact(application, action_name, parameter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_APPLICATION_INHIBIT_LOGOUT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_APPLICATION_INHIBIT_LOGOUT = 1
     * }
     */
    public static int GTK_APPLICATION_INHIBIT_LOGOUT() {
        return GTK_APPLICATION_INHIBIT_LOGOUT;
    }
    private static final int GTK_APPLICATION_INHIBIT_SWITCH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_APPLICATION_INHIBIT_SWITCH = 2
     * }
     */
    public static int GTK_APPLICATION_INHIBIT_SWITCH() {
        return GTK_APPLICATION_INHIBIT_SWITCH;
    }
    private static final int GTK_APPLICATION_INHIBIT_SUSPEND = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_APPLICATION_INHIBIT_SUSPEND = 4
     * }
     */
    public static int GTK_APPLICATION_INHIBIT_SUSPEND() {
        return GTK_APPLICATION_INHIBIT_SUSPEND;
    }
    private static final int GTK_APPLICATION_INHIBIT_IDLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_APPLICATION_INHIBIT_IDLE = 8
     * }
     */
    public static int GTK_APPLICATION_INHIBIT_IDLE() {
        return GTK_APPLICATION_INHIBIT_IDLE;
    }

    private static class gtk_application_inhibit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_inhibit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_application_inhibit(GtkApplication *application, GtkWindow *window, GtkApplicationInhibitFlags flags, const gchar *reason)
     * }
     */
    public static FunctionDescriptor gtk_application_inhibit$descriptor() {
        return gtk_application_inhibit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_application_inhibit(GtkApplication *application, GtkWindow *window, GtkApplicationInhibitFlags flags, const gchar *reason)
     * }
     */
    public static MethodHandle gtk_application_inhibit$handle() {
        return gtk_application_inhibit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_application_inhibit(GtkApplication *application, GtkWindow *window, GtkApplicationInhibitFlags flags, const gchar *reason)
     * }
     */
    public static int gtk_application_inhibit(MemorySegment application, MemorySegment window, int flags, MemorySegment reason) {
        var mh$ = gtk_application_inhibit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_inhibit", application, window, flags, reason);
            }
            return (int)mh$.invokeExact(application, window, flags, reason);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_uninhibit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_uninhibit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_uninhibit(GtkApplication *application, guint cookie)
     * }
     */
    public static FunctionDescriptor gtk_application_uninhibit$descriptor() {
        return gtk_application_uninhibit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_uninhibit(GtkApplication *application, guint cookie)
     * }
     */
    public static MethodHandle gtk_application_uninhibit$handle() {
        return gtk_application_uninhibit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_uninhibit(GtkApplication *application, guint cookie)
     * }
     */
    public static void gtk_application_uninhibit(MemorySegment application, int cookie) {
        var mh$ = gtk_application_uninhibit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_uninhibit", application, cookie);
            }
            mh$.invokeExact(application, cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_is_inhibited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_is_inhibited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_application_is_inhibited(GtkApplication *application, GtkApplicationInhibitFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_application_is_inhibited$descriptor() {
        return gtk_application_is_inhibited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_application_is_inhibited(GtkApplication *application, GtkApplicationInhibitFlags flags)
     * }
     */
    public static MethodHandle gtk_application_is_inhibited$handle() {
        return gtk_application_is_inhibited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_application_is_inhibited(GtkApplication *application, GtkApplicationInhibitFlags flags)
     * }
     */
    public static int gtk_application_is_inhibited(MemorySegment application, int flags) {
        var mh$ = gtk_application_is_inhibited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_is_inhibited", application, flags);
            }
            return (int)mh$.invokeExact(application, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_window_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_window_by_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_application_get_window_by_id(GtkApplication *application, guint id)
     * }
     */
    public static FunctionDescriptor gtk_application_get_window_by_id$descriptor() {
        return gtk_application_get_window_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_application_get_window_by_id(GtkApplication *application, guint id)
     * }
     */
    public static MethodHandle gtk_application_get_window_by_id$handle() {
        return gtk_application_get_window_by_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindow *gtk_application_get_window_by_id(GtkApplication *application, guint id)
     * }
     */
    public static MemorySegment gtk_application_get_window_by_id(MemorySegment application, int id) {
        var mh$ = gtk_application_get_window_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_window_by_id", application, id);
            }
            return (MemorySegment)mh$.invokeExact(application, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_active_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_active_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_application_get_active_window(GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_application_get_active_window$descriptor() {
        return gtk_application_get_active_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_application_get_active_window(GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_application_get_active_window$handle() {
        return gtk_application_get_active_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindow *gtk_application_get_active_window(GtkApplication *application)
     * }
     */
    public static MemorySegment gtk_application_get_active_window(MemorySegment application) {
        var mh$ = gtk_application_get_active_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_active_window", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_list_action_descriptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_list_action_descriptions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_application_list_action_descriptions(GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_application_list_action_descriptions$descriptor() {
        return gtk_application_list_action_descriptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_application_list_action_descriptions(GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_application_list_action_descriptions$handle() {
        return gtk_application_list_action_descriptions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_application_list_action_descriptions(GtkApplication *application)
     * }
     */
    public static MemorySegment gtk_application_list_action_descriptions(MemorySegment application) {
        var mh$ = gtk_application_list_action_descriptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_list_action_descriptions", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_accels_for_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_accels_for_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_application_get_accels_for_action(GtkApplication *application, const gchar *detailed_action_name)
     * }
     */
    public static FunctionDescriptor gtk_application_get_accels_for_action$descriptor() {
        return gtk_application_get_accels_for_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_application_get_accels_for_action(GtkApplication *application, const gchar *detailed_action_name)
     * }
     */
    public static MethodHandle gtk_application_get_accels_for_action$handle() {
        return gtk_application_get_accels_for_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_application_get_accels_for_action(GtkApplication *application, const gchar *detailed_action_name)
     * }
     */
    public static MemorySegment gtk_application_get_accels_for_action(MemorySegment application, MemorySegment detailed_action_name) {
        var mh$ = gtk_application_get_accels_for_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_accels_for_action", application, detailed_action_name);
            }
            return (MemorySegment)mh$.invokeExact(application, detailed_action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_actions_for_accel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_actions_for_accel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_application_get_actions_for_accel(GtkApplication *application, const gchar *accel)
     * }
     */
    public static FunctionDescriptor gtk_application_get_actions_for_accel$descriptor() {
        return gtk_application_get_actions_for_accel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_application_get_actions_for_accel(GtkApplication *application, const gchar *accel)
     * }
     */
    public static MethodHandle gtk_application_get_actions_for_accel$handle() {
        return gtk_application_get_actions_for_accel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_application_get_actions_for_accel(GtkApplication *application, const gchar *accel)
     * }
     */
    public static MemorySegment gtk_application_get_actions_for_accel(MemorySegment application, MemorySegment accel) {
        var mh$ = gtk_application_get_actions_for_accel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_actions_for_accel", application, accel);
            }
            return (MemorySegment)mh$.invokeExact(application, accel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_set_accels_for_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_set_accels_for_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_set_accels_for_action(GtkApplication *application, const gchar *detailed_action_name, const gchar *const *accels)
     * }
     */
    public static FunctionDescriptor gtk_application_set_accels_for_action$descriptor() {
        return gtk_application_set_accels_for_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_set_accels_for_action(GtkApplication *application, const gchar *detailed_action_name, const gchar *const *accels)
     * }
     */
    public static MethodHandle gtk_application_set_accels_for_action$handle() {
        return gtk_application_set_accels_for_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_set_accels_for_action(GtkApplication *application, const gchar *detailed_action_name, const gchar *const *accels)
     * }
     */
    public static void gtk_application_set_accels_for_action(MemorySegment application, MemorySegment detailed_action_name, MemorySegment accels) {
        var mh$ = gtk_application_set_accels_for_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_set_accels_for_action", application, detailed_action_name, accels);
            }
            mh$.invokeExact(application, detailed_action_name, accels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_prefers_app_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_prefers_app_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_application_prefers_app_menu(GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_application_prefers_app_menu$descriptor() {
        return gtk_application_prefers_app_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_application_prefers_app_menu(GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_application_prefers_app_menu$handle() {
        return gtk_application_prefers_app_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_application_prefers_app_menu(GtkApplication *application)
     * }
     */
    public static int gtk_application_prefers_app_menu(MemorySegment application) {
        var mh$ = gtk_application_prefers_app_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_prefers_app_menu", application);
            }
            return (int)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_menu_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_menu_by_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenu *gtk_application_get_menu_by_id(GtkApplication *application, const gchar *id)
     * }
     */
    public static FunctionDescriptor gtk_application_get_menu_by_id$descriptor() {
        return gtk_application_get_menu_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenu *gtk_application_get_menu_by_id(GtkApplication *application, const gchar *id)
     * }
     */
    public static MethodHandle gtk_application_get_menu_by_id$handle() {
        return gtk_application_get_menu_by_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenu *gtk_application_get_menu_by_id(GtkApplication *application, const gchar *id)
     * }
     */
    public static MemorySegment gtk_application_get_menu_by_id(MemorySegment application, MemorySegment id) {
        var mh$ = gtk_application_get_menu_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_menu_by_id", application, id);
            }
            return (MemorySegment)mh$.invokeExact(application, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkApplication *GtkApplication_autoptr
     * }
     */
    public static final AddressLayout GtkApplication_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkApplication_listautoptr
     * }
     */
    public static final AddressLayout GtkApplication_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkApplication_slistautoptr
     * }
     */
    public static final AddressLayout GtkApplication_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkApplication_queueautoptr
     * }
     */
    public static final AddressLayout GtkApplication_queueautoptr = app_indicator_h.C_POINTER;
    private static final int GTK_RESIZE_PARENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESIZE_PARENT = 0
     * }
     */
    public static int GTK_RESIZE_PARENT() {
        return GTK_RESIZE_PARENT;
    }
    private static final int GTK_RESIZE_QUEUE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESIZE_QUEUE = 1
     * }
     */
    public static int GTK_RESIZE_QUEUE() {
        return GTK_RESIZE_QUEUE;
    }
    private static final int GTK_RESIZE_IMMEDIATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESIZE_IMMEDIATE = 2
     * }
     */
    public static int GTK_RESIZE_IMMEDIATE() {
        return GTK_RESIZE_IMMEDIATE;
    }

    private static class gtk_container_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_container_get_type()
     * }
     */
    public static FunctionDescriptor gtk_container_get_type$descriptor() {
        return gtk_container_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_container_get_type()
     * }
     */
    public static MethodHandle gtk_container_get_type$handle() {
        return gtk_container_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_container_get_type()
     * }
     */
    public static long gtk_container_get_type() {
        var mh$ = gtk_container_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_set_border_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_set_border_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_set_border_width(GtkContainer *container, guint border_width)
     * }
     */
    public static FunctionDescriptor gtk_container_set_border_width$descriptor() {
        return gtk_container_set_border_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_set_border_width(GtkContainer *container, guint border_width)
     * }
     */
    public static MethodHandle gtk_container_set_border_width$handle() {
        return gtk_container_set_border_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_set_border_width(GtkContainer *container, guint border_width)
     * }
     */
    public static void gtk_container_set_border_width(MemorySegment container, int border_width) {
        var mh$ = gtk_container_set_border_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_set_border_width", container, border_width);
            }
            mh$.invokeExact(container, border_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_border_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_border_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_container_get_border_width(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_get_border_width$descriptor() {
        return gtk_container_get_border_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_container_get_border_width(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_get_border_width$handle() {
        return gtk_container_get_border_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_container_get_border_width(GtkContainer *container)
     * }
     */
    public static int gtk_container_get_border_width(MemorySegment container) {
        var mh$ = gtk_container_get_border_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_border_width", container);
            }
            return (int)mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_add(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_container_add$descriptor() {
        return gtk_container_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_add(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_container_add$handle() {
        return gtk_container_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_add(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static void gtk_container_add(MemorySegment container, MemorySegment widget) {
        var mh$ = gtk_container_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_add", container, widget);
            }
            mh$.invokeExact(container, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_remove(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_container_remove$descriptor() {
        return gtk_container_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_remove(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_container_remove$handle() {
        return gtk_container_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_remove(GtkContainer *container, GtkWidget *widget)
     * }
     */
    public static void gtk_container_remove(MemorySegment container, MemorySegment widget) {
        var mh$ = gtk_container_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_remove", container, widget);
            }
            mh$.invokeExact(container, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_set_resize_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_set_resize_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_set_resize_mode(GtkContainer *container, GtkResizeMode resize_mode)
     * }
     */
    public static FunctionDescriptor gtk_container_set_resize_mode$descriptor() {
        return gtk_container_set_resize_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_set_resize_mode(GtkContainer *container, GtkResizeMode resize_mode)
     * }
     */
    public static MethodHandle gtk_container_set_resize_mode$handle() {
        return gtk_container_set_resize_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_set_resize_mode(GtkContainer *container, GtkResizeMode resize_mode)
     * }
     */
    public static void gtk_container_set_resize_mode(MemorySegment container, int resize_mode) {
        var mh$ = gtk_container_set_resize_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_set_resize_mode", container, resize_mode);
            }
            mh$.invokeExact(container, resize_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_resize_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_resize_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkResizeMode gtk_container_get_resize_mode(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_get_resize_mode$descriptor() {
        return gtk_container_get_resize_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkResizeMode gtk_container_get_resize_mode(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_get_resize_mode$handle() {
        return gtk_container_get_resize_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkResizeMode gtk_container_get_resize_mode(GtkContainer *container)
     * }
     */
    public static int gtk_container_get_resize_mode(MemorySegment container) {
        var mh$ = gtk_container_get_resize_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_resize_mode", container);
            }
            return (int)mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_check_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_check_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_check_resize(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_check_resize$descriptor() {
        return gtk_container_check_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_check_resize(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_check_resize$handle() {
        return gtk_container_check_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_check_resize(GtkContainer *container)
     * }
     */
    public static void gtk_container_check_resize(MemorySegment container) {
        var mh$ = gtk_container_check_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_check_resize", container);
            }
            mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_foreach(GtkContainer *container, GtkCallback callback, gpointer callback_data)
     * }
     */
    public static FunctionDescriptor gtk_container_foreach$descriptor() {
        return gtk_container_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_foreach(GtkContainer *container, GtkCallback callback, gpointer callback_data)
     * }
     */
    public static MethodHandle gtk_container_foreach$handle() {
        return gtk_container_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_foreach(GtkContainer *container, GtkCallback callback, gpointer callback_data)
     * }
     */
    public static void gtk_container_foreach(MemorySegment container, MemorySegment callback, MemorySegment callback_data) {
        var mh$ = gtk_container_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_foreach", container, callback, callback_data);
            }
            mh$.invokeExact(container, callback, callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_container_get_children(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_get_children$descriptor() {
        return gtk_container_get_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_container_get_children(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_get_children$handle() {
        return gtk_container_get_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_container_get_children(GtkContainer *container)
     * }
     */
    public static MemorySegment gtk_container_get_children(MemorySegment container) {
        var mh$ = gtk_container_get_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_children", container);
            }
            return (MemorySegment)mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_propagate_draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_propagate_draw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_propagate_draw(GtkContainer *container, GtkWidget *child, cairo_t *cr)
     * }
     */
    public static FunctionDescriptor gtk_container_propagate_draw$descriptor() {
        return gtk_container_propagate_draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_propagate_draw(GtkContainer *container, GtkWidget *child, cairo_t *cr)
     * }
     */
    public static MethodHandle gtk_container_propagate_draw$handle() {
        return gtk_container_propagate_draw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_propagate_draw(GtkContainer *container, GtkWidget *child, cairo_t *cr)
     * }
     */
    public static void gtk_container_propagate_draw(MemorySegment container, MemorySegment child, MemorySegment cr) {
        var mh$ = gtk_container_propagate_draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_propagate_draw", container, child, cr);
            }
            mh$.invokeExact(container, child, cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_set_focus_chain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_set_focus_chain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_chain(GtkContainer *container, GList *focusable_widgets)
     * }
     */
    public static FunctionDescriptor gtk_container_set_focus_chain$descriptor() {
        return gtk_container_set_focus_chain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_chain(GtkContainer *container, GList *focusable_widgets)
     * }
     */
    public static MethodHandle gtk_container_set_focus_chain$handle() {
        return gtk_container_set_focus_chain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_chain(GtkContainer *container, GList *focusable_widgets)
     * }
     */
    public static void gtk_container_set_focus_chain(MemorySegment container, MemorySegment focusable_widgets) {
        var mh$ = gtk_container_set_focus_chain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_set_focus_chain", container, focusable_widgets);
            }
            mh$.invokeExact(container, focusable_widgets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_focus_chain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_focus_chain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_container_get_focus_chain(GtkContainer *container, GList **focusable_widgets)
     * }
     */
    public static FunctionDescriptor gtk_container_get_focus_chain$descriptor() {
        return gtk_container_get_focus_chain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_container_get_focus_chain(GtkContainer *container, GList **focusable_widgets)
     * }
     */
    public static MethodHandle gtk_container_get_focus_chain$handle() {
        return gtk_container_get_focus_chain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_container_get_focus_chain(GtkContainer *container, GList **focusable_widgets)
     * }
     */
    public static int gtk_container_get_focus_chain(MemorySegment container, MemorySegment focusable_widgets) {
        var mh$ = gtk_container_get_focus_chain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_focus_chain", container, focusable_widgets);
            }
            return (int)mh$.invokeExact(container, focusable_widgets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_unset_focus_chain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_unset_focus_chain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_unset_focus_chain(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_unset_focus_chain$descriptor() {
        return gtk_container_unset_focus_chain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_unset_focus_chain(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_unset_focus_chain$handle() {
        return gtk_container_unset_focus_chain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_unset_focus_chain(GtkContainer *container)
     * }
     */
    public static void gtk_container_unset_focus_chain(MemorySegment container) {
        var mh$ = gtk_container_unset_focus_chain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_unset_focus_chain", container);
            }
            mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_set_reallocate_redraws {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_set_reallocate_redraws"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_set_reallocate_redraws(GtkContainer *container, gboolean needs_redraws)
     * }
     */
    public static FunctionDescriptor gtk_container_set_reallocate_redraws$descriptor() {
        return gtk_container_set_reallocate_redraws.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_set_reallocate_redraws(GtkContainer *container, gboolean needs_redraws)
     * }
     */
    public static MethodHandle gtk_container_set_reallocate_redraws$handle() {
        return gtk_container_set_reallocate_redraws.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_set_reallocate_redraws(GtkContainer *container, gboolean needs_redraws)
     * }
     */
    public static void gtk_container_set_reallocate_redraws(MemorySegment container, int needs_redraws) {
        var mh$ = gtk_container_set_reallocate_redraws.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_set_reallocate_redraws", container, needs_redraws);
            }
            mh$.invokeExact(container, needs_redraws);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_set_focus_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_set_focus_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_child(GtkContainer *container, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_container_set_focus_child$descriptor() {
        return gtk_container_set_focus_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_child(GtkContainer *container, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_container_set_focus_child$handle() {
        return gtk_container_set_focus_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_child(GtkContainer *container, GtkWidget *child)
     * }
     */
    public static void gtk_container_set_focus_child(MemorySegment container, MemorySegment child) {
        var mh$ = gtk_container_set_focus_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_set_focus_child", container, child);
            }
            mh$.invokeExact(container, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_focus_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_focus_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_container_get_focus_child(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_get_focus_child$descriptor() {
        return gtk_container_get_focus_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_container_get_focus_child(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_get_focus_child$handle() {
        return gtk_container_get_focus_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_container_get_focus_child(GtkContainer *container)
     * }
     */
    public static MemorySegment gtk_container_get_focus_child(MemorySegment container) {
        var mh$ = gtk_container_get_focus_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_focus_child", container);
            }
            return (MemorySegment)mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_set_focus_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_set_focus_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_vadjustment(GtkContainer *container, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_container_set_focus_vadjustment$descriptor() {
        return gtk_container_set_focus_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_vadjustment(GtkContainer *container, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_container_set_focus_vadjustment$handle() {
        return gtk_container_set_focus_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_vadjustment(GtkContainer *container, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_container_set_focus_vadjustment(MemorySegment container, MemorySegment adjustment) {
        var mh$ = gtk_container_set_focus_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_set_focus_vadjustment", container, adjustment);
            }
            mh$.invokeExact(container, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_focus_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_focus_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_container_get_focus_vadjustment(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_get_focus_vadjustment$descriptor() {
        return gtk_container_get_focus_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_container_get_focus_vadjustment(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_get_focus_vadjustment$handle() {
        return gtk_container_get_focus_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_container_get_focus_vadjustment(GtkContainer *container)
     * }
     */
    public static MemorySegment gtk_container_get_focus_vadjustment(MemorySegment container) {
        var mh$ = gtk_container_get_focus_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_focus_vadjustment", container);
            }
            return (MemorySegment)mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_set_focus_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_set_focus_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_hadjustment(GtkContainer *container, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_container_set_focus_hadjustment$descriptor() {
        return gtk_container_set_focus_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_hadjustment(GtkContainer *container, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_container_set_focus_hadjustment$handle() {
        return gtk_container_set_focus_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_set_focus_hadjustment(GtkContainer *container, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_container_set_focus_hadjustment(MemorySegment container, MemorySegment adjustment) {
        var mh$ = gtk_container_set_focus_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_set_focus_hadjustment", container, adjustment);
            }
            mh$.invokeExact(container, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_focus_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_focus_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_container_get_focus_hadjustment(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_get_focus_hadjustment$descriptor() {
        return gtk_container_get_focus_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_container_get_focus_hadjustment(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_get_focus_hadjustment$handle() {
        return gtk_container_get_focus_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_container_get_focus_hadjustment(GtkContainer *container)
     * }
     */
    public static MemorySegment gtk_container_get_focus_hadjustment(MemorySegment container) {
        var mh$ = gtk_container_get_focus_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_focus_hadjustment", container);
            }
            return (MemorySegment)mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_resize_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_resize_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_resize_children(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_resize_children$descriptor() {
        return gtk_container_resize_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_resize_children(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_resize_children$handle() {
        return gtk_container_resize_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_resize_children(GtkContainer *container)
     * }
     */
    public static void gtk_container_resize_children(MemorySegment container) {
        var mh$ = gtk_container_resize_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_resize_children", container);
            }
            mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_child_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_child_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_container_child_type(GtkContainer *container)
     * }
     */
    public static FunctionDescriptor gtk_container_child_type$descriptor() {
        return gtk_container_child_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_container_child_type(GtkContainer *container)
     * }
     */
    public static MethodHandle gtk_container_child_type$handle() {
        return gtk_container_child_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_container_child_type(GtkContainer *container)
     * }
     */
    public static long gtk_container_child_type(MemorySegment container) {
        var mh$ = gtk_container_child_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_child_type", container);
            }
            return (long)mh$.invokeExact(container);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_class_install_child_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_class_install_child_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_class_install_child_property(GtkContainerClass *cclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor gtk_container_class_install_child_property$descriptor() {
        return gtk_container_class_install_child_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_class_install_child_property(GtkContainerClass *cclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static MethodHandle gtk_container_class_install_child_property$handle() {
        return gtk_container_class_install_child_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_class_install_child_property(GtkContainerClass *cclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static void gtk_container_class_install_child_property(MemorySegment cclass, int property_id, MemorySegment pspec) {
        var mh$ = gtk_container_class_install_child_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_class_install_child_property", cclass, property_id, pspec);
            }
            mh$.invokeExact(cclass, property_id, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_class_install_child_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_class_install_child_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_class_install_child_properties(GtkContainerClass *cclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static FunctionDescriptor gtk_container_class_install_child_properties$descriptor() {
        return gtk_container_class_install_child_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_class_install_child_properties(GtkContainerClass *cclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static MethodHandle gtk_container_class_install_child_properties$handle() {
        return gtk_container_class_install_child_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_class_install_child_properties(GtkContainerClass *cclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static void gtk_container_class_install_child_properties(MemorySegment cclass, int n_pspecs, MemorySegment pspecs) {
        var mh$ = gtk_container_class_install_child_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_class_install_child_properties", cclass, n_pspecs, pspecs);
            }
            mh$.invokeExact(cclass, n_pspecs, pspecs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_class_find_child_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_class_find_child_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *gtk_container_class_find_child_property(GObjectClass *cclass, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor gtk_container_class_find_child_property$descriptor() {
        return gtk_container_class_find_child_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *gtk_container_class_find_child_property(GObjectClass *cclass, const gchar *property_name)
     * }
     */
    public static MethodHandle gtk_container_class_find_child_property$handle() {
        return gtk_container_class_find_child_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *gtk_container_class_find_child_property(GObjectClass *cclass, const gchar *property_name)
     * }
     */
    public static MemorySegment gtk_container_class_find_child_property(MemorySegment cclass, MemorySegment property_name) {
        var mh$ = gtk_container_class_find_child_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_class_find_child_property", cclass, property_name);
            }
            return (MemorySegment)mh$.invokeExact(cclass, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_class_list_child_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_class_list_child_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **gtk_container_class_list_child_properties(GObjectClass *cclass, guint *n_properties)
     * }
     */
    public static FunctionDescriptor gtk_container_class_list_child_properties$descriptor() {
        return gtk_container_class_list_child_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **gtk_container_class_list_child_properties(GObjectClass *cclass, guint *n_properties)
     * }
     */
    public static MethodHandle gtk_container_class_list_child_properties$handle() {
        return gtk_container_class_list_child_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec **gtk_container_class_list_child_properties(GObjectClass *cclass, guint *n_properties)
     * }
     */
    public static MemorySegment gtk_container_class_list_child_properties(MemorySegment cclass, MemorySegment n_properties) {
        var mh$ = gtk_container_class_list_child_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_class_list_child_properties", cclass, n_properties);
            }
            return (MemorySegment)mh$.invokeExact(cclass, n_properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_container_add_with_properties(GtkContainer *container, GtkWidget *widget, const gchar *first_prop_name, ...)
     * }
     */
    public static class gtk_container_add_with_properties {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_container_add_with_properties");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_container_add_with_properties(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_container_add_with_properties(GtkContainer *container, GtkWidget *widget, const gchar *first_prop_name, ...)
         * }
         */
        public static gtk_container_add_with_properties makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_container_add_with_properties(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment container, MemorySegment widget, MemorySegment first_prop_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_container_add_with_properties", container, widget, first_prop_name, x3);
                }
                spreader.invokeExact(container, widget, first_prop_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_container_child_set(GtkContainer *container, GtkWidget *child, const gchar *first_prop_name, ...)
     * }
     */
    public static class gtk_container_child_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_container_child_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_container_child_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_container_child_set(GtkContainer *container, GtkWidget *child, const gchar *first_prop_name, ...)
         * }
         */
        public static gtk_container_child_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_container_child_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment container, MemorySegment child, MemorySegment first_prop_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_container_child_set", container, child, first_prop_name, x3);
                }
                spreader.invokeExact(container, child, first_prop_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_container_child_get(GtkContainer *container, GtkWidget *child, const gchar *first_prop_name, ...)
     * }
     */
    public static class gtk_container_child_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_container_child_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_container_child_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_container_child_get(GtkContainer *container, GtkWidget *child, const gchar *first_prop_name, ...)
         * }
         */
        public static gtk_container_child_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_container_child_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment container, MemorySegment child, MemorySegment first_prop_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_container_child_get", container, child, first_prop_name, x3);
                }
                spreader.invokeExact(container, child, first_prop_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_container_child_set_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_child_set_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_child_set_property(GtkContainer *container, GtkWidget *child, const gchar *property_name, const GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_container_child_set_property$descriptor() {
        return gtk_container_child_set_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_child_set_property(GtkContainer *container, GtkWidget *child, const gchar *property_name, const GValue *value)
     * }
     */
    public static MethodHandle gtk_container_child_set_property$handle() {
        return gtk_container_child_set_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_child_set_property(GtkContainer *container, GtkWidget *child, const gchar *property_name, const GValue *value)
     * }
     */
    public static void gtk_container_child_set_property(MemorySegment container, MemorySegment child, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_container_child_set_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_child_set_property", container, child, property_name, value);
            }
            mh$.invokeExact(container, child, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_child_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_child_get_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_child_get_property(GtkContainer *container, GtkWidget *child, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_container_child_get_property$descriptor() {
        return gtk_container_child_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_child_get_property(GtkContainer *container, GtkWidget *child, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle gtk_container_child_get_property$handle() {
        return gtk_container_child_get_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_child_get_property(GtkContainer *container, GtkWidget *child, const gchar *property_name, GValue *value)
     * }
     */
    public static void gtk_container_child_get_property(MemorySegment container, MemorySegment child, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_container_child_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_child_get_property", container, child, property_name, value);
            }
            mh$.invokeExact(container, child, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_child_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_child_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_child_notify(GtkContainer *container, GtkWidget *child, const gchar *child_property)
     * }
     */
    public static FunctionDescriptor gtk_container_child_notify$descriptor() {
        return gtk_container_child_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_child_notify(GtkContainer *container, GtkWidget *child, const gchar *child_property)
     * }
     */
    public static MethodHandle gtk_container_child_notify$handle() {
        return gtk_container_child_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_child_notify(GtkContainer *container, GtkWidget *child, const gchar *child_property)
     * }
     */
    public static void gtk_container_child_notify(MemorySegment container, MemorySegment child, MemorySegment child_property) {
        var mh$ = gtk_container_child_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_child_notify", container, child, child_property);
            }
            mh$.invokeExact(container, child, child_property);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_child_notify_by_pspec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_child_notify_by_pspec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_child_notify_by_pspec(GtkContainer *container, GtkWidget *child, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor gtk_container_child_notify_by_pspec$descriptor() {
        return gtk_container_child_notify_by_pspec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_child_notify_by_pspec(GtkContainer *container, GtkWidget *child, GParamSpec *pspec)
     * }
     */
    public static MethodHandle gtk_container_child_notify_by_pspec$handle() {
        return gtk_container_child_notify_by_pspec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_child_notify_by_pspec(GtkContainer *container, GtkWidget *child, GParamSpec *pspec)
     * }
     */
    public static void gtk_container_child_notify_by_pspec(MemorySegment container, MemorySegment child, MemorySegment pspec) {
        var mh$ = gtk_container_child_notify_by_pspec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_child_notify_by_pspec", container, child, pspec);
            }
            mh$.invokeExact(container, child, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_forall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_forall"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_forall(GtkContainer *container, GtkCallback callback, gpointer callback_data)
     * }
     */
    public static FunctionDescriptor gtk_container_forall$descriptor() {
        return gtk_container_forall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_forall(GtkContainer *container, GtkCallback callback, gpointer callback_data)
     * }
     */
    public static MethodHandle gtk_container_forall$handle() {
        return gtk_container_forall.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_forall(GtkContainer *container, GtkCallback callback, gpointer callback_data)
     * }
     */
    public static void gtk_container_forall(MemorySegment container, MemorySegment callback, MemorySegment callback_data) {
        var mh$ = gtk_container_forall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_forall", container, callback, callback_data);
            }
            mh$.invokeExact(container, callback, callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_class_handle_border_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_class_handle_border_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_container_class_handle_border_width(GtkContainerClass *klass)
     * }
     */
    public static FunctionDescriptor gtk_container_class_handle_border_width$descriptor() {
        return gtk_container_class_handle_border_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_container_class_handle_border_width(GtkContainerClass *klass)
     * }
     */
    public static MethodHandle gtk_container_class_handle_border_width$handle() {
        return gtk_container_class_handle_border_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_container_class_handle_border_width(GtkContainerClass *klass)
     * }
     */
    public static void gtk_container_class_handle_border_width(MemorySegment klass) {
        var mh$ = gtk_container_class_handle_border_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_class_handle_border_width", klass);
            }
            mh$.invokeExact(klass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_container_get_path_for_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_container_get_path_for_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_container_get_path_for_child(GtkContainer *container, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_container_get_path_for_child$descriptor() {
        return gtk_container_get_path_for_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_container_get_path_for_child(GtkContainer *container, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_container_get_path_for_child$handle() {
        return gtk_container_get_path_for_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_container_get_path_for_child(GtkContainer *container, GtkWidget *child)
     * }
     */
    public static MemorySegment gtk_container_get_path_for_child(MemorySegment container, MemorySegment child) {
        var mh$ = gtk_container_get_path_for_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_container_get_path_for_child", container, child);
            }
            return (MemorySegment)mh$.invokeExact(container, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkContainer *GtkContainer_autoptr
     * }
     */
    public static final AddressLayout GtkContainer_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkContainer_listautoptr
     * }
     */
    public static final AddressLayout GtkContainer_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkContainer_slistautoptr
     * }
     */
    public static final AddressLayout GtkContainer_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkContainer_queueautoptr
     * }
     */
    public static final AddressLayout GtkContainer_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_bin_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_bin_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_bin_get_type()
     * }
     */
    public static FunctionDescriptor gtk_bin_get_type$descriptor() {
        return gtk_bin_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_bin_get_type()
     * }
     */
    public static MethodHandle gtk_bin_get_type$handle() {
        return gtk_bin_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_bin_get_type()
     * }
     */
    public static long gtk_bin_get_type() {
        var mh$ = gtk_bin_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_bin_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_bin_get_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_bin_get_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_bin_get_child(GtkBin *bin)
     * }
     */
    public static FunctionDescriptor gtk_bin_get_child$descriptor() {
        return gtk_bin_get_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_bin_get_child(GtkBin *bin)
     * }
     */
    public static MethodHandle gtk_bin_get_child$handle() {
        return gtk_bin_get_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_bin_get_child(GtkBin *bin)
     * }
     */
    public static MemorySegment gtk_bin_get_child(MemorySegment bin) {
        var mh$ = gtk_bin_get_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_bin_get_child", bin);
            }
            return (MemorySegment)mh$.invokeExact(bin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_bin_set_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_bin_set_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_bin_set_child(GtkBin *bin, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor _gtk_bin_set_child$descriptor() {
        return _gtk_bin_set_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_bin_set_child(GtkBin *bin, GtkWidget *widget)
     * }
     */
    public static MethodHandle _gtk_bin_set_child$handle() {
        return _gtk_bin_set_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_bin_set_child(GtkBin *bin, GtkWidget *widget)
     * }
     */
    public static void _gtk_bin_set_child(MemorySegment bin, MemorySegment widget) {
        var mh$ = _gtk_bin_set_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_bin_set_child", bin, widget);
            }
            mh$.invokeExact(bin, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkBin *GtkBin_autoptr
     * }
     */
    public static final AddressLayout GtkBin_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkBin_listautoptr
     * }
     */
    public static final AddressLayout GtkBin_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkBin_slistautoptr
     * }
     */
    public static final AddressLayout GtkBin_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkBin_queueautoptr
     * }
     */
    public static final AddressLayout GtkBin_queueautoptr = app_indicator_h.C_POINTER;
    private static final int GTK_WINDOW_TOPLEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WINDOW_TOPLEVEL = 0
     * }
     */
    public static int GTK_WINDOW_TOPLEVEL() {
        return GTK_WINDOW_TOPLEVEL;
    }
    private static final int GTK_WINDOW_POPUP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WINDOW_POPUP = 1
     * }
     */
    public static int GTK_WINDOW_POPUP() {
        return GTK_WINDOW_POPUP;
    }
    private static final int GTK_WIN_POS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WIN_POS_NONE = 0
     * }
     */
    public static int GTK_WIN_POS_NONE() {
        return GTK_WIN_POS_NONE;
    }
    private static final int GTK_WIN_POS_CENTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WIN_POS_CENTER = 1
     * }
     */
    public static int GTK_WIN_POS_CENTER() {
        return GTK_WIN_POS_CENTER;
    }
    private static final int GTK_WIN_POS_MOUSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WIN_POS_MOUSE = 2
     * }
     */
    public static int GTK_WIN_POS_MOUSE() {
        return GTK_WIN_POS_MOUSE;
    }
    private static final int GTK_WIN_POS_CENTER_ALWAYS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WIN_POS_CENTER_ALWAYS = 3
     * }
     */
    public static int GTK_WIN_POS_CENTER_ALWAYS() {
        return GTK_WIN_POS_CENTER_ALWAYS;
    }
    private static final int GTK_WIN_POS_CENTER_ON_PARENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WIN_POS_CENTER_ON_PARENT = 4
     * }
     */
    public static int GTK_WIN_POS_CENTER_ON_PARENT() {
        return GTK_WIN_POS_CENTER_ON_PARENT;
    }

    private static class gtk_window_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_window_get_type()
     * }
     */
    public static FunctionDescriptor gtk_window_get_type$descriptor() {
        return gtk_window_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_window_get_type()
     * }
     */
    public static MethodHandle gtk_window_get_type$handle() {
        return gtk_window_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_window_get_type()
     * }
     */
    public static long gtk_window_get_type() {
        var mh$ = gtk_window_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_new(GtkWindowType type)
     * }
     */
    public static FunctionDescriptor gtk_window_new$descriptor() {
        return gtk_window_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_new(GtkWindowType type)
     * }
     */
    public static MethodHandle gtk_window_new$handle() {
        return gtk_window_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_new(GtkWindowType type)
     * }
     */
    public static MemorySegment gtk_window_new(int type) {
        var mh$ = gtk_window_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_new", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_title(GtkWindow *window, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_window_set_title$descriptor() {
        return gtk_window_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_title(GtkWindow *window, const gchar *title)
     * }
     */
    public static MethodHandle gtk_window_set_title$handle() {
        return gtk_window_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_title(GtkWindow *window, const gchar *title)
     * }
     */
    public static void gtk_window_set_title(MemorySegment window, MemorySegment title) {
        var mh$ = gtk_window_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_title", window, title);
            }
            mh$.invokeExact(window, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_title(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_title$descriptor() {
        return gtk_window_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_title(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_title$handle() {
        return gtk_window_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_title(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_title(MemorySegment window) {
        var mh$ = gtk_window_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_title", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_wmclass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_wmclass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_wmclass(GtkWindow *window, const gchar *wmclass_name, const gchar *wmclass_class)
     * }
     */
    public static FunctionDescriptor gtk_window_set_wmclass$descriptor() {
        return gtk_window_set_wmclass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_wmclass(GtkWindow *window, const gchar *wmclass_name, const gchar *wmclass_class)
     * }
     */
    public static MethodHandle gtk_window_set_wmclass$handle() {
        return gtk_window_set_wmclass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_wmclass(GtkWindow *window, const gchar *wmclass_name, const gchar *wmclass_class)
     * }
     */
    public static void gtk_window_set_wmclass(MemorySegment window, MemorySegment wmclass_name, MemorySegment wmclass_class) {
        var mh$ = gtk_window_set_wmclass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_wmclass", window, wmclass_name, wmclass_class);
            }
            mh$.invokeExact(window, wmclass_name, wmclass_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_role {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_role"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_role(GtkWindow *window, const gchar *role)
     * }
     */
    public static FunctionDescriptor gtk_window_set_role$descriptor() {
        return gtk_window_set_role.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_role(GtkWindow *window, const gchar *role)
     * }
     */
    public static MethodHandle gtk_window_set_role$handle() {
        return gtk_window_set_role.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_role(GtkWindow *window, const gchar *role)
     * }
     */
    public static void gtk_window_set_role(MemorySegment window, MemorySegment role) {
        var mh$ = gtk_window_set_role.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_role", window, role);
            }
            mh$.invokeExact(window, role);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_startup_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_startup_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_startup_id(GtkWindow *window, const gchar *startup_id)
     * }
     */
    public static FunctionDescriptor gtk_window_set_startup_id$descriptor() {
        return gtk_window_set_startup_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_startup_id(GtkWindow *window, const gchar *startup_id)
     * }
     */
    public static MethodHandle gtk_window_set_startup_id$handle() {
        return gtk_window_set_startup_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_startup_id(GtkWindow *window, const gchar *startup_id)
     * }
     */
    public static void gtk_window_set_startup_id(MemorySegment window, MemorySegment startup_id) {
        var mh$ = gtk_window_set_startup_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_startup_id", window, startup_id);
            }
            mh$.invokeExact(window, startup_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_role {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_role"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_role(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_role$descriptor() {
        return gtk_window_get_role.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_role(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_role$handle() {
        return gtk_window_get_role.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_role(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_role(MemorySegment window) {
        var mh$ = gtk_window_get_role.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_role", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_add_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_add_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_window_add_accel_group$descriptor() {
        return gtk_window_add_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_window_add_accel_group$handle() {
        return gtk_window_add_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_window_add_accel_group(MemorySegment window, MemorySegment accel_group) {
        var mh$ = gtk_window_add_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_add_accel_group", window, accel_group);
            }
            mh$.invokeExact(window, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_remove_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_remove_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_remove_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_window_remove_accel_group$descriptor() {
        return gtk_window_remove_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_remove_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_window_remove_accel_group$handle() {
        return gtk_window_remove_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_remove_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_window_remove_accel_group(MemorySegment window, MemorySegment accel_group) {
        var mh$ = gtk_window_remove_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_remove_accel_group", window, accel_group);
            }
            mh$.invokeExact(window, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_position(GtkWindow *window, GtkWindowPosition position)
     * }
     */
    public static FunctionDescriptor gtk_window_set_position$descriptor() {
        return gtk_window_set_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_position(GtkWindow *window, GtkWindowPosition position)
     * }
     */
    public static MethodHandle gtk_window_set_position$handle() {
        return gtk_window_set_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_position(GtkWindow *window, GtkWindowPosition position)
     * }
     */
    public static void gtk_window_set_position(MemorySegment window, int position) {
        var mh$ = gtk_window_set_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_position", window, position);
            }
            mh$.invokeExact(window, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_activate_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_activate_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_focus(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_activate_focus$descriptor() {
        return gtk_window_activate_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_focus(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_activate_focus$handle() {
        return gtk_window_activate_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_focus(GtkWindow *window)
     * }
     */
    public static int gtk_window_activate_focus(MemorySegment window) {
        var mh$ = gtk_window_activate_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_activate_focus", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_focus(GtkWindow *window, GtkWidget *focus)
     * }
     */
    public static FunctionDescriptor gtk_window_set_focus$descriptor() {
        return gtk_window_set_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_focus(GtkWindow *window, GtkWidget *focus)
     * }
     */
    public static MethodHandle gtk_window_set_focus$handle() {
        return gtk_window_set_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_focus(GtkWindow *window, GtkWidget *focus)
     * }
     */
    public static void gtk_window_set_focus(MemorySegment window, MemorySegment focus) {
        var mh$ = gtk_window_set_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_focus", window, focus);
            }
            mh$.invokeExact(window, focus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_focus(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_focus$descriptor() {
        return gtk_window_get_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_focus(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_focus$handle() {
        return gtk_window_get_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_focus(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_focus(MemorySegment window) {
        var mh$ = gtk_window_get_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_focus", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default(GtkWindow *window, GtkWidget *default_widget)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default$descriptor() {
        return gtk_window_set_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default(GtkWindow *window, GtkWidget *default_widget)
     * }
     */
    public static MethodHandle gtk_window_set_default$handle() {
        return gtk_window_set_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_default(GtkWindow *window, GtkWidget *default_widget)
     * }
     */
    public static void gtk_window_set_default(MemorySegment window, MemorySegment default_widget) {
        var mh$ = gtk_window_set_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default", window, default_widget);
            }
            mh$.invokeExact(window, default_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_default_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_default_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_default_widget(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_default_widget$descriptor() {
        return gtk_window_get_default_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_default_widget(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_default_widget$handle() {
        return gtk_window_get_default_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_default_widget(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_default_widget(MemorySegment window) {
        var mh$ = gtk_window_get_default_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_default_widget", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_activate_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_activate_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_default(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_activate_default$descriptor() {
        return gtk_window_activate_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_default(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_activate_default$handle() {
        return gtk_window_activate_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_default(GtkWindow *window)
     * }
     */
    public static int gtk_window_activate_default(MemorySegment window) {
        var mh$ = gtk_window_activate_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_activate_default", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_transient_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_transient_for"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_transient_for(GtkWindow *window, GtkWindow *parent)
     * }
     */
    public static FunctionDescriptor gtk_window_set_transient_for$descriptor() {
        return gtk_window_set_transient_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_transient_for(GtkWindow *window, GtkWindow *parent)
     * }
     */
    public static MethodHandle gtk_window_set_transient_for$handle() {
        return gtk_window_set_transient_for.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_transient_for(GtkWindow *window, GtkWindow *parent)
     * }
     */
    public static void gtk_window_set_transient_for(MemorySegment window, MemorySegment parent) {
        var mh$ = gtk_window_set_transient_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_transient_for", window, parent);
            }
            mh$.invokeExact(window, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_transient_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_transient_for"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_window_get_transient_for(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_transient_for$descriptor() {
        return gtk_window_get_transient_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_window_get_transient_for(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_transient_for$handle() {
        return gtk_window_get_transient_for.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindow *gtk_window_get_transient_for(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_transient_for(MemorySegment window) {
        var mh$ = gtk_window_get_transient_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_transient_for", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_attached_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_attached_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_attached_to(GtkWindow *window, GtkWidget *attach_widget)
     * }
     */
    public static FunctionDescriptor gtk_window_set_attached_to$descriptor() {
        return gtk_window_set_attached_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_attached_to(GtkWindow *window, GtkWidget *attach_widget)
     * }
     */
    public static MethodHandle gtk_window_set_attached_to$handle() {
        return gtk_window_set_attached_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_attached_to(GtkWindow *window, GtkWidget *attach_widget)
     * }
     */
    public static void gtk_window_set_attached_to(MemorySegment window, MemorySegment attach_widget) {
        var mh$ = gtk_window_set_attached_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_attached_to", window, attach_widget);
            }
            mh$.invokeExact(window, attach_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_attached_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_attached_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_attached_to(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_attached_to$descriptor() {
        return gtk_window_get_attached_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_attached_to(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_attached_to$handle() {
        return gtk_window_get_attached_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_attached_to(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_attached_to(MemorySegment window) {
        var mh$ = gtk_window_get_attached_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_attached_to", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_opacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_opacity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_opacity(GtkWindow *window, gdouble opacity)
     * }
     */
    public static FunctionDescriptor gtk_window_set_opacity$descriptor() {
        return gtk_window_set_opacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_opacity(GtkWindow *window, gdouble opacity)
     * }
     */
    public static MethodHandle gtk_window_set_opacity$handle() {
        return gtk_window_set_opacity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_opacity(GtkWindow *window, gdouble opacity)
     * }
     */
    public static void gtk_window_set_opacity(MemorySegment window, double opacity) {
        var mh$ = gtk_window_set_opacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_opacity", window, opacity);
            }
            mh$.invokeExact(window, opacity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_opacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_opacity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_window_get_opacity(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_opacity$descriptor() {
        return gtk_window_get_opacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_window_get_opacity(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_opacity$handle() {
        return gtk_window_get_opacity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_window_get_opacity(GtkWindow *window)
     * }
     */
    public static double gtk_window_get_opacity(MemorySegment window) {
        var mh$ = gtk_window_get_opacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_opacity", window);
            }
            return (double)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_type_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_type_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_type_hint(GtkWindow *window, GdkWindowTypeHint hint)
     * }
     */
    public static FunctionDescriptor gtk_window_set_type_hint$descriptor() {
        return gtk_window_set_type_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_type_hint(GtkWindow *window, GdkWindowTypeHint hint)
     * }
     */
    public static MethodHandle gtk_window_set_type_hint$handle() {
        return gtk_window_set_type_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_type_hint(GtkWindow *window, GdkWindowTypeHint hint)
     * }
     */
    public static void gtk_window_set_type_hint(MemorySegment window, int hint) {
        var mh$ = gtk_window_set_type_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_type_hint", window, hint);
            }
            mh$.invokeExact(window, hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_type_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_type_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindowTypeHint gtk_window_get_type_hint(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_type_hint$descriptor() {
        return gtk_window_get_type_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindowTypeHint gtk_window_get_type_hint(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_type_hint$handle() {
        return gtk_window_get_type_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindowTypeHint gtk_window_get_type_hint(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_type_hint(MemorySegment window) {
        var mh$ = gtk_window_get_type_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_type_hint", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_skip_taskbar_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_skip_taskbar_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_skip_taskbar_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_skip_taskbar_hint$descriptor() {
        return gtk_window_set_skip_taskbar_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_skip_taskbar_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_skip_taskbar_hint$handle() {
        return gtk_window_set_skip_taskbar_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_skip_taskbar_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_skip_taskbar_hint(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_skip_taskbar_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_skip_taskbar_hint", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_skip_taskbar_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_skip_taskbar_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_skip_taskbar_hint(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_skip_taskbar_hint$descriptor() {
        return gtk_window_get_skip_taskbar_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_skip_taskbar_hint(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_skip_taskbar_hint$handle() {
        return gtk_window_get_skip_taskbar_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_skip_taskbar_hint(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_skip_taskbar_hint(MemorySegment window) {
        var mh$ = gtk_window_get_skip_taskbar_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_skip_taskbar_hint", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_skip_pager_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_skip_pager_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_skip_pager_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_skip_pager_hint$descriptor() {
        return gtk_window_set_skip_pager_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_skip_pager_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_skip_pager_hint$handle() {
        return gtk_window_set_skip_pager_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_skip_pager_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_skip_pager_hint(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_skip_pager_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_skip_pager_hint", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_skip_pager_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_skip_pager_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_skip_pager_hint(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_skip_pager_hint$descriptor() {
        return gtk_window_get_skip_pager_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_skip_pager_hint(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_skip_pager_hint$handle() {
        return gtk_window_get_skip_pager_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_skip_pager_hint(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_skip_pager_hint(MemorySegment window) {
        var mh$ = gtk_window_get_skip_pager_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_skip_pager_hint", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_urgency_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_urgency_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_urgency_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_urgency_hint$descriptor() {
        return gtk_window_set_urgency_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_urgency_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_urgency_hint$handle() {
        return gtk_window_set_urgency_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_urgency_hint(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_urgency_hint(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_urgency_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_urgency_hint", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_urgency_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_urgency_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_urgency_hint(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_urgency_hint$descriptor() {
        return gtk_window_get_urgency_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_urgency_hint(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_urgency_hint$handle() {
        return gtk_window_get_urgency_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_urgency_hint(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_urgency_hint(MemorySegment window) {
        var mh$ = gtk_window_get_urgency_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_urgency_hint", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_accept_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_accept_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_accept_focus(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_accept_focus$descriptor() {
        return gtk_window_set_accept_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_accept_focus(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_accept_focus$handle() {
        return gtk_window_set_accept_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_accept_focus(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_accept_focus(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_accept_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_accept_focus", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_accept_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_accept_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_accept_focus(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_accept_focus$descriptor() {
        return gtk_window_get_accept_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_accept_focus(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_accept_focus$handle() {
        return gtk_window_get_accept_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_accept_focus(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_accept_focus(MemorySegment window) {
        var mh$ = gtk_window_get_accept_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_accept_focus", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_focus_on_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_focus_on_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_focus_on_map(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_focus_on_map$descriptor() {
        return gtk_window_set_focus_on_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_focus_on_map(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_focus_on_map$handle() {
        return gtk_window_set_focus_on_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_focus_on_map(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_focus_on_map(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_focus_on_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_focus_on_map", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_focus_on_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_focus_on_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_focus_on_map(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_focus_on_map$descriptor() {
        return gtk_window_get_focus_on_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_focus_on_map(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_focus_on_map$handle() {
        return gtk_window_get_focus_on_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_focus_on_map(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_focus_on_map(MemorySegment window) {
        var mh$ = gtk_window_get_focus_on_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_focus_on_map", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_destroy_with_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_destroy_with_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_destroy_with_parent(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_destroy_with_parent$descriptor() {
        return gtk_window_set_destroy_with_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_destroy_with_parent(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_destroy_with_parent$handle() {
        return gtk_window_set_destroy_with_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_destroy_with_parent(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_destroy_with_parent(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_destroy_with_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_destroy_with_parent", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_destroy_with_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_destroy_with_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_destroy_with_parent(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_destroy_with_parent$descriptor() {
        return gtk_window_get_destroy_with_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_destroy_with_parent(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_destroy_with_parent$handle() {
        return gtk_window_get_destroy_with_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_destroy_with_parent(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_destroy_with_parent(MemorySegment window) {
        var mh$ = gtk_window_get_destroy_with_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_destroy_with_parent", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_hide_titlebar_when_maximized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_hide_titlebar_when_maximized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_hide_titlebar_when_maximized(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_hide_titlebar_when_maximized$descriptor() {
        return gtk_window_set_hide_titlebar_when_maximized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_hide_titlebar_when_maximized(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_hide_titlebar_when_maximized$handle() {
        return gtk_window_set_hide_titlebar_when_maximized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_hide_titlebar_when_maximized(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_hide_titlebar_when_maximized(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_hide_titlebar_when_maximized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_hide_titlebar_when_maximized", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_hide_titlebar_when_maximized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_hide_titlebar_when_maximized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_hide_titlebar_when_maximized(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_hide_titlebar_when_maximized$descriptor() {
        return gtk_window_get_hide_titlebar_when_maximized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_hide_titlebar_when_maximized(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_hide_titlebar_when_maximized$handle() {
        return gtk_window_get_hide_titlebar_when_maximized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_hide_titlebar_when_maximized(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_hide_titlebar_when_maximized(MemorySegment window) {
        var mh$ = gtk_window_get_hide_titlebar_when_maximized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_hide_titlebar_when_maximized", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_mnemonics_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_mnemonics_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_mnemonics_visible(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_mnemonics_visible$descriptor() {
        return gtk_window_set_mnemonics_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_mnemonics_visible(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_mnemonics_visible$handle() {
        return gtk_window_set_mnemonics_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_mnemonics_visible(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_mnemonics_visible(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_mnemonics_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_mnemonics_visible", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_mnemonics_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_mnemonics_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_mnemonics_visible(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_mnemonics_visible$descriptor() {
        return gtk_window_get_mnemonics_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_mnemonics_visible(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_mnemonics_visible$handle() {
        return gtk_window_get_mnemonics_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_mnemonics_visible(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_mnemonics_visible(MemorySegment window) {
        var mh$ = gtk_window_get_mnemonics_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_mnemonics_visible", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_focus_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_focus_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_focus_visible(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_focus_visible$descriptor() {
        return gtk_window_set_focus_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_focus_visible(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_focus_visible$handle() {
        return gtk_window_set_focus_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_focus_visible(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_focus_visible(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_focus_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_focus_visible", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_focus_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_focus_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_focus_visible(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_focus_visible$descriptor() {
        return gtk_window_get_focus_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_focus_visible(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_focus_visible$handle() {
        return gtk_window_get_focus_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_focus_visible(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_focus_visible(MemorySegment window) {
        var mh$ = gtk_window_get_focus_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_focus_visible", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_resizable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_resizable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_resizable(GtkWindow *window, gboolean resizable)
     * }
     */
    public static FunctionDescriptor gtk_window_set_resizable$descriptor() {
        return gtk_window_set_resizable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_resizable(GtkWindow *window, gboolean resizable)
     * }
     */
    public static MethodHandle gtk_window_set_resizable$handle() {
        return gtk_window_set_resizable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_resizable(GtkWindow *window, gboolean resizable)
     * }
     */
    public static void gtk_window_set_resizable(MemorySegment window, int resizable) {
        var mh$ = gtk_window_set_resizable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_resizable", window, resizable);
            }
            mh$.invokeExact(window, resizable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_resizable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_resizable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_resizable(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_resizable$descriptor() {
        return gtk_window_get_resizable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_resizable(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_resizable$handle() {
        return gtk_window_get_resizable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_resizable(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_resizable(MemorySegment window) {
        var mh$ = gtk_window_get_resizable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_resizable", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_gravity(GtkWindow *window, GdkGravity gravity)
     * }
     */
    public static FunctionDescriptor gtk_window_set_gravity$descriptor() {
        return gtk_window_set_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_gravity(GtkWindow *window, GdkGravity gravity)
     * }
     */
    public static MethodHandle gtk_window_set_gravity$handle() {
        return gtk_window_set_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_gravity(GtkWindow *window, GdkGravity gravity)
     * }
     */
    public static void gtk_window_set_gravity(MemorySegment window, int gravity) {
        var mh$ = gtk_window_set_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_gravity", window, gravity);
            }
            mh$.invokeExact(window, gravity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGravity gtk_window_get_gravity(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_gravity$descriptor() {
        return gtk_window_get_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGravity gtk_window_get_gravity(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_gravity$handle() {
        return gtk_window_get_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGravity gtk_window_get_gravity(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_gravity(MemorySegment window) {
        var mh$ = gtk_window_get_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_gravity", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_geometry_hints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_geometry_hints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_geometry_hints(GtkWindow *window, GtkWidget *geometry_widget, GdkGeometry *geometry, GdkWindowHints geom_mask)
     * }
     */
    public static FunctionDescriptor gtk_window_set_geometry_hints$descriptor() {
        return gtk_window_set_geometry_hints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_geometry_hints(GtkWindow *window, GtkWidget *geometry_widget, GdkGeometry *geometry, GdkWindowHints geom_mask)
     * }
     */
    public static MethodHandle gtk_window_set_geometry_hints$handle() {
        return gtk_window_set_geometry_hints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_geometry_hints(GtkWindow *window, GtkWidget *geometry_widget, GdkGeometry *geometry, GdkWindowHints geom_mask)
     * }
     */
    public static void gtk_window_set_geometry_hints(MemorySegment window, MemorySegment geometry_widget, MemorySegment geometry, int geom_mask) {
        var mh$ = gtk_window_set_geometry_hints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_geometry_hints", window, geometry_widget, geometry, geom_mask);
            }
            mh$.invokeExact(window, geometry_widget, geometry, geom_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_screen(GtkWindow *window, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_window_set_screen$descriptor() {
        return gtk_window_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_screen(GtkWindow *window, GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_window_set_screen$handle() {
        return gtk_window_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_screen(GtkWindow *window, GdkScreen *screen)
     * }
     */
    public static void gtk_window_set_screen(MemorySegment window, MemorySegment screen) {
        var mh$ = gtk_window_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_screen", window, screen);
            }
            mh$.invokeExact(window, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_window_get_screen(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_screen$descriptor() {
        return gtk_window_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_window_get_screen(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_screen$handle() {
        return gtk_window_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gtk_window_get_screen(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_screen(MemorySegment window) {
        var mh$ = gtk_window_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_screen", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_is_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_is_active(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_is_active$descriptor() {
        return gtk_window_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_is_active(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_is_active$handle() {
        return gtk_window_is_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_is_active(GtkWindow *window)
     * }
     */
    public static int gtk_window_is_active(MemorySegment window) {
        var mh$ = gtk_window_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_is_active", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_has_toplevel_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_has_toplevel_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_has_toplevel_focus(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_has_toplevel_focus$descriptor() {
        return gtk_window_has_toplevel_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_has_toplevel_focus(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_has_toplevel_focus$handle() {
        return gtk_window_has_toplevel_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_has_toplevel_focus(GtkWindow *window)
     * }
     */
    public static int gtk_window_has_toplevel_focus(MemorySegment window) {
        var mh$ = gtk_window_has_toplevel_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_has_toplevel_focus", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_decorated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_decorated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_decorated(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_decorated$descriptor() {
        return gtk_window_set_decorated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_decorated(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_decorated$handle() {
        return gtk_window_set_decorated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_decorated(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_decorated(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_decorated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_decorated", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_decorated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_decorated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_decorated(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_decorated$descriptor() {
        return gtk_window_get_decorated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_decorated(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_decorated$handle() {
        return gtk_window_get_decorated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_decorated(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_decorated(MemorySegment window) {
        var mh$ = gtk_window_get_decorated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_decorated", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_deletable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_deletable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_deletable(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_deletable$descriptor() {
        return gtk_window_set_deletable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_deletable(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_deletable$handle() {
        return gtk_window_set_deletable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_deletable(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_deletable(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_deletable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_deletable", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_deletable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_deletable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_deletable(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_deletable$descriptor() {
        return gtk_window_get_deletable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_deletable(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_deletable$handle() {
        return gtk_window_get_deletable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_deletable(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_deletable(MemorySegment window) {
        var mh$ = gtk_window_get_deletable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_deletable", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_icon_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_icon_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_list(GtkWindow *window, GList *list)
     * }
     */
    public static FunctionDescriptor gtk_window_set_icon_list$descriptor() {
        return gtk_window_set_icon_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_list(GtkWindow *window, GList *list)
     * }
     */
    public static MethodHandle gtk_window_set_icon_list$handle() {
        return gtk_window_set_icon_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_list(GtkWindow *window, GList *list)
     * }
     */
    public static void gtk_window_set_icon_list(MemorySegment window, MemorySegment list) {
        var mh$ = gtk_window_set_icon_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_icon_list", window, list);
            }
            mh$.invokeExact(window, list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_icon_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_icon_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_window_get_icon_list(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_icon_list$descriptor() {
        return gtk_window_get_icon_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_window_get_icon_list(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_icon_list$handle() {
        return gtk_window_get_icon_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_window_get_icon_list(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_icon_list(MemorySegment window) {
        var mh$ = gtk_window_get_icon_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_icon_list", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon(GtkWindow *window, GdkPixbuf *icon)
     * }
     */
    public static FunctionDescriptor gtk_window_set_icon$descriptor() {
        return gtk_window_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon(GtkWindow *window, GdkPixbuf *icon)
     * }
     */
    public static MethodHandle gtk_window_set_icon$handle() {
        return gtk_window_set_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_icon(GtkWindow *window, GdkPixbuf *icon)
     * }
     */
    public static void gtk_window_set_icon(MemorySegment window, MemorySegment icon) {
        var mh$ = gtk_window_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_icon", window, icon);
            }
            mh$.invokeExact(window, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_name(GtkWindow *window, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_window_set_icon_name$descriptor() {
        return gtk_window_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_name(GtkWindow *window, const gchar *name)
     * }
     */
    public static MethodHandle gtk_window_set_icon_name$handle() {
        return gtk_window_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_icon_name(GtkWindow *window, const gchar *name)
     * }
     */
    public static void gtk_window_set_icon_name(MemorySegment window, MemorySegment name) {
        var mh$ = gtk_window_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_icon_name", window, name);
            }
            mh$.invokeExact(window, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_icon_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_icon_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_set_icon_from_file(GtkWindow *window, const gchar *filename, GError **err)
     * }
     */
    public static FunctionDescriptor gtk_window_set_icon_from_file$descriptor() {
        return gtk_window_set_icon_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_set_icon_from_file(GtkWindow *window, const gchar *filename, GError **err)
     * }
     */
    public static MethodHandle gtk_window_set_icon_from_file$handle() {
        return gtk_window_set_icon_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_set_icon_from_file(GtkWindow *window, const gchar *filename, GError **err)
     * }
     */
    public static int gtk_window_set_icon_from_file(MemorySegment window, MemorySegment filename, MemorySegment err) {
        var mh$ = gtk_window_set_icon_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_icon_from_file", window, filename, err);
            }
            return (int)mh$.invokeExact(window, filename, err);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_window_get_icon(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_icon$descriptor() {
        return gtk_window_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_window_get_icon(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_icon$handle() {
        return gtk_window_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_window_get_icon(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_icon(MemorySegment window) {
        var mh$ = gtk_window_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_icon", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_icon_name(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_icon_name$descriptor() {
        return gtk_window_get_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_icon_name(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_icon_name$handle() {
        return gtk_window_get_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_icon_name(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_icon_name(MemorySegment window) {
        var mh$ = gtk_window_get_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_icon_name", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default_icon_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_default_icon_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon_list(GList *list)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default_icon_list$descriptor() {
        return gtk_window_set_default_icon_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon_list(GList *list)
     * }
     */
    public static MethodHandle gtk_window_set_default_icon_list$handle() {
        return gtk_window_set_default_icon_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon_list(GList *list)
     * }
     */
    public static void gtk_window_set_default_icon_list(MemorySegment list) {
        var mh$ = gtk_window_set_default_icon_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default_icon_list", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_default_icon_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_default_icon_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_window_get_default_icon_list()
     * }
     */
    public static FunctionDescriptor gtk_window_get_default_icon_list$descriptor() {
        return gtk_window_get_default_icon_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_window_get_default_icon_list()
     * }
     */
    public static MethodHandle gtk_window_get_default_icon_list$handle() {
        return gtk_window_get_default_icon_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_window_get_default_icon_list()
     * }
     */
    public static MemorySegment gtk_window_get_default_icon_list() {
        var mh$ = gtk_window_get_default_icon_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_default_icon_list");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_default_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon(GdkPixbuf *icon)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default_icon$descriptor() {
        return gtk_window_set_default_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon(GdkPixbuf *icon)
     * }
     */
    public static MethodHandle gtk_window_set_default_icon$handle() {
        return gtk_window_set_default_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon(GdkPixbuf *icon)
     * }
     */
    public static void gtk_window_set_default_icon(MemorySegment icon) {
        var mh$ = gtk_window_set_default_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default_icon", icon);
            }
            mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_default_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default_icon_name$descriptor() {
        return gtk_window_set_default_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon_name(const gchar *name)
     * }
     */
    public static MethodHandle gtk_window_set_default_icon_name$handle() {
        return gtk_window_set_default_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_default_icon_name(const gchar *name)
     * }
     */
    public static void gtk_window_set_default_icon_name(MemorySegment name) {
        var mh$ = gtk_window_set_default_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default_icon_name", name);
            }
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_default_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_default_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_default_icon_name()
     * }
     */
    public static FunctionDescriptor gtk_window_get_default_icon_name$descriptor() {
        return gtk_window_get_default_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_default_icon_name()
     * }
     */
    public static MethodHandle gtk_window_get_default_icon_name$handle() {
        return gtk_window_get_default_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_window_get_default_icon_name()
     * }
     */
    public static MemorySegment gtk_window_get_default_icon_name() {
        var mh$ = gtk_window_get_default_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_default_icon_name");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default_icon_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_default_icon_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_set_default_icon_from_file(const gchar *filename, GError **err)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default_icon_from_file$descriptor() {
        return gtk_window_set_default_icon_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_set_default_icon_from_file(const gchar *filename, GError **err)
     * }
     */
    public static MethodHandle gtk_window_set_default_icon_from_file$handle() {
        return gtk_window_set_default_icon_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_set_default_icon_from_file(const gchar *filename, GError **err)
     * }
     */
    public static int gtk_window_set_default_icon_from_file(MemorySegment filename, MemorySegment err) {
        var mh$ = gtk_window_set_default_icon_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default_icon_from_file", filename, err);
            }
            return (int)mh$.invokeExact(filename, err);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_auto_startup_notification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_auto_startup_notification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_auto_startup_notification(gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_auto_startup_notification$descriptor() {
        return gtk_window_set_auto_startup_notification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_auto_startup_notification(gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_auto_startup_notification$handle() {
        return gtk_window_set_auto_startup_notification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_auto_startup_notification(gboolean setting)
     * }
     */
    public static void gtk_window_set_auto_startup_notification(int setting) {
        var mh$ = gtk_window_set_auto_startup_notification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_auto_startup_notification", setting);
            }
            mh$.invokeExact(setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_modal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_modal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_modal(GtkWindow *window, gboolean modal)
     * }
     */
    public static FunctionDescriptor gtk_window_set_modal$descriptor() {
        return gtk_window_set_modal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_modal(GtkWindow *window, gboolean modal)
     * }
     */
    public static MethodHandle gtk_window_set_modal$handle() {
        return gtk_window_set_modal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_modal(GtkWindow *window, gboolean modal)
     * }
     */
    public static void gtk_window_set_modal(MemorySegment window, int modal) {
        var mh$ = gtk_window_set_modal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_modal", window, modal);
            }
            mh$.invokeExact(window, modal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_modal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_modal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_modal(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_modal$descriptor() {
        return gtk_window_get_modal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_modal(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_modal$handle() {
        return gtk_window_get_modal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_modal(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_modal(MemorySegment window) {
        var mh$ = gtk_window_get_modal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_modal", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_list_toplevels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_list_toplevels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_window_list_toplevels()
     * }
     */
    public static FunctionDescriptor gtk_window_list_toplevels$descriptor() {
        return gtk_window_list_toplevels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_window_list_toplevels()
     * }
     */
    public static MethodHandle gtk_window_list_toplevels$handle() {
        return gtk_window_list_toplevels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_window_list_toplevels()
     * }
     */
    public static MemorySegment gtk_window_list_toplevels() {
        var mh$ = gtk_window_list_toplevels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_list_toplevels");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_has_user_ref_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_has_user_ref_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_has_user_ref_count(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_has_user_ref_count$descriptor() {
        return gtk_window_set_has_user_ref_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_has_user_ref_count(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_has_user_ref_count$handle() {
        return gtk_window_set_has_user_ref_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_has_user_ref_count(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_has_user_ref_count(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_has_user_ref_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_has_user_ref_count", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_add_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_add_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_add_mnemonic(GtkWindow *window, guint keyval, GtkWidget *target)
     * }
     */
    public static FunctionDescriptor gtk_window_add_mnemonic$descriptor() {
        return gtk_window_add_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_add_mnemonic(GtkWindow *window, guint keyval, GtkWidget *target)
     * }
     */
    public static MethodHandle gtk_window_add_mnemonic$handle() {
        return gtk_window_add_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_add_mnemonic(GtkWindow *window, guint keyval, GtkWidget *target)
     * }
     */
    public static void gtk_window_add_mnemonic(MemorySegment window, int keyval, MemorySegment target) {
        var mh$ = gtk_window_add_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_add_mnemonic", window, keyval, target);
            }
            mh$.invokeExact(window, keyval, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_remove_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_remove_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_remove_mnemonic(GtkWindow *window, guint keyval, GtkWidget *target)
     * }
     */
    public static FunctionDescriptor gtk_window_remove_mnemonic$descriptor() {
        return gtk_window_remove_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_remove_mnemonic(GtkWindow *window, guint keyval, GtkWidget *target)
     * }
     */
    public static MethodHandle gtk_window_remove_mnemonic$handle() {
        return gtk_window_remove_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_remove_mnemonic(GtkWindow *window, guint keyval, GtkWidget *target)
     * }
     */
    public static void gtk_window_remove_mnemonic(MemorySegment window, int keyval, MemorySegment target) {
        var mh$ = gtk_window_remove_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_remove_mnemonic", window, keyval, target);
            }
            mh$.invokeExact(window, keyval, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_mnemonic_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_mnemonic_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_mnemonic_activate(GtkWindow *window, guint keyval, GdkModifierType modifier)
     * }
     */
    public static FunctionDescriptor gtk_window_mnemonic_activate$descriptor() {
        return gtk_window_mnemonic_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_mnemonic_activate(GtkWindow *window, guint keyval, GdkModifierType modifier)
     * }
     */
    public static MethodHandle gtk_window_mnemonic_activate$handle() {
        return gtk_window_mnemonic_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_mnemonic_activate(GtkWindow *window, guint keyval, GdkModifierType modifier)
     * }
     */
    public static int gtk_window_mnemonic_activate(MemorySegment window, int keyval, int modifier) {
        var mh$ = gtk_window_mnemonic_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_mnemonic_activate", window, keyval, modifier);
            }
            return (int)mh$.invokeExact(window, keyval, modifier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_mnemonic_modifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_mnemonic_modifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_mnemonic_modifier(GtkWindow *window, GdkModifierType modifier)
     * }
     */
    public static FunctionDescriptor gtk_window_set_mnemonic_modifier$descriptor() {
        return gtk_window_set_mnemonic_modifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_mnemonic_modifier(GtkWindow *window, GdkModifierType modifier)
     * }
     */
    public static MethodHandle gtk_window_set_mnemonic_modifier$handle() {
        return gtk_window_set_mnemonic_modifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_mnemonic_modifier(GtkWindow *window, GdkModifierType modifier)
     * }
     */
    public static void gtk_window_set_mnemonic_modifier(MemorySegment window, int modifier) {
        var mh$ = gtk_window_set_mnemonic_modifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_mnemonic_modifier", window, modifier);
            }
            mh$.invokeExact(window, modifier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_mnemonic_modifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_mnemonic_modifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_window_get_mnemonic_modifier(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_mnemonic_modifier$descriptor() {
        return gtk_window_get_mnemonic_modifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_window_get_mnemonic_modifier(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_mnemonic_modifier$handle() {
        return gtk_window_get_mnemonic_modifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkModifierType gtk_window_get_mnemonic_modifier(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_mnemonic_modifier(MemorySegment window) {
        var mh$ = gtk_window_get_mnemonic_modifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_mnemonic_modifier", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_activate_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_activate_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_key(GtkWindow *window, GdkEventKey *event)
     * }
     */
    public static FunctionDescriptor gtk_window_activate_key$descriptor() {
        return gtk_window_activate_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_key(GtkWindow *window, GdkEventKey *event)
     * }
     */
    public static MethodHandle gtk_window_activate_key$handle() {
        return gtk_window_activate_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_activate_key(GtkWindow *window, GdkEventKey *event)
     * }
     */
    public static int gtk_window_activate_key(MemorySegment window, MemorySegment event) {
        var mh$ = gtk_window_activate_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_activate_key", window, event);
            }
            return (int)mh$.invokeExact(window, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_propagate_key_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_propagate_key_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_propagate_key_event(GtkWindow *window, GdkEventKey *event)
     * }
     */
    public static FunctionDescriptor gtk_window_propagate_key_event$descriptor() {
        return gtk_window_propagate_key_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_propagate_key_event(GtkWindow *window, GdkEventKey *event)
     * }
     */
    public static MethodHandle gtk_window_propagate_key_event$handle() {
        return gtk_window_propagate_key_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_propagate_key_event(GtkWindow *window, GdkEventKey *event)
     * }
     */
    public static int gtk_window_propagate_key_event(MemorySegment window, MemorySegment event) {
        var mh$ = gtk_window_propagate_key_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_propagate_key_event", window, event);
            }
            return (int)mh$.invokeExact(window, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_present {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_present"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_present(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_present$descriptor() {
        return gtk_window_present.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_present(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_present$handle() {
        return gtk_window_present.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_present(GtkWindow *window)
     * }
     */
    public static void gtk_window_present(MemorySegment window) {
        var mh$ = gtk_window_present.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_present", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_present_with_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_present_with_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_present_with_time(GtkWindow *window, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gtk_window_present_with_time$descriptor() {
        return gtk_window_present_with_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_present_with_time(GtkWindow *window, guint32 timestamp)
     * }
     */
    public static MethodHandle gtk_window_present_with_time$handle() {
        return gtk_window_present_with_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_present_with_time(GtkWindow *window, guint32 timestamp)
     * }
     */
    public static void gtk_window_present_with_time(MemorySegment window, int timestamp) {
        var mh$ = gtk_window_present_with_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_present_with_time", window, timestamp);
            }
            mh$.invokeExact(window, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_iconify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_iconify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_iconify(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_iconify$descriptor() {
        return gtk_window_iconify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_iconify(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_iconify$handle() {
        return gtk_window_iconify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_iconify(GtkWindow *window)
     * }
     */
    public static void gtk_window_iconify(MemorySegment window) {
        var mh$ = gtk_window_iconify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_iconify", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_deiconify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_deiconify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_deiconify(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_deiconify$descriptor() {
        return gtk_window_deiconify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_deiconify(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_deiconify$handle() {
        return gtk_window_deiconify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_deiconify(GtkWindow *window)
     * }
     */
    public static void gtk_window_deiconify(MemorySegment window) {
        var mh$ = gtk_window_deiconify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_deiconify", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_stick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_stick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_stick(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_stick$descriptor() {
        return gtk_window_stick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_stick(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_stick$handle() {
        return gtk_window_stick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_stick(GtkWindow *window)
     * }
     */
    public static void gtk_window_stick(MemorySegment window) {
        var mh$ = gtk_window_stick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_stick", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_unstick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_unstick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_unstick(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_unstick$descriptor() {
        return gtk_window_unstick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_unstick(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_unstick$handle() {
        return gtk_window_unstick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_unstick(GtkWindow *window)
     * }
     */
    public static void gtk_window_unstick(MemorySegment window) {
        var mh$ = gtk_window_unstick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_unstick", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_maximize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_maximize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_maximize(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_maximize$descriptor() {
        return gtk_window_maximize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_maximize(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_maximize$handle() {
        return gtk_window_maximize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_maximize(GtkWindow *window)
     * }
     */
    public static void gtk_window_maximize(MemorySegment window) {
        var mh$ = gtk_window_maximize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_maximize", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_unmaximize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_unmaximize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_unmaximize(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_unmaximize$descriptor() {
        return gtk_window_unmaximize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_unmaximize(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_unmaximize$handle() {
        return gtk_window_unmaximize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_unmaximize(GtkWindow *window)
     * }
     */
    public static void gtk_window_unmaximize(MemorySegment window) {
        var mh$ = gtk_window_unmaximize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_unmaximize", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_fullscreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_fullscreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_fullscreen(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_fullscreen$descriptor() {
        return gtk_window_fullscreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_fullscreen(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_fullscreen$handle() {
        return gtk_window_fullscreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_fullscreen(GtkWindow *window)
     * }
     */
    public static void gtk_window_fullscreen(MemorySegment window) {
        var mh$ = gtk_window_fullscreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_fullscreen", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_unfullscreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_unfullscreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_unfullscreen(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_unfullscreen$descriptor() {
        return gtk_window_unfullscreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_unfullscreen(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_unfullscreen$handle() {
        return gtk_window_unfullscreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_unfullscreen(GtkWindow *window)
     * }
     */
    public static void gtk_window_unfullscreen(MemorySegment window) {
        var mh$ = gtk_window_unfullscreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_unfullscreen", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_fullscreen_on_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_fullscreen_on_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_fullscreen_on_monitor(GtkWindow *window, GdkScreen *screen, gint monitor)
     * }
     */
    public static FunctionDescriptor gtk_window_fullscreen_on_monitor$descriptor() {
        return gtk_window_fullscreen_on_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_fullscreen_on_monitor(GtkWindow *window, GdkScreen *screen, gint monitor)
     * }
     */
    public static MethodHandle gtk_window_fullscreen_on_monitor$handle() {
        return gtk_window_fullscreen_on_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_fullscreen_on_monitor(GtkWindow *window, GdkScreen *screen, gint monitor)
     * }
     */
    public static void gtk_window_fullscreen_on_monitor(MemorySegment window, MemorySegment screen, int monitor) {
        var mh$ = gtk_window_fullscreen_on_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_fullscreen_on_monitor", window, screen, monitor);
            }
            mh$.invokeExact(window, screen, monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_close(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_close$descriptor() {
        return gtk_window_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_close(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_close$handle() {
        return gtk_window_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_close(GtkWindow *window)
     * }
     */
    public static void gtk_window_close(MemorySegment window) {
        var mh$ = gtk_window_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_close", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_keep_above {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_keep_above"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_keep_above(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_keep_above$descriptor() {
        return gtk_window_set_keep_above.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_keep_above(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_keep_above$handle() {
        return gtk_window_set_keep_above.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_keep_above(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_keep_above(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_keep_above.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_keep_above", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_keep_below {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_keep_below"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_keep_below(GtkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_window_set_keep_below$descriptor() {
        return gtk_window_set_keep_below.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_keep_below(GtkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gtk_window_set_keep_below$handle() {
        return gtk_window_set_keep_below.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_keep_below(GtkWindow *window, gboolean setting)
     * }
     */
    public static void gtk_window_set_keep_below(MemorySegment window, int setting) {
        var mh$ = gtk_window_set_keep_below.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_keep_below", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_begin_resize_drag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_begin_resize_drag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_begin_resize_drag(GtkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gtk_window_begin_resize_drag$descriptor() {
        return gtk_window_begin_resize_drag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_begin_resize_drag(GtkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static MethodHandle gtk_window_begin_resize_drag$handle() {
        return gtk_window_begin_resize_drag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_begin_resize_drag(GtkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static void gtk_window_begin_resize_drag(MemorySegment window, int edge, int button, int root_x, int root_y, int timestamp) {
        var mh$ = gtk_window_begin_resize_drag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_begin_resize_drag", window, edge, button, root_x, root_y, timestamp);
            }
            mh$.invokeExact(window, edge, button, root_x, root_y, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_begin_move_drag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_begin_move_drag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_begin_move_drag(GtkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gtk_window_begin_move_drag$descriptor() {
        return gtk_window_begin_move_drag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_begin_move_drag(GtkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static MethodHandle gtk_window_begin_move_drag$handle() {
        return gtk_window_begin_move_drag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_begin_move_drag(GtkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static void gtk_window_begin_move_drag(MemorySegment window, int button, int root_x, int root_y, int timestamp) {
        var mh$ = gtk_window_begin_move_drag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_begin_move_drag", window, button, root_x, root_y, timestamp);
            }
            mh$.invokeExact(window, button, root_x, root_y, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_default_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default_size$descriptor() {
        return gtk_window_set_default_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_window_set_default_size$handle() {
        return gtk_window_set_default_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
     * }
     */
    public static void gtk_window_set_default_size(MemorySegment window, int width, int height) {
        var mh$ = gtk_window_set_default_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default_size", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_default_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_default_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_get_default_size(GtkWindow *window, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_window_get_default_size$descriptor() {
        return gtk_window_get_default_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_get_default_size(GtkWindow *window, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_window_get_default_size$handle() {
        return gtk_window_get_default_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_get_default_size(GtkWindow *window, gint *width, gint *height)
     * }
     */
    public static void gtk_window_get_default_size(MemorySegment window, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_window_get_default_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_default_size", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_resize(GtkWindow *window, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_window_resize$descriptor() {
        return gtk_window_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_resize(GtkWindow *window, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_window_resize$handle() {
        return gtk_window_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_resize(GtkWindow *window, gint width, gint height)
     * }
     */
    public static void gtk_window_resize(MemorySegment window, int width, int height) {
        var mh$ = gtk_window_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_resize", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_get_size(GtkWindow *window, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_window_get_size$descriptor() {
        return gtk_window_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_get_size(GtkWindow *window, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_window_get_size$handle() {
        return gtk_window_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_get_size(GtkWindow *window, gint *width, gint *height)
     * }
     */
    public static void gtk_window_get_size(MemorySegment window, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_window_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_size", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_move"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_move(GtkWindow *window, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_window_move$descriptor() {
        return gtk_window_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_move(GtkWindow *window, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_window_move$handle() {
        return gtk_window_move.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_move(GtkWindow *window, gint x, gint y)
     * }
     */
    public static void gtk_window_move(MemorySegment window, int x, int y) {
        var mh$ = gtk_window_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_move", window, x, y);
            }
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_get_position(GtkWindow *window, gint *root_x, gint *root_y)
     * }
     */
    public static FunctionDescriptor gtk_window_get_position$descriptor() {
        return gtk_window_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_get_position(GtkWindow *window, gint *root_x, gint *root_y)
     * }
     */
    public static MethodHandle gtk_window_get_position$handle() {
        return gtk_window_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_get_position(GtkWindow *window, gint *root_x, gint *root_y)
     * }
     */
    public static void gtk_window_get_position(MemorySegment window, MemorySegment root_x, MemorySegment root_y) {
        var mh$ = gtk_window_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_position", window, root_x, root_y);
            }
            mh$.invokeExact(window, root_x, root_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_parse_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_parse_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_parse_geometry(GtkWindow *window, const gchar *geometry)
     * }
     */
    public static FunctionDescriptor gtk_window_parse_geometry$descriptor() {
        return gtk_window_parse_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_parse_geometry(GtkWindow *window, const gchar *geometry)
     * }
     */
    public static MethodHandle gtk_window_parse_geometry$handle() {
        return gtk_window_parse_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_parse_geometry(GtkWindow *window, const gchar *geometry)
     * }
     */
    public static int gtk_window_parse_geometry(MemorySegment window, MemorySegment geometry) {
        var mh$ = gtk_window_parse_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_parse_geometry", window, geometry);
            }
            return (int)mh$.invokeExact(window, geometry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_default_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_default_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_geometry(GtkWindow *window, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_window_set_default_geometry$descriptor() {
        return gtk_window_set_default_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_default_geometry(GtkWindow *window, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_window_set_default_geometry$handle() {
        return gtk_window_set_default_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_default_geometry(GtkWindow *window, gint width, gint height)
     * }
     */
    public static void gtk_window_set_default_geometry(MemorySegment window, int width, int height) {
        var mh$ = gtk_window_set_default_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_default_geometry", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_resize_to_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_resize_to_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_resize_to_geometry(GtkWindow *window, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_window_resize_to_geometry$descriptor() {
        return gtk_window_resize_to_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_resize_to_geometry(GtkWindow *window, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_window_resize_to_geometry$handle() {
        return gtk_window_resize_to_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_resize_to_geometry(GtkWindow *window, gint width, gint height)
     * }
     */
    public static void gtk_window_resize_to_geometry(MemorySegment window, int width, int height) {
        var mh$ = gtk_window_resize_to_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_resize_to_geometry", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindowGroup *gtk_window_get_group(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_group$descriptor() {
        return gtk_window_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindowGroup *gtk_window_get_group(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_group$handle() {
        return gtk_window_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindowGroup *gtk_window_get_group(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_group(MemorySegment window) {
        var mh$ = gtk_window_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_group", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_has_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_has_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_has_group(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_has_group$descriptor() {
        return gtk_window_has_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_has_group(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_has_group$handle() {
        return gtk_window_has_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_has_group(GtkWindow *window)
     * }
     */
    public static int gtk_window_has_group(MemorySegment window) {
        var mh$ = gtk_window_has_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_has_group", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_reshow_with_initial_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_reshow_with_initial_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_reshow_with_initial_size(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_reshow_with_initial_size$descriptor() {
        return gtk_window_reshow_with_initial_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_reshow_with_initial_size(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_reshow_with_initial_size$handle() {
        return gtk_window_reshow_with_initial_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_reshow_with_initial_size(GtkWindow *window)
     * }
     */
    public static void gtk_window_reshow_with_initial_size(MemorySegment window) {
        var mh$ = gtk_window_reshow_with_initial_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_reshow_with_initial_size", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_window_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_window_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindowType gtk_window_get_window_type(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_window_type$descriptor() {
        return gtk_window_get_window_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindowType gtk_window_get_window_type(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_window_type$handle() {
        return gtk_window_get_window_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindowType gtk_window_get_window_type(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_window_type(MemorySegment window) {
        var mh$ = gtk_window_get_window_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_window_type", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkApplication *gtk_window_get_application(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_application$descriptor() {
        return gtk_window_get_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkApplication *gtk_window_get_application(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_application$handle() {
        return gtk_window_get_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkApplication *gtk_window_get_application(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_application(MemorySegment window) {
        var mh$ = gtk_window_get_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_application", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_application(GtkWindow *window, GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_window_set_application$descriptor() {
        return gtk_window_set_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_application(GtkWindow *window, GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_window_set_application$handle() {
        return gtk_window_set_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_application(GtkWindow *window, GtkApplication *application)
     * }
     */
    public static void gtk_window_set_application(MemorySegment window, MemorySegment application) {
        var mh$ = gtk_window_set_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_application", window, application);
            }
            mh$.invokeExact(window, application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_has_resize_grip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_has_resize_grip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_has_resize_grip(GtkWindow *window, gboolean value)
     * }
     */
    public static FunctionDescriptor gtk_window_set_has_resize_grip$descriptor() {
        return gtk_window_set_has_resize_grip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_has_resize_grip(GtkWindow *window, gboolean value)
     * }
     */
    public static MethodHandle gtk_window_set_has_resize_grip$handle() {
        return gtk_window_set_has_resize_grip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_has_resize_grip(GtkWindow *window, gboolean value)
     * }
     */
    public static void gtk_window_set_has_resize_grip(MemorySegment window, int value) {
        var mh$ = gtk_window_set_has_resize_grip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_has_resize_grip", window, value);
            }
            mh$.invokeExact(window, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_has_resize_grip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_has_resize_grip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_has_resize_grip(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_has_resize_grip$descriptor() {
        return gtk_window_get_has_resize_grip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_has_resize_grip(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_has_resize_grip$handle() {
        return gtk_window_get_has_resize_grip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_has_resize_grip(GtkWindow *window)
     * }
     */
    public static int gtk_window_get_has_resize_grip(MemorySegment window) {
        var mh$ = gtk_window_get_has_resize_grip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_has_resize_grip", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_resize_grip_is_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_resize_grip_is_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_resize_grip_is_visible(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_resize_grip_is_visible$descriptor() {
        return gtk_window_resize_grip_is_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_resize_grip_is_visible(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_resize_grip_is_visible$handle() {
        return gtk_window_resize_grip_is_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_resize_grip_is_visible(GtkWindow *window)
     * }
     */
    public static int gtk_window_resize_grip_is_visible(MemorySegment window) {
        var mh$ = gtk_window_resize_grip_is_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_resize_grip_is_visible", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_resize_grip_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_resize_grip_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_resize_grip_area(GtkWindow *window, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_window_get_resize_grip_area$descriptor() {
        return gtk_window_get_resize_grip_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_resize_grip_area(GtkWindow *window, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_window_get_resize_grip_area$handle() {
        return gtk_window_get_resize_grip_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_get_resize_grip_area(GtkWindow *window, GdkRectangle *rect)
     * }
     */
    public static int gtk_window_get_resize_grip_area(MemorySegment window, MemorySegment rect) {
        var mh$ = gtk_window_get_resize_grip_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_resize_grip_area", window, rect);
            }
            return (int)mh$.invokeExact(window, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_titlebar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_titlebar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_titlebar(GtkWindow *window, GtkWidget *titlebar)
     * }
     */
    public static FunctionDescriptor gtk_window_set_titlebar$descriptor() {
        return gtk_window_set_titlebar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_titlebar(GtkWindow *window, GtkWidget *titlebar)
     * }
     */
    public static MethodHandle gtk_window_set_titlebar$handle() {
        return gtk_window_set_titlebar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_titlebar(GtkWindow *window, GtkWidget *titlebar)
     * }
     */
    public static void gtk_window_set_titlebar(MemorySegment window, MemorySegment titlebar) {
        var mh$ = gtk_window_set_titlebar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_titlebar", window, titlebar);
            }
            mh$.invokeExact(window, titlebar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_get_titlebar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_get_titlebar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_titlebar(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_get_titlebar$descriptor() {
        return gtk_window_get_titlebar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_titlebar(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_get_titlebar$handle() {
        return gtk_window_get_titlebar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_window_get_titlebar(GtkWindow *window)
     * }
     */
    public static MemorySegment gtk_window_get_titlebar(MemorySegment window) {
        var mh$ = gtk_window_get_titlebar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_get_titlebar", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_is_maximized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_is_maximized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_is_maximized(GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_window_is_maximized$descriptor() {
        return gtk_window_is_maximized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_window_is_maximized(GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_window_is_maximized$handle() {
        return gtk_window_is_maximized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_window_is_maximized(GtkWindow *window)
     * }
     */
    public static int gtk_window_is_maximized(MemorySegment window) {
        var mh$ = gtk_window_is_maximized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_is_maximized", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_window_set_interactive_debugging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_window_set_interactive_debugging"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_window_set_interactive_debugging(gboolean enable)
     * }
     */
    public static FunctionDescriptor gtk_window_set_interactive_debugging$descriptor() {
        return gtk_window_set_interactive_debugging.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_window_set_interactive_debugging(gboolean enable)
     * }
     */
    public static MethodHandle gtk_window_set_interactive_debugging$handle() {
        return gtk_window_set_interactive_debugging.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_window_set_interactive_debugging(gboolean enable)
     * }
     */
    public static void gtk_window_set_interactive_debugging(int enable) {
        var mh$ = gtk_window_set_interactive_debugging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_window_set_interactive_debugging", enable);
            }
            mh$.invokeExact(enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkWindow *GtkWindow_autoptr
     * }
     */
    public static final AddressLayout GtkWindow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkWindow_listautoptr
     * }
     */
    public static final AddressLayout GtkWindow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkWindow_slistautoptr
     * }
     */
    public static final AddressLayout GtkWindow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkWindow_queueautoptr
     * }
     */
    public static final AddressLayout GtkWindow_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkWindowGroup *GtkWindowGroup_autoptr
     * }
     */
    public static final AddressLayout GtkWindowGroup_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkWindowGroup_listautoptr
     * }
     */
    public static final AddressLayout GtkWindowGroup_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkWindowGroup_slistautoptr
     * }
     */
    public static final AddressLayout GtkWindowGroup_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkWindowGroup_queueautoptr
     * }
     */
    public static final AddressLayout GtkWindowGroup_queueautoptr = app_indicator_h.C_POINTER;
    private static final int GTK_DIALOG_MODAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIALOG_MODAL = 1
     * }
     */
    public static int GTK_DIALOG_MODAL() {
        return GTK_DIALOG_MODAL;
    }
    private static final int GTK_DIALOG_DESTROY_WITH_PARENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIALOG_DESTROY_WITH_PARENT = 2
     * }
     */
    public static int GTK_DIALOG_DESTROY_WITH_PARENT() {
        return GTK_DIALOG_DESTROY_WITH_PARENT;
    }
    private static final int GTK_DIALOG_USE_HEADER_BAR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIALOG_USE_HEADER_BAR = 4
     * }
     */
    public static int GTK_DIALOG_USE_HEADER_BAR() {
        return GTK_DIALOG_USE_HEADER_BAR;
    }
    private static final int GTK_RESPONSE_NONE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_NONE = -1
     * }
     */
    public static int GTK_RESPONSE_NONE() {
        return GTK_RESPONSE_NONE;
    }
    private static final int GTK_RESPONSE_REJECT = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_REJECT = -2
     * }
     */
    public static int GTK_RESPONSE_REJECT() {
        return GTK_RESPONSE_REJECT;
    }
    private static final int GTK_RESPONSE_ACCEPT = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_ACCEPT = -3
     * }
     */
    public static int GTK_RESPONSE_ACCEPT() {
        return GTK_RESPONSE_ACCEPT;
    }
    private static final int GTK_RESPONSE_DELETE_EVENT = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_DELETE_EVENT = -4
     * }
     */
    public static int GTK_RESPONSE_DELETE_EVENT() {
        return GTK_RESPONSE_DELETE_EVENT;
    }
    private static final int GTK_RESPONSE_OK = (int)-5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_OK = -5
     * }
     */
    public static int GTK_RESPONSE_OK() {
        return GTK_RESPONSE_OK;
    }
    private static final int GTK_RESPONSE_CANCEL = (int)-6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_CANCEL = -6
     * }
     */
    public static int GTK_RESPONSE_CANCEL() {
        return GTK_RESPONSE_CANCEL;
    }
    private static final int GTK_RESPONSE_CLOSE = (int)-7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_CLOSE = -7
     * }
     */
    public static int GTK_RESPONSE_CLOSE() {
        return GTK_RESPONSE_CLOSE;
    }
    private static final int GTK_RESPONSE_YES = (int)-8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_YES = -8
     * }
     */
    public static int GTK_RESPONSE_YES() {
        return GTK_RESPONSE_YES;
    }
    private static final int GTK_RESPONSE_NO = (int)-9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_NO = -9
     * }
     */
    public static int GTK_RESPONSE_NO() {
        return GTK_RESPONSE_NO;
    }
    private static final int GTK_RESPONSE_APPLY = (int)-10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_APPLY = -10
     * }
     */
    public static int GTK_RESPONSE_APPLY() {
        return GTK_RESPONSE_APPLY;
    }
    private static final int GTK_RESPONSE_HELP = (int)-11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RESPONSE_HELP = -11
     * }
     */
    public static int GTK_RESPONSE_HELP() {
        return GTK_RESPONSE_HELP;
    }

    private static class gtk_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_dialog_get_type$descriptor() {
        return gtk_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_dialog_get_type$handle() {
        return gtk_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_dialog_get_type()
     * }
     */
    public static long gtk_dialog_get_type() {
        var mh$ = gtk_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_new()
     * }
     */
    public static FunctionDescriptor gtk_dialog_new$descriptor() {
        return gtk_dialog_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_new()
     * }
     */
    public static MethodHandle gtk_dialog_new$handle() {
        return gtk_dialog_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_new()
     * }
     */
    public static MemorySegment gtk_dialog_new() {
        var mh$ = gtk_dialog_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_new_with_buttons(const gchar *title, GtkWindow *parent, GtkDialogFlags flags, const gchar *first_button_text, ...)
     * }
     */
    public static class gtk_dialog_new_with_buttons {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_dialog_new_with_buttons");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_dialog_new_with_buttons(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_dialog_new_with_buttons(const gchar *title, GtkWindow *parent, GtkDialogFlags flags, const gchar *first_button_text, ...)
         * }
         */
        public static gtk_dialog_new_with_buttons makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_dialog_new_with_buttons(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment title, MemorySegment parent, int flags, MemorySegment first_button_text, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_dialog_new_with_buttons", title, parent, flags, first_button_text, x4);
                }
                return (MemorySegment)spreader.invokeExact(title, parent, flags, first_button_text, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_dialog_add_action_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_add_action_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_dialog_add_action_widget(GtkDialog *dialog, GtkWidget *child, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_dialog_add_action_widget$descriptor() {
        return gtk_dialog_add_action_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_dialog_add_action_widget(GtkDialog *dialog, GtkWidget *child, gint response_id)
     * }
     */
    public static MethodHandle gtk_dialog_add_action_widget$handle() {
        return gtk_dialog_add_action_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_dialog_add_action_widget(GtkDialog *dialog, GtkWidget *child, gint response_id)
     * }
     */
    public static void gtk_dialog_add_action_widget(MemorySegment dialog, MemorySegment child, int response_id) {
        var mh$ = gtk_dialog_add_action_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_add_action_widget", dialog, child, response_id);
            }
            mh$.invokeExact(dialog, child, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_add_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_add_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_add_button(GtkDialog *dialog, const gchar *button_text, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_dialog_add_button$descriptor() {
        return gtk_dialog_add_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_add_button(GtkDialog *dialog, const gchar *button_text, gint response_id)
     * }
     */
    public static MethodHandle gtk_dialog_add_button$handle() {
        return gtk_dialog_add_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_add_button(GtkDialog *dialog, const gchar *button_text, gint response_id)
     * }
     */
    public static MemorySegment gtk_dialog_add_button(MemorySegment dialog, MemorySegment button_text, int response_id) {
        var mh$ = gtk_dialog_add_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_add_button", dialog, button_text, response_id);
            }
            return (MemorySegment)mh$.invokeExact(dialog, button_text, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_dialog_add_buttons(GtkDialog *dialog, const gchar *first_button_text, ...)
     * }
     */
    public static class gtk_dialog_add_buttons {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_dialog_add_buttons");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_dialog_add_buttons(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_dialog_add_buttons(GtkDialog *dialog, const gchar *first_button_text, ...)
         * }
         */
        public static gtk_dialog_add_buttons makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_dialog_add_buttons(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment dialog, MemorySegment first_button_text, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_dialog_add_buttons", dialog, first_button_text, x2);
                }
                spreader.invokeExact(dialog, first_button_text, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_dialog_set_response_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_set_response_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_dialog_set_response_sensitive(GtkDialog *dialog, gint response_id, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_dialog_set_response_sensitive$descriptor() {
        return gtk_dialog_set_response_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_dialog_set_response_sensitive(GtkDialog *dialog, gint response_id, gboolean setting)
     * }
     */
    public static MethodHandle gtk_dialog_set_response_sensitive$handle() {
        return gtk_dialog_set_response_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_dialog_set_response_sensitive(GtkDialog *dialog, gint response_id, gboolean setting)
     * }
     */
    public static void gtk_dialog_set_response_sensitive(MemorySegment dialog, int response_id, int setting) {
        var mh$ = gtk_dialog_set_response_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_set_response_sensitive", dialog, response_id, setting);
            }
            mh$.invokeExact(dialog, response_id, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_set_default_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_set_default_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_dialog_set_default_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_dialog_set_default_response$descriptor() {
        return gtk_dialog_set_default_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_dialog_set_default_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static MethodHandle gtk_dialog_set_default_response$handle() {
        return gtk_dialog_set_default_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_dialog_set_default_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static void gtk_dialog_set_default_response(MemorySegment dialog, int response_id) {
        var mh$ = gtk_dialog_set_default_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_set_default_response", dialog, response_id);
            }
            mh$.invokeExact(dialog, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_get_widget_for_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_get_widget_for_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_widget_for_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_dialog_get_widget_for_response$descriptor() {
        return gtk_dialog_get_widget_for_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_widget_for_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static MethodHandle gtk_dialog_get_widget_for_response$handle() {
        return gtk_dialog_get_widget_for_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_widget_for_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static MemorySegment gtk_dialog_get_widget_for_response(MemorySegment dialog, int response_id) {
        var mh$ = gtk_dialog_get_widget_for_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_get_widget_for_response", dialog, response_id);
            }
            return (MemorySegment)mh$.invokeExact(dialog, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_get_response_for_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_get_response_for_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_dialog_get_response_for_widget(GtkDialog *dialog, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_dialog_get_response_for_widget$descriptor() {
        return gtk_dialog_get_response_for_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_dialog_get_response_for_widget(GtkDialog *dialog, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_dialog_get_response_for_widget$handle() {
        return gtk_dialog_get_response_for_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_dialog_get_response_for_widget(GtkDialog *dialog, GtkWidget *widget)
     * }
     */
    public static int gtk_dialog_get_response_for_widget(MemorySegment dialog, MemorySegment widget) {
        var mh$ = gtk_dialog_get_response_for_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_get_response_for_widget", dialog, widget);
            }
            return (int)mh$.invokeExact(dialog, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_alternative_dialog_button_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_alternative_dialog_button_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_alternative_dialog_button_order(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_alternative_dialog_button_order$descriptor() {
        return gtk_alternative_dialog_button_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_alternative_dialog_button_order(GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_alternative_dialog_button_order$handle() {
        return gtk_alternative_dialog_button_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_alternative_dialog_button_order(GdkScreen *screen)
     * }
     */
    public static int gtk_alternative_dialog_button_order(MemorySegment screen) {
        var mh$ = gtk_alternative_dialog_button_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_alternative_dialog_button_order", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_dialog_set_alternative_button_order(GtkDialog *dialog, gint first_response_id, ...)
     * }
     */
    public static class gtk_dialog_set_alternative_button_order {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_dialog_set_alternative_button_order");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_dialog_set_alternative_button_order(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_dialog_set_alternative_button_order(GtkDialog *dialog, gint first_response_id, ...)
         * }
         */
        public static gtk_dialog_set_alternative_button_order makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_dialog_set_alternative_button_order(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment dialog, int first_response_id, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_dialog_set_alternative_button_order", dialog, first_response_id, x2);
                }
                spreader.invokeExact(dialog, first_response_id, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_dialog_set_alternative_button_order_from_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_set_alternative_button_order_from_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_dialog_set_alternative_button_order_from_array(GtkDialog *dialog, gint n_params, gint *new_order)
     * }
     */
    public static FunctionDescriptor gtk_dialog_set_alternative_button_order_from_array$descriptor() {
        return gtk_dialog_set_alternative_button_order_from_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_dialog_set_alternative_button_order_from_array(GtkDialog *dialog, gint n_params, gint *new_order)
     * }
     */
    public static MethodHandle gtk_dialog_set_alternative_button_order_from_array$handle() {
        return gtk_dialog_set_alternative_button_order_from_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_dialog_set_alternative_button_order_from_array(GtkDialog *dialog, gint n_params, gint *new_order)
     * }
     */
    public static void gtk_dialog_set_alternative_button_order_from_array(MemorySegment dialog, int n_params, MemorySegment new_order) {
        var mh$ = gtk_dialog_set_alternative_button_order_from_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_set_alternative_button_order_from_array", dialog, n_params, new_order);
            }
            mh$.invokeExact(dialog, n_params, new_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_response {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_response"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_dialog_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static FunctionDescriptor gtk_dialog_response$descriptor() {
        return gtk_dialog_response.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_dialog_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static MethodHandle gtk_dialog_response$handle() {
        return gtk_dialog_response.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_dialog_response(GtkDialog *dialog, gint response_id)
     * }
     */
    public static void gtk_dialog_response(MemorySegment dialog, int response_id) {
        var mh$ = gtk_dialog_response.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_response", dialog, response_id);
            }
            mh$.invokeExact(dialog, response_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_dialog_run(GtkDialog *dialog)
     * }
     */
    public static FunctionDescriptor gtk_dialog_run$descriptor() {
        return gtk_dialog_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_dialog_run(GtkDialog *dialog)
     * }
     */
    public static MethodHandle gtk_dialog_run$handle() {
        return gtk_dialog_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_dialog_run(GtkDialog *dialog)
     * }
     */
    public static int gtk_dialog_run(MemorySegment dialog) {
        var mh$ = gtk_dialog_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_run", dialog);
            }
            return (int)mh$.invokeExact(dialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_get_action_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_get_action_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_action_area(GtkDialog *dialog)
     * }
     */
    public static FunctionDescriptor gtk_dialog_get_action_area$descriptor() {
        return gtk_dialog_get_action_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_action_area(GtkDialog *dialog)
     * }
     */
    public static MethodHandle gtk_dialog_get_action_area$handle() {
        return gtk_dialog_get_action_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_action_area(GtkDialog *dialog)
     * }
     */
    public static MemorySegment gtk_dialog_get_action_area(MemorySegment dialog) {
        var mh$ = gtk_dialog_get_action_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_get_action_area", dialog);
            }
            return (MemorySegment)mh$.invokeExact(dialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_get_content_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_get_content_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_content_area(GtkDialog *dialog)
     * }
     */
    public static FunctionDescriptor gtk_dialog_get_content_area$descriptor() {
        return gtk_dialog_get_content_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_content_area(GtkDialog *dialog)
     * }
     */
    public static MethodHandle gtk_dialog_get_content_area$handle() {
        return gtk_dialog_get_content_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_content_area(GtkDialog *dialog)
     * }
     */
    public static MemorySegment gtk_dialog_get_content_area(MemorySegment dialog) {
        var mh$ = gtk_dialog_get_content_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_get_content_area", dialog);
            }
            return (MemorySegment)mh$.invokeExact(dialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_dialog_get_header_bar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_dialog_get_header_bar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_header_bar(GtkDialog *dialog)
     * }
     */
    public static FunctionDescriptor gtk_dialog_get_header_bar$descriptor() {
        return gtk_dialog_get_header_bar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_header_bar(GtkDialog *dialog)
     * }
     */
    public static MethodHandle gtk_dialog_get_header_bar$handle() {
        return gtk_dialog_get_header_bar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_dialog_get_header_bar(GtkDialog *dialog)
     * }
     */
    public static MemorySegment gtk_dialog_get_header_bar(MemorySegment dialog) {
        var mh$ = gtk_dialog_get_header_bar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_dialog_get_header_bar", dialog);
            }
            return (MemorySegment)mh$.invokeExact(dialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkDialog *GtkDialog_autoptr
     * }
     */
    public static final AddressLayout GtkDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkDialog_queueautoptr = app_indicator_h.C_POINTER;
    private static final int GTK_LICENSE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_UNKNOWN = 0
     * }
     */
    public static int GTK_LICENSE_UNKNOWN() {
        return GTK_LICENSE_UNKNOWN;
    }
    private static final int GTK_LICENSE_CUSTOM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_CUSTOM = 1
     * }
     */
    public static int GTK_LICENSE_CUSTOM() {
        return GTK_LICENSE_CUSTOM;
    }
    private static final int GTK_LICENSE_GPL_2_0 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_GPL_2_0 = 2
     * }
     */
    public static int GTK_LICENSE_GPL_2_0() {
        return GTK_LICENSE_GPL_2_0;
    }
    private static final int GTK_LICENSE_GPL_3_0 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_GPL_3_0 = 3
     * }
     */
    public static int GTK_LICENSE_GPL_3_0() {
        return GTK_LICENSE_GPL_3_0;
    }
    private static final int GTK_LICENSE_LGPL_2_1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_LGPL_2_1 = 4
     * }
     */
    public static int GTK_LICENSE_LGPL_2_1() {
        return GTK_LICENSE_LGPL_2_1;
    }
    private static final int GTK_LICENSE_LGPL_3_0 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_LGPL_3_0 = 5
     * }
     */
    public static int GTK_LICENSE_LGPL_3_0() {
        return GTK_LICENSE_LGPL_3_0;
    }
    private static final int GTK_LICENSE_BSD = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_BSD = 6
     * }
     */
    public static int GTK_LICENSE_BSD() {
        return GTK_LICENSE_BSD;
    }
    private static final int GTK_LICENSE_MIT_X11 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_MIT_X11 = 7
     * }
     */
    public static int GTK_LICENSE_MIT_X11() {
        return GTK_LICENSE_MIT_X11;
    }
    private static final int GTK_LICENSE_ARTISTIC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_ARTISTIC = 8
     * }
     */
    public static int GTK_LICENSE_ARTISTIC() {
        return GTK_LICENSE_ARTISTIC;
    }
    private static final int GTK_LICENSE_GPL_2_0_ONLY = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_GPL_2_0_ONLY = 9
     * }
     */
    public static int GTK_LICENSE_GPL_2_0_ONLY() {
        return GTK_LICENSE_GPL_2_0_ONLY;
    }
    private static final int GTK_LICENSE_GPL_3_0_ONLY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_GPL_3_0_ONLY = 10
     * }
     */
    public static int GTK_LICENSE_GPL_3_0_ONLY() {
        return GTK_LICENSE_GPL_3_0_ONLY;
    }
    private static final int GTK_LICENSE_LGPL_2_1_ONLY = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_LGPL_2_1_ONLY = 11
     * }
     */
    public static int GTK_LICENSE_LGPL_2_1_ONLY() {
        return GTK_LICENSE_LGPL_2_1_ONLY;
    }
    private static final int GTK_LICENSE_LGPL_3_0_ONLY = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_LGPL_3_0_ONLY = 12
     * }
     */
    public static int GTK_LICENSE_LGPL_3_0_ONLY() {
        return GTK_LICENSE_LGPL_3_0_ONLY;
    }
    private static final int GTK_LICENSE_AGPL_3_0 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_AGPL_3_0 = 13
     * }
     */
    public static int GTK_LICENSE_AGPL_3_0() {
        return GTK_LICENSE_AGPL_3_0;
    }
    private static final int GTK_LICENSE_AGPL_3_0_ONLY = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_AGPL_3_0_ONLY = 14
     * }
     */
    public static int GTK_LICENSE_AGPL_3_0_ONLY() {
        return GTK_LICENSE_AGPL_3_0_ONLY;
    }
    private static final int GTK_LICENSE_BSD_3 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_BSD_3 = 15
     * }
     */
    public static int GTK_LICENSE_BSD_3() {
        return GTK_LICENSE_BSD_3;
    }
    private static final int GTK_LICENSE_APACHE_2_0 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_APACHE_2_0 = 16
     * }
     */
    public static int GTK_LICENSE_APACHE_2_0() {
        return GTK_LICENSE_APACHE_2_0;
    }
    private static final int GTK_LICENSE_MPL_2_0 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LICENSE_MPL_2_0 = 17
     * }
     */
    public static int GTK_LICENSE_MPL_2_0() {
        return GTK_LICENSE_MPL_2_0;
    }

    private static class gtk_about_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_about_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_type$descriptor() {
        return gtk_about_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_about_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_about_dialog_get_type$handle() {
        return gtk_about_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_about_dialog_get_type()
     * }
     */
    public static long gtk_about_dialog_get_type() {
        var mh$ = gtk_about_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_about_dialog_new()
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_new$descriptor() {
        return gtk_about_dialog_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_about_dialog_new()
     * }
     */
    public static MethodHandle gtk_about_dialog_new$handle() {
        return gtk_about_dialog_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_about_dialog_new()
     * }
     */
    public static MemorySegment gtk_about_dialog_new() {
        var mh$ = gtk_about_dialog_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_show_about_dialog(GtkWindow *parent, const gchar *first_property_name, ...)
     * }
     */
    public static class gtk_show_about_dialog {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_show_about_dialog");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_show_about_dialog(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_show_about_dialog(GtkWindow *parent, const gchar *first_property_name, ...)
         * }
         */
        public static gtk_show_about_dialog makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_show_about_dialog(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment parent, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_show_about_dialog", parent, first_property_name, x2);
                }
                spreader.invokeExact(parent, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_about_dialog_get_program_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_program_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_program_name(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_program_name$descriptor() {
        return gtk_about_dialog_get_program_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_program_name(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_program_name$handle() {
        return gtk_about_dialog_get_program_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_program_name(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_program_name(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_program_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_program_name", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_program_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_program_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_program_name(GtkAboutDialog *about, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_program_name$descriptor() {
        return gtk_about_dialog_set_program_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_program_name(GtkAboutDialog *about, const gchar *name)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_program_name$handle() {
        return gtk_about_dialog_set_program_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_program_name(GtkAboutDialog *about, const gchar *name)
     * }
     */
    public static void gtk_about_dialog_set_program_name(MemorySegment about, MemorySegment name) {
        var mh$ = gtk_about_dialog_set_program_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_program_name", about, name);
            }
            mh$.invokeExact(about, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_version(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_version$descriptor() {
        return gtk_about_dialog_get_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_version(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_version$handle() {
        return gtk_about_dialog_get_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_version(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_version(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_version", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_version(GtkAboutDialog *about, const gchar *version)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_version$descriptor() {
        return gtk_about_dialog_set_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_version(GtkAboutDialog *about, const gchar *version)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_version$handle() {
        return gtk_about_dialog_set_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_version(GtkAboutDialog *about, const gchar *version)
     * }
     */
    public static void gtk_about_dialog_set_version(MemorySegment about, MemorySegment version) {
        var mh$ = gtk_about_dialog_set_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_version", about, version);
            }
            mh$.invokeExact(about, version);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_copyright {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_copyright"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_copyright(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_copyright$descriptor() {
        return gtk_about_dialog_get_copyright.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_copyright(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_copyright$handle() {
        return gtk_about_dialog_get_copyright.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_copyright(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_copyright(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_copyright.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_copyright", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_copyright {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_copyright"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_copyright(GtkAboutDialog *about, const gchar *copyright)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_copyright$descriptor() {
        return gtk_about_dialog_set_copyright.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_copyright(GtkAboutDialog *about, const gchar *copyright)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_copyright$handle() {
        return gtk_about_dialog_set_copyright.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_copyright(GtkAboutDialog *about, const gchar *copyright)
     * }
     */
    public static void gtk_about_dialog_set_copyright(MemorySegment about, MemorySegment copyright) {
        var mh$ = gtk_about_dialog_set_copyright.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_copyright", about, copyright);
            }
            mh$.invokeExact(about, copyright);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_comments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_comments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_comments(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_comments$descriptor() {
        return gtk_about_dialog_get_comments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_comments(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_comments$handle() {
        return gtk_about_dialog_get_comments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_comments(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_comments(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_comments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_comments", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_comments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_comments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_comments(GtkAboutDialog *about, const gchar *comments)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_comments$descriptor() {
        return gtk_about_dialog_set_comments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_comments(GtkAboutDialog *about, const gchar *comments)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_comments$handle() {
        return gtk_about_dialog_set_comments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_comments(GtkAboutDialog *about, const gchar *comments)
     * }
     */
    public static void gtk_about_dialog_set_comments(MemorySegment about, MemorySegment comments) {
        var mh$ = gtk_about_dialog_set_comments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_comments", about, comments);
            }
            mh$.invokeExact(about, comments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_license {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_license"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_license(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_license$descriptor() {
        return gtk_about_dialog_get_license.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_license(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_license$handle() {
        return gtk_about_dialog_get_license.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_license(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_license(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_license.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_license", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_license {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_license"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_license(GtkAboutDialog *about, const gchar *license)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_license$descriptor() {
        return gtk_about_dialog_set_license.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_license(GtkAboutDialog *about, const gchar *license)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_license$handle() {
        return gtk_about_dialog_set_license.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_license(GtkAboutDialog *about, const gchar *license)
     * }
     */
    public static void gtk_about_dialog_set_license(MemorySegment about, MemorySegment license) {
        var mh$ = gtk_about_dialog_set_license.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_license", about, license);
            }
            mh$.invokeExact(about, license);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_license_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_license_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_license_type(GtkAboutDialog *about, GtkLicense license_type)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_license_type$descriptor() {
        return gtk_about_dialog_set_license_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_license_type(GtkAboutDialog *about, GtkLicense license_type)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_license_type$handle() {
        return gtk_about_dialog_set_license_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_license_type(GtkAboutDialog *about, GtkLicense license_type)
     * }
     */
    public static void gtk_about_dialog_set_license_type(MemorySegment about, int license_type) {
        var mh$ = gtk_about_dialog_set_license_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_license_type", about, license_type);
            }
            mh$.invokeExact(about, license_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_license_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_license_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkLicense gtk_about_dialog_get_license_type(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_license_type$descriptor() {
        return gtk_about_dialog_get_license_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkLicense gtk_about_dialog_get_license_type(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_license_type$handle() {
        return gtk_about_dialog_get_license_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkLicense gtk_about_dialog_get_license_type(GtkAboutDialog *about)
     * }
     */
    public static int gtk_about_dialog_get_license_type(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_license_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_license_type", about);
            }
            return (int)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_wrap_license {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_wrap_license"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_about_dialog_get_wrap_license(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_wrap_license$descriptor() {
        return gtk_about_dialog_get_wrap_license.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_about_dialog_get_wrap_license(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_wrap_license$handle() {
        return gtk_about_dialog_get_wrap_license.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_about_dialog_get_wrap_license(GtkAboutDialog *about)
     * }
     */
    public static int gtk_about_dialog_get_wrap_license(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_wrap_license.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_wrap_license", about);
            }
            return (int)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_wrap_license {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_wrap_license"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_wrap_license(GtkAboutDialog *about, gboolean wrap_license)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_wrap_license$descriptor() {
        return gtk_about_dialog_set_wrap_license.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_wrap_license(GtkAboutDialog *about, gboolean wrap_license)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_wrap_license$handle() {
        return gtk_about_dialog_set_wrap_license.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_wrap_license(GtkAboutDialog *about, gboolean wrap_license)
     * }
     */
    public static void gtk_about_dialog_set_wrap_license(MemorySegment about, int wrap_license) {
        var mh$ = gtk_about_dialog_set_wrap_license.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_wrap_license", about, wrap_license);
            }
            mh$.invokeExact(about, wrap_license);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_website {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_website"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_website(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_website$descriptor() {
        return gtk_about_dialog_get_website.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_website(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_website$handle() {
        return gtk_about_dialog_get_website.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_website(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_website(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_website.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_website", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_website {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_website"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_website(GtkAboutDialog *about, const gchar *website)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_website$descriptor() {
        return gtk_about_dialog_set_website.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_website(GtkAboutDialog *about, const gchar *website)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_website$handle() {
        return gtk_about_dialog_set_website.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_website(GtkAboutDialog *about, const gchar *website)
     * }
     */
    public static void gtk_about_dialog_set_website(MemorySegment about, MemorySegment website) {
        var mh$ = gtk_about_dialog_set_website.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_website", about, website);
            }
            mh$.invokeExact(about, website);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_website_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_website_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_website_label(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_website_label$descriptor() {
        return gtk_about_dialog_get_website_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_website_label(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_website_label$handle() {
        return gtk_about_dialog_get_website_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_website_label(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_website_label(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_website_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_website_label", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_website_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_website_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_website_label(GtkAboutDialog *about, const gchar *website_label)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_website_label$descriptor() {
        return gtk_about_dialog_set_website_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_website_label(GtkAboutDialog *about, const gchar *website_label)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_website_label$handle() {
        return gtk_about_dialog_set_website_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_website_label(GtkAboutDialog *about, const gchar *website_label)
     * }
     */
    public static void gtk_about_dialog_set_website_label(MemorySegment about, MemorySegment website_label) {
        var mh$ = gtk_about_dialog_set_website_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_website_label", about, website_label);
            }
            mh$.invokeExact(about, website_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_authors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_authors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_authors(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_authors$descriptor() {
        return gtk_about_dialog_get_authors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_authors(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_authors$handle() {
        return gtk_about_dialog_get_authors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_authors(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_authors(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_authors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_authors", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_authors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_authors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_authors(GtkAboutDialog *about, const gchar **authors)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_authors$descriptor() {
        return gtk_about_dialog_set_authors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_authors(GtkAboutDialog *about, const gchar **authors)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_authors$handle() {
        return gtk_about_dialog_set_authors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_authors(GtkAboutDialog *about, const gchar **authors)
     * }
     */
    public static void gtk_about_dialog_set_authors(MemorySegment about, MemorySegment authors) {
        var mh$ = gtk_about_dialog_set_authors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_authors", about, authors);
            }
            mh$.invokeExact(about, authors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_documenters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_documenters"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_documenters(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_documenters$descriptor() {
        return gtk_about_dialog_get_documenters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_documenters(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_documenters$handle() {
        return gtk_about_dialog_get_documenters.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_documenters(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_documenters(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_documenters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_documenters", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_documenters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_documenters"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_documenters(GtkAboutDialog *about, const gchar **documenters)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_documenters$descriptor() {
        return gtk_about_dialog_set_documenters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_documenters(GtkAboutDialog *about, const gchar **documenters)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_documenters$handle() {
        return gtk_about_dialog_set_documenters.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_documenters(GtkAboutDialog *about, const gchar **documenters)
     * }
     */
    public static void gtk_about_dialog_set_documenters(MemorySegment about, MemorySegment documenters) {
        var mh$ = gtk_about_dialog_set_documenters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_documenters", about, documenters);
            }
            mh$.invokeExact(about, documenters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_artists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_artists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_artists(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_artists$descriptor() {
        return gtk_about_dialog_get_artists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_artists(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_artists$handle() {
        return gtk_about_dialog_get_artists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *gtk_about_dialog_get_artists(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_artists(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_artists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_artists", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_artists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_artists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_artists(GtkAboutDialog *about, const gchar **artists)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_artists$descriptor() {
        return gtk_about_dialog_set_artists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_artists(GtkAboutDialog *about, const gchar **artists)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_artists$handle() {
        return gtk_about_dialog_set_artists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_artists(GtkAboutDialog *about, const gchar **artists)
     * }
     */
    public static void gtk_about_dialog_set_artists(MemorySegment about, MemorySegment artists) {
        var mh$ = gtk_about_dialog_set_artists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_artists", about, artists);
            }
            mh$.invokeExact(about, artists);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_translator_credits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_translator_credits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_translator_credits(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_translator_credits$descriptor() {
        return gtk_about_dialog_get_translator_credits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_translator_credits(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_translator_credits$handle() {
        return gtk_about_dialog_get_translator_credits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_translator_credits(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_translator_credits(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_translator_credits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_translator_credits", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_translator_credits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_translator_credits"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_translator_credits(GtkAboutDialog *about, const gchar *translator_credits)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_translator_credits$descriptor() {
        return gtk_about_dialog_set_translator_credits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_translator_credits(GtkAboutDialog *about, const gchar *translator_credits)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_translator_credits$handle() {
        return gtk_about_dialog_set_translator_credits.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_translator_credits(GtkAboutDialog *about, const gchar *translator_credits)
     * }
     */
    public static void gtk_about_dialog_set_translator_credits(MemorySegment about, MemorySegment translator_credits) {
        var mh$ = gtk_about_dialog_set_translator_credits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_translator_credits", about, translator_credits);
            }
            mh$.invokeExact(about, translator_credits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_logo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_logo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_about_dialog_get_logo(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_logo$descriptor() {
        return gtk_about_dialog_get_logo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_about_dialog_get_logo(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_logo$handle() {
        return gtk_about_dialog_get_logo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_about_dialog_get_logo(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_logo(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_logo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_logo", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_logo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_logo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_logo(GtkAboutDialog *about, GdkPixbuf *logo)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_logo$descriptor() {
        return gtk_about_dialog_set_logo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_logo(GtkAboutDialog *about, GdkPixbuf *logo)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_logo$handle() {
        return gtk_about_dialog_set_logo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_logo(GtkAboutDialog *about, GdkPixbuf *logo)
     * }
     */
    public static void gtk_about_dialog_set_logo(MemorySegment about, MemorySegment logo) {
        var mh$ = gtk_about_dialog_set_logo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_logo", about, logo);
            }
            mh$.invokeExact(about, logo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_get_logo_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_get_logo_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_logo_icon_name(GtkAboutDialog *about)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_get_logo_icon_name$descriptor() {
        return gtk_about_dialog_get_logo_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_logo_icon_name(GtkAboutDialog *about)
     * }
     */
    public static MethodHandle gtk_about_dialog_get_logo_icon_name$handle() {
        return gtk_about_dialog_get_logo_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_about_dialog_get_logo_icon_name(GtkAboutDialog *about)
     * }
     */
    public static MemorySegment gtk_about_dialog_get_logo_icon_name(MemorySegment about) {
        var mh$ = gtk_about_dialog_get_logo_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_get_logo_icon_name", about);
            }
            return (MemorySegment)mh$.invokeExact(about);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_set_logo_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_set_logo_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_logo_icon_name(GtkAboutDialog *about, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_set_logo_icon_name$descriptor() {
        return gtk_about_dialog_set_logo_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_logo_icon_name(GtkAboutDialog *about, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_about_dialog_set_logo_icon_name$handle() {
        return gtk_about_dialog_set_logo_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_set_logo_icon_name(GtkAboutDialog *about, const gchar *icon_name)
     * }
     */
    public static void gtk_about_dialog_set_logo_icon_name(MemorySegment about, MemorySegment icon_name) {
        var mh$ = gtk_about_dialog_set_logo_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_set_logo_icon_name", about, icon_name);
            }
            mh$.invokeExact(about, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_about_dialog_add_credit_section {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_about_dialog_add_credit_section"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_add_credit_section(GtkAboutDialog *about, const gchar *section_name, const gchar **people)
     * }
     */
    public static FunctionDescriptor gtk_about_dialog_add_credit_section$descriptor() {
        return gtk_about_dialog_add_credit_section.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_about_dialog_add_credit_section(GtkAboutDialog *about, const gchar *section_name, const gchar **people)
     * }
     */
    public static MethodHandle gtk_about_dialog_add_credit_section$handle() {
        return gtk_about_dialog_add_credit_section.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_about_dialog_add_credit_section(GtkAboutDialog *about, const gchar *section_name, const gchar **people)
     * }
     */
    public static void gtk_about_dialog_add_credit_section(MemorySegment about, MemorySegment section_name, MemorySegment people) {
        var mh$ = gtk_about_dialog_add_credit_section.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_about_dialog_add_credit_section", about, section_name, people);
            }
            mh$.invokeExact(about, section_name, people);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkAboutDialog *GtkAboutDialog_autoptr
     * }
     */
    public static final AddressLayout GtkAboutDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAboutDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkAboutDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAboutDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkAboutDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAboutDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkAboutDialog_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_misc_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_misc_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_misc_get_type()
     * }
     */
    public static FunctionDescriptor gtk_misc_get_type$descriptor() {
        return gtk_misc_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_misc_get_type()
     * }
     */
    public static MethodHandle gtk_misc_get_type$handle() {
        return gtk_misc_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_misc_get_type()
     * }
     */
    public static long gtk_misc_get_type() {
        var mh$ = gtk_misc_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_misc_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_misc_set_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_misc_set_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_misc_set_alignment(GtkMisc *misc, gfloat xalign, gfloat yalign)
     * }
     */
    public static FunctionDescriptor gtk_misc_set_alignment$descriptor() {
        return gtk_misc_set_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_misc_set_alignment(GtkMisc *misc, gfloat xalign, gfloat yalign)
     * }
     */
    public static MethodHandle gtk_misc_set_alignment$handle() {
        return gtk_misc_set_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_misc_set_alignment(GtkMisc *misc, gfloat xalign, gfloat yalign)
     * }
     */
    public static void gtk_misc_set_alignment(MemorySegment misc, float xalign, float yalign) {
        var mh$ = gtk_misc_set_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_misc_set_alignment", misc, xalign, yalign);
            }
            mh$.invokeExact(misc, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_misc_get_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_misc_get_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_misc_get_alignment(GtkMisc *misc, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static FunctionDescriptor gtk_misc_get_alignment$descriptor() {
        return gtk_misc_get_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_misc_get_alignment(GtkMisc *misc, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static MethodHandle gtk_misc_get_alignment$handle() {
        return gtk_misc_get_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_misc_get_alignment(GtkMisc *misc, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static void gtk_misc_get_alignment(MemorySegment misc, MemorySegment xalign, MemorySegment yalign) {
        var mh$ = gtk_misc_get_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_misc_get_alignment", misc, xalign, yalign);
            }
            mh$.invokeExact(misc, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_misc_set_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_misc_set_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_misc_set_padding(GtkMisc *misc, gint xpad, gint ypad)
     * }
     */
    public static FunctionDescriptor gtk_misc_set_padding$descriptor() {
        return gtk_misc_set_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_misc_set_padding(GtkMisc *misc, gint xpad, gint ypad)
     * }
     */
    public static MethodHandle gtk_misc_set_padding$handle() {
        return gtk_misc_set_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_misc_set_padding(GtkMisc *misc, gint xpad, gint ypad)
     * }
     */
    public static void gtk_misc_set_padding(MemorySegment misc, int xpad, int ypad) {
        var mh$ = gtk_misc_set_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_misc_set_padding", misc, xpad, ypad);
            }
            mh$.invokeExact(misc, xpad, ypad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_misc_get_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_misc_get_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_misc_get_padding(GtkMisc *misc, gint *xpad, gint *ypad)
     * }
     */
    public static FunctionDescriptor gtk_misc_get_padding$descriptor() {
        return gtk_misc_get_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_misc_get_padding(GtkMisc *misc, gint *xpad, gint *ypad)
     * }
     */
    public static MethodHandle gtk_misc_get_padding$handle() {
        return gtk_misc_get_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_misc_get_padding(GtkMisc *misc, gint *xpad, gint *ypad)
     * }
     */
    public static void gtk_misc_get_padding(MemorySegment misc, MemorySegment xpad, MemorySegment ypad) {
        var mh$ = gtk_misc_get_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_misc_get_padding", misc, xpad, ypad);
            }
            mh$.invokeExact(misc, xpad, ypad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_misc_get_padding_and_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_misc_get_padding_and_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_misc_get_padding_and_border(GtkMisc *misc, GtkBorder *border)
     * }
     */
    public static FunctionDescriptor _gtk_misc_get_padding_and_border$descriptor() {
        return _gtk_misc_get_padding_and_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_misc_get_padding_and_border(GtkMisc *misc, GtkBorder *border)
     * }
     */
    public static MethodHandle _gtk_misc_get_padding_and_border$handle() {
        return _gtk_misc_get_padding_and_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_misc_get_padding_and_border(GtkMisc *misc, GtkBorder *border)
     * }
     */
    public static void _gtk_misc_get_padding_and_border(MemorySegment misc, MemorySegment border) {
        var mh$ = _gtk_misc_get_padding_and_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_misc_get_padding_and_border", misc, border);
            }
            mh$.invokeExact(misc, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_menu_shell_get_type()
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_get_type$descriptor() {
        return gtk_menu_shell_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_menu_shell_get_type()
     * }
     */
    public static MethodHandle gtk_menu_shell_get_type$handle() {
        return gtk_menu_shell_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_menu_shell_get_type()
     * }
     */
    public static long gtk_menu_shell_get_type() {
        var mh$ = gtk_menu_shell_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_append$descriptor() {
        return gtk_menu_shell_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_menu_shell_append$handle() {
        return gtk_menu_shell_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static void gtk_menu_shell_append(MemorySegment menu_shell, MemorySegment child) {
        var mh$ = gtk_menu_shell_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_append", menu_shell, child);
            }
            mh$.invokeExact(menu_shell, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_prepend(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_prepend$descriptor() {
        return gtk_menu_shell_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_prepend(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_menu_shell_prepend$handle() {
        return gtk_menu_shell_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_prepend(GtkMenuShell *menu_shell, GtkWidget *child)
     * }
     */
    public static void gtk_menu_shell_prepend(MemorySegment menu_shell, MemorySegment child) {
        var mh$ = gtk_menu_shell_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_prepend", menu_shell, child);
            }
            mh$.invokeExact(menu_shell, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_insert(GtkMenuShell *menu_shell, GtkWidget *child, gint position)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_insert$descriptor() {
        return gtk_menu_shell_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_insert(GtkMenuShell *menu_shell, GtkWidget *child, gint position)
     * }
     */
    public static MethodHandle gtk_menu_shell_insert$handle() {
        return gtk_menu_shell_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_insert(GtkMenuShell *menu_shell, GtkWidget *child, gint position)
     * }
     */
    public static void gtk_menu_shell_insert(MemorySegment menu_shell, MemorySegment child, int position) {
        var mh$ = gtk_menu_shell_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_insert", menu_shell, child, position);
            }
            mh$.invokeExact(menu_shell, child, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_deactivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_deactivate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_deactivate(GtkMenuShell *menu_shell)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_deactivate$descriptor() {
        return gtk_menu_shell_deactivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_deactivate(GtkMenuShell *menu_shell)
     * }
     */
    public static MethodHandle gtk_menu_shell_deactivate$handle() {
        return gtk_menu_shell_deactivate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_deactivate(GtkMenuShell *menu_shell)
     * }
     */
    public static void gtk_menu_shell_deactivate(MemorySegment menu_shell) {
        var mh$ = gtk_menu_shell_deactivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_deactivate", menu_shell);
            }
            mh$.invokeExact(menu_shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_select_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_select_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_select_item(GtkMenuShell *menu_shell, GtkWidget *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_select_item$descriptor() {
        return gtk_menu_shell_select_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_select_item(GtkMenuShell *menu_shell, GtkWidget *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_shell_select_item$handle() {
        return gtk_menu_shell_select_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_select_item(GtkMenuShell *menu_shell, GtkWidget *menu_item)
     * }
     */
    public static void gtk_menu_shell_select_item(MemorySegment menu_shell, MemorySegment menu_item) {
        var mh$ = gtk_menu_shell_select_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_select_item", menu_shell, menu_item);
            }
            mh$.invokeExact(menu_shell, menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_deselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_deselect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_deselect(GtkMenuShell *menu_shell)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_deselect$descriptor() {
        return gtk_menu_shell_deselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_deselect(GtkMenuShell *menu_shell)
     * }
     */
    public static MethodHandle gtk_menu_shell_deselect$handle() {
        return gtk_menu_shell_deselect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_deselect(GtkMenuShell *menu_shell)
     * }
     */
    public static void gtk_menu_shell_deselect(MemorySegment menu_shell) {
        var mh$ = gtk_menu_shell_deselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_deselect", menu_shell);
            }
            mh$.invokeExact(menu_shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_activate_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_activate_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_activate_item(GtkMenuShell *menu_shell, GtkWidget *menu_item, gboolean force_deactivate)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_activate_item$descriptor() {
        return gtk_menu_shell_activate_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_activate_item(GtkMenuShell *menu_shell, GtkWidget *menu_item, gboolean force_deactivate)
     * }
     */
    public static MethodHandle gtk_menu_shell_activate_item$handle() {
        return gtk_menu_shell_activate_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_activate_item(GtkMenuShell *menu_shell, GtkWidget *menu_item, gboolean force_deactivate)
     * }
     */
    public static void gtk_menu_shell_activate_item(MemorySegment menu_shell, MemorySegment menu_item, int force_deactivate) {
        var mh$ = gtk_menu_shell_activate_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_activate_item", menu_shell, menu_item, force_deactivate);
            }
            mh$.invokeExact(menu_shell, menu_item, force_deactivate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_select_first {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_select_first"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_select_first(GtkMenuShell *menu_shell, gboolean search_sensitive)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_select_first$descriptor() {
        return gtk_menu_shell_select_first.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_select_first(GtkMenuShell *menu_shell, gboolean search_sensitive)
     * }
     */
    public static MethodHandle gtk_menu_shell_select_first$handle() {
        return gtk_menu_shell_select_first.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_select_first(GtkMenuShell *menu_shell, gboolean search_sensitive)
     * }
     */
    public static void gtk_menu_shell_select_first(MemorySegment menu_shell, int search_sensitive) {
        var mh$ = gtk_menu_shell_select_first.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_select_first", menu_shell, search_sensitive);
            }
            mh$.invokeExact(menu_shell, search_sensitive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_cancel(GtkMenuShell *menu_shell)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_cancel$descriptor() {
        return gtk_menu_shell_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_cancel(GtkMenuShell *menu_shell)
     * }
     */
    public static MethodHandle gtk_menu_shell_cancel$handle() {
        return gtk_menu_shell_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_cancel(GtkMenuShell *menu_shell)
     * }
     */
    public static void gtk_menu_shell_cancel(MemorySegment menu_shell) {
        var mh$ = gtk_menu_shell_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_cancel", menu_shell);
            }
            mh$.invokeExact(menu_shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_get_take_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_get_take_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_shell_get_take_focus(GtkMenuShell *menu_shell)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_get_take_focus$descriptor() {
        return gtk_menu_shell_get_take_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_shell_get_take_focus(GtkMenuShell *menu_shell)
     * }
     */
    public static MethodHandle gtk_menu_shell_get_take_focus$handle() {
        return gtk_menu_shell_get_take_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_menu_shell_get_take_focus(GtkMenuShell *menu_shell)
     * }
     */
    public static int gtk_menu_shell_get_take_focus(MemorySegment menu_shell) {
        var mh$ = gtk_menu_shell_get_take_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_get_take_focus", menu_shell);
            }
            return (int)mh$.invokeExact(menu_shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_set_take_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_set_take_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_set_take_focus(GtkMenuShell *menu_shell, gboolean take_focus)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_set_take_focus$descriptor() {
        return gtk_menu_shell_set_take_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_set_take_focus(GtkMenuShell *menu_shell, gboolean take_focus)
     * }
     */
    public static MethodHandle gtk_menu_shell_set_take_focus$handle() {
        return gtk_menu_shell_set_take_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_set_take_focus(GtkMenuShell *menu_shell, gboolean take_focus)
     * }
     */
    public static void gtk_menu_shell_set_take_focus(MemorySegment menu_shell, int take_focus) {
        var mh$ = gtk_menu_shell_set_take_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_set_take_focus", menu_shell, take_focus);
            }
            mh$.invokeExact(menu_shell, take_focus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_get_selected_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_get_selected_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_shell_get_selected_item(GtkMenuShell *menu_shell)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_get_selected_item$descriptor() {
        return gtk_menu_shell_get_selected_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_shell_get_selected_item(GtkMenuShell *menu_shell)
     * }
     */
    public static MethodHandle gtk_menu_shell_get_selected_item$handle() {
        return gtk_menu_shell_get_selected_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_shell_get_selected_item(GtkMenuShell *menu_shell)
     * }
     */
    public static MemorySegment gtk_menu_shell_get_selected_item(MemorySegment menu_shell) {
        var mh$ = gtk_menu_shell_get_selected_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_get_selected_item", menu_shell);
            }
            return (MemorySegment)mh$.invokeExact(menu_shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_get_parent_shell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_get_parent_shell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_shell_get_parent_shell(GtkMenuShell *menu_shell)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_get_parent_shell$descriptor() {
        return gtk_menu_shell_get_parent_shell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_shell_get_parent_shell(GtkMenuShell *menu_shell)
     * }
     */
    public static MethodHandle gtk_menu_shell_get_parent_shell$handle() {
        return gtk_menu_shell_get_parent_shell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_shell_get_parent_shell(GtkMenuShell *menu_shell)
     * }
     */
    public static MemorySegment gtk_menu_shell_get_parent_shell(MemorySegment menu_shell) {
        var mh$ = gtk_menu_shell_get_parent_shell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_get_parent_shell", menu_shell);
            }
            return (MemorySegment)mh$.invokeExact(menu_shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_shell_bind_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_shell_bind_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_bind_model(GtkMenuShell *menu_shell, GMenuModel *model, const gchar *action_namespace, gboolean with_separators)
     * }
     */
    public static FunctionDescriptor gtk_menu_shell_bind_model$descriptor() {
        return gtk_menu_shell_bind_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_shell_bind_model(GtkMenuShell *menu_shell, GMenuModel *model, const gchar *action_namespace, gboolean with_separators)
     * }
     */
    public static MethodHandle gtk_menu_shell_bind_model$handle() {
        return gtk_menu_shell_bind_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_shell_bind_model(GtkMenuShell *menu_shell, GMenuModel *model, const gchar *action_namespace, gboolean with_separators)
     * }
     */
    public static void gtk_menu_shell_bind_model(MemorySegment menu_shell, MemorySegment model, MemorySegment action_namespace, int with_separators) {
        var mh$ = gtk_menu_shell_bind_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_shell_bind_model", menu_shell, model, action_namespace, with_separators);
            }
            mh$.invokeExact(menu_shell, model, action_namespace, with_separators);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkMenuShell *GtkMenuShell_autoptr
     * }
     */
    public static final AddressLayout GtkMenuShell_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMenuShell_listautoptr
     * }
     */
    public static final AddressLayout GtkMenuShell_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMenuShell_slistautoptr
     * }
     */
    public static final AddressLayout GtkMenuShell_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMenuShell_queueautoptr
     * }
     */
    public static final AddressLayout GtkMenuShell_queueautoptr = app_indicator_h.C_POINTER;
    private static final int GTK_ARROWS_BOTH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROWS_BOTH = 0
     * }
     */
    public static int GTK_ARROWS_BOTH() {
        return GTK_ARROWS_BOTH;
    }
    private static final int GTK_ARROWS_START = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROWS_START = 1
     * }
     */
    public static int GTK_ARROWS_START() {
        return GTK_ARROWS_START;
    }
    private static final int GTK_ARROWS_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROWS_END = 2
     * }
     */
    public static int GTK_ARROWS_END() {
        return GTK_ARROWS_END;
    }

    private static class gtk_menu_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_menu_get_type()
     * }
     */
    public static FunctionDescriptor gtk_menu_get_type$descriptor() {
        return gtk_menu_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_menu_get_type()
     * }
     */
    public static MethodHandle gtk_menu_get_type$handle() {
        return gtk_menu_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_menu_get_type()
     * }
     */
    public static long gtk_menu_get_type() {
        var mh$ = gtk_menu_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new()
     * }
     */
    public static FunctionDescriptor gtk_menu_new$descriptor() {
        return gtk_menu_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new()
     * }
     */
    public static MethodHandle gtk_menu_new$handle() {
        return gtk_menu_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new()
     * }
     */
    public static MemorySegment gtk_menu_new() {
        var mh$ = gtk_menu_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_new_from_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_new_from_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new_from_model(GMenuModel *model)
     * }
     */
    public static FunctionDescriptor gtk_menu_new_from_model$descriptor() {
        return gtk_menu_new_from_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new_from_model(GMenuModel *model)
     * }
     */
    public static MethodHandle gtk_menu_new_from_model$handle() {
        return gtk_menu_new_from_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_new_from_model(GMenuModel *model)
     * }
     */
    public static MemorySegment gtk_menu_new_from_model(MemorySegment model) {
        var mh$ = gtk_menu_new_from_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_new_from_model", model);
            }
            return (MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_popup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_popup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup(GtkMenu *menu, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, guint button, guint32 activate_time)
     * }
     */
    public static FunctionDescriptor gtk_menu_popup$descriptor() {
        return gtk_menu_popup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup(GtkMenu *menu, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, guint button, guint32 activate_time)
     * }
     */
    public static MethodHandle gtk_menu_popup$handle() {
        return gtk_menu_popup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_popup(GtkMenu *menu, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, guint button, guint32 activate_time)
     * }
     */
    public static void gtk_menu_popup(MemorySegment menu, MemorySegment parent_menu_shell, MemorySegment parent_menu_item, MemorySegment func, MemorySegment data, int button, int activate_time) {
        var mh$ = gtk_menu_popup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_popup", menu, parent_menu_shell, parent_menu_item, func, data, button, activate_time);
            }
            mh$.invokeExact(menu, parent_menu_shell, parent_menu_item, func, data, button, activate_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_popup_for_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_popup_for_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_for_device(GtkMenu *menu, GdkDevice *device, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, GDestroyNotify destroy, guint button, guint32 activate_time)
     * }
     */
    public static FunctionDescriptor gtk_menu_popup_for_device$descriptor() {
        return gtk_menu_popup_for_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_for_device(GtkMenu *menu, GdkDevice *device, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, GDestroyNotify destroy, guint button, guint32 activate_time)
     * }
     */
    public static MethodHandle gtk_menu_popup_for_device$handle() {
        return gtk_menu_popup_for_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_popup_for_device(GtkMenu *menu, GdkDevice *device, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, GDestroyNotify destroy, guint button, guint32 activate_time)
     * }
     */
    public static void gtk_menu_popup_for_device(MemorySegment menu, MemorySegment device, MemorySegment parent_menu_shell, MemorySegment parent_menu_item, MemorySegment func, MemorySegment data, MemorySegment destroy, int button, int activate_time) {
        var mh$ = gtk_menu_popup_for_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_popup_for_device", menu, device, parent_menu_shell, parent_menu_item, func, data, destroy, button, activate_time);
            }
            mh$.invokeExact(menu, device, parent_menu_shell, parent_menu_item, func, data, destroy, button, activate_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_popup_at_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_popup_at_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_rect(GtkMenu *menu, GdkWindow *rect_window, const GdkRectangle *rect, GdkGravity rect_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event)
     * }
     */
    public static FunctionDescriptor gtk_menu_popup_at_rect$descriptor() {
        return gtk_menu_popup_at_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_rect(GtkMenu *menu, GdkWindow *rect_window, const GdkRectangle *rect, GdkGravity rect_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event)
     * }
     */
    public static MethodHandle gtk_menu_popup_at_rect$handle() {
        return gtk_menu_popup_at_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_rect(GtkMenu *menu, GdkWindow *rect_window, const GdkRectangle *rect, GdkGravity rect_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event)
     * }
     */
    public static void gtk_menu_popup_at_rect(MemorySegment menu, MemorySegment rect_window, MemorySegment rect, int rect_anchor, int menu_anchor, MemorySegment trigger_event) {
        var mh$ = gtk_menu_popup_at_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_popup_at_rect", menu, rect_window, rect, rect_anchor, menu_anchor, trigger_event);
            }
            mh$.invokeExact(menu, rect_window, rect, rect_anchor, menu_anchor, trigger_event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_popup_at_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_popup_at_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_widget(GtkMenu *menu, GtkWidget *widget, GdkGravity widget_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event)
     * }
     */
    public static FunctionDescriptor gtk_menu_popup_at_widget$descriptor() {
        return gtk_menu_popup_at_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_widget(GtkMenu *menu, GtkWidget *widget, GdkGravity widget_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event)
     * }
     */
    public static MethodHandle gtk_menu_popup_at_widget$handle() {
        return gtk_menu_popup_at_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_widget(GtkMenu *menu, GtkWidget *widget, GdkGravity widget_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event)
     * }
     */
    public static void gtk_menu_popup_at_widget(MemorySegment menu, MemorySegment widget, int widget_anchor, int menu_anchor, MemorySegment trigger_event) {
        var mh$ = gtk_menu_popup_at_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_popup_at_widget", menu, widget, widget_anchor, menu_anchor, trigger_event);
            }
            mh$.invokeExact(menu, widget, widget_anchor, menu_anchor, trigger_event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_popup_at_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_popup_at_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_pointer(GtkMenu *menu, const GdkEvent *trigger_event)
     * }
     */
    public static FunctionDescriptor gtk_menu_popup_at_pointer$descriptor() {
        return gtk_menu_popup_at_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_pointer(GtkMenu *menu, const GdkEvent *trigger_event)
     * }
     */
    public static MethodHandle gtk_menu_popup_at_pointer$handle() {
        return gtk_menu_popup_at_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_popup_at_pointer(GtkMenu *menu, const GdkEvent *trigger_event)
     * }
     */
    public static void gtk_menu_popup_at_pointer(MemorySegment menu, MemorySegment trigger_event) {
        var mh$ = gtk_menu_popup_at_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_popup_at_pointer", menu, trigger_event);
            }
            mh$.invokeExact(menu, trigger_event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_reposition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_reposition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_reposition(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_reposition$descriptor() {
        return gtk_menu_reposition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_reposition(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_reposition$handle() {
        return gtk_menu_reposition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_reposition(GtkMenu *menu)
     * }
     */
    public static void gtk_menu_reposition(MemorySegment menu) {
        var mh$ = gtk_menu_reposition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_reposition", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_popdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_popdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_popdown(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_popdown$descriptor() {
        return gtk_menu_popdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_popdown(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_popdown$handle() {
        return gtk_menu_popdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_popdown(GtkMenu *menu)
     * }
     */
    public static void gtk_menu_popdown(MemorySegment menu) {
        var mh$ = gtk_menu_popdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_popdown", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_get_active(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_active$descriptor() {
        return gtk_menu_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_get_active(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_active$handle() {
        return gtk_menu_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_get_active(GtkMenu *menu)
     * }
     */
    public static MemorySegment gtk_menu_get_active(MemorySegment menu) {
        var mh$ = gtk_menu_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_active", menu);
            }
            return (MemorySegment)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_active(GtkMenu *menu, guint index)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_active$descriptor() {
        return gtk_menu_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_active(GtkMenu *menu, guint index)
     * }
     */
    public static MethodHandle gtk_menu_set_active$handle() {
        return gtk_menu_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_active(GtkMenu *menu, guint index)
     * }
     */
    public static void gtk_menu_set_active(MemorySegment menu, int index) {
        var mh$ = gtk_menu_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_active", menu, index);
            }
            mh$.invokeExact(menu, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_accel_group(GtkMenu *menu, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_accel_group$descriptor() {
        return gtk_menu_set_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_accel_group(GtkMenu *menu, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_menu_set_accel_group$handle() {
        return gtk_menu_set_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_accel_group(GtkMenu *menu, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_menu_set_accel_group(MemorySegment menu, MemorySegment accel_group) {
        var mh$ = gtk_menu_set_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_accel_group", menu, accel_group);
            }
            mh$.invokeExact(menu, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_accel_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_accel_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_menu_get_accel_group(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_accel_group$descriptor() {
        return gtk_menu_get_accel_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_menu_get_accel_group(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_accel_group$handle() {
        return gtk_menu_get_accel_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_menu_get_accel_group(GtkMenu *menu)
     * }
     */
    public static MemorySegment gtk_menu_get_accel_group(MemorySegment menu) {
        var mh$ = gtk_menu_get_accel_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_accel_group", menu);
            }
            return (MemorySegment)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_accel_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_accel_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_accel_path(GtkMenu *menu, const gchar *accel_path)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_accel_path$descriptor() {
        return gtk_menu_set_accel_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_accel_path(GtkMenu *menu, const gchar *accel_path)
     * }
     */
    public static MethodHandle gtk_menu_set_accel_path$handle() {
        return gtk_menu_set_accel_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_accel_path(GtkMenu *menu, const gchar *accel_path)
     * }
     */
    public static void gtk_menu_set_accel_path(MemorySegment menu, MemorySegment accel_path) {
        var mh$ = gtk_menu_set_accel_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_accel_path", menu, accel_path);
            }
            mh$.invokeExact(menu, accel_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_accel_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_accel_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_get_accel_path(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_accel_path$descriptor() {
        return gtk_menu_get_accel_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_get_accel_path(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_accel_path$handle() {
        return gtk_menu_get_accel_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_get_accel_path(GtkMenu *menu)
     * }
     */
    public static MemorySegment gtk_menu_get_accel_path(MemorySegment menu) {
        var mh$ = gtk_menu_get_accel_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_accel_path", menu);
            }
            return (MemorySegment)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_attach_to_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_attach_to_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_attach_to_widget(GtkMenu *menu, GtkWidget *attach_widget, GtkMenuDetachFunc detacher)
     * }
     */
    public static FunctionDescriptor gtk_menu_attach_to_widget$descriptor() {
        return gtk_menu_attach_to_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_attach_to_widget(GtkMenu *menu, GtkWidget *attach_widget, GtkMenuDetachFunc detacher)
     * }
     */
    public static MethodHandle gtk_menu_attach_to_widget$handle() {
        return gtk_menu_attach_to_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_attach_to_widget(GtkMenu *menu, GtkWidget *attach_widget, GtkMenuDetachFunc detacher)
     * }
     */
    public static void gtk_menu_attach_to_widget(MemorySegment menu, MemorySegment attach_widget, MemorySegment detacher) {
        var mh$ = gtk_menu_attach_to_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_attach_to_widget", menu, attach_widget, detacher);
            }
            mh$.invokeExact(menu, attach_widget, detacher);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_detach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_detach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_detach(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_detach$descriptor() {
        return gtk_menu_detach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_detach(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_detach$handle() {
        return gtk_menu_detach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_detach(GtkMenu *menu)
     * }
     */
    public static void gtk_menu_detach(MemorySegment menu) {
        var mh$ = gtk_menu_detach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_detach", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_attach_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_attach_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_get_attach_widget(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_attach_widget$descriptor() {
        return gtk_menu_get_attach_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_get_attach_widget(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_attach_widget$handle() {
        return gtk_menu_get_attach_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_get_attach_widget(GtkMenu *menu)
     * }
     */
    public static MemorySegment gtk_menu_get_attach_widget(MemorySegment menu) {
        var mh$ = gtk_menu_get_attach_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_attach_widget", menu);
            }
            return (MemorySegment)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_tearoff_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_tearoff_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_tearoff_state(GtkMenu *menu, gboolean torn_off)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_tearoff_state$descriptor() {
        return gtk_menu_set_tearoff_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_tearoff_state(GtkMenu *menu, gboolean torn_off)
     * }
     */
    public static MethodHandle gtk_menu_set_tearoff_state$handle() {
        return gtk_menu_set_tearoff_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_tearoff_state(GtkMenu *menu, gboolean torn_off)
     * }
     */
    public static void gtk_menu_set_tearoff_state(MemorySegment menu, int torn_off) {
        var mh$ = gtk_menu_set_tearoff_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_tearoff_state", menu, torn_off);
            }
            mh$.invokeExact(menu, torn_off);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_tearoff_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_tearoff_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_get_tearoff_state(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_tearoff_state$descriptor() {
        return gtk_menu_get_tearoff_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_get_tearoff_state(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_tearoff_state$handle() {
        return gtk_menu_get_tearoff_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_menu_get_tearoff_state(GtkMenu *menu)
     * }
     */
    public static int gtk_menu_get_tearoff_state(MemorySegment menu) {
        var mh$ = gtk_menu_get_tearoff_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_tearoff_state", menu);
            }
            return (int)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_title(GtkMenu *menu, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_title$descriptor() {
        return gtk_menu_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_title(GtkMenu *menu, const gchar *title)
     * }
     */
    public static MethodHandle gtk_menu_set_title$handle() {
        return gtk_menu_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_title(GtkMenu *menu, const gchar *title)
     * }
     */
    public static void gtk_menu_set_title(MemorySegment menu, MemorySegment title) {
        var mh$ = gtk_menu_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_title", menu, title);
            }
            mh$.invokeExact(menu, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_get_title(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_title$descriptor() {
        return gtk_menu_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_get_title(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_title$handle() {
        return gtk_menu_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_get_title(GtkMenu *menu)
     * }
     */
    public static MemorySegment gtk_menu_get_title(MemorySegment menu) {
        var mh$ = gtk_menu_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_title", menu);
            }
            return (MemorySegment)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_reorder_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_reorder_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_reorder_child(GtkMenu *menu, GtkWidget *child, gint position)
     * }
     */
    public static FunctionDescriptor gtk_menu_reorder_child$descriptor() {
        return gtk_menu_reorder_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_reorder_child(GtkMenu *menu, GtkWidget *child, gint position)
     * }
     */
    public static MethodHandle gtk_menu_reorder_child$handle() {
        return gtk_menu_reorder_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_reorder_child(GtkMenu *menu, GtkWidget *child, gint position)
     * }
     */
    public static void gtk_menu_reorder_child(MemorySegment menu, MemorySegment child, int position) {
        var mh$ = gtk_menu_reorder_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_reorder_child", menu, child, position);
            }
            mh$.invokeExact(menu, child, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_screen(GtkMenu *menu, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_screen$descriptor() {
        return gtk_menu_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_screen(GtkMenu *menu, GdkScreen *screen)
     * }
     */
    public static MethodHandle gtk_menu_set_screen$handle() {
        return gtk_menu_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_screen(GtkMenu *menu, GdkScreen *screen)
     * }
     */
    public static void gtk_menu_set_screen(MemorySegment menu, MemorySegment screen) {
        var mh$ = gtk_menu_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_screen", menu, screen);
            }
            mh$.invokeExact(menu, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_attach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_attach(GtkMenu *menu, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)
     * }
     */
    public static FunctionDescriptor gtk_menu_attach$descriptor() {
        return gtk_menu_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_attach(GtkMenu *menu, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)
     * }
     */
    public static MethodHandle gtk_menu_attach$handle() {
        return gtk_menu_attach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_attach(GtkMenu *menu, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)
     * }
     */
    public static void gtk_menu_attach(MemorySegment menu, MemorySegment child, int left_attach, int right_attach, int top_attach, int bottom_attach) {
        var mh$ = gtk_menu_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_attach", menu, child, left_attach, right_attach, top_attach, bottom_attach);
            }
            mh$.invokeExact(menu, child, left_attach, right_attach, top_attach, bottom_attach);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_monitor(GtkMenu *menu, gint monitor_num)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_monitor$descriptor() {
        return gtk_menu_set_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_monitor(GtkMenu *menu, gint monitor_num)
     * }
     */
    public static MethodHandle gtk_menu_set_monitor$handle() {
        return gtk_menu_set_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_monitor(GtkMenu *menu, gint monitor_num)
     * }
     */
    public static void gtk_menu_set_monitor(MemorySegment menu, int monitor_num) {
        var mh$ = gtk_menu_set_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_monitor", menu, monitor_num);
            }
            mh$.invokeExact(menu, monitor_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_menu_get_monitor(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_monitor$descriptor() {
        return gtk_menu_get_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_menu_get_monitor(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_monitor$handle() {
        return gtk_menu_get_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_menu_get_monitor(GtkMenu *menu)
     * }
     */
    public static int gtk_menu_get_monitor(MemorySegment menu) {
        var mh$ = gtk_menu_get_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_monitor", menu);
            }
            return (int)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_place_on_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_place_on_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_place_on_monitor(GtkMenu *menu, GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gtk_menu_place_on_monitor$descriptor() {
        return gtk_menu_place_on_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_place_on_monitor(GtkMenu *menu, GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gtk_menu_place_on_monitor$handle() {
        return gtk_menu_place_on_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_place_on_monitor(GtkMenu *menu, GdkMonitor *monitor)
     * }
     */
    public static void gtk_menu_place_on_monitor(MemorySegment menu, MemorySegment monitor) {
        var mh$ = gtk_menu_place_on_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_place_on_monitor", menu, monitor);
            }
            mh$.invokeExact(menu, monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_for_attach_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_for_attach_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_menu_get_for_attach_widget(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_for_attach_widget$descriptor() {
        return gtk_menu_get_for_attach_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_menu_get_for_attach_widget(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_menu_get_for_attach_widget$handle() {
        return gtk_menu_get_for_attach_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_menu_get_for_attach_widget(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_menu_get_for_attach_widget(MemorySegment widget) {
        var mh$ = gtk_menu_get_for_attach_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_for_attach_widget", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_set_reserve_toggle_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_set_reserve_toggle_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_reserve_toggle_size(GtkMenu *menu, gboolean reserve_toggle_size)
     * }
     */
    public static FunctionDescriptor gtk_menu_set_reserve_toggle_size$descriptor() {
        return gtk_menu_set_reserve_toggle_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_set_reserve_toggle_size(GtkMenu *menu, gboolean reserve_toggle_size)
     * }
     */
    public static MethodHandle gtk_menu_set_reserve_toggle_size$handle() {
        return gtk_menu_set_reserve_toggle_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_set_reserve_toggle_size(GtkMenu *menu, gboolean reserve_toggle_size)
     * }
     */
    public static void gtk_menu_set_reserve_toggle_size(MemorySegment menu, int reserve_toggle_size) {
        var mh$ = gtk_menu_set_reserve_toggle_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_set_reserve_toggle_size", menu, reserve_toggle_size);
            }
            mh$.invokeExact(menu, reserve_toggle_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_get_reserve_toggle_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_get_reserve_toggle_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_get_reserve_toggle_size(GtkMenu *menu)
     * }
     */
    public static FunctionDescriptor gtk_menu_get_reserve_toggle_size$descriptor() {
        return gtk_menu_get_reserve_toggle_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_get_reserve_toggle_size(GtkMenu *menu)
     * }
     */
    public static MethodHandle gtk_menu_get_reserve_toggle_size$handle() {
        return gtk_menu_get_reserve_toggle_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_menu_get_reserve_toggle_size(GtkMenu *menu)
     * }
     */
    public static int gtk_menu_get_reserve_toggle_size(MemorySegment menu) {
        var mh$ = gtk_menu_get_reserve_toggle_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_get_reserve_toggle_size", menu);
            }
            return (int)mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkMenu *GtkMenu_autoptr
     * }
     */
    public static final AddressLayout GtkMenu_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkMenu_listautoptr
     * }
     */
    public static final AddressLayout GtkMenu_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkMenu_slistautoptr
     * }
     */
    public static final AddressLayout GtkMenu_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkMenu_queueautoptr
     * }
     */
    public static final AddressLayout GtkMenu_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_label_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_label_get_type()
     * }
     */
    public static FunctionDescriptor gtk_label_get_type$descriptor() {
        return gtk_label_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_label_get_type()
     * }
     */
    public static MethodHandle gtk_label_get_type$handle() {
        return gtk_label_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_label_get_type()
     * }
     */
    public static long gtk_label_get_type() {
        var mh$ = gtk_label_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_new(const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_label_new$descriptor() {
        return gtk_label_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_new(const gchar *str)
     * }
     */
    public static MethodHandle gtk_label_new$handle() {
        return gtk_label_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_new(const gchar *str)
     * }
     */
    public static MemorySegment gtk_label_new(MemorySegment str) {
        var mh$ = gtk_label_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_new", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_new_with_mnemonic(const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_label_new_with_mnemonic$descriptor() {
        return gtk_label_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_new_with_mnemonic(const gchar *str)
     * }
     */
    public static MethodHandle gtk_label_new_with_mnemonic$handle() {
        return gtk_label_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_new_with_mnemonic(const gchar *str)
     * }
     */
    public static MemorySegment gtk_label_new_with_mnemonic(MemorySegment str) {
        var mh$ = gtk_label_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_new_with_mnemonic", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_text(GtkLabel *label, const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_label_set_text$descriptor() {
        return gtk_label_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_text(GtkLabel *label, const gchar *str)
     * }
     */
    public static MethodHandle gtk_label_set_text$handle() {
        return gtk_label_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_text(GtkLabel *label, const gchar *str)
     * }
     */
    public static void gtk_label_set_text(MemorySegment label, MemorySegment str) {
        var mh$ = gtk_label_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_text", label, str);
            }
            mh$.invokeExact(label, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_text(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_text$descriptor() {
        return gtk_label_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_text(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_text$handle() {
        return gtk_label_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_text(GtkLabel *label)
     * }
     */
    public static MemorySegment gtk_label_get_text(MemorySegment label) {
        var mh$ = gtk_label_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_text", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_attributes(GtkLabel *label, PangoAttrList *attrs)
     * }
     */
    public static FunctionDescriptor gtk_label_set_attributes$descriptor() {
        return gtk_label_set_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_attributes(GtkLabel *label, PangoAttrList *attrs)
     * }
     */
    public static MethodHandle gtk_label_set_attributes$handle() {
        return gtk_label_set_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_attributes(GtkLabel *label, PangoAttrList *attrs)
     * }
     */
    public static void gtk_label_set_attributes(MemorySegment label, MemorySegment attrs) {
        var mh$ = gtk_label_set_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_attributes", label, attrs);
            }
            mh$.invokeExact(label, attrs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *gtk_label_get_attributes(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_attributes$descriptor() {
        return gtk_label_get_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *gtk_label_get_attributes(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_attributes$handle() {
        return gtk_label_get_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *gtk_label_get_attributes(GtkLabel *label)
     * }
     */
    public static MemorySegment gtk_label_get_attributes(MemorySegment label) {
        var mh$ = gtk_label_get_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_attributes", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_label(GtkLabel *label, const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_label_set_label$descriptor() {
        return gtk_label_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_label(GtkLabel *label, const gchar *str)
     * }
     */
    public static MethodHandle gtk_label_set_label$handle() {
        return gtk_label_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_label(GtkLabel *label, const gchar *str)
     * }
     */
    public static void gtk_label_set_label(MemorySegment label, MemorySegment str) {
        var mh$ = gtk_label_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_label", label, str);
            }
            mh$.invokeExact(label, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_label(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_label$descriptor() {
        return gtk_label_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_label(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_label$handle() {
        return gtk_label_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_label(GtkLabel *label)
     * }
     */
    public static MemorySegment gtk_label_get_label(MemorySegment label) {
        var mh$ = gtk_label_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_markup(GtkLabel *label, const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_label_set_markup$descriptor() {
        return gtk_label_set_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_markup(GtkLabel *label, const gchar *str)
     * }
     */
    public static MethodHandle gtk_label_set_markup$handle() {
        return gtk_label_set_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_markup(GtkLabel *label, const gchar *str)
     * }
     */
    public static void gtk_label_set_markup(MemorySegment label, MemorySegment str) {
        var mh$ = gtk_label_set_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_markup", label, str);
            }
            mh$.invokeExact(label, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_use_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_use_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_use_markup(GtkLabel *label, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_label_set_use_markup$descriptor() {
        return gtk_label_set_use_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_use_markup(GtkLabel *label, gboolean setting)
     * }
     */
    public static MethodHandle gtk_label_set_use_markup$handle() {
        return gtk_label_set_use_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_use_markup(GtkLabel *label, gboolean setting)
     * }
     */
    public static void gtk_label_set_use_markup(MemorySegment label, int setting) {
        var mh$ = gtk_label_set_use_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_use_markup", label, setting);
            }
            mh$.invokeExact(label, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_use_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_use_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_use_markup(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_use_markup$descriptor() {
        return gtk_label_get_use_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_use_markup(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_use_markup$handle() {
        return gtk_label_get_use_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_use_markup(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_use_markup(MemorySegment label) {
        var mh$ = gtk_label_get_use_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_use_markup", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_use_underline(GtkLabel *label, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_label_set_use_underline$descriptor() {
        return gtk_label_set_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_use_underline(GtkLabel *label, gboolean setting)
     * }
     */
    public static MethodHandle gtk_label_set_use_underline$handle() {
        return gtk_label_set_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_use_underline(GtkLabel *label, gboolean setting)
     * }
     */
    public static void gtk_label_set_use_underline(MemorySegment label, int setting) {
        var mh$ = gtk_label_set_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_use_underline", label, setting);
            }
            mh$.invokeExact(label, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_use_underline(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_use_underline$descriptor() {
        return gtk_label_get_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_use_underline(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_use_underline$handle() {
        return gtk_label_get_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_use_underline(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_use_underline(MemorySegment label) {
        var mh$ = gtk_label_get_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_use_underline", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_markup_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_markup_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_markup_with_mnemonic(GtkLabel *label, const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_label_set_markup_with_mnemonic$descriptor() {
        return gtk_label_set_markup_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_markup_with_mnemonic(GtkLabel *label, const gchar *str)
     * }
     */
    public static MethodHandle gtk_label_set_markup_with_mnemonic$handle() {
        return gtk_label_set_markup_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_markup_with_mnemonic(GtkLabel *label, const gchar *str)
     * }
     */
    public static void gtk_label_set_markup_with_mnemonic(MemorySegment label, MemorySegment str) {
        var mh$ = gtk_label_set_markup_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_markup_with_mnemonic", label, str);
            }
            mh$.invokeExact(label, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_mnemonic_keyval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_mnemonic_keyval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_label_get_mnemonic_keyval(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_mnemonic_keyval$descriptor() {
        return gtk_label_get_mnemonic_keyval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_label_get_mnemonic_keyval(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_mnemonic_keyval$handle() {
        return gtk_label_get_mnemonic_keyval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_label_get_mnemonic_keyval(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_mnemonic_keyval(MemorySegment label) {
        var mh$ = gtk_label_get_mnemonic_keyval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_mnemonic_keyval", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_mnemonic_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_mnemonic_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_mnemonic_widget(GtkLabel *label, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_label_set_mnemonic_widget$descriptor() {
        return gtk_label_set_mnemonic_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_mnemonic_widget(GtkLabel *label, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_label_set_mnemonic_widget$handle() {
        return gtk_label_set_mnemonic_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_mnemonic_widget(GtkLabel *label, GtkWidget *widget)
     * }
     */
    public static void gtk_label_set_mnemonic_widget(MemorySegment label, MemorySegment widget) {
        var mh$ = gtk_label_set_mnemonic_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_mnemonic_widget", label, widget);
            }
            mh$.invokeExact(label, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_mnemonic_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_mnemonic_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_get_mnemonic_widget(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_mnemonic_widget$descriptor() {
        return gtk_label_get_mnemonic_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_get_mnemonic_widget(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_mnemonic_widget$handle() {
        return gtk_label_get_mnemonic_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_label_get_mnemonic_widget(GtkLabel *label)
     * }
     */
    public static MemorySegment gtk_label_get_mnemonic_widget(MemorySegment label) {
        var mh$ = gtk_label_get_mnemonic_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_mnemonic_widget", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_text_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_text_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_text_with_mnemonic(GtkLabel *label, const gchar *str)
     * }
     */
    public static FunctionDescriptor gtk_label_set_text_with_mnemonic$descriptor() {
        return gtk_label_set_text_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_text_with_mnemonic(GtkLabel *label, const gchar *str)
     * }
     */
    public static MethodHandle gtk_label_set_text_with_mnemonic$handle() {
        return gtk_label_set_text_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_text_with_mnemonic(GtkLabel *label, const gchar *str)
     * }
     */
    public static void gtk_label_set_text_with_mnemonic(MemorySegment label, MemorySegment str) {
        var mh$ = gtk_label_set_text_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_text_with_mnemonic", label, str);
            }
            mh$.invokeExact(label, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_justify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_justify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_justify(GtkLabel *label, GtkJustification jtype)
     * }
     */
    public static FunctionDescriptor gtk_label_set_justify$descriptor() {
        return gtk_label_set_justify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_justify(GtkLabel *label, GtkJustification jtype)
     * }
     */
    public static MethodHandle gtk_label_set_justify$handle() {
        return gtk_label_set_justify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_justify(GtkLabel *label, GtkJustification jtype)
     * }
     */
    public static void gtk_label_set_justify(MemorySegment label, int jtype) {
        var mh$ = gtk_label_set_justify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_justify", label, jtype);
            }
            mh$.invokeExact(label, jtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_justify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_justify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkJustification gtk_label_get_justify(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_justify$descriptor() {
        return gtk_label_get_justify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkJustification gtk_label_get_justify(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_justify$handle() {
        return gtk_label_get_justify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkJustification gtk_label_get_justify(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_justify(MemorySegment label) {
        var mh$ = gtk_label_get_justify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_justify", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_ellipsize(GtkLabel *label, PangoEllipsizeMode mode)
     * }
     */
    public static FunctionDescriptor gtk_label_set_ellipsize$descriptor() {
        return gtk_label_set_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_ellipsize(GtkLabel *label, PangoEllipsizeMode mode)
     * }
     */
    public static MethodHandle gtk_label_set_ellipsize$handle() {
        return gtk_label_set_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_ellipsize(GtkLabel *label, PangoEllipsizeMode mode)
     * }
     */
    public static void gtk_label_set_ellipsize(MemorySegment label, int mode) {
        var mh$ = gtk_label_set_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_ellipsize", label, mode);
            }
            mh$.invokeExact(label, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_label_get_ellipsize(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_ellipsize$descriptor() {
        return gtk_label_get_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_label_get_ellipsize(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_ellipsize$handle() {
        return gtk_label_get_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEllipsizeMode gtk_label_get_ellipsize(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_ellipsize(MemorySegment label) {
        var mh$ = gtk_label_get_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_ellipsize", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_width_chars(GtkLabel *label, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_label_set_width_chars$descriptor() {
        return gtk_label_set_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_width_chars(GtkLabel *label, gint n_chars)
     * }
     */
    public static MethodHandle gtk_label_set_width_chars$handle() {
        return gtk_label_set_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_width_chars(GtkLabel *label, gint n_chars)
     * }
     */
    public static void gtk_label_set_width_chars(MemorySegment label, int n_chars) {
        var mh$ = gtk_label_set_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_width_chars", label, n_chars);
            }
            mh$.invokeExact(label, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_label_get_width_chars(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_width_chars$descriptor() {
        return gtk_label_get_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_label_get_width_chars(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_width_chars$handle() {
        return gtk_label_get_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_label_get_width_chars(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_width_chars(MemorySegment label) {
        var mh$ = gtk_label_get_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_width_chars", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_max_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_max_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_max_width_chars(GtkLabel *label, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_label_set_max_width_chars$descriptor() {
        return gtk_label_set_max_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_max_width_chars(GtkLabel *label, gint n_chars)
     * }
     */
    public static MethodHandle gtk_label_set_max_width_chars$handle() {
        return gtk_label_set_max_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_max_width_chars(GtkLabel *label, gint n_chars)
     * }
     */
    public static void gtk_label_set_max_width_chars(MemorySegment label, int n_chars) {
        var mh$ = gtk_label_set_max_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_max_width_chars", label, n_chars);
            }
            mh$.invokeExact(label, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_max_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_max_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_label_get_max_width_chars(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_max_width_chars$descriptor() {
        return gtk_label_get_max_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_label_get_max_width_chars(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_max_width_chars$handle() {
        return gtk_label_get_max_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_label_get_max_width_chars(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_max_width_chars(MemorySegment label) {
        var mh$ = gtk_label_get_max_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_max_width_chars", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_lines(GtkLabel *label, gint lines)
     * }
     */
    public static FunctionDescriptor gtk_label_set_lines$descriptor() {
        return gtk_label_set_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_lines(GtkLabel *label, gint lines)
     * }
     */
    public static MethodHandle gtk_label_set_lines$handle() {
        return gtk_label_set_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_lines(GtkLabel *label, gint lines)
     * }
     */
    public static void gtk_label_set_lines(MemorySegment label, int lines) {
        var mh$ = gtk_label_set_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_lines", label, lines);
            }
            mh$.invokeExact(label, lines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_label_get_lines(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_lines$descriptor() {
        return gtk_label_get_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_label_get_lines(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_lines$handle() {
        return gtk_label_get_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_label_get_lines(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_lines(MemorySegment label) {
        var mh$ = gtk_label_get_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_lines", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_pattern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_pattern(GtkLabel *label, const gchar *pattern)
     * }
     */
    public static FunctionDescriptor gtk_label_set_pattern$descriptor() {
        return gtk_label_set_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_pattern(GtkLabel *label, const gchar *pattern)
     * }
     */
    public static MethodHandle gtk_label_set_pattern$handle() {
        return gtk_label_set_pattern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_pattern(GtkLabel *label, const gchar *pattern)
     * }
     */
    public static void gtk_label_set_pattern(MemorySegment label, MemorySegment pattern) {
        var mh$ = gtk_label_set_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_pattern", label, pattern);
            }
            mh$.invokeExact(label, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_line_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_line_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_line_wrap(GtkLabel *label, gboolean wrap)
     * }
     */
    public static FunctionDescriptor gtk_label_set_line_wrap$descriptor() {
        return gtk_label_set_line_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_line_wrap(GtkLabel *label, gboolean wrap)
     * }
     */
    public static MethodHandle gtk_label_set_line_wrap$handle() {
        return gtk_label_set_line_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_line_wrap(GtkLabel *label, gboolean wrap)
     * }
     */
    public static void gtk_label_set_line_wrap(MemorySegment label, int wrap) {
        var mh$ = gtk_label_set_line_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_line_wrap", label, wrap);
            }
            mh$.invokeExact(label, wrap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_line_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_line_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_line_wrap(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_line_wrap$descriptor() {
        return gtk_label_get_line_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_line_wrap(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_line_wrap$handle() {
        return gtk_label_get_line_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_line_wrap(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_line_wrap(MemorySegment label) {
        var mh$ = gtk_label_get_line_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_line_wrap", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_line_wrap_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_line_wrap_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_line_wrap_mode(GtkLabel *label, PangoWrapMode wrap_mode)
     * }
     */
    public static FunctionDescriptor gtk_label_set_line_wrap_mode$descriptor() {
        return gtk_label_set_line_wrap_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_line_wrap_mode(GtkLabel *label, PangoWrapMode wrap_mode)
     * }
     */
    public static MethodHandle gtk_label_set_line_wrap_mode$handle() {
        return gtk_label_set_line_wrap_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_line_wrap_mode(GtkLabel *label, PangoWrapMode wrap_mode)
     * }
     */
    public static void gtk_label_set_line_wrap_mode(MemorySegment label, int wrap_mode) {
        var mh$ = gtk_label_set_line_wrap_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_line_wrap_mode", label, wrap_mode);
            }
            mh$.invokeExact(label, wrap_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_line_wrap_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_line_wrap_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoWrapMode gtk_label_get_line_wrap_mode(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_line_wrap_mode$descriptor() {
        return gtk_label_get_line_wrap_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoWrapMode gtk_label_get_line_wrap_mode(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_line_wrap_mode$handle() {
        return gtk_label_get_line_wrap_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoWrapMode gtk_label_get_line_wrap_mode(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_line_wrap_mode(MemorySegment label) {
        var mh$ = gtk_label_get_line_wrap_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_line_wrap_mode", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_selectable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_selectable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_selectable(GtkLabel *label, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_label_set_selectable$descriptor() {
        return gtk_label_set_selectable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_selectable(GtkLabel *label, gboolean setting)
     * }
     */
    public static MethodHandle gtk_label_set_selectable$handle() {
        return gtk_label_set_selectable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_selectable(GtkLabel *label, gboolean setting)
     * }
     */
    public static void gtk_label_set_selectable(MemorySegment label, int setting) {
        var mh$ = gtk_label_set_selectable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_selectable", label, setting);
            }
            mh$.invokeExact(label, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_selectable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_selectable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_selectable(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_selectable$descriptor() {
        return gtk_label_get_selectable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_selectable(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_selectable$handle() {
        return gtk_label_get_selectable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_selectable(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_selectable(MemorySegment label) {
        var mh$ = gtk_label_get_selectable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_selectable", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_angle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_angle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_angle(GtkLabel *label, gdouble angle)
     * }
     */
    public static FunctionDescriptor gtk_label_set_angle$descriptor() {
        return gtk_label_set_angle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_angle(GtkLabel *label, gdouble angle)
     * }
     */
    public static MethodHandle gtk_label_set_angle$handle() {
        return gtk_label_set_angle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_angle(GtkLabel *label, gdouble angle)
     * }
     */
    public static void gtk_label_set_angle(MemorySegment label, double angle) {
        var mh$ = gtk_label_set_angle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_angle", label, angle);
            }
            mh$.invokeExact(label, angle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_angle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_angle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_label_get_angle(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_angle$descriptor() {
        return gtk_label_get_angle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_label_get_angle(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_angle$handle() {
        return gtk_label_get_angle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_label_get_angle(GtkLabel *label)
     * }
     */
    public static double gtk_label_get_angle(MemorySegment label) {
        var mh$ = gtk_label_get_angle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_angle", label);
            }
            return (double)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_select_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_select_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_select_region(GtkLabel *label, gint start_offset, gint end_offset)
     * }
     */
    public static FunctionDescriptor gtk_label_select_region$descriptor() {
        return gtk_label_select_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_select_region(GtkLabel *label, gint start_offset, gint end_offset)
     * }
     */
    public static MethodHandle gtk_label_select_region$handle() {
        return gtk_label_select_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_select_region(GtkLabel *label, gint start_offset, gint end_offset)
     * }
     */
    public static void gtk_label_select_region(MemorySegment label, int start_offset, int end_offset) {
        var mh$ = gtk_label_select_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_select_region", label, start_offset, end_offset);
            }
            mh$.invokeExact(label, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_selection_bounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_selection_bounds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_selection_bounds(GtkLabel *label, gint *start, gint *end)
     * }
     */
    public static FunctionDescriptor gtk_label_get_selection_bounds$descriptor() {
        return gtk_label_get_selection_bounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_selection_bounds(GtkLabel *label, gint *start, gint *end)
     * }
     */
    public static MethodHandle gtk_label_get_selection_bounds$handle() {
        return gtk_label_get_selection_bounds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_selection_bounds(GtkLabel *label, gint *start, gint *end)
     * }
     */
    public static int gtk_label_get_selection_bounds(MemorySegment label, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_label_get_selection_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_selection_bounds", label, start, end);
            }
            return (int)mh$.invokeExact(label, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_label_get_layout(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_layout$descriptor() {
        return gtk_label_get_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_label_get_layout(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_layout$handle() {
        return gtk_label_get_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *gtk_label_get_layout(GtkLabel *label)
     * }
     */
    public static MemorySegment gtk_label_get_layout(MemorySegment label) {
        var mh$ = gtk_label_get_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_layout", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_layout_offsets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_layout_offsets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_get_layout_offsets(GtkLabel *label, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gtk_label_get_layout_offsets$descriptor() {
        return gtk_label_get_layout_offsets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_get_layout_offsets(GtkLabel *label, gint *x, gint *y)
     * }
     */
    public static MethodHandle gtk_label_get_layout_offsets$handle() {
        return gtk_label_get_layout_offsets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_get_layout_offsets(GtkLabel *label, gint *x, gint *y)
     * }
     */
    public static void gtk_label_get_layout_offsets(MemorySegment label, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_label_get_layout_offsets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_layout_offsets", label, x, y);
            }
            mh$.invokeExact(label, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_single_line_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_single_line_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_single_line_mode(GtkLabel *label, gboolean single_line_mode)
     * }
     */
    public static FunctionDescriptor gtk_label_set_single_line_mode$descriptor() {
        return gtk_label_set_single_line_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_single_line_mode(GtkLabel *label, gboolean single_line_mode)
     * }
     */
    public static MethodHandle gtk_label_set_single_line_mode$handle() {
        return gtk_label_set_single_line_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_single_line_mode(GtkLabel *label, gboolean single_line_mode)
     * }
     */
    public static void gtk_label_set_single_line_mode(MemorySegment label, int single_line_mode) {
        var mh$ = gtk_label_set_single_line_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_single_line_mode", label, single_line_mode);
            }
            mh$.invokeExact(label, single_line_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_single_line_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_single_line_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_single_line_mode(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_single_line_mode$descriptor() {
        return gtk_label_get_single_line_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_single_line_mode(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_single_line_mode$handle() {
        return gtk_label_get_single_line_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_single_line_mode(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_single_line_mode(MemorySegment label) {
        var mh$ = gtk_label_get_single_line_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_single_line_mode", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_current_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_current_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_current_uri(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_current_uri$descriptor() {
        return gtk_label_get_current_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_current_uri(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_current_uri$handle() {
        return gtk_label_get_current_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_label_get_current_uri(GtkLabel *label)
     * }
     */
    public static MemorySegment gtk_label_get_current_uri(MemorySegment label) {
        var mh$ = gtk_label_get_current_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_current_uri", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_track_visited_links {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_track_visited_links"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_track_visited_links(GtkLabel *label, gboolean track_links)
     * }
     */
    public static FunctionDescriptor gtk_label_set_track_visited_links$descriptor() {
        return gtk_label_set_track_visited_links.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_track_visited_links(GtkLabel *label, gboolean track_links)
     * }
     */
    public static MethodHandle gtk_label_set_track_visited_links$handle() {
        return gtk_label_set_track_visited_links.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_track_visited_links(GtkLabel *label, gboolean track_links)
     * }
     */
    public static void gtk_label_set_track_visited_links(MemorySegment label, int track_links) {
        var mh$ = gtk_label_set_track_visited_links.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_track_visited_links", label, track_links);
            }
            mh$.invokeExact(label, track_links);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_track_visited_links {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_track_visited_links"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_track_visited_links(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_track_visited_links$descriptor() {
        return gtk_label_get_track_visited_links.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_track_visited_links(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_track_visited_links$handle() {
        return gtk_label_get_track_visited_links.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_label_get_track_visited_links(GtkLabel *label)
     * }
     */
    public static int gtk_label_get_track_visited_links(MemorySegment label) {
        var mh$ = gtk_label_get_track_visited_links.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_track_visited_links", label);
            }
            return (int)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_xalign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_xalign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_xalign(GtkLabel *label, gfloat xalign)
     * }
     */
    public static FunctionDescriptor gtk_label_set_xalign$descriptor() {
        return gtk_label_set_xalign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_xalign(GtkLabel *label, gfloat xalign)
     * }
     */
    public static MethodHandle gtk_label_set_xalign$handle() {
        return gtk_label_set_xalign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_xalign(GtkLabel *label, gfloat xalign)
     * }
     */
    public static void gtk_label_set_xalign(MemorySegment label, float xalign) {
        var mh$ = gtk_label_set_xalign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_xalign", label, xalign);
            }
            mh$.invokeExact(label, xalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_xalign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_xalign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat gtk_label_get_xalign(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_xalign$descriptor() {
        return gtk_label_get_xalign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat gtk_label_get_xalign(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_xalign$handle() {
        return gtk_label_get_xalign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gfloat gtk_label_get_xalign(GtkLabel *label)
     * }
     */
    public static float gtk_label_get_xalign(MemorySegment label) {
        var mh$ = gtk_label_get_xalign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_xalign", label);
            }
            return (float)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_set_yalign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_set_yalign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_label_set_yalign(GtkLabel *label, gfloat yalign)
     * }
     */
    public static FunctionDescriptor gtk_label_set_yalign$descriptor() {
        return gtk_label_set_yalign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_label_set_yalign(GtkLabel *label, gfloat yalign)
     * }
     */
    public static MethodHandle gtk_label_set_yalign$handle() {
        return gtk_label_set_yalign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_label_set_yalign(GtkLabel *label, gfloat yalign)
     * }
     */
    public static void gtk_label_set_yalign(MemorySegment label, float yalign) {
        var mh$ = gtk_label_set_yalign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_set_yalign", label, yalign);
            }
            mh$.invokeExact(label, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_label_get_yalign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_label_get_yalign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat gtk_label_get_yalign(GtkLabel *label)
     * }
     */
    public static FunctionDescriptor gtk_label_get_yalign$descriptor() {
        return gtk_label_get_yalign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat gtk_label_get_yalign(GtkLabel *label)
     * }
     */
    public static MethodHandle gtk_label_get_yalign$handle() {
        return gtk_label_get_yalign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gfloat gtk_label_get_yalign(GtkLabel *label)
     * }
     */
    public static float gtk_label_get_yalign(MemorySegment label) {
        var mh$ = gtk_label_get_yalign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_label_get_yalign", label);
            }
            return (float)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkLabel *GtkLabel_autoptr
     * }
     */
    public static final AddressLayout GtkLabel_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkLabel_listautoptr
     * }
     */
    public static final AddressLayout GtkLabel_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkLabel_slistautoptr
     * }
     */
    public static final AddressLayout GtkLabel_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkLabel_queueautoptr
     * }
     */
    public static final AddressLayout GtkLabel_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_accel_label_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_accel_label_get_type()
     * }
     */
    public static FunctionDescriptor gtk_accel_label_get_type$descriptor() {
        return gtk_accel_label_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_accel_label_get_type()
     * }
     */
    public static MethodHandle gtk_accel_label_get_type$handle() {
        return gtk_accel_label_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_accel_label_get_type()
     * }
     */
    public static long gtk_accel_label_get_type() {
        var mh$ = gtk_accel_label_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accel_label_new(const gchar *string)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_new$descriptor() {
        return gtk_accel_label_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accel_label_new(const gchar *string)
     * }
     */
    public static MethodHandle gtk_accel_label_new$handle() {
        return gtk_accel_label_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accel_label_new(const gchar *string)
     * }
     */
    public static MemorySegment gtk_accel_label_new(MemorySegment string) {
        var mh$ = gtk_accel_label_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_new", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_get_accel_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_get_accel_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accel_label_get_accel_widget(GtkAccelLabel *accel_label)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_get_accel_widget$descriptor() {
        return gtk_accel_label_get_accel_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accel_label_get_accel_widget(GtkAccelLabel *accel_label)
     * }
     */
    public static MethodHandle gtk_accel_label_get_accel_widget$handle() {
        return gtk_accel_label_get_accel_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accel_label_get_accel_widget(GtkAccelLabel *accel_label)
     * }
     */
    public static MemorySegment gtk_accel_label_get_accel_widget(MemorySegment accel_label) {
        var mh$ = gtk_accel_label_get_accel_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_get_accel_widget", accel_label);
            }
            return (MemorySegment)mh$.invokeExact(accel_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_get_accel_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_get_accel_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_accel_label_get_accel_width(GtkAccelLabel *accel_label)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_get_accel_width$descriptor() {
        return gtk_accel_label_get_accel_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_accel_label_get_accel_width(GtkAccelLabel *accel_label)
     * }
     */
    public static MethodHandle gtk_accel_label_get_accel_width$handle() {
        return gtk_accel_label_get_accel_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_accel_label_get_accel_width(GtkAccelLabel *accel_label)
     * }
     */
    public static int gtk_accel_label_get_accel_width(MemorySegment accel_label) {
        var mh$ = gtk_accel_label_get_accel_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_get_accel_width", accel_label);
            }
            return (int)mh$.invokeExact(accel_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_set_accel_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_set_accel_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel_widget(GtkAccelLabel *accel_label, GtkWidget *accel_widget)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_set_accel_widget$descriptor() {
        return gtk_accel_label_set_accel_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel_widget(GtkAccelLabel *accel_label, GtkWidget *accel_widget)
     * }
     */
    public static MethodHandle gtk_accel_label_set_accel_widget$handle() {
        return gtk_accel_label_set_accel_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel_widget(GtkAccelLabel *accel_label, GtkWidget *accel_widget)
     * }
     */
    public static void gtk_accel_label_set_accel_widget(MemorySegment accel_label, MemorySegment accel_widget) {
        var mh$ = gtk_accel_label_set_accel_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_set_accel_widget", accel_label, accel_widget);
            }
            mh$.invokeExact(accel_label, accel_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_set_accel_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_set_accel_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel_closure(GtkAccelLabel *accel_label, GClosure *accel_closure)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_set_accel_closure$descriptor() {
        return gtk_accel_label_set_accel_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel_closure(GtkAccelLabel *accel_label, GClosure *accel_closure)
     * }
     */
    public static MethodHandle gtk_accel_label_set_accel_closure$handle() {
        return gtk_accel_label_set_accel_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel_closure(GtkAccelLabel *accel_label, GClosure *accel_closure)
     * }
     */
    public static void gtk_accel_label_set_accel_closure(MemorySegment accel_label, MemorySegment accel_closure) {
        var mh$ = gtk_accel_label_set_accel_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_set_accel_closure", accel_label, accel_closure);
            }
            mh$.invokeExact(accel_label, accel_closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_refetch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_refetch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_label_refetch(GtkAccelLabel *accel_label)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_refetch$descriptor() {
        return gtk_accel_label_refetch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_label_refetch(GtkAccelLabel *accel_label)
     * }
     */
    public static MethodHandle gtk_accel_label_refetch$handle() {
        return gtk_accel_label_refetch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_label_refetch(GtkAccelLabel *accel_label)
     * }
     */
    public static int gtk_accel_label_refetch(MemorySegment accel_label) {
        var mh$ = gtk_accel_label_refetch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_refetch", accel_label);
            }
            return (int)mh$.invokeExact(accel_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_set_accel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_set_accel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel(GtkAccelLabel *accel_label, guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_set_accel$descriptor() {
        return gtk_accel_label_set_accel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel(GtkAccelLabel *accel_label, guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accel_label_set_accel$handle() {
        return gtk_accel_label_set_accel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_label_set_accel(GtkAccelLabel *accel_label, guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static void gtk_accel_label_set_accel(MemorySegment accel_label, int accelerator_key, int accelerator_mods) {
        var mh$ = gtk_accel_label_set_accel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_set_accel", accel_label, accelerator_key, accelerator_mods);
            }
            mh$.invokeExact(accel_label, accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_label_get_accel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_label_get_accel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_get_accel(GtkAccelLabel *accel_label, guint *accelerator_key, GdkModifierType *accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accel_label_get_accel$descriptor() {
        return gtk_accel_label_get_accel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_label_get_accel(GtkAccelLabel *accel_label, guint *accelerator_key, GdkModifierType *accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accel_label_get_accel$handle() {
        return gtk_accel_label_get_accel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_label_get_accel(GtkAccelLabel *accel_label, guint *accelerator_key, GdkModifierType *accelerator_mods)
     * }
     */
    public static void gtk_accel_label_get_accel(MemorySegment accel_label, MemorySegment accelerator_key, MemorySegment accelerator_mods) {
        var mh$ = gtk_accel_label_get_accel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_label_get_accel", accel_label, accelerator_key, accelerator_mods);
            }
            mh$.invokeExact(accel_label, accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_accel_label_class_get_accelerator_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_accel_label_class_get_accelerator_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gchar *_gtk_accel_label_class_get_accelerator_label(GtkAccelLabelClass *klass, guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static FunctionDescriptor _gtk_accel_label_class_get_accelerator_label$descriptor() {
        return _gtk_accel_label_class_get_accelerator_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gchar *_gtk_accel_label_class_get_accelerator_label(GtkAccelLabelClass *klass, guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static MethodHandle _gtk_accel_label_class_get_accelerator_label$handle() {
        return _gtk_accel_label_class_get_accelerator_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gchar *_gtk_accel_label_class_get_accelerator_label(GtkAccelLabelClass *klass, guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static MemorySegment _gtk_accel_label_class_get_accelerator_label(MemorySegment klass, int accelerator_key, int accelerator_mods) {
        var mh$ = _gtk_accel_label_class_get_accelerator_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_accel_label_class_get_accelerator_label", klass, accelerator_key, accelerator_mods);
            }
            return (MemorySegment)mh$.invokeExact(klass, accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkAccelLabel *GtkAccelLabel_autoptr
     * }
     */
    public static final AddressLayout GtkAccelLabel_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAccelLabel_listautoptr
     * }
     */
    public static final AddressLayout GtkAccelLabel_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAccelLabel_slistautoptr
     * }
     */
    public static final AddressLayout GtkAccelLabel_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAccelLabel_queueautoptr
     * }
     */
    public static final AddressLayout GtkAccelLabel_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_accel_map_add_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_add_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_add_entry(const gchar *accel_path, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_add_entry$descriptor() {
        return gtk_accel_map_add_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_add_entry(const gchar *accel_path, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static MethodHandle gtk_accel_map_add_entry$handle() {
        return gtk_accel_map_add_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_add_entry(const gchar *accel_path, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static void gtk_accel_map_add_entry(MemorySegment accel_path, int accel_key, int accel_mods) {
        var mh$ = gtk_accel_map_add_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_add_entry", accel_path, accel_key, accel_mods);
            }
            mh$.invokeExact(accel_path, accel_key, accel_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_lookup_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_lookup_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_map_lookup_entry(const gchar *accel_path, GtkAccelKey *key)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_lookup_entry$descriptor() {
        return gtk_accel_map_lookup_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_map_lookup_entry(const gchar *accel_path, GtkAccelKey *key)
     * }
     */
    public static MethodHandle gtk_accel_map_lookup_entry$handle() {
        return gtk_accel_map_lookup_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_map_lookup_entry(const gchar *accel_path, GtkAccelKey *key)
     * }
     */
    public static int gtk_accel_map_lookup_entry(MemorySegment accel_path, MemorySegment key) {
        var mh$ = gtk_accel_map_lookup_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_lookup_entry", accel_path, key);
            }
            return (int)mh$.invokeExact(accel_path, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_change_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_change_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_map_change_entry(const gchar *accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_change_entry$descriptor() {
        return gtk_accel_map_change_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_map_change_entry(const gchar *accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace)
     * }
     */
    public static MethodHandle gtk_accel_map_change_entry$handle() {
        return gtk_accel_map_change_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_map_change_entry(const gchar *accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace)
     * }
     */
    public static int gtk_accel_map_change_entry(MemorySegment accel_path, int accel_key, int accel_mods, int replace) {
        var mh$ = gtk_accel_map_change_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_change_entry", accel_path, accel_key, accel_mods, replace);
            }
            return (int)mh$.invokeExact(accel_path, accel_key, accel_mods, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_load"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_load(const gchar *file_name)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_load$descriptor() {
        return gtk_accel_map_load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_load(const gchar *file_name)
     * }
     */
    public static MethodHandle gtk_accel_map_load$handle() {
        return gtk_accel_map_load.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_load(const gchar *file_name)
     * }
     */
    public static void gtk_accel_map_load(MemorySegment file_name) {
        var mh$ = gtk_accel_map_load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_load", file_name);
            }
            mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_save"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_save(const gchar *file_name)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_save$descriptor() {
        return gtk_accel_map_save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_save(const gchar *file_name)
     * }
     */
    public static MethodHandle gtk_accel_map_save$handle() {
        return gtk_accel_map_save.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_save(const gchar *file_name)
     * }
     */
    public static void gtk_accel_map_save(MemorySegment file_name) {
        var mh$ = gtk_accel_map_save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_save", file_name);
            }
            mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_foreach(gpointer data, GtkAccelMapForeach foreach_func)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_foreach$descriptor() {
        return gtk_accel_map_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_foreach(gpointer data, GtkAccelMapForeach foreach_func)
     * }
     */
    public static MethodHandle gtk_accel_map_foreach$handle() {
        return gtk_accel_map_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_foreach(gpointer data, GtkAccelMapForeach foreach_func)
     * }
     */
    public static void gtk_accel_map_foreach(MemorySegment data, MemorySegment foreach_func) {
        var mh$ = gtk_accel_map_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_foreach", data, foreach_func);
            }
            mh$.invokeExact(data, foreach_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_load_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_load_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_load_fd(gint fd)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_load_fd$descriptor() {
        return gtk_accel_map_load_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_load_fd(gint fd)
     * }
     */
    public static MethodHandle gtk_accel_map_load_fd$handle() {
        return gtk_accel_map_load_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_load_fd(gint fd)
     * }
     */
    public static void gtk_accel_map_load_fd(int fd) {
        var mh$ = gtk_accel_map_load_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_load_fd", fd);
            }
            mh$.invokeExact(fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_load_scanner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_load_scanner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_load_scanner(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_load_scanner$descriptor() {
        return gtk_accel_map_load_scanner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_load_scanner(GScanner *scanner)
     * }
     */
    public static MethodHandle gtk_accel_map_load_scanner$handle() {
        return gtk_accel_map_load_scanner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_load_scanner(GScanner *scanner)
     * }
     */
    public static void gtk_accel_map_load_scanner(MemorySegment scanner) {
        var mh$ = gtk_accel_map_load_scanner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_load_scanner", scanner);
            }
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_save_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_save_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_save_fd(gint fd)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_save_fd$descriptor() {
        return gtk_accel_map_save_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_save_fd(gint fd)
     * }
     */
    public static MethodHandle gtk_accel_map_save_fd$handle() {
        return gtk_accel_map_save_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_save_fd(gint fd)
     * }
     */
    public static void gtk_accel_map_save_fd(int fd) {
        var mh$ = gtk_accel_map_save_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_save_fd", fd);
            }
            mh$.invokeExact(fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_lock_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_lock_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_lock_path(const gchar *accel_path)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_lock_path$descriptor() {
        return gtk_accel_map_lock_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_lock_path(const gchar *accel_path)
     * }
     */
    public static MethodHandle gtk_accel_map_lock_path$handle() {
        return gtk_accel_map_lock_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_lock_path(const gchar *accel_path)
     * }
     */
    public static void gtk_accel_map_lock_path(MemorySegment accel_path) {
        var mh$ = gtk_accel_map_lock_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_lock_path", accel_path);
            }
            mh$.invokeExact(accel_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_unlock_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_unlock_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_unlock_path(const gchar *accel_path)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_unlock_path$descriptor() {
        return gtk_accel_map_unlock_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_unlock_path(const gchar *accel_path)
     * }
     */
    public static MethodHandle gtk_accel_map_unlock_path$handle() {
        return gtk_accel_map_unlock_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_unlock_path(const gchar *accel_path)
     * }
     */
    public static void gtk_accel_map_unlock_path(MemorySegment accel_path) {
        var mh$ = gtk_accel_map_unlock_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_unlock_path", accel_path);
            }
            mh$.invokeExact(accel_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_add_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_add_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_add_filter(const gchar *filter_pattern)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_add_filter$descriptor() {
        return gtk_accel_map_add_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_add_filter(const gchar *filter_pattern)
     * }
     */
    public static MethodHandle gtk_accel_map_add_filter$handle() {
        return gtk_accel_map_add_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_add_filter(const gchar *filter_pattern)
     * }
     */
    public static void gtk_accel_map_add_filter(MemorySegment filter_pattern) {
        var mh$ = gtk_accel_map_add_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_add_filter", filter_pattern);
            }
            mh$.invokeExact(filter_pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_foreach_unfiltered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_foreach_unfiltered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_foreach_unfiltered(gpointer data, GtkAccelMapForeach foreach_func)
     * }
     */
    public static FunctionDescriptor gtk_accel_map_foreach_unfiltered$descriptor() {
        return gtk_accel_map_foreach_unfiltered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_map_foreach_unfiltered(gpointer data, GtkAccelMapForeach foreach_func)
     * }
     */
    public static MethodHandle gtk_accel_map_foreach_unfiltered$handle() {
        return gtk_accel_map_foreach_unfiltered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_map_foreach_unfiltered(gpointer data, GtkAccelMapForeach foreach_func)
     * }
     */
    public static void gtk_accel_map_foreach_unfiltered(MemorySegment data, MemorySegment foreach_func) {
        var mh$ = gtk_accel_map_foreach_unfiltered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_foreach_unfiltered", data, foreach_func);
            }
            mh$.invokeExact(data, foreach_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_accel_map_get_type()
     * }
     */
    public static FunctionDescriptor gtk_accel_map_get_type$descriptor() {
        return gtk_accel_map_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_accel_map_get_type()
     * }
     */
    public static MethodHandle gtk_accel_map_get_type$handle() {
        return gtk_accel_map_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_accel_map_get_type()
     * }
     */
    public static long gtk_accel_map_get_type() {
        var mh$ = gtk_accel_map_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_map_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_map_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelMap *gtk_accel_map_get()
     * }
     */
    public static FunctionDescriptor gtk_accel_map_get$descriptor() {
        return gtk_accel_map_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelMap *gtk_accel_map_get()
     * }
     */
    public static MethodHandle gtk_accel_map_get$handle() {
        return gtk_accel_map_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelMap *gtk_accel_map_get()
     * }
     */
    public static MemorySegment gtk_accel_map_get() {
        var mh$ = gtk_accel_map_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_map_get");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkAccelMap *GtkAccelMap_autoptr
     * }
     */
    public static final AddressLayout GtkAccelMap_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAccelMap_listautoptr
     * }
     */
    public static final AddressLayout GtkAccelMap_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAccelMap_slistautoptr
     * }
     */
    public static final AddressLayout GtkAccelMap_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAccelMap_queueautoptr
     * }
     */
    public static final AddressLayout GtkAccelMap_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_accessible_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accessible_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_accessible_get_type()
     * }
     */
    public static FunctionDescriptor gtk_accessible_get_type$descriptor() {
        return gtk_accessible_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_accessible_get_type()
     * }
     */
    public static MethodHandle gtk_accessible_get_type$handle() {
        return gtk_accessible_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_accessible_get_type()
     * }
     */
    public static long gtk_accessible_get_type() {
        var mh$ = gtk_accessible_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accessible_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accessible_set_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accessible_set_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accessible_set_widget(GtkAccessible *accessible, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_accessible_set_widget$descriptor() {
        return gtk_accessible_set_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accessible_set_widget(GtkAccessible *accessible, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_accessible_set_widget$handle() {
        return gtk_accessible_set_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accessible_set_widget(GtkAccessible *accessible, GtkWidget *widget)
     * }
     */
    public static void gtk_accessible_set_widget(MemorySegment accessible, MemorySegment widget) {
        var mh$ = gtk_accessible_set_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accessible_set_widget", accessible, widget);
            }
            mh$.invokeExact(accessible, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accessible_get_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accessible_get_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accessible_get_widget(GtkAccessible *accessible)
     * }
     */
    public static FunctionDescriptor gtk_accessible_get_widget$descriptor() {
        return gtk_accessible_get_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accessible_get_widget(GtkAccessible *accessible)
     * }
     */
    public static MethodHandle gtk_accessible_get_widget$handle() {
        return gtk_accessible_get_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_accessible_get_widget(GtkAccessible *accessible)
     * }
     */
    public static MemorySegment gtk_accessible_get_widget(MemorySegment accessible) {
        var mh$ = gtk_accessible_get_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accessible_get_widget", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accessible_connect_widget_destroyed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accessible_connect_widget_destroyed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accessible_connect_widget_destroyed(GtkAccessible *accessible)
     * }
     */
    public static FunctionDescriptor gtk_accessible_connect_widget_destroyed$descriptor() {
        return gtk_accessible_connect_widget_destroyed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accessible_connect_widget_destroyed(GtkAccessible *accessible)
     * }
     */
    public static MethodHandle gtk_accessible_connect_widget_destroyed$handle() {
        return gtk_accessible_connect_widget_destroyed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accessible_connect_widget_destroyed(GtkAccessible *accessible)
     * }
     */
    public static void gtk_accessible_connect_widget_destroyed(MemorySegment accessible) {
        var mh$ = gtk_accessible_connect_widget_destroyed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accessible_connect_widget_destroyed", accessible);
            }
            mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_actionable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_actionable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_actionable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_actionable_get_type$descriptor() {
        return gtk_actionable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_actionable_get_type()
     * }
     */
    public static MethodHandle gtk_actionable_get_type$handle() {
        return gtk_actionable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_actionable_get_type()
     * }
     */
    public static long gtk_actionable_get_type() {
        var mh$ = gtk_actionable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_actionable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_actionable_get_action_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_actionable_get_action_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_actionable_get_action_name(GtkActionable *actionable)
     * }
     */
    public static FunctionDescriptor gtk_actionable_get_action_name$descriptor() {
        return gtk_actionable_get_action_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_actionable_get_action_name(GtkActionable *actionable)
     * }
     */
    public static MethodHandle gtk_actionable_get_action_name$handle() {
        return gtk_actionable_get_action_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_actionable_get_action_name(GtkActionable *actionable)
     * }
     */
    public static MemorySegment gtk_actionable_get_action_name(MemorySegment actionable) {
        var mh$ = gtk_actionable_get_action_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_actionable_get_action_name", actionable);
            }
            return (MemorySegment)mh$.invokeExact(actionable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_actionable_set_action_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_actionable_set_action_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_actionable_set_action_name(GtkActionable *actionable, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor gtk_actionable_set_action_name$descriptor() {
        return gtk_actionable_set_action_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_actionable_set_action_name(GtkActionable *actionable, const gchar *action_name)
     * }
     */
    public static MethodHandle gtk_actionable_set_action_name$handle() {
        return gtk_actionable_set_action_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_actionable_set_action_name(GtkActionable *actionable, const gchar *action_name)
     * }
     */
    public static void gtk_actionable_set_action_name(MemorySegment actionable, MemorySegment action_name) {
        var mh$ = gtk_actionable_set_action_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_actionable_set_action_name", actionable, action_name);
            }
            mh$.invokeExact(actionable, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_actionable_get_action_target_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_actionable_get_action_target_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *gtk_actionable_get_action_target_value(GtkActionable *actionable)
     * }
     */
    public static FunctionDescriptor gtk_actionable_get_action_target_value$descriptor() {
        return gtk_actionable_get_action_target_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *gtk_actionable_get_action_target_value(GtkActionable *actionable)
     * }
     */
    public static MethodHandle gtk_actionable_get_action_target_value$handle() {
        return gtk_actionable_get_action_target_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *gtk_actionable_get_action_target_value(GtkActionable *actionable)
     * }
     */
    public static MemorySegment gtk_actionable_get_action_target_value(MemorySegment actionable) {
        var mh$ = gtk_actionable_get_action_target_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_actionable_get_action_target_value", actionable);
            }
            return (MemorySegment)mh$.invokeExact(actionable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_actionable_set_action_target_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_actionable_set_action_target_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_actionable_set_action_target_value(GtkActionable *actionable, GVariant *target_value)
     * }
     */
    public static FunctionDescriptor gtk_actionable_set_action_target_value$descriptor() {
        return gtk_actionable_set_action_target_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_actionable_set_action_target_value(GtkActionable *actionable, GVariant *target_value)
     * }
     */
    public static MethodHandle gtk_actionable_set_action_target_value$handle() {
        return gtk_actionable_set_action_target_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_actionable_set_action_target_value(GtkActionable *actionable, GVariant *target_value)
     * }
     */
    public static void gtk_actionable_set_action_target_value(MemorySegment actionable, MemorySegment target_value) {
        var mh$ = gtk_actionable_set_action_target_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_actionable_set_action_target_value", actionable, target_value);
            }
            mh$.invokeExact(actionable, target_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_actionable_set_action_target(GtkActionable *actionable, const gchar *format_string, ...)
     * }
     */
    public static class gtk_actionable_set_action_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_actionable_set_action_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_actionable_set_action_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_actionable_set_action_target(GtkActionable *actionable, const gchar *format_string, ...)
         * }
         */
        public static gtk_actionable_set_action_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_actionable_set_action_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment actionable, MemorySegment format_string, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_actionable_set_action_target", actionable, format_string, x2);
                }
                spreader.invokeExact(actionable, format_string, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_actionable_set_detailed_action_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_actionable_set_detailed_action_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_actionable_set_detailed_action_name(GtkActionable *actionable, const gchar *detailed_action_name)
     * }
     */
    public static FunctionDescriptor gtk_actionable_set_detailed_action_name$descriptor() {
        return gtk_actionable_set_detailed_action_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_actionable_set_detailed_action_name(GtkActionable *actionable, const gchar *detailed_action_name)
     * }
     */
    public static MethodHandle gtk_actionable_set_detailed_action_name$handle() {
        return gtk_actionable_set_detailed_action_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_actionable_set_detailed_action_name(GtkActionable *actionable, const gchar *detailed_action_name)
     * }
     */
    public static void gtk_actionable_set_detailed_action_name(MemorySegment actionable, MemorySegment detailed_action_name) {
        var mh$ = gtk_actionable_set_detailed_action_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_actionable_set_detailed_action_name", actionable, detailed_action_name);
            }
            mh$.invokeExact(actionable, detailed_action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_bar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_bar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_action_bar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_action_bar_get_type$descriptor() {
        return gtk_action_bar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_action_bar_get_type()
     * }
     */
    public static MethodHandle gtk_action_bar_get_type$handle() {
        return gtk_action_bar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_action_bar_get_type()
     * }
     */
    public static long gtk_action_bar_get_type() {
        var mh$ = gtk_action_bar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_bar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_bar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_bar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_bar_new()
     * }
     */
    public static FunctionDescriptor gtk_action_bar_new$descriptor() {
        return gtk_action_bar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_bar_new()
     * }
     */
    public static MethodHandle gtk_action_bar_new$handle() {
        return gtk_action_bar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_bar_new()
     * }
     */
    public static MemorySegment gtk_action_bar_new() {
        var mh$ = gtk_action_bar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_bar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_bar_get_center_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_bar_get_center_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_bar_get_center_widget(GtkActionBar *action_bar)
     * }
     */
    public static FunctionDescriptor gtk_action_bar_get_center_widget$descriptor() {
        return gtk_action_bar_get_center_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_bar_get_center_widget(GtkActionBar *action_bar)
     * }
     */
    public static MethodHandle gtk_action_bar_get_center_widget$handle() {
        return gtk_action_bar_get_center_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_action_bar_get_center_widget(GtkActionBar *action_bar)
     * }
     */
    public static MemorySegment gtk_action_bar_get_center_widget(MemorySegment action_bar) {
        var mh$ = gtk_action_bar_get_center_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_bar_get_center_widget", action_bar);
            }
            return (MemorySegment)mh$.invokeExact(action_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_bar_set_center_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_bar_set_center_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_bar_set_center_widget(GtkActionBar *action_bar, GtkWidget *center_widget)
     * }
     */
    public static FunctionDescriptor gtk_action_bar_set_center_widget$descriptor() {
        return gtk_action_bar_set_center_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_bar_set_center_widget(GtkActionBar *action_bar, GtkWidget *center_widget)
     * }
     */
    public static MethodHandle gtk_action_bar_set_center_widget$handle() {
        return gtk_action_bar_set_center_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_bar_set_center_widget(GtkActionBar *action_bar, GtkWidget *center_widget)
     * }
     */
    public static void gtk_action_bar_set_center_widget(MemorySegment action_bar, MemorySegment center_widget) {
        var mh$ = gtk_action_bar_set_center_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_bar_set_center_widget", action_bar, center_widget);
            }
            mh$.invokeExact(action_bar, center_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_bar_pack_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_bar_pack_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_bar_pack_start(GtkActionBar *action_bar, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_action_bar_pack_start$descriptor() {
        return gtk_action_bar_pack_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_bar_pack_start(GtkActionBar *action_bar, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_action_bar_pack_start$handle() {
        return gtk_action_bar_pack_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_bar_pack_start(GtkActionBar *action_bar, GtkWidget *child)
     * }
     */
    public static void gtk_action_bar_pack_start(MemorySegment action_bar, MemorySegment child) {
        var mh$ = gtk_action_bar_pack_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_bar_pack_start", action_bar, child);
            }
            mh$.invokeExact(action_bar, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_action_bar_pack_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_action_bar_pack_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_action_bar_pack_end(GtkActionBar *action_bar, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_action_bar_pack_end$descriptor() {
        return gtk_action_bar_pack_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_action_bar_pack_end(GtkActionBar *action_bar, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_action_bar_pack_end$handle() {
        return gtk_action_bar_pack_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_action_bar_pack_end(GtkActionBar *action_bar, GtkWidget *child)
     * }
     */
    public static void gtk_action_bar_pack_end(MemorySegment action_bar, MemorySegment child) {
        var mh$ = gtk_action_bar_pack_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_action_bar_pack_end", action_bar, child);
            }
            mh$.invokeExact(action_bar, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_adjustment_get_type()
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_type$descriptor() {
        return gtk_adjustment_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_adjustment_get_type()
     * }
     */
    public static MethodHandle gtk_adjustment_get_type$handle() {
        return gtk_adjustment_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_adjustment_get_type()
     * }
     */
    public static long gtk_adjustment_get_type() {
        var mh$ = gtk_adjustment_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_adjustment_new(gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_new$descriptor() {
        return gtk_adjustment_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_adjustment_new(gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size)
     * }
     */
    public static MethodHandle gtk_adjustment_new$handle() {
        return gtk_adjustment_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_adjustment_new(gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size)
     * }
     */
    public static MemorySegment gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size) {
        var mh$ = gtk_adjustment_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_new", value, lower, upper, step_increment, page_increment, page_size);
            }
            return (MemorySegment)mh$.invokeExact(value, lower, upper, step_increment, page_increment, page_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_changed(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_changed$descriptor() {
        return gtk_adjustment_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_changed(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_changed$handle() {
        return gtk_adjustment_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_changed(GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_adjustment_changed(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_changed", adjustment);
            }
            mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_value_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_value_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_value_changed(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_value_changed$descriptor() {
        return gtk_adjustment_value_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_value_changed(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_value_changed$handle() {
        return gtk_adjustment_value_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_value_changed(GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_adjustment_value_changed(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_value_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_value_changed", adjustment);
            }
            mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_clamp_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_clamp_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_clamp_page(GtkAdjustment *adjustment, gdouble lower, gdouble upper)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_clamp_page$descriptor() {
        return gtk_adjustment_clamp_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_clamp_page(GtkAdjustment *adjustment, gdouble lower, gdouble upper)
     * }
     */
    public static MethodHandle gtk_adjustment_clamp_page$handle() {
        return gtk_adjustment_clamp_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_clamp_page(GtkAdjustment *adjustment, gdouble lower, gdouble upper)
     * }
     */
    public static void gtk_adjustment_clamp_page(MemorySegment adjustment, double lower, double upper) {
        var mh$ = gtk_adjustment_clamp_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_clamp_page", adjustment, lower, upper);
            }
            mh$.invokeExact(adjustment, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_value(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_value$descriptor() {
        return gtk_adjustment_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_value(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_get_value$handle() {
        return gtk_adjustment_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_value(GtkAdjustment *adjustment)
     * }
     */
    public static double gtk_adjustment_get_value(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_value", adjustment);
            }
            return (double)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_value(GtkAdjustment *adjustment, gdouble value)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_set_value$descriptor() {
        return gtk_adjustment_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_value(GtkAdjustment *adjustment, gdouble value)
     * }
     */
    public static MethodHandle gtk_adjustment_set_value$handle() {
        return gtk_adjustment_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_value(GtkAdjustment *adjustment, gdouble value)
     * }
     */
    public static void gtk_adjustment_set_value(MemorySegment adjustment, double value) {
        var mh$ = gtk_adjustment_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_set_value", adjustment, value);
            }
            mh$.invokeExact(adjustment, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_lower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_lower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_lower(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_lower$descriptor() {
        return gtk_adjustment_get_lower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_lower(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_get_lower$handle() {
        return gtk_adjustment_get_lower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_lower(GtkAdjustment *adjustment)
     * }
     */
    public static double gtk_adjustment_get_lower(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_get_lower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_lower", adjustment);
            }
            return (double)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_set_lower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_set_lower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_lower(GtkAdjustment *adjustment, gdouble lower)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_set_lower$descriptor() {
        return gtk_adjustment_set_lower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_lower(GtkAdjustment *adjustment, gdouble lower)
     * }
     */
    public static MethodHandle gtk_adjustment_set_lower$handle() {
        return gtk_adjustment_set_lower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_lower(GtkAdjustment *adjustment, gdouble lower)
     * }
     */
    public static void gtk_adjustment_set_lower(MemorySegment adjustment, double lower) {
        var mh$ = gtk_adjustment_set_lower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_set_lower", adjustment, lower);
            }
            mh$.invokeExact(adjustment, lower);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_upper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_upper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_upper(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_upper$descriptor() {
        return gtk_adjustment_get_upper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_upper(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_get_upper$handle() {
        return gtk_adjustment_get_upper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_upper(GtkAdjustment *adjustment)
     * }
     */
    public static double gtk_adjustment_get_upper(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_get_upper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_upper", adjustment);
            }
            return (double)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_set_upper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_set_upper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_upper(GtkAdjustment *adjustment, gdouble upper)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_set_upper$descriptor() {
        return gtk_adjustment_set_upper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_upper(GtkAdjustment *adjustment, gdouble upper)
     * }
     */
    public static MethodHandle gtk_adjustment_set_upper$handle() {
        return gtk_adjustment_set_upper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_upper(GtkAdjustment *adjustment, gdouble upper)
     * }
     */
    public static void gtk_adjustment_set_upper(MemorySegment adjustment, double upper) {
        var mh$ = gtk_adjustment_set_upper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_set_upper", adjustment, upper);
            }
            mh$.invokeExact(adjustment, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_step_increment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_step_increment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_step_increment(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_step_increment$descriptor() {
        return gtk_adjustment_get_step_increment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_step_increment(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_get_step_increment$handle() {
        return gtk_adjustment_get_step_increment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_step_increment(GtkAdjustment *adjustment)
     * }
     */
    public static double gtk_adjustment_get_step_increment(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_get_step_increment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_step_increment", adjustment);
            }
            return (double)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_set_step_increment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_set_step_increment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_step_increment(GtkAdjustment *adjustment, gdouble step_increment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_set_step_increment$descriptor() {
        return gtk_adjustment_set_step_increment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_step_increment(GtkAdjustment *adjustment, gdouble step_increment)
     * }
     */
    public static MethodHandle gtk_adjustment_set_step_increment$handle() {
        return gtk_adjustment_set_step_increment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_step_increment(GtkAdjustment *adjustment, gdouble step_increment)
     * }
     */
    public static void gtk_adjustment_set_step_increment(MemorySegment adjustment, double step_increment) {
        var mh$ = gtk_adjustment_set_step_increment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_set_step_increment", adjustment, step_increment);
            }
            mh$.invokeExact(adjustment, step_increment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_page_increment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_page_increment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_page_increment(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_page_increment$descriptor() {
        return gtk_adjustment_get_page_increment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_page_increment(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_get_page_increment$handle() {
        return gtk_adjustment_get_page_increment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_page_increment(GtkAdjustment *adjustment)
     * }
     */
    public static double gtk_adjustment_get_page_increment(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_get_page_increment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_page_increment", adjustment);
            }
            return (double)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_set_page_increment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_set_page_increment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_page_increment(GtkAdjustment *adjustment, gdouble page_increment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_set_page_increment$descriptor() {
        return gtk_adjustment_set_page_increment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_page_increment(GtkAdjustment *adjustment, gdouble page_increment)
     * }
     */
    public static MethodHandle gtk_adjustment_set_page_increment$handle() {
        return gtk_adjustment_set_page_increment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_page_increment(GtkAdjustment *adjustment, gdouble page_increment)
     * }
     */
    public static void gtk_adjustment_set_page_increment(MemorySegment adjustment, double page_increment) {
        var mh$ = gtk_adjustment_set_page_increment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_set_page_increment", adjustment, page_increment);
            }
            mh$.invokeExact(adjustment, page_increment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_page_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_page_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_page_size(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_page_size$descriptor() {
        return gtk_adjustment_get_page_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_page_size(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_get_page_size$handle() {
        return gtk_adjustment_get_page_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_page_size(GtkAdjustment *adjustment)
     * }
     */
    public static double gtk_adjustment_get_page_size(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_get_page_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_page_size", adjustment);
            }
            return (double)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_set_page_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_set_page_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_page_size(GtkAdjustment *adjustment, gdouble page_size)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_set_page_size$descriptor() {
        return gtk_adjustment_set_page_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_page_size(GtkAdjustment *adjustment, gdouble page_size)
     * }
     */
    public static MethodHandle gtk_adjustment_set_page_size$handle() {
        return gtk_adjustment_set_page_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_set_page_size(GtkAdjustment *adjustment, gdouble page_size)
     * }
     */
    public static void gtk_adjustment_set_page_size(MemorySegment adjustment, double page_size) {
        var mh$ = gtk_adjustment_set_page_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_set_page_size", adjustment, page_size);
            }
            mh$.invokeExact(adjustment, page_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_configure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_configure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_configure(GtkAdjustment *adjustment, gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_configure$descriptor() {
        return gtk_adjustment_configure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_adjustment_configure(GtkAdjustment *adjustment, gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size)
     * }
     */
    public static MethodHandle gtk_adjustment_configure$handle() {
        return gtk_adjustment_configure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_adjustment_configure(GtkAdjustment *adjustment, gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size)
     * }
     */
    public static void gtk_adjustment_configure(MemorySegment adjustment, double value, double lower, double upper, double step_increment, double page_increment, double page_size) {
        var mh$ = gtk_adjustment_configure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_configure", adjustment, value, lower, upper, step_increment, page_increment, page_size);
            }
            mh$.invokeExact(adjustment, value, lower, upper, step_increment, page_increment, page_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_adjustment_get_minimum_increment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_adjustment_get_minimum_increment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_minimum_increment(GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_adjustment_get_minimum_increment$descriptor() {
        return gtk_adjustment_get_minimum_increment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_minimum_increment(GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_adjustment_get_minimum_increment$handle() {
        return gtk_adjustment_get_minimum_increment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_adjustment_get_minimum_increment(GtkAdjustment *adjustment)
     * }
     */
    public static double gtk_adjustment_get_minimum_increment(MemorySegment adjustment) {
        var mh$ = gtk_adjustment_get_minimum_increment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_adjustment_get_minimum_increment", adjustment);
            }
            return (double)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_get_type()
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_get_type$descriptor() {
        return gtk_app_chooser_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_get_type()
     * }
     */
    public static MethodHandle gtk_app_chooser_get_type$handle() {
        return gtk_app_chooser_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_get_type()
     * }
     */
    public static long gtk_app_chooser_get_type() {
        var mh$ = gtk_app_chooser_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_get_app_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_get_app_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *gtk_app_chooser_get_app_info(GtkAppChooser *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_get_app_info$descriptor() {
        return gtk_app_chooser_get_app_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *gtk_app_chooser_get_app_info(GtkAppChooser *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_get_app_info$handle() {
        return gtk_app_chooser_get_app_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *gtk_app_chooser_get_app_info(GtkAppChooser *self)
     * }
     */
    public static MemorySegment gtk_app_chooser_get_app_info(MemorySegment self) {
        var mh$ = gtk_app_chooser_get_app_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_get_app_info", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_get_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_get_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_app_chooser_get_content_type(GtkAppChooser *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_get_content_type$descriptor() {
        return gtk_app_chooser_get_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_app_chooser_get_content_type(GtkAppChooser *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_get_content_type$handle() {
        return gtk_app_chooser_get_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_app_chooser_get_content_type(GtkAppChooser *self)
     * }
     */
    public static MemorySegment gtk_app_chooser_get_content_type(MemorySegment self) {
        var mh$ = gtk_app_chooser_get_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_get_content_type", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_refresh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_refresh"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_refresh(GtkAppChooser *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_refresh$descriptor() {
        return gtk_app_chooser_refresh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_refresh(GtkAppChooser *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_refresh$handle() {
        return gtk_app_chooser_refresh.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_refresh(GtkAppChooser *self)
     * }
     */
    public static void gtk_app_chooser_refresh(MemorySegment self) {
        var mh$ = gtk_app_chooser_refresh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_refresh", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_dialog_get_type$descriptor() {
        return gtk_app_chooser_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_app_chooser_dialog_get_type$handle() {
        return gtk_app_chooser_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_dialog_get_type()
     * }
     */
    public static long gtk_app_chooser_dialog_get_type() {
        var mh$ = gtk_app_chooser_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_dialog_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_dialog_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_new(GtkWindow *parent, GtkDialogFlags flags, GFile *file)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_dialog_new$descriptor() {
        return gtk_app_chooser_dialog_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_new(GtkWindow *parent, GtkDialogFlags flags, GFile *file)
     * }
     */
    public static MethodHandle gtk_app_chooser_dialog_new$handle() {
        return gtk_app_chooser_dialog_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_new(GtkWindow *parent, GtkDialogFlags flags, GFile *file)
     * }
     */
    public static MemorySegment gtk_app_chooser_dialog_new(MemorySegment parent, int flags, MemorySegment file) {
        var mh$ = gtk_app_chooser_dialog_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_dialog_new", parent, flags, file);
            }
            return (MemorySegment)mh$.invokeExact(parent, flags, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_dialog_new_for_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_dialog_new_for_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_new_for_content_type(GtkWindow *parent, GtkDialogFlags flags, const gchar *content_type)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_dialog_new_for_content_type$descriptor() {
        return gtk_app_chooser_dialog_new_for_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_new_for_content_type(GtkWindow *parent, GtkDialogFlags flags, const gchar *content_type)
     * }
     */
    public static MethodHandle gtk_app_chooser_dialog_new_for_content_type$handle() {
        return gtk_app_chooser_dialog_new_for_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_new_for_content_type(GtkWindow *parent, GtkDialogFlags flags, const gchar *content_type)
     * }
     */
    public static MemorySegment gtk_app_chooser_dialog_new_for_content_type(MemorySegment parent, int flags, MemorySegment content_type) {
        var mh$ = gtk_app_chooser_dialog_new_for_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_dialog_new_for_content_type", parent, flags, content_type);
            }
            return (MemorySegment)mh$.invokeExact(parent, flags, content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_dialog_get_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_dialog_get_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_get_widget(GtkAppChooserDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_dialog_get_widget$descriptor() {
        return gtk_app_chooser_dialog_get_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_get_widget(GtkAppChooserDialog *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_dialog_get_widget$handle() {
        return gtk_app_chooser_dialog_get_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_dialog_get_widget(GtkAppChooserDialog *self)
     * }
     */
    public static MemorySegment gtk_app_chooser_dialog_get_widget(MemorySegment self) {
        var mh$ = gtk_app_chooser_dialog_get_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_dialog_get_widget", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_dialog_set_heading {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_dialog_set_heading"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog *self, const gchar *heading)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_dialog_set_heading$descriptor() {
        return gtk_app_chooser_dialog_set_heading.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog *self, const gchar *heading)
     * }
     */
    public static MethodHandle gtk_app_chooser_dialog_set_heading$handle() {
        return gtk_app_chooser_dialog_set_heading.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog *self, const gchar *heading)
     * }
     */
    public static void gtk_app_chooser_dialog_set_heading(MemorySegment self, MemorySegment heading) {
        var mh$ = gtk_app_chooser_dialog_set_heading.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_dialog_set_heading", self, heading);
            }
            mh$.invokeExact(self, heading);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_dialog_get_heading {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_dialog_get_heading"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_dialog_get_heading$descriptor() {
        return gtk_app_chooser_dialog_get_heading.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_dialog_get_heading$handle() {
        return gtk_app_chooser_dialog_get_heading.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog *self)
     * }
     */
    public static MemorySegment gtk_app_chooser_dialog_get_heading(MemorySegment self) {
        var mh$ = gtk_app_chooser_dialog_get_heading.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_dialog_get_heading", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_box_get_type$descriptor() {
        return gtk_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_box_get_type()
     * }
     */
    public static MethodHandle gtk_box_get_type$handle() {
        return gtk_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_box_get_type()
     * }
     */
    public static long gtk_box_get_type() {
        var mh$ = gtk_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_box_new(GtkOrientation orientation, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_box_new$descriptor() {
        return gtk_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_box_new(GtkOrientation orientation, gint spacing)
     * }
     */
    public static MethodHandle gtk_box_new$handle() {
        return gtk_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_box_new(GtkOrientation orientation, gint spacing)
     * }
     */
    public static MemorySegment gtk_box_new(int orientation, int spacing) {
        var mh$ = gtk_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_new", orientation, spacing);
            }
            return (MemorySegment)mh$.invokeExact(orientation, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_pack_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_pack_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_pack_start(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
     * }
     */
    public static FunctionDescriptor gtk_box_pack_start$descriptor() {
        return gtk_box_pack_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_pack_start(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
     * }
     */
    public static MethodHandle gtk_box_pack_start$handle() {
        return gtk_box_pack_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_pack_start(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
     * }
     */
    public static void gtk_box_pack_start(MemorySegment box, MemorySegment child, int expand, int fill, int padding) {
        var mh$ = gtk_box_pack_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_pack_start", box, child, expand, fill, padding);
            }
            mh$.invokeExact(box, child, expand, fill, padding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_pack_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_pack_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_pack_end(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
     * }
     */
    public static FunctionDescriptor gtk_box_pack_end$descriptor() {
        return gtk_box_pack_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_pack_end(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
     * }
     */
    public static MethodHandle gtk_box_pack_end$handle() {
        return gtk_box_pack_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_pack_end(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
     * }
     */
    public static void gtk_box_pack_end(MemorySegment box, MemorySegment child, int expand, int fill, int padding) {
        var mh$ = gtk_box_pack_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_pack_end", box, child, expand, fill, padding);
            }
            mh$.invokeExact(box, child, expand, fill, padding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_set_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_set_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_set_homogeneous(GtkBox *box, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_box_set_homogeneous$descriptor() {
        return gtk_box_set_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_set_homogeneous(GtkBox *box, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_box_set_homogeneous$handle() {
        return gtk_box_set_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_set_homogeneous(GtkBox *box, gboolean homogeneous)
     * }
     */
    public static void gtk_box_set_homogeneous(MemorySegment box, int homogeneous) {
        var mh$ = gtk_box_set_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_set_homogeneous", box, homogeneous);
            }
            mh$.invokeExact(box, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_get_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_get_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_box_get_homogeneous(GtkBox *box)
     * }
     */
    public static FunctionDescriptor gtk_box_get_homogeneous$descriptor() {
        return gtk_box_get_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_box_get_homogeneous(GtkBox *box)
     * }
     */
    public static MethodHandle gtk_box_get_homogeneous$handle() {
        return gtk_box_get_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_box_get_homogeneous(GtkBox *box)
     * }
     */
    public static int gtk_box_get_homogeneous(MemorySegment box) {
        var mh$ = gtk_box_get_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_get_homogeneous", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_set_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_set_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_set_spacing(GtkBox *box, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_box_set_spacing$descriptor() {
        return gtk_box_set_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_set_spacing(GtkBox *box, gint spacing)
     * }
     */
    public static MethodHandle gtk_box_set_spacing$handle() {
        return gtk_box_set_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_set_spacing(GtkBox *box, gint spacing)
     * }
     */
    public static void gtk_box_set_spacing(MemorySegment box, int spacing) {
        var mh$ = gtk_box_set_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_set_spacing", box, spacing);
            }
            mh$.invokeExact(box, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_get_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_get_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_box_get_spacing(GtkBox *box)
     * }
     */
    public static FunctionDescriptor gtk_box_get_spacing$descriptor() {
        return gtk_box_get_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_box_get_spacing(GtkBox *box)
     * }
     */
    public static MethodHandle gtk_box_get_spacing$handle() {
        return gtk_box_get_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_box_get_spacing(GtkBox *box)
     * }
     */
    public static int gtk_box_get_spacing(MemorySegment box) {
        var mh$ = gtk_box_get_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_get_spacing", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_set_baseline_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_set_baseline_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_set_baseline_position(GtkBox *box, GtkBaselinePosition position)
     * }
     */
    public static FunctionDescriptor gtk_box_set_baseline_position$descriptor() {
        return gtk_box_set_baseline_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_set_baseline_position(GtkBox *box, GtkBaselinePosition position)
     * }
     */
    public static MethodHandle gtk_box_set_baseline_position$handle() {
        return gtk_box_set_baseline_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_set_baseline_position(GtkBox *box, GtkBaselinePosition position)
     * }
     */
    public static void gtk_box_set_baseline_position(MemorySegment box, int position) {
        var mh$ = gtk_box_set_baseline_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_set_baseline_position", box, position);
            }
            mh$.invokeExact(box, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_get_baseline_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_get_baseline_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBaselinePosition gtk_box_get_baseline_position(GtkBox *box)
     * }
     */
    public static FunctionDescriptor gtk_box_get_baseline_position$descriptor() {
        return gtk_box_get_baseline_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBaselinePosition gtk_box_get_baseline_position(GtkBox *box)
     * }
     */
    public static MethodHandle gtk_box_get_baseline_position$handle() {
        return gtk_box_get_baseline_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBaselinePosition gtk_box_get_baseline_position(GtkBox *box)
     * }
     */
    public static int gtk_box_get_baseline_position(MemorySegment box) {
        var mh$ = gtk_box_get_baseline_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_get_baseline_position", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_reorder_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_reorder_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_reorder_child(GtkBox *box, GtkWidget *child, gint position)
     * }
     */
    public static FunctionDescriptor gtk_box_reorder_child$descriptor() {
        return gtk_box_reorder_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_reorder_child(GtkBox *box, GtkWidget *child, gint position)
     * }
     */
    public static MethodHandle gtk_box_reorder_child$handle() {
        return gtk_box_reorder_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_reorder_child(GtkBox *box, GtkWidget *child, gint position)
     * }
     */
    public static void gtk_box_reorder_child(MemorySegment box, MemorySegment child, int position) {
        var mh$ = gtk_box_reorder_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_reorder_child", box, child, position);
            }
            mh$.invokeExact(box, child, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_query_child_packing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_query_child_packing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_query_child_packing(GtkBox *box, GtkWidget *child, gboolean *expand, gboolean *fill, guint *padding, GtkPackType *pack_type)
     * }
     */
    public static FunctionDescriptor gtk_box_query_child_packing$descriptor() {
        return gtk_box_query_child_packing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_query_child_packing(GtkBox *box, GtkWidget *child, gboolean *expand, gboolean *fill, guint *padding, GtkPackType *pack_type)
     * }
     */
    public static MethodHandle gtk_box_query_child_packing$handle() {
        return gtk_box_query_child_packing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_query_child_packing(GtkBox *box, GtkWidget *child, gboolean *expand, gboolean *fill, guint *padding, GtkPackType *pack_type)
     * }
     */
    public static void gtk_box_query_child_packing(MemorySegment box, MemorySegment child, MemorySegment expand, MemorySegment fill, MemorySegment padding, MemorySegment pack_type) {
        var mh$ = gtk_box_query_child_packing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_query_child_packing", box, child, expand, fill, padding, pack_type);
            }
            mh$.invokeExact(box, child, expand, fill, padding, pack_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_set_child_packing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_set_child_packing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_set_child_packing(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type)
     * }
     */
    public static FunctionDescriptor gtk_box_set_child_packing$descriptor() {
        return gtk_box_set_child_packing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_set_child_packing(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type)
     * }
     */
    public static MethodHandle gtk_box_set_child_packing$handle() {
        return gtk_box_set_child_packing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_set_child_packing(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type)
     * }
     */
    public static void gtk_box_set_child_packing(MemorySegment box, MemorySegment child, int expand, int fill, int padding, int pack_type) {
        var mh$ = gtk_box_set_child_packing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_set_child_packing", box, child, expand, fill, padding, pack_type);
            }
            mh$.invokeExact(box, child, expand, fill, padding, pack_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_set_center_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_set_center_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_box_set_center_widget(GtkBox *box, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_box_set_center_widget$descriptor() {
        return gtk_box_set_center_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_box_set_center_widget(GtkBox *box, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_box_set_center_widget$handle() {
        return gtk_box_set_center_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_box_set_center_widget(GtkBox *box, GtkWidget *widget)
     * }
     */
    public static void gtk_box_set_center_widget(MemorySegment box, MemorySegment widget) {
        var mh$ = gtk_box_set_center_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_set_center_widget", box, widget);
            }
            mh$.invokeExact(box, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_box_get_center_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_box_get_center_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_box_get_center_widget(GtkBox *box)
     * }
     */
    public static FunctionDescriptor gtk_box_get_center_widget$descriptor() {
        return gtk_box_get_center_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_box_get_center_widget(GtkBox *box)
     * }
     */
    public static MethodHandle gtk_box_get_center_widget$handle() {
        return gtk_box_get_center_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_box_get_center_widget(GtkBox *box)
     * }
     */
    public static MemorySegment gtk_box_get_center_widget(MemorySegment box) {
        var mh$ = gtk_box_get_center_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_box_get_center_widget", box);
            }
            return (MemorySegment)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_widget_get_type()
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_get_type$descriptor() {
        return gtk_app_chooser_widget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_widget_get_type()
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_get_type$handle() {
        return gtk_app_chooser_widget_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_widget_get_type()
     * }
     */
    public static long gtk_app_chooser_widget_get_type() {
        var mh$ = gtk_app_chooser_widget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_widget_new(const gchar *content_type)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_new$descriptor() {
        return gtk_app_chooser_widget_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_widget_new(const gchar *content_type)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_new$handle() {
        return gtk_app_chooser_widget_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_widget_new(const gchar *content_type)
     * }
     */
    public static MemorySegment gtk_app_chooser_widget_new(MemorySegment content_type) {
        var mh$ = gtk_app_chooser_widget_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_new", content_type);
            }
            return (MemorySegment)mh$.invokeExact(content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_set_show_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_set_show_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_default(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_set_show_default$descriptor() {
        return gtk_app_chooser_widget_set_show_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_default(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_set_show_default$handle() {
        return gtk_app_chooser_widget_set_show_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_default(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static void gtk_app_chooser_widget_set_show_default(MemorySegment self, int setting) {
        var mh$ = gtk_app_chooser_widget_set_show_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_set_show_default", self, setting);
            }
            mh$.invokeExact(self, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_get_show_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_get_show_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_default(GtkAppChooserWidget *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_get_show_default$descriptor() {
        return gtk_app_chooser_widget_get_show_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_default(GtkAppChooserWidget *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_get_show_default$handle() {
        return gtk_app_chooser_widget_get_show_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_default(GtkAppChooserWidget *self)
     * }
     */
    public static int gtk_app_chooser_widget_get_show_default(MemorySegment self) {
        var mh$ = gtk_app_chooser_widget_get_show_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_get_show_default", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_set_show_recommended {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_set_show_recommended"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_recommended(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_set_show_recommended$descriptor() {
        return gtk_app_chooser_widget_set_show_recommended.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_recommended(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_set_show_recommended$handle() {
        return gtk_app_chooser_widget_set_show_recommended.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_recommended(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static void gtk_app_chooser_widget_set_show_recommended(MemorySegment self, int setting) {
        var mh$ = gtk_app_chooser_widget_set_show_recommended.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_set_show_recommended", self, setting);
            }
            mh$.invokeExact(self, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_get_show_recommended {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_get_show_recommended"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_recommended(GtkAppChooserWidget *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_get_show_recommended$descriptor() {
        return gtk_app_chooser_widget_get_show_recommended.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_recommended(GtkAppChooserWidget *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_get_show_recommended$handle() {
        return gtk_app_chooser_widget_get_show_recommended.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_recommended(GtkAppChooserWidget *self)
     * }
     */
    public static int gtk_app_chooser_widget_get_show_recommended(MemorySegment self) {
        var mh$ = gtk_app_chooser_widget_get_show_recommended.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_get_show_recommended", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_set_show_fallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_set_show_fallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_fallback(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_set_show_fallback$descriptor() {
        return gtk_app_chooser_widget_set_show_fallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_fallback(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_set_show_fallback$handle() {
        return gtk_app_chooser_widget_set_show_fallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_fallback(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static void gtk_app_chooser_widget_set_show_fallback(MemorySegment self, int setting) {
        var mh$ = gtk_app_chooser_widget_set_show_fallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_set_show_fallback", self, setting);
            }
            mh$.invokeExact(self, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_get_show_fallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_get_show_fallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_fallback(GtkAppChooserWidget *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_get_show_fallback$descriptor() {
        return gtk_app_chooser_widget_get_show_fallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_fallback(GtkAppChooserWidget *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_get_show_fallback$handle() {
        return gtk_app_chooser_widget_get_show_fallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_fallback(GtkAppChooserWidget *self)
     * }
     */
    public static int gtk_app_chooser_widget_get_show_fallback(MemorySegment self) {
        var mh$ = gtk_app_chooser_widget_get_show_fallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_get_show_fallback", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_set_show_other {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_set_show_other"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_other(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_set_show_other$descriptor() {
        return gtk_app_chooser_widget_set_show_other.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_other(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_set_show_other$handle() {
        return gtk_app_chooser_widget_set_show_other.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_other(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static void gtk_app_chooser_widget_set_show_other(MemorySegment self, int setting) {
        var mh$ = gtk_app_chooser_widget_set_show_other.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_set_show_other", self, setting);
            }
            mh$.invokeExact(self, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_get_show_other {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_get_show_other"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_other(GtkAppChooserWidget *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_get_show_other$descriptor() {
        return gtk_app_chooser_widget_get_show_other.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_other(GtkAppChooserWidget *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_get_show_other$handle() {
        return gtk_app_chooser_widget_get_show_other.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_other(GtkAppChooserWidget *self)
     * }
     */
    public static int gtk_app_chooser_widget_get_show_other(MemorySegment self) {
        var mh$ = gtk_app_chooser_widget_get_show_other.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_get_show_other", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_set_show_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_set_show_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_all(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_set_show_all$descriptor() {
        return gtk_app_chooser_widget_set_show_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_all(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_set_show_all$handle() {
        return gtk_app_chooser_widget_set_show_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_show_all(GtkAppChooserWidget *self, gboolean setting)
     * }
     */
    public static void gtk_app_chooser_widget_set_show_all(MemorySegment self, int setting) {
        var mh$ = gtk_app_chooser_widget_set_show_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_set_show_all", self, setting);
            }
            mh$.invokeExact(self, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_get_show_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_get_show_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_all(GtkAppChooserWidget *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_get_show_all$descriptor() {
        return gtk_app_chooser_widget_get_show_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_all(GtkAppChooserWidget *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_get_show_all$handle() {
        return gtk_app_chooser_widget_get_show_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_widget_get_show_all(GtkAppChooserWidget *self)
     * }
     */
    public static int gtk_app_chooser_widget_get_show_all(MemorySegment self) {
        var mh$ = gtk_app_chooser_widget_get_show_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_get_show_all", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_set_default_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_set_default_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget *self, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_set_default_text$descriptor() {
        return gtk_app_chooser_widget_set_default_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget *self, const gchar *text)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_set_default_text$handle() {
        return gtk_app_chooser_widget_set_default_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget *self, const gchar *text)
     * }
     */
    public static void gtk_app_chooser_widget_set_default_text(MemorySegment self, MemorySegment text) {
        var mh$ = gtk_app_chooser_widget_set_default_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_set_default_text", self, text);
            }
            mh$.invokeExact(self, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_widget_get_default_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_widget_get_default_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_widget_get_default_text$descriptor() {
        return gtk_app_chooser_widget_get_default_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_widget_get_default_text$handle() {
        return gtk_app_chooser_widget_get_default_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget *self)
     * }
     */
    public static MemorySegment gtk_app_chooser_widget_get_default_text(MemorySegment self) {
        var mh$ = gtk_app_chooser_widget_get_default_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_widget_get_default_text", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TREE_MODEL_ITERS_PERSIST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_MODEL_ITERS_PERSIST = 1
     * }
     */
    public static int GTK_TREE_MODEL_ITERS_PERSIST() {
        return GTK_TREE_MODEL_ITERS_PERSIST;
    }
    private static final int GTK_TREE_MODEL_LIST_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_MODEL_LIST_ONLY = 2
     * }
     */
    public static int GTK_TREE_MODEL_LIST_ONLY() {
        return GTK_TREE_MODEL_LIST_ONLY;
    }

    private static class gtk_tree_path_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new()
     * }
     */
    public static FunctionDescriptor gtk_tree_path_new$descriptor() {
        return gtk_tree_path_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new()
     * }
     */
    public static MethodHandle gtk_tree_path_new$handle() {
        return gtk_tree_path_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new()
     * }
     */
    public static MemorySegment gtk_tree_path_new() {
        var mh$ = gtk_tree_path_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_new_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_from_string(const gchar *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_new_from_string$descriptor() {
        return gtk_tree_path_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_from_string(const gchar *path)
     * }
     */
    public static MethodHandle gtk_tree_path_new_from_string$handle() {
        return gtk_tree_path_new_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_from_string(const gchar *path)
     * }
     */
    public static MemorySegment gtk_tree_path_new_from_string(MemorySegment path) {
        var mh$ = gtk_tree_path_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_new_from_string", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_from_indices(gint first_index, ...)
     * }
     */
    public static class gtk_tree_path_new_from_indices {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_path_new_from_indices");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_path_new_from_indices(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkTreePath *gtk_tree_path_new_from_indices(gint first_index, ...)
         * }
         */
        public static gtk_tree_path_new_from_indices makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_path_new_from_indices(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int first_index, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_path_new_from_indices", first_index, x1);
                }
                return (MemorySegment)spreader.invokeExact(first_index, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_path_new_from_indicesv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_new_from_indicesv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_from_indicesv(gint *indices, gsize length)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_new_from_indicesv$descriptor() {
        return gtk_tree_path_new_from_indicesv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_from_indicesv(gint *indices, gsize length)
     * }
     */
    public static MethodHandle gtk_tree_path_new_from_indicesv$handle() {
        return gtk_tree_path_new_from_indicesv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_from_indicesv(gint *indices, gsize length)
     * }
     */
    public static MemorySegment gtk_tree_path_new_from_indicesv(MemorySegment indices, long length) {
        var mh$ = gtk_tree_path_new_from_indicesv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_new_from_indicesv", indices, length);
            }
            return (MemorySegment)mh$.invokeExact(indices, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_tree_path_to_string(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_to_string$descriptor() {
        return gtk_tree_path_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_tree_path_to_string(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_to_string$handle() {
        return gtk_tree_path_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_tree_path_to_string(GtkTreePath *path)
     * }
     */
    public static MemorySegment gtk_tree_path_to_string(MemorySegment path) {
        var mh$ = gtk_tree_path_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_to_string", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_new_first {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_new_first"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_first()
     * }
     */
    public static FunctionDescriptor gtk_tree_path_new_first$descriptor() {
        return gtk_tree_path_new_first.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_first()
     * }
     */
    public static MethodHandle gtk_tree_path_new_first$handle() {
        return gtk_tree_path_new_first.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_new_first()
     * }
     */
    public static MemorySegment gtk_tree_path_new_first() {
        var mh$ = gtk_tree_path_new_first.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_new_first");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_append_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_append_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_append_index(GtkTreePath *path, gint index_)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_append_index$descriptor() {
        return gtk_tree_path_append_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_append_index(GtkTreePath *path, gint index_)
     * }
     */
    public static MethodHandle gtk_tree_path_append_index$handle() {
        return gtk_tree_path_append_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_path_append_index(GtkTreePath *path, gint index_)
     * }
     */
    public static void gtk_tree_path_append_index(MemorySegment path, int index_) {
        var mh$ = gtk_tree_path_append_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_append_index", path, index_);
            }
            mh$.invokeExact(path, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_prepend_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_prepend_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_prepend_index(GtkTreePath *path, gint index_)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_prepend_index$descriptor() {
        return gtk_tree_path_prepend_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_prepend_index(GtkTreePath *path, gint index_)
     * }
     */
    public static MethodHandle gtk_tree_path_prepend_index$handle() {
        return gtk_tree_path_prepend_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_path_prepend_index(GtkTreePath *path, gint index_)
     * }
     */
    public static void gtk_tree_path_prepend_index(MemorySegment path, int index_) {
        var mh$ = gtk_tree_path_prepend_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_prepend_index", path, index_);
            }
            mh$.invokeExact(path, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_get_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_get_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_path_get_depth(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_get_depth$descriptor() {
        return gtk_tree_path_get_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_path_get_depth(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_get_depth$handle() {
        return gtk_tree_path_get_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_path_get_depth(GtkTreePath *path)
     * }
     */
    public static int gtk_tree_path_get_depth(MemorySegment path) {
        var mh$ = gtk_tree_path_get_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_get_depth", path);
            }
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_get_indices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_get_indices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint *gtk_tree_path_get_indices(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_get_indices$descriptor() {
        return gtk_tree_path_get_indices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint *gtk_tree_path_get_indices(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_get_indices$handle() {
        return gtk_tree_path_get_indices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint *gtk_tree_path_get_indices(GtkTreePath *path)
     * }
     */
    public static MemorySegment gtk_tree_path_get_indices(MemorySegment path) {
        var mh$ = gtk_tree_path_get_indices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_get_indices", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_get_indices_with_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_get_indices_with_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint *gtk_tree_path_get_indices_with_depth(GtkTreePath *path, gint *depth)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_get_indices_with_depth$descriptor() {
        return gtk_tree_path_get_indices_with_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint *gtk_tree_path_get_indices_with_depth(GtkTreePath *path, gint *depth)
     * }
     */
    public static MethodHandle gtk_tree_path_get_indices_with_depth$handle() {
        return gtk_tree_path_get_indices_with_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint *gtk_tree_path_get_indices_with_depth(GtkTreePath *path, gint *depth)
     * }
     */
    public static MemorySegment gtk_tree_path_get_indices_with_depth(MemorySegment path, MemorySegment depth) {
        var mh$ = gtk_tree_path_get_indices_with_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_get_indices_with_depth", path, depth);
            }
            return (MemorySegment)mh$.invokeExact(path, depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_free(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_free$descriptor() {
        return gtk_tree_path_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_free(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_free$handle() {
        return gtk_tree_path_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_path_free(GtkTreePath *path)
     * }
     */
    public static void gtk_tree_path_free(MemorySegment path) {
        var mh$ = gtk_tree_path_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_free", path);
            }
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_copy(const GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_copy$descriptor() {
        return gtk_tree_path_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_copy(const GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_copy$handle() {
        return gtk_tree_path_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_path_copy(const GtkTreePath *path)
     * }
     */
    public static MemorySegment gtk_tree_path_copy(MemorySegment path) {
        var mh$ = gtk_tree_path_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_copy", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_path_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_path_get_type$descriptor() {
        return gtk_tree_path_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_path_get_type()
     * }
     */
    public static MethodHandle gtk_tree_path_get_type$handle() {
        return gtk_tree_path_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_path_get_type()
     * }
     */
    public static long gtk_tree_path_get_type() {
        var mh$ = gtk_tree_path_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_path_compare(const GtkTreePath *a, const GtkTreePath *b)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_compare$descriptor() {
        return gtk_tree_path_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_path_compare(const GtkTreePath *a, const GtkTreePath *b)
     * }
     */
    public static MethodHandle gtk_tree_path_compare$handle() {
        return gtk_tree_path_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_path_compare(const GtkTreePath *a, const GtkTreePath *b)
     * }
     */
    public static int gtk_tree_path_compare(MemorySegment a, MemorySegment b) {
        var mh$ = gtk_tree_path_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_compare", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_next(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_next$descriptor() {
        return gtk_tree_path_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_next(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_next$handle() {
        return gtk_tree_path_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_path_next(GtkTreePath *path)
     * }
     */
    public static void gtk_tree_path_next(MemorySegment path) {
        var mh$ = gtk_tree_path_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_next", path);
            }
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_prev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_prev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_prev(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_prev$descriptor() {
        return gtk_tree_path_prev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_prev(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_prev$handle() {
        return gtk_tree_path_prev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_prev(GtkTreePath *path)
     * }
     */
    public static int gtk_tree_path_prev(MemorySegment path) {
        var mh$ = gtk_tree_path_prev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_prev", path);
            }
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_up {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_up"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_up(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_up$descriptor() {
        return gtk_tree_path_up.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_up(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_up$handle() {
        return gtk_tree_path_up.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_up(GtkTreePath *path)
     * }
     */
    public static int gtk_tree_path_up(MemorySegment path) {
        var mh$ = gtk_tree_path_up.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_up", path);
            }
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_down {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_down"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_down(GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_down$descriptor() {
        return gtk_tree_path_down.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_path_down(GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_path_down$handle() {
        return gtk_tree_path_down.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_path_down(GtkTreePath *path)
     * }
     */
    public static void gtk_tree_path_down(MemorySegment path) {
        var mh$ = gtk_tree_path_down.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_down", path);
            }
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_is_ancestor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_is_ancestor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_is_ancestor(GtkTreePath *path, GtkTreePath *descendant)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_is_ancestor$descriptor() {
        return gtk_tree_path_is_ancestor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_is_ancestor(GtkTreePath *path, GtkTreePath *descendant)
     * }
     */
    public static MethodHandle gtk_tree_path_is_ancestor$handle() {
        return gtk_tree_path_is_ancestor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_is_ancestor(GtkTreePath *path, GtkTreePath *descendant)
     * }
     */
    public static int gtk_tree_path_is_ancestor(MemorySegment path, MemorySegment descendant) {
        var mh$ = gtk_tree_path_is_ancestor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_is_ancestor", path, descendant);
            }
            return (int)mh$.invokeExact(path, descendant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_path_is_descendant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_path_is_descendant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_is_descendant(GtkTreePath *path, GtkTreePath *ancestor)
     * }
     */
    public static FunctionDescriptor gtk_tree_path_is_descendant$descriptor() {
        return gtk_tree_path_is_descendant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_is_descendant(GtkTreePath *path, GtkTreePath *ancestor)
     * }
     */
    public static MethodHandle gtk_tree_path_is_descendant$handle() {
        return gtk_tree_path_is_descendant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_path_is_descendant(GtkTreePath *path, GtkTreePath *ancestor)
     * }
     */
    public static int gtk_tree_path_is_descendant(MemorySegment path, MemorySegment ancestor) {
        var mh$ = gtk_tree_path_is_descendant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_path_is_descendant", path, ancestor);
            }
            return (int)mh$.invokeExact(path, ancestor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_row_reference_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_get_type$descriptor() {
        return gtk_tree_row_reference_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_row_reference_get_type()
     * }
     */
    public static MethodHandle gtk_tree_row_reference_get_type$handle() {
        return gtk_tree_row_reference_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_row_reference_get_type()
     * }
     */
    public static long gtk_tree_row_reference_get_type() {
        var mh$ = gtk_tree_row_reference_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_new(GtkTreeModel *model, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_new$descriptor() {
        return gtk_tree_row_reference_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_new(GtkTreeModel *model, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_new$handle() {
        return gtk_tree_row_reference_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_new(GtkTreeModel *model, GtkTreePath *path)
     * }
     */
    public static MemorySegment gtk_tree_row_reference_new(MemorySegment model, MemorySegment path) {
        var mh$ = gtk_tree_row_reference_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_new", model, path);
            }
            return (MemorySegment)mh$.invokeExact(model, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_new_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_new_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_new_proxy(GObject *proxy, GtkTreeModel *model, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_new_proxy$descriptor() {
        return gtk_tree_row_reference_new_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_new_proxy(GObject *proxy, GtkTreeModel *model, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_new_proxy$handle() {
        return gtk_tree_row_reference_new_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_new_proxy(GObject *proxy, GtkTreeModel *model, GtkTreePath *path)
     * }
     */
    public static MemorySegment gtk_tree_row_reference_new_proxy(MemorySegment proxy, MemorySegment model, MemorySegment path) {
        var mh$ = gtk_tree_row_reference_new_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_new_proxy", proxy, model, path);
            }
            return (MemorySegment)mh$.invokeExact(proxy, model, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_row_reference_get_path(GtkTreeRowReference *reference)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_get_path$descriptor() {
        return gtk_tree_row_reference_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_row_reference_get_path(GtkTreeRowReference *reference)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_get_path$handle() {
        return gtk_tree_row_reference_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_row_reference_get_path(GtkTreeRowReference *reference)
     * }
     */
    public static MemorySegment gtk_tree_row_reference_get_path(MemorySegment reference) {
        var mh$ = gtk_tree_row_reference_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_get_path", reference);
            }
            return (MemorySegment)mh$.invokeExact(reference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_row_reference_get_model(GtkTreeRowReference *reference)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_get_model$descriptor() {
        return gtk_tree_row_reference_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_row_reference_get_model(GtkTreeRowReference *reference)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_get_model$handle() {
        return gtk_tree_row_reference_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_row_reference_get_model(GtkTreeRowReference *reference)
     * }
     */
    public static MemorySegment gtk_tree_row_reference_get_model(MemorySegment reference) {
        var mh$ = gtk_tree_row_reference_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_get_model", reference);
            }
            return (MemorySegment)mh$.invokeExact(reference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_row_reference_valid(GtkTreeRowReference *reference)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_valid$descriptor() {
        return gtk_tree_row_reference_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_row_reference_valid(GtkTreeRowReference *reference)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_valid$handle() {
        return gtk_tree_row_reference_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_row_reference_valid(GtkTreeRowReference *reference)
     * }
     */
    public static int gtk_tree_row_reference_valid(MemorySegment reference) {
        var mh$ = gtk_tree_row_reference_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_valid", reference);
            }
            return (int)mh$.invokeExact(reference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_copy(GtkTreeRowReference *reference)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_copy$descriptor() {
        return gtk_tree_row_reference_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_copy(GtkTreeRowReference *reference)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_copy$handle() {
        return gtk_tree_row_reference_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeRowReference *gtk_tree_row_reference_copy(GtkTreeRowReference *reference)
     * }
     */
    public static MemorySegment gtk_tree_row_reference_copy(MemorySegment reference) {
        var mh$ = gtk_tree_row_reference_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_copy", reference);
            }
            return (MemorySegment)mh$.invokeExact(reference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_free(GtkTreeRowReference *reference)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_free$descriptor() {
        return gtk_tree_row_reference_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_free(GtkTreeRowReference *reference)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_free$handle() {
        return gtk_tree_row_reference_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_free(GtkTreeRowReference *reference)
     * }
     */
    public static void gtk_tree_row_reference_free(MemorySegment reference) {
        var mh$ = gtk_tree_row_reference_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_free", reference);
            }
            mh$.invokeExact(reference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_inserted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_inserted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_inserted(GObject *proxy, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_inserted$descriptor() {
        return gtk_tree_row_reference_inserted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_inserted(GObject *proxy, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_inserted$handle() {
        return gtk_tree_row_reference_inserted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_inserted(GObject *proxy, GtkTreePath *path)
     * }
     */
    public static void gtk_tree_row_reference_inserted(MemorySegment proxy, MemorySegment path) {
        var mh$ = gtk_tree_row_reference_inserted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_inserted", proxy, path);
            }
            mh$.invokeExact(proxy, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_deleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_deleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_deleted(GObject *proxy, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_deleted$descriptor() {
        return gtk_tree_row_reference_deleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_deleted(GObject *proxy, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_deleted$handle() {
        return gtk_tree_row_reference_deleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_deleted(GObject *proxy, GtkTreePath *path)
     * }
     */
    public static void gtk_tree_row_reference_deleted(MemorySegment proxy, MemorySegment path) {
        var mh$ = gtk_tree_row_reference_deleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_deleted", proxy, path);
            }
            mh$.invokeExact(proxy, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_row_reference_reordered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_row_reference_reordered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_reordered(GObject *proxy, GtkTreePath *path, GtkTreeIter *iter, gint *new_order)
     * }
     */
    public static FunctionDescriptor gtk_tree_row_reference_reordered$descriptor() {
        return gtk_tree_row_reference_reordered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_reordered(GObject *proxy, GtkTreePath *path, GtkTreeIter *iter, gint *new_order)
     * }
     */
    public static MethodHandle gtk_tree_row_reference_reordered$handle() {
        return gtk_tree_row_reference_reordered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_row_reference_reordered(GObject *proxy, GtkTreePath *path, GtkTreeIter *iter, gint *new_order)
     * }
     */
    public static void gtk_tree_row_reference_reordered(MemorySegment proxy, MemorySegment path, MemorySegment iter, MemorySegment new_order) {
        var mh$ = gtk_tree_row_reference_reordered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_row_reference_reordered", proxy, path, iter, new_order);
            }
            mh$.invokeExact(proxy, path, iter, new_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_iter_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_iter_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeIter *gtk_tree_iter_copy(GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_iter_copy$descriptor() {
        return gtk_tree_iter_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeIter *gtk_tree_iter_copy(GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_iter_copy$handle() {
        return gtk_tree_iter_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeIter *gtk_tree_iter_copy(GtkTreeIter *iter)
     * }
     */
    public static MemorySegment gtk_tree_iter_copy(MemorySegment iter) {
        var mh$ = gtk_tree_iter_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_iter_copy", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_iter_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_iter_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_iter_free(GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_iter_free$descriptor() {
        return gtk_tree_iter_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_iter_free(GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_iter_free$handle() {
        return gtk_tree_iter_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_iter_free(GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_iter_free(MemorySegment iter) {
        var mh$ = gtk_tree_iter_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_iter_free", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_iter_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_iter_get_type$descriptor() {
        return gtk_tree_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_iter_get_type()
     * }
     */
    public static MethodHandle gtk_tree_iter_get_type$handle() {
        return gtk_tree_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_iter_get_type()
     * }
     */
    public static long gtk_tree_iter_get_type() {
        var mh$ = gtk_tree_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_type$descriptor() {
        return gtk_tree_model_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_get_type()
     * }
     */
    public static MethodHandle gtk_tree_model_get_type$handle() {
        return gtk_tree_model_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_model_get_type()
     * }
     */
    public static long gtk_tree_model_get_type() {
        var mh$ = gtk_tree_model_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModelFlags gtk_tree_model_get_flags(GtkTreeModel *tree_model)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_flags$descriptor() {
        return gtk_tree_model_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModelFlags gtk_tree_model_get_flags(GtkTreeModel *tree_model)
     * }
     */
    public static MethodHandle gtk_tree_model_get_flags$handle() {
        return gtk_tree_model_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModelFlags gtk_tree_model_get_flags(GtkTreeModel *tree_model)
     * }
     */
    public static int gtk_tree_model_get_flags(MemorySegment tree_model) {
        var mh$ = gtk_tree_model_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_flags", tree_model);
            }
            return (int)mh$.invokeExact(tree_model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_n_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_n_columns"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_model_get_n_columns(GtkTreeModel *tree_model)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_n_columns$descriptor() {
        return gtk_tree_model_get_n_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_model_get_n_columns(GtkTreeModel *tree_model)
     * }
     */
    public static MethodHandle gtk_tree_model_get_n_columns$handle() {
        return gtk_tree_model_get_n_columns.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_model_get_n_columns(GtkTreeModel *tree_model)
     * }
     */
    public static int gtk_tree_model_get_n_columns(MemorySegment tree_model) {
        var mh$ = gtk_tree_model_get_n_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_n_columns", tree_model);
            }
            return (int)mh$.invokeExact(tree_model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_column_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_column_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_get_column_type(GtkTreeModel *tree_model, gint index_)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_column_type$descriptor() {
        return gtk_tree_model_get_column_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_get_column_type(GtkTreeModel *tree_model, gint index_)
     * }
     */
    public static MethodHandle gtk_tree_model_get_column_type$handle() {
        return gtk_tree_model_get_column_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_model_get_column_type(GtkTreeModel *tree_model, gint index_)
     * }
     */
    public static long gtk_tree_model_get_column_type(MemorySegment tree_model, int index_) {
        var mh$ = gtk_tree_model_get_column_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_column_type", tree_model, index_);
            }
            return (long)mh$.invokeExact(tree_model, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_iter$descriptor() {
        return gtk_tree_model_get_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_model_get_iter$handle() {
        return gtk_tree_model_get_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreePath *path)
     * }
     */
    public static int gtk_tree_model_get_iter(MemorySegment tree_model, MemorySegment iter, MemorySegment path) {
        var mh$ = gtk_tree_model_get_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_iter", tree_model, iter, path);
            }
            return (int)mh$.invokeExact(tree_model, iter, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_iter_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_iter_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter_from_string(GtkTreeModel *tree_model, GtkTreeIter *iter, const gchar *path_string)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_iter_from_string$descriptor() {
        return gtk_tree_model_get_iter_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter_from_string(GtkTreeModel *tree_model, GtkTreeIter *iter, const gchar *path_string)
     * }
     */
    public static MethodHandle gtk_tree_model_get_iter_from_string$handle() {
        return gtk_tree_model_get_iter_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter_from_string(GtkTreeModel *tree_model, GtkTreeIter *iter, const gchar *path_string)
     * }
     */
    public static int gtk_tree_model_get_iter_from_string(MemorySegment tree_model, MemorySegment iter, MemorySegment path_string) {
        var mh$ = gtk_tree_model_get_iter_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_iter_from_string", tree_model, iter, path_string);
            }
            return (int)mh$.invokeExact(tree_model, iter, path_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_string_from_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_string_from_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_tree_model_get_string_from_iter(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_string_from_iter$descriptor() {
        return gtk_tree_model_get_string_from_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_tree_model_get_string_from_iter(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_get_string_from_iter$handle() {
        return gtk_tree_model_get_string_from_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_tree_model_get_string_from_iter(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MemorySegment gtk_tree_model_get_string_from_iter(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_get_string_from_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_string_from_iter", tree_model, iter);
            }
            return (MemorySegment)mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_iter_first {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_iter_first"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter_first(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_iter_first$descriptor() {
        return gtk_tree_model_get_iter_first.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter_first(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_get_iter_first$handle() {
        return gtk_tree_model_get_iter_first.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_get_iter_first(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_model_get_iter_first(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_get_iter_first.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_iter_first", tree_model, iter);
            }
            return (int)mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_get_path(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_path$descriptor() {
        return gtk_tree_model_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_get_path(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_get_path$handle() {
        return gtk_tree_model_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_get_path(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MemorySegment gtk_tree_model_get_path(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_path", tree_model, iter);
            }
            return (MemorySegment)mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_get_value(GtkTreeModel *tree_model, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_get_value$descriptor() {
        return gtk_tree_model_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_get_value(GtkTreeModel *tree_model, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static MethodHandle gtk_tree_model_get_value$handle() {
        return gtk_tree_model_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_get_value(GtkTreeModel *tree_model, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static void gtk_tree_model_get_value(MemorySegment tree_model, MemorySegment iter, int column, MemorySegment value) {
        var mh$ = gtk_tree_model_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_get_value", tree_model, iter, column, value);
            }
            mh$.invokeExact(tree_model, iter, column, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_iter_previous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_iter_previous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_previous(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_iter_previous$descriptor() {
        return gtk_tree_model_iter_previous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_previous(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_iter_previous$handle() {
        return gtk_tree_model_iter_previous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_previous(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_model_iter_previous(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_iter_previous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_iter_previous", tree_model, iter);
            }
            return (int)mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_iter_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_iter_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_next(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_iter_next$descriptor() {
        return gtk_tree_model_iter_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_next(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_iter_next$handle() {
        return gtk_tree_model_iter_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_next(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_model_iter_next(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_iter_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_iter_next", tree_model, iter);
            }
            return (int)mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_iter_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_iter_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_children(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_iter_children$descriptor() {
        return gtk_tree_model_iter_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_children(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static MethodHandle gtk_tree_model_iter_children$handle() {
        return gtk_tree_model_iter_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_children(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent)
     * }
     */
    public static int gtk_tree_model_iter_children(MemorySegment tree_model, MemorySegment iter, MemorySegment parent) {
        var mh$ = gtk_tree_model_iter_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_iter_children", tree_model, iter, parent);
            }
            return (int)mh$.invokeExact(tree_model, iter, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_iter_has_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_iter_has_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_has_child(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_iter_has_child$descriptor() {
        return gtk_tree_model_iter_has_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_has_child(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_iter_has_child$handle() {
        return gtk_tree_model_iter_has_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_has_child(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_model_iter_has_child(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_iter_has_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_iter_has_child", tree_model, iter);
            }
            return (int)mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_iter_n_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_iter_n_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_model_iter_n_children(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_iter_n_children$descriptor() {
        return gtk_tree_model_iter_n_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_model_iter_n_children(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_iter_n_children$handle() {
        return gtk_tree_model_iter_n_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_model_iter_n_children(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_model_iter_n_children(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_iter_n_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_iter_n_children", tree_model, iter);
            }
            return (int)mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_iter_nth_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_iter_nth_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_nth_child(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent, gint n)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_iter_nth_child$descriptor() {
        return gtk_tree_model_iter_nth_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_nth_child(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent, gint n)
     * }
     */
    public static MethodHandle gtk_tree_model_iter_nth_child$handle() {
        return gtk_tree_model_iter_nth_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_nth_child(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent, gint n)
     * }
     */
    public static int gtk_tree_model_iter_nth_child(MemorySegment tree_model, MemorySegment iter, MemorySegment parent, int n) {
        var mh$ = gtk_tree_model_iter_nth_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_iter_nth_child", tree_model, iter, parent, n);
            }
            return (int)mh$.invokeExact(tree_model, iter, parent, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_iter_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_iter_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_parent(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *child)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_iter_parent$descriptor() {
        return gtk_tree_model_iter_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_parent(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *child)
     * }
     */
    public static MethodHandle gtk_tree_model_iter_parent$handle() {
        return gtk_tree_model_iter_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_iter_parent(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *child)
     * }
     */
    public static int gtk_tree_model_iter_parent(MemorySegment tree_model, MemorySegment iter, MemorySegment child) {
        var mh$ = gtk_tree_model_iter_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_iter_parent", tree_model, iter, child);
            }
            return (int)mh$.invokeExact(tree_model, iter, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_ref_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_ref_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_ref_node(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_ref_node$descriptor() {
        return gtk_tree_model_ref_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_ref_node(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_ref_node$handle() {
        return gtk_tree_model_ref_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_ref_node(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_model_ref_node(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_ref_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_ref_node", tree_model, iter);
            }
            mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_unref_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_unref_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_unref_node(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_unref_node$descriptor() {
        return gtk_tree_model_unref_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_unref_node(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_unref_node$handle() {
        return gtk_tree_model_unref_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_unref_node(GtkTreeModel *tree_model, GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_model_unref_node(MemorySegment tree_model, MemorySegment iter) {
        var mh$ = gtk_tree_model_unref_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_unref_node", tree_model, iter);
            }
            mh$.invokeExact(tree_model, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_get(GtkTreeModel *tree_model, GtkTreeIter *iter, ...)
     * }
     */
    public static class gtk_tree_model_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_model_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_model_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_tree_model_get(GtkTreeModel *tree_model, GtkTreeIter *iter, ...)
         * }
         */
        public static gtk_tree_model_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_model_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment tree_model, MemorySegment iter, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_model_get", tree_model, iter, x2);
                }
                spreader.invokeExact(tree_model, iter, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_model_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_foreach(GtkTreeModel *model, GtkTreeModelForeachFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_foreach$descriptor() {
        return gtk_tree_model_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_foreach(GtkTreeModel *model, GtkTreeModelForeachFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_tree_model_foreach$handle() {
        return gtk_tree_model_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_foreach(GtkTreeModel *model, GtkTreeModelForeachFunc func, gpointer user_data)
     * }
     */
    public static void gtk_tree_model_foreach(MemorySegment model, MemorySegment func, MemorySegment user_data) {
        var mh$ = gtk_tree_model_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_foreach", model, func, user_data);
            }
            mh$.invokeExact(model, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_row_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_row_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_changed(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_row_changed$descriptor() {
        return gtk_tree_model_row_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_changed(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_row_changed$handle() {
        return gtk_tree_model_row_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_changed(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_model_row_changed(MemorySegment tree_model, MemorySegment path, MemorySegment iter) {
        var mh$ = gtk_tree_model_row_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_row_changed", tree_model, path, iter);
            }
            mh$.invokeExact(tree_model, path, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_row_inserted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_row_inserted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_inserted(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_row_inserted$descriptor() {
        return gtk_tree_model_row_inserted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_inserted(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_row_inserted$handle() {
        return gtk_tree_model_row_inserted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_inserted(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_model_row_inserted(MemorySegment tree_model, MemorySegment path, MemorySegment iter) {
        var mh$ = gtk_tree_model_row_inserted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_row_inserted", tree_model, path, iter);
            }
            mh$.invokeExact(tree_model, path, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_row_has_child_toggled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_row_has_child_toggled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_has_child_toggled(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_row_has_child_toggled$descriptor() {
        return gtk_tree_model_row_has_child_toggled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_has_child_toggled(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_model_row_has_child_toggled$handle() {
        return gtk_tree_model_row_has_child_toggled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_has_child_toggled(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter)
     * }
     */
    public static void gtk_tree_model_row_has_child_toggled(MemorySegment tree_model, MemorySegment path, MemorySegment iter) {
        var mh$ = gtk_tree_model_row_has_child_toggled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_row_has_child_toggled", tree_model, path, iter);
            }
            mh$.invokeExact(tree_model, path, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_row_deleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_row_deleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_deleted(GtkTreeModel *tree_model, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_row_deleted$descriptor() {
        return gtk_tree_model_row_deleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_deleted(GtkTreeModel *tree_model, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_model_row_deleted$handle() {
        return gtk_tree_model_row_deleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_row_deleted(GtkTreeModel *tree_model, GtkTreePath *path)
     * }
     */
    public static void gtk_tree_model_row_deleted(MemorySegment tree_model, MemorySegment path) {
        var mh$ = gtk_tree_model_row_deleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_row_deleted", tree_model, path);
            }
            mh$.invokeExact(tree_model, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_rows_reordered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_rows_reordered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_rows_reordered(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_rows_reordered$descriptor() {
        return gtk_tree_model_rows_reordered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_rows_reordered(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order)
     * }
     */
    public static MethodHandle gtk_tree_model_rows_reordered$handle() {
        return gtk_tree_model_rows_reordered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_rows_reordered(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order)
     * }
     */
    public static void gtk_tree_model_rows_reordered(MemorySegment tree_model, MemorySegment path, MemorySegment iter, MemorySegment new_order) {
        var mh$ = gtk_tree_model_rows_reordered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_rows_reordered", tree_model, path, iter, new_order);
            }
            mh$.invokeExact(tree_model, path, iter, new_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_rows_reordered_with_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_rows_reordered_with_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_rows_reordered_with_length(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order, gint length)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_rows_reordered_with_length$descriptor() {
        return gtk_tree_model_rows_reordered_with_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_rows_reordered_with_length(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order, gint length)
     * }
     */
    public static MethodHandle gtk_tree_model_rows_reordered_with_length$handle() {
        return gtk_tree_model_rows_reordered_with_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_rows_reordered_with_length(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order, gint length)
     * }
     */
    public static void gtk_tree_model_rows_reordered_with_length(MemorySegment tree_model, MemorySegment path, MemorySegment iter, MemorySegment new_order, int length) {
        var mh$ = gtk_tree_model_rows_reordered_with_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_rows_reordered_with_length", tree_model, path, iter, new_order, length);
            }
            mh$.invokeExact(tree_model, path, iter, new_order, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_editable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_editable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_editable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_editable_get_type$descriptor() {
        return gtk_cell_editable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_editable_get_type()
     * }
     */
    public static MethodHandle gtk_cell_editable_get_type$handle() {
        return gtk_cell_editable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_editable_get_type()
     * }
     */
    public static long gtk_cell_editable_get_type() {
        var mh$ = gtk_cell_editable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_editable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_editable_start_editing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_editable_start_editing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_editable_start_editing(GtkCellEditable *cell_editable, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_cell_editable_start_editing$descriptor() {
        return gtk_cell_editable_start_editing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_editable_start_editing(GtkCellEditable *cell_editable, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_cell_editable_start_editing$handle() {
        return gtk_cell_editable_start_editing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_editable_start_editing(GtkCellEditable *cell_editable, GdkEvent *event)
     * }
     */
    public static void gtk_cell_editable_start_editing(MemorySegment cell_editable, MemorySegment event) {
        var mh$ = gtk_cell_editable_start_editing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_editable_start_editing", cell_editable, event);
            }
            mh$.invokeExact(cell_editable, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_editable_editing_done {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_editable_editing_done"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_editable_editing_done(GtkCellEditable *cell_editable)
     * }
     */
    public static FunctionDescriptor gtk_cell_editable_editing_done$descriptor() {
        return gtk_cell_editable_editing_done.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_editable_editing_done(GtkCellEditable *cell_editable)
     * }
     */
    public static MethodHandle gtk_cell_editable_editing_done$handle() {
        return gtk_cell_editable_editing_done.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_editable_editing_done(GtkCellEditable *cell_editable)
     * }
     */
    public static void gtk_cell_editable_editing_done(MemorySegment cell_editable) {
        var mh$ = gtk_cell_editable_editing_done.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_editable_editing_done", cell_editable);
            }
            mh$.invokeExact(cell_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_editable_remove_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_editable_remove_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_editable_remove_widget(GtkCellEditable *cell_editable)
     * }
     */
    public static FunctionDescriptor gtk_cell_editable_remove_widget$descriptor() {
        return gtk_cell_editable_remove_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_editable_remove_widget(GtkCellEditable *cell_editable)
     * }
     */
    public static MethodHandle gtk_cell_editable_remove_widget$handle() {
        return gtk_cell_editable_remove_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_editable_remove_widget(GtkCellEditable *cell_editable)
     * }
     */
    public static void gtk_cell_editable_remove_widget(MemorySegment cell_editable) {
        var mh$ = gtk_cell_editable_remove_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_editable_remove_widget", cell_editable);
            }
            mh$.invokeExact(cell_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_CELL_RENDERER_SELECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_SELECTED = 1
     * }
     */
    public static int GTK_CELL_RENDERER_SELECTED() {
        return GTK_CELL_RENDERER_SELECTED;
    }
    private static final int GTK_CELL_RENDERER_PRELIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_PRELIT = 2
     * }
     */
    public static int GTK_CELL_RENDERER_PRELIT() {
        return GTK_CELL_RENDERER_PRELIT;
    }
    private static final int GTK_CELL_RENDERER_INSENSITIVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_INSENSITIVE = 4
     * }
     */
    public static int GTK_CELL_RENDERER_INSENSITIVE() {
        return GTK_CELL_RENDERER_INSENSITIVE;
    }
    private static final int GTK_CELL_RENDERER_SORTED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_SORTED = 8
     * }
     */
    public static int GTK_CELL_RENDERER_SORTED() {
        return GTK_CELL_RENDERER_SORTED;
    }
    private static final int GTK_CELL_RENDERER_FOCUSED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_FOCUSED = 16
     * }
     */
    public static int GTK_CELL_RENDERER_FOCUSED() {
        return GTK_CELL_RENDERER_FOCUSED;
    }
    private static final int GTK_CELL_RENDERER_EXPANDABLE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_EXPANDABLE = 32
     * }
     */
    public static int GTK_CELL_RENDERER_EXPANDABLE() {
        return GTK_CELL_RENDERER_EXPANDABLE;
    }
    private static final int GTK_CELL_RENDERER_EXPANDED = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_EXPANDED = 64
     * }
     */
    public static int GTK_CELL_RENDERER_EXPANDED() {
        return GTK_CELL_RENDERER_EXPANDED;
    }
    private static final int GTK_CELL_RENDERER_MODE_INERT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_MODE_INERT = 0
     * }
     */
    public static int GTK_CELL_RENDERER_MODE_INERT() {
        return GTK_CELL_RENDERER_MODE_INERT;
    }
    private static final int GTK_CELL_RENDERER_MODE_ACTIVATABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_MODE_ACTIVATABLE = 1
     * }
     */
    public static int GTK_CELL_RENDERER_MODE_ACTIVATABLE() {
        return GTK_CELL_RENDERER_MODE_ACTIVATABLE;
    }
    private static final int GTK_CELL_RENDERER_MODE_EDITABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_MODE_EDITABLE = 2
     * }
     */
    public static int GTK_CELL_RENDERER_MODE_EDITABLE() {
        return GTK_CELL_RENDERER_MODE_EDITABLE;
    }

    private static class gtk_cell_renderer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_type$descriptor() {
        return gtk_cell_renderer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_type$handle() {
        return gtk_cell_renderer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_get_type()
     * }
     */
    public static long gtk_cell_renderer_get_type() {
        var mh$ = gtk_cell_renderer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_request_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_request_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_cell_renderer_get_request_mode(GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_request_mode$descriptor() {
        return gtk_cell_renderer_get_request_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_cell_renderer_get_request_mode(GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_request_mode$handle() {
        return gtk_cell_renderer_get_request_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_cell_renderer_get_request_mode(GtkCellRenderer *cell)
     * }
     */
    public static int gtk_cell_renderer_get_request_mode(MemorySegment cell) {
        var mh$ = gtk_cell_renderer_get_request_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_request_mode", cell);
            }
            return (int)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_preferred_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_preferred_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_width(GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_preferred_width$descriptor() {
        return gtk_cell_renderer_get_preferred_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_width(GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_preferred_width$handle() {
        return gtk_cell_renderer_get_preferred_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_width(GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size)
     * }
     */
    public static void gtk_cell_renderer_get_preferred_width(MemorySegment cell, MemorySegment widget, MemorySegment minimum_size, MemorySegment natural_size) {
        var mh$ = gtk_cell_renderer_get_preferred_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_preferred_width", cell, widget, minimum_size, natural_size);
            }
            mh$.invokeExact(cell, widget, minimum_size, natural_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_preferred_height_for_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_preferred_height_for_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_height_for_width(GtkCellRenderer *cell, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_preferred_height_for_width$descriptor() {
        return gtk_cell_renderer_get_preferred_height_for_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_height_for_width(GtkCellRenderer *cell, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_preferred_height_for_width$handle() {
        return gtk_cell_renderer_get_preferred_height_for_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_height_for_width(GtkCellRenderer *cell, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static void gtk_cell_renderer_get_preferred_height_for_width(MemorySegment cell, MemorySegment widget, int width, MemorySegment minimum_height, MemorySegment natural_height) {
        var mh$ = gtk_cell_renderer_get_preferred_height_for_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_preferred_height_for_width", cell, widget, width, minimum_height, natural_height);
            }
            mh$.invokeExact(cell, widget, width, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_preferred_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_preferred_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_height(GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_preferred_height$descriptor() {
        return gtk_cell_renderer_get_preferred_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_height(GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_preferred_height$handle() {
        return gtk_cell_renderer_get_preferred_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_height(GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size)
     * }
     */
    public static void gtk_cell_renderer_get_preferred_height(MemorySegment cell, MemorySegment widget, MemorySegment minimum_size, MemorySegment natural_size) {
        var mh$ = gtk_cell_renderer_get_preferred_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_preferred_height", cell, widget, minimum_size, natural_size);
            }
            mh$.invokeExact(cell, widget, minimum_size, natural_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_preferred_width_for_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_preferred_width_for_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_width_for_height(GtkCellRenderer *cell, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_preferred_width_for_height$descriptor() {
        return gtk_cell_renderer_get_preferred_width_for_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_width_for_height(GtkCellRenderer *cell, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_preferred_width_for_height$handle() {
        return gtk_cell_renderer_get_preferred_width_for_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_width_for_height(GtkCellRenderer *cell, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static void gtk_cell_renderer_get_preferred_width_for_height(MemorySegment cell, MemorySegment widget, int height, MemorySegment minimum_width, MemorySegment natural_width) {
        var mh$ = gtk_cell_renderer_get_preferred_width_for_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_preferred_width_for_height", cell, widget, height, minimum_width, natural_width);
            }
            mh$.invokeExact(cell, widget, height, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_preferred_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_preferred_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_size(GtkCellRenderer *cell, GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_preferred_size$descriptor() {
        return gtk_cell_renderer_get_preferred_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_size(GtkCellRenderer *cell, GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_preferred_size$handle() {
        return gtk_cell_renderer_get_preferred_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_preferred_size(GtkCellRenderer *cell, GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size)
     * }
     */
    public static void gtk_cell_renderer_get_preferred_size(MemorySegment cell, MemorySegment widget, MemorySegment minimum_size, MemorySegment natural_size) {
        var mh$ = gtk_cell_renderer_get_preferred_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_preferred_size", cell, widget, minimum_size, natural_size);
            }
            mh$.invokeExact(cell, widget, minimum_size, natural_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_aligned_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_aligned_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_aligned_area(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState flags, const GdkRectangle *cell_area, GdkRectangle *aligned_area)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_aligned_area$descriptor() {
        return gtk_cell_renderer_get_aligned_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_aligned_area(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState flags, const GdkRectangle *cell_area, GdkRectangle *aligned_area)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_aligned_area$handle() {
        return gtk_cell_renderer_get_aligned_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_aligned_area(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState flags, const GdkRectangle *cell_area, GdkRectangle *aligned_area)
     * }
     */
    public static void gtk_cell_renderer_get_aligned_area(MemorySegment cell, MemorySegment widget, int flags, MemorySegment cell_area, MemorySegment aligned_area) {
        var mh$ = gtk_cell_renderer_get_aligned_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_aligned_area", cell, widget, flags, cell_area, aligned_area);
            }
            mh$.invokeExact(cell, widget, flags, cell_area, aligned_area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_size(GtkCellRenderer *cell, GtkWidget *widget, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_size$descriptor() {
        return gtk_cell_renderer_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_size(GtkCellRenderer *cell, GtkWidget *widget, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_size$handle() {
        return gtk_cell_renderer_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_size(GtkCellRenderer *cell, GtkWidget *widget, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height)
     * }
     */
    public static void gtk_cell_renderer_get_size(MemorySegment cell, MemorySegment widget, MemorySegment cell_area, MemorySegment x_offset, MemorySegment y_offset, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_cell_renderer_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_size", cell, widget, cell_area, x_offset, y_offset, width, height);
            }
            mh$.invokeExact(cell, widget, cell_area, x_offset, y_offset, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_render {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_render"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_render(GtkCellRenderer *cell, cairo_t *cr, GtkWidget *widget, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_render$descriptor() {
        return gtk_cell_renderer_render.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_render(GtkCellRenderer *cell, cairo_t *cr, GtkWidget *widget, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static MethodHandle gtk_cell_renderer_render$handle() {
        return gtk_cell_renderer_render.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_render(GtkCellRenderer *cell, cairo_t *cr, GtkWidget *widget, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static void gtk_cell_renderer_render(MemorySegment cell, MemorySegment cr, MemorySegment widget, MemorySegment background_area, MemorySegment cell_area, int flags) {
        var mh$ = gtk_cell_renderer_render.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_render", cell, cr, widget, background_area, cell_area, flags);
            }
            mh$.invokeExact(cell, cr, widget, background_area, cell_area, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_activate(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_activate$descriptor() {
        return gtk_cell_renderer_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_activate(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static MethodHandle gtk_cell_renderer_activate$handle() {
        return gtk_cell_renderer_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_activate(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static int gtk_cell_renderer_activate(MemorySegment cell, MemorySegment event, MemorySegment widget, MemorySegment path, MemorySegment background_area, MemorySegment cell_area, int flags) {
        var mh$ = gtk_cell_renderer_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_activate", cell, event, widget, path, background_area, cell_area, flags);
            }
            return (int)mh$.invokeExact(cell, event, widget, path, background_area, cell_area, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_start_editing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_start_editing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellEditable *gtk_cell_renderer_start_editing(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_start_editing$descriptor() {
        return gtk_cell_renderer_start_editing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellEditable *gtk_cell_renderer_start_editing(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static MethodHandle gtk_cell_renderer_start_editing$handle() {
        return gtk_cell_renderer_start_editing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellEditable *gtk_cell_renderer_start_editing(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static MemorySegment gtk_cell_renderer_start_editing(MemorySegment cell, MemorySegment event, MemorySegment widget, MemorySegment path, MemorySegment background_area, MemorySegment cell_area, int flags) {
        var mh$ = gtk_cell_renderer_start_editing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_start_editing", cell, event, widget, path, background_area, cell_area, flags);
            }
            return (MemorySegment)mh$.invokeExact(cell, event, widget, path, background_area, cell_area, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_set_fixed_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_set_fixed_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_fixed_size(GtkCellRenderer *cell, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_set_fixed_size$descriptor() {
        return gtk_cell_renderer_set_fixed_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_fixed_size(GtkCellRenderer *cell, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_cell_renderer_set_fixed_size$handle() {
        return gtk_cell_renderer_set_fixed_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_fixed_size(GtkCellRenderer *cell, gint width, gint height)
     * }
     */
    public static void gtk_cell_renderer_set_fixed_size(MemorySegment cell, int width, int height) {
        var mh$ = gtk_cell_renderer_set_fixed_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_set_fixed_size", cell, width, height);
            }
            mh$.invokeExact(cell, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_fixed_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_fixed_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_fixed_size(GtkCellRenderer *cell, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_fixed_size$descriptor() {
        return gtk_cell_renderer_get_fixed_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_fixed_size(GtkCellRenderer *cell, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_fixed_size$handle() {
        return gtk_cell_renderer_get_fixed_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_fixed_size(GtkCellRenderer *cell, gint *width, gint *height)
     * }
     */
    public static void gtk_cell_renderer_get_fixed_size(MemorySegment cell, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_cell_renderer_get_fixed_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_fixed_size", cell, width, height);
            }
            mh$.invokeExact(cell, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_set_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_set_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_alignment(GtkCellRenderer *cell, gfloat xalign, gfloat yalign)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_set_alignment$descriptor() {
        return gtk_cell_renderer_set_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_alignment(GtkCellRenderer *cell, gfloat xalign, gfloat yalign)
     * }
     */
    public static MethodHandle gtk_cell_renderer_set_alignment$handle() {
        return gtk_cell_renderer_set_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_alignment(GtkCellRenderer *cell, gfloat xalign, gfloat yalign)
     * }
     */
    public static void gtk_cell_renderer_set_alignment(MemorySegment cell, float xalign, float yalign) {
        var mh$ = gtk_cell_renderer_set_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_set_alignment", cell, xalign, yalign);
            }
            mh$.invokeExact(cell, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_alignment(GtkCellRenderer *cell, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_alignment$descriptor() {
        return gtk_cell_renderer_get_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_alignment(GtkCellRenderer *cell, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_alignment$handle() {
        return gtk_cell_renderer_get_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_alignment(GtkCellRenderer *cell, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static void gtk_cell_renderer_get_alignment(MemorySegment cell, MemorySegment xalign, MemorySegment yalign) {
        var mh$ = gtk_cell_renderer_get_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_alignment", cell, xalign, yalign);
            }
            mh$.invokeExact(cell, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_set_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_set_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_padding(GtkCellRenderer *cell, gint xpad, gint ypad)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_set_padding$descriptor() {
        return gtk_cell_renderer_set_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_padding(GtkCellRenderer *cell, gint xpad, gint ypad)
     * }
     */
    public static MethodHandle gtk_cell_renderer_set_padding$handle() {
        return gtk_cell_renderer_set_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_padding(GtkCellRenderer *cell, gint xpad, gint ypad)
     * }
     */
    public static void gtk_cell_renderer_set_padding(MemorySegment cell, int xpad, int ypad) {
        var mh$ = gtk_cell_renderer_set_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_set_padding", cell, xpad, ypad);
            }
            mh$.invokeExact(cell, xpad, ypad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_padding(GtkCellRenderer *cell, gint *xpad, gint *ypad)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_padding$descriptor() {
        return gtk_cell_renderer_get_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_padding(GtkCellRenderer *cell, gint *xpad, gint *ypad)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_padding$handle() {
        return gtk_cell_renderer_get_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_get_padding(GtkCellRenderer *cell, gint *xpad, gint *ypad)
     * }
     */
    public static void gtk_cell_renderer_get_padding(MemorySegment cell, MemorySegment xpad, MemorySegment ypad) {
        var mh$ = gtk_cell_renderer_get_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_padding", cell, xpad, ypad);
            }
            mh$.invokeExact(cell, xpad, ypad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_set_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_visible(GtkCellRenderer *cell, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_set_visible$descriptor() {
        return gtk_cell_renderer_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_visible(GtkCellRenderer *cell, gboolean visible)
     * }
     */
    public static MethodHandle gtk_cell_renderer_set_visible$handle() {
        return gtk_cell_renderer_set_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_visible(GtkCellRenderer *cell, gboolean visible)
     * }
     */
    public static void gtk_cell_renderer_set_visible(MemorySegment cell, int visible) {
        var mh$ = gtk_cell_renderer_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_set_visible", cell, visible);
            }
            mh$.invokeExact(cell, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_get_visible(GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_visible$descriptor() {
        return gtk_cell_renderer_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_get_visible(GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_visible$handle() {
        return gtk_cell_renderer_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_get_visible(GtkCellRenderer *cell)
     * }
     */
    public static int gtk_cell_renderer_get_visible(MemorySegment cell) {
        var mh$ = gtk_cell_renderer_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_visible", cell);
            }
            return (int)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_set_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_set_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_sensitive(GtkCellRenderer *cell, gboolean sensitive)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_set_sensitive$descriptor() {
        return gtk_cell_renderer_set_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_sensitive(GtkCellRenderer *cell, gboolean sensitive)
     * }
     */
    public static MethodHandle gtk_cell_renderer_set_sensitive$handle() {
        return gtk_cell_renderer_set_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_set_sensitive(GtkCellRenderer *cell, gboolean sensitive)
     * }
     */
    public static void gtk_cell_renderer_set_sensitive(MemorySegment cell, int sensitive) {
        var mh$ = gtk_cell_renderer_set_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_set_sensitive", cell, sensitive);
            }
            mh$.invokeExact(cell, sensitive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_get_sensitive(GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_sensitive$descriptor() {
        return gtk_cell_renderer_get_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_get_sensitive(GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_sensitive$handle() {
        return gtk_cell_renderer_get_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_get_sensitive(GtkCellRenderer *cell)
     * }
     */
    public static int gtk_cell_renderer_get_sensitive(MemorySegment cell) {
        var mh$ = gtk_cell_renderer_get_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_sensitive", cell);
            }
            return (int)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_is_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_is_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_is_activatable(GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_is_activatable$descriptor() {
        return gtk_cell_renderer_is_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_is_activatable(GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_cell_renderer_is_activatable$handle() {
        return gtk_cell_renderer_is_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_is_activatable(GtkCellRenderer *cell)
     * }
     */
    public static int gtk_cell_renderer_is_activatable(MemorySegment cell) {
        var mh$ = gtk_cell_renderer_is_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_is_activatable", cell);
            }
            return (int)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_stop_editing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_stop_editing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_stop_editing(GtkCellRenderer *cell, gboolean canceled)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_stop_editing$descriptor() {
        return gtk_cell_renderer_stop_editing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_stop_editing(GtkCellRenderer *cell, gboolean canceled)
     * }
     */
    public static MethodHandle gtk_cell_renderer_stop_editing$handle() {
        return gtk_cell_renderer_stop_editing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_stop_editing(GtkCellRenderer *cell, gboolean canceled)
     * }
     */
    public static void gtk_cell_renderer_stop_editing(MemorySegment cell, int canceled) {
        var mh$ = gtk_cell_renderer_stop_editing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_stop_editing", cell, canceled);
            }
            mh$.invokeExact(cell, canceled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_cell_renderer_calc_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_cell_renderer_calc_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_cell_renderer_calc_offset(GtkCellRenderer *cell, const GdkRectangle *cell_area, GtkTextDirection direction, gint width, gint height, gint *x_offset, gint *y_offset)
     * }
     */
    public static FunctionDescriptor _gtk_cell_renderer_calc_offset$descriptor() {
        return _gtk_cell_renderer_calc_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_cell_renderer_calc_offset(GtkCellRenderer *cell, const GdkRectangle *cell_area, GtkTextDirection direction, gint width, gint height, gint *x_offset, gint *y_offset)
     * }
     */
    public static MethodHandle _gtk_cell_renderer_calc_offset$handle() {
        return _gtk_cell_renderer_calc_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_cell_renderer_calc_offset(GtkCellRenderer *cell, const GdkRectangle *cell_area, GtkTextDirection direction, gint width, gint height, gint *x_offset, gint *y_offset)
     * }
     */
    public static void _gtk_cell_renderer_calc_offset(MemorySegment cell, MemorySegment cell_area, int direction, int width, int height, MemorySegment x_offset, MemorySegment y_offset) {
        var mh$ = _gtk_cell_renderer_calc_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_cell_renderer_calc_offset", cell, cell_area, direction, width, height, x_offset, y_offset);
            }
            mh$.invokeExact(cell, cell_area, direction, width, height, x_offset, y_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_cell_renderer_get_state(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState cell_state)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_get_state$descriptor() {
        return gtk_cell_renderer_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_cell_renderer_get_state(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState cell_state)
     * }
     */
    public static MethodHandle gtk_cell_renderer_get_state$handle() {
        return gtk_cell_renderer_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_cell_renderer_get_state(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState cell_state)
     * }
     */
    public static int gtk_cell_renderer_get_state(MemorySegment cell, MemorySegment widget, int cell_state) {
        var mh$ = gtk_cell_renderer_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_get_state", cell, widget, cell_state);
            }
            return (int)mh$.invokeExact(cell, widget, cell_state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_class_set_accessible_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_class_set_accessible_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_class_set_accessible_type(GtkCellRendererClass *renderer_class, GType type)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_class_set_accessible_type$descriptor() {
        return gtk_cell_renderer_class_set_accessible_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_class_set_accessible_type(GtkCellRendererClass *renderer_class, GType type)
     * }
     */
    public static MethodHandle gtk_cell_renderer_class_set_accessible_type$handle() {
        return gtk_cell_renderer_class_set_accessible_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_class_set_accessible_type(GtkCellRendererClass *renderer_class, GType type)
     * }
     */
    public static void gtk_cell_renderer_class_set_accessible_type(MemorySegment renderer_class, long type) {
        var mh$ = gtk_cell_renderer_class_set_accessible_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_class_set_accessible_type", renderer_class, type);
            }
            mh$.invokeExact(renderer_class, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_cell_renderer_get_accessible_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_cell_renderer_get_accessible_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GType _gtk_cell_renderer_get_accessible_type(GtkCellRenderer *renderer)
     * }
     */
    public static FunctionDescriptor _gtk_cell_renderer_get_accessible_type$descriptor() {
        return _gtk_cell_renderer_get_accessible_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GType _gtk_cell_renderer_get_accessible_type(GtkCellRenderer *renderer)
     * }
     */
    public static MethodHandle _gtk_cell_renderer_get_accessible_type$handle() {
        return _gtk_cell_renderer_get_accessible_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * GType _gtk_cell_renderer_get_accessible_type(GtkCellRenderer *renderer)
     * }
     */
    public static long _gtk_cell_renderer_get_accessible_type(MemorySegment renderer) {
        var mh$ = _gtk_cell_renderer_get_accessible_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_cell_renderer_get_accessible_type", renderer);
            }
            return (long)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_sortable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_sortable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_sortable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_sortable_get_type$descriptor() {
        return gtk_tree_sortable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_sortable_get_type()
     * }
     */
    public static MethodHandle gtk_tree_sortable_get_type$handle() {
        return gtk_tree_sortable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_sortable_get_type()
     * }
     */
    public static long gtk_tree_sortable_get_type() {
        var mh$ = gtk_tree_sortable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_sortable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_sortable_sort_column_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_sortable_sort_column_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_sort_column_changed(GtkTreeSortable *sortable)
     * }
     */
    public static FunctionDescriptor gtk_tree_sortable_sort_column_changed$descriptor() {
        return gtk_tree_sortable_sort_column_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_sort_column_changed(GtkTreeSortable *sortable)
     * }
     */
    public static MethodHandle gtk_tree_sortable_sort_column_changed$handle() {
        return gtk_tree_sortable_sort_column_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_sort_column_changed(GtkTreeSortable *sortable)
     * }
     */
    public static void gtk_tree_sortable_sort_column_changed(MemorySegment sortable) {
        var mh$ = gtk_tree_sortable_sort_column_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_sortable_sort_column_changed", sortable);
            }
            mh$.invokeExact(sortable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_sortable_get_sort_column_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_sortable_get_sort_column_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_sortable_get_sort_column_id(GtkTreeSortable *sortable, gint *sort_column_id, GtkSortType *order)
     * }
     */
    public static FunctionDescriptor gtk_tree_sortable_get_sort_column_id$descriptor() {
        return gtk_tree_sortable_get_sort_column_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_sortable_get_sort_column_id(GtkTreeSortable *sortable, gint *sort_column_id, GtkSortType *order)
     * }
     */
    public static MethodHandle gtk_tree_sortable_get_sort_column_id$handle() {
        return gtk_tree_sortable_get_sort_column_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_sortable_get_sort_column_id(GtkTreeSortable *sortable, gint *sort_column_id, GtkSortType *order)
     * }
     */
    public static int gtk_tree_sortable_get_sort_column_id(MemorySegment sortable, MemorySegment sort_column_id, MemorySegment order) {
        var mh$ = gtk_tree_sortable_get_sort_column_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_sortable_get_sort_column_id", sortable, sort_column_id, order);
            }
            return (int)mh$.invokeExact(sortable, sort_column_id, order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_sortable_set_sort_column_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_sortable_set_sort_column_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_sort_column_id(GtkTreeSortable *sortable, gint sort_column_id, GtkSortType order)
     * }
     */
    public static FunctionDescriptor gtk_tree_sortable_set_sort_column_id$descriptor() {
        return gtk_tree_sortable_set_sort_column_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_sort_column_id(GtkTreeSortable *sortable, gint sort_column_id, GtkSortType order)
     * }
     */
    public static MethodHandle gtk_tree_sortable_set_sort_column_id$handle() {
        return gtk_tree_sortable_set_sort_column_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_sort_column_id(GtkTreeSortable *sortable, gint sort_column_id, GtkSortType order)
     * }
     */
    public static void gtk_tree_sortable_set_sort_column_id(MemorySegment sortable, int sort_column_id, int order) {
        var mh$ = gtk_tree_sortable_set_sort_column_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_sortable_set_sort_column_id", sortable, sort_column_id, order);
            }
            mh$.invokeExact(sortable, sort_column_id, order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_sortable_set_sort_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_sortable_set_sort_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_sort_func(GtkTreeSortable *sortable, gint sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_sortable_set_sort_func$descriptor() {
        return gtk_tree_sortable_set_sort_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_sort_func(GtkTreeSortable *sortable, gint sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_sortable_set_sort_func$handle() {
        return gtk_tree_sortable_set_sort_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_sort_func(GtkTreeSortable *sortable, gint sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_sortable_set_sort_func(MemorySegment sortable, int sort_column_id, MemorySegment sort_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_tree_sortable_set_sort_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_sortable_set_sort_func", sortable, sort_column_id, sort_func, user_data, destroy);
            }
            mh$.invokeExact(sortable, sort_column_id, sort_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_sortable_set_default_sort_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_sortable_set_default_sort_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_default_sort_func(GtkTreeSortable *sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_sortable_set_default_sort_func$descriptor() {
        return gtk_tree_sortable_set_default_sort_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_default_sort_func(GtkTreeSortable *sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_sortable_set_default_sort_func$handle() {
        return gtk_tree_sortable_set_default_sort_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_sortable_set_default_sort_func(GtkTreeSortable *sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_sortable_set_default_sort_func(MemorySegment sortable, MemorySegment sort_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_tree_sortable_set_default_sort_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_sortable_set_default_sort_func", sortable, sort_func, user_data, destroy);
            }
            mh$.invokeExact(sortable, sort_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_sortable_has_default_sort_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_sortable_has_default_sort_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_sortable_has_default_sort_func(GtkTreeSortable *sortable)
     * }
     */
    public static FunctionDescriptor gtk_tree_sortable_has_default_sort_func$descriptor() {
        return gtk_tree_sortable_has_default_sort_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_sortable_has_default_sort_func(GtkTreeSortable *sortable)
     * }
     */
    public static MethodHandle gtk_tree_sortable_has_default_sort_func$handle() {
        return gtk_tree_sortable_has_default_sort_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_sortable_has_default_sort_func(GtkTreeSortable *sortable)
     * }
     */
    public static int gtk_tree_sortable_has_default_sort_func(MemorySegment sortable) {
        var mh$ = gtk_tree_sortable_has_default_sort_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_sortable_has_default_sort_func", sortable);
            }
            return (int)mh$.invokeExact(sortable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_area_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_type$descriptor() {
        return gtk_cell_area_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_area_get_type()
     * }
     */
    public static MethodHandle gtk_cell_area_get_type$handle() {
        return gtk_cell_area_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_area_get_type()
     * }
     */
    public static long gtk_cell_area_get_type() {
        var mh$ = gtk_cell_area_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_add(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_add$descriptor() {
        return gtk_cell_area_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_add(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MethodHandle gtk_cell_area_add$handle() {
        return gtk_cell_area_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_add(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static void gtk_cell_area_add(MemorySegment area, MemorySegment renderer) {
        var mh$ = gtk_cell_area_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_add", area, renderer);
            }
            mh$.invokeExact(area, renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_remove(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_remove$descriptor() {
        return gtk_cell_area_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_remove(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MethodHandle gtk_cell_area_remove$handle() {
        return gtk_cell_area_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_remove(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static void gtk_cell_area_remove(MemorySegment area, MemorySegment renderer) {
        var mh$ = gtk_cell_area_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_remove", area, renderer);
            }
            mh$.invokeExact(area, renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_has_renderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_has_renderer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_has_renderer(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_has_renderer$descriptor() {
        return gtk_cell_area_has_renderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_has_renderer(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MethodHandle gtk_cell_area_has_renderer$handle() {
        return gtk_cell_area_has_renderer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_has_renderer(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static int gtk_cell_area_has_renderer(MemorySegment area, MemorySegment renderer) {
        var mh$ = gtk_cell_area_has_renderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_has_renderer", area, renderer);
            }
            return (int)mh$.invokeExact(area, renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_foreach(GtkCellArea *area, GtkCellCallback callback, gpointer callback_data)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_foreach$descriptor() {
        return gtk_cell_area_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_foreach(GtkCellArea *area, GtkCellCallback callback, gpointer callback_data)
     * }
     */
    public static MethodHandle gtk_cell_area_foreach$handle() {
        return gtk_cell_area_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_foreach(GtkCellArea *area, GtkCellCallback callback, gpointer callback_data)
     * }
     */
    public static void gtk_cell_area_foreach(MemorySegment area, MemorySegment callback, MemorySegment callback_data) {
        var mh$ = gtk_cell_area_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_foreach", area, callback, callback_data);
            }
            mh$.invokeExact(area, callback, callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_foreach_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_foreach_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_foreach_alloc(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, const GdkRectangle *background_area, GtkCellAllocCallback callback, gpointer callback_data)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_foreach_alloc$descriptor() {
        return gtk_cell_area_foreach_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_foreach_alloc(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, const GdkRectangle *background_area, GtkCellAllocCallback callback, gpointer callback_data)
     * }
     */
    public static MethodHandle gtk_cell_area_foreach_alloc$handle() {
        return gtk_cell_area_foreach_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_foreach_alloc(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, const GdkRectangle *background_area, GtkCellAllocCallback callback, gpointer callback_data)
     * }
     */
    public static void gtk_cell_area_foreach_alloc(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment cell_area, MemorySegment background_area, MemorySegment callback, MemorySegment callback_data) {
        var mh$ = gtk_cell_area_foreach_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_foreach_alloc", area, context, widget, cell_area, background_area, callback, callback_data);
            }
            mh$.invokeExact(area, context, widget, cell_area, background_area, callback, callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_cell_area_event(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_event$descriptor() {
        return gtk_cell_area_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_cell_area_event(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static MethodHandle gtk_cell_area_event$handle() {
        return gtk_cell_area_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_cell_area_event(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static int gtk_cell_area_event(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment event, MemorySegment cell_area, int flags) {
        var mh$ = gtk_cell_area_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_event", area, context, widget, event, cell_area, flags);
            }
            return (int)mh$.invokeExact(area, context, widget, event, cell_area, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_render {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_render"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_render(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, cairo_t *cr, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean paint_focus)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_render$descriptor() {
        return gtk_cell_area_render.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_render(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, cairo_t *cr, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean paint_focus)
     * }
     */
    public static MethodHandle gtk_cell_area_render$handle() {
        return gtk_cell_area_render.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_render(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, cairo_t *cr, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean paint_focus)
     * }
     */
    public static void gtk_cell_area_render(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment cr, MemorySegment background_area, MemorySegment cell_area, int flags, int paint_focus) {
        var mh$ = gtk_cell_area_render.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_render", area, context, widget, cr, background_area, cell_area, flags, paint_focus);
            }
            mh$.invokeExact(area, context, widget, cr, background_area, cell_area, flags, paint_focus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_cell_allocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_cell_allocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_cell_allocation(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkCellRenderer *renderer, const GdkRectangle *cell_area, GdkRectangle *allocation)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_cell_allocation$descriptor() {
        return gtk_cell_area_get_cell_allocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_cell_allocation(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkCellRenderer *renderer, const GdkRectangle *cell_area, GdkRectangle *allocation)
     * }
     */
    public static MethodHandle gtk_cell_area_get_cell_allocation$handle() {
        return gtk_cell_area_get_cell_allocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_cell_allocation(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkCellRenderer *renderer, const GdkRectangle *cell_area, GdkRectangle *allocation)
     * }
     */
    public static void gtk_cell_area_get_cell_allocation(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment renderer, MemorySegment cell_area, MemorySegment allocation) {
        var mh$ = gtk_cell_area_get_cell_allocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_cell_allocation", area, context, widget, renderer, cell_area, allocation);
            }
            mh$.invokeExact(area, context, widget, renderer, cell_area, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_cell_at_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_cell_at_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_cell_at_position(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, gint x, gint y, GdkRectangle *alloc_area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_cell_at_position$descriptor() {
        return gtk_cell_area_get_cell_at_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_cell_at_position(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, gint x, gint y, GdkRectangle *alloc_area)
     * }
     */
    public static MethodHandle gtk_cell_area_get_cell_at_position$handle() {
        return gtk_cell_area_get_cell_at_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_cell_at_position(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, gint x, gint y, GdkRectangle *alloc_area)
     * }
     */
    public static MemorySegment gtk_cell_area_get_cell_at_position(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment cell_area, int x, int y, MemorySegment alloc_area) {
        var mh$ = gtk_cell_area_get_cell_at_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_cell_at_position", area, context, widget, cell_area, x, y, alloc_area);
            }
            return (MemorySegment)mh$.invokeExact(area, context, widget, cell_area, x, y, alloc_area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_create_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_create_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellAreaContext *gtk_cell_area_create_context(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_create_context$descriptor() {
        return gtk_cell_area_create_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellAreaContext *gtk_cell_area_create_context(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_cell_area_create_context$handle() {
        return gtk_cell_area_create_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellAreaContext *gtk_cell_area_create_context(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_cell_area_create_context(MemorySegment area) {
        var mh$ = gtk_cell_area_create_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_create_context", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_copy_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_copy_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellAreaContext *gtk_cell_area_copy_context(GtkCellArea *area, GtkCellAreaContext *context)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_copy_context$descriptor() {
        return gtk_cell_area_copy_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellAreaContext *gtk_cell_area_copy_context(GtkCellArea *area, GtkCellAreaContext *context)
     * }
     */
    public static MethodHandle gtk_cell_area_copy_context$handle() {
        return gtk_cell_area_copy_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellAreaContext *gtk_cell_area_copy_context(GtkCellArea *area, GtkCellAreaContext *context)
     * }
     */
    public static MemorySegment gtk_cell_area_copy_context(MemorySegment area, MemorySegment context) {
        var mh$ = gtk_cell_area_copy_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_copy_context", area, context);
            }
            return (MemorySegment)mh$.invokeExact(area, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_request_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_request_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_cell_area_get_request_mode(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_request_mode$descriptor() {
        return gtk_cell_area_get_request_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_cell_area_get_request_mode(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_cell_area_get_request_mode$handle() {
        return gtk_cell_area_get_request_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_cell_area_get_request_mode(GtkCellArea *area)
     * }
     */
    public static int gtk_cell_area_get_request_mode(MemorySegment area) {
        var mh$ = gtk_cell_area_get_request_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_request_mode", area);
            }
            return (int)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_preferred_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_preferred_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_width(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_width, gint *natural_width)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_preferred_width$descriptor() {
        return gtk_cell_area_get_preferred_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_width(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_width, gint *natural_width)
     * }
     */
    public static MethodHandle gtk_cell_area_get_preferred_width$handle() {
        return gtk_cell_area_get_preferred_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_width(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_width, gint *natural_width)
     * }
     */
    public static void gtk_cell_area_get_preferred_width(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment minimum_width, MemorySegment natural_width) {
        var mh$ = gtk_cell_area_get_preferred_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_preferred_width", area, context, widget, minimum_width, natural_width);
            }
            mh$.invokeExact(area, context, widget, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_preferred_height_for_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_preferred_height_for_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_height_for_width(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_preferred_height_for_width$descriptor() {
        return gtk_cell_area_get_preferred_height_for_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_height_for_width(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static MethodHandle gtk_cell_area_get_preferred_height_for_width$handle() {
        return gtk_cell_area_get_preferred_height_for_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_height_for_width(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static void gtk_cell_area_get_preferred_height_for_width(MemorySegment area, MemorySegment context, MemorySegment widget, int width, MemorySegment minimum_height, MemorySegment natural_height) {
        var mh$ = gtk_cell_area_get_preferred_height_for_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_preferred_height_for_width", area, context, widget, width, minimum_height, natural_height);
            }
            mh$.invokeExact(area, context, widget, width, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_preferred_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_preferred_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_height(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_height, gint *natural_height)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_preferred_height$descriptor() {
        return gtk_cell_area_get_preferred_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_height(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_height, gint *natural_height)
     * }
     */
    public static MethodHandle gtk_cell_area_get_preferred_height$handle() {
        return gtk_cell_area_get_preferred_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_height(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_height, gint *natural_height)
     * }
     */
    public static void gtk_cell_area_get_preferred_height(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment minimum_height, MemorySegment natural_height) {
        var mh$ = gtk_cell_area_get_preferred_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_preferred_height", area, context, widget, minimum_height, natural_height);
            }
            mh$.invokeExact(area, context, widget, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_preferred_width_for_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_preferred_width_for_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_width_for_height(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_preferred_width_for_height$descriptor() {
        return gtk_cell_area_get_preferred_width_for_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_width_for_height(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static MethodHandle gtk_cell_area_get_preferred_width_for_height$handle() {
        return gtk_cell_area_get_preferred_width_for_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_get_preferred_width_for_height(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static void gtk_cell_area_get_preferred_width_for_height(MemorySegment area, MemorySegment context, MemorySegment widget, int height, MemorySegment minimum_width, MemorySegment natural_width) {
        var mh$ = gtk_cell_area_get_preferred_width_for_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_preferred_width_for_height", area, context, widget, height, minimum_width, natural_width);
            }
            mh$.invokeExact(area, context, widget, height, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_current_path_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_current_path_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_cell_area_get_current_path_string(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_current_path_string$descriptor() {
        return gtk_cell_area_get_current_path_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_cell_area_get_current_path_string(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_cell_area_get_current_path_string$handle() {
        return gtk_cell_area_get_current_path_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_cell_area_get_current_path_string(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_cell_area_get_current_path_string(MemorySegment area) {
        var mh$ = gtk_cell_area_get_current_path_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_current_path_string", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_apply_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_apply_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_apply_attributes(GtkCellArea *area, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_apply_attributes$descriptor() {
        return gtk_cell_area_apply_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_apply_attributes(GtkCellArea *area, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded)
     * }
     */
    public static MethodHandle gtk_cell_area_apply_attributes$handle() {
        return gtk_cell_area_apply_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_apply_attributes(GtkCellArea *area, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded)
     * }
     */
    public static void gtk_cell_area_apply_attributes(MemorySegment area, MemorySegment tree_model, MemorySegment iter, int is_expander, int is_expanded) {
        var mh$ = gtk_cell_area_apply_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_apply_attributes", area, tree_model, iter, is_expander, is_expanded);
            }
            mh$.invokeExact(area, tree_model, iter, is_expander, is_expanded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_attribute_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_attribute_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_attribute_connect(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute, gint column)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_attribute_connect$descriptor() {
        return gtk_cell_area_attribute_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_attribute_connect(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute, gint column)
     * }
     */
    public static MethodHandle gtk_cell_area_attribute_connect$handle() {
        return gtk_cell_area_attribute_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_attribute_connect(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute, gint column)
     * }
     */
    public static void gtk_cell_area_attribute_connect(MemorySegment area, MemorySegment renderer, MemorySegment attribute, int column) {
        var mh$ = gtk_cell_area_attribute_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_attribute_connect", area, renderer, attribute, column);
            }
            mh$.invokeExact(area, renderer, attribute, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_attribute_disconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_attribute_disconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_attribute_disconnect(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_attribute_disconnect$descriptor() {
        return gtk_cell_area_attribute_disconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_attribute_disconnect(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute)
     * }
     */
    public static MethodHandle gtk_cell_area_attribute_disconnect$handle() {
        return gtk_cell_area_attribute_disconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_attribute_disconnect(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute)
     * }
     */
    public static void gtk_cell_area_attribute_disconnect(MemorySegment area, MemorySegment renderer, MemorySegment attribute) {
        var mh$ = gtk_cell_area_attribute_disconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_attribute_disconnect", area, renderer, attribute);
            }
            mh$.invokeExact(area, renderer, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_attribute_get_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_attribute_get_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_cell_area_attribute_get_column(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_attribute_get_column$descriptor() {
        return gtk_cell_area_attribute_get_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_cell_area_attribute_get_column(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute)
     * }
     */
    public static MethodHandle gtk_cell_area_attribute_get_column$handle() {
        return gtk_cell_area_attribute_get_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_cell_area_attribute_get_column(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute)
     * }
     */
    public static int gtk_cell_area_attribute_get_column(MemorySegment area, MemorySegment renderer, MemorySegment attribute) {
        var mh$ = gtk_cell_area_attribute_get_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_attribute_get_column", area, renderer, attribute);
            }
            return (int)mh$.invokeExact(area, renderer, attribute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_class_install_cell_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_class_install_cell_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_class_install_cell_property(GtkCellAreaClass *aclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_class_install_cell_property$descriptor() {
        return gtk_cell_area_class_install_cell_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_class_install_cell_property(GtkCellAreaClass *aclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static MethodHandle gtk_cell_area_class_install_cell_property$handle() {
        return gtk_cell_area_class_install_cell_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_class_install_cell_property(GtkCellAreaClass *aclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static void gtk_cell_area_class_install_cell_property(MemorySegment aclass, int property_id, MemorySegment pspec) {
        var mh$ = gtk_cell_area_class_install_cell_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_class_install_cell_property", aclass, property_id, pspec);
            }
            mh$.invokeExact(aclass, property_id, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_class_find_cell_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_class_find_cell_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *gtk_cell_area_class_find_cell_property(GtkCellAreaClass *aclass, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_class_find_cell_property$descriptor() {
        return gtk_cell_area_class_find_cell_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *gtk_cell_area_class_find_cell_property(GtkCellAreaClass *aclass, const gchar *property_name)
     * }
     */
    public static MethodHandle gtk_cell_area_class_find_cell_property$handle() {
        return gtk_cell_area_class_find_cell_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *gtk_cell_area_class_find_cell_property(GtkCellAreaClass *aclass, const gchar *property_name)
     * }
     */
    public static MemorySegment gtk_cell_area_class_find_cell_property(MemorySegment aclass, MemorySegment property_name) {
        var mh$ = gtk_cell_area_class_find_cell_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_class_find_cell_property", aclass, property_name);
            }
            return (MemorySegment)mh$.invokeExact(aclass, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_class_list_cell_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_class_list_cell_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **gtk_cell_area_class_list_cell_properties(GtkCellAreaClass *aclass, guint *n_properties)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_class_list_cell_properties$descriptor() {
        return gtk_cell_area_class_list_cell_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **gtk_cell_area_class_list_cell_properties(GtkCellAreaClass *aclass, guint *n_properties)
     * }
     */
    public static MethodHandle gtk_cell_area_class_list_cell_properties$handle() {
        return gtk_cell_area_class_list_cell_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec **gtk_cell_area_class_list_cell_properties(GtkCellAreaClass *aclass, guint *n_properties)
     * }
     */
    public static MemorySegment gtk_cell_area_class_list_cell_properties(MemorySegment aclass, MemorySegment n_properties) {
        var mh$ = gtk_cell_area_class_list_cell_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_class_list_cell_properties", aclass, n_properties);
            }
            return (MemorySegment)mh$.invokeExact(aclass, n_properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_add_with_properties(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...)
     * }
     */
    public static class gtk_cell_area_add_with_properties {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_cell_area_add_with_properties");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_cell_area_add_with_properties(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_cell_area_add_with_properties(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...)
         * }
         */
        public static gtk_cell_area_add_with_properties makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_cell_area_add_with_properties(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment area, MemorySegment renderer, MemorySegment first_prop_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_cell_area_add_with_properties", area, renderer, first_prop_name, x3);
                }
                spreader.invokeExact(area, renderer, first_prop_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_set(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...)
     * }
     */
    public static class gtk_cell_area_cell_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_cell_area_cell_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_cell_area_cell_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_cell_area_cell_set(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...)
         * }
         */
        public static gtk_cell_area_cell_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_cell_area_cell_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment area, MemorySegment renderer, MemorySegment first_prop_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_cell_area_cell_set", area, renderer, first_prop_name, x3);
                }
                spreader.invokeExact(area, renderer, first_prop_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_get(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...)
     * }
     */
    public static class gtk_cell_area_cell_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_cell_area_cell_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_cell_area_cell_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_cell_area_cell_get(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...)
         * }
         */
        public static gtk_cell_area_cell_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_cell_area_cell_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment area, MemorySegment renderer, MemorySegment first_prop_name, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_cell_area_cell_get", area, renderer, first_prop_name, x3);
                }
                spreader.invokeExact(area, renderer, first_prop_name, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_cell_area_cell_set_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_cell_set_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_set_property(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, const GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_cell_set_property$descriptor() {
        return gtk_cell_area_cell_set_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_set_property(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, const GValue *value)
     * }
     */
    public static MethodHandle gtk_cell_area_cell_set_property$handle() {
        return gtk_cell_area_cell_set_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_set_property(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, const GValue *value)
     * }
     */
    public static void gtk_cell_area_cell_set_property(MemorySegment area, MemorySegment renderer, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_cell_area_cell_set_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_cell_set_property", area, renderer, property_name, value);
            }
            mh$.invokeExact(area, renderer, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_cell_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_cell_get_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_get_property(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_cell_get_property$descriptor() {
        return gtk_cell_area_cell_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_get_property(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle gtk_cell_area_cell_get_property$handle() {
        return gtk_cell_area_cell_get_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_cell_get_property(GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, GValue *value)
     * }
     */
    public static void gtk_cell_area_cell_get_property(MemorySegment area, MemorySegment renderer, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_cell_area_cell_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_cell_get_property", area, renderer, property_name, value);
            }
            mh$.invokeExact(area, renderer, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_is_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_is_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_is_activatable(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_is_activatable$descriptor() {
        return gtk_cell_area_is_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_is_activatable(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_cell_area_is_activatable$handle() {
        return gtk_cell_area_is_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_is_activatable(GtkCellArea *area)
     * }
     */
    public static int gtk_cell_area_is_activatable(MemorySegment area) {
        var mh$ = gtk_cell_area_is_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_is_activatable", area);
            }
            return (int)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_activate(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean edit_only)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_activate$descriptor() {
        return gtk_cell_area_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_activate(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean edit_only)
     * }
     */
    public static MethodHandle gtk_cell_area_activate$handle() {
        return gtk_cell_area_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_activate(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean edit_only)
     * }
     */
    public static int gtk_cell_area_activate(MemorySegment area, MemorySegment context, MemorySegment widget, MemorySegment cell_area, int flags, int edit_only) {
        var mh$ = gtk_cell_area_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_activate", area, context, widget, cell_area, flags, edit_only);
            }
            return (int)mh$.invokeExact(area, context, widget, cell_area, flags, edit_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_focus(GtkCellArea *area, GtkDirectionType direction)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_focus$descriptor() {
        return gtk_cell_area_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_focus(GtkCellArea *area, GtkDirectionType direction)
     * }
     */
    public static MethodHandle gtk_cell_area_focus$handle() {
        return gtk_cell_area_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_focus(GtkCellArea *area, GtkDirectionType direction)
     * }
     */
    public static int gtk_cell_area_focus(MemorySegment area, int direction) {
        var mh$ = gtk_cell_area_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_focus", area, direction);
            }
            return (int)mh$.invokeExact(area, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_set_focus_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_set_focus_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_set_focus_cell(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_set_focus_cell$descriptor() {
        return gtk_cell_area_set_focus_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_set_focus_cell(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MethodHandle gtk_cell_area_set_focus_cell$handle() {
        return gtk_cell_area_set_focus_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_set_focus_cell(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static void gtk_cell_area_set_focus_cell(MemorySegment area, MemorySegment renderer) {
        var mh$ = gtk_cell_area_set_focus_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_set_focus_cell", area, renderer);
            }
            mh$.invokeExact(area, renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_focus_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_focus_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_focus_cell(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_focus_cell$descriptor() {
        return gtk_cell_area_get_focus_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_focus_cell(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_cell_area_get_focus_cell$handle() {
        return gtk_cell_area_get_focus_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_focus_cell(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_cell_area_get_focus_cell(MemorySegment area) {
        var mh$ = gtk_cell_area_get_focus_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_focus_cell", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_add_focus_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_add_focus_sibling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_add_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_add_focus_sibling$descriptor() {
        return gtk_cell_area_add_focus_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_add_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static MethodHandle gtk_cell_area_add_focus_sibling$handle() {
        return gtk_cell_area_add_focus_sibling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_add_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static void gtk_cell_area_add_focus_sibling(MemorySegment area, MemorySegment renderer, MemorySegment sibling) {
        var mh$ = gtk_cell_area_add_focus_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_add_focus_sibling", area, renderer, sibling);
            }
            mh$.invokeExact(area, renderer, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_remove_focus_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_remove_focus_sibling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_remove_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_remove_focus_sibling$descriptor() {
        return gtk_cell_area_remove_focus_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_remove_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static MethodHandle gtk_cell_area_remove_focus_sibling$handle() {
        return gtk_cell_area_remove_focus_sibling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_remove_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static void gtk_cell_area_remove_focus_sibling(MemorySegment area, MemorySegment renderer, MemorySegment sibling) {
        var mh$ = gtk_cell_area_remove_focus_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_remove_focus_sibling", area, renderer, sibling);
            }
            mh$.invokeExact(area, renderer, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_is_focus_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_is_focus_sibling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_is_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_is_focus_sibling$descriptor() {
        return gtk_cell_area_is_focus_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_is_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static MethodHandle gtk_cell_area_is_focus_sibling$handle() {
        return gtk_cell_area_is_focus_sibling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_is_focus_sibling(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling)
     * }
     */
    public static int gtk_cell_area_is_focus_sibling(MemorySegment area, MemorySegment renderer, MemorySegment sibling) {
        var mh$ = gtk_cell_area_is_focus_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_is_focus_sibling", area, renderer, sibling);
            }
            return (int)mh$.invokeExact(area, renderer, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_focus_siblings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_focus_siblings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GList *gtk_cell_area_get_focus_siblings(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_focus_siblings$descriptor() {
        return gtk_cell_area_get_focus_siblings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GList *gtk_cell_area_get_focus_siblings(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MethodHandle gtk_cell_area_get_focus_siblings$handle() {
        return gtk_cell_area_get_focus_siblings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GList *gtk_cell_area_get_focus_siblings(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MemorySegment gtk_cell_area_get_focus_siblings(MemorySegment area, MemorySegment renderer) {
        var mh$ = gtk_cell_area_get_focus_siblings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_focus_siblings", area, renderer);
            }
            return (MemorySegment)mh$.invokeExact(area, renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_focus_from_sibling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_focus_from_sibling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_focus_from_sibling(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_focus_from_sibling$descriptor() {
        return gtk_cell_area_get_focus_from_sibling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_focus_from_sibling(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MethodHandle gtk_cell_area_get_focus_from_sibling$handle() {
        return gtk_cell_area_get_focus_from_sibling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_focus_from_sibling(GtkCellArea *area, GtkCellRenderer *renderer)
     * }
     */
    public static MemorySegment gtk_cell_area_get_focus_from_sibling(MemorySegment area, MemorySegment renderer) {
        var mh$ = gtk_cell_area_get_focus_from_sibling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_focus_from_sibling", area, renderer);
            }
            return (MemorySegment)mh$.invokeExact(area, renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_edited_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_edited_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_edited_cell(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_edited_cell$descriptor() {
        return gtk_cell_area_get_edited_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_edited_cell(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_cell_area_get_edited_cell$handle() {
        return gtk_cell_area_get_edited_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_area_get_edited_cell(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_cell_area_get_edited_cell(MemorySegment area) {
        var mh$ = gtk_cell_area_get_edited_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_edited_cell", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_get_edit_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_get_edit_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellEditable *gtk_cell_area_get_edit_widget(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_get_edit_widget$descriptor() {
        return gtk_cell_area_get_edit_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellEditable *gtk_cell_area_get_edit_widget(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_cell_area_get_edit_widget$handle() {
        return gtk_cell_area_get_edit_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellEditable *gtk_cell_area_get_edit_widget(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_cell_area_get_edit_widget(MemorySegment area) {
        var mh$ = gtk_cell_area_get_edit_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_get_edit_widget", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_activate_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_activate_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_activate_cell(GtkCellArea *area, GtkWidget *widget, GtkCellRenderer *renderer, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_activate_cell$descriptor() {
        return gtk_cell_area_activate_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_activate_cell(GtkCellArea *area, GtkWidget *widget, GtkCellRenderer *renderer, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static MethodHandle gtk_cell_area_activate_cell$handle() {
        return gtk_cell_area_activate_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_area_activate_cell(GtkCellArea *area, GtkWidget *widget, GtkCellRenderer *renderer, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags)
     * }
     */
    public static int gtk_cell_area_activate_cell(MemorySegment area, MemorySegment widget, MemorySegment renderer, MemorySegment event, MemorySegment cell_area, int flags) {
        var mh$ = gtk_cell_area_activate_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_activate_cell", area, widget, renderer, event, cell_area, flags);
            }
            return (int)mh$.invokeExact(area, widget, renderer, event, cell_area, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_stop_editing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_stop_editing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_stop_editing(GtkCellArea *area, gboolean canceled)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_stop_editing$descriptor() {
        return gtk_cell_area_stop_editing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_stop_editing(GtkCellArea *area, gboolean canceled)
     * }
     */
    public static MethodHandle gtk_cell_area_stop_editing$handle() {
        return gtk_cell_area_stop_editing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_stop_editing(GtkCellArea *area, gboolean canceled)
     * }
     */
    public static void gtk_cell_area_stop_editing(MemorySegment area, int canceled) {
        var mh$ = gtk_cell_area_stop_editing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_stop_editing", area, canceled);
            }
            mh$.invokeExact(area, canceled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_inner_cell_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_inner_cell_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_inner_cell_area(GtkCellArea *area, GtkWidget *widget, const GdkRectangle *cell_area, GdkRectangle *inner_area)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_inner_cell_area$descriptor() {
        return gtk_cell_area_inner_cell_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_inner_cell_area(GtkCellArea *area, GtkWidget *widget, const GdkRectangle *cell_area, GdkRectangle *inner_area)
     * }
     */
    public static MethodHandle gtk_cell_area_inner_cell_area$handle() {
        return gtk_cell_area_inner_cell_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_inner_cell_area(GtkCellArea *area, GtkWidget *widget, const GdkRectangle *cell_area, GdkRectangle *inner_area)
     * }
     */
    public static void gtk_cell_area_inner_cell_area(MemorySegment area, MemorySegment widget, MemorySegment cell_area, MemorySegment inner_area) {
        var mh$ = gtk_cell_area_inner_cell_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_inner_cell_area", area, widget, cell_area, inner_area);
            }
            mh$.invokeExact(area, widget, cell_area, inner_area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_request_renderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_request_renderer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_request_renderer(GtkCellArea *area, GtkCellRenderer *renderer, GtkOrientation orientation, GtkWidget *widget, gint for_size, gint *minimum_size, gint *natural_size)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_request_renderer$descriptor() {
        return gtk_cell_area_request_renderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_request_renderer(GtkCellArea *area, GtkCellRenderer *renderer, GtkOrientation orientation, GtkWidget *widget, gint for_size, gint *minimum_size, gint *natural_size)
     * }
     */
    public static MethodHandle gtk_cell_area_request_renderer$handle() {
        return gtk_cell_area_request_renderer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_request_renderer(GtkCellArea *area, GtkCellRenderer *renderer, GtkOrientation orientation, GtkWidget *widget, gint for_size, gint *minimum_size, gint *natural_size)
     * }
     */
    public static void gtk_cell_area_request_renderer(MemorySegment area, MemorySegment renderer, int orientation, MemorySegment widget, int for_size, MemorySegment minimum_size, MemorySegment natural_size) {
        var mh$ = gtk_cell_area_request_renderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_request_renderer", area, renderer, orientation, widget, for_size, minimum_size, natural_size);
            }
            mh$.invokeExact(area, renderer, orientation, widget, for_size, minimum_size, natural_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_cell_area_set_cell_data_func_with_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_cell_area_set_cell_data_func_with_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_cell_area_set_cell_data_func_with_proxy(GtkCellArea *area, GtkCellRenderer *cell, GFunc func, gpointer func_data, GDestroyNotify destroy, gpointer proxy)
     * }
     */
    public static FunctionDescriptor _gtk_cell_area_set_cell_data_func_with_proxy$descriptor() {
        return _gtk_cell_area_set_cell_data_func_with_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_cell_area_set_cell_data_func_with_proxy(GtkCellArea *area, GtkCellRenderer *cell, GFunc func, gpointer func_data, GDestroyNotify destroy, gpointer proxy)
     * }
     */
    public static MethodHandle _gtk_cell_area_set_cell_data_func_with_proxy$handle() {
        return _gtk_cell_area_set_cell_data_func_with_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_cell_area_set_cell_data_func_with_proxy(GtkCellArea *area, GtkCellRenderer *cell, GFunc func, gpointer func_data, GDestroyNotify destroy, gpointer proxy)
     * }
     */
    public static void _gtk_cell_area_set_cell_data_func_with_proxy(MemorySegment area, MemorySegment cell, MemorySegment func, MemorySegment func_data, MemorySegment destroy, MemorySegment proxy) {
        var mh$ = _gtk_cell_area_set_cell_data_func_with_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_cell_area_set_cell_data_func_with_proxy", area, cell, func, func_data, destroy, proxy);
            }
            mh$.invokeExact(area, cell, func, func_data, destroy, proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TREE_VIEW_COLUMN_GROW_ONLY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0
     * }
     */
    public static int GTK_TREE_VIEW_COLUMN_GROW_ONLY() {
        return GTK_TREE_VIEW_COLUMN_GROW_ONLY;
    }
    private static final int GTK_TREE_VIEW_COLUMN_AUTOSIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1
     * }
     */
    public static int GTK_TREE_VIEW_COLUMN_AUTOSIZE() {
        return GTK_TREE_VIEW_COLUMN_AUTOSIZE;
    }
    private static final int GTK_TREE_VIEW_COLUMN_FIXED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_COLUMN_FIXED = 2
     * }
     */
    public static int GTK_TREE_VIEW_COLUMN_FIXED() {
        return GTK_TREE_VIEW_COLUMN_FIXED;
    }

    private static class gtk_tree_view_column_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_column_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_type$descriptor() {
        return gtk_tree_view_column_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_column_get_type()
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_type$handle() {
        return gtk_tree_view_column_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_view_column_get_type()
     * }
     */
    public static long gtk_tree_view_column_get_type() {
        var mh$ = gtk_tree_view_column_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_column_new()
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_new$descriptor() {
        return gtk_tree_view_column_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_column_new()
     * }
     */
    public static MethodHandle gtk_tree_view_column_new$handle() {
        return gtk_tree_view_column_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_column_new()
     * }
     */
    public static MemorySegment gtk_tree_view_column_new() {
        var mh$ = gtk_tree_view_column_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_new_with_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_new_with_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_column_new_with_area(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_new_with_area$descriptor() {
        return gtk_tree_view_column_new_with_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_column_new_with_area(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_tree_view_column_new_with_area$handle() {
        return gtk_tree_view_column_new_with_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_column_new_with_area(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_tree_view_column_new_with_area(MemorySegment area) {
        var mh$ = gtk_tree_view_column_new_with_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_new_with_area", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_column_new_with_attributes(const gchar *title, GtkCellRenderer *cell, ...)
     * }
     */
    public static class gtk_tree_view_column_new_with_attributes {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_view_column_new_with_attributes");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_view_column_new_with_attributes(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkTreeViewColumn *gtk_tree_view_column_new_with_attributes(const gchar *title, GtkCellRenderer *cell, ...)
         * }
         */
        public static gtk_tree_view_column_new_with_attributes makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_view_column_new_with_attributes(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment title, MemorySegment cell, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_view_column_new_with_attributes", title, cell, x2);
                }
                return (MemorySegment)spreader.invokeExact(title, cell, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_view_column_pack_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_pack_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_pack_start(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_pack_start$descriptor() {
        return gtk_tree_view_column_pack_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_pack_start(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static MethodHandle gtk_tree_view_column_pack_start$handle() {
        return gtk_tree_view_column_pack_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_pack_start(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static void gtk_tree_view_column_pack_start(MemorySegment tree_column, MemorySegment cell, int expand) {
        var mh$ = gtk_tree_view_column_pack_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_pack_start", tree_column, cell, expand);
            }
            mh$.invokeExact(tree_column, cell, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_pack_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_pack_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_pack_end(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_pack_end$descriptor() {
        return gtk_tree_view_column_pack_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_pack_end(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static MethodHandle gtk_tree_view_column_pack_end$handle() {
        return gtk_tree_view_column_pack_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_pack_end(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static void gtk_tree_view_column_pack_end(MemorySegment tree_column, MemorySegment cell, int expand) {
        var mh$ = gtk_tree_view_column_pack_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_pack_end", tree_column, cell, expand);
            }
            mh$.invokeExact(tree_column, cell, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clear(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_clear$descriptor() {
        return gtk_tree_view_column_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clear(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_clear$handle() {
        return gtk_tree_view_column_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clear(GtkTreeViewColumn *tree_column)
     * }
     */
    public static void gtk_tree_view_column_clear(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_clear", tree_column);
            }
            mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_add_attribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_add_attribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_add_attribute(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, const gchar *attribute, gint column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_add_attribute$descriptor() {
        return gtk_tree_view_column_add_attribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_add_attribute(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, const gchar *attribute, gint column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_add_attribute$handle() {
        return gtk_tree_view_column_add_attribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_add_attribute(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, const gchar *attribute, gint column)
     * }
     */
    public static void gtk_tree_view_column_add_attribute(MemorySegment tree_column, MemorySegment cell_renderer, MemorySegment attribute, int column) {
        var mh$ = gtk_tree_view_column_add_attribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_add_attribute", tree_column, cell_renderer, attribute, column);
            }
            mh$.invokeExact(tree_column, cell_renderer, attribute, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_attributes(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, ...)
     * }
     */
    public static class gtk_tree_view_column_set_attributes {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_view_column_set_attributes");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_view_column_set_attributes(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_tree_view_column_set_attributes(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, ...)
         * }
         */
        public static gtk_tree_view_column_set_attributes makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_view_column_set_attributes(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment tree_column, MemorySegment cell_renderer, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_view_column_set_attributes", tree_column, cell_renderer, x2);
                }
                spreader.invokeExact(tree_column, cell_renderer, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_view_column_set_cell_data_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_cell_data_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, GtkTreeCellDataFunc func, gpointer func_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_cell_data_func$descriptor() {
        return gtk_tree_view_column_set_cell_data_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, GtkTreeCellDataFunc func, gpointer func_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_cell_data_func$handle() {
        return gtk_tree_view_column_set_cell_data_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, GtkTreeCellDataFunc func, gpointer func_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_view_column_set_cell_data_func(MemorySegment tree_column, MemorySegment cell_renderer, MemorySegment func, MemorySegment func_data, MemorySegment destroy) {
        var mh$ = gtk_tree_view_column_set_cell_data_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_cell_data_func", tree_column, cell_renderer, func, func_data, destroy);
            }
            mh$.invokeExact(tree_column, cell_renderer, func, func_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_clear_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_clear_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clear_attributes(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_clear_attributes$descriptor() {
        return gtk_tree_view_column_clear_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clear_attributes(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer)
     * }
     */
    public static MethodHandle gtk_tree_view_column_clear_attributes$handle() {
        return gtk_tree_view_column_clear_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clear_attributes(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer)
     * }
     */
    public static void gtk_tree_view_column_clear_attributes(MemorySegment tree_column, MemorySegment cell_renderer) {
        var mh$ = gtk_tree_view_column_clear_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_clear_attributes", tree_column, cell_renderer);
            }
            mh$.invokeExact(tree_column, cell_renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_spacing(GtkTreeViewColumn *tree_column, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_spacing$descriptor() {
        return gtk_tree_view_column_set_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_spacing(GtkTreeViewColumn *tree_column, gint spacing)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_spacing$handle() {
        return gtk_tree_view_column_set_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_spacing(GtkTreeViewColumn *tree_column, gint spacing)
     * }
     */
    public static void gtk_tree_view_column_set_spacing(MemorySegment tree_column, int spacing) {
        var mh$ = gtk_tree_view_column_set_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_spacing", tree_column, spacing);
            }
            mh$.invokeExact(tree_column, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_spacing(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_spacing$descriptor() {
        return gtk_tree_view_column_get_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_spacing(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_spacing$handle() {
        return gtk_tree_view_column_get_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_spacing(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_spacing(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_spacing", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_visible(GtkTreeViewColumn *tree_column, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_visible$descriptor() {
        return gtk_tree_view_column_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_visible(GtkTreeViewColumn *tree_column, gboolean visible)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_visible$handle() {
        return gtk_tree_view_column_set_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_visible(GtkTreeViewColumn *tree_column, gboolean visible)
     * }
     */
    public static void gtk_tree_view_column_set_visible(MemorySegment tree_column, int visible) {
        var mh$ = gtk_tree_view_column_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_visible", tree_column, visible);
            }
            mh$.invokeExact(tree_column, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_visible(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_visible$descriptor() {
        return gtk_tree_view_column_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_visible(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_visible$handle() {
        return gtk_tree_view_column_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_visible(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_visible(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_visible", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_resizable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_resizable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_resizable(GtkTreeViewColumn *tree_column, gboolean resizable)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_resizable$descriptor() {
        return gtk_tree_view_column_set_resizable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_resizable(GtkTreeViewColumn *tree_column, gboolean resizable)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_resizable$handle() {
        return gtk_tree_view_column_set_resizable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_resizable(GtkTreeViewColumn *tree_column, gboolean resizable)
     * }
     */
    public static void gtk_tree_view_column_set_resizable(MemorySegment tree_column, int resizable) {
        var mh$ = gtk_tree_view_column_set_resizable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_resizable", tree_column, resizable);
            }
            mh$.invokeExact(tree_column, resizable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_resizable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_resizable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_resizable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_resizable$descriptor() {
        return gtk_tree_view_column_get_resizable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_resizable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_resizable$handle() {
        return gtk_tree_view_column_get_resizable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_resizable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_resizable(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_resizable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_resizable", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_sizing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_sizing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sizing(GtkTreeViewColumn *tree_column, GtkTreeViewColumnSizing type)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_sizing$descriptor() {
        return gtk_tree_view_column_set_sizing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sizing(GtkTreeViewColumn *tree_column, GtkTreeViewColumnSizing type)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_sizing$handle() {
        return gtk_tree_view_column_set_sizing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sizing(GtkTreeViewColumn *tree_column, GtkTreeViewColumnSizing type)
     * }
     */
    public static void gtk_tree_view_column_set_sizing(MemorySegment tree_column, int type) {
        var mh$ = gtk_tree_view_column_set_sizing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_sizing", tree_column, type);
            }
            mh$.invokeExact(tree_column, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_sizing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_sizing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_sizing$descriptor() {
        return gtk_tree_view_column_get_sizing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_sizing$handle() {
        return gtk_tree_view_column_get_sizing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_sizing(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_sizing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_sizing", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_x_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_x_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_x_offset(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_x_offset$descriptor() {
        return gtk_tree_view_column_get_x_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_x_offset(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_x_offset$handle() {
        return gtk_tree_view_column_get_x_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_x_offset(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_x_offset(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_x_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_x_offset", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_width$descriptor() {
        return gtk_tree_view_column_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_width$handle() {
        return gtk_tree_view_column_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_width(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_width", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_fixed_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_fixed_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_fixed_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_fixed_width$descriptor() {
        return gtk_tree_view_column_get_fixed_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_fixed_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_fixed_width$handle() {
        return gtk_tree_view_column_get_fixed_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_fixed_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_fixed_width(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_fixed_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_fixed_width", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_fixed_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_fixed_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_fixed_width(GtkTreeViewColumn *tree_column, gint fixed_width)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_fixed_width$descriptor() {
        return gtk_tree_view_column_set_fixed_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_fixed_width(GtkTreeViewColumn *tree_column, gint fixed_width)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_fixed_width$handle() {
        return gtk_tree_view_column_set_fixed_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_fixed_width(GtkTreeViewColumn *tree_column, gint fixed_width)
     * }
     */
    public static void gtk_tree_view_column_set_fixed_width(MemorySegment tree_column, int fixed_width) {
        var mh$ = gtk_tree_view_column_set_fixed_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_fixed_width", tree_column, fixed_width);
            }
            mh$.invokeExact(tree_column, fixed_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_min_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_min_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_min_width(GtkTreeViewColumn *tree_column, gint min_width)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_min_width$descriptor() {
        return gtk_tree_view_column_set_min_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_min_width(GtkTreeViewColumn *tree_column, gint min_width)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_min_width$handle() {
        return gtk_tree_view_column_set_min_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_min_width(GtkTreeViewColumn *tree_column, gint min_width)
     * }
     */
    public static void gtk_tree_view_column_set_min_width(MemorySegment tree_column, int min_width) {
        var mh$ = gtk_tree_view_column_set_min_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_min_width", tree_column, min_width);
            }
            mh$.invokeExact(tree_column, min_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_min_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_min_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_min_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_min_width$descriptor() {
        return gtk_tree_view_column_get_min_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_min_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_min_width$handle() {
        return gtk_tree_view_column_get_min_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_min_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_min_width(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_min_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_min_width", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_max_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_max_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_max_width(GtkTreeViewColumn *tree_column, gint max_width)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_max_width$descriptor() {
        return gtk_tree_view_column_set_max_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_max_width(GtkTreeViewColumn *tree_column, gint max_width)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_max_width$handle() {
        return gtk_tree_view_column_set_max_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_max_width(GtkTreeViewColumn *tree_column, gint max_width)
     * }
     */
    public static void gtk_tree_view_column_set_max_width(MemorySegment tree_column, int max_width) {
        var mh$ = gtk_tree_view_column_set_max_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_max_width", tree_column, max_width);
            }
            mh$.invokeExact(tree_column, max_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_max_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_max_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_max_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_max_width$descriptor() {
        return gtk_tree_view_column_get_max_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_max_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_max_width$handle() {
        return gtk_tree_view_column_get_max_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_max_width(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_max_width(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_max_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_max_width", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_clicked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_clicked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clicked(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_clicked$descriptor() {
        return gtk_tree_view_column_clicked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clicked(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_clicked$handle() {
        return gtk_tree_view_column_clicked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_clicked(GtkTreeViewColumn *tree_column)
     * }
     */
    public static void gtk_tree_view_column_clicked(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_clicked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_clicked", tree_column);
            }
            mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_title(GtkTreeViewColumn *tree_column, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_title$descriptor() {
        return gtk_tree_view_column_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_title(GtkTreeViewColumn *tree_column, const gchar *title)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_title$handle() {
        return gtk_tree_view_column_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_title(GtkTreeViewColumn *tree_column, const gchar *title)
     * }
     */
    public static void gtk_tree_view_column_set_title(MemorySegment tree_column, MemorySegment title) {
        var mh$ = gtk_tree_view_column_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_title", tree_column, title);
            }
            mh$.invokeExact(tree_column, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tree_view_column_get_title(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_title$descriptor() {
        return gtk_tree_view_column_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_tree_view_column_get_title(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_title$handle() {
        return gtk_tree_view_column_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_tree_view_column_get_title(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MemorySegment gtk_tree_view_column_get_title(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_title", tree_column);
            }
            return (MemorySegment)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_expand(GtkTreeViewColumn *tree_column, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_expand$descriptor() {
        return gtk_tree_view_column_set_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_expand(GtkTreeViewColumn *tree_column, gboolean expand)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_expand$handle() {
        return gtk_tree_view_column_set_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_expand(GtkTreeViewColumn *tree_column, gboolean expand)
     * }
     */
    public static void gtk_tree_view_column_set_expand(MemorySegment tree_column, int expand) {
        var mh$ = gtk_tree_view_column_set_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_expand", tree_column, expand);
            }
            mh$.invokeExact(tree_column, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_expand(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_expand$descriptor() {
        return gtk_tree_view_column_get_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_expand(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_expand$handle() {
        return gtk_tree_view_column_get_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_expand(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_expand(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_expand", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_clickable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_clickable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_clickable(GtkTreeViewColumn *tree_column, gboolean clickable)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_clickable$descriptor() {
        return gtk_tree_view_column_set_clickable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_clickable(GtkTreeViewColumn *tree_column, gboolean clickable)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_clickable$handle() {
        return gtk_tree_view_column_set_clickable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_clickable(GtkTreeViewColumn *tree_column, gboolean clickable)
     * }
     */
    public static void gtk_tree_view_column_set_clickable(MemorySegment tree_column, int clickable) {
        var mh$ = gtk_tree_view_column_set_clickable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_clickable", tree_column, clickable);
            }
            mh$.invokeExact(tree_column, clickable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_clickable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_clickable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_clickable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_clickable$descriptor() {
        return gtk_tree_view_column_get_clickable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_clickable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_clickable$handle() {
        return gtk_tree_view_column_get_clickable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_clickable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_clickable(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_clickable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_clickable", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_widget(GtkTreeViewColumn *tree_column, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_widget$descriptor() {
        return gtk_tree_view_column_set_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_widget(GtkTreeViewColumn *tree_column, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_widget$handle() {
        return gtk_tree_view_column_set_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_widget(GtkTreeViewColumn *tree_column, GtkWidget *widget)
     * }
     */
    public static void gtk_tree_view_column_set_widget(MemorySegment tree_column, MemorySegment widget) {
        var mh$ = gtk_tree_view_column_set_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_widget", tree_column, widget);
            }
            mh$.invokeExact(tree_column, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_widget(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_widget$descriptor() {
        return gtk_tree_view_column_get_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_widget(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_widget$handle() {
        return gtk_tree_view_column_get_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_widget(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MemorySegment gtk_tree_view_column_get_widget(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_widget", tree_column);
            }
            return (MemorySegment)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_alignment(GtkTreeViewColumn *tree_column, gfloat xalign)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_alignment$descriptor() {
        return gtk_tree_view_column_set_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_alignment(GtkTreeViewColumn *tree_column, gfloat xalign)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_alignment$handle() {
        return gtk_tree_view_column_set_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_alignment(GtkTreeViewColumn *tree_column, gfloat xalign)
     * }
     */
    public static void gtk_tree_view_column_set_alignment(MemorySegment tree_column, float xalign) {
        var mh$ = gtk_tree_view_column_set_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_alignment", tree_column, xalign);
            }
            mh$.invokeExact(tree_column, xalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat gtk_tree_view_column_get_alignment(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_alignment$descriptor() {
        return gtk_tree_view_column_get_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat gtk_tree_view_column_get_alignment(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_alignment$handle() {
        return gtk_tree_view_column_get_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gfloat gtk_tree_view_column_get_alignment(GtkTreeViewColumn *tree_column)
     * }
     */
    public static float gtk_tree_view_column_get_alignment(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_alignment", tree_column);
            }
            return (float)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_reorderable(GtkTreeViewColumn *tree_column, gboolean reorderable)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_reorderable$descriptor() {
        return gtk_tree_view_column_set_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_reorderable(GtkTreeViewColumn *tree_column, gboolean reorderable)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_reorderable$handle() {
        return gtk_tree_view_column_set_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_reorderable(GtkTreeViewColumn *tree_column, gboolean reorderable)
     * }
     */
    public static void gtk_tree_view_column_set_reorderable(MemorySegment tree_column, int reorderable) {
        var mh$ = gtk_tree_view_column_set_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_reorderable", tree_column, reorderable);
            }
            mh$.invokeExact(tree_column, reorderable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_reorderable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_reorderable$descriptor() {
        return gtk_tree_view_column_get_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_reorderable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_reorderable$handle() {
        return gtk_tree_view_column_get_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_reorderable(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_reorderable(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_reorderable", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_sort_column_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_sort_column_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_column_id(GtkTreeViewColumn *tree_column, gint sort_column_id)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_sort_column_id$descriptor() {
        return gtk_tree_view_column_set_sort_column_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_column_id(GtkTreeViewColumn *tree_column, gint sort_column_id)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_sort_column_id$handle() {
        return gtk_tree_view_column_set_sort_column_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_column_id(GtkTreeViewColumn *tree_column, gint sort_column_id)
     * }
     */
    public static void gtk_tree_view_column_set_sort_column_id(MemorySegment tree_column, int sort_column_id) {
        var mh$ = gtk_tree_view_column_set_sort_column_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_sort_column_id", tree_column, sort_column_id);
            }
            mh$.invokeExact(tree_column, sort_column_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_sort_column_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_sort_column_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_sort_column_id(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_sort_column_id$descriptor() {
        return gtk_tree_view_column_get_sort_column_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_sort_column_id(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_sort_column_id$handle() {
        return gtk_tree_view_column_get_sort_column_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_column_get_sort_column_id(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_sort_column_id(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_sort_column_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_sort_column_id", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_sort_indicator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_sort_indicator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_indicator(GtkTreeViewColumn *tree_column, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_sort_indicator$descriptor() {
        return gtk_tree_view_column_set_sort_indicator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_indicator(GtkTreeViewColumn *tree_column, gboolean setting)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_sort_indicator$handle() {
        return gtk_tree_view_column_set_sort_indicator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_indicator(GtkTreeViewColumn *tree_column, gboolean setting)
     * }
     */
    public static void gtk_tree_view_column_set_sort_indicator(MemorySegment tree_column, int setting) {
        var mh$ = gtk_tree_view_column_set_sort_indicator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_sort_indicator", tree_column, setting);
            }
            mh$.invokeExact(tree_column, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_sort_indicator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_sort_indicator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_sort_indicator(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_sort_indicator$descriptor() {
        return gtk_tree_view_column_get_sort_indicator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_sort_indicator(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_sort_indicator$handle() {
        return gtk_tree_view_column_get_sort_indicator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_get_sort_indicator(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_sort_indicator(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_sort_indicator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_sort_indicator", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_set_sort_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_set_sort_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_order(GtkTreeViewColumn *tree_column, GtkSortType order)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_set_sort_order$descriptor() {
        return gtk_tree_view_column_set_sort_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_order(GtkTreeViewColumn *tree_column, GtkSortType order)
     * }
     */
    public static MethodHandle gtk_tree_view_column_set_sort_order$handle() {
        return gtk_tree_view_column_set_sort_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_set_sort_order(GtkTreeViewColumn *tree_column, GtkSortType order)
     * }
     */
    public static void gtk_tree_view_column_set_sort_order(MemorySegment tree_column, int order) {
        var mh$ = gtk_tree_view_column_set_sort_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_set_sort_order", tree_column, order);
            }
            mh$.invokeExact(tree_column, order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_sort_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_sort_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSortType gtk_tree_view_column_get_sort_order(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_sort_order$descriptor() {
        return gtk_tree_view_column_get_sort_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSortType gtk_tree_view_column_get_sort_order(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_sort_order$handle() {
        return gtk_tree_view_column_get_sort_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSortType gtk_tree_view_column_get_sort_order(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_get_sort_order(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_sort_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_sort_order", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_cell_set_cell_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_cell_set_cell_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_cell_set_cell_data(GtkTreeViewColumn *tree_column, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_cell_set_cell_data$descriptor() {
        return gtk_tree_view_column_cell_set_cell_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_cell_set_cell_data(GtkTreeViewColumn *tree_column, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded)
     * }
     */
    public static MethodHandle gtk_tree_view_column_cell_set_cell_data$handle() {
        return gtk_tree_view_column_cell_set_cell_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_cell_set_cell_data(GtkTreeViewColumn *tree_column, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded)
     * }
     */
    public static void gtk_tree_view_column_cell_set_cell_data(MemorySegment tree_column, MemorySegment tree_model, MemorySegment iter, int is_expander, int is_expanded) {
        var mh$ = gtk_tree_view_column_cell_set_cell_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_cell_set_cell_data", tree_column, tree_model, iter, is_expander, is_expanded);
            }
            mh$.invokeExact(tree_column, tree_model, iter, is_expander, is_expanded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_cell_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_cell_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_cell_get_size(GtkTreeViewColumn *tree_column, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_cell_get_size$descriptor() {
        return gtk_tree_view_column_cell_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_cell_get_size(GtkTreeViewColumn *tree_column, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_tree_view_column_cell_get_size$handle() {
        return gtk_tree_view_column_cell_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_cell_get_size(GtkTreeViewColumn *tree_column, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height)
     * }
     */
    public static void gtk_tree_view_column_cell_get_size(MemorySegment tree_column, MemorySegment cell_area, MemorySegment x_offset, MemorySegment y_offset, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_tree_view_column_cell_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_cell_get_size", tree_column, cell_area, x_offset, y_offset, width, height);
            }
            mh$.invokeExact(tree_column, cell_area, x_offset, y_offset, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_cell_is_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_cell_is_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_cell_is_visible(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_cell_is_visible$descriptor() {
        return gtk_tree_view_column_cell_is_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_cell_is_visible(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_cell_is_visible$handle() {
        return gtk_tree_view_column_cell_is_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_cell_is_visible(GtkTreeViewColumn *tree_column)
     * }
     */
    public static int gtk_tree_view_column_cell_is_visible(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_cell_is_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_cell_is_visible", tree_column);
            }
            return (int)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_focus_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_focus_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_focus_cell(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_focus_cell$descriptor() {
        return gtk_tree_view_column_focus_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_focus_cell(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_tree_view_column_focus_cell$handle() {
        return gtk_tree_view_column_focus_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_focus_cell(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell)
     * }
     */
    public static void gtk_tree_view_column_focus_cell(MemorySegment tree_column, MemorySegment cell) {
        var mh$ = gtk_tree_view_column_focus_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_focus_cell", tree_column, cell);
            }
            mh$.invokeExact(tree_column, cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_cell_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_cell_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_cell_get_position(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, gint *x_offset, gint *width)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_cell_get_position$descriptor() {
        return gtk_tree_view_column_cell_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_cell_get_position(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, gint *x_offset, gint *width)
     * }
     */
    public static MethodHandle gtk_tree_view_column_cell_get_position$handle() {
        return gtk_tree_view_column_cell_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_column_cell_get_position(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, gint *x_offset, gint *width)
     * }
     */
    public static int gtk_tree_view_column_cell_get_position(MemorySegment tree_column, MemorySegment cell_renderer, MemorySegment x_offset, MemorySegment width) {
        var mh$ = gtk_tree_view_column_cell_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_cell_get_position", tree_column, cell_renderer, x_offset, width);
            }
            return (int)mh$.invokeExact(tree_column, cell_renderer, x_offset, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_queue_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_queue_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_queue_resize(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_queue_resize$descriptor() {
        return gtk_tree_view_column_queue_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_queue_resize(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_queue_resize$handle() {
        return gtk_tree_view_column_queue_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_column_queue_resize(GtkTreeViewColumn *tree_column)
     * }
     */
    public static void gtk_tree_view_column_queue_resize(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_queue_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_queue_resize", tree_column);
            }
            mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_tree_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_tree_view"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_tree_view(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_tree_view$descriptor() {
        return gtk_tree_view_column_get_tree_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_tree_view(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_tree_view$handle() {
        return gtk_tree_view_column_get_tree_view.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_tree_view(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MemorySegment gtk_tree_view_column_get_tree_view(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_tree_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_tree_view", tree_column);
            }
            return (MemorySegment)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_column_get_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_column_get_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_button(GtkTreeViewColumn *tree_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_column_get_button$descriptor() {
        return gtk_tree_view_column_get_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_button(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MethodHandle gtk_tree_view_column_get_button$handle() {
        return gtk_tree_view_column_get_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_column_get_button(GtkTreeViewColumn *tree_column)
     * }
     */
    public static MemorySegment gtk_tree_view_column_get_button(MemorySegment tree_column) {
        var mh$ = gtk_tree_view_column_get_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_column_get_button", tree_column);
            }
            return (MemorySegment)mh$.invokeExact(tree_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_attributes_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_attributes_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_new()
     * }
     */
    public static FunctionDescriptor gtk_text_attributes_new$descriptor() {
        return gtk_text_attributes_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_new()
     * }
     */
    public static MethodHandle gtk_text_attributes_new$handle() {
        return gtk_text_attributes_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_new()
     * }
     */
    public static MemorySegment gtk_text_attributes_new() {
        var mh$ = gtk_text_attributes_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_attributes_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_attributes_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_attributes_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_copy(GtkTextAttributes *src)
     * }
     */
    public static FunctionDescriptor gtk_text_attributes_copy$descriptor() {
        return gtk_text_attributes_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_copy(GtkTextAttributes *src)
     * }
     */
    public static MethodHandle gtk_text_attributes_copy$handle() {
        return gtk_text_attributes_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_copy(GtkTextAttributes *src)
     * }
     */
    public static MemorySegment gtk_text_attributes_copy(MemorySegment src) {
        var mh$ = gtk_text_attributes_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_attributes_copy", src);
            }
            return (MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_attributes_copy_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_attributes_copy_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_attributes_copy_values(GtkTextAttributes *src, GtkTextAttributes *dest)
     * }
     */
    public static FunctionDescriptor gtk_text_attributes_copy_values$descriptor() {
        return gtk_text_attributes_copy_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_attributes_copy_values(GtkTextAttributes *src, GtkTextAttributes *dest)
     * }
     */
    public static MethodHandle gtk_text_attributes_copy_values$handle() {
        return gtk_text_attributes_copy_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_attributes_copy_values(GtkTextAttributes *src, GtkTextAttributes *dest)
     * }
     */
    public static void gtk_text_attributes_copy_values(MemorySegment src, MemorySegment dest) {
        var mh$ = gtk_text_attributes_copy_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_attributes_copy_values", src, dest);
            }
            mh$.invokeExact(src, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_attributes_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_attributes_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_attributes_unref(GtkTextAttributes *values)
     * }
     */
    public static FunctionDescriptor gtk_text_attributes_unref$descriptor() {
        return gtk_text_attributes_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_attributes_unref(GtkTextAttributes *values)
     * }
     */
    public static MethodHandle gtk_text_attributes_unref$handle() {
        return gtk_text_attributes_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_attributes_unref(GtkTextAttributes *values)
     * }
     */
    public static void gtk_text_attributes_unref(MemorySegment values) {
        var mh$ = gtk_text_attributes_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_attributes_unref", values);
            }
            mh$.invokeExact(values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_attributes_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_attributes_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_ref(GtkTextAttributes *values)
     * }
     */
    public static FunctionDescriptor gtk_text_attributes_ref$descriptor() {
        return gtk_text_attributes_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_ref(GtkTextAttributes *values)
     * }
     */
    public static MethodHandle gtk_text_attributes_ref$handle() {
        return gtk_text_attributes_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextAttributes *gtk_text_attributes_ref(GtkTextAttributes *values)
     * }
     */
    public static MemorySegment gtk_text_attributes_ref(MemorySegment values) {
        var mh$ = gtk_text_attributes_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_attributes_ref", values);
            }
            return (MemorySegment)mh$.invokeExact(values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_attributes_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_attributes_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_attributes_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_attributes_get_type$descriptor() {
        return gtk_text_attributes_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_attributes_get_type()
     * }
     */
    public static MethodHandle gtk_text_attributes_get_type$handle() {
        return gtk_text_attributes_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_attributes_get_type()
     * }
     */
    public static long gtk_text_attributes_get_type() {
        var mh$ = gtk_text_attributes_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_attributes_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_child_anchor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_child_anchor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_child_anchor_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_child_anchor_get_type$descriptor() {
        return gtk_text_child_anchor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_child_anchor_get_type()
     * }
     */
    public static MethodHandle gtk_text_child_anchor_get_type$handle() {
        return gtk_text_child_anchor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_child_anchor_get_type()
     * }
     */
    public static long gtk_text_child_anchor_get_type() {
        var mh$ = gtk_text_child_anchor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_child_anchor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_child_anchor_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_child_anchor_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_child_anchor_new()
     * }
     */
    public static FunctionDescriptor gtk_text_child_anchor_new$descriptor() {
        return gtk_text_child_anchor_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_child_anchor_new()
     * }
     */
    public static MethodHandle gtk_text_child_anchor_new$handle() {
        return gtk_text_child_anchor_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_child_anchor_new()
     * }
     */
    public static MemorySegment gtk_text_child_anchor_new() {
        var mh$ = gtk_text_child_anchor_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_child_anchor_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_child_anchor_get_widgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_child_anchor_get_widgets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_text_child_anchor_get_widgets(GtkTextChildAnchor *anchor)
     * }
     */
    public static FunctionDescriptor gtk_text_child_anchor_get_widgets$descriptor() {
        return gtk_text_child_anchor_get_widgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_text_child_anchor_get_widgets(GtkTextChildAnchor *anchor)
     * }
     */
    public static MethodHandle gtk_text_child_anchor_get_widgets$handle() {
        return gtk_text_child_anchor_get_widgets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_text_child_anchor_get_widgets(GtkTextChildAnchor *anchor)
     * }
     */
    public static MemorySegment gtk_text_child_anchor_get_widgets(MemorySegment anchor) {
        var mh$ = gtk_text_child_anchor_get_widgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_child_anchor_get_widgets", anchor);
            }
            return (MemorySegment)mh$.invokeExact(anchor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_child_anchor_get_deleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_child_anchor_get_deleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_child_anchor_get_deleted(GtkTextChildAnchor *anchor)
     * }
     */
    public static FunctionDescriptor gtk_text_child_anchor_get_deleted$descriptor() {
        return gtk_text_child_anchor_get_deleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_child_anchor_get_deleted(GtkTextChildAnchor *anchor)
     * }
     */
    public static MethodHandle gtk_text_child_anchor_get_deleted$handle() {
        return gtk_text_child_anchor_get_deleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_child_anchor_get_deleted(GtkTextChildAnchor *anchor)
     * }
     */
    public static int gtk_text_child_anchor_get_deleted(MemorySegment anchor) {
        var mh$ = gtk_text_child_anchor_get_deleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_child_anchor_get_deleted", anchor);
            }
            return (int)mh$.invokeExact(anchor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_tag_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_tag_get_type$descriptor() {
        return gtk_text_tag_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_tag_get_type()
     * }
     */
    public static MethodHandle gtk_text_tag_get_type$handle() {
        return gtk_text_tag_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_tag_get_type()
     * }
     */
    public static long gtk_text_tag_get_type() {
        var mh$ = gtk_text_tag_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextTag *gtk_text_tag_new(const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_new$descriptor() {
        return gtk_text_tag_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextTag *gtk_text_tag_new(const gchar *name)
     * }
     */
    public static MethodHandle gtk_text_tag_new$handle() {
        return gtk_text_tag_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextTag *gtk_text_tag_new(const gchar *name)
     * }
     */
    public static MemorySegment gtk_text_tag_new(MemorySegment name) {
        var mh$ = gtk_text_tag_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_new", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_get_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_get_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_tag_get_priority(GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_get_priority$descriptor() {
        return gtk_text_tag_get_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_tag_get_priority(GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_tag_get_priority$handle() {
        return gtk_text_tag_get_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_tag_get_priority(GtkTextTag *tag)
     * }
     */
    public static int gtk_text_tag_get_priority(MemorySegment tag) {
        var mh$ = gtk_text_tag_get_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_get_priority", tag);
            }
            return (int)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_set_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_set_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_set_priority(GtkTextTag *tag, gint priority)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_set_priority$descriptor() {
        return gtk_text_tag_set_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_set_priority(GtkTextTag *tag, gint priority)
     * }
     */
    public static MethodHandle gtk_text_tag_set_priority$handle() {
        return gtk_text_tag_set_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_tag_set_priority(GtkTextTag *tag, gint priority)
     * }
     */
    public static void gtk_text_tag_set_priority(MemorySegment tag, int priority) {
        var mh$ = gtk_text_tag_set_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_set_priority", tag, priority);
            }
            mh$.invokeExact(tag, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_tag_event(GtkTextTag *tag, GObject *event_object, GdkEvent *event, const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_event$descriptor() {
        return gtk_text_tag_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_tag_event(GtkTextTag *tag, GObject *event_object, GdkEvent *event, const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_tag_event$handle() {
        return gtk_text_tag_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_tag_event(GtkTextTag *tag, GObject *event_object, GdkEvent *event, const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_tag_event(MemorySegment tag, MemorySegment event_object, MemorySegment event, MemorySegment iter) {
        var mh$ = gtk_text_tag_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_event", tag, event_object, event, iter);
            }
            return (int)mh$.invokeExact(tag, event_object, event, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_tag_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_tag_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_changed(GtkTextTag *tag, gboolean size_changed)
     * }
     */
    public static FunctionDescriptor gtk_text_tag_changed$descriptor() {
        return gtk_text_tag_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_tag_changed(GtkTextTag *tag, gboolean size_changed)
     * }
     */
    public static MethodHandle gtk_text_tag_changed$handle() {
        return gtk_text_tag_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_tag_changed(GtkTextTag *tag, gboolean size_changed)
     * }
     */
    public static void gtk_text_tag_changed(MemorySegment tag, int size_changed) {
        var mh$ = gtk_text_tag_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_tag_changed", tag, size_changed);
            }
            mh$.invokeExact(tag, size_changed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TEXT_SEARCH_VISIBLE_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_SEARCH_VISIBLE_ONLY = 1
     * }
     */
    public static int GTK_TEXT_SEARCH_VISIBLE_ONLY() {
        return GTK_TEXT_SEARCH_VISIBLE_ONLY;
    }
    private static final int GTK_TEXT_SEARCH_TEXT_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_SEARCH_TEXT_ONLY = 2
     * }
     */
    public static int GTK_TEXT_SEARCH_TEXT_ONLY() {
        return GTK_TEXT_SEARCH_TEXT_ONLY;
    }
    private static final int GTK_TEXT_SEARCH_CASE_INSENSITIVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_SEARCH_CASE_INSENSITIVE = 4
     * }
     */
    public static int GTK_TEXT_SEARCH_CASE_INSENSITIVE() {
        return GTK_TEXT_SEARCH_CASE_INSENSITIVE;
    }

    private static class gtk_text_iter_get_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_iter_get_buffer(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_buffer$descriptor() {
        return gtk_text_iter_get_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_iter_get_buffer(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_buffer$handle() {
        return gtk_text_iter_get_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextBuffer *gtk_text_iter_get_buffer(const GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_iter_get_buffer(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_buffer", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextIter *gtk_text_iter_copy(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_copy$descriptor() {
        return gtk_text_iter_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextIter *gtk_text_iter_copy(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_copy$handle() {
        return gtk_text_iter_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextIter *gtk_text_iter_copy(const GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_iter_copy(MemorySegment iter) {
        var mh$ = gtk_text_iter_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_copy", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_free(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_free$descriptor() {
        return gtk_text_iter_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_free(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_free$handle() {
        return gtk_text_iter_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_free(GtkTextIter *iter)
     * }
     */
    public static void gtk_text_iter_free(MemorySegment iter) {
        var mh$ = gtk_text_iter_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_free", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_assign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_assign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_assign(GtkTextIter *iter, const GtkTextIter *other)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_assign$descriptor() {
        return gtk_text_iter_assign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_assign(GtkTextIter *iter, const GtkTextIter *other)
     * }
     */
    public static MethodHandle gtk_text_iter_assign$handle() {
        return gtk_text_iter_assign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_assign(GtkTextIter *iter, const GtkTextIter *other)
     * }
     */
    public static void gtk_text_iter_assign(MemorySegment iter, MemorySegment other) {
        var mh$ = gtk_text_iter_assign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_assign", iter, other);
            }
            mh$.invokeExact(iter, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_text_iter_get_type()
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_type$descriptor() {
        return gtk_text_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_text_iter_get_type()
     * }
     */
    public static MethodHandle gtk_text_iter_get_type$handle() {
        return gtk_text_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_text_iter_get_type()
     * }
     */
    public static long gtk_text_iter_get_type() {
        var mh$ = gtk_text_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_offset(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_offset$descriptor() {
        return gtk_text_iter_get_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_offset(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_offset$handle() {
        return gtk_text_iter_get_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_offset(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_offset(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_offset", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_line$descriptor() {
        return gtk_text_iter_get_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_line$handle() {
        return gtk_text_iter_get_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_line_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_line_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line_offset(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_line_offset$descriptor() {
        return gtk_text_iter_get_line_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line_offset(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_line_offset$handle() {
        return gtk_text_iter_get_line_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line_offset(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_line_offset(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_line_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_line_offset", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_line_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_line_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line_index(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_line_index$descriptor() {
        return gtk_text_iter_get_line_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line_index(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_line_index$handle() {
        return gtk_text_iter_get_line_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_line_index(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_line_index(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_line_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_line_index", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_visible_line_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_visible_line_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_visible_line_offset(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_visible_line_offset$descriptor() {
        return gtk_text_iter_get_visible_line_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_visible_line_offset(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_visible_line_offset$handle() {
        return gtk_text_iter_get_visible_line_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_visible_line_offset(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_visible_line_offset(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_visible_line_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_visible_line_offset", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_visible_line_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_visible_line_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_visible_line_index(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_visible_line_index$descriptor() {
        return gtk_text_iter_get_visible_line_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_visible_line_index(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_visible_line_index$handle() {
        return gtk_text_iter_get_visible_line_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_visible_line_index(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_visible_line_index(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_visible_line_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_visible_line_index", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar gtk_text_iter_get_char(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_char$descriptor() {
        return gtk_text_iter_get_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar gtk_text_iter_get_char(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_char$handle() {
        return gtk_text_iter_get_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar gtk_text_iter_get_char(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_char(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_char", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_slice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_slice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_slice(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_slice$descriptor() {
        return gtk_text_iter_get_slice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_slice(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_iter_get_slice$handle() {
        return gtk_text_iter_get_slice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_slice(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MemorySegment gtk_text_iter_get_slice(MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_iter_get_slice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_slice", start, end);
            }
            return (MemorySegment)mh$.invokeExact(start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_text(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_text$descriptor() {
        return gtk_text_iter_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_text(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_iter_get_text$handle() {
        return gtk_text_iter_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_text(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MemorySegment gtk_text_iter_get_text(MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_iter_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_text", start, end);
            }
            return (MemorySegment)mh$.invokeExact(start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_visible_slice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_visible_slice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_visible_slice(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_visible_slice$descriptor() {
        return gtk_text_iter_get_visible_slice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_visible_slice(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_iter_get_visible_slice$handle() {
        return gtk_text_iter_get_visible_slice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_visible_slice(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MemorySegment gtk_text_iter_get_visible_slice(MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_iter_get_visible_slice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_visible_slice", start, end);
            }
            return (MemorySegment)mh$.invokeExact(start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_visible_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_visible_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_visible_text(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_visible_text$descriptor() {
        return gtk_text_iter_get_visible_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_visible_text(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_iter_get_visible_text$handle() {
        return gtk_text_iter_get_visible_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_text_iter_get_visible_text(const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MemorySegment gtk_text_iter_get_visible_text(MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_iter_get_visible_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_visible_text", start, end);
            }
            return (MemorySegment)mh$.invokeExact(start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_text_iter_get_pixbuf(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_pixbuf$descriptor() {
        return gtk_text_iter_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_text_iter_get_pixbuf(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_pixbuf$handle() {
        return gtk_text_iter_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_text_iter_get_pixbuf(const GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_iter_get_pixbuf(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_pixbuf", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_marks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_marks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_marks(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_marks$descriptor() {
        return gtk_text_iter_get_marks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_marks(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_marks$handle() {
        return gtk_text_iter_get_marks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_marks(const GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_iter_get_marks(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_marks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_marks", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_child_anchor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_child_anchor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_iter_get_child_anchor(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_child_anchor$descriptor() {
        return gtk_text_iter_get_child_anchor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_iter_get_child_anchor(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_child_anchor$handle() {
        return gtk_text_iter_get_child_anchor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextChildAnchor *gtk_text_iter_get_child_anchor(const GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_iter_get_child_anchor(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_child_anchor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_child_anchor", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_toggled_tags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_toggled_tags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_toggled_tags(const GtkTextIter *iter, gboolean toggled_on)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_toggled_tags$descriptor() {
        return gtk_text_iter_get_toggled_tags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_toggled_tags(const GtkTextIter *iter, gboolean toggled_on)
     * }
     */
    public static MethodHandle gtk_text_iter_get_toggled_tags$handle() {
        return gtk_text_iter_get_toggled_tags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_toggled_tags(const GtkTextIter *iter, gboolean toggled_on)
     * }
     */
    public static MemorySegment gtk_text_iter_get_toggled_tags(MemorySegment iter, int toggled_on) {
        var mh$ = gtk_text_iter_get_toggled_tags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_toggled_tags", iter, toggled_on);
            }
            return (MemorySegment)mh$.invokeExact(iter, toggled_on);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_starts_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_starts_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_starts_tag$descriptor() {
        return gtk_text_iter_starts_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_iter_starts_tag$handle() {
        return gtk_text_iter_starts_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_iter_starts_tag(MemorySegment iter, MemorySegment tag) {
        var mh$ = gtk_text_iter_starts_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_starts_tag", iter, tag);
            }
            return (int)mh$.invokeExact(iter, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_begins_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_begins_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_begins_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_begins_tag$descriptor() {
        return gtk_text_iter_begins_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_begins_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_iter_begins_tag$handle() {
        return gtk_text_iter_begins_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_begins_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_iter_begins_tag(MemorySegment iter, MemorySegment tag) {
        var mh$ = gtk_text_iter_begins_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_begins_tag", iter, tag);
            }
            return (int)mh$.invokeExact(iter, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_ends_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_ends_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_ends_tag$descriptor() {
        return gtk_text_iter_ends_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_iter_ends_tag$handle() {
        return gtk_text_iter_ends_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_iter_ends_tag(MemorySegment iter, MemorySegment tag) {
        var mh$ = gtk_text_iter_ends_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_ends_tag", iter, tag);
            }
            return (int)mh$.invokeExact(iter, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_toggles_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_toggles_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_toggles_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_toggles_tag$descriptor() {
        return gtk_text_iter_toggles_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_toggles_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_iter_toggles_tag$handle() {
        return gtk_text_iter_toggles_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_toggles_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_iter_toggles_tag(MemorySegment iter, MemorySegment tag) {
        var mh$ = gtk_text_iter_toggles_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_toggles_tag", iter, tag);
            }
            return (int)mh$.invokeExact(iter, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_has_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_has_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_has_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_has_tag$descriptor() {
        return gtk_text_iter_has_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_has_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_iter_has_tag$handle() {
        return gtk_text_iter_has_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_has_tag(const GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_iter_has_tag(MemorySegment iter, MemorySegment tag) {
        var mh$ = gtk_text_iter_has_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_has_tag", iter, tag);
            }
            return (int)mh$.invokeExact(iter, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_tags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_tags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_tags(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_tags$descriptor() {
        return gtk_text_iter_get_tags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_tags(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_tags$handle() {
        return gtk_text_iter_get_tags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_text_iter_get_tags(const GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_iter_get_tags(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_tags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_tags", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_editable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_editable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_editable(const GtkTextIter *iter, gboolean default_setting)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_editable$descriptor() {
        return gtk_text_iter_editable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_editable(const GtkTextIter *iter, gboolean default_setting)
     * }
     */
    public static MethodHandle gtk_text_iter_editable$handle() {
        return gtk_text_iter_editable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_editable(const GtkTextIter *iter, gboolean default_setting)
     * }
     */
    public static int gtk_text_iter_editable(MemorySegment iter, int default_setting) {
        var mh$ = gtk_text_iter_editable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_editable", iter, default_setting);
            }
            return (int)mh$.invokeExact(iter, default_setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_can_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_can_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_can_insert(const GtkTextIter *iter, gboolean default_editability)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_can_insert$descriptor() {
        return gtk_text_iter_can_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_can_insert(const GtkTextIter *iter, gboolean default_editability)
     * }
     */
    public static MethodHandle gtk_text_iter_can_insert$handle() {
        return gtk_text_iter_can_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_can_insert(const GtkTextIter *iter, gboolean default_editability)
     * }
     */
    public static int gtk_text_iter_can_insert(MemorySegment iter, int default_editability) {
        var mh$ = gtk_text_iter_can_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_can_insert", iter, default_editability);
            }
            return (int)mh$.invokeExact(iter, default_editability);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_starts_word {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_starts_word"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_word(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_starts_word$descriptor() {
        return gtk_text_iter_starts_word.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_word(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_starts_word$handle() {
        return gtk_text_iter_starts_word.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_word(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_starts_word(MemorySegment iter) {
        var mh$ = gtk_text_iter_starts_word.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_starts_word", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_ends_word {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_ends_word"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_word(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_ends_word$descriptor() {
        return gtk_text_iter_ends_word.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_word(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_ends_word$handle() {
        return gtk_text_iter_ends_word.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_word(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_ends_word(MemorySegment iter) {
        var mh$ = gtk_text_iter_ends_word.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_ends_word", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_inside_word {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_inside_word"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_inside_word(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_inside_word$descriptor() {
        return gtk_text_iter_inside_word.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_inside_word(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_inside_word$handle() {
        return gtk_text_iter_inside_word.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_inside_word(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_inside_word(MemorySegment iter) {
        var mh$ = gtk_text_iter_inside_word.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_inside_word", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_starts_sentence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_starts_sentence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_sentence(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_starts_sentence$descriptor() {
        return gtk_text_iter_starts_sentence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_sentence(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_starts_sentence$handle() {
        return gtk_text_iter_starts_sentence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_sentence(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_starts_sentence(MemorySegment iter) {
        var mh$ = gtk_text_iter_starts_sentence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_starts_sentence", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_ends_sentence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_ends_sentence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_sentence(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_ends_sentence$descriptor() {
        return gtk_text_iter_ends_sentence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_sentence(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_ends_sentence$handle() {
        return gtk_text_iter_ends_sentence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_sentence(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_ends_sentence(MemorySegment iter) {
        var mh$ = gtk_text_iter_ends_sentence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_ends_sentence", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_inside_sentence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_inside_sentence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_inside_sentence(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_inside_sentence$descriptor() {
        return gtk_text_iter_inside_sentence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_inside_sentence(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_inside_sentence$handle() {
        return gtk_text_iter_inside_sentence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_inside_sentence(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_inside_sentence(MemorySegment iter) {
        var mh$ = gtk_text_iter_inside_sentence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_inside_sentence", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_starts_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_starts_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_line(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_starts_line$descriptor() {
        return gtk_text_iter_starts_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_line(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_starts_line$handle() {
        return gtk_text_iter_starts_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_starts_line(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_starts_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_starts_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_starts_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_ends_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_ends_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_line(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_ends_line$descriptor() {
        return gtk_text_iter_ends_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_line(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_ends_line$handle() {
        return gtk_text_iter_ends_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_ends_line(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_ends_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_ends_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_ends_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_is_cursor_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_is_cursor_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_cursor_position(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_is_cursor_position$descriptor() {
        return gtk_text_iter_is_cursor_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_cursor_position(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_is_cursor_position$handle() {
        return gtk_text_iter_is_cursor_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_cursor_position(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_is_cursor_position(MemorySegment iter) {
        var mh$ = gtk_text_iter_is_cursor_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_is_cursor_position", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_chars_in_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_chars_in_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_chars_in_line(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_chars_in_line$descriptor() {
        return gtk_text_iter_get_chars_in_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_chars_in_line(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_chars_in_line$handle() {
        return gtk_text_iter_get_chars_in_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_chars_in_line(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_chars_in_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_chars_in_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_chars_in_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_bytes_in_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_bytes_in_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_bytes_in_line(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_bytes_in_line$descriptor() {
        return gtk_text_iter_get_bytes_in_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_bytes_in_line(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_bytes_in_line$handle() {
        return gtk_text_iter_get_bytes_in_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_get_bytes_in_line(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_get_bytes_in_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_bytes_in_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_bytes_in_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_get_attributes(const GtkTextIter *iter, GtkTextAttributes *values)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_attributes$descriptor() {
        return gtk_text_iter_get_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_get_attributes(const GtkTextIter *iter, GtkTextAttributes *values)
     * }
     */
    public static MethodHandle gtk_text_iter_get_attributes$handle() {
        return gtk_text_iter_get_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_get_attributes(const GtkTextIter *iter, GtkTextAttributes *values)
     * }
     */
    public static int gtk_text_iter_get_attributes(MemorySegment iter, MemorySegment values) {
        var mh$ = gtk_text_iter_get_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_attributes", iter, values);
            }
            return (int)mh$.invokeExact(iter, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_get_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_get_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage *gtk_text_iter_get_language(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_get_language$descriptor() {
        return gtk_text_iter_get_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage *gtk_text_iter_get_language(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_get_language$handle() {
        return gtk_text_iter_get_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage *gtk_text_iter_get_language(const GtkTextIter *iter)
     * }
     */
    public static MemorySegment gtk_text_iter_get_language(MemorySegment iter) {
        var mh$ = gtk_text_iter_get_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_get_language", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_is_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_is_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_end(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_is_end$descriptor() {
        return gtk_text_iter_is_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_end(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_is_end$handle() {
        return gtk_text_iter_is_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_end(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_is_end(MemorySegment iter) {
        var mh$ = gtk_text_iter_is_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_is_end", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_is_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_is_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_start(const GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_is_start$descriptor() {
        return gtk_text_iter_is_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_start(const GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_is_start$handle() {
        return gtk_text_iter_is_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_is_start(const GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_is_start(MemorySegment iter) {
        var mh$ = gtk_text_iter_is_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_is_start", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_char(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_char$descriptor() {
        return gtk_text_iter_forward_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_char(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_char$handle() {
        return gtk_text_iter_forward_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_char(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_char(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_char", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_char(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_char$descriptor() {
        return gtk_text_iter_backward_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_char(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_char$handle() {
        return gtk_text_iter_backward_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_char(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_char(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_char", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_chars(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_chars$descriptor() {
        return gtk_text_iter_forward_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_chars(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_chars$handle() {
        return gtk_text_iter_forward_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_chars(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_chars(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_chars", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_chars(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_chars$descriptor() {
        return gtk_text_iter_backward_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_chars(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_chars$handle() {
        return gtk_text_iter_backward_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_chars(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_chars(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_chars", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_line(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_line$descriptor() {
        return gtk_text_iter_forward_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_line(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_line$handle() {
        return gtk_text_iter_forward_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_line(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_line(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_line$descriptor() {
        return gtk_text_iter_backward_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_line(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_line$handle() {
        return gtk_text_iter_backward_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_line(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_lines$descriptor() {
        return gtk_text_iter_forward_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_lines$handle() {
        return gtk_text_iter_forward_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_lines(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_lines", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_lines$descriptor() {
        return gtk_text_iter_backward_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_lines$handle() {
        return gtk_text_iter_backward_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_lines(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_lines", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_word_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_word_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_word_end(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_word_end$descriptor() {
        return gtk_text_iter_forward_word_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_word_end(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_word_end$handle() {
        return gtk_text_iter_forward_word_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_word_end(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_word_end(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_word_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_word_end", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_word_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_word_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_word_start(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_word_start$descriptor() {
        return gtk_text_iter_backward_word_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_word_start(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_word_start$handle() {
        return gtk_text_iter_backward_word_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_word_start(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_word_start(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_word_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_word_start", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_word_ends {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_word_ends"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_word_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_word_ends$descriptor() {
        return gtk_text_iter_forward_word_ends.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_word_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_word_ends$handle() {
        return gtk_text_iter_forward_word_ends.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_word_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_word_ends(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_word_ends.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_word_ends", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_word_starts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_word_starts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_word_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_word_starts$descriptor() {
        return gtk_text_iter_backward_word_starts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_word_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_word_starts$handle() {
        return gtk_text_iter_backward_word_starts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_word_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_word_starts(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_word_starts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_word_starts", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_visible_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_visible_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_line(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_visible_line$descriptor() {
        return gtk_text_iter_forward_visible_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_line(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_visible_line$handle() {
        return gtk_text_iter_forward_visible_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_line(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_visible_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_visible_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_visible_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_visible_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_visible_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_line(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_visible_line$descriptor() {
        return gtk_text_iter_backward_visible_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_line(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_visible_line$handle() {
        return gtk_text_iter_backward_visible_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_line(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_visible_line(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_visible_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_visible_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_visible_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_visible_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_visible_lines$descriptor() {
        return gtk_text_iter_forward_visible_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_visible_lines$handle() {
        return gtk_text_iter_forward_visible_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_visible_lines(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_visible_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_visible_lines", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_visible_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_visible_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_visible_lines$descriptor() {
        return gtk_text_iter_backward_visible_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_visible_lines$handle() {
        return gtk_text_iter_backward_visible_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_lines(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_visible_lines(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_visible_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_visible_lines", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_visible_word_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_visible_word_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_word_end(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_visible_word_end$descriptor() {
        return gtk_text_iter_forward_visible_word_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_word_end(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_visible_word_end$handle() {
        return gtk_text_iter_forward_visible_word_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_word_end(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_visible_word_end(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_visible_word_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_visible_word_end", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_visible_word_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_visible_word_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_word_start(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_visible_word_start$descriptor() {
        return gtk_text_iter_backward_visible_word_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_word_start(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_visible_word_start$handle() {
        return gtk_text_iter_backward_visible_word_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_word_start(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_visible_word_start(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_visible_word_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_visible_word_start", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_visible_word_ends {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_visible_word_ends"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_word_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_visible_word_ends$descriptor() {
        return gtk_text_iter_forward_visible_word_ends.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_word_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_visible_word_ends$handle() {
        return gtk_text_iter_forward_visible_word_ends.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_word_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_visible_word_ends(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_visible_word_ends.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_visible_word_ends", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_visible_word_starts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_visible_word_starts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_word_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_visible_word_starts$descriptor() {
        return gtk_text_iter_backward_visible_word_starts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_word_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_visible_word_starts$handle() {
        return gtk_text_iter_backward_visible_word_starts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_word_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_visible_word_starts(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_visible_word_starts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_visible_word_starts", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_sentence_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_sentence_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_sentence_end(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_sentence_end$descriptor() {
        return gtk_text_iter_forward_sentence_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_sentence_end(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_sentence_end$handle() {
        return gtk_text_iter_forward_sentence_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_sentence_end(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_sentence_end(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_sentence_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_sentence_end", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_sentence_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_sentence_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_sentence_start(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_sentence_start$descriptor() {
        return gtk_text_iter_backward_sentence_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_sentence_start(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_sentence_start$handle() {
        return gtk_text_iter_backward_sentence_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_sentence_start(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_sentence_start(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_sentence_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_sentence_start", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_sentence_ends {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_sentence_ends"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_sentence_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_sentence_ends$descriptor() {
        return gtk_text_iter_forward_sentence_ends.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_sentence_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_sentence_ends$handle() {
        return gtk_text_iter_forward_sentence_ends.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_sentence_ends(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_sentence_ends(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_sentence_ends.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_sentence_ends", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_sentence_starts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_sentence_starts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_sentence_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_sentence_starts$descriptor() {
        return gtk_text_iter_backward_sentence_starts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_sentence_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_sentence_starts$handle() {
        return gtk_text_iter_backward_sentence_starts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_sentence_starts(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_sentence_starts(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_sentence_starts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_sentence_starts", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_cursor_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_cursor_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_cursor_position(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_cursor_position$descriptor() {
        return gtk_text_iter_forward_cursor_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_cursor_position(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_cursor_position$handle() {
        return gtk_text_iter_forward_cursor_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_cursor_position(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_cursor_position(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_cursor_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_cursor_position", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_cursor_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_cursor_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_cursor_position(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_cursor_position$descriptor() {
        return gtk_text_iter_backward_cursor_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_cursor_position(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_cursor_position$handle() {
        return gtk_text_iter_backward_cursor_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_cursor_position(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_cursor_position(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_cursor_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_cursor_position", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_cursor_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_cursor_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_cursor_positions$descriptor() {
        return gtk_text_iter_forward_cursor_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_cursor_positions$handle() {
        return gtk_text_iter_forward_cursor_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_cursor_positions(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_cursor_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_cursor_positions", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_cursor_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_cursor_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_cursor_positions$descriptor() {
        return gtk_text_iter_backward_cursor_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_cursor_positions$handle() {
        return gtk_text_iter_backward_cursor_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_cursor_positions(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_cursor_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_cursor_positions", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_visible_cursor_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_visible_cursor_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_cursor_position(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_visible_cursor_position$descriptor() {
        return gtk_text_iter_forward_visible_cursor_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_cursor_position(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_visible_cursor_position$handle() {
        return gtk_text_iter_forward_visible_cursor_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_cursor_position(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_visible_cursor_position(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_visible_cursor_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_visible_cursor_position", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_visible_cursor_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_visible_cursor_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_cursor_position(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_visible_cursor_position$descriptor() {
        return gtk_text_iter_backward_visible_cursor_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_cursor_position(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_visible_cursor_position$handle() {
        return gtk_text_iter_backward_visible_cursor_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_cursor_position(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_backward_visible_cursor_position(MemorySegment iter) {
        var mh$ = gtk_text_iter_backward_visible_cursor_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_visible_cursor_position", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_visible_cursor_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_visible_cursor_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_visible_cursor_positions$descriptor() {
        return gtk_text_iter_forward_visible_cursor_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_visible_cursor_positions$handle() {
        return gtk_text_iter_forward_visible_cursor_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_visible_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_forward_visible_cursor_positions(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_forward_visible_cursor_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_visible_cursor_positions", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_visible_cursor_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_visible_cursor_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_visible_cursor_positions$descriptor() {
        return gtk_text_iter_backward_visible_cursor_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_visible_cursor_positions$handle() {
        return gtk_text_iter_backward_visible_cursor_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_visible_cursor_positions(GtkTextIter *iter, gint count)
     * }
     */
    public static int gtk_text_iter_backward_visible_cursor_positions(MemorySegment iter, int count) {
        var mh$ = gtk_text_iter_backward_visible_cursor_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_visible_cursor_positions", iter, count);
            }
            return (int)mh$.invokeExact(iter, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_set_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_set_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_offset(GtkTextIter *iter, gint char_offset)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_set_offset$descriptor() {
        return gtk_text_iter_set_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_offset(GtkTextIter *iter, gint char_offset)
     * }
     */
    public static MethodHandle gtk_text_iter_set_offset$handle() {
        return gtk_text_iter_set_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_offset(GtkTextIter *iter, gint char_offset)
     * }
     */
    public static void gtk_text_iter_set_offset(MemorySegment iter, int char_offset) {
        var mh$ = gtk_text_iter_set_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_set_offset", iter, char_offset);
            }
            mh$.invokeExact(iter, char_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_set_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_set_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line(GtkTextIter *iter, gint line_number)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_set_line$descriptor() {
        return gtk_text_iter_set_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line(GtkTextIter *iter, gint line_number)
     * }
     */
    public static MethodHandle gtk_text_iter_set_line$handle() {
        return gtk_text_iter_set_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line(GtkTextIter *iter, gint line_number)
     * }
     */
    public static void gtk_text_iter_set_line(MemorySegment iter, int line_number) {
        var mh$ = gtk_text_iter_set_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_set_line", iter, line_number);
            }
            mh$.invokeExact(iter, line_number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_set_line_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_set_line_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line_offset(GtkTextIter *iter, gint char_on_line)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_set_line_offset$descriptor() {
        return gtk_text_iter_set_line_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line_offset(GtkTextIter *iter, gint char_on_line)
     * }
     */
    public static MethodHandle gtk_text_iter_set_line_offset$handle() {
        return gtk_text_iter_set_line_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line_offset(GtkTextIter *iter, gint char_on_line)
     * }
     */
    public static void gtk_text_iter_set_line_offset(MemorySegment iter, int char_on_line) {
        var mh$ = gtk_text_iter_set_line_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_set_line_offset", iter, char_on_line);
            }
            mh$.invokeExact(iter, char_on_line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_set_line_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_set_line_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line_index(GtkTextIter *iter, gint byte_on_line)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_set_line_index$descriptor() {
        return gtk_text_iter_set_line_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line_index(GtkTextIter *iter, gint byte_on_line)
     * }
     */
    public static MethodHandle gtk_text_iter_set_line_index$handle() {
        return gtk_text_iter_set_line_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_line_index(GtkTextIter *iter, gint byte_on_line)
     * }
     */
    public static void gtk_text_iter_set_line_index(MemorySegment iter, int byte_on_line) {
        var mh$ = gtk_text_iter_set_line_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_set_line_index", iter, byte_on_line);
            }
            mh$.invokeExact(iter, byte_on_line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_to_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_to_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_forward_to_end(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_to_end$descriptor() {
        return gtk_text_iter_forward_to_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_forward_to_end(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_to_end$handle() {
        return gtk_text_iter_forward_to_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_forward_to_end(GtkTextIter *iter)
     * }
     */
    public static void gtk_text_iter_forward_to_end(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_to_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_to_end", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_to_line_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_to_line_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_to_line_end(GtkTextIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_to_line_end$descriptor() {
        return gtk_text_iter_forward_to_line_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_to_line_end(GtkTextIter *iter)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_to_line_end$handle() {
        return gtk_text_iter_forward_to_line_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_to_line_end(GtkTextIter *iter)
     * }
     */
    public static int gtk_text_iter_forward_to_line_end(MemorySegment iter) {
        var mh$ = gtk_text_iter_forward_to_line_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_to_line_end", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_set_visible_line_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_set_visible_line_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_visible_line_offset(GtkTextIter *iter, gint char_on_line)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_set_visible_line_offset$descriptor() {
        return gtk_text_iter_set_visible_line_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_visible_line_offset(GtkTextIter *iter, gint char_on_line)
     * }
     */
    public static MethodHandle gtk_text_iter_set_visible_line_offset$handle() {
        return gtk_text_iter_set_visible_line_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_visible_line_offset(GtkTextIter *iter, gint char_on_line)
     * }
     */
    public static void gtk_text_iter_set_visible_line_offset(MemorySegment iter, int char_on_line) {
        var mh$ = gtk_text_iter_set_visible_line_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_set_visible_line_offset", iter, char_on_line);
            }
            mh$.invokeExact(iter, char_on_line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_set_visible_line_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_set_visible_line_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_visible_line_index(GtkTextIter *iter, gint byte_on_line)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_set_visible_line_index$descriptor() {
        return gtk_text_iter_set_visible_line_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_visible_line_index(GtkTextIter *iter, gint byte_on_line)
     * }
     */
    public static MethodHandle gtk_text_iter_set_visible_line_index$handle() {
        return gtk_text_iter_set_visible_line_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_set_visible_line_index(GtkTextIter *iter, gint byte_on_line)
     * }
     */
    public static void gtk_text_iter_set_visible_line_index(MemorySegment iter, int byte_on_line) {
        var mh$ = gtk_text_iter_set_visible_line_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_set_visible_line_index", iter, byte_on_line);
            }
            mh$.invokeExact(iter, byte_on_line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_to_tag_toggle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_to_tag_toggle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_to_tag_toggle(GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_to_tag_toggle$descriptor() {
        return gtk_text_iter_forward_to_tag_toggle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_to_tag_toggle(GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_to_tag_toggle$handle() {
        return gtk_text_iter_forward_to_tag_toggle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_to_tag_toggle(GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_iter_forward_to_tag_toggle(MemorySegment iter, MemorySegment tag) {
        var mh$ = gtk_text_iter_forward_to_tag_toggle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_to_tag_toggle", iter, tag);
            }
            return (int)mh$.invokeExact(iter, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_to_tag_toggle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_to_tag_toggle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_to_tag_toggle(GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_to_tag_toggle$descriptor() {
        return gtk_text_iter_backward_to_tag_toggle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_to_tag_toggle(GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_to_tag_toggle$handle() {
        return gtk_text_iter_backward_to_tag_toggle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_to_tag_toggle(GtkTextIter *iter, GtkTextTag *tag)
     * }
     */
    public static int gtk_text_iter_backward_to_tag_toggle(MemorySegment iter, MemorySegment tag) {
        var mh$ = gtk_text_iter_backward_to_tag_toggle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_to_tag_toggle", iter, tag);
            }
            return (int)mh$.invokeExact(iter, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_find_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_find_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_find_char(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_find_char$descriptor() {
        return gtk_text_iter_forward_find_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_find_char(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_find_char$handle() {
        return gtk_text_iter_forward_find_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_find_char(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit)
     * }
     */
    public static int gtk_text_iter_forward_find_char(MemorySegment iter, MemorySegment pred, MemorySegment user_data, MemorySegment limit) {
        var mh$ = gtk_text_iter_forward_find_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_find_char", iter, pred, user_data, limit);
            }
            return (int)mh$.invokeExact(iter, pred, user_data, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_find_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_find_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_find_char(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_find_char$descriptor() {
        return gtk_text_iter_backward_find_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_find_char(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_find_char$handle() {
        return gtk_text_iter_backward_find_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_find_char(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit)
     * }
     */
    public static int gtk_text_iter_backward_find_char(MemorySegment iter, MemorySegment pred, MemorySegment user_data, MemorySegment limit) {
        var mh$ = gtk_text_iter_backward_find_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_find_char", iter, pred, user_data, limit);
            }
            return (int)mh$.invokeExact(iter, pred, user_data, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_forward_search {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_forward_search"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_search(const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_forward_search$descriptor() {
        return gtk_text_iter_forward_search.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_search(const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit)
     * }
     */
    public static MethodHandle gtk_text_iter_forward_search$handle() {
        return gtk_text_iter_forward_search.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_forward_search(const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit)
     * }
     */
    public static int gtk_text_iter_forward_search(MemorySegment iter, MemorySegment str, int flags, MemorySegment match_start, MemorySegment match_end, MemorySegment limit) {
        var mh$ = gtk_text_iter_forward_search.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_forward_search", iter, str, flags, match_start, match_end, limit);
            }
            return (int)mh$.invokeExact(iter, str, flags, match_start, match_end, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_backward_search {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_backward_search"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_search(const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_backward_search$descriptor() {
        return gtk_text_iter_backward_search.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_search(const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit)
     * }
     */
    public static MethodHandle gtk_text_iter_backward_search$handle() {
        return gtk_text_iter_backward_search.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_backward_search(const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit)
     * }
     */
    public static int gtk_text_iter_backward_search(MemorySegment iter, MemorySegment str, int flags, MemorySegment match_start, MemorySegment match_end, MemorySegment limit) {
        var mh$ = gtk_text_iter_backward_search.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_backward_search", iter, str, flags, match_start, match_end, limit);
            }
            return (int)mh$.invokeExact(iter, str, flags, match_start, match_end, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_equal(const GtkTextIter *lhs, const GtkTextIter *rhs)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_equal$descriptor() {
        return gtk_text_iter_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_equal(const GtkTextIter *lhs, const GtkTextIter *rhs)
     * }
     */
    public static MethodHandle gtk_text_iter_equal$handle() {
        return gtk_text_iter_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_equal(const GtkTextIter *lhs, const GtkTextIter *rhs)
     * }
     */
    public static int gtk_text_iter_equal(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = gtk_text_iter_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_equal", lhs, rhs);
            }
            return (int)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_compare(const GtkTextIter *lhs, const GtkTextIter *rhs)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_compare$descriptor() {
        return gtk_text_iter_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_text_iter_compare(const GtkTextIter *lhs, const GtkTextIter *rhs)
     * }
     */
    public static MethodHandle gtk_text_iter_compare$handle() {
        return gtk_text_iter_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_text_iter_compare(const GtkTextIter *lhs, const GtkTextIter *rhs)
     * }
     */
    public static int gtk_text_iter_compare(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = gtk_text_iter_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_compare", lhs, rhs);
            }
            return (int)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_in_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_in_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_in_range(const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_in_range$descriptor() {
        return gtk_text_iter_in_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_in_range(const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static MethodHandle gtk_text_iter_in_range$handle() {
        return gtk_text_iter_in_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_text_iter_in_range(const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end)
     * }
     */
    public static int gtk_text_iter_in_range(MemorySegment iter, MemorySegment start, MemorySegment end) {
        var mh$ = gtk_text_iter_in_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_in_range", iter, start, end);
            }
            return (int)mh$.invokeExact(iter, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_text_iter_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_text_iter_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_order(GtkTextIter *first, GtkTextIter *second)
     * }
     */
    public static FunctionDescriptor gtk_text_iter_order$descriptor() {
        return gtk_text_iter_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_text_iter_order(GtkTextIter *first, GtkTextIter *second)
     * }
     */
    public static MethodHandle gtk_text_iter_order$handle() {
        return gtk_text_iter_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_text_iter_order(GtkTextIter *first, GtkTextIter *second)
     * }
     */
    public static void gtk_text_iter_order(MemorySegment first, MemorySegment second) {
        var mh$ = gtk_text_iter_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_text_iter_order", first, second);
            }
            mh$.invokeExact(first, second);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TARGET_SAME_APP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TARGET_SAME_APP = 1
     * }
     */
    public static int GTK_TARGET_SAME_APP() {
        return GTK_TARGET_SAME_APP;
    }
    private static final int GTK_TARGET_SAME_WIDGET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TARGET_SAME_WIDGET = 2
     * }
     */
    public static int GTK_TARGET_SAME_WIDGET() {
        return GTK_TARGET_SAME_WIDGET;
    }
    private static final int GTK_TARGET_OTHER_APP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TARGET_OTHER_APP = 4
     * }
     */
    public static int GTK_TARGET_OTHER_APP() {
        return GTK_TARGET_OTHER_APP;
    }
    private static final int GTK_TARGET_OTHER_WIDGET = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TARGET_OTHER_WIDGET = 8
     * }
     */
    public static int GTK_TARGET_OTHER_WIDGET() {
        return GTK_TARGET_OTHER_WIDGET;
    }

    private static class gtk_target_list_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_target_list_get_type()
     * }
     */
    public static FunctionDescriptor gtk_target_list_get_type$descriptor() {
        return gtk_target_list_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_target_list_get_type()
     * }
     */
    public static MethodHandle gtk_target_list_get_type$handle() {
        return gtk_target_list_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_target_list_get_type()
     * }
     */
    public static long gtk_target_list_get_type() {
        var mh$ = gtk_target_list_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_target_list_new(const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static FunctionDescriptor gtk_target_list_new$descriptor() {
        return gtk_target_list_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_target_list_new(const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static MethodHandle gtk_target_list_new$handle() {
        return gtk_target_list_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_target_list_new(const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static MemorySegment gtk_target_list_new(MemorySegment targets, int ntargets) {
        var mh$ = gtk_target_list_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_new", targets, ntargets);
            }
            return (MemorySegment)mh$.invokeExact(targets, ntargets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_target_list_ref(GtkTargetList *list)
     * }
     */
    public static FunctionDescriptor gtk_target_list_ref$descriptor() {
        return gtk_target_list_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_target_list_ref(GtkTargetList *list)
     * }
     */
    public static MethodHandle gtk_target_list_ref$handle() {
        return gtk_target_list_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_target_list_ref(GtkTargetList *list)
     * }
     */
    public static MemorySegment gtk_target_list_ref(MemorySegment list) {
        var mh$ = gtk_target_list_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_ref", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_unref(GtkTargetList *list)
     * }
     */
    public static FunctionDescriptor gtk_target_list_unref$descriptor() {
        return gtk_target_list_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_unref(GtkTargetList *list)
     * }
     */
    public static MethodHandle gtk_target_list_unref$handle() {
        return gtk_target_list_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_unref(GtkTargetList *list)
     * }
     */
    public static void gtk_target_list_unref(MemorySegment list) {
        var mh$ = gtk_target_list_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_unref", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add(GtkTargetList *list, GdkAtom target, guint flags, guint info)
     * }
     */
    public static FunctionDescriptor gtk_target_list_add$descriptor() {
        return gtk_target_list_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add(GtkTargetList *list, GdkAtom target, guint flags, guint info)
     * }
     */
    public static MethodHandle gtk_target_list_add$handle() {
        return gtk_target_list_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_add(GtkTargetList *list, GdkAtom target, guint flags, guint info)
     * }
     */
    public static void gtk_target_list_add(MemorySegment list, MemorySegment target, int flags, int info) {
        var mh$ = gtk_target_list_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_add", list, target, flags, info);
            }
            mh$.invokeExact(list, target, flags, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_add_text_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_add_text_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_text_targets(GtkTargetList *list, guint info)
     * }
     */
    public static FunctionDescriptor gtk_target_list_add_text_targets$descriptor() {
        return gtk_target_list_add_text_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_text_targets(GtkTargetList *list, guint info)
     * }
     */
    public static MethodHandle gtk_target_list_add_text_targets$handle() {
        return gtk_target_list_add_text_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_add_text_targets(GtkTargetList *list, guint info)
     * }
     */
    public static void gtk_target_list_add_text_targets(MemorySegment list, int info) {
        var mh$ = gtk_target_list_add_text_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_add_text_targets", list, info);
            }
            mh$.invokeExact(list, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_add_rich_text_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_add_rich_text_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_rich_text_targets(GtkTargetList *list, guint info, gboolean deserializable, GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_target_list_add_rich_text_targets$descriptor() {
        return gtk_target_list_add_rich_text_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_rich_text_targets(GtkTargetList *list, guint info, gboolean deserializable, GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_target_list_add_rich_text_targets$handle() {
        return gtk_target_list_add_rich_text_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_add_rich_text_targets(GtkTargetList *list, guint info, gboolean deserializable, GtkTextBuffer *buffer)
     * }
     */
    public static void gtk_target_list_add_rich_text_targets(MemorySegment list, int info, int deserializable, MemorySegment buffer) {
        var mh$ = gtk_target_list_add_rich_text_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_add_rich_text_targets", list, info, deserializable, buffer);
            }
            mh$.invokeExact(list, info, deserializable, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_add_image_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_add_image_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_image_targets(GtkTargetList *list, guint info, gboolean writable)
     * }
     */
    public static FunctionDescriptor gtk_target_list_add_image_targets$descriptor() {
        return gtk_target_list_add_image_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_image_targets(GtkTargetList *list, guint info, gboolean writable)
     * }
     */
    public static MethodHandle gtk_target_list_add_image_targets$handle() {
        return gtk_target_list_add_image_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_add_image_targets(GtkTargetList *list, guint info, gboolean writable)
     * }
     */
    public static void gtk_target_list_add_image_targets(MemorySegment list, int info, int writable) {
        var mh$ = gtk_target_list_add_image_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_add_image_targets", list, info, writable);
            }
            mh$.invokeExact(list, info, writable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_add_uri_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_add_uri_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_uri_targets(GtkTargetList *list, guint info)
     * }
     */
    public static FunctionDescriptor gtk_target_list_add_uri_targets$descriptor() {
        return gtk_target_list_add_uri_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_uri_targets(GtkTargetList *list, guint info)
     * }
     */
    public static MethodHandle gtk_target_list_add_uri_targets$handle() {
        return gtk_target_list_add_uri_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_add_uri_targets(GtkTargetList *list, guint info)
     * }
     */
    public static void gtk_target_list_add_uri_targets(MemorySegment list, int info) {
        var mh$ = gtk_target_list_add_uri_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_add_uri_targets", list, info);
            }
            mh$.invokeExact(list, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_add_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_add_table"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_table(GtkTargetList *list, const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static FunctionDescriptor gtk_target_list_add_table$descriptor() {
        return gtk_target_list_add_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_add_table(GtkTargetList *list, const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static MethodHandle gtk_target_list_add_table$handle() {
        return gtk_target_list_add_table.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_add_table(GtkTargetList *list, const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static void gtk_target_list_add_table(MemorySegment list, MemorySegment targets, int ntargets) {
        var mh$ = gtk_target_list_add_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_add_table", list, targets, ntargets);
            }
            mh$.invokeExact(list, targets, ntargets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_list_remove(GtkTargetList *list, GdkAtom target)
     * }
     */
    public static FunctionDescriptor gtk_target_list_remove$descriptor() {
        return gtk_target_list_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_list_remove(GtkTargetList *list, GdkAtom target)
     * }
     */
    public static MethodHandle gtk_target_list_remove$handle() {
        return gtk_target_list_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_list_remove(GtkTargetList *list, GdkAtom target)
     * }
     */
    public static void gtk_target_list_remove(MemorySegment list, MemorySegment target) {
        var mh$ = gtk_target_list_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_remove", list, target);
            }
            mh$.invokeExact(list, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_list_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_list_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_target_list_find(GtkTargetList *list, GdkAtom target, guint *info)
     * }
     */
    public static FunctionDescriptor gtk_target_list_find$descriptor() {
        return gtk_target_list_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_target_list_find(GtkTargetList *list, GdkAtom target, guint *info)
     * }
     */
    public static MethodHandle gtk_target_list_find$handle() {
        return gtk_target_list_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_target_list_find(GtkTargetList *list, GdkAtom target, guint *info)
     * }
     */
    public static int gtk_target_list_find(MemorySegment list, MemorySegment target, MemorySegment info) {
        var mh$ = gtk_target_list_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_list_find", list, target, info);
            }
            return (int)mh$.invokeExact(list, target, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_table_new_from_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_table_new_from_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_table_new_from_list(GtkTargetList *list, gint *n_targets)
     * }
     */
    public static FunctionDescriptor gtk_target_table_new_from_list$descriptor() {
        return gtk_target_table_new_from_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_table_new_from_list(GtkTargetList *list, gint *n_targets)
     * }
     */
    public static MethodHandle gtk_target_table_new_from_list$handle() {
        return gtk_target_table_new_from_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_table_new_from_list(GtkTargetList *list, gint *n_targets)
     * }
     */
    public static MemorySegment gtk_target_table_new_from_list(MemorySegment list, MemorySegment n_targets) {
        var mh$ = gtk_target_table_new_from_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_table_new_from_list", list, n_targets);
            }
            return (MemorySegment)mh$.invokeExact(list, n_targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_table_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_table_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_table_free(GtkTargetEntry *targets, gint n_targets)
     * }
     */
    public static FunctionDescriptor gtk_target_table_free$descriptor() {
        return gtk_target_table_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_table_free(GtkTargetEntry *targets, gint n_targets)
     * }
     */
    public static MethodHandle gtk_target_table_free$handle() {
        return gtk_target_table_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_table_free(GtkTargetEntry *targets, gint n_targets)
     * }
     */
    public static void gtk_target_table_free(MemorySegment targets, int n_targets) {
        var mh$ = gtk_target_table_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_table_free", targets, n_targets);
            }
            mh$.invokeExact(targets, n_targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_owner_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_owner_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_owner_set(GtkWidget *widget, GdkAtom selection, guint32 time_)
     * }
     */
    public static FunctionDescriptor gtk_selection_owner_set$descriptor() {
        return gtk_selection_owner_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_owner_set(GtkWidget *widget, GdkAtom selection, guint32 time_)
     * }
     */
    public static MethodHandle gtk_selection_owner_set$handle() {
        return gtk_selection_owner_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_owner_set(GtkWidget *widget, GdkAtom selection, guint32 time_)
     * }
     */
    public static int gtk_selection_owner_set(MemorySegment widget, MemorySegment selection, int time_) {
        var mh$ = gtk_selection_owner_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_owner_set", widget, selection, time_);
            }
            return (int)mh$.invokeExact(widget, selection, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_owner_set_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_owner_set_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_owner_set_for_display(GdkDisplay *display, GtkWidget *widget, GdkAtom selection, guint32 time_)
     * }
     */
    public static FunctionDescriptor gtk_selection_owner_set_for_display$descriptor() {
        return gtk_selection_owner_set_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_owner_set_for_display(GdkDisplay *display, GtkWidget *widget, GdkAtom selection, guint32 time_)
     * }
     */
    public static MethodHandle gtk_selection_owner_set_for_display$handle() {
        return gtk_selection_owner_set_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_owner_set_for_display(GdkDisplay *display, GtkWidget *widget, GdkAtom selection, guint32 time_)
     * }
     */
    public static int gtk_selection_owner_set_for_display(MemorySegment display, MemorySegment widget, MemorySegment selection, int time_) {
        var mh$ = gtk_selection_owner_set_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_owner_set_for_display", display, widget, selection, time_);
            }
            return (int)mh$.invokeExact(display, widget, selection, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_add_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_add_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_selection_add_target(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint info)
     * }
     */
    public static FunctionDescriptor gtk_selection_add_target$descriptor() {
        return gtk_selection_add_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_selection_add_target(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint info)
     * }
     */
    public static MethodHandle gtk_selection_add_target$handle() {
        return gtk_selection_add_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_selection_add_target(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint info)
     * }
     */
    public static void gtk_selection_add_target(MemorySegment widget, MemorySegment selection, MemorySegment target, int info) {
        var mh$ = gtk_selection_add_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_add_target", widget, selection, target, info);
            }
            mh$.invokeExact(widget, selection, target, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_add_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_add_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_selection_add_targets(GtkWidget *widget, GdkAtom selection, const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static FunctionDescriptor gtk_selection_add_targets$descriptor() {
        return gtk_selection_add_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_selection_add_targets(GtkWidget *widget, GdkAtom selection, const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static MethodHandle gtk_selection_add_targets$handle() {
        return gtk_selection_add_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_selection_add_targets(GtkWidget *widget, GdkAtom selection, const GtkTargetEntry *targets, guint ntargets)
     * }
     */
    public static void gtk_selection_add_targets(MemorySegment widget, MemorySegment selection, MemorySegment targets, int ntargets) {
        var mh$ = gtk_selection_add_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_add_targets", widget, selection, targets, ntargets);
            }
            mh$.invokeExact(widget, selection, targets, ntargets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_clear_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_clear_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_selection_clear_targets(GtkWidget *widget, GdkAtom selection)
     * }
     */
    public static FunctionDescriptor gtk_selection_clear_targets$descriptor() {
        return gtk_selection_clear_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_selection_clear_targets(GtkWidget *widget, GdkAtom selection)
     * }
     */
    public static MethodHandle gtk_selection_clear_targets$handle() {
        return gtk_selection_clear_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_selection_clear_targets(GtkWidget *widget, GdkAtom selection)
     * }
     */
    public static void gtk_selection_clear_targets(MemorySegment widget, MemorySegment selection) {
        var mh$ = gtk_selection_clear_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_clear_targets", widget, selection);
            }
            mh$.invokeExact(widget, selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_convert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_convert(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint32 time_)
     * }
     */
    public static FunctionDescriptor gtk_selection_convert$descriptor() {
        return gtk_selection_convert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_convert(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint32 time_)
     * }
     */
    public static MethodHandle gtk_selection_convert$handle() {
        return gtk_selection_convert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_convert(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint32 time_)
     * }
     */
    public static int gtk_selection_convert(MemorySegment widget, MemorySegment selection, MemorySegment target, int time_) {
        var mh$ = gtk_selection_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_convert", widget, selection, target, time_);
            }
            return (int)mh$.invokeExact(widget, selection, target, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_selection_remove_all(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_selection_remove_all$descriptor() {
        return gtk_selection_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_selection_remove_all(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_selection_remove_all$handle() {
        return gtk_selection_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_selection_remove_all(GtkWidget *widget)
     * }
     */
    public static void gtk_selection_remove_all(MemorySegment widget) {
        var mh$ = gtk_selection_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_remove_all", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_selection(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_selection$descriptor() {
        return gtk_selection_data_get_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_selection(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_selection$handle() {
        return gtk_selection_data_get_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_selection(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_selection(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_selection", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_target(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_target$descriptor() {
        return gtk_selection_data_get_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_target(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_target$handle() {
        return gtk_selection_data_get_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_target(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_target(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_target", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_data_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_data_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_data_type(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_data_type$descriptor() {
        return gtk_selection_data_get_data_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_data_type(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_data_type$handle() {
        return gtk_selection_data_get_data_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_selection_data_get_data_type(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_data_type(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_data_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_data_type", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_selection_data_get_format(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_format$descriptor() {
        return gtk_selection_data_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_selection_data_get_format(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_format$handle() {
        return gtk_selection_data_get_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_selection_data_get_format(const GtkSelectionData *selection_data)
     * }
     */
    public static int gtk_selection_data_get_format(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_format", selection_data);
            }
            return (int)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const guchar *gtk_selection_data_get_data(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_data$descriptor() {
        return gtk_selection_data_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const guchar *gtk_selection_data_get_data(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_data$handle() {
        return gtk_selection_data_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const guchar *gtk_selection_data_get_data(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_data(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_data", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_selection_data_get_length(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_length$descriptor() {
        return gtk_selection_data_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_selection_data_get_length(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_length$handle() {
        return gtk_selection_data_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_selection_data_get_length(const GtkSelectionData *selection_data)
     * }
     */
    public static int gtk_selection_data_get_length(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_length", selection_data);
            }
            return (int)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_data_with_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_data_with_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const guchar *gtk_selection_data_get_data_with_length(const GtkSelectionData *selection_data, gint *length)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_data_with_length$descriptor() {
        return gtk_selection_data_get_data_with_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const guchar *gtk_selection_data_get_data_with_length(const GtkSelectionData *selection_data, gint *length)
     * }
     */
    public static MethodHandle gtk_selection_data_get_data_with_length$handle() {
        return gtk_selection_data_get_data_with_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const guchar *gtk_selection_data_get_data_with_length(const GtkSelectionData *selection_data, gint *length)
     * }
     */
    public static MemorySegment gtk_selection_data_get_data_with_length(MemorySegment selection_data, MemorySegment length) {
        var mh$ = gtk_selection_data_get_data_with_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_data_with_length", selection_data, length);
            }
            return (MemorySegment)mh$.invokeExact(selection_data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_selection_data_get_display(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_display$descriptor() {
        return gtk_selection_data_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_selection_data_get_display(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_display$handle() {
        return gtk_selection_data_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_selection_data_get_display(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_display(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_display", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_selection_data_set(GtkSelectionData *selection_data, GdkAtom type, gint format, const guchar *data, gint length)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_set$descriptor() {
        return gtk_selection_data_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_selection_data_set(GtkSelectionData *selection_data, GdkAtom type, gint format, const guchar *data, gint length)
     * }
     */
    public static MethodHandle gtk_selection_data_set$handle() {
        return gtk_selection_data_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_selection_data_set(GtkSelectionData *selection_data, GdkAtom type, gint format, const guchar *data, gint length)
     * }
     */
    public static void gtk_selection_data_set(MemorySegment selection_data, MemorySegment type, int format, MemorySegment data, int length) {
        var mh$ = gtk_selection_data_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_set", selection_data, type, format, data, length);
            }
            mh$.invokeExact(selection_data, type, format, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_text(GtkSelectionData *selection_data, const gchar *str, gint len)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_set_text$descriptor() {
        return gtk_selection_data_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_text(GtkSelectionData *selection_data, const gchar *str, gint len)
     * }
     */
    public static MethodHandle gtk_selection_data_set_text$handle() {
        return gtk_selection_data_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_text(GtkSelectionData *selection_data, const gchar *str, gint len)
     * }
     */
    public static int gtk_selection_data_set_text(MemorySegment selection_data, MemorySegment str, int len) {
        var mh$ = gtk_selection_data_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_set_text", selection_data, str, len);
            }
            return (int)mh$.invokeExact(selection_data, str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar *gtk_selection_data_get_text(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_text$descriptor() {
        return gtk_selection_data_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar *gtk_selection_data_get_text(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_text$handle() {
        return gtk_selection_data_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar *gtk_selection_data_get_text(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_text(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_text", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_set_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_set_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_pixbuf(GtkSelectionData *selection_data, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_set_pixbuf$descriptor() {
        return gtk_selection_data_set_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_pixbuf(GtkSelectionData *selection_data, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_selection_data_set_pixbuf$handle() {
        return gtk_selection_data_set_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_pixbuf(GtkSelectionData *selection_data, GdkPixbuf *pixbuf)
     * }
     */
    public static int gtk_selection_data_set_pixbuf(MemorySegment selection_data, MemorySegment pixbuf) {
        var mh$ = gtk_selection_data_set_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_set_pixbuf", selection_data, pixbuf);
            }
            return (int)mh$.invokeExact(selection_data, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_selection_data_get_pixbuf(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_pixbuf$descriptor() {
        return gtk_selection_data_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_selection_data_get_pixbuf(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_pixbuf$handle() {
        return gtk_selection_data_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_selection_data_get_pixbuf(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_pixbuf(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_pixbuf", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_set_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_set_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_uris(GtkSelectionData *selection_data, gchar **uris)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_set_uris$descriptor() {
        return gtk_selection_data_set_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_uris(GtkSelectionData *selection_data, gchar **uris)
     * }
     */
    public static MethodHandle gtk_selection_data_set_uris$handle() {
        return gtk_selection_data_set_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_set_uris(GtkSelectionData *selection_data, gchar **uris)
     * }
     */
    public static int gtk_selection_data_set_uris(MemorySegment selection_data, MemorySegment uris) {
        var mh$ = gtk_selection_data_set_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_set_uris", selection_data, uris);
            }
            return (int)mh$.invokeExact(selection_data, uris);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_selection_data_get_uris(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_uris$descriptor() {
        return gtk_selection_data_get_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_selection_data_get_uris(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_get_uris$handle() {
        return gtk_selection_data_get_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_selection_data_get_uris(const GtkSelectionData *selection_data)
     * }
     */
    public static MemorySegment gtk_selection_data_get_uris(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_get_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_uris", selection_data);
            }
            return (MemorySegment)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_get_targets(const GtkSelectionData *selection_data, GdkAtom **targets, gint *n_atoms)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_targets$descriptor() {
        return gtk_selection_data_get_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_get_targets(const GtkSelectionData *selection_data, GdkAtom **targets, gint *n_atoms)
     * }
     */
    public static MethodHandle gtk_selection_data_get_targets$handle() {
        return gtk_selection_data_get_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_get_targets(const GtkSelectionData *selection_data, GdkAtom **targets, gint *n_atoms)
     * }
     */
    public static int gtk_selection_data_get_targets(MemorySegment selection_data, MemorySegment targets, MemorySegment n_atoms) {
        var mh$ = gtk_selection_data_get_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_targets", selection_data, targets, n_atoms);
            }
            return (int)mh$.invokeExact(selection_data, targets, n_atoms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_targets_include_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_targets_include_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_text(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_targets_include_text$descriptor() {
        return gtk_selection_data_targets_include_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_text(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_targets_include_text$handle() {
        return gtk_selection_data_targets_include_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_text(const GtkSelectionData *selection_data)
     * }
     */
    public static int gtk_selection_data_targets_include_text(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_targets_include_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_targets_include_text", selection_data);
            }
            return (int)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_targets_include_rich_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_targets_include_rich_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_rich_text(const GtkSelectionData *selection_data, GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_targets_include_rich_text$descriptor() {
        return gtk_selection_data_targets_include_rich_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_rich_text(const GtkSelectionData *selection_data, GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_selection_data_targets_include_rich_text$handle() {
        return gtk_selection_data_targets_include_rich_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_rich_text(const GtkSelectionData *selection_data, GtkTextBuffer *buffer)
     * }
     */
    public static int gtk_selection_data_targets_include_rich_text(MemorySegment selection_data, MemorySegment buffer) {
        var mh$ = gtk_selection_data_targets_include_rich_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_targets_include_rich_text", selection_data, buffer);
            }
            return (int)mh$.invokeExact(selection_data, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_targets_include_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_targets_include_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_image(const GtkSelectionData *selection_data, gboolean writable)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_targets_include_image$descriptor() {
        return gtk_selection_data_targets_include_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_image(const GtkSelectionData *selection_data, gboolean writable)
     * }
     */
    public static MethodHandle gtk_selection_data_targets_include_image$handle() {
        return gtk_selection_data_targets_include_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_image(const GtkSelectionData *selection_data, gboolean writable)
     * }
     */
    public static int gtk_selection_data_targets_include_image(MemorySegment selection_data, int writable) {
        var mh$ = gtk_selection_data_targets_include_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_targets_include_image", selection_data, writable);
            }
            return (int)mh$.invokeExact(selection_data, writable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_targets_include_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_targets_include_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_uri(const GtkSelectionData *selection_data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_targets_include_uri$descriptor() {
        return gtk_selection_data_targets_include_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_uri(const GtkSelectionData *selection_data)
     * }
     */
    public static MethodHandle gtk_selection_data_targets_include_uri$handle() {
        return gtk_selection_data_targets_include_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_selection_data_targets_include_uri(const GtkSelectionData *selection_data)
     * }
     */
    public static int gtk_selection_data_targets_include_uri(MemorySegment selection_data) {
        var mh$ = gtk_selection_data_targets_include_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_targets_include_uri", selection_data);
            }
            return (int)mh$.invokeExact(selection_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_targets_include_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_targets_include_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_text(GdkAtom *targets, gint n_targets)
     * }
     */
    public static FunctionDescriptor gtk_targets_include_text$descriptor() {
        return gtk_targets_include_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_text(GdkAtom *targets, gint n_targets)
     * }
     */
    public static MethodHandle gtk_targets_include_text$handle() {
        return gtk_targets_include_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_text(GdkAtom *targets, gint n_targets)
     * }
     */
    public static int gtk_targets_include_text(MemorySegment targets, int n_targets) {
        var mh$ = gtk_targets_include_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_targets_include_text", targets, n_targets);
            }
            return (int)mh$.invokeExact(targets, n_targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_targets_include_rich_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_targets_include_rich_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_rich_text(GdkAtom *targets, gint n_targets, GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_targets_include_rich_text$descriptor() {
        return gtk_targets_include_rich_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_rich_text(GdkAtom *targets, gint n_targets, GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_targets_include_rich_text$handle() {
        return gtk_targets_include_rich_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_rich_text(GdkAtom *targets, gint n_targets, GtkTextBuffer *buffer)
     * }
     */
    public static int gtk_targets_include_rich_text(MemorySegment targets, int n_targets, MemorySegment buffer) {
        var mh$ = gtk_targets_include_rich_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_targets_include_rich_text", targets, n_targets, buffer);
            }
            return (int)mh$.invokeExact(targets, n_targets, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_targets_include_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_targets_include_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_image(GdkAtom *targets, gint n_targets, gboolean writable)
     * }
     */
    public static FunctionDescriptor gtk_targets_include_image$descriptor() {
        return gtk_targets_include_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_image(GdkAtom *targets, gint n_targets, gboolean writable)
     * }
     */
    public static MethodHandle gtk_targets_include_image$handle() {
        return gtk_targets_include_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_image(GdkAtom *targets, gint n_targets, gboolean writable)
     * }
     */
    public static int gtk_targets_include_image(MemorySegment targets, int n_targets, int writable) {
        var mh$ = gtk_targets_include_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_targets_include_image", targets, n_targets, writable);
            }
            return (int)mh$.invokeExact(targets, n_targets, writable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_targets_include_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_targets_include_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_uri(GdkAtom *targets, gint n_targets)
     * }
     */
    public static FunctionDescriptor gtk_targets_include_uri$descriptor() {
        return gtk_targets_include_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_uri(GdkAtom *targets, gint n_targets)
     * }
     */
    public static MethodHandle gtk_targets_include_uri$handle() {
        return gtk_targets_include_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_targets_include_uri(GdkAtom *targets, gint n_targets)
     * }
     */
    public static int gtk_targets_include_uri(MemorySegment targets, int n_targets) {
        var mh$ = gtk_targets_include_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_targets_include_uri", targets, n_targets);
            }
            return (int)mh$.invokeExact(targets, n_targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_selection_data_get_type()
     * }
     */
    public static FunctionDescriptor gtk_selection_data_get_type$descriptor() {
        return gtk_selection_data_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_selection_data_get_type()
     * }
     */
    public static MethodHandle gtk_selection_data_get_type$handle() {
        return gtk_selection_data_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_selection_data_get_type()
     * }
     */
    public static long gtk_selection_data_get_type() {
        var mh$ = gtk_selection_data_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSelectionData *gtk_selection_data_copy(const GtkSelectionData *data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_copy$descriptor() {
        return gtk_selection_data_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSelectionData *gtk_selection_data_copy(const GtkSelectionData *data)
     * }
     */
    public static MethodHandle gtk_selection_data_copy$handle() {
        return gtk_selection_data_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSelectionData *gtk_selection_data_copy(const GtkSelectionData *data)
     * }
     */
    public static MemorySegment gtk_selection_data_copy(MemorySegment data) {
        var mh$ = gtk_selection_data_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_copy", data);
            }
            return (MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_selection_data_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_selection_data_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_selection_data_free(GtkSelectionData *data)
     * }
     */
    public static FunctionDescriptor gtk_selection_data_free$descriptor() {
        return gtk_selection_data_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_selection_data_free(GtkSelectionData *data)
     * }
     */
    public static MethodHandle gtk_selection_data_free$handle() {
        return gtk_selection_data_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_selection_data_free(GtkSelectionData *data)
     * }
     */
    public static void gtk_selection_data_free(MemorySegment data) {
        var mh$ = gtk_selection_data_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_selection_data_free", data);
            }
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_entry_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_entry_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_target_entry_get_type()
     * }
     */
    public static FunctionDescriptor gtk_target_entry_get_type$descriptor() {
        return gtk_target_entry_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_target_entry_get_type()
     * }
     */
    public static MethodHandle gtk_target_entry_get_type$handle() {
        return gtk_target_entry_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_target_entry_get_type()
     * }
     */
    public static long gtk_target_entry_get_type() {
        var mh$ = gtk_target_entry_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_entry_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_entry_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_entry_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_entry_new(const gchar *target, guint flags, guint info)
     * }
     */
    public static FunctionDescriptor gtk_target_entry_new$descriptor() {
        return gtk_target_entry_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_entry_new(const gchar *target, guint flags, guint info)
     * }
     */
    public static MethodHandle gtk_target_entry_new$handle() {
        return gtk_target_entry_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_entry_new(const gchar *target, guint flags, guint info)
     * }
     */
    public static MemorySegment gtk_target_entry_new(MemorySegment target, int flags, int info) {
        var mh$ = gtk_target_entry_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_entry_new", target, flags, info);
            }
            return (MemorySegment)mh$.invokeExact(target, flags, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_entry_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_entry_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_entry_copy(GtkTargetEntry *data)
     * }
     */
    public static FunctionDescriptor gtk_target_entry_copy$descriptor() {
        return gtk_target_entry_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_entry_copy(GtkTargetEntry *data)
     * }
     */
    public static MethodHandle gtk_target_entry_copy$handle() {
        return gtk_target_entry_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetEntry *gtk_target_entry_copy(GtkTargetEntry *data)
     * }
     */
    public static MemorySegment gtk_target_entry_copy(MemorySegment data) {
        var mh$ = gtk_target_entry_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_entry_copy", data);
            }
            return (MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_target_entry_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_target_entry_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_target_entry_free(GtkTargetEntry *data)
     * }
     */
    public static FunctionDescriptor gtk_target_entry_free$descriptor() {
        return gtk_target_entry_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_target_entry_free(GtkTargetEntry *data)
     * }
     */
    public static MethodHandle gtk_target_entry_free$handle() {
        return gtk_target_entry_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_target_entry_free(GtkTargetEntry *data)
     * }
     */
    public static void gtk_target_entry_free(MemorySegment data) {
        var mh$ = gtk_target_entry_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_target_entry_free", data);
            }
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_get_data(GtkWidget *widget, GdkDragContext *context, GdkAtom target, guint32 time_)
     * }
     */
    public static FunctionDescriptor gtk_drag_get_data$descriptor() {
        return gtk_drag_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_get_data(GtkWidget *widget, GdkDragContext *context, GdkAtom target, guint32 time_)
     * }
     */
    public static MethodHandle gtk_drag_get_data$handle() {
        return gtk_drag_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_get_data(GtkWidget *widget, GdkDragContext *context, GdkAtom target, guint32 time_)
     * }
     */
    public static void gtk_drag_get_data(MemorySegment widget, MemorySegment context, MemorySegment target, int time_) {
        var mh$ = gtk_drag_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_get_data", widget, context, target, time_);
            }
            mh$.invokeExact(widget, context, target, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_finish(GdkDragContext *context, gboolean success, gboolean del, guint32 time_)
     * }
     */
    public static FunctionDescriptor gtk_drag_finish$descriptor() {
        return gtk_drag_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_finish(GdkDragContext *context, gboolean success, gboolean del, guint32 time_)
     * }
     */
    public static MethodHandle gtk_drag_finish$handle() {
        return gtk_drag_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_finish(GdkDragContext *context, gboolean success, gboolean del, guint32 time_)
     * }
     */
    public static void gtk_drag_finish(MemorySegment context, int success, int del, int time_) {
        var mh$ = gtk_drag_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_finish", context, success, del, time_);
            }
            mh$.invokeExact(context, success, del, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_get_source_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_get_source_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_drag_get_source_widget(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gtk_drag_get_source_widget$descriptor() {
        return gtk_drag_get_source_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_drag_get_source_widget(GdkDragContext *context)
     * }
     */
    public static MethodHandle gtk_drag_get_source_widget$handle() {
        return gtk_drag_get_source_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_drag_get_source_widget(GdkDragContext *context)
     * }
     */
    public static MemorySegment gtk_drag_get_source_widget(MemorySegment context) {
        var mh$ = gtk_drag_get_source_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_get_source_widget", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_highlight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_highlight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_highlight(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_highlight$descriptor() {
        return gtk_drag_highlight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_highlight(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_highlight$handle() {
        return gtk_drag_highlight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_highlight(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_highlight(MemorySegment widget) {
        var mh$ = gtk_drag_highlight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_highlight", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_unhighlight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_unhighlight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_unhighlight(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_unhighlight$descriptor() {
        return gtk_drag_unhighlight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_unhighlight(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_unhighlight$handle() {
        return gtk_drag_unhighlight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_unhighlight(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_unhighlight(MemorySegment widget) {
        var mh$ = gtk_drag_unhighlight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_unhighlight", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_begin_with_coordinates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_begin_with_coordinates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragContext *gtk_drag_begin_with_coordinates(GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_drag_begin_with_coordinates$descriptor() {
        return gtk_drag_begin_with_coordinates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragContext *gtk_drag_begin_with_coordinates(GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_drag_begin_with_coordinates$handle() {
        return gtk_drag_begin_with_coordinates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragContext *gtk_drag_begin_with_coordinates(GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event, gint x, gint y)
     * }
     */
    public static MemorySegment gtk_drag_begin_with_coordinates(MemorySegment widget, MemorySegment targets, int actions, int button, MemorySegment event, int x, int y) {
        var mh$ = gtk_drag_begin_with_coordinates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_begin_with_coordinates", widget, targets, actions, button, event, x, y);
            }
            return (MemorySegment)mh$.invokeExact(widget, targets, actions, button, event, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_begin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragContext *gtk_drag_begin(GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_drag_begin$descriptor() {
        return gtk_drag_begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragContext *gtk_drag_begin(GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_drag_begin$handle() {
        return gtk_drag_begin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragContext *gtk_drag_begin(GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event)
     * }
     */
    public static MemorySegment gtk_drag_begin(MemorySegment widget, MemorySegment targets, int actions, int button, MemorySegment event) {
        var mh$ = gtk_drag_begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_begin", widget, targets, actions, button, event);
            }
            return (MemorySegment)mh$.invokeExact(widget, targets, actions, button, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_cancel(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gtk_drag_cancel$descriptor() {
        return gtk_drag_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_cancel(GdkDragContext *context)
     * }
     */
    public static MethodHandle gtk_drag_cancel$handle() {
        return gtk_drag_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_cancel(GdkDragContext *context)
     * }
     */
    public static void gtk_drag_cancel(MemorySegment context) {
        var mh$ = gtk_drag_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_cancel", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_set_icon_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_set_icon_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_widget(GdkDragContext *context, GtkWidget *widget, gint hot_x, gint hot_y)
     * }
     */
    public static FunctionDescriptor gtk_drag_set_icon_widget$descriptor() {
        return gtk_drag_set_icon_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_widget(GdkDragContext *context, GtkWidget *widget, gint hot_x, gint hot_y)
     * }
     */
    public static MethodHandle gtk_drag_set_icon_widget$handle() {
        return gtk_drag_set_icon_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_widget(GdkDragContext *context, GtkWidget *widget, gint hot_x, gint hot_y)
     * }
     */
    public static void gtk_drag_set_icon_widget(MemorySegment context, MemorySegment widget, int hot_x, int hot_y) {
        var mh$ = gtk_drag_set_icon_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_set_icon_widget", context, widget, hot_x, hot_y);
            }
            mh$.invokeExact(context, widget, hot_x, hot_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_set_icon_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_set_icon_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_pixbuf(GdkDragContext *context, GdkPixbuf *pixbuf, gint hot_x, gint hot_y)
     * }
     */
    public static FunctionDescriptor gtk_drag_set_icon_pixbuf$descriptor() {
        return gtk_drag_set_icon_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_pixbuf(GdkDragContext *context, GdkPixbuf *pixbuf, gint hot_x, gint hot_y)
     * }
     */
    public static MethodHandle gtk_drag_set_icon_pixbuf$handle() {
        return gtk_drag_set_icon_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_pixbuf(GdkDragContext *context, GdkPixbuf *pixbuf, gint hot_x, gint hot_y)
     * }
     */
    public static void gtk_drag_set_icon_pixbuf(MemorySegment context, MemorySegment pixbuf, int hot_x, int hot_y) {
        var mh$ = gtk_drag_set_icon_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_set_icon_pixbuf", context, pixbuf, hot_x, hot_y);
            }
            mh$.invokeExact(context, pixbuf, hot_x, hot_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_set_icon_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_set_icon_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_stock(GdkDragContext *context, const gchar *stock_id, gint hot_x, gint hot_y)
     * }
     */
    public static FunctionDescriptor gtk_drag_set_icon_stock$descriptor() {
        return gtk_drag_set_icon_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_stock(GdkDragContext *context, const gchar *stock_id, gint hot_x, gint hot_y)
     * }
     */
    public static MethodHandle gtk_drag_set_icon_stock$handle() {
        return gtk_drag_set_icon_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_stock(GdkDragContext *context, const gchar *stock_id, gint hot_x, gint hot_y)
     * }
     */
    public static void gtk_drag_set_icon_stock(MemorySegment context, MemorySegment stock_id, int hot_x, int hot_y) {
        var mh$ = gtk_drag_set_icon_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_set_icon_stock", context, stock_id, hot_x, hot_y);
            }
            mh$.invokeExact(context, stock_id, hot_x, hot_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_set_icon_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_set_icon_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_surface(GdkDragContext *context, cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor gtk_drag_set_icon_surface$descriptor() {
        return gtk_drag_set_icon_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_surface(GdkDragContext *context, cairo_surface_t *surface)
     * }
     */
    public static MethodHandle gtk_drag_set_icon_surface$handle() {
        return gtk_drag_set_icon_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_surface(GdkDragContext *context, cairo_surface_t *surface)
     * }
     */
    public static void gtk_drag_set_icon_surface(MemorySegment context, MemorySegment surface) {
        var mh$ = gtk_drag_set_icon_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_set_icon_surface", context, surface);
            }
            mh$.invokeExact(context, surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_name(GdkDragContext *context, const gchar *icon_name, gint hot_x, gint hot_y)
     * }
     */
    public static FunctionDescriptor gtk_drag_set_icon_name$descriptor() {
        return gtk_drag_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_name(GdkDragContext *context, const gchar *icon_name, gint hot_x, gint hot_y)
     * }
     */
    public static MethodHandle gtk_drag_set_icon_name$handle() {
        return gtk_drag_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_name(GdkDragContext *context, const gchar *icon_name, gint hot_x, gint hot_y)
     * }
     */
    public static void gtk_drag_set_icon_name(MemorySegment context, MemorySegment icon_name, int hot_x, int hot_y) {
        var mh$ = gtk_drag_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_set_icon_name", context, icon_name, hot_x, hot_y);
            }
            mh$.invokeExact(context, icon_name, hot_x, hot_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_set_icon_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_set_icon_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_gicon(GdkDragContext *context, GIcon *icon, gint hot_x, gint hot_y)
     * }
     */
    public static FunctionDescriptor gtk_drag_set_icon_gicon$descriptor() {
        return gtk_drag_set_icon_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_gicon(GdkDragContext *context, GIcon *icon, gint hot_x, gint hot_y)
     * }
     */
    public static MethodHandle gtk_drag_set_icon_gicon$handle() {
        return gtk_drag_set_icon_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_gicon(GdkDragContext *context, GIcon *icon, gint hot_x, gint hot_y)
     * }
     */
    public static void gtk_drag_set_icon_gicon(MemorySegment context, MemorySegment icon, int hot_x, int hot_y) {
        var mh$ = gtk_drag_set_icon_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_set_icon_gicon", context, icon, hot_x, hot_y);
            }
            mh$.invokeExact(context, icon, hot_x, hot_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_set_icon_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_set_icon_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_default(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gtk_drag_set_icon_default$descriptor() {
        return gtk_drag_set_icon_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_default(GdkDragContext *context)
     * }
     */
    public static MethodHandle gtk_drag_set_icon_default$handle() {
        return gtk_drag_set_icon_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_set_icon_default(GdkDragContext *context)
     * }
     */
    public static void gtk_drag_set_icon_default(MemorySegment context) {
        var mh$ = gtk_drag_set_icon_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_set_icon_default", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_check_threshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_check_threshold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_drag_check_threshold(GtkWidget *widget, gint start_x, gint start_y, gint current_x, gint current_y)
     * }
     */
    public static FunctionDescriptor gtk_drag_check_threshold$descriptor() {
        return gtk_drag_check_threshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_drag_check_threshold(GtkWidget *widget, gint start_x, gint start_y, gint current_x, gint current_y)
     * }
     */
    public static MethodHandle gtk_drag_check_threshold$handle() {
        return gtk_drag_check_threshold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_drag_check_threshold(GtkWidget *widget, gint start_x, gint start_y, gint current_x, gint current_y)
     * }
     */
    public static int gtk_drag_check_threshold(MemorySegment widget, int start_x, int start_y, int current_x, int current_y) {
        var mh$ = gtk_drag_check_threshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_check_threshold", widget, start_x, start_y, current_x, current_y);
            }
            return (int)mh$.invokeExact(widget, start_x, start_y, current_x, current_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_editable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_editable_get_type$descriptor() {
        return gtk_editable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_editable_get_type()
     * }
     */
    public static MethodHandle gtk_editable_get_type$handle() {
        return gtk_editable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_editable_get_type()
     * }
     */
    public static long gtk_editable_get_type() {
        var mh$ = gtk_editable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_select_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_select_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_select_region(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static FunctionDescriptor gtk_editable_select_region$descriptor() {
        return gtk_editable_select_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_select_region(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static MethodHandle gtk_editable_select_region$handle() {
        return gtk_editable_select_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_select_region(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static void gtk_editable_select_region(MemorySegment editable, int start_pos, int end_pos) {
        var mh$ = gtk_editable_select_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_select_region", editable, start_pos, end_pos);
            }
            mh$.invokeExact(editable, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_get_selection_bounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_get_selection_bounds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_editable_get_selection_bounds(GtkEditable *editable, gint *start_pos, gint *end_pos)
     * }
     */
    public static FunctionDescriptor gtk_editable_get_selection_bounds$descriptor() {
        return gtk_editable_get_selection_bounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_editable_get_selection_bounds(GtkEditable *editable, gint *start_pos, gint *end_pos)
     * }
     */
    public static MethodHandle gtk_editable_get_selection_bounds$handle() {
        return gtk_editable_get_selection_bounds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_editable_get_selection_bounds(GtkEditable *editable, gint *start_pos, gint *end_pos)
     * }
     */
    public static int gtk_editable_get_selection_bounds(MemorySegment editable, MemorySegment start_pos, MemorySegment end_pos) {
        var mh$ = gtk_editable_get_selection_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_get_selection_bounds", editable, start_pos, end_pos);
            }
            return (int)mh$.invokeExact(editable, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_insert_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_insert_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_insert_text(GtkEditable *editable, const gchar *new_text, gint new_text_length, gint *position)
     * }
     */
    public static FunctionDescriptor gtk_editable_insert_text$descriptor() {
        return gtk_editable_insert_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_insert_text(GtkEditable *editable, const gchar *new_text, gint new_text_length, gint *position)
     * }
     */
    public static MethodHandle gtk_editable_insert_text$handle() {
        return gtk_editable_insert_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_insert_text(GtkEditable *editable, const gchar *new_text, gint new_text_length, gint *position)
     * }
     */
    public static void gtk_editable_insert_text(MemorySegment editable, MemorySegment new_text, int new_text_length, MemorySegment position) {
        var mh$ = gtk_editable_insert_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_insert_text", editable, new_text, new_text_length, position);
            }
            mh$.invokeExact(editable, new_text, new_text_length, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_delete_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_delete_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_delete_text(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static FunctionDescriptor gtk_editable_delete_text$descriptor() {
        return gtk_editable_delete_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_delete_text(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static MethodHandle gtk_editable_delete_text$handle() {
        return gtk_editable_delete_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_delete_text(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static void gtk_editable_delete_text(MemorySegment editable, int start_pos, int end_pos) {
        var mh$ = gtk_editable_delete_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_delete_text", editable, start_pos, end_pos);
            }
            mh$.invokeExact(editable, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_get_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_get_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_editable_get_chars(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static FunctionDescriptor gtk_editable_get_chars$descriptor() {
        return gtk_editable_get_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_editable_get_chars(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static MethodHandle gtk_editable_get_chars$handle() {
        return gtk_editable_get_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_editable_get_chars(GtkEditable *editable, gint start_pos, gint end_pos)
     * }
     */
    public static MemorySegment gtk_editable_get_chars(MemorySegment editable, int start_pos, int end_pos) {
        var mh$ = gtk_editable_get_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_get_chars", editable, start_pos, end_pos);
            }
            return (MemorySegment)mh$.invokeExact(editable, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_cut_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_cut_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_cut_clipboard(GtkEditable *editable)
     * }
     */
    public static FunctionDescriptor gtk_editable_cut_clipboard$descriptor() {
        return gtk_editable_cut_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_cut_clipboard(GtkEditable *editable)
     * }
     */
    public static MethodHandle gtk_editable_cut_clipboard$handle() {
        return gtk_editable_cut_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_cut_clipboard(GtkEditable *editable)
     * }
     */
    public static void gtk_editable_cut_clipboard(MemorySegment editable) {
        var mh$ = gtk_editable_cut_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_cut_clipboard", editable);
            }
            mh$.invokeExact(editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_copy_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_copy_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_copy_clipboard(GtkEditable *editable)
     * }
     */
    public static FunctionDescriptor gtk_editable_copy_clipboard$descriptor() {
        return gtk_editable_copy_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_copy_clipboard(GtkEditable *editable)
     * }
     */
    public static MethodHandle gtk_editable_copy_clipboard$handle() {
        return gtk_editable_copy_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_copy_clipboard(GtkEditable *editable)
     * }
     */
    public static void gtk_editable_copy_clipboard(MemorySegment editable) {
        var mh$ = gtk_editable_copy_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_copy_clipboard", editable);
            }
            mh$.invokeExact(editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_paste_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_paste_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_paste_clipboard(GtkEditable *editable)
     * }
     */
    public static FunctionDescriptor gtk_editable_paste_clipboard$descriptor() {
        return gtk_editable_paste_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_paste_clipboard(GtkEditable *editable)
     * }
     */
    public static MethodHandle gtk_editable_paste_clipboard$handle() {
        return gtk_editable_paste_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_paste_clipboard(GtkEditable *editable)
     * }
     */
    public static void gtk_editable_paste_clipboard(MemorySegment editable) {
        var mh$ = gtk_editable_paste_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_paste_clipboard", editable);
            }
            mh$.invokeExact(editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_delete_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_delete_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_delete_selection(GtkEditable *editable)
     * }
     */
    public static FunctionDescriptor gtk_editable_delete_selection$descriptor() {
        return gtk_editable_delete_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_delete_selection(GtkEditable *editable)
     * }
     */
    public static MethodHandle gtk_editable_delete_selection$handle() {
        return gtk_editable_delete_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_delete_selection(GtkEditable *editable)
     * }
     */
    public static void gtk_editable_delete_selection(MemorySegment editable) {
        var mh$ = gtk_editable_delete_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_delete_selection", editable);
            }
            mh$.invokeExact(editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_set_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_set_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_set_position(GtkEditable *editable, gint position)
     * }
     */
    public static FunctionDescriptor gtk_editable_set_position$descriptor() {
        return gtk_editable_set_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_set_position(GtkEditable *editable, gint position)
     * }
     */
    public static MethodHandle gtk_editable_set_position$handle() {
        return gtk_editable_set_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_set_position(GtkEditable *editable, gint position)
     * }
     */
    public static void gtk_editable_set_position(MemorySegment editable, int position) {
        var mh$ = gtk_editable_set_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_set_position", editable, position);
            }
            mh$.invokeExact(editable, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_editable_get_position(GtkEditable *editable)
     * }
     */
    public static FunctionDescriptor gtk_editable_get_position$descriptor() {
        return gtk_editable_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_editable_get_position(GtkEditable *editable)
     * }
     */
    public static MethodHandle gtk_editable_get_position$handle() {
        return gtk_editable_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_editable_get_position(GtkEditable *editable)
     * }
     */
    public static int gtk_editable_get_position(MemorySegment editable) {
        var mh$ = gtk_editable_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_get_position", editable);
            }
            return (int)mh$.invokeExact(editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_set_editable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_set_editable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_editable_set_editable(GtkEditable *editable, gboolean is_editable)
     * }
     */
    public static FunctionDescriptor gtk_editable_set_editable$descriptor() {
        return gtk_editable_set_editable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_editable_set_editable(GtkEditable *editable, gboolean is_editable)
     * }
     */
    public static MethodHandle gtk_editable_set_editable$handle() {
        return gtk_editable_set_editable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_editable_set_editable(GtkEditable *editable, gboolean is_editable)
     * }
     */
    public static void gtk_editable_set_editable(MemorySegment editable, int is_editable) {
        var mh$ = gtk_editable_set_editable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_set_editable", editable, is_editable);
            }
            mh$.invokeExact(editable, is_editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_editable_get_editable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_editable_get_editable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_editable_get_editable(GtkEditable *editable)
     * }
     */
    public static FunctionDescriptor gtk_editable_get_editable$descriptor() {
        return gtk_editable_get_editable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_editable_get_editable(GtkEditable *editable)
     * }
     */
    public static MethodHandle gtk_editable_get_editable$handle() {
        return gtk_editable_get_editable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_editable_get_editable(GtkEditable *editable)
     * }
     */
    public static int gtk_editable_get_editable(MemorySegment editable) {
        var mh$ = gtk_editable_get_editable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_editable_get_editable", editable);
            }
            return (int)mh$.invokeExact(editable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_im_context_get_type()
     * }
     */
    public static FunctionDescriptor gtk_im_context_get_type$descriptor() {
        return gtk_im_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_im_context_get_type()
     * }
     */
    public static MethodHandle gtk_im_context_get_type$handle() {
        return gtk_im_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_im_context_get_type()
     * }
     */
    public static long gtk_im_context_get_type() {
        var mh$ = gtk_im_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_set_client_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_set_client_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_client_window(GtkIMContext *context, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_im_context_set_client_window$descriptor() {
        return gtk_im_context_set_client_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_client_window(GtkIMContext *context, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_im_context_set_client_window$handle() {
        return gtk_im_context_set_client_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_set_client_window(GtkIMContext *context, GdkWindow *window)
     * }
     */
    public static void gtk_im_context_set_client_window(MemorySegment context, MemorySegment window) {
        var mh$ = gtk_im_context_set_client_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_set_client_window", context, window);
            }
            mh$.invokeExact(context, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_get_preedit_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_get_preedit_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_get_preedit_string(GtkIMContext *context, gchar **str, PangoAttrList **attrs, gint *cursor_pos)
     * }
     */
    public static FunctionDescriptor gtk_im_context_get_preedit_string$descriptor() {
        return gtk_im_context_get_preedit_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_get_preedit_string(GtkIMContext *context, gchar **str, PangoAttrList **attrs, gint *cursor_pos)
     * }
     */
    public static MethodHandle gtk_im_context_get_preedit_string$handle() {
        return gtk_im_context_get_preedit_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_get_preedit_string(GtkIMContext *context, gchar **str, PangoAttrList **attrs, gint *cursor_pos)
     * }
     */
    public static void gtk_im_context_get_preedit_string(MemorySegment context, MemorySegment str, MemorySegment attrs, MemorySegment cursor_pos) {
        var mh$ = gtk_im_context_get_preedit_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_get_preedit_string", context, str, attrs, cursor_pos);
            }
            mh$.invokeExact(context, str, attrs, cursor_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_filter_keypress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_filter_keypress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_filter_keypress(GtkIMContext *context, GdkEventKey *event)
     * }
     */
    public static FunctionDescriptor gtk_im_context_filter_keypress$descriptor() {
        return gtk_im_context_filter_keypress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_filter_keypress(GtkIMContext *context, GdkEventKey *event)
     * }
     */
    public static MethodHandle gtk_im_context_filter_keypress$handle() {
        return gtk_im_context_filter_keypress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_filter_keypress(GtkIMContext *context, GdkEventKey *event)
     * }
     */
    public static int gtk_im_context_filter_keypress(MemorySegment context, MemorySegment event) {
        var mh$ = gtk_im_context_filter_keypress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_filter_keypress", context, event);
            }
            return (int)mh$.invokeExact(context, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_focus_in {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_focus_in"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_focus_in(GtkIMContext *context)
     * }
     */
    public static FunctionDescriptor gtk_im_context_focus_in$descriptor() {
        return gtk_im_context_focus_in.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_focus_in(GtkIMContext *context)
     * }
     */
    public static MethodHandle gtk_im_context_focus_in$handle() {
        return gtk_im_context_focus_in.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_focus_in(GtkIMContext *context)
     * }
     */
    public static void gtk_im_context_focus_in(MemorySegment context) {
        var mh$ = gtk_im_context_focus_in.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_focus_in", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_focus_out {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_focus_out"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_focus_out(GtkIMContext *context)
     * }
     */
    public static FunctionDescriptor gtk_im_context_focus_out$descriptor() {
        return gtk_im_context_focus_out.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_focus_out(GtkIMContext *context)
     * }
     */
    public static MethodHandle gtk_im_context_focus_out$handle() {
        return gtk_im_context_focus_out.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_focus_out(GtkIMContext *context)
     * }
     */
    public static void gtk_im_context_focus_out(MemorySegment context) {
        var mh$ = gtk_im_context_focus_out.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_focus_out", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_reset(GtkIMContext *context)
     * }
     */
    public static FunctionDescriptor gtk_im_context_reset$descriptor() {
        return gtk_im_context_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_reset(GtkIMContext *context)
     * }
     */
    public static MethodHandle gtk_im_context_reset$handle() {
        return gtk_im_context_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_reset(GtkIMContext *context)
     * }
     */
    public static void gtk_im_context_reset(MemorySegment context) {
        var mh$ = gtk_im_context_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_reset", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_set_cursor_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_set_cursor_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_cursor_location(GtkIMContext *context, const GdkRectangle *area)
     * }
     */
    public static FunctionDescriptor gtk_im_context_set_cursor_location$descriptor() {
        return gtk_im_context_set_cursor_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_cursor_location(GtkIMContext *context, const GdkRectangle *area)
     * }
     */
    public static MethodHandle gtk_im_context_set_cursor_location$handle() {
        return gtk_im_context_set_cursor_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_set_cursor_location(GtkIMContext *context, const GdkRectangle *area)
     * }
     */
    public static void gtk_im_context_set_cursor_location(MemorySegment context, MemorySegment area) {
        var mh$ = gtk_im_context_set_cursor_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_set_cursor_location", context, area);
            }
            mh$.invokeExact(context, area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_set_use_preedit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_set_use_preedit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_use_preedit(GtkIMContext *context, gboolean use_preedit)
     * }
     */
    public static FunctionDescriptor gtk_im_context_set_use_preedit$descriptor() {
        return gtk_im_context_set_use_preedit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_use_preedit(GtkIMContext *context, gboolean use_preedit)
     * }
     */
    public static MethodHandle gtk_im_context_set_use_preedit$handle() {
        return gtk_im_context_set_use_preedit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_set_use_preedit(GtkIMContext *context, gboolean use_preedit)
     * }
     */
    public static void gtk_im_context_set_use_preedit(MemorySegment context, int use_preedit) {
        var mh$ = gtk_im_context_set_use_preedit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_set_use_preedit", context, use_preedit);
            }
            mh$.invokeExact(context, use_preedit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_set_surrounding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_set_surrounding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_surrounding(GtkIMContext *context, const gchar *text, gint len, gint cursor_index)
     * }
     */
    public static FunctionDescriptor gtk_im_context_set_surrounding$descriptor() {
        return gtk_im_context_set_surrounding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_im_context_set_surrounding(GtkIMContext *context, const gchar *text, gint len, gint cursor_index)
     * }
     */
    public static MethodHandle gtk_im_context_set_surrounding$handle() {
        return gtk_im_context_set_surrounding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_im_context_set_surrounding(GtkIMContext *context, const gchar *text, gint len, gint cursor_index)
     * }
     */
    public static void gtk_im_context_set_surrounding(MemorySegment context, MemorySegment text, int len, int cursor_index) {
        var mh$ = gtk_im_context_set_surrounding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_set_surrounding", context, text, len, cursor_index);
            }
            mh$.invokeExact(context, text, len, cursor_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_get_surrounding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_get_surrounding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_get_surrounding(GtkIMContext *context, gchar **text, gint *cursor_index)
     * }
     */
    public static FunctionDescriptor gtk_im_context_get_surrounding$descriptor() {
        return gtk_im_context_get_surrounding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_get_surrounding(GtkIMContext *context, gchar **text, gint *cursor_index)
     * }
     */
    public static MethodHandle gtk_im_context_get_surrounding$handle() {
        return gtk_im_context_get_surrounding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_get_surrounding(GtkIMContext *context, gchar **text, gint *cursor_index)
     * }
     */
    public static int gtk_im_context_get_surrounding(MemorySegment context, MemorySegment text, MemorySegment cursor_index) {
        var mh$ = gtk_im_context_get_surrounding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_get_surrounding", context, text, cursor_index);
            }
            return (int)mh$.invokeExact(context, text, cursor_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_im_context_delete_surrounding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_im_context_delete_surrounding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_delete_surrounding(GtkIMContext *context, gint offset, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_im_context_delete_surrounding$descriptor() {
        return gtk_im_context_delete_surrounding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_delete_surrounding(GtkIMContext *context, gint offset, gint n_chars)
     * }
     */
    public static MethodHandle gtk_im_context_delete_surrounding$handle() {
        return gtk_im_context_delete_surrounding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_im_context_delete_surrounding(GtkIMContext *context, gint offset, gint n_chars)
     * }
     */
    public static int gtk_im_context_delete_surrounding(MemorySegment context, int offset, int n_chars) {
        var mh$ = gtk_im_context_delete_surrounding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_im_context_delete_surrounding", context, offset, n_chars);
            }
            return (int)mh$.invokeExact(context, offset, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_entry_buffer_get_type()
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_get_type$descriptor() {
        return gtk_entry_buffer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_entry_buffer_get_type()
     * }
     */
    public static MethodHandle gtk_entry_buffer_get_type$handle() {
        return gtk_entry_buffer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_entry_buffer_get_type()
     * }
     */
    public static long gtk_entry_buffer_get_type() {
        var mh$ = gtk_entry_buffer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEntryBuffer *gtk_entry_buffer_new(const gchar *initial_chars, gint n_initial_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_new$descriptor() {
        return gtk_entry_buffer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEntryBuffer *gtk_entry_buffer_new(const gchar *initial_chars, gint n_initial_chars)
     * }
     */
    public static MethodHandle gtk_entry_buffer_new$handle() {
        return gtk_entry_buffer_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEntryBuffer *gtk_entry_buffer_new(const gchar *initial_chars, gint n_initial_chars)
     * }
     */
    public static MemorySegment gtk_entry_buffer_new(MemorySegment initial_chars, int n_initial_chars) {
        var mh$ = gtk_entry_buffer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_new", initial_chars, n_initial_chars);
            }
            return (MemorySegment)mh$.invokeExact(initial_chars, n_initial_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_get_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_get_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize gtk_entry_buffer_get_bytes(GtkEntryBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_get_bytes$descriptor() {
        return gtk_entry_buffer_get_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize gtk_entry_buffer_get_bytes(GtkEntryBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_entry_buffer_get_bytes$handle() {
        return gtk_entry_buffer_get_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize gtk_entry_buffer_get_bytes(GtkEntryBuffer *buffer)
     * }
     */
    public static long gtk_entry_buffer_get_bytes(MemorySegment buffer) {
        var mh$ = gtk_entry_buffer_get_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_get_bytes", buffer);
            }
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_get_length(GtkEntryBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_get_length$descriptor() {
        return gtk_entry_buffer_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_get_length(GtkEntryBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_entry_buffer_get_length$handle() {
        return gtk_entry_buffer_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_get_length(GtkEntryBuffer *buffer)
     * }
     */
    public static int gtk_entry_buffer_get_length(MemorySegment buffer) {
        var mh$ = gtk_entry_buffer_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_get_length", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_buffer_get_text(GtkEntryBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_get_text$descriptor() {
        return gtk_entry_buffer_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_buffer_get_text(GtkEntryBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_entry_buffer_get_text$handle() {
        return gtk_entry_buffer_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_buffer_get_text(GtkEntryBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_entry_buffer_get_text(MemorySegment buffer) {
        var mh$ = gtk_entry_buffer_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_get_text", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_set_text(GtkEntryBuffer *buffer, const gchar *chars, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_set_text$descriptor() {
        return gtk_entry_buffer_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_set_text(GtkEntryBuffer *buffer, const gchar *chars, gint n_chars)
     * }
     */
    public static MethodHandle gtk_entry_buffer_set_text$handle() {
        return gtk_entry_buffer_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_set_text(GtkEntryBuffer *buffer, const gchar *chars, gint n_chars)
     * }
     */
    public static void gtk_entry_buffer_set_text(MemorySegment buffer, MemorySegment chars, int n_chars) {
        var mh$ = gtk_entry_buffer_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_set_text", buffer, chars, n_chars);
            }
            mh$.invokeExact(buffer, chars, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_set_max_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_set_max_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_set_max_length(GtkEntryBuffer *buffer, gint max_length)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_set_max_length$descriptor() {
        return gtk_entry_buffer_set_max_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_set_max_length(GtkEntryBuffer *buffer, gint max_length)
     * }
     */
    public static MethodHandle gtk_entry_buffer_set_max_length$handle() {
        return gtk_entry_buffer_set_max_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_set_max_length(GtkEntryBuffer *buffer, gint max_length)
     * }
     */
    public static void gtk_entry_buffer_set_max_length(MemorySegment buffer, int max_length) {
        var mh$ = gtk_entry_buffer_set_max_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_set_max_length", buffer, max_length);
            }
            mh$.invokeExact(buffer, max_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_get_max_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_get_max_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_buffer_get_max_length(GtkEntryBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_get_max_length$descriptor() {
        return gtk_entry_buffer_get_max_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_buffer_get_max_length(GtkEntryBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_entry_buffer_get_max_length$handle() {
        return gtk_entry_buffer_get_max_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_buffer_get_max_length(GtkEntryBuffer *buffer)
     * }
     */
    public static int gtk_entry_buffer_get_max_length(MemorySegment buffer) {
        var mh$ = gtk_entry_buffer_get_max_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_get_max_length", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_insert_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_insert_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_insert_text(GtkEntryBuffer *buffer, guint position, const gchar *chars, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_insert_text$descriptor() {
        return gtk_entry_buffer_insert_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_insert_text(GtkEntryBuffer *buffer, guint position, const gchar *chars, gint n_chars)
     * }
     */
    public static MethodHandle gtk_entry_buffer_insert_text$handle() {
        return gtk_entry_buffer_insert_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_insert_text(GtkEntryBuffer *buffer, guint position, const gchar *chars, gint n_chars)
     * }
     */
    public static int gtk_entry_buffer_insert_text(MemorySegment buffer, int position, MemorySegment chars, int n_chars) {
        var mh$ = gtk_entry_buffer_insert_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_insert_text", buffer, position, chars, n_chars);
            }
            return (int)mh$.invokeExact(buffer, position, chars, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_delete_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_delete_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_delete_text(GtkEntryBuffer *buffer, guint position, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_delete_text$descriptor() {
        return gtk_entry_buffer_delete_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_delete_text(GtkEntryBuffer *buffer, guint position, gint n_chars)
     * }
     */
    public static MethodHandle gtk_entry_buffer_delete_text$handle() {
        return gtk_entry_buffer_delete_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_entry_buffer_delete_text(GtkEntryBuffer *buffer, guint position, gint n_chars)
     * }
     */
    public static int gtk_entry_buffer_delete_text(MemorySegment buffer, int position, int n_chars) {
        var mh$ = gtk_entry_buffer_delete_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_delete_text", buffer, position, n_chars);
            }
            return (int)mh$.invokeExact(buffer, position, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_emit_inserted_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_emit_inserted_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer *buffer, guint position, const gchar *chars, guint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_emit_inserted_text$descriptor() {
        return gtk_entry_buffer_emit_inserted_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer *buffer, guint position, const gchar *chars, guint n_chars)
     * }
     */
    public static MethodHandle gtk_entry_buffer_emit_inserted_text$handle() {
        return gtk_entry_buffer_emit_inserted_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer *buffer, guint position, const gchar *chars, guint n_chars)
     * }
     */
    public static void gtk_entry_buffer_emit_inserted_text(MemorySegment buffer, int position, MemorySegment chars, int n_chars) {
        var mh$ = gtk_entry_buffer_emit_inserted_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_emit_inserted_text", buffer, position, chars, n_chars);
            }
            mh$.invokeExact(buffer, position, chars, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_buffer_emit_deleted_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_buffer_emit_deleted_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_emit_deleted_text(GtkEntryBuffer *buffer, guint position, guint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_buffer_emit_deleted_text$descriptor() {
        return gtk_entry_buffer_emit_deleted_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_emit_deleted_text(GtkEntryBuffer *buffer, guint position, guint n_chars)
     * }
     */
    public static MethodHandle gtk_entry_buffer_emit_deleted_text$handle() {
        return gtk_entry_buffer_emit_deleted_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_buffer_emit_deleted_text(GtkEntryBuffer *buffer, guint position, guint n_chars)
     * }
     */
    public static void gtk_entry_buffer_emit_deleted_text(MemorySegment buffer, int position, int n_chars) {
        var mh$ = gtk_entry_buffer_emit_deleted_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_buffer_emit_deleted_text", buffer, position, n_chars);
            }
            mh$.invokeExact(buffer, position, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_list_store_get_type()
     * }
     */
    public static FunctionDescriptor gtk_list_store_get_type$descriptor() {
        return gtk_list_store_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_list_store_get_type()
     * }
     */
    public static MethodHandle gtk_list_store_get_type$handle() {
        return gtk_list_store_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_list_store_get_type()
     * }
     */
    public static long gtk_list_store_get_type() {
        var mh$ = gtk_list_store_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkListStore *gtk_list_store_new(gint n_columns, ...)
     * }
     */
    public static class gtk_list_store_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_list_store_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_list_store_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkListStore *gtk_list_store_new(gint n_columns, ...)
         * }
         */
        public static gtk_list_store_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_list_store_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int n_columns, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_list_store_new", n_columns, x1);
                }
                return (MemorySegment)spreader.invokeExact(n_columns, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_list_store_newv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_newv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkListStore *gtk_list_store_newv(gint n_columns, GType *types)
     * }
     */
    public static FunctionDescriptor gtk_list_store_newv$descriptor() {
        return gtk_list_store_newv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkListStore *gtk_list_store_newv(gint n_columns, GType *types)
     * }
     */
    public static MethodHandle gtk_list_store_newv$handle() {
        return gtk_list_store_newv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkListStore *gtk_list_store_newv(gint n_columns, GType *types)
     * }
     */
    public static MemorySegment gtk_list_store_newv(int n_columns, MemorySegment types) {
        var mh$ = gtk_list_store_newv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_newv", n_columns, types);
            }
            return (MemorySegment)mh$.invokeExact(n_columns, types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_set_column_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_set_column_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_set_column_types(GtkListStore *list_store, gint n_columns, GType *types)
     * }
     */
    public static FunctionDescriptor gtk_list_store_set_column_types$descriptor() {
        return gtk_list_store_set_column_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_set_column_types(GtkListStore *list_store, gint n_columns, GType *types)
     * }
     */
    public static MethodHandle gtk_list_store_set_column_types$handle() {
        return gtk_list_store_set_column_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_set_column_types(GtkListStore *list_store, gint n_columns, GType *types)
     * }
     */
    public static void gtk_list_store_set_column_types(MemorySegment list_store, int n_columns, MemorySegment types) {
        var mh$ = gtk_list_store_set_column_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_set_column_types", list_store, n_columns, types);
            }
            mh$.invokeExact(list_store, n_columns, types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_set_value(GtkListStore *list_store, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_list_store_set_value$descriptor() {
        return gtk_list_store_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_set_value(GtkListStore *list_store, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static MethodHandle gtk_list_store_set_value$handle() {
        return gtk_list_store_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_set_value(GtkListStore *list_store, GtkTreeIter *iter, gint column, GValue *value)
     * }
     */
    public static void gtk_list_store_set_value(MemorySegment list_store, MemorySegment iter, int column, MemorySegment value) {
        var mh$ = gtk_list_store_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_set_value", list_store, iter, column, value);
            }
            mh$.invokeExact(list_store, iter, column, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_list_store_set(GtkListStore *list_store, GtkTreeIter *iter, ...)
     * }
     */
    public static class gtk_list_store_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_list_store_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_list_store_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_list_store_set(GtkListStore *list_store, GtkTreeIter *iter, ...)
         * }
         */
        public static gtk_list_store_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_list_store_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment list_store, MemorySegment iter, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_list_store_set", list_store, iter, x2);
                }
                spreader.invokeExact(list_store, iter, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_list_store_set_valuesv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_set_valuesv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_set_valuesv(GtkListStore *list_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static FunctionDescriptor gtk_list_store_set_valuesv$descriptor() {
        return gtk_list_store_set_valuesv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_set_valuesv(GtkListStore *list_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static MethodHandle gtk_list_store_set_valuesv$handle() {
        return gtk_list_store_set_valuesv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_set_valuesv(GtkListStore *list_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static void gtk_list_store_set_valuesv(MemorySegment list_store, MemorySegment iter, MemorySegment columns, MemorySegment values, int n_values) {
        var mh$ = gtk_list_store_set_valuesv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_set_valuesv", list_store, iter, columns, values, n_values);
            }
            mh$.invokeExact(list_store, iter, columns, values, n_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_store_remove(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_list_store_remove$descriptor() {
        return gtk_list_store_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_store_remove(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_list_store_remove$handle() {
        return gtk_list_store_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_list_store_remove(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static int gtk_list_store_remove(MemorySegment list_store, MemorySegment iter) {
        var mh$ = gtk_list_store_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_remove", list_store, iter);
            }
            return (int)mh$.invokeExact(list_store, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert(GtkListStore *list_store, GtkTreeIter *iter, gint position)
     * }
     */
    public static FunctionDescriptor gtk_list_store_insert$descriptor() {
        return gtk_list_store_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert(GtkListStore *list_store, GtkTreeIter *iter, gint position)
     * }
     */
    public static MethodHandle gtk_list_store_insert$handle() {
        return gtk_list_store_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_insert(GtkListStore *list_store, GtkTreeIter *iter, gint position)
     * }
     */
    public static void gtk_list_store_insert(MemorySegment list_store, MemorySegment iter, int position) {
        var mh$ = gtk_list_store_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_insert", list_store, iter, position);
            }
            mh$.invokeExact(list_store, iter, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_before(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling)
     * }
     */
    public static FunctionDescriptor gtk_list_store_insert_before$descriptor() {
        return gtk_list_store_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_before(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling)
     * }
     */
    public static MethodHandle gtk_list_store_insert_before$handle() {
        return gtk_list_store_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_before(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling)
     * }
     */
    public static void gtk_list_store_insert_before(MemorySegment list_store, MemorySegment iter, MemorySegment sibling) {
        var mh$ = gtk_list_store_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_insert_before", list_store, iter, sibling);
            }
            mh$.invokeExact(list_store, iter, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_insert_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_insert_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_after(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling)
     * }
     */
    public static FunctionDescriptor gtk_list_store_insert_after$descriptor() {
        return gtk_list_store_insert_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_after(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling)
     * }
     */
    public static MethodHandle gtk_list_store_insert_after$handle() {
        return gtk_list_store_insert_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_after(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling)
     * }
     */
    public static void gtk_list_store_insert_after(MemorySegment list_store, MemorySegment iter, MemorySegment sibling) {
        var mh$ = gtk_list_store_insert_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_insert_after", list_store, iter, sibling);
            }
            mh$.invokeExact(list_store, iter, sibling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_with_values(GtkListStore *list_store, GtkTreeIter *iter, gint position, ...)
     * }
     */
    public static class gtk_list_store_insert_with_values {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_list_store_insert_with_values");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_list_store_insert_with_values(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_list_store_insert_with_values(GtkListStore *list_store, GtkTreeIter *iter, gint position, ...)
         * }
         */
        public static gtk_list_store_insert_with_values makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_list_store_insert_with_values(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment list_store, MemorySegment iter, int position, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_list_store_insert_with_values", list_store, iter, position, x3);
                }
                spreader.invokeExact(list_store, iter, position, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_list_store_insert_with_valuesv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_insert_with_valuesv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_with_valuesv(GtkListStore *list_store, GtkTreeIter *iter, gint position, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static FunctionDescriptor gtk_list_store_insert_with_valuesv$descriptor() {
        return gtk_list_store_insert_with_valuesv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_with_valuesv(GtkListStore *list_store, GtkTreeIter *iter, gint position, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static MethodHandle gtk_list_store_insert_with_valuesv$handle() {
        return gtk_list_store_insert_with_valuesv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_insert_with_valuesv(GtkListStore *list_store, GtkTreeIter *iter, gint position, gint *columns, GValue *values, gint n_values)
     * }
     */
    public static void gtk_list_store_insert_with_valuesv(MemorySegment list_store, MemorySegment iter, int position, MemorySegment columns, MemorySegment values, int n_values) {
        var mh$ = gtk_list_store_insert_with_valuesv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_insert_with_valuesv", list_store, iter, position, columns, values, n_values);
            }
            mh$.invokeExact(list_store, iter, position, columns, values, n_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_prepend(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_list_store_prepend$descriptor() {
        return gtk_list_store_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_prepend(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_list_store_prepend$handle() {
        return gtk_list_store_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_prepend(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static void gtk_list_store_prepend(MemorySegment list_store, MemorySegment iter) {
        var mh$ = gtk_list_store_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_prepend", list_store, iter);
            }
            mh$.invokeExact(list_store, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_append(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_list_store_append$descriptor() {
        return gtk_list_store_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_append(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_list_store_append$handle() {
        return gtk_list_store_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_append(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static void gtk_list_store_append(MemorySegment list_store, MemorySegment iter) {
        var mh$ = gtk_list_store_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_append", list_store, iter);
            }
            mh$.invokeExact(list_store, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_clear(GtkListStore *list_store)
     * }
     */
    public static FunctionDescriptor gtk_list_store_clear$descriptor() {
        return gtk_list_store_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_clear(GtkListStore *list_store)
     * }
     */
    public static MethodHandle gtk_list_store_clear$handle() {
        return gtk_list_store_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_clear(GtkListStore *list_store)
     * }
     */
    public static void gtk_list_store_clear(MemorySegment list_store) {
        var mh$ = gtk_list_store_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_clear", list_store);
            }
            mh$.invokeExact(list_store);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_iter_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_iter_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_store_iter_is_valid(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_list_store_iter_is_valid$descriptor() {
        return gtk_list_store_iter_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_list_store_iter_is_valid(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_list_store_iter_is_valid$handle() {
        return gtk_list_store_iter_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_list_store_iter_is_valid(GtkListStore *list_store, GtkTreeIter *iter)
     * }
     */
    public static int gtk_list_store_iter_is_valid(MemorySegment list_store, MemorySegment iter) {
        var mh$ = gtk_list_store_iter_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_iter_is_valid", list_store, iter);
            }
            return (int)mh$.invokeExact(list_store, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_reorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_reorder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_reorder(GtkListStore *store, gint *new_order)
     * }
     */
    public static FunctionDescriptor gtk_list_store_reorder$descriptor() {
        return gtk_list_store_reorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_reorder(GtkListStore *store, gint *new_order)
     * }
     */
    public static MethodHandle gtk_list_store_reorder$handle() {
        return gtk_list_store_reorder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_reorder(GtkListStore *store, gint *new_order)
     * }
     */
    public static void gtk_list_store_reorder(MemorySegment store, MemorySegment new_order) {
        var mh$ = gtk_list_store_reorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_reorder", store, new_order);
            }
            mh$.invokeExact(store, new_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_swap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_swap(GtkListStore *store, GtkTreeIter *a, GtkTreeIter *b)
     * }
     */
    public static FunctionDescriptor gtk_list_store_swap$descriptor() {
        return gtk_list_store_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_swap(GtkListStore *store, GtkTreeIter *a, GtkTreeIter *b)
     * }
     */
    public static MethodHandle gtk_list_store_swap$handle() {
        return gtk_list_store_swap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_swap(GtkListStore *store, GtkTreeIter *a, GtkTreeIter *b)
     * }
     */
    public static void gtk_list_store_swap(MemorySegment store, MemorySegment a, MemorySegment b) {
        var mh$ = gtk_list_store_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_swap", store, a, b);
            }
            mh$.invokeExact(store, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_move_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_move_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_move_after(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static FunctionDescriptor gtk_list_store_move_after$descriptor() {
        return gtk_list_store_move_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_move_after(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static MethodHandle gtk_list_store_move_after$handle() {
        return gtk_list_store_move_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_move_after(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static void gtk_list_store_move_after(MemorySegment store, MemorySegment iter, MemorySegment position) {
        var mh$ = gtk_list_store_move_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_move_after", store, iter, position);
            }
            mh$.invokeExact(store, iter, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_list_store_move_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_list_store_move_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_list_store_move_before(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static FunctionDescriptor gtk_list_store_move_before$descriptor() {
        return gtk_list_store_move_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_list_store_move_before(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static MethodHandle gtk_list_store_move_before$handle() {
        return gtk_list_store_move_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_list_store_move_before(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position)
     * }
     */
    public static void gtk_list_store_move_before(MemorySegment store, MemorySegment iter, MemorySegment position) {
        var mh$ = gtk_list_store_move_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_list_store_move_before", store, iter, position);
            }
            mh$.invokeExact(store, iter, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_filter_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_get_type$descriptor() {
        return gtk_tree_model_filter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_model_filter_get_type()
     * }
     */
    public static MethodHandle gtk_tree_model_filter_get_type$handle() {
        return gtk_tree_model_filter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_model_filter_get_type()
     * }
     */
    public static long gtk_tree_model_filter_get_type() {
        var mh$ = gtk_tree_model_filter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_filter_new(GtkTreeModel *child_model, GtkTreePath *root)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_new$descriptor() {
        return gtk_tree_model_filter_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_filter_new(GtkTreeModel *child_model, GtkTreePath *root)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_new$handle() {
        return gtk_tree_model_filter_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_filter_new(GtkTreeModel *child_model, GtkTreePath *root)
     * }
     */
    public static MemorySegment gtk_tree_model_filter_new(MemorySegment child_model, MemorySegment root) {
        var mh$ = gtk_tree_model_filter_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_new", child_model, root);
            }
            return (MemorySegment)mh$.invokeExact(child_model, root);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_set_visible_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_set_visible_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter *filter, GtkTreeModelFilterVisibleFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_set_visible_func$descriptor() {
        return gtk_tree_model_filter_set_visible_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter *filter, GtkTreeModelFilterVisibleFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_set_visible_func$handle() {
        return gtk_tree_model_filter_set_visible_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter *filter, GtkTreeModelFilterVisibleFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_model_filter_set_visible_func(MemorySegment filter, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_tree_model_filter_set_visible_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_set_visible_func", filter, func, data, destroy);
            }
            mh$.invokeExact(filter, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_set_modify_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_set_modify_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter *filter, gint n_columns, GType *types, GtkTreeModelFilterModifyFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_set_modify_func$descriptor() {
        return gtk_tree_model_filter_set_modify_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter *filter, gint n_columns, GType *types, GtkTreeModelFilterModifyFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_set_modify_func$handle() {
        return gtk_tree_model_filter_set_modify_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter *filter, gint n_columns, GType *types, GtkTreeModelFilterModifyFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_model_filter_set_modify_func(MemorySegment filter, int n_columns, MemorySegment types, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_tree_model_filter_set_modify_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_set_modify_func", filter, n_columns, types, func, data, destroy);
            }
            mh$.invokeExact(filter, n_columns, types, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_set_visible_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_set_visible_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_visible_column(GtkTreeModelFilter *filter, gint column)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_set_visible_column$descriptor() {
        return gtk_tree_model_filter_set_visible_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_visible_column(GtkTreeModelFilter *filter, gint column)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_set_visible_column$handle() {
        return gtk_tree_model_filter_set_visible_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_set_visible_column(GtkTreeModelFilter *filter, gint column)
     * }
     */
    public static void gtk_tree_model_filter_set_visible_column(MemorySegment filter, int column) {
        var mh$ = gtk_tree_model_filter_set_visible_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_set_visible_column", filter, column);
            }
            mh$.invokeExact(filter, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_filter_get_model(GtkTreeModelFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_get_model$descriptor() {
        return gtk_tree_model_filter_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_filter_get_model(GtkTreeModelFilter *filter)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_get_model$handle() {
        return gtk_tree_model_filter_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_model_filter_get_model(GtkTreeModelFilter *filter)
     * }
     */
    public static MemorySegment gtk_tree_model_filter_get_model(MemorySegment filter) {
        var mh$ = gtk_tree_model_filter_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_get_model", filter);
            }
            return (MemorySegment)mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_convert_child_iter_to_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_convert_child_iter_to_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter *filter, GtkTreeIter *filter_iter, GtkTreeIter *child_iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_convert_child_iter_to_iter$descriptor() {
        return gtk_tree_model_filter_convert_child_iter_to_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter *filter, GtkTreeIter *filter_iter, GtkTreeIter *child_iter)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_convert_child_iter_to_iter$handle() {
        return gtk_tree_model_filter_convert_child_iter_to_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter *filter, GtkTreeIter *filter_iter, GtkTreeIter *child_iter)
     * }
     */
    public static int gtk_tree_model_filter_convert_child_iter_to_iter(MemorySegment filter, MemorySegment filter_iter, MemorySegment child_iter) {
        var mh$ = gtk_tree_model_filter_convert_child_iter_to_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_convert_child_iter_to_iter", filter, filter_iter, child_iter);
            }
            return (int)mh$.invokeExact(filter, filter_iter, child_iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_convert_iter_to_child_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_convert_iter_to_child_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter *filter, GtkTreeIter *child_iter, GtkTreeIter *filter_iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_convert_iter_to_child_iter$descriptor() {
        return gtk_tree_model_filter_convert_iter_to_child_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter *filter, GtkTreeIter *child_iter, GtkTreeIter *filter_iter)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_convert_iter_to_child_iter$handle() {
        return gtk_tree_model_filter_convert_iter_to_child_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter *filter, GtkTreeIter *child_iter, GtkTreeIter *filter_iter)
     * }
     */
    public static void gtk_tree_model_filter_convert_iter_to_child_iter(MemorySegment filter, MemorySegment child_iter, MemorySegment filter_iter) {
        var mh$ = gtk_tree_model_filter_convert_iter_to_child_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_convert_iter_to_child_iter", filter, child_iter, filter_iter);
            }
            mh$.invokeExact(filter, child_iter, filter_iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_convert_child_path_to_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_convert_child_path_to_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter *filter, GtkTreePath *child_path)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_convert_child_path_to_path$descriptor() {
        return gtk_tree_model_filter_convert_child_path_to_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter *filter, GtkTreePath *child_path)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_convert_child_path_to_path$handle() {
        return gtk_tree_model_filter_convert_child_path_to_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter *filter, GtkTreePath *child_path)
     * }
     */
    public static MemorySegment gtk_tree_model_filter_convert_child_path_to_path(MemorySegment filter, MemorySegment child_path) {
        var mh$ = gtk_tree_model_filter_convert_child_path_to_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_convert_child_path_to_path", filter, child_path);
            }
            return (MemorySegment)mh$.invokeExact(filter, child_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_convert_path_to_child_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_convert_path_to_child_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter *filter, GtkTreePath *filter_path)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_convert_path_to_child_path$descriptor() {
        return gtk_tree_model_filter_convert_path_to_child_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter *filter, GtkTreePath *filter_path)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_convert_path_to_child_path$handle() {
        return gtk_tree_model_filter_convert_path_to_child_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter *filter, GtkTreePath *filter_path)
     * }
     */
    public static MemorySegment gtk_tree_model_filter_convert_path_to_child_path(MemorySegment filter, MemorySegment filter_path) {
        var mh$ = gtk_tree_model_filter_convert_path_to_child_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_convert_path_to_child_path", filter, filter_path);
            }
            return (MemorySegment)mh$.invokeExact(filter, filter_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_model_filter_refilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_refilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_refilter(GtkTreeModelFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_refilter$descriptor() {
        return gtk_tree_model_filter_refilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_refilter(GtkTreeModelFilter *filter)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_refilter$handle() {
        return gtk_tree_model_filter_refilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_refilter(GtkTreeModelFilter *filter)
     * }
     */
    public static void gtk_tree_model_filter_refilter(MemorySegment filter) {
        var mh$ = gtk_tree_model_filter_refilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_refilter", filter);
            }
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

