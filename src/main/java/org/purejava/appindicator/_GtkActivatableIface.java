// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkActivatableIface {
 *     struct _GTypeInterface g_iface;
 *     void (*update)(struct _GtkActivatable*,struct _GtkAction*,char*);
 *     void (*sync_action_properties)(struct _GtkActivatable*,struct _GtkAction*);
 * };
 * }
 */
public class _GtkActivatableIface {

    public static MemoryLayout $LAYOUT() {
        return constants$3261.const$3;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*update)(struct _GtkActivatable*,struct _GtkAction*,char*);
     * }
     */
    public interface update {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(update fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3261.const$4, fi, constants$14.const$3, scope);
        }
        static update ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle update$VH() {
        return constants$3261.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*update)(struct _GtkActivatable*,struct _GtkAction*,char*);
     * }
     */
    public static MemorySegment update$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3261.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*update)(struct _GtkActivatable*,struct _GtkAction*,char*);
     * }
     */
    public static void update$set(MemorySegment seg, MemorySegment x) {
        constants$3261.const$5.set(seg, x);
    }
    public static MemorySegment update$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3261.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void update$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3261.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static update update(MemorySegment segment, Arena scope) {
        return update.ofAddress(update$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*sync_action_properties)(struct _GtkActivatable*,struct _GtkAction*);
     * }
     */
    public interface sync_action_properties {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(sync_action_properties fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3262.const$0, fi, constants$13.const$4, scope);
        }
        static sync_action_properties ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle sync_action_properties$VH() {
        return constants$3262.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*sync_action_properties)(struct _GtkActivatable*,struct _GtkAction*);
     * }
     */
    public static MemorySegment sync_action_properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3262.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*sync_action_properties)(struct _GtkActivatable*,struct _GtkAction*);
     * }
     */
    public static void sync_action_properties$set(MemorySegment seg, MemorySegment x) {
        constants$3262.const$1.set(seg, x);
    }
    public static MemorySegment sync_action_properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3262.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sync_action_properties$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3262.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static sync_action_properties sync_action_properties(MemorySegment segment, Arena scope) {
        return sync_action_properties.ofAddress(sync_action_properties$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


