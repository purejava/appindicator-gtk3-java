// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GtkActivatableIface {
 *     GTypeInterface g_iface;
 *     void (*update)(GtkActivatable*,GtkAction*,const gchar*);
 *     void (*sync_action_properties)(GtkActivatable*,GtkAction*);
 * };
 * }
 */
public class _GtkActivatableIface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("update"),
        Constants$root.C_POINTER$LAYOUT.withName("sync_action_properties")
    ).withName("_GtkActivatableIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkActivatableIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor update$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor update_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle update_UP$MH = RuntimeHelper.upcallHandle(update.class, "apply", _GtkActivatableIface.update_UP$FUNC);
    static final FunctionDescriptor update_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle update_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkActivatableIface.update_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*update)(GtkActivatable*,GtkAction*,const gchar*);
     * }
     */
    public interface update {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(update fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkActivatableIface.update_UP$MH, fi, _GtkActivatableIface.update$FUNC, scope);
        }
        static update ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GtkActivatableIface.update_DOWN$MH.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle update$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("update"));
    public static VarHandle update$VH() {
        return _GtkActivatableIface.update$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*update)(GtkActivatable*,GtkAction*,const gchar*);
     * }
     */
    public static MemorySegment update$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkActivatableIface.update$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*update)(GtkActivatable*,GtkAction*,const gchar*);
     * }
     */
    public static void update$set(MemorySegment seg, MemorySegment x) {
        _GtkActivatableIface.update$VH.set(seg, x);
    }
    public static MemorySegment update$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkActivatableIface.update$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void update$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkActivatableIface.update$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static update update(MemorySegment segment, SegmentScope scope) {
        return update.ofAddress(update$get(segment), scope);
    }
    static final FunctionDescriptor sync_action_properties$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor sync_action_properties_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sync_action_properties_UP$MH = RuntimeHelper.upcallHandle(sync_action_properties.class, "apply", _GtkActivatableIface.sync_action_properties_UP$FUNC);
    static final FunctionDescriptor sync_action_properties_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sync_action_properties_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkActivatableIface.sync_action_properties_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*sync_action_properties)(GtkActivatable*,GtkAction*);
     * }
     */
    public interface sync_action_properties {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(sync_action_properties fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkActivatableIface.sync_action_properties_UP$MH, fi, _GtkActivatableIface.sync_action_properties$FUNC, scope);
        }
        static sync_action_properties ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkActivatableIface.sync_action_properties_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle sync_action_properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sync_action_properties"));
    public static VarHandle sync_action_properties$VH() {
        return _GtkActivatableIface.sync_action_properties$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*sync_action_properties)(GtkActivatable*,GtkAction*);
     * }
     */
    public static MemorySegment sync_action_properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkActivatableIface.sync_action_properties$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*sync_action_properties)(GtkActivatable*,GtkAction*);
     * }
     */
    public static void sync_action_properties$set(MemorySegment seg, MemorySegment x) {
        _GtkActivatableIface.sync_action_properties$VH.set(seg, x);
    }
    public static MemorySegment sync_action_properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkActivatableIface.sync_action_properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sync_action_properties$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkActivatableIface.sync_action_properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sync_action_properties sync_action_properties(MemorySegment segment, SegmentScope scope) {
        return sync_action_properties.ofAddress(sync_action_properties$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


