// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkStatusbarClass {
 *     struct _GtkBoxClass parent_class;
 *     void* reserved;
 *     void (*text_pushed)(struct _GtkStatusbar*,unsigned int,char*);
 *     void (*text_popped)(struct _GtkStatusbar*,unsigned int,char*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkStatusbarClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3108.const$4;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 1008);
    }
    public static VarHandle reserved$VH() {
        return constants$3108.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved;
     * }
     */
    public static MemorySegment reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3108.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved;
     * }
     */
    public static void reserved$set(MemorySegment seg, MemorySegment x) {
        constants$3108.const$5.set(seg, x);
    }
    public static MemorySegment reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3108.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3108.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*text_pushed)(struct _GtkStatusbar*,unsigned int,char*);
     * }
     */
    public interface text_pushed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(text_pushed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3109.const$0, fi, constants$42.const$4, scope);
        }
        static text_pushed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle text_pushed$VH() {
        return constants$3109.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*text_pushed)(struct _GtkStatusbar*,unsigned int,char*);
     * }
     */
    public static MemorySegment text_pushed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3109.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*text_pushed)(struct _GtkStatusbar*,unsigned int,char*);
     * }
     */
    public static void text_pushed$set(MemorySegment seg, MemorySegment x) {
        constants$3109.const$1.set(seg, x);
    }
    public static MemorySegment text_pushed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3109.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void text_pushed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3109.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static text_pushed text_pushed(MemorySegment segment, Arena scope) {
        return text_pushed.ofAddress(text_pushed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*text_popped)(struct _GtkStatusbar*,unsigned int,char*);
     * }
     */
    public interface text_popped {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(text_popped fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3109.const$2, fi, constants$42.const$4, scope);
        }
        static text_popped ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle text_popped$VH() {
        return constants$3109.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*text_popped)(struct _GtkStatusbar*,unsigned int,char*);
     * }
     */
    public static MemorySegment text_popped$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3109.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*text_popped)(struct _GtkStatusbar*,unsigned int,char*);
     * }
     */
    public static void text_popped$set(MemorySegment seg, MemorySegment x) {
        constants$3109.const$3.set(seg, x);
    }
    public static MemorySegment text_popped$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3109.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void text_popped$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3109.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static text_popped text_popped(MemorySegment segment, Arena scope) {
        return text_popped.ofAddress(text_popped$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3109.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$3109.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3109.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3109.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3109.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3109.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3110.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$3110.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3110.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3110.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3110.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3110.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3110.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$3110.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3110.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3110.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3110.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3110.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3110.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$3110.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3110.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3110.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3110.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3110.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


