// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkPrintOperationClass {
 *     struct _GObjectClass parent_class;
 *     void (*done)(struct _GtkPrintOperation*,enum GtkPrintOperationResult);
 *     void (*begin_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
 *     int (*paginate)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
 *     void (*request_page_setup)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int,struct _GtkPageSetup*);
 *     void (*draw_page)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int);
 *     void (*end_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
 *     void (*status_changed)(struct _GtkPrintOperation*);
 *     struct _GtkWidget* (*create_custom_widget)(struct _GtkPrintOperation*);
 *     void (*custom_widget_apply)(struct _GtkPrintOperation*,struct _GtkWidget*);
 *     int (*preview)(struct _GtkPrintOperation*,struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkWindow*);
 *     void (*update_custom_widget)(struct _GtkPrintOperation*,struct _GtkWidget*,struct _GtkPageSetup*,struct _GtkPrintSettings*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkPrintOperationClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2969.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*done)(struct _GtkPrintOperation*,enum GtkPrintOperationResult);
     * }
     */
    public interface done {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(done fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2970.const$0, fi, constants$40.const$2, scope);
        }
        static done ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle done$VH() {
        return constants$2970.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*done)(struct _GtkPrintOperation*,enum GtkPrintOperationResult);
     * }
     */
    public static MemorySegment done$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2970.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*done)(struct _GtkPrintOperation*,enum GtkPrintOperationResult);
     * }
     */
    public static void done$set(MemorySegment seg, MemorySegment x) {
        constants$2970.const$1.set(seg, x);
    }
    public static MemorySegment done$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2970.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void done$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2970.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static done done(MemorySegment segment, Arena scope) {
        return done.ofAddress(done$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*begin_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public interface begin_print {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(begin_print fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2970.const$2, fi, constants$13.const$4, scope);
        }
        static begin_print ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle begin_print$VH() {
        return constants$2970.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*begin_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public static MemorySegment begin_print$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2970.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*begin_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public static void begin_print$set(MemorySegment seg, MemorySegment x) {
        constants$2970.const$3.set(seg, x);
    }
    public static MemorySegment begin_print$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2970.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void begin_print$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2970.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static begin_print begin_print(MemorySegment segment, Arena scope) {
        return begin_print.ofAddress(begin_print$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*paginate)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public interface paginate {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(paginate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2970.const$4, fi, constants$9.const$0, scope);
        }
        static paginate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle paginate$VH() {
        return constants$2970.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*paginate)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public static MemorySegment paginate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2970.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*paginate)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public static void paginate$set(MemorySegment seg, MemorySegment x) {
        constants$2970.const$5.set(seg, x);
    }
    public static MemorySegment paginate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2970.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void paginate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2970.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static paginate paginate(MemorySegment segment, Arena scope) {
        return paginate.ofAddress(paginate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*request_page_setup)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int,struct _GtkPageSetup*);
     * }
     */
    public interface request_page_setup {

        void apply(java.lang.foreign.MemorySegment clipboard, java.lang.foreign.MemorySegment atoms, int n_atoms, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(request_page_setup fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2971.const$0, fi, constants$464.const$4, scope);
        }
        static request_page_setup ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _clipboard, java.lang.foreign.MemorySegment _atoms, int _n_atoms, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$737.const$4.invokeExact(symbol, _clipboard, _atoms, _n_atoms, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle request_page_setup$VH() {
        return constants$2971.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*request_page_setup)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int,struct _GtkPageSetup*);
     * }
     */
    public static MemorySegment request_page_setup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2971.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*request_page_setup)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int,struct _GtkPageSetup*);
     * }
     */
    public static void request_page_setup$set(MemorySegment seg, MemorySegment x) {
        constants$2971.const$1.set(seg, x);
    }
    public static MemorySegment request_page_setup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2971.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void request_page_setup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2971.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static request_page_setup request_page_setup(MemorySegment segment, Arena scope) {
        return request_page_setup.ofAddress(request_page_setup$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_page)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int);
     * }
     */
    public interface draw_page {

        void apply(java.lang.foreign.MemorySegment screen, java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(draw_page fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2971.const$2, fi, constants$164.const$5, scope);
        }
        static draw_page ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _screen, java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, _screen, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_page$VH() {
        return constants$2971.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_page)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int);
     * }
     */
    public static MemorySegment draw_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2971.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_page)(struct _GtkPrintOperation*,struct _GtkPrintContext*,int);
     * }
     */
    public static void draw_page$set(MemorySegment seg, MemorySegment x) {
        constants$2971.const$3.set(seg, x);
    }
    public static MemorySegment draw_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2971.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_page$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2971.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_page draw_page(MemorySegment segment, Arena scope) {
        return draw_page.ofAddress(draw_page$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*end_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public interface end_print {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(end_print fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2971.const$4, fi, constants$13.const$4, scope);
        }
        static end_print ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle end_print$VH() {
        return constants$2971.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*end_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public static MemorySegment end_print$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2971.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*end_print)(struct _GtkPrintOperation*,struct _GtkPrintContext*);
     * }
     */
    public static void end_print$set(MemorySegment seg, MemorySegment x) {
        constants$2971.const$5.set(seg, x);
    }
    public static MemorySegment end_print$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2971.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void end_print$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2971.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_print end_print(MemorySegment segment, Arena scope) {
        return end_print.ofAddress(end_print$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*status_changed)(struct _GtkPrintOperation*);
     * }
     */
    public interface status_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(status_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2972.const$0, fi, constants$13.const$1, scope);
        }
        static status_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle status_changed$VH() {
        return constants$2972.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*status_changed)(struct _GtkPrintOperation*);
     * }
     */
    public static MemorySegment status_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2972.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*status_changed)(struct _GtkPrintOperation*);
     * }
     */
    public static void status_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2972.const$1.set(seg, x);
    }
    public static MemorySegment status_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2972.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void status_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2972.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static status_changed status_changed(MemorySegment segment, Arena scope) {
        return status_changed.ofAddress(status_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkWidget* (*create_custom_widget)(struct _GtkPrintOperation*);
     * }
     */
    public interface create_custom_widget {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_custom_widget fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2972.const$2, fi, constants$5.const$2, scope);
        }
        static create_custom_widget ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_custom_widget$VH() {
        return constants$2972.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_custom_widget)(struct _GtkPrintOperation*);
     * }
     */
    public static MemorySegment create_custom_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2972.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_custom_widget)(struct _GtkPrintOperation*);
     * }
     */
    public static void create_custom_widget$set(MemorySegment seg, MemorySegment x) {
        constants$2972.const$3.set(seg, x);
    }
    public static MemorySegment create_custom_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2972.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void create_custom_widget$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2972.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_custom_widget create_custom_widget(MemorySegment segment, Arena scope) {
        return create_custom_widget.ofAddress(create_custom_widget$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*custom_widget_apply)(struct _GtkPrintOperation*,struct _GtkWidget*);
     * }
     */
    public interface custom_widget_apply {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(custom_widget_apply fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2972.const$4, fi, constants$13.const$4, scope);
        }
        static custom_widget_apply ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle custom_widget_apply$VH() {
        return constants$2972.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*custom_widget_apply)(struct _GtkPrintOperation*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment custom_widget_apply$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2972.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*custom_widget_apply)(struct _GtkPrintOperation*,struct _GtkWidget*);
     * }
     */
    public static void custom_widget_apply$set(MemorySegment seg, MemorySegment x) {
        constants$2972.const$5.set(seg, x);
    }
    public static MemorySegment custom_widget_apply$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2972.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void custom_widget_apply$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2972.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static custom_widget_apply custom_widget_apply(MemorySegment segment, Arena scope) {
        return custom_widget_apply.ofAddress(custom_widget_apply$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*preview)(struct _GtkPrintOperation*,struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkWindow*);
     * }
     */
    public interface preview {

        int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(preview fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2973.const$0, fi, constants$34.const$5, scope);
        }
        static preview ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$382.const$0.invokeExact(symbol, _completion, _key, _iter, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle preview$VH() {
        return constants$2973.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*preview)(struct _GtkPrintOperation*,struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkWindow*);
     * }
     */
    public static MemorySegment preview$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2973.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*preview)(struct _GtkPrintOperation*,struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkWindow*);
     * }
     */
    public static void preview$set(MemorySegment seg, MemorySegment x) {
        constants$2973.const$1.set(seg, x);
    }
    public static MemorySegment preview$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2973.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void preview$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2973.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static preview preview(MemorySegment segment, Arena scope) {
        return preview.ofAddress(preview$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*update_custom_widget)(struct _GtkPrintOperation*,struct _GtkWidget*,struct _GtkPageSetup*,struct _GtkPrintSettings*);
     * }
     */
    public interface update_custom_widget {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(update_custom_widget fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2973.const$2, fi, constants$42.const$1, scope);
        }
        static update_custom_widget ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle update_custom_widget$VH() {
        return constants$2973.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*update_custom_widget)(struct _GtkPrintOperation*,struct _GtkWidget*,struct _GtkPageSetup*,struct _GtkPrintSettings*);
     * }
     */
    public static MemorySegment update_custom_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2973.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*update_custom_widget)(struct _GtkPrintOperation*,struct _GtkWidget*,struct _GtkPageSetup*,struct _GtkPrintSettings*);
     * }
     */
    public static void update_custom_widget$set(MemorySegment seg, MemorySegment x) {
        constants$2973.const$3.set(seg, x);
    }
    public static MemorySegment update_custom_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2973.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void update_custom_widget$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2973.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static update_custom_widget update_custom_widget(MemorySegment segment, Arena scope) {
        return update_custom_widget.ofAddress(update_custom_widget$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2973.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2973.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2973.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2973.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2973.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2973.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2974.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2974.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2974.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2974.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2974.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2974.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2974.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2974.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2974.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2974.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2974.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2974.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2974.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2974.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2974.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2974.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2974.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2974.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2975.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2975.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2975.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2975.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2975.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2975.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2975.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2975.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2975.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2975.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2975.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2975.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2975.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2975.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2975.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2975.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2975.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2975.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2976.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$2976.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2976.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$2976.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2976.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2976.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


