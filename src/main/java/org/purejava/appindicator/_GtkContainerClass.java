// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkContainerClass {
 *     GtkWidgetClass parent_class;
 *     void (*add)(GtkContainer *, GtkWidget *);
 *     void (*remove)(GtkContainer *, GtkWidget *);
 *     void (*check_resize)(GtkContainer *);
 *     void (*forall)(GtkContainer *, gboolean, GtkCallback, gpointer);
 *     void (*set_focus_child)(GtkContainer *, GtkWidget *);
 *     GType (*child_type)(GtkContainer *);
 *     gchar *(*composite_name)(GtkContainer *, GtkWidget *);
 *     void (*set_child_property)(GtkContainer *, GtkWidget *, guint, const GValue *, GParamSpec *);
 *     void (*get_child_property)(GtkContainer *, GtkWidget *, guint, GValue *, GParamSpec *);
 *     GtkWidgetPath *(*get_path_for_child)(GtkContainer *, GtkWidget *);
 *     unsigned int _handle_border_width : 1;
 *     void (*_gtk_reserved1)(void);
 *     void (*_gtk_reserved2)(void);
 *     void (*_gtk_reserved3)(void);
 *     void (*_gtk_reserved4)(void);
 *     void (*_gtk_reserved5)(void);
 *     void (*_gtk_reserved6)(void);
 *     void (*_gtk_reserved7)(void);
 *     void (*_gtk_reserved8)(void);
 * }
 * }
 */
public class _GtkContainerClass {

    _GtkContainerClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GtkWidgetClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("add"),
        app_indicator_h.C_POINTER.withName("remove"),
        app_indicator_h.C_POINTER.withName("check_resize"),
        app_indicator_h.C_POINTER.withName("forall"),
        app_indicator_h.C_POINTER.withName("set_focus_child"),
        app_indicator_h.C_POINTER.withName("child_type"),
        app_indicator_h.C_POINTER.withName("composite_name"),
        app_indicator_h.C_POINTER.withName("set_child_property"),
        app_indicator_h.C_POINTER.withName("get_child_property"),
        app_indicator_h.C_POINTER.withName("get_path_for_child"),
        MemoryLayout.paddingLayout(8),
        app_indicator_h.C_POINTER.withName("_gtk_reserved1"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved2"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved3"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved4"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved5"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved6"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved7"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved8")
    ).withName("_GtkContainerClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*add)(GtkContainer *, GtkWidget *)
     * }
     */
    public class add {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(add.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(add.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout add$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("add"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*add)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final AddressLayout add$layout() {
        return add$LAYOUT;
    }

    private static final long add$OFFSET = 824;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*add)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final long add$offset() {
        return add$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*add)(GtkContainer *, GtkWidget *)
     * }
     */
    public static MemorySegment add(MemorySegment struct) {
        return struct.get(add$LAYOUT, add$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*add)(GtkContainer *, GtkWidget *)
     * }
     */
    public static void add(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(add$LAYOUT, add$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*remove)(GtkContainer *, GtkWidget *)
     * }
     */
    public class remove {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(remove.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(remove.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout remove$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remove"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*remove)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final AddressLayout remove$layout() {
        return remove$LAYOUT;
    }

    private static final long remove$OFFSET = 832;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*remove)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final long remove$offset() {
        return remove$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*remove)(GtkContainer *, GtkWidget *)
     * }
     */
    public static MemorySegment remove(MemorySegment struct) {
        return struct.get(remove$LAYOUT, remove$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*remove)(GtkContainer *, GtkWidget *)
     * }
     */
    public static void remove(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remove$LAYOUT, remove$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*check_resize)(GtkContainer *)
     * }
     */
    public class check_resize {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(check_resize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(check_resize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout check_resize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("check_resize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*check_resize)(GtkContainer *)
     * }
     */
    public static final AddressLayout check_resize$layout() {
        return check_resize$LAYOUT;
    }

    private static final long check_resize$OFFSET = 840;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*check_resize)(GtkContainer *)
     * }
     */
    public static final long check_resize$offset() {
        return check_resize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*check_resize)(GtkContainer *)
     * }
     */
    public static MemorySegment check_resize(MemorySegment struct) {
        return struct.get(check_resize$LAYOUT, check_resize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*check_resize)(GtkContainer *)
     * }
     */
    public static void check_resize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(check_resize$LAYOUT, check_resize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*forall)(GtkContainer *, gboolean, GtkCallback, gpointer)
     * }
     */
    public class forall {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(forall.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(forall.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout forall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("forall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*forall)(GtkContainer *, gboolean, GtkCallback, gpointer)
     * }
     */
    public static final AddressLayout forall$layout() {
        return forall$LAYOUT;
    }

    private static final long forall$OFFSET = 848;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*forall)(GtkContainer *, gboolean, GtkCallback, gpointer)
     * }
     */
    public static final long forall$offset() {
        return forall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*forall)(GtkContainer *, gboolean, GtkCallback, gpointer)
     * }
     */
    public static MemorySegment forall(MemorySegment struct) {
        return struct.get(forall$LAYOUT, forall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*forall)(GtkContainer *, gboolean, GtkCallback, gpointer)
     * }
     */
    public static void forall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(forall$LAYOUT, forall$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_focus_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public class set_focus_child {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_focus_child.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_focus_child.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_focus_child$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_focus_child"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_focus_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final AddressLayout set_focus_child$layout() {
        return set_focus_child$LAYOUT;
    }

    private static final long set_focus_child$OFFSET = 856;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_focus_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final long set_focus_child$offset() {
        return set_focus_child$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_focus_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static MemorySegment set_focus_child(MemorySegment struct) {
        return struct.get(set_focus_child$LAYOUT, set_focus_child$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_focus_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static void set_focus_child(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_focus_child$LAYOUT, set_focus_child$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GType (*child_type)(GtkContainer *)
     * }
     */
    public class child_type {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(child_type.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(child_type.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout child_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("child_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GType (*child_type)(GtkContainer *)
     * }
     */
    public static final AddressLayout child_type$layout() {
        return child_type$LAYOUT;
    }

    private static final long child_type$OFFSET = 864;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GType (*child_type)(GtkContainer *)
     * }
     */
    public static final long child_type$offset() {
        return child_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GType (*child_type)(GtkContainer *)
     * }
     */
    public static MemorySegment child_type(MemorySegment struct) {
        return struct.get(child_type$LAYOUT, child_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GType (*child_type)(GtkContainer *)
     * }
     */
    public static void child_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(child_type$LAYOUT, child_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gchar *(*composite_name)(GtkContainer *, GtkWidget *)
     * }
     */
    public class composite_name {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(composite_name.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(composite_name.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout composite_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("composite_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *(*composite_name)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final AddressLayout composite_name$layout() {
        return composite_name$LAYOUT;
    }

    private static final long composite_name$OFFSET = 872;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *(*composite_name)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final long composite_name$offset() {
        return composite_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *(*composite_name)(GtkContainer *, GtkWidget *)
     * }
     */
    public static MemorySegment composite_name(MemorySegment struct) {
        return struct.get(composite_name$LAYOUT, composite_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *(*composite_name)(GtkContainer *, GtkWidget *)
     * }
     */
    public static void composite_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(composite_name$LAYOUT, composite_name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_child_property)(GtkContainer *, GtkWidget *, guint, const GValue *, GParamSpec *)
     * }
     */
    public class set_child_property {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_child_property.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_child_property.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_child_property$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_child_property"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_child_property)(GtkContainer *, GtkWidget *, guint, const GValue *, GParamSpec *)
     * }
     */
    public static final AddressLayout set_child_property$layout() {
        return set_child_property$LAYOUT;
    }

    private static final long set_child_property$OFFSET = 880;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_child_property)(GtkContainer *, GtkWidget *, guint, const GValue *, GParamSpec *)
     * }
     */
    public static final long set_child_property$offset() {
        return set_child_property$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_child_property)(GtkContainer *, GtkWidget *, guint, const GValue *, GParamSpec *)
     * }
     */
    public static MemorySegment set_child_property(MemorySegment struct) {
        return struct.get(set_child_property$LAYOUT, set_child_property$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_child_property)(GtkContainer *, GtkWidget *, guint, const GValue *, GParamSpec *)
     * }
     */
    public static void set_child_property(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_child_property$LAYOUT, set_child_property$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_child_property)(GtkContainer *, GtkWidget *, guint, GValue *, GParamSpec *)
     * }
     */
    public class get_child_property {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_child_property.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_child_property.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_child_property$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_child_property"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_child_property)(GtkContainer *, GtkWidget *, guint, GValue *, GParamSpec *)
     * }
     */
    public static final AddressLayout get_child_property$layout() {
        return get_child_property$LAYOUT;
    }

    private static final long get_child_property$OFFSET = 888;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_child_property)(GtkContainer *, GtkWidget *, guint, GValue *, GParamSpec *)
     * }
     */
    public static final long get_child_property$offset() {
        return get_child_property$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_child_property)(GtkContainer *, GtkWidget *, guint, GValue *, GParamSpec *)
     * }
     */
    public static MemorySegment get_child_property(MemorySegment struct) {
        return struct.get(get_child_property$LAYOUT, get_child_property$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_child_property)(GtkContainer *, GtkWidget *, guint, GValue *, GParamSpec *)
     * }
     */
    public static void get_child_property(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_child_property$LAYOUT, get_child_property$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GtkWidgetPath *(*get_path_for_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public class get_path_for_child {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_path_for_child.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_path_for_child.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_path_for_child$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_path_for_child"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkWidgetPath *(*get_path_for_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final AddressLayout get_path_for_child$layout() {
        return get_path_for_child$LAYOUT;
    }

    private static final long get_path_for_child$OFFSET = 896;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkWidgetPath *(*get_path_for_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static final long get_path_for_child$offset() {
        return get_path_for_child$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkWidgetPath *(*get_path_for_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static MemorySegment get_path_for_child(MemorySegment struct) {
        return struct.get(get_path_for_child$LAYOUT, get_path_for_child$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkWidgetPath *(*get_path_for_child)(GtkContainer *, GtkWidget *)
     * }
     */
    public static void get_path_for_child(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_path_for_child$LAYOUT, get_path_for_child$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public class _gtk_reserved1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved1$layout() {
        return _gtk_reserved1$LAYOUT;
    }

    private static final long _gtk_reserved1$OFFSET = 912;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final long _gtk_reserved1$offset() {
        return _gtk_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static MemorySegment _gtk_reserved1(MemorySegment struct) {
        return struct.get(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static void _gtk_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public class _gtk_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved2$layout() {
        return _gtk_reserved2$LAYOUT;
    }

    private static final long _gtk_reserved2$OFFSET = 920;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final long _gtk_reserved2$offset() {
        return _gtk_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static MemorySegment _gtk_reserved2(MemorySegment struct) {
        return struct.get(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static void _gtk_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public class _gtk_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved3$layout() {
        return _gtk_reserved3$LAYOUT;
    }

    private static final long _gtk_reserved3$OFFSET = 928;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final long _gtk_reserved3$offset() {
        return _gtk_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static MemorySegment _gtk_reserved3(MemorySegment struct) {
        return struct.get(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static void _gtk_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public class _gtk_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved4$layout() {
        return _gtk_reserved4$LAYOUT;
    }

    private static final long _gtk_reserved4$OFFSET = 936;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final long _gtk_reserved4$offset() {
        return _gtk_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static MemorySegment _gtk_reserved4(MemorySegment struct) {
        return struct.get(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static void _gtk_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public class _gtk_reserved5 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved5.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved5.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved5$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved5$layout() {
        return _gtk_reserved5$LAYOUT;
    }

    private static final long _gtk_reserved5$OFFSET = 944;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static final long _gtk_reserved5$offset() {
        return _gtk_reserved5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static MemorySegment _gtk_reserved5(MemorySegment struct) {
        return struct.get(_gtk_reserved5$LAYOUT, _gtk_reserved5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static void _gtk_reserved5(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved5$LAYOUT, _gtk_reserved5$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public class _gtk_reserved6 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved6.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved6.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved6$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved6$layout() {
        return _gtk_reserved6$LAYOUT;
    }

    private static final long _gtk_reserved6$OFFSET = 952;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static final long _gtk_reserved6$offset() {
        return _gtk_reserved6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static MemorySegment _gtk_reserved6(MemorySegment struct) {
        return struct.get(_gtk_reserved6$LAYOUT, _gtk_reserved6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static void _gtk_reserved6(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved6$LAYOUT, _gtk_reserved6$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public class _gtk_reserved7 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved7.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved7.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved7$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved7"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved7$layout() {
        return _gtk_reserved7$LAYOUT;
    }

    private static final long _gtk_reserved7$OFFSET = 960;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static final long _gtk_reserved7$offset() {
        return _gtk_reserved7$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static MemorySegment _gtk_reserved7(MemorySegment struct) {
        return struct.get(_gtk_reserved7$LAYOUT, _gtk_reserved7$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static void _gtk_reserved7(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved7$LAYOUT, _gtk_reserved7$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public class _gtk_reserved8 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved8.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved8.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved8$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved8$layout() {
        return _gtk_reserved8$LAYOUT;
    }

    private static final long _gtk_reserved8$OFFSET = 968;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static final long _gtk_reserved8$offset() {
        return _gtk_reserved8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static MemorySegment _gtk_reserved8(MemorySegment struct) {
        return struct.get(_gtk_reserved8$LAYOUT, _gtk_reserved8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static void _gtk_reserved8(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved8$LAYOUT, _gtk_reserved8$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

