// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkContainerClass {
 *     struct _GtkWidgetClass parent_class;
 *     void (*add)(struct _GtkContainer*,struct _GtkWidget*);
 *     void (*remove)(struct _GtkContainer*,struct _GtkWidget*);
 *     void (*check_resize)(struct _GtkContainer*);
 *     void (*forall)(struct _GtkContainer*,int,void (*)(struct _GtkWidget*,void*),void*);
 *     void (*set_focus_child)(struct _GtkContainer*,struct _GtkWidget*);
 *     unsigned long (*child_type)(struct _GtkContainer*);
 *     char* (*composite_name)(struct _GtkContainer*,struct _GtkWidget*);
 *     void (*set_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
 *     void (*get_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
 *     struct _GtkWidgetPath* (*get_path_for_child)(struct _GtkContainer*,struct _GtkWidget*);
 *      *     unsigned int _handle_border_width;
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkContainerClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2176.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 824);
    }
    /**
     * {@snippet :
 * void (*add)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public interface add {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(add fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2177.const$0, fi, constants$13.const$4, scope);
        }
        static add ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add$VH() {
        return constants$2177.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment add$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2177.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static void add$set(MemorySegment seg, MemorySegment x) {
        constants$2177.const$1.set(seg, x);
    }
    public static MemorySegment add$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2177.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void add$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2177.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static add add(MemorySegment segment, Arena scope) {
        return add.ofAddress(add$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*remove)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public interface remove {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(remove fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2177.const$2, fi, constants$13.const$4, scope);
        }
        static remove ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove$VH() {
        return constants$2177.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2177.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static void remove$set(MemorySegment seg, MemorySegment x) {
        constants$2177.const$3.set(seg, x);
    }
    public static MemorySegment remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2177.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void remove$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2177.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove remove(MemorySegment segment, Arena scope) {
        return remove.ofAddress(remove$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*check_resize)(struct _GtkContainer*);
     * }
     */
    public interface check_resize {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(check_resize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2177.const$4, fi, constants$13.const$1, scope);
        }
        static check_resize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle check_resize$VH() {
        return constants$2177.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*check_resize)(struct _GtkContainer*);
     * }
     */
    public static MemorySegment check_resize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2177.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*check_resize)(struct _GtkContainer*);
     * }
     */
    public static void check_resize$set(MemorySegment seg, MemorySegment x) {
        constants$2177.const$5.set(seg, x);
    }
    public static MemorySegment check_resize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2177.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void check_resize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2177.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static check_resize check_resize(MemorySegment segment, Arena scope) {
        return check_resize.ofAddress(check_resize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*forall)(struct _GtkContainer*,int,void (*)(struct _GtkWidget*,void*),void*);
     * }
     */
    public interface forall {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(forall fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2178.const$0, fi, constants$179.const$1, scope);
        }
        static forall ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$373.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle forall$VH() {
        return constants$2178.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*forall)(struct _GtkContainer*,int,void (*)(struct _GtkWidget*,void*),void*);
     * }
     */
    public static MemorySegment forall$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2178.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*forall)(struct _GtkContainer*,int,void (*)(struct _GtkWidget*,void*),void*);
     * }
     */
    public static void forall$set(MemorySegment seg, MemorySegment x) {
        constants$2178.const$1.set(seg, x);
    }
    public static MemorySegment forall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2178.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void forall$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2178.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static forall forall(MemorySegment segment, Arena scope) {
        return forall.ofAddress(forall$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_focus_child)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public interface set_focus_child {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_focus_child fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2178.const$2, fi, constants$13.const$4, scope);
        }
        static set_focus_child ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_focus_child$VH() {
        return constants$2178.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_focus_child)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment set_focus_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2178.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_focus_child)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static void set_focus_child$set(MemorySegment seg, MemorySegment x) {
        constants$2178.const$3.set(seg, x);
    }
    public static MemorySegment set_focus_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2178.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_focus_child$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2178.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_focus_child set_focus_child(MemorySegment segment, Arena scope) {
        return set_focus_child.ofAddress(set_focus_child$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned long (*child_type)(struct _GtkContainer*);
     * }
     */
    public interface child_type {

        long apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(child_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2178.const$4, fi, constants$4.const$0, scope);
        }
        static child_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (long)constants$1068.const$5.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle child_type$VH() {
        return constants$2178.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long (*child_type)(struct _GtkContainer*);
     * }
     */
    public static MemorySegment child_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2178.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long (*child_type)(struct _GtkContainer*);
     * }
     */
    public static void child_type$set(MemorySegment seg, MemorySegment x) {
        constants$2178.const$5.set(seg, x);
    }
    public static MemorySegment child_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2178.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void child_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2178.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static child_type child_type(MemorySegment segment, Arena scope) {
        return child_type.ofAddress(child_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*composite_name)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public interface composite_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(composite_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2179.const$0, fi, constants$5.const$5, scope);
        }
        static composite_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle composite_name$VH() {
        return constants$2179.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*composite_name)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment composite_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2179.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*composite_name)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static void composite_name$set(MemorySegment seg, MemorySegment x) {
        constants$2179.const$1.set(seg, x);
    }
    public static MemorySegment composite_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2179.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void composite_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2179.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static composite_name composite_name(MemorySegment segment, Arena scope) {
        return composite_name.ofAddress(composite_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public interface set_child_property {

        void apply(java.lang.foreign.MemorySegment funcs, java.lang.foreign.MemorySegment paint_data, int glyph, java.lang.foreign.MemorySegment font, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_child_property fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2179.const$2, fi, constants$380.const$3, scope);
        }
        static set_child_property ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _funcs, java.lang.foreign.MemorySegment _paint_data, int _glyph, java.lang.foreign.MemorySegment _font, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$1460.const$4.invokeExact(symbol, _funcs, _paint_data, _glyph, _font, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_child_property$VH() {
        return constants$2179.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static MemorySegment set_child_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2179.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static void set_child_property$set(MemorySegment seg, MemorySegment x) {
        constants$2179.const$3.set(seg, x);
    }
    public static MemorySegment set_child_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2179.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_child_property$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2179.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_child_property set_child_property(MemorySegment segment, Arena scope) {
        return set_child_property.ofAddress(set_child_property$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public interface get_child_property {

        void apply(java.lang.foreign.MemorySegment funcs, java.lang.foreign.MemorySegment paint_data, int glyph, java.lang.foreign.MemorySegment font, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_child_property fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2179.const$4, fi, constants$380.const$3, scope);
        }
        static get_child_property ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _funcs, java.lang.foreign.MemorySegment _paint_data, int _glyph, java.lang.foreign.MemorySegment _font, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$1460.const$4.invokeExact(symbol, _funcs, _paint_data, _glyph, _font, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_child_property$VH() {
        return constants$2179.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static MemorySegment get_child_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2179.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_child_property)(struct _GtkContainer*,struct _GtkWidget*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static void get_child_property$set(MemorySegment seg, MemorySegment x) {
        constants$2179.const$5.set(seg, x);
    }
    public static MemorySegment get_child_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2179.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_child_property$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2179.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_child_property get_child_property(MemorySegment segment, Arena scope) {
        return get_child_property.ofAddress(get_child_property$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkWidgetPath* (*get_path_for_child)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public interface get_path_for_child {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_path_for_child fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2180.const$0, fi, constants$5.const$5, scope);
        }
        static get_path_for_child ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_path_for_child$VH() {
        return constants$2180.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidgetPath* (*get_path_for_child)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment get_path_for_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2180.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidgetPath* (*get_path_for_child)(struct _GtkContainer*,struct _GtkWidget*);
     * }
     */
    public static void get_path_for_child$set(MemorySegment seg, MemorySegment x) {
        constants$2180.const$1.set(seg, x);
    }
    public static MemorySegment get_path_for_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2180.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_path_for_child$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2180.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_path_for_child get_path_for_child(MemorySegment segment, Arena scope) {
        return get_path_for_child.ofAddress(get_path_for_child$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2180.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2180.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2180.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2180.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2180.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2180.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2180.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2180.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2180.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2180.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2180.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2180.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2181.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2181.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2181.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2181.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2181.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2181.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2181.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2181.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2181.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2181.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2181.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2181.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2181.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2181.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2181.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2181.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2181.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2181.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2182.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2182.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2182.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2182.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2182.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2182.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2182.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2182.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2182.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2182.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2182.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2182.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2182.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$2182.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2182.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$2182.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2182.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2182.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


