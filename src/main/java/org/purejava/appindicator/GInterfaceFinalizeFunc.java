// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;

/**
 * {@snippet :
 * void (*GInterfaceFinalizeFunc)(void* g_iface,void* iface_data);
 * }
 */
public interface GInterfaceFinalizeFunc {

    void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(GInterfaceFinalizeFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$386.GInterfaceFinalizeFunc_UP$MH, fi, constants$386.GInterfaceFinalizeFunc$FUNC, scope);
    }
    static GInterfaceFinalizeFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
            try {
                constants$386.GInterfaceFinalizeFunc_DOWN$MH.invokeExact(symbol, _tag, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


