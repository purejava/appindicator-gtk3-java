// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.foreign.*;

final class constants$31 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$31() {}
    static final FunctionDescriptor g_atomic_int_compare_and_exchange$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_atomic_int_compare_and_exchange$MH = RuntimeHelper.downcallHandle(
        "g_atomic_int_compare_and_exchange",
        constants$31.g_atomic_int_compare_and_exchange$FUNC
    );
    static final FunctionDescriptor g_atomic_int_compare_and_exchange_full$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_atomic_int_compare_and_exchange_full$MH = RuntimeHelper.downcallHandle(
        "g_atomic_int_compare_and_exchange_full",
        constants$31.g_atomic_int_compare_and_exchange_full$FUNC
    );
    static final FunctionDescriptor g_atomic_int_exchange$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_atomic_int_exchange$MH = RuntimeHelper.downcallHandle(
        "g_atomic_int_exchange",
        constants$31.g_atomic_int_exchange$FUNC
    );
    static final FunctionDescriptor g_atomic_int_add$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_atomic_int_add$MH = RuntimeHelper.downcallHandle(
        "g_atomic_int_add",
        constants$31.g_atomic_int_add$FUNC
    );
    static final FunctionDescriptor g_atomic_int_and$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_atomic_int_and$MH = RuntimeHelper.downcallHandle(
        "g_atomic_int_and",
        constants$31.g_atomic_int_and$FUNC
    );
    static final FunctionDescriptor g_atomic_int_or$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_atomic_int_or$MH = RuntimeHelper.downcallHandle(
        "g_atomic_int_or",
        constants$31.g_atomic_int_or$FUNC
    );
}


