// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GDatagramBasedInterface {
 *     struct _GTypeInterface g_iface;
 *     int (*receive_messages)(struct _GDatagramBased*,struct _GInputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
 *     int (*send_messages)(struct _GDatagramBased*,struct _GOutputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
 *     struct _GSource* (*create_source)(struct _GDatagramBased*,enum GIOCondition,struct _GCancellable*);
 *     enum GIOCondition (*condition_check)(struct _GDatagramBased*,enum GIOCondition);
 *     int (*condition_wait)(struct _GDatagramBased*,enum GIOCondition,long,struct _GCancellable*,struct _GError**);
 * };
 * }
 */
public class _GDatagramBasedInterface {

    public static MemoryLayout $LAYOUT() {
        return constants$835.const$5;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * int (*receive_messages)(struct _GDatagramBased*,struct _GInputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface receive_messages {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, long _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(receive_messages fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$836.const$1, fi, constants$836.const$0, scope);
        }
        static receive_messages ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, long __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$836.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle receive_messages$VH() {
        return constants$836.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*receive_messages)(struct _GDatagramBased*,struct _GInputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment receive_messages$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$836.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*receive_messages)(struct _GDatagramBased*,struct _GInputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void receive_messages$set(MemorySegment seg, MemorySegment x) {
        constants$836.const$3.set(seg, x);
    }
    public static MemorySegment receive_messages$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$836.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void receive_messages$set(MemorySegment seg, long index, MemorySegment x) {
        constants$836.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static receive_messages receive_messages(MemorySegment segment, Arena scope) {
        return receive_messages.ofAddress(receive_messages$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*send_messages)(struct _GDatagramBased*,struct _GOutputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface send_messages {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, long _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(send_messages fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$836.const$4, fi, constants$836.const$0, scope);
        }
        static send_messages ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, long __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$836.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle send_messages$VH() {
        return constants$836.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*send_messages)(struct _GDatagramBased*,struct _GOutputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment send_messages$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$836.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*send_messages)(struct _GDatagramBased*,struct _GOutputMessage*,unsigned int,int,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void send_messages$set(MemorySegment seg, MemorySegment x) {
        constants$836.const$5.set(seg, x);
    }
    public static MemorySegment send_messages$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$836.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void send_messages$set(MemorySegment seg, long index, MemorySegment x) {
        constants$836.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static send_messages send_messages(MemorySegment segment, Arena scope) {
        return send_messages.ofAddress(send_messages$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GSource* (*create_source)(struct _GDatagramBased*,enum GIOCondition,struct _GCancellable*);
     * }
     */
    public interface create_source {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(create_source fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$837.const$0, fi, constants$196.const$3, scope);
        }
        static create_source ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$837.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_source$VH() {
        return constants$837.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GSource* (*create_source)(struct _GDatagramBased*,enum GIOCondition,struct _GCancellable*);
     * }
     */
    public static MemorySegment create_source$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$837.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GSource* (*create_source)(struct _GDatagramBased*,enum GIOCondition,struct _GCancellable*);
     * }
     */
    public static void create_source$set(MemorySegment seg, MemorySegment x) {
        constants$837.const$2.set(seg, x);
    }
    public static MemorySegment create_source$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$837.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void create_source$set(MemorySegment seg, long index, MemorySegment x) {
        constants$837.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_source create_source(MemorySegment segment, Arena scope) {
        return create_source.ofAddress(create_source$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GIOCondition (*condition_check)(struct _GDatagramBased*,enum GIOCondition);
     * }
     */
    public interface condition_check {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(condition_check fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$837.const$3, fi, constants$11.const$4, scope);
        }
        static condition_check ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle condition_check$VH() {
        return constants$837.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GIOCondition (*condition_check)(struct _GDatagramBased*,enum GIOCondition);
     * }
     */
    public static MemorySegment condition_check$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$837.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GIOCondition (*condition_check)(struct _GDatagramBased*,enum GIOCondition);
     * }
     */
    public static void condition_check$set(MemorySegment seg, MemorySegment x) {
        constants$837.const$5.set(seg, x);
    }
    public static MemorySegment condition_check$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$837.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void condition_check$set(MemorySegment seg, long index, MemorySegment x) {
        constants$837.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static condition_check condition_check(MemorySegment segment, Arena scope) {
        return condition_check.ofAddress(condition_check$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*condition_wait)(struct _GDatagramBased*,enum GIOCondition,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface condition_wait {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(condition_wait fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$838.const$1, fi, constants$838.const$0, scope);
        }
        static condition_wait ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$838.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle condition_wait$VH() {
        return constants$838.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*condition_wait)(struct _GDatagramBased*,enum GIOCondition,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment condition_wait$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$838.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*condition_wait)(struct _GDatagramBased*,enum GIOCondition,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void condition_wait$set(MemorySegment seg, MemorySegment x) {
        constants$838.const$3.set(seg, x);
    }
    public static MemorySegment condition_wait$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$838.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void condition_wait$set(MemorySegment seg, long index, MemorySegment x) {
        constants$838.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static condition_wait condition_wait(MemorySegment segment, Arena scope) {
        return condition_wait.ofAddress(condition_wait$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


