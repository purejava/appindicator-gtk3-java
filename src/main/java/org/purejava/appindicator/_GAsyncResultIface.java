// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GAsyncResultIface {
 *     struct _GTypeInterface g_iface;
 *     void* (*get_user_data)(struct _GAsyncResult*);
 *     struct _GObject* (*get_source_object)(struct _GAsyncResult*);
 *     int (*is_tagged)(struct _GAsyncResult*,void*);
 * };
 * }
 */
public class _GAsyncResultIface {

    public static MemoryLayout $LAYOUT() {
        return constants$757.const$1;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void* (*get_user_data)(struct _GAsyncResult*);
     * }
     */
    public interface get_user_data {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_user_data fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$757.const$2, fi, constants$5.const$2, scope);
        }
        static get_user_data ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_user_data$VH() {
        return constants$757.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*get_user_data)(struct _GAsyncResult*);
     * }
     */
    public static MemorySegment get_user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$757.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*get_user_data)(struct _GAsyncResult*);
     * }
     */
    public static void get_user_data$set(MemorySegment seg, MemorySegment x) {
        constants$757.const$3.set(seg, x);
    }
    public static MemorySegment get_user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$757.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_user_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$757.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_user_data get_user_data(MemorySegment segment, Arena scope) {
        return get_user_data.ofAddress(get_user_data$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GObject* (*get_source_object)(struct _GAsyncResult*);
     * }
     */
    public interface get_source_object {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_source_object fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$757.const$4, fi, constants$5.const$2, scope);
        }
        static get_source_object ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_source_object$VH() {
        return constants$757.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GObject* (*get_source_object)(struct _GAsyncResult*);
     * }
     */
    public static MemorySegment get_source_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$757.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GObject* (*get_source_object)(struct _GAsyncResult*);
     * }
     */
    public static void get_source_object$set(MemorySegment seg, MemorySegment x) {
        constants$757.const$5.set(seg, x);
    }
    public static MemorySegment get_source_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$757.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_source_object$set(MemorySegment seg, long index, MemorySegment x) {
        constants$757.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_source_object get_source_object(MemorySegment segment, Arena scope) {
        return get_source_object.ofAddress(get_source_object$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_tagged)(struct _GAsyncResult*,void*);
     * }
     */
    public interface is_tagged {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(is_tagged fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$758.const$0, fi, constants$9.const$0, scope);
        }
        static is_tagged ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_tagged$VH() {
        return constants$758.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_tagged)(struct _GAsyncResult*,void*);
     * }
     */
    public static MemorySegment is_tagged$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$758.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_tagged)(struct _GAsyncResult*,void*);
     * }
     */
    public static void is_tagged$set(MemorySegment seg, MemorySegment x) {
        constants$758.const$1.set(seg, x);
    }
    public static MemorySegment is_tagged$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$758.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void is_tagged$set(MemorySegment seg, long index, MemorySegment x) {
        constants$758.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_tagged is_tagged(MemorySegment segment, Arena scope) {
        return is_tagged.ofAddress(is_tagged$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


