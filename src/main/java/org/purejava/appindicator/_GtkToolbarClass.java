// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkToolbarClass {
 *     struct _GtkContainerClass parent_class;
 *     void (*orientation_changed)(struct _GtkToolbar*,enum GtkOrientation);
 *     void (*style_changed)(struct _GtkToolbar*,enum GtkToolbarStyle);
 *     int (*popup_context_menu)(struct _GtkToolbar*,int,int,int);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkToolbarClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3163.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * void (*orientation_changed)(struct _GtkToolbar*,enum GtkOrientation);
     * }
     */
    public interface orientation_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(orientation_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3163.const$4, fi, constants$40.const$2, scope);
        }
        static orientation_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle orientation_changed$VH() {
        return constants$3163.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*orientation_changed)(struct _GtkToolbar*,enum GtkOrientation);
     * }
     */
    public static MemorySegment orientation_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3163.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*orientation_changed)(struct _GtkToolbar*,enum GtkOrientation);
     * }
     */
    public static void orientation_changed$set(MemorySegment seg, MemorySegment x) {
        constants$3163.const$5.set(seg, x);
    }
    public static MemorySegment orientation_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3163.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void orientation_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3163.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static orientation_changed orientation_changed(MemorySegment segment, Arena scope) {
        return orientation_changed.ofAddress(orientation_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*style_changed)(struct _GtkToolbar*,enum GtkToolbarStyle);
     * }
     */
    public interface style_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(style_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3164.const$0, fi, constants$40.const$2, scope);
        }
        static style_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle style_changed$VH() {
        return constants$3164.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*style_changed)(struct _GtkToolbar*,enum GtkToolbarStyle);
     * }
     */
    public static MemorySegment style_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3164.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*style_changed)(struct _GtkToolbar*,enum GtkToolbarStyle);
     * }
     */
    public static void style_changed$set(MemorySegment seg, MemorySegment x) {
        constants$3164.const$1.set(seg, x);
    }
    public static MemorySegment style_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3164.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void style_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3164.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static style_changed style_changed(MemorySegment segment, Arena scope) {
        return style_changed.ofAddress(style_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*popup_context_menu)(struct _GtkToolbar*,int,int,int);
     * }
     */
    public interface popup_context_menu {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(popup_context_menu fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3164.const$2, fi, constants$608.const$5, scope);
        }
        static popup_context_menu ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$1995.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle popup_context_menu$VH() {
        return constants$3164.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*popup_context_menu)(struct _GtkToolbar*,int,int,int);
     * }
     */
    public static MemorySegment popup_context_menu$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3164.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*popup_context_menu)(struct _GtkToolbar*,int,int,int);
     * }
     */
    public static void popup_context_menu$set(MemorySegment seg, MemorySegment x) {
        constants$3164.const$3.set(seg, x);
    }
    public static MemorySegment popup_context_menu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3164.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void popup_context_menu$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3164.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static popup_context_menu popup_context_menu(MemorySegment segment, Arena scope) {
        return popup_context_menu.ofAddress(popup_context_menu$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3164.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$3164.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3164.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3164.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3164.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3164.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3165.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$3165.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3165.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3165.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3165.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3165.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3165.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$3165.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3165.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3165.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3165.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3165.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3165.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$3165.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3165.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3165.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3165.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3165.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


