// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkAccelGroupEntry {
 *     struct _GtkAccelKey key;
 *     struct _GClosure* closure;
 *     unsigned int accel_path_quark;
 * };
 * }
 */
public class _GtkAccelGroupEntry {

    public static MemoryLayout $LAYOUT() {
        return constants$1963.const$1;
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static VarHandle closure$VH() {
        return constants$1963.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GClosure* closure;
     * }
     */
    public static MemorySegment closure$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1963.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GClosure* closure;
     * }
     */
    public static void closure$set(MemorySegment seg, MemorySegment x) {
        constants$1963.const$2.set(seg, x);
    }
    public static MemorySegment closure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1963.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void closure$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1963.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle accel_path_quark$VH() {
        return constants$1963.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int accel_path_quark;
     * }
     */
    public static int accel_path_quark$get(MemorySegment seg) {
        return (int)constants$1963.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int accel_path_quark;
     * }
     */
    public static void accel_path_quark$set(MemorySegment seg, int x) {
        constants$1963.const$3.set(seg, x);
    }
    public static int accel_path_quark$get(MemorySegment seg, long index) {
        return (int)constants$1963.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void accel_path_quark$set(MemorySegment seg, long index, int x) {
        constants$1963.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


