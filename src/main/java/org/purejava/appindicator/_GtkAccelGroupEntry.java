// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GtkAccelGroupEntry {
 *     GtkAccelKey key;
 *     GClosure* closure;
 *     GQuark accel_path_quark;
 * };
 * }
 */
public class _GtkAccelGroupEntry {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("accel_key"),
            Constants$root.C_INT$LAYOUT.withName("accel_mods"),
            MemoryLayout.paddingLayout(32)
        ).withName("key"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("closure"),
        Constants$root.C_INT$LAYOUT.withName("accel_path_quark"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GtkAccelGroupEntry");
    public static MemoryLayout $LAYOUT() {
        return _GtkAccelGroupEntry.$struct$LAYOUT;
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    static final VarHandle closure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("closure"));
    public static VarHandle closure$VH() {
        return _GtkAccelGroupEntry.closure$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GClosure* closure;
     * }
     */
    public static MemorySegment closure$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkAccelGroupEntry.closure$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GClosure* closure;
     * }
     */
    public static void closure$set(MemorySegment seg, MemorySegment x) {
        _GtkAccelGroupEntry.closure$VH.set(seg, x);
    }
    public static MemorySegment closure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkAccelGroupEntry.closure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void closure$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkAccelGroupEntry.closure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle accel_path_quark$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("accel_path_quark"));
    public static VarHandle accel_path_quark$VH() {
        return _GtkAccelGroupEntry.accel_path_quark$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GQuark accel_path_quark;
     * }
     */
    public static int accel_path_quark$get(MemorySegment seg) {
        return (int)_GtkAccelGroupEntry.accel_path_quark$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GQuark accel_path_quark;
     * }
     */
    public static void accel_path_quark$set(MemorySegment seg, int x) {
        _GtkAccelGroupEntry.accel_path_quark$VH.set(seg, x);
    }
    public static int accel_path_quark$get(MemorySegment seg, long index) {
        return (int)_GtkAccelGroupEntry.accel_path_quark$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void accel_path_quark$set(MemorySegment seg, long index, int x) {
        _GtkAccelGroupEntry.accel_path_quark$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


