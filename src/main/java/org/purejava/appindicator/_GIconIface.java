// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GIconIface {
 *     struct _GTypeInterface g_iface;
 *     unsigned int (*hash)(struct _GIcon*);
 *     int (*equal)(struct _GIcon*,struct _GIcon*);
 *     int (*to_tokens)(struct _GIcon*,struct _GPtrArray*,int*);
 *     struct _GIcon* (*from_tokens)(char**,int,int,struct _GError**);
 *     struct _GVariant* (*serialize)(struct _GIcon*);
 * };
 * }
 */
public class _GIconIface {

    public static MemoryLayout $LAYOUT() {
        return constants$966.const$2;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * unsigned int (*hash)(struct _GIcon*);
     * }
     */
    public interface hash {

        int apply(java.lang.foreign.MemorySegment key);
        static MemorySegment allocate(hash fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$966.const$3, fi, constants$10.const$5, scope);
        }
        static hash ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _key);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle hash$VH() {
        return constants$966.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*hash)(struct _GIcon*);
     * }
     */
    public static MemorySegment hash$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$966.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*hash)(struct _GIcon*);
     * }
     */
    public static void hash$set(MemorySegment seg, MemorySegment x) {
        constants$966.const$4.set(seg, x);
    }
    public static MemorySegment hash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$966.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hash$set(MemorySegment seg, long index, MemorySegment x) {
        constants$966.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static hash hash(MemorySegment segment, Arena scope) {
        return hash.ofAddress(hash$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*equal)(struct _GIcon*,struct _GIcon*);
     * }
     */
    public interface equal {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(equal fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$966.const$5, fi, constants$9.const$0, scope);
        }
        static equal ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle equal$VH() {
        return constants$967.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*equal)(struct _GIcon*,struct _GIcon*);
     * }
     */
    public static MemorySegment equal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$967.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*equal)(struct _GIcon*,struct _GIcon*);
     * }
     */
    public static void equal$set(MemorySegment seg, MemorySegment x) {
        constants$967.const$0.set(seg, x);
    }
    public static MemorySegment equal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$967.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void equal$set(MemorySegment seg, long index, MemorySegment x) {
        constants$967.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static equal equal(MemorySegment segment, Arena scope) {
        return equal.ofAddress(equal$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*to_tokens)(struct _GIcon*,struct _GPtrArray*,int*);
     * }
     */
    public interface to_tokens {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(to_tokens fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$967.const$1, fi, constants$12.const$2, scope);
        }
        static to_tokens ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle to_tokens$VH() {
        return constants$967.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*to_tokens)(struct _GIcon*,struct _GPtrArray*,int*);
     * }
     */
    public static MemorySegment to_tokens$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$967.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*to_tokens)(struct _GIcon*,struct _GPtrArray*,int*);
     * }
     */
    public static void to_tokens$set(MemorySegment seg, MemorySegment x) {
        constants$967.const$2.set(seg, x);
    }
    public static MemorySegment to_tokens$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$967.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void to_tokens$set(MemorySegment seg, long index, MemorySegment x) {
        constants$967.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static to_tokens to_tokens(MemorySegment segment, Arena scope) {
        return to_tokens.ofAddress(to_tokens$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GIcon* (*from_tokens)(char**,int,int,struct _GError**);
     * }
     */
    public interface from_tokens {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(from_tokens fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$967.const$3, fi, constants$215.const$2, scope);
        }
        static from_tokens ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$967.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle from_tokens$VH() {
        return constants$967.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GIcon* (*from_tokens)(char**,int,int,struct _GError**);
     * }
     */
    public static MemorySegment from_tokens$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$967.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GIcon* (*from_tokens)(char**,int,int,struct _GError**);
     * }
     */
    public static void from_tokens$set(MemorySegment seg, MemorySegment x) {
        constants$967.const$5.set(seg, x);
    }
    public static MemorySegment from_tokens$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$967.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void from_tokens$set(MemorySegment seg, long index, MemorySegment x) {
        constants$967.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static from_tokens from_tokens(MemorySegment segment, Arena scope) {
        return from_tokens.ofAddress(from_tokens$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVariant* (*serialize)(struct _GIcon*);
     * }
     */
    public interface serialize {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(serialize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$968.const$0, fi, constants$5.const$2, scope);
        }
        static serialize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle serialize$VH() {
        return constants$968.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVariant* (*serialize)(struct _GIcon*);
     * }
     */
    public static MemorySegment serialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$968.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVariant* (*serialize)(struct _GIcon*);
     * }
     */
    public static void serialize$set(MemorySegment seg, MemorySegment x) {
        constants$968.const$1.set(seg, x);
    }
    public static MemorySegment serialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$968.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void serialize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$968.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static serialize serialize(MemorySegment segment, Arena scope) {
        return serialize.ofAddress(serialize$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


