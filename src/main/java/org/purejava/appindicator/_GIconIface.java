// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GIconIface {
 *     GTypeInterface g_iface;
 *     guint (*hash)(GIcon *);
 *     gboolean (*equal)(GIcon *, GIcon *);
 *     gboolean (*to_tokens)(GIcon *, GPtrArray *, gint *);
 *     GIcon *(*from_tokens)(gchar **, gint, gint, GError **);
 *     GVariant *(*serialize)(GIcon *);
 * }
 * }
 */
public class _GIconIface {

    _GIconIface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("g_iface"),
        app_indicator_h.C_POINTER.withName("hash"),
        app_indicator_h.C_POINTER.withName("equal"),
        app_indicator_h.C_POINTER.withName("to_tokens"),
        app_indicator_h.C_POINTER.withName("from_tokens"),
        app_indicator_h.C_POINTER.withName("serialize")
    ).withName("_GIconIface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout g_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("g_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final GroupLayout g_iface$layout() {
        return g_iface$LAYOUT;
    }

    private static final long g_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final long g_iface$offset() {
        return g_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static MemorySegment g_iface(MemorySegment struct) {
        return struct.asSlice(g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static void g_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * guint (*hash)(GIcon *)
     * }
     */
    public class hash {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(hash.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(hash.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout hash$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint (*hash)(GIcon *)
     * }
     */
    public static final AddressLayout hash$layout() {
        return hash$LAYOUT;
    }

    private static final long hash$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint (*hash)(GIcon *)
     * }
     */
    public static final long hash$offset() {
        return hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint (*hash)(GIcon *)
     * }
     */
    public static MemorySegment hash(MemorySegment struct) {
        return struct.get(hash$LAYOUT, hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint (*hash)(GIcon *)
     * }
     */
    public static void hash(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hash$LAYOUT, hash$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*equal)(GIcon *, GIcon *)
     * }
     */
    public class equal {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(equal.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(equal.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout equal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("equal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*equal)(GIcon *, GIcon *)
     * }
     */
    public static final AddressLayout equal$layout() {
        return equal$LAYOUT;
    }

    private static final long equal$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*equal)(GIcon *, GIcon *)
     * }
     */
    public static final long equal$offset() {
        return equal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*equal)(GIcon *, GIcon *)
     * }
     */
    public static MemorySegment equal(MemorySegment struct) {
        return struct.get(equal$LAYOUT, equal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*equal)(GIcon *, GIcon *)
     * }
     */
    public static void equal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(equal$LAYOUT, equal$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*to_tokens)(GIcon *, GPtrArray *, gint *)
     * }
     */
    public class to_tokens {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(to_tokens.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(to_tokens.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout to_tokens$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("to_tokens"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*to_tokens)(GIcon *, GPtrArray *, gint *)
     * }
     */
    public static final AddressLayout to_tokens$layout() {
        return to_tokens$LAYOUT;
    }

    private static final long to_tokens$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*to_tokens)(GIcon *, GPtrArray *, gint *)
     * }
     */
    public static final long to_tokens$offset() {
        return to_tokens$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*to_tokens)(GIcon *, GPtrArray *, gint *)
     * }
     */
    public static MemorySegment to_tokens(MemorySegment struct) {
        return struct.get(to_tokens$LAYOUT, to_tokens$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*to_tokens)(GIcon *, GPtrArray *, gint *)
     * }
     */
    public static void to_tokens(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(to_tokens$LAYOUT, to_tokens$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GIcon *(*from_tokens)(gchar **, gint, gint, GError **)
     * }
     */
    public class from_tokens {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(from_tokens.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(from_tokens.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout from_tokens$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("from_tokens"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GIcon *(*from_tokens)(gchar **, gint, gint, GError **)
     * }
     */
    public static final AddressLayout from_tokens$layout() {
        return from_tokens$LAYOUT;
    }

    private static final long from_tokens$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GIcon *(*from_tokens)(gchar **, gint, gint, GError **)
     * }
     */
    public static final long from_tokens$offset() {
        return from_tokens$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GIcon *(*from_tokens)(gchar **, gint, gint, GError **)
     * }
     */
    public static MemorySegment from_tokens(MemorySegment struct) {
        return struct.get(from_tokens$LAYOUT, from_tokens$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GIcon *(*from_tokens)(gchar **, gint, gint, GError **)
     * }
     */
    public static void from_tokens(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(from_tokens$LAYOUT, from_tokens$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GVariant *(*serialize)(GIcon *)
     * }
     */
    public class serialize {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(serialize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(serialize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout serialize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("serialize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GVariant *(*serialize)(GIcon *)
     * }
     */
    public static final AddressLayout serialize$layout() {
        return serialize$LAYOUT;
    }

    private static final long serialize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GVariant *(*serialize)(GIcon *)
     * }
     */
    public static final long serialize$offset() {
        return serialize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GVariant *(*serialize)(GIcon *)
     * }
     */
    public static MemorySegment serialize(MemorySegment struct) {
        return struct.get(serialize$LAYOUT, serialize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GVariant *(*serialize)(GIcon *)
     * }
     */
    public static void serialize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(serialize$LAYOUT, serialize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

