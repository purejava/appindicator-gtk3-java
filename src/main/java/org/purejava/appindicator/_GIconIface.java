// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GIconIface {
 *     GTypeInterface g_iface;
 *     guint (*hash)(GIcon*);
 *     gboolean (*equal)(GIcon*,GIcon*);
 *     gboolean (*to_tokens)(GIcon*,GPtrArray*,gint*);
 *     GIcon* (*from_tokens)(gchar**,gint,gint,GError**);
 *     GVariant* (*serialize)(GIcon*);
 * };
 * }
 */
public class _GIconIface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("hash"),
        Constants$root.C_POINTER$LAYOUT.withName("equal"),
        Constants$root.C_POINTER$LAYOUT.withName("to_tokens"),
        Constants$root.C_POINTER$LAYOUT.withName("from_tokens"),
        Constants$root.C_POINTER$LAYOUT.withName("serialize")
    ).withName("_GIconIface");
    public static MemoryLayout $LAYOUT() {
        return _GIconIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor hash$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor hash_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hash_UP$MH = RuntimeHelper.upcallHandle(hash.class, "apply", _GIconIface.hash_UP$FUNC);
    static final FunctionDescriptor hash_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hash_DOWN$MH = RuntimeHelper.downcallHandle(
        _GIconIface.hash_DOWN$FUNC
    );
    /**
     * {@snippet :
 * guint (*hash)(GIcon*);
     * }
     */
    public interface hash {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(hash fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GIconIface.hash_UP$MH, fi, _GIconIface.hash$FUNC, scope);
        }
        static hash ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GIconIface.hash_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle hash$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hash"));
    public static VarHandle hash$VH() {
        return _GIconIface.hash$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint (*hash)(GIcon*);
     * }
     */
    public static MemorySegment hash$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GIconIface.hash$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint (*hash)(GIcon*);
     * }
     */
    public static void hash$set(MemorySegment seg, MemorySegment x) {
        _GIconIface.hash$VH.set(seg, x);
    }
    public static MemorySegment hash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GIconIface.hash$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hash$set(MemorySegment seg, long index, MemorySegment x) {
        _GIconIface.hash$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static hash hash(MemorySegment segment, SegmentScope scope) {
        return hash.ofAddress(hash$get(segment), scope);
    }
    static final FunctionDescriptor equal$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor equal_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle equal_UP$MH = RuntimeHelper.upcallHandle(equal.class, "apply", _GIconIface.equal_UP$FUNC);
    static final FunctionDescriptor equal_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle equal_DOWN$MH = RuntimeHelper.downcallHandle(
        _GIconIface.equal_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*equal)(GIcon*,GIcon*);
     * }
     */
    public interface equal {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(equal fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GIconIface.equal_UP$MH, fi, _GIconIface.equal$FUNC, scope);
        }
        static equal ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)_GIconIface.equal_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle equal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("equal"));
    public static VarHandle equal$VH() {
        return _GIconIface.equal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*equal)(GIcon*,GIcon*);
     * }
     */
    public static MemorySegment equal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GIconIface.equal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*equal)(GIcon*,GIcon*);
     * }
     */
    public static void equal$set(MemorySegment seg, MemorySegment x) {
        _GIconIface.equal$VH.set(seg, x);
    }
    public static MemorySegment equal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GIconIface.equal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void equal$set(MemorySegment seg, long index, MemorySegment x) {
        _GIconIface.equal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static equal equal(MemorySegment segment, SegmentScope scope) {
        return equal.ofAddress(equal$get(segment), scope);
    }
    static final FunctionDescriptor to_tokens$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor to_tokens_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle to_tokens_UP$MH = RuntimeHelper.upcallHandle(to_tokens.class, "apply", _GIconIface.to_tokens_UP$FUNC);
    static final FunctionDescriptor to_tokens_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle to_tokens_DOWN$MH = RuntimeHelper.downcallHandle(
        _GIconIface.to_tokens_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*to_tokens)(GIcon*,GPtrArray*,gint*);
     * }
     */
    public interface to_tokens {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(to_tokens fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GIconIface.to_tokens_UP$MH, fi, _GIconIface.to_tokens$FUNC, scope);
        }
        static to_tokens ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GIconIface.to_tokens_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle to_tokens$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("to_tokens"));
    public static VarHandle to_tokens$VH() {
        return _GIconIface.to_tokens$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*to_tokens)(GIcon*,GPtrArray*,gint*);
     * }
     */
    public static MemorySegment to_tokens$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GIconIface.to_tokens$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*to_tokens)(GIcon*,GPtrArray*,gint*);
     * }
     */
    public static void to_tokens$set(MemorySegment seg, MemorySegment x) {
        _GIconIface.to_tokens$VH.set(seg, x);
    }
    public static MemorySegment to_tokens$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GIconIface.to_tokens$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void to_tokens$set(MemorySegment seg, long index, MemorySegment x) {
        _GIconIface.to_tokens$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static to_tokens to_tokens(MemorySegment segment, SegmentScope scope) {
        return to_tokens.ofAddress(to_tokens$get(segment), scope);
    }
    static final FunctionDescriptor from_tokens$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor from_tokens_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle from_tokens_UP$MH = RuntimeHelper.upcallHandle(from_tokens.class, "apply", _GIconIface.from_tokens_UP$FUNC);
    static final FunctionDescriptor from_tokens_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle from_tokens_DOWN$MH = RuntimeHelper.downcallHandle(
        _GIconIface.from_tokens_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GIcon* (*from_tokens)(gchar**,gint,gint,GError**);
     * }
     */
    public interface from_tokens {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(from_tokens fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GIconIface.from_tokens_UP$MH, fi, _GIconIface.from_tokens$FUNC, scope);
        }
        static from_tokens ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GIconIface.from_tokens_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle from_tokens$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("from_tokens"));
    public static VarHandle from_tokens$VH() {
        return _GIconIface.from_tokens$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GIcon* (*from_tokens)(gchar**,gint,gint,GError**);
     * }
     */
    public static MemorySegment from_tokens$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GIconIface.from_tokens$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GIcon* (*from_tokens)(gchar**,gint,gint,GError**);
     * }
     */
    public static void from_tokens$set(MemorySegment seg, MemorySegment x) {
        _GIconIface.from_tokens$VH.set(seg, x);
    }
    public static MemorySegment from_tokens$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GIconIface.from_tokens$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void from_tokens$set(MemorySegment seg, long index, MemorySegment x) {
        _GIconIface.from_tokens$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static from_tokens from_tokens(MemorySegment segment, SegmentScope scope) {
        return from_tokens.ofAddress(from_tokens$get(segment), scope);
    }
    static final FunctionDescriptor serialize$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor serialize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle serialize_UP$MH = RuntimeHelper.upcallHandle(serialize.class, "apply", _GIconIface.serialize_UP$FUNC);
    static final FunctionDescriptor serialize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle serialize_DOWN$MH = RuntimeHelper.downcallHandle(
        _GIconIface.serialize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GVariant* (*serialize)(GIcon*);
     * }
     */
    public interface serialize {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(serialize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GIconIface.serialize_UP$MH, fi, _GIconIface.serialize$FUNC, scope);
        }
        static serialize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GIconIface.serialize_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle serialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("serialize"));
    public static VarHandle serialize$VH() {
        return _GIconIface.serialize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GVariant* (*serialize)(GIcon*);
     * }
     */
    public static MemorySegment serialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GIconIface.serialize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GVariant* (*serialize)(GIcon*);
     * }
     */
    public static void serialize$set(MemorySegment seg, MemorySegment x) {
        _GIconIface.serialize$VH.set(seg, x);
    }
    public static MemorySegment serialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GIconIface.serialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serialize$set(MemorySegment seg, long index, MemorySegment x) {
        _GIconIface.serialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static serialize serialize(MemorySegment segment, SegmentScope scope) {
        return serialize.ofAddress(serialize$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


