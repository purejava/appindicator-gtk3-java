// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkStyleClass {
 *     struct _GObjectClass parent_class;
 *     void (*realize)(struct _GtkStyle*);
 *     void (*unrealize)(struct _GtkStyle*);
 *     void (*copy)(struct _GtkStyle*,struct _GtkStyle*);
 *     struct _GtkStyle* (*clone)(struct _GtkStyle*);
 *     void (*init_from_rc)(struct _GtkStyle*,struct _GtkRcStyle*);
 *     void (*set_background)(struct _GtkStyle*,struct _GdkWindow*,enum GtkStateType);
 *     struct _GdkPixbuf* (*render_icon)(struct _GtkStyle*,struct _GtkIconSource*,enum GtkTextDirection,enum GtkStateType,enum GtkIconSize,struct _GtkWidget*,char*);
 *     void (*draw_hline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
 *     void (*draw_vline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
 *     void (*draw_shadow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_arrow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,enum GtkArrowType,int,int,int,int,int);
 *     void (*draw_diamond)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_flat_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_check)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_option)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_tab)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_shadow_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
 *     void (*draw_box_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
 *     void (*draw_extension)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType);
 *     void (*draw_focus)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int,int);
 *     void (*draw_slider)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
 *     void (*draw_handle)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
 *     void (*draw_expander)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,enum GtkExpanderStyle);
 *     void (*draw_layout)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,int,struct _GtkWidget*,char*,int,int,struct _PangoLayout*);
 *     void (*draw_resize_grip)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,enum GdkWindowEdge,int,int,int,int);
 *     void (*draw_spinner)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,unsigned int,int,int,int,int);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 *     void (*_gtk_reserved9)();
 *     void (*_gtk_reserved10)();
 *     void (*_gtk_reserved11)();
 * };
 * }
 */
public class _GtkStyleClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3345.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*realize)(struct _GtkStyle*);
     * }
     */
    public interface realize {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(realize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3345.const$3, fi, constants$13.const$1, scope);
        }
        static realize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle realize$VH() {
        return constants$3345.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*realize)(struct _GtkStyle*);
     * }
     */
    public static MemorySegment realize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3345.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*realize)(struct _GtkStyle*);
     * }
     */
    public static void realize$set(MemorySegment seg, MemorySegment x) {
        constants$3345.const$4.set(seg, x);
    }
    public static MemorySegment realize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3345.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void realize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3345.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static realize realize(MemorySegment segment, Arena scope) {
        return realize.ofAddress(realize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unrealize)(struct _GtkStyle*);
     * }
     */
    public interface unrealize {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(unrealize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3345.const$5, fi, constants$13.const$1, scope);
        }
        static unrealize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unrealize$VH() {
        return constants$3346.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unrealize)(struct _GtkStyle*);
     * }
     */
    public static MemorySegment unrealize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3346.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unrealize)(struct _GtkStyle*);
     * }
     */
    public static void unrealize$set(MemorySegment seg, MemorySegment x) {
        constants$3346.const$0.set(seg, x);
    }
    public static MemorySegment unrealize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3346.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void unrealize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3346.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static unrealize unrealize(MemorySegment segment, Arena scope) {
        return unrealize.ofAddress(unrealize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*copy)(struct _GtkStyle*,struct _GtkStyle*);
     * }
     */
    public interface copy {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(copy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3346.const$1, fi, constants$13.const$4, scope);
        }
        static copy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy$VH() {
        return constants$3346.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*copy)(struct _GtkStyle*,struct _GtkStyle*);
     * }
     */
    public static MemorySegment copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3346.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*copy)(struct _GtkStyle*,struct _GtkStyle*);
     * }
     */
    public static void copy$set(MemorySegment seg, MemorySegment x) {
        constants$3346.const$2.set(seg, x);
    }
    public static MemorySegment copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3346.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void copy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3346.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy copy(MemorySegment segment, Arena scope) {
        return copy.ofAddress(copy$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkStyle* (*clone)(struct _GtkStyle*);
     * }
     */
    public interface clone {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(clone fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3346.const$3, fi, constants$5.const$2, scope);
        }
        static clone ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle clone$VH() {
        return constants$3346.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkStyle* (*clone)(struct _GtkStyle*);
     * }
     */
    public static MemorySegment clone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3346.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkStyle* (*clone)(struct _GtkStyle*);
     * }
     */
    public static void clone$set(MemorySegment seg, MemorySegment x) {
        constants$3346.const$4.set(seg, x);
    }
    public static MemorySegment clone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3346.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void clone$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3346.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static clone clone(MemorySegment segment, Arena scope) {
        return clone.ofAddress(clone$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*init_from_rc)(struct _GtkStyle*,struct _GtkRcStyle*);
     * }
     */
    public interface init_from_rc {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(init_from_rc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3346.const$5, fi, constants$13.const$4, scope);
        }
        static init_from_rc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle init_from_rc$VH() {
        return constants$3347.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*init_from_rc)(struct _GtkStyle*,struct _GtkRcStyle*);
     * }
     */
    public static MemorySegment init_from_rc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3347.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*init_from_rc)(struct _GtkStyle*,struct _GtkRcStyle*);
     * }
     */
    public static void init_from_rc$set(MemorySegment seg, MemorySegment x) {
        constants$3347.const$0.set(seg, x);
    }
    public static MemorySegment init_from_rc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3347.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void init_from_rc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3347.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static init_from_rc init_from_rc(MemorySegment segment, Arena scope) {
        return init_from_rc.ofAddress(init_from_rc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_background)(struct _GtkStyle*,struct _GdkWindow*,enum GtkStateType);
     * }
     */
    public interface set_background {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(set_background fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3347.const$1, fi, constants$164.const$5, scope);
        }
        static set_background ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_background$VH() {
        return constants$3347.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_background)(struct _GtkStyle*,struct _GdkWindow*,enum GtkStateType);
     * }
     */
    public static MemorySegment set_background$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3347.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_background)(struct _GtkStyle*,struct _GdkWindow*,enum GtkStateType);
     * }
     */
    public static void set_background$set(MemorySegment seg, MemorySegment x) {
        constants$3347.const$2.set(seg, x);
    }
    public static MemorySegment set_background$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3347.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_background$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3347.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_background set_background(MemorySegment segment, Arena scope) {
        return set_background.ofAddress(set_background$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GdkPixbuf* (*render_icon)(struct _GtkStyle*,struct _GtkIconSource*,enum GtkTextDirection,enum GtkStateType,enum GtkIconSize,struct _GtkWidget*,char*);
     * }
     */
    public interface render_icon {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(render_icon fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3347.const$3, fi, constants$2764.const$2, scope);
        }
        static render_icon ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3347.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle render_icon$VH() {
        return constants$3347.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GdkPixbuf* (*render_icon)(struct _GtkStyle*,struct _GtkIconSource*,enum GtkTextDirection,enum GtkStateType,enum GtkIconSize,struct _GtkWidget*,char*);
     * }
     */
    public static MemorySegment render_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3347.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GdkPixbuf* (*render_icon)(struct _GtkStyle*,struct _GtkIconSource*,enum GtkTextDirection,enum GtkStateType,enum GtkIconSize,struct _GtkWidget*,char*);
     * }
     */
    public static void render_icon$set(MemorySegment seg, MemorySegment x) {
        constants$3347.const$5.set(seg, x);
    }
    public static MemorySegment render_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3347.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void render_icon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3347.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_icon render_icon(MemorySegment segment, Arena scope) {
        return render_icon.ofAddress(render_icon$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_hline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
     * }
     */
    public interface draw_hline {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6, int _x7);
        static MemorySegment allocate(draw_hline fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3348.const$1, fi, constants$3348.const$0, scope);
        }
        static draw_hline ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6, int __x7) -> {
                try {
                    constants$3348.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_hline$VH() {
        return constants$3348.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_hline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
     * }
     */
    public static MemorySegment draw_hline$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3348.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_hline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
     * }
     */
    public static void draw_hline$set(MemorySegment seg, MemorySegment x) {
        constants$3348.const$3.set(seg, x);
    }
    public static MemorySegment draw_hline$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3348.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_hline$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3348.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_hline draw_hline(MemorySegment segment, Arena scope) {
        return draw_hline.ofAddress(draw_hline$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_vline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
     * }
     */
    public interface draw_vline {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6, int _x7);
        static MemorySegment allocate(draw_vline fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3348.const$4, fi, constants$3348.const$0, scope);
        }
        static draw_vline ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6, int __x7) -> {
                try {
                    constants$3348.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_vline$VH() {
        return constants$3348.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_vline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
     * }
     */
    public static MemorySegment draw_vline$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3348.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_vline)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int);
     * }
     */
    public static void draw_vline$set(MemorySegment seg, MemorySegment x) {
        constants$3348.const$5.set(seg, x);
    }
    public static MemorySegment draw_vline$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3348.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_vline$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3348.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_vline draw_vline(MemorySegment segment, Arena scope) {
        return draw_vline.ofAddress(draw_vline$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_shadow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_shadow {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_shadow fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3349.const$1, fi, constants$3349.const$0, scope);
        }
        static draw_shadow ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3349.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_shadow$VH() {
        return constants$3349.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_shadow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_shadow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3349.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_shadow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_shadow$set(MemorySegment seg, MemorySegment x) {
        constants$3349.const$3.set(seg, x);
    }
    public static MemorySegment draw_shadow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3349.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_shadow$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3349.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_shadow draw_shadow(MemorySegment segment, Arena scope) {
        return draw_shadow.ofAddress(draw_shadow$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_arrow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,enum GtkArrowType,int,int,int,int,int);
     * }
     */
    public interface draw_arrow {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9, int _x10, int _x11);
        static MemorySegment allocate(draw_arrow fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3349.const$5, fi, constants$3349.const$4, scope);
        }
        static draw_arrow ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9, int __x10, int __x11) -> {
                try {
                    constants$3350.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9, __x10, __x11);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_arrow$VH() {
        return constants$3350.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_arrow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,enum GtkArrowType,int,int,int,int,int);
     * }
     */
    public static MemorySegment draw_arrow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3350.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_arrow)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,enum GtkArrowType,int,int,int,int,int);
     * }
     */
    public static void draw_arrow$set(MemorySegment seg, MemorySegment x) {
        constants$3350.const$1.set(seg, x);
    }
    public static MemorySegment draw_arrow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3350.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_arrow$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3350.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_arrow draw_arrow(MemorySegment segment, Arena scope) {
        return draw_arrow.ofAddress(draw_arrow$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_diamond)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_diamond {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_diamond fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3350.const$2, fi, constants$3349.const$0, scope);
        }
        static draw_diamond ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3349.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_diamond$VH() {
        return constants$3350.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_diamond)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_diamond$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3350.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_diamond)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_diamond$set(MemorySegment seg, MemorySegment x) {
        constants$3350.const$3.set(seg, x);
    }
    public static MemorySegment draw_diamond$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3350.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_diamond$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3350.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_diamond draw_diamond(MemorySegment segment, Arena scope) {
        return draw_diamond.ofAddress(draw_diamond$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_box {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_box fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3350.const$4, fi, constants$3349.const$0, scope);
        }
        static draw_box ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3349.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_box$VH() {
        return constants$3350.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_box$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3350.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_box$set(MemorySegment seg, MemorySegment x) {
        constants$3350.const$5.set(seg, x);
    }
    public static MemorySegment draw_box$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3350.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_box$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3350.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_box draw_box(MemorySegment segment, Arena scope) {
        return draw_box.ofAddress(draw_box$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_flat_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_flat_box {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_flat_box fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3351.const$0, fi, constants$3349.const$0, scope);
        }
        static draw_flat_box ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3349.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_flat_box$VH() {
        return constants$3351.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_flat_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_flat_box$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3351.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_flat_box)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_flat_box$set(MemorySegment seg, MemorySegment x) {
        constants$3351.const$1.set(seg, x);
    }
    public static MemorySegment draw_flat_box$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3351.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_flat_box$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3351.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_flat_box draw_flat_box(MemorySegment segment, Arena scope) {
        return draw_flat_box.ofAddress(draw_flat_box$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_check)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_check {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_check fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3351.const$2, fi, constants$3349.const$0, scope);
        }
        static draw_check ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3349.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_check$VH() {
        return constants$3351.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_check)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_check$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3351.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_check)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_check$set(MemorySegment seg, MemorySegment x) {
        constants$3351.const$3.set(seg, x);
    }
    public static MemorySegment draw_check$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3351.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_check$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3351.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_check draw_check(MemorySegment segment, Arena scope) {
        return draw_check.ofAddress(draw_check$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_option)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_option {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_option fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3351.const$4, fi, constants$3349.const$0, scope);
        }
        static draw_option ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3349.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_option$VH() {
        return constants$3351.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_option)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_option$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3351.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_option)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_option$set(MemorySegment seg, MemorySegment x) {
        constants$3351.const$5.set(seg, x);
    }
    public static MemorySegment draw_option$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3351.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_option$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3351.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_option draw_option(MemorySegment segment, Arena scope) {
        return draw_option.ofAddress(draw_option$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_tab)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_tab {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_tab fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3352.const$0, fi, constants$3349.const$0, scope);
        }
        static draw_tab ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3349.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_tab$VH() {
        return constants$3352.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_tab)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_tab$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3352.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_tab)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_tab$set(MemorySegment seg, MemorySegment x) {
        constants$3352.const$1.set(seg, x);
    }
    public static MemorySegment draw_tab$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3352.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_tab$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3352.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_tab draw_tab(MemorySegment segment, Arena scope) {
        return draw_tab.ofAddress(draw_tab$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_shadow_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
     * }
     */
    public interface draw_shadow_gap {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9, int _x10, int _x11, int _x12);
        static MemorySegment allocate(draw_shadow_gap fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3352.const$3, fi, constants$3352.const$2, scope);
        }
        static draw_shadow_gap ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9, int __x10, int __x11, int __x12) -> {
                try {
                    constants$3352.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9, __x10, __x11, __x12);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_shadow_gap$VH() {
        return constants$3352.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_shadow_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
     * }
     */
    public static MemorySegment draw_shadow_gap$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3352.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_shadow_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
     * }
     */
    public static void draw_shadow_gap$set(MemorySegment seg, MemorySegment x) {
        constants$3352.const$5.set(seg, x);
    }
    public static MemorySegment draw_shadow_gap$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3352.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_shadow_gap$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3352.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_shadow_gap draw_shadow_gap(MemorySegment segment, Arena scope) {
        return draw_shadow_gap.ofAddress(draw_shadow_gap$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_box_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
     * }
     */
    public interface draw_box_gap {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9, int _x10, int _x11, int _x12);
        static MemorySegment allocate(draw_box_gap fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3353.const$0, fi, constants$3352.const$2, scope);
        }
        static draw_box_gap ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9, int __x10, int __x11, int __x12) -> {
                try {
                    constants$3352.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9, __x10, __x11, __x12);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_box_gap$VH() {
        return constants$3353.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_box_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
     * }
     */
    public static MemorySegment draw_box_gap$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3353.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_box_gap)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType,int,int);
     * }
     */
    public static void draw_box_gap$set(MemorySegment seg, MemorySegment x) {
        constants$3353.const$1.set(seg, x);
    }
    public static MemorySegment draw_box_gap$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3353.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_box_gap$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3353.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_box_gap draw_box_gap(MemorySegment segment, Arena scope) {
        return draw_box_gap.ofAddress(draw_box_gap$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_extension)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType);
     * }
     */
    public interface draw_extension {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9, int _x10);
        static MemorySegment allocate(draw_extension fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3353.const$3, fi, constants$3353.const$2, scope);
        }
        static draw_extension ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9, int __x10) -> {
                try {
                    constants$3353.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9, __x10);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_extension$VH() {
        return constants$3353.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_extension)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType);
     * }
     */
    public static MemorySegment draw_extension$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3353.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_extension)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkPositionType);
     * }
     */
    public static void draw_extension$set(MemorySegment seg, MemorySegment x) {
        constants$3353.const$5.set(seg, x);
    }
    public static MemorySegment draw_extension$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3353.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_extension$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3353.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_extension draw_extension(MemorySegment segment, Arena scope) {
        return draw_extension.ofAddress(draw_extension$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_focus)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public interface draw_focus {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6, int _x7, int _x8);
        static MemorySegment allocate(draw_focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3354.const$1, fi, constants$3354.const$0, scope);
        }
        static draw_focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6, int __x7, int __x8) -> {
                try {
                    constants$3354.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_focus$VH() {
        return constants$3354.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_focus)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3354.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_focus)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,int,int);
     * }
     */
    public static void draw_focus$set(MemorySegment seg, MemorySegment x) {
        constants$3354.const$3.set(seg, x);
    }
    public static MemorySegment draw_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3354.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3354.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_focus draw_focus(MemorySegment segment, Arena scope) {
        return draw_focus.ofAddress(draw_focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_slider)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
     * }
     */
    public interface draw_slider {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9, int _x10);
        static MemorySegment allocate(draw_slider fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3354.const$4, fi, constants$3353.const$2, scope);
        }
        static draw_slider ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9, int __x10) -> {
                try {
                    constants$3353.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9, __x10);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_slider$VH() {
        return constants$3354.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_slider)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
     * }
     */
    public static MemorySegment draw_slider$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3354.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_slider)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
     * }
     */
    public static void draw_slider$set(MemorySegment seg, MemorySegment x) {
        constants$3354.const$5.set(seg, x);
    }
    public static MemorySegment draw_slider$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3354.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_slider$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3354.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_slider draw_slider(MemorySegment segment, Arena scope) {
        return draw_slider.ofAddress(draw_slider$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_handle)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
     * }
     */
    public interface draw_handle {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, int _x9, int _x10);
        static MemorySegment allocate(draw_handle fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3355.const$0, fi, constants$3353.const$2, scope);
        }
        static draw_handle ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, int __x9, int __x10) -> {
                try {
                    constants$3353.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9, __x10);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_handle$VH() {
        return constants$3355.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_handle)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
     * }
     */
    public static MemorySegment draw_handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3355.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_handle)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,enum GtkShadowType,struct _GtkWidget*,char*,int,int,int,int,enum GtkOrientation);
     * }
     */
    public static void draw_handle$set(MemorySegment seg, MemorySegment x) {
        constants$3355.const$1.set(seg, x);
    }
    public static MemorySegment draw_handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3355.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_handle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3355.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_handle draw_handle(MemorySegment segment, Arena scope) {
        return draw_handle.ofAddress(draw_handle$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_expander)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,enum GtkExpanderStyle);
     * }
     */
    public interface draw_expander {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6, int _x7);
        static MemorySegment allocate(draw_expander fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3355.const$2, fi, constants$3348.const$0, scope);
        }
        static draw_expander ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6, int __x7) -> {
                try {
                    constants$3348.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_expander$VH() {
        return constants$3355.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_expander)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,enum GtkExpanderStyle);
     * }
     */
    public static MemorySegment draw_expander$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3355.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_expander)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,int,int,enum GtkExpanderStyle);
     * }
     */
    public static void draw_expander$set(MemorySegment seg, MemorySegment x) {
        constants$3355.const$3.set(seg, x);
    }
    public static MemorySegment draw_expander$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3355.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_expander$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3355.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_expander draw_expander(MemorySegment segment, Arena scope) {
        return draw_expander.ofAddress(draw_expander$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_layout)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,int,struct _GtkWidget*,char*,int,int,struct _PangoLayout*);
     * }
     */
    public interface draw_layout {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(draw_layout fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3355.const$5, fi, constants$3355.const$4, scope);
        }
        static draw_layout ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    constants$3356.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_layout$VH() {
        return constants$3356.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_layout)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,int,struct _GtkWidget*,char*,int,int,struct _PangoLayout*);
     * }
     */
    public static MemorySegment draw_layout$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3356.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_layout)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,int,struct _GtkWidget*,char*,int,int,struct _PangoLayout*);
     * }
     */
    public static void draw_layout$set(MemorySegment seg, MemorySegment x) {
        constants$3356.const$1.set(seg, x);
    }
    public static MemorySegment draw_layout$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3356.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_layout$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3356.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_layout draw_layout(MemorySegment segment, Arena scope) {
        return draw_layout.ofAddress(draw_layout$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_resize_grip)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,enum GdkWindowEdge,int,int,int,int);
     * }
     */
    public interface draw_resize_grip {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_resize_grip fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3356.const$3, fi, constants$3356.const$2, scope);
        }
        static draw_resize_grip ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3356.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_resize_grip$VH() {
        return constants$3356.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_resize_grip)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,enum GdkWindowEdge,int,int,int,int);
     * }
     */
    public static MemorySegment draw_resize_grip$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3356.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_resize_grip)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,enum GdkWindowEdge,int,int,int,int);
     * }
     */
    public static void draw_resize_grip$set(MemorySegment seg, MemorySegment x) {
        constants$3356.const$5.set(seg, x);
    }
    public static MemorySegment draw_resize_grip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3356.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_resize_grip$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3356.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_resize_grip draw_resize_grip(MemorySegment segment, Arena scope) {
        return draw_resize_grip.ofAddress(draw_resize_grip$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_spinner)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,unsigned int,int,int,int,int);
     * }
     */
    public interface draw_spinner {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6, int _x7, int _x8, int _x9);
        static MemorySegment allocate(draw_spinner fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3357.const$0, fi, constants$3356.const$2, scope);
        }
        static draw_spinner ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6, int __x7, int __x8, int __x9) -> {
                try {
                    constants$3356.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_spinner$VH() {
        return constants$3357.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_spinner)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,unsigned int,int,int,int,int);
     * }
     */
    public static MemorySegment draw_spinner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3357.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_spinner)(struct _GtkStyle*,struct _cairo*,enum GtkStateType,struct _GtkWidget*,char*,unsigned int,int,int,int,int);
     * }
     */
    public static void draw_spinner$set(MemorySegment seg, MemorySegment x) {
        constants$3357.const$1.set(seg, x);
    }
    public static MemorySegment draw_spinner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3357.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_spinner$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3357.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_spinner draw_spinner(MemorySegment segment, Arena scope) {
        return draw_spinner.ofAddress(draw_spinner$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3357.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$3357.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3357.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3357.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3357.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3357.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3357.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$3357.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3357.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3357.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3357.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3357.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3358.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$3358.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3358.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3358.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3358.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3358.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3358.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$3358.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3358.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3358.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3358.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3358.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3358.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$3358.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3358.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$3358.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3358.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3358.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3359.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$3359.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3359.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$3359.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3359.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3359.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3359.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$3359.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3359.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$3359.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3359.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3359.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3359.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$3359.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3359.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$3359.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3359.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3359.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved9)();
     * }
     */
    public interface _gtk_reserved9 {

        void apply();
        static MemorySegment allocate(_gtk_reserved9 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3360.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved9 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved9$VH() {
        return constants$3360.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved9)();
     * }
     */
    public static MemorySegment _gtk_reserved9$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3360.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved9)();
     * }
     */
    public static void _gtk_reserved9$set(MemorySegment seg, MemorySegment x) {
        constants$3360.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved9$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3360.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved9$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3360.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved9 _gtk_reserved9(MemorySegment segment, Arena scope) {
        return _gtk_reserved9.ofAddress(_gtk_reserved9$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved10)();
     * }
     */
    public interface _gtk_reserved10 {

        void apply();
        static MemorySegment allocate(_gtk_reserved10 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3360.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved10 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved10$VH() {
        return constants$3360.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved10)();
     * }
     */
    public static MemorySegment _gtk_reserved10$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3360.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved10)();
     * }
     */
    public static void _gtk_reserved10$set(MemorySegment seg, MemorySegment x) {
        constants$3360.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved10$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3360.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved10$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3360.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved10 _gtk_reserved10(MemorySegment segment, Arena scope) {
        return _gtk_reserved10.ofAddress(_gtk_reserved10$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved11)();
     * }
     */
    public interface _gtk_reserved11 {

        void apply();
        static MemorySegment allocate(_gtk_reserved11 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3360.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved11 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved11$VH() {
        return constants$3360.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved11)();
     * }
     */
    public static MemorySegment _gtk_reserved11$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3360.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved11)();
     * }
     */
    public static void _gtk_reserved11$set(MemorySegment seg, MemorySegment x) {
        constants$3360.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved11$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3360.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved11$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3360.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved11 _gtk_reserved11(MemorySegment segment, Arena scope) {
        return _gtk_reserved11.ofAddress(_gtk_reserved11$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


