// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*g_signal_connect_object$c_handler)();
 * }
 */
public interface g_signal_connect_object$c_handler {

    void apply();
    static MemorySegment allocate(g_signal_connect_object$c_handler fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1.const$3, fi, constants$0.const$2, scope);
    }
    static g_signal_connect_object$c_handler ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return () -> {
            try {
                constants$0.const$4.invokeExact(symbol);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


