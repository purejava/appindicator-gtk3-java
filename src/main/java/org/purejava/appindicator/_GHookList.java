// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GHookList {
 *     unsigned long seq_id;
 *      *     unsigned int hook_size;
 *     unsigned int is_setup;
 *     struct _GHook* hooks;
 *     void* dummy3;
 *     void (*finalize_hook)(struct _GHookList*,struct _GHook*);
 *     void* dummy[2];
 * };
 * }
 */
public class _GHookList {

    public static MemoryLayout $LAYOUT() {
        return constants$239.const$1;
    }
    public static VarHandle seq_id$VH() {
        return constants$239.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long seq_id;
     * }
     */
    public static long seq_id$get(MemorySegment seg) {
        return (long)constants$239.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long seq_id;
     * }
     */
    public static void seq_id$set(MemorySegment seg, long x) {
        constants$239.const$2.set(seg, x);
    }
    public static long seq_id$get(MemorySegment seg, long index) {
        return (long)constants$239.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void seq_id$set(MemorySegment seg, long index, long x) {
        constants$239.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hooks$VH() {
        return constants$239.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GHook* hooks;
     * }
     */
    public static MemorySegment hooks$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$239.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GHook* hooks;
     * }
     */
    public static void hooks$set(MemorySegment seg, MemorySegment x) {
        constants$239.const$3.set(seg, x);
    }
    public static MemorySegment hooks$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$239.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hooks$set(MemorySegment seg, long index, MemorySegment x) {
        constants$239.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dummy3$VH() {
        return constants$239.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* dummy3;
     * }
     */
    public static MemorySegment dummy3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$239.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* dummy3;
     * }
     */
    public static void dummy3$set(MemorySegment seg, MemorySegment x) {
        constants$239.const$4.set(seg, x);
    }
    public static MemorySegment dummy3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$239.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dummy3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$239.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*finalize_hook)(struct _GHookList*,struct _GHook*);
     * }
     */
    public interface finalize_hook {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(finalize_hook fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$239.const$5, fi, constants$13.const$4, scope);
        }
        static finalize_hook ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle finalize_hook$VH() {
        return constants$240.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*finalize_hook)(struct _GHookList*,struct _GHook*);
     * }
     */
    public static MemorySegment finalize_hook$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$240.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*finalize_hook)(struct _GHookList*,struct _GHook*);
     * }
     */
    public static void finalize_hook$set(MemorySegment seg, MemorySegment x) {
        constants$240.const$0.set(seg, x);
    }
    public static MemorySegment finalize_hook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$240.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void finalize_hook$set(MemorySegment seg, long index, MemorySegment x) {
        constants$240.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static finalize_hook finalize_hook(MemorySegment segment, Arena scope) {
        return finalize_hook.ofAddress(finalize_hook$get(segment), scope);
    }
    public static MemorySegment dummy$slice(MemorySegment seg) {
        return seg.asSlice(40, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


