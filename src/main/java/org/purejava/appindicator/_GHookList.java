// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct _GHookList {
 *     gulong seq_id;
 *     guint hook_size : 16;
 *     guint is_setup : 1;
 *     GHook *hooks;
 *     gpointer dummy3;
 *     GHookFinalizeFunc finalize_hook;
 *     gpointer dummy[2];
 * }
 * }
 */
public class _GHookList {

    _GHookList() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_LONG.withName("seq_id"),
        MemoryLayout.paddingLayout(8),
        app_indicator_h.C_POINTER.withName("hooks"),
        app_indicator_h.C_POINTER.withName("dummy3"),
        app_indicator_h.C_POINTER.withName("finalize_hook"),
        MemoryLayout.sequenceLayout(2, app_indicator_h.C_POINTER).withName("dummy")
    ).withName("_GHookList");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong seq_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("seq_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gulong seq_id
     * }
     */
    public static final OfLong seq_id$layout() {
        return seq_id$LAYOUT;
    }

    private static final long seq_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gulong seq_id
     * }
     */
    public static final long seq_id$offset() {
        return seq_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gulong seq_id
     * }
     */
    public static long seq_id(MemorySegment struct) {
        return struct.get(seq_id$LAYOUT, seq_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gulong seq_id
     * }
     */
    public static void seq_id(MemorySegment struct, long fieldValue) {
        struct.set(seq_id$LAYOUT, seq_id$OFFSET, fieldValue);
    }

    private static final AddressLayout hooks$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hooks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GHook *hooks
     * }
     */
    public static final AddressLayout hooks$layout() {
        return hooks$LAYOUT;
    }

    private static final long hooks$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GHook *hooks
     * }
     */
    public static final long hooks$offset() {
        return hooks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GHook *hooks
     * }
     */
    public static MemorySegment hooks(MemorySegment struct) {
        return struct.get(hooks$LAYOUT, hooks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GHook *hooks
     * }
     */
    public static void hooks(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hooks$LAYOUT, hooks$OFFSET, fieldValue);
    }

    private static final AddressLayout dummy3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dummy3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer dummy3
     * }
     */
    public static final AddressLayout dummy3$layout() {
        return dummy3$LAYOUT;
    }

    private static final long dummy3$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer dummy3
     * }
     */
    public static final long dummy3$offset() {
        return dummy3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer dummy3
     * }
     */
    public static MemorySegment dummy3(MemorySegment struct) {
        return struct.get(dummy3$LAYOUT, dummy3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer dummy3
     * }
     */
    public static void dummy3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dummy3$LAYOUT, dummy3$OFFSET, fieldValue);
    }

    private static final AddressLayout finalize_hook$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("finalize_hook"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GHookFinalizeFunc finalize_hook
     * }
     */
    public static final AddressLayout finalize_hook$layout() {
        return finalize_hook$LAYOUT;
    }

    private static final long finalize_hook$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GHookFinalizeFunc finalize_hook
     * }
     */
    public static final long finalize_hook$offset() {
        return finalize_hook$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GHookFinalizeFunc finalize_hook
     * }
     */
    public static MemorySegment finalize_hook(MemorySegment struct) {
        return struct.get(finalize_hook$LAYOUT, finalize_hook$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GHookFinalizeFunc finalize_hook
     * }
     */
    public static void finalize_hook(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(finalize_hook$LAYOUT, finalize_hook$OFFSET, fieldValue);
    }

    private static final SequenceLayout dummy$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dummy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer dummy[2]
     * }
     */
    public static final SequenceLayout dummy$layout() {
        return dummy$LAYOUT;
    }

    private static final long dummy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer dummy[2]
     * }
     */
    public static final long dummy$offset() {
        return dummy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer dummy[2]
     * }
     */
    public static MemorySegment dummy(MemorySegment struct) {
        return struct.asSlice(dummy$OFFSET, dummy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer dummy[2]
     * }
     */
    public static void dummy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dummy$OFFSET, dummy$LAYOUT.byteSize());
    }

    private static long[] dummy$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * gpointer dummy[2]
     * }
     */
    public static long[] dummy$dimensions() {
        return dummy$DIMS;
    }
    private static final VarHandle dummy$ELEM_HANDLE = dummy$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * gpointer dummy[2]
     * }
     */
    public static MemorySegment dummy(MemorySegment struct, long index0) {
        return (MemorySegment)dummy$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * gpointer dummy[2]
     * }
     */
    public static void dummy(MemorySegment struct, long index0, MemorySegment fieldValue) {
        dummy$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

