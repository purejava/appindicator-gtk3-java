// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GMarkupParser {
 *     void (*start_element)(GMarkupParseContext *, const gchar *, const gchar **, const gchar **, gpointer, GError **);
 *     void (*end_element)(GMarkupParseContext *, const gchar *, gpointer, GError **);
 *     void (*text)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **);
 *     void (*passthrough)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **);
 *     void (*error)(GMarkupParseContext *, GError *, gpointer);
 * }
 * }
 */
public class _GMarkupParser {

    _GMarkupParser() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("start_element"),
        app_indicator_h.C_POINTER.withName("end_element"),
        app_indicator_h.C_POINTER.withName("text"),
        app_indicator_h.C_POINTER.withName("passthrough"),
        app_indicator_h.C_POINTER.withName("error")
    ).withName("_GMarkupParser");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*start_element)(GMarkupParseContext *, const gchar *, const gchar **, const gchar **, gpointer, GError **)
     * }
     */
    public class start_element {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(start_element.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(start_element.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout start_element$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("start_element"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*start_element)(GMarkupParseContext *, const gchar *, const gchar **, const gchar **, gpointer, GError **)
     * }
     */
    public static final AddressLayout start_element$layout() {
        return start_element$LAYOUT;
    }

    private static final long start_element$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*start_element)(GMarkupParseContext *, const gchar *, const gchar **, const gchar **, gpointer, GError **)
     * }
     */
    public static final long start_element$offset() {
        return start_element$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*start_element)(GMarkupParseContext *, const gchar *, const gchar **, const gchar **, gpointer, GError **)
     * }
     */
    public static MemorySegment start_element(MemorySegment struct) {
        return struct.get(start_element$LAYOUT, start_element$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*start_element)(GMarkupParseContext *, const gchar *, const gchar **, const gchar **, gpointer, GError **)
     * }
     */
    public static void start_element(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(start_element$LAYOUT, start_element$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*end_element)(GMarkupParseContext *, const gchar *, gpointer, GError **)
     * }
     */
    public class end_element {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(end_element.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(end_element.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout end_element$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("end_element"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*end_element)(GMarkupParseContext *, const gchar *, gpointer, GError **)
     * }
     */
    public static final AddressLayout end_element$layout() {
        return end_element$LAYOUT;
    }

    private static final long end_element$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*end_element)(GMarkupParseContext *, const gchar *, gpointer, GError **)
     * }
     */
    public static final long end_element$offset() {
        return end_element$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*end_element)(GMarkupParseContext *, const gchar *, gpointer, GError **)
     * }
     */
    public static MemorySegment end_element(MemorySegment struct) {
        return struct.get(end_element$LAYOUT, end_element$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*end_element)(GMarkupParseContext *, const gchar *, gpointer, GError **)
     * }
     */
    public static void end_element(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(end_element$LAYOUT, end_element$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*text)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public class text {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*text)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static final AddressLayout text$layout() {
        return text$LAYOUT;
    }

    private static final long text$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*text)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static final long text$offset() {
        return text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*text)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static MemorySegment text(MemorySegment struct) {
        return struct.get(text$LAYOUT, text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*text)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static void text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(text$LAYOUT, text$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*passthrough)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public class passthrough {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(passthrough.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(passthrough.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout passthrough$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("passthrough"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*passthrough)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static final AddressLayout passthrough$layout() {
        return passthrough$LAYOUT;
    }

    private static final long passthrough$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*passthrough)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static final long passthrough$offset() {
        return passthrough$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*passthrough)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static MemorySegment passthrough(MemorySegment struct) {
        return struct.get(passthrough$LAYOUT, passthrough$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*passthrough)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)
     * }
     */
    public static void passthrough(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(passthrough$LAYOUT, passthrough$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*error)(GMarkupParseContext *, GError *, gpointer)
     * }
     */
    public class error {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(error.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(error.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout error$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("error"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*error)(GMarkupParseContext *, GError *, gpointer)
     * }
     */
    public static final AddressLayout error$layout() {
        return error$LAYOUT;
    }

    private static final long error$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*error)(GMarkupParseContext *, GError *, gpointer)
     * }
     */
    public static final long error$offset() {
        return error$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*error)(GMarkupParseContext *, GError *, gpointer)
     * }
     */
    public static MemorySegment error(MemorySegment struct) {
        return struct.get(error$LAYOUT, error$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*error)(GMarkupParseContext *, GError *, gpointer)
     * }
     */
    public static void error(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(error$LAYOUT, error$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

