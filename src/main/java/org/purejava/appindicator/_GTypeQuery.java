// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GTypeQuery {
 *     GType type;
 *     const gchar *type_name;
 *     guint class_size;
 *     guint instance_size;
 * }
 * }
 */
public class _GTypeQuery {

    _GTypeQuery() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_LONG.withName("type"),
        app_indicator_h.C_POINTER.withName("type_name"),
        app_indicator_h.C_INT.withName("class_size"),
        app_indicator_h.C_INT.withName("instance_size")
    ).withName("_GTypeQuery");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong type$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static final OfLong type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static long type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static void type(MemorySegment struct, long fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout type_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("type_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *type_name
     * }
     */
    public static final AddressLayout type_name$layout() {
        return type_name$LAYOUT;
    }

    private static final long type_name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *type_name
     * }
     */
    public static final long type_name$offset() {
        return type_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *type_name
     * }
     */
    public static MemorySegment type_name(MemorySegment struct) {
        return struct.get(type_name$LAYOUT, type_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *type_name
     * }
     */
    public static void type_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(type_name$LAYOUT, type_name$OFFSET, fieldValue);
    }

    private static final OfInt class_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("class_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint class_size
     * }
     */
    public static final OfInt class_size$layout() {
        return class_size$LAYOUT;
    }

    private static final long class_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint class_size
     * }
     */
    public static final long class_size$offset() {
        return class_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint class_size
     * }
     */
    public static int class_size(MemorySegment struct) {
        return struct.get(class_size$LAYOUT, class_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint class_size
     * }
     */
    public static void class_size(MemorySegment struct, int fieldValue) {
        struct.set(class_size$LAYOUT, class_size$OFFSET, fieldValue);
    }

    private static final OfInt instance_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("instance_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint instance_size
     * }
     */
    public static final OfInt instance_size$layout() {
        return instance_size$LAYOUT;
    }

    private static final long instance_size$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint instance_size
     * }
     */
    public static final long instance_size$offset() {
        return instance_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint instance_size
     * }
     */
    public static int instance_size(MemorySegment struct) {
        return struct.get(instance_size$LAYOUT, instance_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint instance_size
     * }
     */
    public static void instance_size(MemorySegment struct, int fieldValue) {
        struct.set(instance_size$LAYOUT, instance_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

