// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*GObjectSetPropertyFunc)(struct _GObject* object,unsigned int property_id,struct _GValue* value,struct _GParamSpec* pspec);
 * }
 */
public interface GObjectSetPropertyFunc {

    void apply(java.lang.foreign.MemorySegment object, int property_id, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment pspec);
    static MemorySegment allocate(GObjectSetPropertyFunc fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$624.const$1, fi, constants$179.const$1, scope);
    }
    static GObjectSetPropertyFunc ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _object, int _property_id, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _pspec) -> {
            try {
                constants$373.const$3.invokeExact(symbol, _object, _property_id, _value, _pspec);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


