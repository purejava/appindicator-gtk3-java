// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PangoFontFaceClass {
 *     GObjectClass parent_class;
 *     const char *(*get_face_name)(PangoFontFace *);
 *     PangoFontDescription *(*describe)(PangoFontFace *);
 *     void (*list_sizes)(PangoFontFace *, int **, int *);
 *     gboolean (*is_synthesized)(PangoFontFace *);
 *     PangoFontFamily *(*get_family)(PangoFontFace *);
 *     void (*_pango_reserved3)(void);
 *     void (*_pango_reserved4)(void);
 * }
 * }
 */
public class _PangoFontFaceClass {

    _PangoFontFaceClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("get_face_name"),
        app_indicator_h.C_POINTER.withName("describe"),
        app_indicator_h.C_POINTER.withName("list_sizes"),
        app_indicator_h.C_POINTER.withName("is_synthesized"),
        app_indicator_h.C_POINTER.withName("get_family"),
        app_indicator_h.C_POINTER.withName("_pango_reserved3"),
        app_indicator_h.C_POINTER.withName("_pango_reserved4")
    ).withName("_PangoFontFaceClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * const char *(*get_face_name)(PangoFontFace *)
     * }
     */
    public class get_face_name {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_face_name.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_face_name.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_face_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_face_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *(*get_face_name)(PangoFontFace *)
     * }
     */
    public static final AddressLayout get_face_name$layout() {
        return get_face_name$LAYOUT;
    }

    private static final long get_face_name$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *(*get_face_name)(PangoFontFace *)
     * }
     */
    public static final long get_face_name$offset() {
        return get_face_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *(*get_face_name)(PangoFontFace *)
     * }
     */
    public static MemorySegment get_face_name(MemorySegment struct) {
        return struct.get(get_face_name$LAYOUT, get_face_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *(*get_face_name)(PangoFontFace *)
     * }
     */
    public static void get_face_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_face_name$LAYOUT, get_face_name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * PangoFontDescription *(*describe)(PangoFontFace *)
     * }
     */
    public class describe {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(describe.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(describe.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout describe$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("describe"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoFontDescription *(*describe)(PangoFontFace *)
     * }
     */
    public static final AddressLayout describe$layout() {
        return describe$LAYOUT;
    }

    private static final long describe$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoFontDescription *(*describe)(PangoFontFace *)
     * }
     */
    public static final long describe$offset() {
        return describe$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoFontDescription *(*describe)(PangoFontFace *)
     * }
     */
    public static MemorySegment describe(MemorySegment struct) {
        return struct.get(describe$LAYOUT, describe$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoFontDescription *(*describe)(PangoFontFace *)
     * }
     */
    public static void describe(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(describe$LAYOUT, describe$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*list_sizes)(PangoFontFace *, int **, int *)
     * }
     */
    public class list_sizes {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(list_sizes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(list_sizes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout list_sizes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("list_sizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*list_sizes)(PangoFontFace *, int **, int *)
     * }
     */
    public static final AddressLayout list_sizes$layout() {
        return list_sizes$LAYOUT;
    }

    private static final long list_sizes$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*list_sizes)(PangoFontFace *, int **, int *)
     * }
     */
    public static final long list_sizes$offset() {
        return list_sizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*list_sizes)(PangoFontFace *, int **, int *)
     * }
     */
    public static MemorySegment list_sizes(MemorySegment struct) {
        return struct.get(list_sizes$LAYOUT, list_sizes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*list_sizes)(PangoFontFace *, int **, int *)
     * }
     */
    public static void list_sizes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(list_sizes$LAYOUT, list_sizes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*is_synthesized)(PangoFontFace *)
     * }
     */
    public class is_synthesized {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(is_synthesized.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(is_synthesized.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout is_synthesized$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("is_synthesized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*is_synthesized)(PangoFontFace *)
     * }
     */
    public static final AddressLayout is_synthesized$layout() {
        return is_synthesized$LAYOUT;
    }

    private static final long is_synthesized$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*is_synthesized)(PangoFontFace *)
     * }
     */
    public static final long is_synthesized$offset() {
        return is_synthesized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*is_synthesized)(PangoFontFace *)
     * }
     */
    public static MemorySegment is_synthesized(MemorySegment struct) {
        return struct.get(is_synthesized$LAYOUT, is_synthesized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*is_synthesized)(PangoFontFace *)
     * }
     */
    public static void is_synthesized(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(is_synthesized$LAYOUT, is_synthesized$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * PangoFontFamily *(*get_family)(PangoFontFace *)
     * }
     */
    public class get_family {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_family.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_family.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_family$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_family)(PangoFontFace *)
     * }
     */
    public static final AddressLayout get_family$layout() {
        return get_family$LAYOUT;
    }

    private static final long get_family$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_family)(PangoFontFace *)
     * }
     */
    public static final long get_family$offset() {
        return get_family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_family)(PangoFontFace *)
     * }
     */
    public static MemorySegment get_family(MemorySegment struct) {
        return struct.get(get_family$LAYOUT, get_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_family)(PangoFontFace *)
     * }
     */
    public static void get_family(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_family$LAYOUT, get_family$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_pango_reserved3)(void)
     * }
     */
    public class _pango_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_pango_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_pango_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _pango_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_pango_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_pango_reserved3)(void)
     * }
     */
    public static final AddressLayout _pango_reserved3$layout() {
        return _pango_reserved3$LAYOUT;
    }

    private static final long _pango_reserved3$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_pango_reserved3)(void)
     * }
     */
    public static final long _pango_reserved3$offset() {
        return _pango_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_pango_reserved3)(void)
     * }
     */
    public static MemorySegment _pango_reserved3(MemorySegment struct) {
        return struct.get(_pango_reserved3$LAYOUT, _pango_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_pango_reserved3)(void)
     * }
     */
    public static void _pango_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_pango_reserved3$LAYOUT, _pango_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_pango_reserved4)(void)
     * }
     */
    public class _pango_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_pango_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_pango_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _pango_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_pango_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_pango_reserved4)(void)
     * }
     */
    public static final AddressLayout _pango_reserved4$layout() {
        return _pango_reserved4$LAYOUT;
    }

    private static final long _pango_reserved4$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_pango_reserved4)(void)
     * }
     */
    public static final long _pango_reserved4$offset() {
        return _pango_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_pango_reserved4)(void)
     * }
     */
    public static MemorySegment _pango_reserved4(MemorySegment struct) {
        return struct.get(_pango_reserved4$LAYOUT, _pango_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_pango_reserved4)(void)
     * }
     */
    public static void _pango_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_pango_reserved4$LAYOUT, _pango_reserved4$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

