// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * unsigned int (*hb_unicode_decompose_compatibility_func_t)(struct hb_unicode_funcs_t* ufuncs,unsigned int u,unsigned int* decomposed,void* user_data);
 * }
 */
public interface hb_unicode_decompose_compatibility_func_t {

    int apply(java.lang.foreign.MemorySegment ufuncs, int u, java.lang.foreign.MemorySegment decomposed, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(hb_unicode_decompose_compatibility_func_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1519.const$4, fi, constants$11.const$0, scope);
    }
    static hb_unicode_decompose_compatibility_func_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _ufuncs, int _u, java.lang.foreign.MemorySegment _decomposed, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (int)constants$464.const$0.invokeExact(symbol, _ufuncs, _u, _decomposed, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


