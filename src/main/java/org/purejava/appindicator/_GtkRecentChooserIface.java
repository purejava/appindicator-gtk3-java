// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkRecentChooserIface {
 *     struct _GTypeInterface base_iface;
 *     int (*set_current_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
 *     char* (*get_current_uri)(struct _GtkRecentChooser*);
 *     int (*select_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
 *     void (*unselect_uri)(struct _GtkRecentChooser*,char*);
 *     void (*select_all)(struct _GtkRecentChooser*);
 *     void (*unselect_all)(struct _GtkRecentChooser*);
 *     struct _GList* (*get_items)(struct _GtkRecentChooser*);
 *     struct _GtkRecentManager* (*get_recent_manager)(struct _GtkRecentChooser*);
 *     void (*add_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
 *     void (*remove_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
 *     struct _GSList* (*list_filters)(struct _GtkRecentChooser*);
 *     void (*set_sort_func)(struct _GtkRecentChooser*,int (*)(struct _GtkRecentInfo*,struct _GtkRecentInfo*,void*),void*,void (*)(void*));
 *     void (*item_activated)(struct _GtkRecentChooser*);
 *     void (*selection_changed)(struct _GtkRecentChooser*);
 * };
 * }
 */
public class _GtkRecentChooserIface {

    public static MemoryLayout $LAYOUT() {
        return constants$3028.const$3;
    }
    public static MemorySegment base_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * int (*set_current_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
     * }
     */
    public interface set_current_uri {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_current_uri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3028.const$4, fi, constants$12.const$2, scope);
        }
        static set_current_uri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_current_uri$VH() {
        return constants$3028.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_current_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
     * }
     */
    public static MemorySegment set_current_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3028.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_current_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
     * }
     */
    public static void set_current_uri$set(MemorySegment seg, MemorySegment x) {
        constants$3028.const$5.set(seg, x);
    }
    public static MemorySegment set_current_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3028.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void set_current_uri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3028.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_current_uri set_current_uri(MemorySegment segment, Arena scope) {
        return set_current_uri.ofAddress(set_current_uri$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_current_uri)(struct _GtkRecentChooser*);
     * }
     */
    public interface get_current_uri {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_current_uri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3029.const$0, fi, constants$5.const$2, scope);
        }
        static get_current_uri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_current_uri$VH() {
        return constants$3029.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_current_uri)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment get_current_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3029.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_current_uri)(struct _GtkRecentChooser*);
     * }
     */
    public static void get_current_uri$set(MemorySegment seg, MemorySegment x) {
        constants$3029.const$1.set(seg, x);
    }
    public static MemorySegment get_current_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3029.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_current_uri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3029.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_current_uri get_current_uri(MemorySegment segment, Arena scope) {
        return get_current_uri.ofAddress(get_current_uri$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*select_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
     * }
     */
    public interface select_uri {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(select_uri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3029.const$2, fi, constants$12.const$2, scope);
        }
        static select_uri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_uri$VH() {
        return constants$3029.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*select_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
     * }
     */
    public static MemorySegment select_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3029.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*select_uri)(struct _GtkRecentChooser*,char*,struct _GError**);
     * }
     */
    public static void select_uri$set(MemorySegment seg, MemorySegment x) {
        constants$3029.const$3.set(seg, x);
    }
    public static MemorySegment select_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3029.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void select_uri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3029.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_uri select_uri(MemorySegment segment, Arena scope) {
        return select_uri.ofAddress(select_uri$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unselect_uri)(struct _GtkRecentChooser*,char*);
     * }
     */
    public interface unselect_uri {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(unselect_uri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3029.const$4, fi, constants$13.const$4, scope);
        }
        static unselect_uri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unselect_uri$VH() {
        return constants$3029.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unselect_uri)(struct _GtkRecentChooser*,char*);
     * }
     */
    public static MemorySegment unselect_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3029.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unselect_uri)(struct _GtkRecentChooser*,char*);
     * }
     */
    public static void unselect_uri$set(MemorySegment seg, MemorySegment x) {
        constants$3029.const$5.set(seg, x);
    }
    public static MemorySegment unselect_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3029.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_uri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3029.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_uri unselect_uri(MemorySegment segment, Arena scope) {
        return unselect_uri.ofAddress(unselect_uri$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*select_all)(struct _GtkRecentChooser*);
     * }
     */
    public interface select_all {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(select_all fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3030.const$0, fi, constants$13.const$1, scope);
        }
        static select_all ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_all$VH() {
        return constants$3030.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*select_all)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment select_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3030.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*select_all)(struct _GtkRecentChooser*);
     * }
     */
    public static void select_all$set(MemorySegment seg, MemorySegment x) {
        constants$3030.const$1.set(seg, x);
    }
    public static MemorySegment select_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3030.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3030.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all select_all(MemorySegment segment, Arena scope) {
        return select_all.ofAddress(select_all$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unselect_all)(struct _GtkRecentChooser*);
     * }
     */
    public interface unselect_all {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(unselect_all fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3030.const$2, fi, constants$13.const$1, scope);
        }
        static unselect_all ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unselect_all$VH() {
        return constants$3030.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unselect_all)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment unselect_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3030.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unselect_all)(struct _GtkRecentChooser*);
     * }
     */
    public static void unselect_all$set(MemorySegment seg, MemorySegment x) {
        constants$3030.const$3.set(seg, x);
    }
    public static MemorySegment unselect_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3030.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_all$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3030.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_all unselect_all(MemorySegment segment, Arena scope) {
        return unselect_all.ofAddress(unselect_all$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*get_items)(struct _GtkRecentChooser*);
     * }
     */
    public interface get_items {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_items fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3030.const$4, fi, constants$5.const$2, scope);
        }
        static get_items ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_items$VH() {
        return constants$3030.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*get_items)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment get_items$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3030.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*get_items)(struct _GtkRecentChooser*);
     * }
     */
    public static void get_items$set(MemorySegment seg, MemorySegment x) {
        constants$3030.const$5.set(seg, x);
    }
    public static MemorySegment get_items$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3030.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_items$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3030.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_items get_items(MemorySegment segment, Arena scope) {
        return get_items.ofAddress(get_items$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkRecentManager* (*get_recent_manager)(struct _GtkRecentChooser*);
     * }
     */
    public interface get_recent_manager {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_recent_manager fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3031.const$0, fi, constants$5.const$2, scope);
        }
        static get_recent_manager ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_recent_manager$VH() {
        return constants$3031.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkRecentManager* (*get_recent_manager)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment get_recent_manager$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3031.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkRecentManager* (*get_recent_manager)(struct _GtkRecentChooser*);
     * }
     */
    public static void get_recent_manager$set(MemorySegment seg, MemorySegment x) {
        constants$3031.const$1.set(seg, x);
    }
    public static MemorySegment get_recent_manager$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3031.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_recent_manager$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3031.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_recent_manager get_recent_manager(MemorySegment segment, Arena scope) {
        return get_recent_manager.ofAddress(get_recent_manager$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*add_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
     * }
     */
    public interface add_filter {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(add_filter fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3031.const$2, fi, constants$13.const$4, scope);
        }
        static add_filter ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_filter$VH() {
        return constants$3031.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
     * }
     */
    public static MemorySegment add_filter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3031.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
     * }
     */
    public static void add_filter$set(MemorySegment seg, MemorySegment x) {
        constants$3031.const$3.set(seg, x);
    }
    public static MemorySegment add_filter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3031.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void add_filter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3031.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_filter add_filter(MemorySegment segment, Arena scope) {
        return add_filter.ofAddress(add_filter$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*remove_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
     * }
     */
    public interface remove_filter {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(remove_filter fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3031.const$4, fi, constants$13.const$4, scope);
        }
        static remove_filter ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove_filter$VH() {
        return constants$3031.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
     * }
     */
    public static MemorySegment remove_filter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3031.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove_filter)(struct _GtkRecentChooser*,struct _GtkRecentFilter*);
     * }
     */
    public static void remove_filter$set(MemorySegment seg, MemorySegment x) {
        constants$3031.const$5.set(seg, x);
    }
    public static MemorySegment remove_filter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3031.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_filter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3031.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_filter remove_filter(MemorySegment segment, Arena scope) {
        return remove_filter.ofAddress(remove_filter$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GSList* (*list_filters)(struct _GtkRecentChooser*);
     * }
     */
    public interface list_filters {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(list_filters fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3032.const$0, fi, constants$5.const$2, scope);
        }
        static list_filters ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle list_filters$VH() {
        return constants$3032.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GSList* (*list_filters)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment list_filters$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3032.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GSList* (*list_filters)(struct _GtkRecentChooser*);
     * }
     */
    public static void list_filters$set(MemorySegment seg, MemorySegment x) {
        constants$3032.const$1.set(seg, x);
    }
    public static MemorySegment list_filters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3032.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void list_filters$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3032.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_filters list_filters(MemorySegment segment, Arena scope) {
        return list_filters.ofAddress(list_filters$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_sort_func)(struct _GtkRecentChooser*,int (*)(struct _GtkRecentInfo*,struct _GtkRecentInfo*,void*),void*,void (*)(void*));
     * }
     */
    public interface set_sort_func {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_sort_func fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3032.const$2, fi, constants$42.const$1, scope);
        }
        static set_sort_func ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_sort_func$VH() {
        return constants$3032.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_sort_func)(struct _GtkRecentChooser*,int (*)(struct _GtkRecentInfo*,struct _GtkRecentInfo*,void*),void*,void (*)(void*));
     * }
     */
    public static MemorySegment set_sort_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3032.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_sort_func)(struct _GtkRecentChooser*,int (*)(struct _GtkRecentInfo*,struct _GtkRecentInfo*,void*),void*,void (*)(void*));
     * }
     */
    public static void set_sort_func$set(MemorySegment seg, MemorySegment x) {
        constants$3032.const$3.set(seg, x);
    }
    public static MemorySegment set_sort_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3032.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_sort_func$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3032.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_sort_func set_sort_func(MemorySegment segment, Arena scope) {
        return set_sort_func.ofAddress(set_sort_func$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*item_activated)(struct _GtkRecentChooser*);
     * }
     */
    public interface item_activated {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(item_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3032.const$4, fi, constants$13.const$1, scope);
        }
        static item_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle item_activated$VH() {
        return constants$3032.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*item_activated)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment item_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3032.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*item_activated)(struct _GtkRecentChooser*);
     * }
     */
    public static void item_activated$set(MemorySegment seg, MemorySegment x) {
        constants$3032.const$5.set(seg, x);
    }
    public static MemorySegment item_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3032.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void item_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3032.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static item_activated item_activated(MemorySegment segment, Arena scope) {
        return item_activated.ofAddress(item_activated$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*selection_changed)(struct _GtkRecentChooser*);
     * }
     */
    public interface selection_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(selection_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3033.const$0, fi, constants$13.const$1, scope);
        }
        static selection_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selection_changed$VH() {
        return constants$3033.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*selection_changed)(struct _GtkRecentChooser*);
     * }
     */
    public static MemorySegment selection_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3033.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*selection_changed)(struct _GtkRecentChooser*);
     * }
     */
    public static void selection_changed$set(MemorySegment seg, MemorySegment x) {
        constants$3033.const$1.set(seg, x);
    }
    public static MemorySegment selection_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3033.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3033.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_changed selection_changed(MemorySegment segment, Arena scope) {
        return selection_changed.ofAddress(selection_changed$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


