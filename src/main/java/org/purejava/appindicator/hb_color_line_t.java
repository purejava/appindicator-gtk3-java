// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct hb_color_line_t {
 *     void* data;
 *     unsigned int (*get_color_stops)(struct hb_color_line_t*,void*,unsigned int,unsigned int*,struct hb_color_stop_t*,void*);
 *     void* get_color_stops_user_data;
 *     enum hb_paint_extend_t (*get_extend)(struct hb_color_line_t*,void*,void*);
 *     void* get_extend_user_data;
 *     void* reserved0;
 *     void* reserved1;
 *     void* reserved2;
 *     void* reserved3;
 *     void* reserved5;
 *     void* reserved6;
 *     void* reserved7;
 *     void* reserved8;
 * };
 * }
 */
public class hb_color_line_t {

    public static MemoryLayout $LAYOUT() {
        return constants$1463.const$4;
    }
    public static VarHandle data$VH() {
        return constants$1463.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1463.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        constants$1463.const$5.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1463.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1463.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned int (*get_color_stops)(struct hb_color_line_t*,void*,unsigned int,unsigned int*,struct hb_color_stop_t*,void*);
     * }
     */
    public interface get_color_stops {

        int apply(java.lang.foreign.MemorySegment color_line, java.lang.foreign.MemorySegment color_line_data, int start, java.lang.foreign.MemorySegment count, java.lang.foreign.MemorySegment color_stops, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_color_stops fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1464.const$0, fi, constants$1247.const$0, scope);
        }
        static get_color_stops ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _color_line, java.lang.foreign.MemorySegment _color_line_data, int _start, java.lang.foreign.MemorySegment _count, java.lang.foreign.MemorySegment _color_stops, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$1463.const$2.invokeExact(symbol, _color_line, _color_line_data, _start, _count, _color_stops, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_color_stops$VH() {
        return constants$1464.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*get_color_stops)(struct hb_color_line_t*,void*,unsigned int,unsigned int*,struct hb_color_stop_t*,void*);
     * }
     */
    public static MemorySegment get_color_stops$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*get_color_stops)(struct hb_color_line_t*,void*,unsigned int,unsigned int*,struct hb_color_stop_t*,void*);
     * }
     */
    public static void get_color_stops$set(MemorySegment seg, MemorySegment x) {
        constants$1464.const$1.set(seg, x);
    }
    public static MemorySegment get_color_stops$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_color_stops$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1464.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_color_stops get_color_stops(MemorySegment segment, Arena scope) {
        return get_color_stops.ofAddress(get_color_stops$get(segment), scope);
    }
    public static VarHandle get_color_stops_user_data$VH() {
        return constants$1464.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* get_color_stops_user_data;
     * }
     */
    public static MemorySegment get_color_stops_user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* get_color_stops_user_data;
     * }
     */
    public static void get_color_stops_user_data$set(MemorySegment seg, MemorySegment x) {
        constants$1464.const$2.set(seg, x);
    }
    public static MemorySegment get_color_stops_user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_color_stops_user_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1464.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * enum hb_paint_extend_t (*get_extend)(struct hb_color_line_t*,void*,void*);
     * }
     */
    public interface get_extend {

        int apply(java.lang.foreign.MemorySegment color_line, java.lang.foreign.MemorySegment color_line_data, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_extend fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1464.const$3, fi, constants$12.const$2, scope);
        }
        static get_extend ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _color_line, java.lang.foreign.MemorySegment _color_line_data, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _color_line, _color_line_data, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_extend$VH() {
        return constants$1464.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum hb_paint_extend_t (*get_extend)(struct hb_color_line_t*,void*,void*);
     * }
     */
    public static MemorySegment get_extend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum hb_paint_extend_t (*get_extend)(struct hb_color_line_t*,void*,void*);
     * }
     */
    public static void get_extend$set(MemorySegment seg, MemorySegment x) {
        constants$1464.const$4.set(seg, x);
    }
    public static MemorySegment get_extend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_extend$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1464.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_extend get_extend(MemorySegment segment, Arena scope) {
        return get_extend.ofAddress(get_extend$get(segment), scope);
    }
    public static VarHandle get_extend_user_data$VH() {
        return constants$1464.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* get_extend_user_data;
     * }
     */
    public static MemorySegment get_extend_user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* get_extend_user_data;
     * }
     */
    public static void get_extend_user_data$set(MemorySegment seg, MemorySegment x) {
        constants$1464.const$5.set(seg, x);
    }
    public static MemorySegment get_extend_user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1464.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_extend_user_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1464.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved0$VH() {
        return constants$1465.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved0;
     * }
     */
    public static MemorySegment reserved0$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved0;
     * }
     */
    public static void reserved0$set(MemorySegment seg, MemorySegment x) {
        constants$1465.const$0.set(seg, x);
    }
    public static MemorySegment reserved0$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved0$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1465.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$1465.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static MemorySegment reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$1465.const$1.set(seg, x);
    }
    public static MemorySegment reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1465.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved2$VH() {
        return constants$1465.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved2;
     * }
     */
    public static MemorySegment reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved2;
     * }
     */
    public static void reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$1465.const$2.set(seg, x);
    }
    public static MemorySegment reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1465.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved3$VH() {
        return constants$1465.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved3;
     * }
     */
    public static MemorySegment reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved3;
     * }
     */
    public static void reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$1465.const$3.set(seg, x);
    }
    public static MemorySegment reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1465.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved5$VH() {
        return constants$1465.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved5;
     * }
     */
    public static MemorySegment reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved5;
     * }
     */
    public static void reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$1465.const$4.set(seg, x);
    }
    public static MemorySegment reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1465.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved6$VH() {
        return constants$1465.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved6;
     * }
     */
    public static MemorySegment reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved6;
     * }
     */
    public static void reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$1465.const$5.set(seg, x);
    }
    public static MemorySegment reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1465.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1465.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved7$VH() {
        return constants$1466.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved7;
     * }
     */
    public static MemorySegment reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1466.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved7;
     * }
     */
    public static void reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$1466.const$0.set(seg, x);
    }
    public static MemorySegment reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1466.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1466.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved8$VH() {
        return constants$1466.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved8;
     * }
     */
    public static MemorySegment reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1466.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved8;
     * }
     */
    public static void reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$1466.const$1.set(seg, x);
    }
    public static MemorySegment reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1466.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1466.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


